
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006278  080001ac  080001ac  000081ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006424  08006424  0000e424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         0000002c  20000000  08006434  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00012e08  2000002c  2000002c  0001002c  2**2
                  ALLOC
  5 ._user_heap_stack 00000400  20012e34  20012e34  0001002c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
  7 .debug_line   00005891  00000000  00000000  0001005a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000ec9d  00000000  00000000  000158eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002db6  00000000  00000000  00024588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e80  00000000  00000000  00027340  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001710  00000000  00000000  000281c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000944e  00000000  00000000  000298d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000059f3  00000000  00000000  00032d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000001f  00000000  00000000  00038711  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00002068  00000000  00000000  00038730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20030000 	andcs	r0, r3, r0
 8000004:	080002f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9}
 8000008:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800000c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000010:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000014:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000018:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
	...
 800002c:	08003369 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, ip, sp}
 8000030:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08003435 	stmdaeq	r0, {r0, r2, r4, r5, sl, ip, sp}
 800003c:	0800348d 	stmdaeq	r0, {r0, r2, r3, r7, sl, ip, sp}
 8000040:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000044:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000048:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800004c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000050:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000054:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000058:	080005a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl}
 800005c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000060:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000064:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000068:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800006c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000070:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000074:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000078:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800007c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000080:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000084:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000088:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800008c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000090:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000094:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000098:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800009c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000a0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000a4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000a8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000ac:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000b0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000b4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000b8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000bc:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000c0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000c4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000c8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000cc:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000d0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000d4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000d8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000dc:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000e0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000e4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000e8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000ec:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000f0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000f4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000f8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000fc:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000100:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000104:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000108:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800010c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000110:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000114:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000118:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800011c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000120:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000124:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000128:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800012c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000130:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000134:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000138:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800013c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000140:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000144:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000148:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800014c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000150:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000154:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000158:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800015c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000160:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000164:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000168:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800016c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000170:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000174:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000178:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800017c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000180:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000184:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000188:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800018c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000190:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000194:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000198:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800019c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80001a0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80001a4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80001a8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}

Disassembly of section .text:

080001ac <memcpy-0x14>:
 80001ac:	08006434 	stmdaeq	r0, {r2, r4, r5, sl, sp, lr}
 80001b0:	20000000 	andcs	r0, r0, r0
 80001b4:	2000002c 	andcs	r0, r0, ip, lsr #32
 80001b8:	2000002c 	andcs	r0, r0, ip, lsr #32
 80001bc:	20012e34 	andcs	r2, r1, r4, lsr lr

080001c0 <memcpy>:
 80001c0:	4684      	mov	ip, r0
 80001c2:	ea41 0300 	orr.w	r3, r1, r0
 80001c6:	f013 0303 	ands.w	r3, r3, #3
 80001ca:	d16d      	bne.n	80002a8 <memcpy+0xe8>
 80001cc:	3a40      	subs	r2, #64	; 0x40
 80001ce:	d341      	bcc.n	8000254 <memcpy+0x94>
 80001d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001d4:	f840 3b04 	str.w	r3, [r0], #4
 80001d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001dc:	f840 3b04 	str.w	r3, [r0], #4
 80001e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001e4:	f840 3b04 	str.w	r3, [r0], #4
 80001e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ec:	f840 3b04 	str.w	r3, [r0], #4
 80001f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f4:	f840 3b04 	str.w	r3, [r0], #4
 80001f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001fc:	f840 3b04 	str.w	r3, [r0], #4
 8000200:	f851 3b04 	ldr.w	r3, [r1], #4
 8000204:	f840 3b04 	str.w	r3, [r0], #4
 8000208:	f851 3b04 	ldr.w	r3, [r1], #4
 800020c:	f840 3b04 	str.w	r3, [r0], #4
 8000210:	f851 3b04 	ldr.w	r3, [r1], #4
 8000214:	f840 3b04 	str.w	r3, [r0], #4
 8000218:	f851 3b04 	ldr.w	r3, [r1], #4
 800021c:	f840 3b04 	str.w	r3, [r0], #4
 8000220:	f851 3b04 	ldr.w	r3, [r1], #4
 8000224:	f840 3b04 	str.w	r3, [r0], #4
 8000228:	f851 3b04 	ldr.w	r3, [r1], #4
 800022c:	f840 3b04 	str.w	r3, [r0], #4
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	f851 3b04 	ldr.w	r3, [r1], #4
 8000244:	f840 3b04 	str.w	r3, [r0], #4
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	3a40      	subs	r2, #64	; 0x40
 8000252:	d2bd      	bcs.n	80001d0 <memcpy+0x10>
 8000254:	3230      	adds	r2, #48	; 0x30
 8000256:	d311      	bcc.n	800027c <memcpy+0xbc>
 8000258:	f851 3b04 	ldr.w	r3, [r1], #4
 800025c:	f840 3b04 	str.w	r3, [r0], #4
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	3a10      	subs	r2, #16
 800027a:	d2ed      	bcs.n	8000258 <memcpy+0x98>
 800027c:	320c      	adds	r2, #12
 800027e:	d305      	bcc.n	800028c <memcpy+0xcc>
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	3a04      	subs	r2, #4
 800028a:	d2f9      	bcs.n	8000280 <memcpy+0xc0>
 800028c:	3204      	adds	r2, #4
 800028e:	d008      	beq.n	80002a2 <memcpy+0xe2>
 8000290:	07d2      	lsls	r2, r2, #31
 8000292:	bf1c      	itt	ne
 8000294:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000298:	f800 3b01 	strbne.w	r3, [r0], #1
 800029c:	d301      	bcc.n	80002a2 <memcpy+0xe2>
 800029e:	880b      	ldrh	r3, [r1, #0]
 80002a0:	8003      	strh	r3, [r0, #0]
 80002a2:	4660      	mov	r0, ip
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	2a08      	cmp	r2, #8
 80002aa:	d313      	bcc.n	80002d4 <memcpy+0x114>
 80002ac:	078b      	lsls	r3, r1, #30
 80002ae:	d08d      	beq.n	80001cc <memcpy+0xc>
 80002b0:	f010 0303 	ands.w	r3, r0, #3
 80002b4:	d08a      	beq.n	80001cc <memcpy+0xc>
 80002b6:	f1c3 0304 	rsb	r3, r3, #4
 80002ba:	1ad2      	subs	r2, r2, r3
 80002bc:	07db      	lsls	r3, r3, #31
 80002be:	bf1c      	itt	ne
 80002c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002c4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002c8:	d380      	bcc.n	80001cc <memcpy+0xc>
 80002ca:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ce:	f820 3b02 	strh.w	r3, [r0], #2
 80002d2:	e77b      	b.n	80001cc <memcpy+0xc>
 80002d4:	3a04      	subs	r2, #4
 80002d6:	d3d9      	bcc.n	800028c <memcpy+0xcc>
 80002d8:	3a01      	subs	r2, #1
 80002da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002de:	f800 3b01 	strb.w	r3, [r0], #1
 80002e2:	d2f9      	bcs.n	80002d8 <memcpy+0x118>
 80002e4:	780b      	ldrb	r3, [r1, #0]
 80002e6:	7003      	strb	r3, [r0, #0]
 80002e8:	784b      	ldrb	r3, [r1, #1]
 80002ea:	7043      	strb	r3, [r0, #1]
 80002ec:	788b      	ldrb	r3, [r1, #2]
 80002ee:	7083      	strb	r3, [r0, #2]
 80002f0:	4660      	mov	r0, ip
 80002f2:	4770      	bx	lr

080002f4 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002f6:	e003      	b.n	8000300 <LoopCopyDataInit>

080002f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 80002fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002fe:	3104      	adds	r1, #4

08000300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 8000304:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000306:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000308:	d3f6      	bcc.n	80002f8 <CopyDataInit>
  ldr  r2, =_sbss
 800030a:	4a09      	ldr	r2, [pc, #36]	; (8000330 <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 800030c:	e002      	b.n	8000314 <LoopFillZerobss>

0800030e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800030e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000310:	f842 3b04 	str.w	r3, [r2], #4

08000314 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <LoopFillZerobss+0x20>)
  cmp  r2, r3
 8000316:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000318:	d3f9      	bcc.n	800030e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800031a:	f000 f80f 	bl	800033c <SystemInit>
/* Call the application's entry point.*/
  bl  main
 800031e:	f000 f959 	bl	80005d4 <main>
  bx  lr    
 8000322:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000324:	08006434 	stmdaeq	r0, {r2, r4, r5, sl, sp, lr}
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000328:	20000000 	andcs	r0, r0, r0
  ldr  r3, =_edata
 800032c:	2000002c 	andcs	r0, r0, ip, lsr #32
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000330:	2000002c 	andcs	r0, r0, ip, lsr #32
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000334:	20012e34 	andcs	r2, r1, r4, lsr lr

08000338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC_IRQHandler>
	...

0800033c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800033c:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000340:	f2ce 0200 	movt	r2, #57344	; 0xe000
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000344:	f44f 5360 	mov.w	r3, #14336	; 0x3800
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000348:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800034c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000354:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000358:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800035a:	2200      	movs	r2, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800035c:	f041 0101 	orr.w	r1, r1, #1
 8000360:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000362:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000364:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000366:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800036a:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800036e:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000372:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8000376:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000378:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800037a:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800037c:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800037e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000382:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000384:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000390:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000392:	461a      	mov	r2, r3
 8000394:	e003      	b.n	800039e <SystemInit+0x62>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000396:	9b00      	ldr	r3, [sp, #0]
 8000398:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800039c:	d009      	beq.n	80003b2 <SystemInit+0x76>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800039e:	6813      	ldr	r3, [r2, #0]
 80003a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a4:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80003a6:	9b00      	ldr	r3, [sp, #0]
 80003a8:	3301      	adds	r3, #1
 80003aa:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003ac:	9b01      	ldr	r3, [sp, #4]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0f1      	beq.n	8000396 <SystemInit+0x5a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80003c0:	bf18      	it	ne
 80003c2:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80003c4:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 80003c6:	9b01      	ldr	r3, [sp, #4]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d008      	beq.n	80003de <SystemInit+0xa2>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003cc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80003d0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80003d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d8:	609a      	str	r2, [r3, #8]
#endif
}
 80003da:	b002      	add	sp, #8
 80003dc:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_VOS;
 80003e6:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80003ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003f0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80003f4:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80003f6:	6811      	ldr	r1, [r2, #0]
 80003f8:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80003fc:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80003fe:	689a      	ldr	r2, [r3, #8]
 8000400:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000402:	689a      	ldr	r2, [r3, #8]
 8000404:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000408:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800040a:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800040c:	f644 3219 	movw	r2, #19225	; 0x4b19
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000410:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000414:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000418:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800041a:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000422:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000424:	4619      	mov	r1, r3
 8000426:	680a      	ldr	r2, [r1, #0]
 8000428:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800042c:	0192      	lsls	r2, r2, #6
 800042e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000432:	d5f8      	bpl.n	8000426 <SystemInit+0xea>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 8000434:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8000438:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800043c:	f240 6104 	movw	r1, #1540	; 0x604
 8000440:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000442:	689a      	ldr	r2, [r3, #8]
 8000444:	f022 0203 	bic.w	r2, r2, #3
 8000448:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800044a:	689a      	ldr	r2, [r3, #8]
 800044c:	f042 0202 	orr.w	r2, r2, #2
 8000450:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000452:	689a      	ldr	r2, [r3, #8]
 8000454:	f002 020c 	and.w	r2, r2, #12
 8000458:	2a08      	cmp	r2, #8
 800045a:	d1fa      	bne.n	8000452 <SystemInit+0x116>
 800045c:	e7b6      	b.n	80003cc <SystemInit+0x90>
 800045e:	bf00      	nop

08000460 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000460:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000464:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000468:	689a      	ldr	r2, [r3, #8]
 800046a:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 800046e:	2a04      	cmp	r2, #4
 8000470:	d03a      	beq.n	80004e8 <SystemCoreClockUpdate+0x88>
 8000472:	2a08      	cmp	r2, #8
 8000474:	d016      	beq.n	80004a4 <SystemCoreClockUpdate+0x44>
 8000476:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 800047a:	f2c0 01f4 	movt	r1, #244	; 0xf4
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800047e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000482:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000486:	f240 0200 	movw	r2, #0
 800048a:	6898      	ldr	r0, [r3, #8]
 800048c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000490:	f3c0 1003 	ubfx	r0, r0, #4, #4
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000494:	f240 0310 	movw	r3, #16
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000498:	5c12      	ldrb	r2, [r2, r0]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800049a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800049e:	40d1      	lsrs	r1, r2
 80004a0:	6019      	str	r1, [r3, #0]
 80004a2:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004a4:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004a6:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80004a8:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004ac:	6858      	ldr	r0, [r3, #4]
 80004ae:	bf15      	itete	ne
 80004b0:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004b4:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004b8:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004bc:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004c0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004c4:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80004c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004d0:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80004da:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004dc:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80004e0:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 80004e2:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 80004e6:	e7ca      	b.n	800047e <SystemCoreClockUpdate+0x1e>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 80004e8:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80004ec:	f2c0 017a 	movt	r1, #122	; 0x7a
 80004f0:	e7c5      	b.n	800047e <SystemCoreClockUpdate+0x1e>
 80004f2:	bf00      	nop

080004f4 <RCC_Configuration>:
#include "stm32f4xx.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_syscfg.h"

void RCC_Configuration(void)
{
 80004f4:	b508      	push	{r3, lr}
	/* GPIOA clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80004f6:	2040      	movs	r0, #64	; 0x40
 80004f8:	2101      	movs	r1, #1
 80004fa:	f003 fc73 	bl	8003de4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80004fe:	2001      	movs	r0, #1
 8000500:	4601      	mov	r1, r0
}
 8000502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void RCC_Configuration(void)
{
	/* GPIOA clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000506:	f003 bc6d 	b.w	8003de4 <RCC_AHB1PeriphClockCmd>
 800050a:	bf00      	nop

0800050c <GPIO_Configuration>:
}

void GPIO_Configuration(void)
{
 800050c:	b530      	push	{r4, r5, lr}
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOG, &GPIO_InitStructure);
 800050e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
}

void GPIO_Configuration(void)
{
 8000512:	b085      	sub	sp, #20
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000514:	2400      	movs	r4, #0
}

void GPIO_Configuration(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 8000516:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800051a:	2301      	movs	r3, #1
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800051c:	2503      	movs	r5, #3
	GPIO_Init(GPIOG, &GPIO_InitStructure);
 800051e:	4669      	mov	r1, sp
 8000520:	f2c4 0002 	movt	r0, #16386	; 0x4002
}

void GPIO_Configuration(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 8000524:	9200      	str	r2, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000526:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800052a:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800052e:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000532:	f88d 5005 	strb.w	r5, [sp, #5]
	GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000536:	f003 f9cb 	bl	80038d0 <GPIO_Init>
	GPIO_InitStructure_b.GPIO_Pin = GPIO_Pin_10;
	GPIO_InitStructure_b.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure_b.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure_b.GPIO_PuPd = GPIO_PuPd_DOWN;
	GPIO_InitStructure_b.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure_b);
 800053a:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOG, &GPIO_InitStructure);


	GPIO_InitTypeDef GPIO_InitStructure_b;
	GPIO_InitStructure_b.GPIO_Pin = GPIO_Pin_10;
 800053c:	f44f 6280 	mov.w	r2, #1024	; 0x400
	GPIO_InitStructure_b.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure_b.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure_b.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000540:	2302      	movs	r3, #2
	GPIO_InitStructure_b.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure_b);
 8000542:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000546:	a902      	add	r1, sp, #8
	GPIO_Init(GPIOG, &GPIO_InitStructure);


	GPIO_InitTypeDef GPIO_InitStructure_b;
	GPIO_InitStructure_b.GPIO_Pin = GPIO_Pin_10;
	GPIO_InitStructure_b.GPIO_Mode = GPIO_Mode_IN;
 8000548:	f88d 400c 	strb.w	r4, [sp, #12]
	GPIO_InitStructure_b.GPIO_OType = GPIO_OType_PP;
 800054c:	f88d 400e 	strb.w	r4, [sp, #14]
	GPIO_InitStructure_b.GPIO_PuPd = GPIO_PuPd_DOWN;
	GPIO_InitStructure_b.GPIO_Speed = GPIO_Speed_100MHz;
 8000550:	f88d 500d 	strb.w	r5, [sp, #13]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOG, &GPIO_InitStructure);


	GPIO_InitTypeDef GPIO_InitStructure_b;
	GPIO_InitStructure_b.GPIO_Pin = GPIO_Pin_10;
 8000554:	9202      	str	r2, [sp, #8]
	GPIO_InitStructure_b.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure_b.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure_b.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000556:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure_b.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure_b);
 800055a:	f003 f9b9 	bl	80038d0 <GPIO_Init>
}
 800055e:	b005      	add	sp, #20
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <Interrupts_Configuration>:

void Interrupts_Configuration(void)
{
 8000564:	b510      	push	{r4, lr}
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	 
	/* Connect EXTI Line 0 to the button GPIO Pin */
   	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, GPIO_PinSource0);
 8000566:	2000      	movs	r0, #0
	GPIO_InitStructure_b.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure_b);
}

void Interrupts_Configuration(void)
{
 8000568:	b084      	sub	sp, #16
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	 
	/* Connect EXTI Line 0 to the button GPIO Pin */
   	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, GPIO_PinSource0);
 800056a:	4601      	mov	r1, r0
 800056c:	f003 ffb2 	bl	80044d4 <SYSCFG_EXTILineConfig>
 
	/* Configure the EXTI line to generate an interrupt when the button is
	 * pressed.  The button pin is high when pressed, so it needs to trigger
	 * when rising from low to high. */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8000570:	2401      	movs	r4, #1
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000572:	2200      	movs	r2, #0
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000574:	2310      	movs	r3, #16
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);
 8000576:	a802      	add	r0, sp, #8
 
	/* Configure the EXTI line to generate an interrupt when the button is
	 * pressed.  The button pin is high when pressed, so it needs to trigger
	 * when rising from low to high. */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000578:	f88d 200c 	strb.w	r2, [sp, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 800057c:	f88d 300d 	strb.w	r3, [sp, #13]
   	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, GPIO_PinSource0);
 
	/* Configure the EXTI line to generate an interrupt when the button is
	 * pressed.  The button pin is high when pressed, so it needs to trigger
	 * when rising from low to high. */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8000580:	9402      	str	r4, [sp, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000582:	f88d 400e 	strb.w	r4, [sp, #14]
	EXTI_Init(&EXTI_InitStructure);
 8000586:	f004 fe69 	bl	800525c <EXTI_Init>
	 
	/* Enable and set Button EXTI Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800058a:	230f      	movs	r3, #15
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);
	 
	/* Enable and set Button EXTI Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 800058c:	2206      	movs	r2, #6
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800058e:	a801      	add	r0, sp, #4
	 
	/* Enable and set Button EXTI Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000590:	f88d 4007 	strb.w	r4, [sp, #7]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);
	 
	/* Enable and set Button EXTI Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8000594:	f88d 2004 	strb.w	r2, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000598:	f88d 3005 	strb.w	r3, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 800059c:	f88d 3006 	strb.w	r3, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80005a0:	f003 f876 	bl	8003690 <NVIC_Init>

}
 80005a4:	b004      	add	sp, #16
 80005a6:	bd10      	pop	{r4, pc}

080005a8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80005a8:	b508      	push	{r3, lr}
	if(EXTI_GetFlagStatus(EXTI_Line0) != RESET)
 80005aa:	2001      	movs	r0, #1
 80005ac:	f004 fea6 	bl	80052fc <EXTI_GetFlagStatus>
 80005b0:	b900      	cbnz	r0, 80005b4 <EXTI0_IRQHandler+0xc>
 80005b2:	bd08      	pop	{r3, pc}
	{
		//GPIO_ToggleBits(GPIOG, GPIO_Pin_13);

		GPIOG->ODR = GPIOA->IDR << 13;		
 80005b4:	2200      	movs	r2, #0
 80005b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005be:	6912      	ldr	r2, [r2, #16]
 80005c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005c4:	0352      	lsls	r2, r2, #13
 80005c6:	615a      	str	r2, [r3, #20]
		EXTI_ClearITPendingBit(EXTI_Line0);
 80005c8:	2001      	movs	r0, #1
	}
}
 80005ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if(EXTI_GetFlagStatus(EXTI_Line0) != RESET)
	{
		//GPIO_ToggleBits(GPIOG, GPIO_Pin_13);

		GPIOG->ODR = GPIOA->IDR << 13;		
		EXTI_ClearITPendingBit(EXTI_Line0);
 80005ce:	f004 beaf 	b.w	8005330 <EXTI_ClearITPendingBit>
 80005d2:	bf00      	nop

080005d4 <main>:
}

uint8_t status = 0;

int main()
{
 80005d4:	b508      	push	{r3, lr}
	RCC_Configuration();
 80005d6:	f7ff ff8d 	bl	80004f4 <RCC_Configuration>
	GPIO_Configuration();
 80005da:	f7ff ff97 	bl	800050c <GPIO_Configuration>
 80005de:	e7fe      	b.n	80005de <main+0xa>

080005e0 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
 80005e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005e4:	4607      	mov	r7, r0
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
 80005e6:	2038      	movs	r0, #56	; 0x38
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
 80005e8:	460e      	mov	r6, r1
 80005ea:	4690      	mov	r8, r2
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
 80005ec:	f002 fffe 	bl	80035ec <pvPortMalloc>
	if( pxCoRoutine )
 80005f0:	4604      	mov	r4, r0
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d05d      	beq.n	80006b2 <xCoRoutineCreate+0xd2>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
 80005f6:	f240 035c 	movw	r3, #92	; 0x5c
 80005fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	b36a      	cbz	r2, 800065e <xCoRoutineCreate+0x7e>

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
		pxCoRoutine->uxPriority = uxPriority;
		pxCoRoutine->uxIndex = uxIndex;
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 8000602:	4625      	mov	r5, r4
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
 8000604:	2300      	movs	r3, #0
 8000606:	2e01      	cmp	r6, #1
 8000608:	bf28      	it	cs
 800060a:	2601      	movcs	r6, #1
 800060c:	86a3      	strh	r3, [r4, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
 800060e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
 8000610:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 8000614:	f845 7b04 	str.w	r7, [r5], #4

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 8000618:	4628      	mov	r0, r5
 800061a:	f000 fb2d 	bl	8000c78 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 800061e:	f104 0018 	add.w	r0, r4, #24
 8000622:	f000 fb29 	bl	8000c78 <vListInitialiseItem>
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 8000626:	f240 02a8 	movw	r2, #168	; 0xa8
 800062a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800062e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000630:	6811      	ldr	r1, [r2, #0]
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 8000632:	6124      	str	r4, [r4, #16]
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 8000634:	428b      	cmp	r3, r1
 8000636:	f240 0080 	movw	r0, #128	; 0x80
 800063a:	bf88      	it	hi
 800063c:	6013      	strhi	r3, [r2, #0]
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
 800063e:	f1c6 0602 	rsb	r6, r6, #2

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 8000642:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000646:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800064a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
 800064e:	61a6      	str	r6, [r4, #24]

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 8000650:	6264      	str	r4, [r4, #36]	; 0x24
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 8000652:	4629      	mov	r1, r5
 8000654:	f000 fb14 	bl	8000c80 <vListInsertEnd>

		xReturn = pdPASS;
 8000658:	2001      	movs	r0, #1
 800065a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 800065e:	f240 0080 	movw	r0, #128	; 0x80
 8000662:	f2c2 0000 	movt	r0, #8192	; 0x2000
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
 8000666:	f240 0930 	movw	r9, #48	; 0x30
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
		{
			pxCurrentCoRoutine = pxCoRoutine;
 800066a:	601c      	str	r4, [r3, #0]
	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
 800066c:	f2c2 0900 	movt	r9, #8192	; 0x2000
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 8000670:	f000 faf6 	bl	8000c60 <vListInitialise>
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
 8000674:	f240 0560 	movw	r5, #96	; 0x60
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <xCoRoutineCreate+0xdc>)
 800067a:	f000 faf1 	bl	8000c60 <vListInitialise>
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
 800067e:	f2c2 0500 	movt	r5, #8192	; 0x2000
	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
 8000682:	4648      	mov	r0, r9
 8000684:	f000 faec 	bl	8000c60 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
 8000688:	4628      	mov	r0, r5
 800068a:	f000 fae9 	bl	8000c60 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
 800068e:	f240 0048 	movw	r0, #72	; 0x48
 8000692:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000696:	f000 fae3 	bl	8000c60 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 800069a:	f240 027c 	movw	r2, #124	; 0x7c
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 800069e:	f240 03ac 	movw	r3, #172	; 0xac
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 80006a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 80006a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 80006aa:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 80006ae:	601d      	str	r5, [r3, #0]
 80006b0:	e7a7      	b.n	8000602 <xCoRoutineCreate+0x22>

		xReturn = pdPASS;
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80006b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return xReturn;
}
 80006b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006ba:	bf00      	nop
 80006bc:	20000094 	mulcs	r0, r4, r0

080006c0 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 80006c2:	f240 0574 	movw	r5, #116	; 0x74

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 80006c6:	f240 045c 	movw	r4, #92	; 0x5c
{
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 80006ca:	f2c2 0500 	movt	r5, #8192	; 0x2000

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 80006ce:	f2c2 0400 	movt	r4, #8192	; 0x2000
{
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 80006d2:	682e      	ldr	r6, [r5, #0]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 80006d4:	6823      	ldr	r3, [r4, #0]
{
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 80006d6:	4406      	add	r6, r0

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 80006d8:	1d18      	adds	r0, r3, #4
	return xReturn;
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
 80006da:	460f      	mov	r7, r1
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 80006dc:	f000 fafa 	bl	8000cd4 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xCoRoutineTickCount )
 80006e0:	682a      	ldr	r2, [r5, #0]
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 80006e2:	6821      	ldr	r1, [r4, #0]

	if( xTimeToWake < xCoRoutineTickCount )
 80006e4:	4296      	cmp	r6, r2
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 80006e6:	bf35      	itete	cc
 80006e8:	f240 02ac 	movwcc	r2, #172	; 0xac
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 80006ec:	f240 027c 	movwcs	r2, #124	; 0x7c

	if( xTimeToWake < xCoRoutineTickCount )
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 80006f0:	f2c2 0200 	movtcc	r2, #8192	; 0x2000
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 80006f4:	f2c2 0200 	movtcs	r2, #8192	; 0x2000
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 80006f8:	604e      	str	r6, [r1, #4]
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 80006fa:	6810      	ldr	r0, [r2, #0]
 80006fc:	3104      	adds	r1, #4
 80006fe:	f000 facf 	bl	8000ca0 <vListInsert>
	}

	if( pxEventList )
 8000702:	b137      	cbz	r7, 8000712 <vCoRoutineAddToDelayedList+0x52>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 8000704:	6821      	ldr	r1, [r4, #0]
 8000706:	4638      	mov	r0, r7
 8000708:	3118      	adds	r1, #24
	}
}
 800070a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	if( pxEventList )
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 800070e:	f000 bac7 	b.w	8000ca0 <vListInsert>
 8000712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000714 <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
 8000714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 8000718:	f240 0648 	movw	r6, #72	; 0x48
 800071c:	f2c2 0600 	movt	r6, #8192	; 0x2000
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
 8000720:	b085      	sub	sp, #20
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 8000722:	6833      	ldr	r3, [r6, #0]
 8000724:	f240 07a8 	movw	r7, #168	; 0xa8
 8000728:	2b00      	cmp	r3, #0
 800072a:	f000 80e1 	beq.w	80008f0 <vCoRoutineSchedule+0x1dc>
 800072e:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8000732:	f240 0880 	movw	r8, #128	; 0x80
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
 8000736:	46b9      	mov	r9, r7
 8000738:	f2c2 0800 	movt	r8, #8192	; 0x2000
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
 800073c:	f002 fe30 	bl	80033a0 <ulPortSetInterruptMask>
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
 8000740:	68f3      	ldr	r3, [r6, #12]
 8000742:	68dc      	ldr	r4, [r3, #12]
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 8000744:	f104 0018 	add.w	r0, r4, #24
 8000748:	f000 fac4 	bl	8000cd4 <uxListRemove>
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 800074c:	1d25      	adds	r5, r4, #4
		portDISABLE_INTERRUPTS();
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();
 800074e:	2000      	movs	r0, #0
 8000750:	f002 fe5a 	bl	8003408 <vPortClearInterruptMask>

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 8000754:	4628      	mov	r0, r5
 8000756:	f000 fabd 	bl	8000cd4 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
 800075a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8000762:	4293      	cmp	r3, r2
 8000764:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8000768:	4629      	mov	r1, r5
 800076a:	bf88      	it	hi
 800076c:	f8c9 3000 	strhi.w	r3, [r9]
 8000770:	f000 fa86 	bl	8000c80 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 8000774:	6833      	ldr	r3, [r6, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1e0      	bne.n	800073c <vCoRoutineSchedule+0x28>

static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 800077a:	f240 0278 	movw	r2, #120	; 0x78
 800077e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000782:	9203      	str	r2, [sp, #12]
 8000784:	f001 fcb8 	bl	80020f8 <xTaskGetTickCount>
 8000788:	9c03      	ldr	r4, [sp, #12]
 800078a:	f240 0674 	movw	r6, #116	; 0x74
 800078e:	6823      	ldr	r3, [r4, #0]
 8000790:	f240 0244 	movw	r2, #68	; 0x44
 8000794:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000798:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800079c:	1ac0      	subs	r0, r0, r3
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 800079e:	f240 04ac 	movw	r4, #172	; 0xac

static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 80007a2:	9201      	str	r2, [sp, #4]
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
 80007a4:	f240 0b7c 	movw	fp, #124	; 0x7c
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
 80007a8:	f240 09a8 	movw	r9, #168	; 0xa8

static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 80007ac:	6010      	str	r0, [r2, #0]
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 80007ae:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80007b2:	6832      	ldr	r2, [r6, #0]
 80007b4:	9402      	str	r4, [sp, #8]

static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 80007b6:	4603      	mov	r3, r0
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
 80007b8:	f2c2 0b00 	movt	fp, #8192	; 0x2000
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
 80007bc:	f2c2 0900 	movt	r9, #8192	; 0x2000
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d047      	beq.n	8000854 <vCoRoutineSchedule+0x140>
	{
		xCoRoutineTickCount++;
		xPassedTicks--;
 80007c4:	1e58      	subs	r0, r3, #1
 80007c6:	9b01      	ldr	r3, [sp, #4]
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
 80007c8:	3201      	adds	r2, #1
 80007ca:	6032      	str	r2, [r6, #0]
		xPassedTicks--;
 80007cc:	6018      	str	r0, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
 80007ce:	2a00      	cmp	r2, #0
 80007d0:	d05f      	beq.n	8000892 <vCoRoutineSchedule+0x17e>
 80007d2:	f8db 1000 	ldr.w	r1, [fp]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 80007d6:	680b      	ldr	r3, [r1, #0]
 80007d8:	f240 057c 	movw	r5, #124	; 0x7c
 80007dc:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d064      	beq.n	80008ae <vCoRoutineSchedule+0x19a>
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 80007e4:	68cb      	ldr	r3, [r1, #12]
 80007e6:	f8d3 a00c 	ldr.w	sl, [r3, #12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
 80007ea:	f8da 1004 	ldr.w	r1, [sl, #4]
 80007ee:	428a      	cmp	r2, r1
 80007f0:	d208      	bcs.n	8000804 <vCoRoutineSchedule+0xf0>
 80007f2:	e05c      	b.n	80008ae <vCoRoutineSchedule+0x19a>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 80007f4:	68db      	ldr	r3, [r3, #12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
 80007f6:	6832      	ldr	r2, [r6, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 80007f8:	f8d3 a00c 	ldr.w	sl, [r3, #12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
 80007fc:	f8da 1004 	ldr.w	r1, [sl, #4]
 8000800:	4291      	cmp	r1, r2
 8000802:	d822      	bhi.n	800084a <vCoRoutineSchedule+0x136>
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				uxListRemove( &( pxCRCB->xGenericListItem ) );
 8000804:	f10a 0404 	add.w	r4, sl, #4
			{
				/* Timeout not yet expired. */
				break;
			}

			portDISABLE_INTERRUPTS();
 8000808:	f002 fdca 	bl	80033a0 <ulPortSetInterruptMask>
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				uxListRemove( &( pxCRCB->xGenericListItem ) );
 800080c:	4620      	mov	r0, r4
 800080e:	f000 fa61 	bl	8000cd4 <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
 8000812:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
 8000816:	f10a 0018 	add.w	r0, sl, #24
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				uxListRemove( &( pxCRCB->xGenericListItem ) );

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
 800081a:	b10a      	cbz	r2, 8000820 <vCoRoutineSchedule+0x10c>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
 800081c:	f000 fa5a 	bl	8000cd4 <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
 8000820:	2000      	movs	r0, #0
 8000822:	f002 fdf1 	bl	8003408 <vPortClearInterruptMask>

			prvAddCoRoutineToReadyQueue( pxCRCB );
 8000826:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8000830:	4293      	cmp	r3, r2
 8000832:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8000836:	4621      	mov	r1, r4
 8000838:	bf88      	it	hi
 800083a:	f8c9 3000 	strhi.w	r3, [r9]
 800083e:	f000 fa1f 	bl	8000c80 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 8000842:	682b      	ldr	r3, [r5, #0]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	2a00      	cmp	r2, #0
 8000848:	d1d4      	bne.n	80007f4 <vCoRoutineSchedule+0xe0>
 800084a:	9c01      	ldr	r4, [sp, #4]
 800084c:	6832      	ldr	r2, [r6, #0]
 800084e:	6823      	ldr	r3, [r4, #0]
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1b7      	bne.n	80007c4 <vCoRoutineSchedule+0xb0>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 8000854:	6839      	ldr	r1, [r7, #0]

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
 8000856:	9c03      	ldr	r4, [sp, #12]
 8000858:	6022      	str	r2, [r4, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 800085a:	008a      	lsls	r2, r1, #2
 800085c:	1854      	adds	r4, r2, r1
 800085e:	f240 0080 	movw	r0, #128	; 0x80
 8000862:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8000866:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800086a:	bb2c      	cbnz	r4, 80008b8 <vCoRoutineSchedule+0x1a4>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
 800086c:	b171      	cbz	r1, 800088c <vCoRoutineSchedule+0x178>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
 800086e:	1e4a      	subs	r2, r1, #1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 8000870:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8000874:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8000878:	b9dc      	cbnz	r4, 80008b2 <vCoRoutineSchedule+0x19e>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
 800087a:	2a00      	cmp	r2, #0
 800087c:	d03f      	beq.n	80008fe <vCoRoutineSchedule+0x1ea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
 800087e:	1e8a      	subs	r2, r1, #2

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 8000880:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8000884:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000888:	b99b      	cbnz	r3, 80008b2 <vCoRoutineSchedule+0x19e>
 800088a:	603a      	str	r2, [r7, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
}
 800088c:	b005      	add	sp, #20
 800088e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 8000892:	9c02      	ldr	r4, [sp, #8]
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
 8000894:	f8db 3000 	ldr.w	r3, [fp]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 8000898:	6821      	ldr	r1, [r4, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
 800089a:	6023      	str	r3, [r4, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 800089c:	680b      	ldr	r3, [r1, #0]
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 800089e:	f8cb 1000 	str.w	r1, [fp]
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
 80008a2:	f240 057c 	movw	r5, #124	; 0x7c
 80008a6:	f2c2 0500 	movt	r5, #8192	; 0x2000
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d19a      	bne.n	80007e4 <vCoRoutineSchedule+0xd0>
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
 80008ae:	4603      	mov	r3, r0
 80008b0:	e786      	b.n	80007c0 <vCoRoutineSchedule+0xac>
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
 80008b2:	4611      	mov	r1, r2
 80008b4:	603a      	str	r2, [r7, #0]
 80008b6:	0092      	lsls	r2, r2, #2
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
 80008b8:	440a      	add	r2, r1
 80008ba:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 80008be:	f108 0208 	add.w	r2, r8, #8
 80008c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	4293      	cmp	r3, r2
 80008ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80008ce:	bf04      	itt	eq
 80008d0:	685b      	ldreq	r3, [r3, #4]
 80008d2:	f8c8 3004 	streq.w	r3, [r8, #4]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	f240 025c 	movw	r2, #92	; 0x5c

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 80008dc:	4618      	mov	r0, r3
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
 80008de:	f2c2 0200 	movt	r2, #8192	; 0x2000

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 80008e2:	6b01      	ldr	r1, [r0, #48]	; 0x30
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
 80008e4:	6013      	str	r3, [r2, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4798      	blx	r3

	return;
}
 80008ea:	b005      	add	sp, #20
 80008ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008f0:	f240 0880 	movw	r8, #128	; 0x80
 80008f4:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80008f8:	f2c2 0800 	movt	r8, #8192	; 0x2000
 80008fc:	e73d      	b.n	800077a <vCoRoutineSchedule+0x66>
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
 80008fe:	461a      	mov	r2, r3
 8000900:	e7c3      	b.n	800088a <vCoRoutineSchedule+0x176>
 8000902:	bf00      	nop

08000904 <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
 8000904:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8000906:	68c3      	ldr	r3, [r0, #12]
 8000908:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 800090a:	f104 0518 	add.w	r5, r4, #24
 800090e:	4628      	mov	r0, r5
 8000910:	f000 f9e0 	bl	8000cd4 <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
 8000914:	f240 0048 	movw	r0, #72	; 0x48
 8000918:	4629      	mov	r1, r5
 800091a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800091e:	f000 f9af 	bl	8000c80 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 8000922:	f240 035c 	movw	r3, #92	; 0x5c
 8000926:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800092a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
 8000930:	4298      	cmp	r0, r3
 8000932:	bf34      	ite	cc
 8000934:	2000      	movcc	r0, #0
 8000936:	2001      	movcs	r0, #1
 8000938:	bd38      	pop	{r3, r4, r5, pc}
 800093a:	bf00      	nop

0800093c <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
 800093c:	b510      	push	{r4, lr}
EventGroup_t *pxEventBits;

	pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
 800093e:	201c      	movs	r0, #28
 8000940:	f002 fe54 	bl	80035ec <pvPortMalloc>
	if( pxEventBits != NULL )
 8000944:	4604      	mov	r4, r0
 8000946:	b120      	cbz	r0, 8000952 <xEventGroupCreate+0x16>
	{
		pxEventBits->uxEventBits = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	f840 3b04 	str.w	r3, [r0], #4
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800094e:	f000 f987 	bl	8000c60 <vListInitialise>
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
}
 8000952:	4620      	mov	r0, r4
 8000954:	bd10      	pop	{r4, pc}
 8000956:	bf00      	nop

08000958 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8000958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800095c:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8000960:	460c      	mov	r4, r1
 8000962:	4606      	mov	r6, r0
 8000964:	4617      	mov	r7, r2
 8000966:	4698      	mov	r8, r3
 8000968:	f8dd 9020 	ldr.w	r9, [sp, #32]
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800096c:	d116      	bne.n	800099c <xEventGroupWaitBits+0x44>
	configASSERT( uxBitsToWaitFor != 0 );
 800096e:	b911      	cbnz	r1, 8000976 <xEventGroupWaitBits+0x1e>
 8000970:	f002 fd16 	bl	80033a0 <ulPortSetInterruptMask>
 8000974:	e7fe      	b.n	8000974 <xEventGroupWaitBits+0x1c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000976:	f002 f9cd 	bl	8002d14 <xTaskGetSchedulerState>
 800097a:	b910      	cbnz	r0, 8000982 <xEventGroupWaitBits+0x2a>
 800097c:	f1b9 0f00 	cmp.w	r9, #0
 8000980:	d10f      	bne.n	80009a2 <xEventGroupWaitBits+0x4a>
	}
	#endif

	vTaskSuspendAll();
 8000982:	f001 fbb1 	bl	80020e8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8000986:	6835      	ldr	r5, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8000988:	f1b8 0f00 	cmp.w	r8, #0
 800098c:	d10c      	bne.n	80009a8 <xEventGroupWaitBits+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800098e:	422c      	tst	r4, r5
 8000990:	d00e      	beq.n	80009b0 <xEventGroupWaitBits+0x58>
			block. */
			uxReturn = uxCurrentEventBits;
			xTicksToWait = ( TickType_t ) 0;

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8000992:	b187      	cbz	r7, 80009b6 <xEventGroupWaitBits+0x5e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000994:	ea25 0404 	bic.w	r4, r5, r4
 8000998:	6034      	str	r4, [r6, #0]
 800099a:	e00c      	b.n	80009b6 <xEventGroupWaitBits+0x5e>
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800099c:	f002 fd00 	bl	80033a0 <ulPortSetInterruptMask>
 80009a0:	e7fe      	b.n	80009a0 <xEventGroupWaitBits+0x48>
	configASSERT( uxBitsToWaitFor != 0 );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80009a2:	f002 fcfd 	bl	80033a0 <ulPortSetInterruptMask>
 80009a6:	e7fe      	b.n	80009a6 <xEventGroupWaitBits+0x4e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80009a8:	ea04 0305 	and.w	r3, r4, r5
 80009ac:	429c      	cmp	r4, r3
 80009ae:	d0f0      	beq.n	8000992 <xEventGroupWaitBits+0x3a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80009b0:	f1b9 0f00 	cmp.w	r9, #0
 80009b4:	d104      	bne.n	80009c0 <xEventGroupWaitBits+0x68>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80009b6:	f001 fc7d 	bl	80022b4 <xTaskResumeAll>
			uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
		}
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
	return uxReturn;
}
 80009ba:	4628      	mov	r0, r5
 80009bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80009c0:	2f00      	cmp	r7, #0
 80009c2:	bf14      	ite	ne
 80009c4:	f04f 61a0 	movne.w	r1, #83886080	; 0x5000000
 80009c8:	f04f 6180 	moveq.w	r1, #67108864	; 0x4000000
 80009cc:	bf14      	ite	ne
 80009ce:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80009d2:	2300      	moveq	r3, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80009d4:	f1b8 0f00 	cmp.w	r8, #0
 80009d8:	bf08      	it	eq
 80009da:	4619      	moveq	r1, r3
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80009dc:	464a      	mov	r2, r9
 80009de:	4321      	orrs	r1, r4
 80009e0:	1d30      	adds	r0, r6, #4
 80009e2:	f002 f81f 	bl	8002a24 <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80009e6:	f001 fc65 	bl	80022b4 <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
 80009ea:	b908      	cbnz	r0, 80009f0 <xEventGroupWaitBits+0x98>
		{
			portYIELD_WITHIN_API();
 80009ec:	f002 fccc 	bl	8003388 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80009f0:	f002 fa08 	bl	8002e04 <uxTaskResetEventItemValue>

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80009f4:	0183      	lsls	r3, r0, #6
		}
		else
		{
			/* The task unblocked because the bits were set.  Clear the control
			bits before returning the value. */
			uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80009f6:	bf48      	it	mi
 80009f8:	f020 457f 	bicmi.w	r5, r0, #4278190080	; 0xff000000
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80009fc:	d4dd      	bmi.n	80009ba <xEventGroupWaitBits+0x62>
		{
			taskENTER_CRITICAL();
 80009fe:	f002 fcf3 	bl	80033e8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8000a02:	6835      	ldr	r5, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8000a04:	f1b8 0f00 	cmp.w	r8, #0
 8000a08:	d108      	bne.n	8000a1c <xEventGroupWaitBits+0xc4>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8000a0a:	422c      	tst	r4, r5
 8000a0c:	d003      	beq.n	8000a16 <xEventGroupWaitBits+0xbe>

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
				{
					if( xClearOnExit != pdFALSE )
 8000a0e:	b117      	cbz	r7, 8000a16 <xEventGroupWaitBits+0xbe>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000a10:	ea25 0404 	bic.w	r4, r5, r4
 8000a14:	6034      	str	r4, [r6, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8000a16:	f002 fcfb 	bl	8003410 <vPortExitCritical>
 8000a1a:	e7ce      	b.n	80009ba <xEventGroupWaitBits+0x62>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000a1c:	ea04 0305 	and.w	r3, r4, r5
 8000a20:	429c      	cmp	r4, r3
 8000a22:	d1f8      	bne.n	8000a16 <xEventGroupWaitBits+0xbe>
 8000a24:	e7f3      	b.n	8000a0e <xEventGroupWaitBits+0xb6>
 8000a26:	bf00      	nop

08000a28 <xEventGroupClearBits>:
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000a28:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	460c      	mov	r4, r1
 8000a30:	4606      	mov	r6, r0
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000a32:	d002      	beq.n	8000a3a <xEventGroupClearBits+0x12>
 8000a34:	f002 fcb4 	bl	80033a0 <ulPortSetInterruptMask>
 8000a38:	e7fe      	b.n	8000a38 <xEventGroupClearBits+0x10>

	taskENTER_CRITICAL();
 8000a3a:	f002 fcd5 	bl	80033e8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8000a3e:	6835      	ldr	r5, [r6, #0]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000a40:	ea25 0404 	bic.w	r4, r5, r4
 8000a44:	6034      	str	r4, [r6, #0]
	}
	taskEXIT_CRITICAL();
 8000a46:	f002 fce3 	bl	8003410 <vPortExitCritical>

	return uxReturn;
}
 8000a4a:	4628      	mov	r0, r5
 8000a4c:	bd70      	pop	{r4, r5, r6, pc}
 8000a4e:	bf00      	nop

08000a50 <xEventGroupClearBitsFromISR>:
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000a50:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	460e      	mov	r6, r1
 8000a58:	4605      	mov	r5, r0
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000a5a:	d002      	beq.n	8000a62 <xEventGroupClearBitsFromISR+0x12>
 8000a5c:	f002 fca0 	bl	80033a0 <ulPortSetInterruptMask>
 8000a60:	e7fe      	b.n	8000a60 <xEventGroupClearBitsFromISR+0x10>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000a62:	f002 fc9d 	bl	80033a0 <ulPortSetInterruptMask>
	{
		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8000a66:	682c      	ldr	r4, [r5, #0]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000a68:	ea24 0606 	bic.w	r6, r4, r6
 8000a6c:	602e      	str	r6, [r5, #0]
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000a6e:	f002 fccb 	bl	8003408 <vPortClearInterruptMask>

	return uxReturn;
}
 8000a72:	4620      	mov	r0, r4
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
 8000a76:	bf00      	nop

08000a78 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000a7a:	f011 457f 	ands.w	r5, r1, #4278190080	; 0xff000000
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8000a7e:	460e      	mov	r6, r1
 8000a80:	4604      	mov	r4, r0
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000a82:	d002      	beq.n	8000a8a <xEventGroupSetBits+0x12>
 8000a84:	f002 fc8c 	bl	80033a0 <ulPortSetInterruptMask>
 8000a88:	e7fe      	b.n	8000a88 <xEventGroupSetBits+0x10>

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	vTaskSuspendAll();
 8000a8a:	f001 fb2d 	bl	80020e8 <vTaskSuspendAll>
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000a8e:	6821      	ldr	r1, [r4, #0]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	vTaskSuspendAll();
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8000a90:	6920      	ldr	r0, [r4, #16]

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000a92:	4331      	orrs	r1, r6
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a94:	f104 060c 	add.w	r6, r4, #12

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000a98:	4286      	cmp	r6, r0
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000a9a:	6021      	str	r1, [r4, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000a9c:	d10d      	bne.n	8000aba <xEventGroupSetBits+0x42>
 8000a9e:	e020      	b.n	8000ae2 <xEventGroupSetBits+0x6a>
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000aa0:	4219      	tst	r1, r3
 8000aa2:	d007      	beq.n	8000ab4 <xEventGroupSetBits+0x3c>
			}

			if( xMatchFound != pdFALSE )
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000aa4:	01d2      	lsls	r2, r2, #7
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000aa6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
			if( xMatchFound != pdFALSE )
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8000aaa:	bf48      	it	mi
 8000aac:	431d      	orrmi	r5, r3
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000aae:	f002 f88f 	bl	8002bd0 <xTaskRemoveFromUnorderedEventList>
 8000ab2:	6821      	ldr	r1, [r4, #0]

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000ab4:	42be      	cmp	r6, r7
 8000ab6:	d00d      	beq.n	8000ad4 <xEventGroupSetBits+0x5c>
 8000ab8:	4638      	mov	r0, r7
		{
			pxNext = listGET_NEXT( pxListItem );
 8000aba:	e890 0084 	ldmia.w	r0, {r2, r7}

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000abe:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
			xMatchFound = pdFALSE;

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000ac2:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000ac6:	d0eb      	beq.n	8000aa0 <xEventGroupSetBits+0x28>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000ac8:	ea01 0e03 	and.w	lr, r1, r3
 8000acc:	459e      	cmp	lr, r3
 8000ace:	d0e9      	beq.n	8000aa4 <xEventGroupSetBits+0x2c>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000ad0:	42be      	cmp	r6, r7
 8000ad2:	d1f1      	bne.n	8000ab8 <xEventGroupSetBits+0x40>
 8000ad4:	43ed      	mvns	r5, r5
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000ad6:	4029      	ands	r1, r5
 8000ad8:	6021      	str	r1, [r4, #0]
	}
	( void ) xTaskResumeAll();
 8000ada:	f001 fbeb 	bl	80022b4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8000ade:	6820      	ldr	r0, [r4, #0]
 8000ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000ae2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000ae6:	e7f6      	b.n	8000ad6 <xEventGroupSetBits+0x5e>

08000ae8 <xEventGroupSync>:
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000ae8:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
	return ( EventGroupHandle_t ) pxEventBits;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
 8000aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aee:	4615      	mov	r5, r2
 8000af0:	4604      	mov	r4, r0
 8000af2:	460e      	mov	r6, r1
 8000af4:	461f      	mov	r7, r3
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000af6:	d119      	bne.n	8000b2c <xEventGroupSync+0x44>
	configASSERT( uxBitsToWaitFor != 0 );
 8000af8:	b912      	cbnz	r2, 8000b00 <xEventGroupSync+0x18>
 8000afa:	f002 fc51 	bl	80033a0 <ulPortSetInterruptMask>
 8000afe:	e7fe      	b.n	8000afe <xEventGroupSync+0x16>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b00:	f002 f908 	bl	8002d14 <xTaskGetSchedulerState>
 8000b04:	b9a8      	cbnz	r0, 8000b32 <xEventGroupSync+0x4a>
 8000b06:	2f00      	cmp	r7, #0
 8000b08:	d144      	bne.n	8000b94 <xEventGroupSync+0xac>
	}
	#endif

	vTaskSuspendAll();
 8000b0a:	f001 faed 	bl	80020e8 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 8000b0e:	6823      	ldr	r3, [r4, #0]

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000b10:	4631      	mov	r1, r6
 8000b12:	4620      	mov	r0, r4

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000b14:	431e      	orrs	r6, r3

	vTaskSuspendAll();
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000b16:	f7ff ffaf 	bl	8000a78 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000b1a:	ea05 0106 	and.w	r1, r5, r6
 8000b1e:	42a9      	cmp	r1, r5
 8000b20:	d034      	beq.n	8000b8c <xEventGroupSync+0xa4>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8000b22:	6826      	ldr	r6, [r4, #0]
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8000b24:	f001 fbc6 	bl	80022b4 <xTaskResumeAll>
		}
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
	return uxReturn;
}
 8000b28:	4630      	mov	r0, r6
 8000b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000b2c:	f002 fc38 	bl	80033a0 <ulPortSetInterruptMask>
 8000b30:	e7fe      	b.n	8000b30 <xEventGroupSync+0x48>
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
 8000b32:	f001 fad9 	bl	80020e8 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 8000b36:	6823      	ldr	r3, [r4, #0]

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000b38:	4631      	mov	r1, r6
 8000b3a:	4620      	mov	r0, r4

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000b3c:	431e      	orrs	r6, r3

	vTaskSuspendAll();
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000b3e:	f7ff ff9b 	bl	8000a78 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000b42:	ea05 0106 	and.w	r1, r5, r6
 8000b46:	42a9      	cmp	r1, r5
 8000b48:	d020      	beq.n	8000b8c <xEventGroupSync+0xa4>

			xTicksToWait = 0;
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
 8000b4a:	2f00      	cmp	r7, #0
 8000b4c:	d0e9      	beq.n	8000b22 <xEventGroupSync+0x3a>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 8000b4e:	463a      	mov	r2, r7
 8000b50:	1d20      	adds	r0, r4, #4
 8000b52:	f045 61a0 	orr.w	r1, r5, #83886080	; 0x5000000
 8000b56:	f001 ff65 	bl	8002a24 <vTaskPlaceOnUnorderedEventList>
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8000b5a:	f001 fbab 	bl	80022b4 <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
 8000b5e:	b908      	cbnz	r0, 8000b64 <xEventGroupSync+0x7c>
		{
			portYIELD_WITHIN_API();
 8000b60:	f002 fc12 	bl	8003388 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8000b64:	f002 f94e 	bl	8002e04 <uxTaskResetEventItemValue>

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000b68:	0183      	lsls	r3, r0, #6
		}
		else
		{
			/* The task unblocked because the bits were set.  Clear the control
			bits before returning the value. */
			uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000b6a:	bf48      	it	mi
 8000b6c:	f020 467f 	bicmi.w	r6, r0, #4278190080	; 0xff000000
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000b70:	d4da      	bmi.n	8000b28 <xEventGroupSync+0x40>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
 8000b72:	f002 fc39 	bl	80033e8 <vPortEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
 8000b76:	6826      	ldr	r6, [r4, #0]

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it may be required to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000b78:	ea05 0306 	and.w	r3, r5, r6
 8000b7c:	42ab      	cmp	r3, r5
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000b7e:	bf04      	itt	eq
 8000b80:	ea26 0505 	biceq.w	r5, r6, r5
 8000b84:	6025      	streq	r5, [r4, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8000b86:	f002 fc43 	bl	8003410 <vPortExitCritical>
 8000b8a:	e7cd      	b.n	8000b28 <xEventGroupSync+0x40>
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= uxBitsToWaitFor;
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	400b      	ands	r3, r1
 8000b90:	6023      	str	r3, [r4, #0]
 8000b92:	e7c7      	b.n	8000b24 <xEventGroupSync+0x3c>

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
	configASSERT( uxBitsToWaitFor != 0 );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b94:	f002 fc04 	bl	80033a0 <ulPortSetInterruptMask>
 8000b98:	e7fe      	b.n	8000b98 <xEventGroupSync+0xb0>
 8000b9a:	bf00      	nop

08000b9c <vEventGroupDelete>:
	return pxEventBits->uxEventBits;
}
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	4604      	mov	r4, r0
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

	vTaskSuspendAll();
 8000ba0:	f001 faa2 	bl	80020e8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000ba4:	6863      	ldr	r3, [r4, #4]
 8000ba6:	b17b      	cbz	r3, 8000bc8 <vEventGroupDelete+0x2c>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8000ba8:	6920      	ldr	r0, [r4, #16]
 8000baa:	f104 050c 	add.w	r5, r4, #12
 8000bae:	42a8      	cmp	r0, r5
 8000bb0:	d103      	bne.n	8000bba <vEventGroupDelete+0x1e>
 8000bb2:	e010      	b.n	8000bd6 <vEventGroupDelete+0x3a>
 8000bb4:	6920      	ldr	r0, [r4, #16]
 8000bb6:	42a8      	cmp	r0, r5
 8000bb8:	d00d      	beq.n	8000bd6 <vEventGroupDelete+0x3a>
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8000bba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000bbe:	f002 f807 	bl	8002bd0 <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000bc2:	6863      	ldr	r3, [r4, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1f5      	bne.n	8000bb4 <vEventGroupDelete+0x18>
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
		}

		vPortFree( pxEventBits );
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f002 fd3f 	bl	800364c <vPortFree>
	}
	( void ) xTaskResumeAll();
}
 8000bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
		}

		vPortFree( pxEventBits );
	}
	( void ) xTaskResumeAll();
 8000bd2:	f001 bb6f 	b.w	80022b4 <xTaskResumeAll>

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8000bd6:	f002 fbe3 	bl	80033a0 <ulPortSetInterruptMask>
 8000bda:	e7fe      	b.n	8000bda <vEventGroupDelete+0x3e>

08000bdc <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000bde:	f011 457f 	ands.w	r5, r1, #4278190080	; 0xff000000
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8000be2:	460e      	mov	r6, r1
 8000be4:	4604      	mov	r4, r0
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000be6:	d002      	beq.n	8000bee <vEventGroupSetBitsCallback+0x12>
 8000be8:	f002 fbda 	bl	80033a0 <ulPortSetInterruptMask>
 8000bec:	e7fe      	b.n	8000bec <vEventGroupSetBitsCallback+0x10>

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	vTaskSuspendAll();
 8000bee:	f001 fa7b 	bl	80020e8 <vTaskSuspendAll>
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000bf2:	6821      	ldr	r1, [r4, #0]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	vTaskSuspendAll();
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8000bf4:	6920      	ldr	r0, [r4, #16]

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000bf6:	4331      	orrs	r1, r6
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bf8:	f104 060c 	add.w	r6, r4, #12

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000bfc:	4286      	cmp	r6, r0
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000bfe:	6021      	str	r1, [r4, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000c00:	d10d      	bne.n	8000c1e <vEventGroupSetBitsCallback+0x42>
 8000c02:	e020      	b.n	8000c46 <vEventGroupSetBitsCallback+0x6a>
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000c04:	4219      	tst	r1, r3
 8000c06:	d007      	beq.n	8000c18 <vEventGroupSetBitsCallback+0x3c>
			}

			if( xMatchFound != pdFALSE )
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000c08:	01d2      	lsls	r2, r2, #7
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000c0a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
			if( xMatchFound != pdFALSE )
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8000c0e:	bf48      	it	mi
 8000c10:	431d      	orrmi	r5, r3
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000c12:	f001 ffdd 	bl	8002bd0 <xTaskRemoveFromUnorderedEventList>
 8000c16:	6821      	ldr	r1, [r4, #0]

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000c18:	42be      	cmp	r6, r7
 8000c1a:	d00d      	beq.n	8000c38 <vEventGroupSetBitsCallback+0x5c>
 8000c1c:	4638      	mov	r0, r7
		{
			pxNext = listGET_NEXT( pxListItem );
 8000c1e:	e890 0084 	ldmia.w	r0, {r2, r7}

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000c22:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
			xMatchFound = pdFALSE;

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000c26:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000c2a:	d0eb      	beq.n	8000c04 <vEventGroupSetBitsCallback+0x28>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000c2c:	ea01 0c03 	and.w	ip, r1, r3
 8000c30:	4563      	cmp	r3, ip
 8000c32:	d0e9      	beq.n	8000c08 <vEventGroupSetBitsCallback+0x2c>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000c34:	42be      	cmp	r6, r7
 8000c36:	d1f1      	bne.n	8000c1c <vEventGroupSetBitsCallback+0x40>
 8000c38:	43ed      	mvns	r5, r5
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000c3a:	4029      	ands	r1, r5
 8000c3c:	6021      	str	r1, [r4, #0]
/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
}
 8000c3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
	}
	( void ) xTaskResumeAll();
 8000c42:	f001 bb37 	b.w	80022b4 <xTaskResumeAll>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000c46:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000c4a:	4029      	ands	r1, r5
 8000c4c:	6021      	str	r1, [r4, #0]
/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
}
 8000c4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
	}
	( void ) xTaskResumeAll();
 8000c52:	f001 bb2f 	b.w	80022b4 <xTaskResumeAll>
 8000c56:	bf00      	nop

08000c58 <uxEventGroupGetNumber>:
	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
	UBaseType_t xReturn;
	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;

		if( xEventGroup == NULL )
 8000c58:	b100      	cbz	r0, 8000c5c <uxEventGroupGetNumber+0x4>
		{
			xReturn = 0;
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
 8000c5a:	6980      	ldr	r0, [r0, #24]
		}

		return xReturn;
	}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c60:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000c68:	2200      	movs	r2, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000c6a:	6081      	str	r1, [r0, #8]
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c6c:	e880 000c 	stmia.w	r0, {r2, r3}
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c70:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c72:	6103      	str	r3, [r0, #16]
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	6103      	str	r3, [r0, #16]
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000c80:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000c82:	689a      	ldr	r2, [r3, #8]
	pxItem->pvContainer = NULL;
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000c84:	b410      	push	{r4}
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000c86:	6804      	ldr	r4, [r0, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000c88:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000c8a:	689a      	ldr	r2, [r3, #8]
ListItem_t * const pxIndex = pxList->pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000c8c:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000c8e:	3401      	adds	r4, #1
	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000c90:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000c92:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000c94:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000c96:	6004      	str	r4, [r0, #0]
}
 8000c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000ca0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000ca2:	680d      	ldr	r5, [r1, #0]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000ca4:	1c6b      	adds	r3, r5, #1
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ca6:	bf18      	it	ne
 8000ca8:	f100 0208 	addne.w	r2, r0, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000cac:	d101      	bne.n	8000cb2 <vListInsert+0x12>
 8000cae:	e00e      	b.n	8000cce <vListInsert+0x2e>
 8000cb0:	461a      	mov	r2, r3
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cb2:	6853      	ldr	r3, [r2, #4]
 8000cb4:	681c      	ldr	r4, [r3, #0]
 8000cb6:	42a5      	cmp	r5, r4
 8000cb8:	d2fa      	bcs.n	8000cb0 <vListInsert+0x10>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000cba:	6804      	ldr	r4, [r0, #0]
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000cbc:	604b      	str	r3, [r1, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000cbe:	3401      	adds	r4, #1
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000cc0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000cc2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000cc4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000cc6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000cc8:	6004      	str	r4, [r0, #0]
}
 8000cca:	bc30      	pop	{r4, r5}
 8000ccc:	4770      	bx	lr
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000cce:	6902      	ldr	r2, [r0, #16]
 8000cd0:	6853      	ldr	r3, [r2, #4]
 8000cd2:	e7f2      	b.n	8000cba <vListInsert+0x1a>

08000cd4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000cd4:	6842      	ldr	r2, [r0, #4]
 8000cd6:	6881      	ldr	r1, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000cd8:	6903      	ldr	r3, [r0, #16]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000cda:	b410      	push	{r4}
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000cdc:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000cde:	6881      	ldr	r1, [r0, #8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000ce0:	685c      	ldr	r4, [r3, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ce2:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8000ce4:	681a      	ldr	r2, [r3, #0]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000ce6:	4284      	cmp	r4, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000ce8:	bf08      	it	eq
 8000cea:	6059      	streq	r1, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8000cec:	3a01      	subs	r2, #1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000cee:	2100      	movs	r1, #0
 8000cf0:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8000cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8000cf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4770      	bx	lr

08000cfc <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000cfc:	b430      	push	{r4, r5}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8000cfe:	6805      	ldr	r5, [r0, #0]
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000d00:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8000d02:	b165      	cbz	r5, 8000d1e <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000d04:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000d06:	68c4      	ldr	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000d08:	6840      	ldr	r0, [r0, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000d0a:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000d0c:	4284      	cmp	r4, r0

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000d0e:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8000d10:	bf28      	it	cs
 8000d12:	60dd      	strcs	r5, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000d14:	4608      	mov	r0, r1
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d16:	bc30      	pop	{r4, r5}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000d18:	68d9      	ldr	r1, [r3, #12]
 8000d1a:	f7ff ba51 	b.w	80001c0 <memcpy>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d1e:	bc30      	pop	{r4, r5}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000d24:	b538      	push	{r3, r4, r5, lr}
 8000d26:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000d28:	f002 fb5e 	bl	80033e8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000d2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	dd14      	ble.n	8000d5c <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d34:	b193      	cbz	r3, 8000d5c <prvUnlockQueue+0x38>
 8000d36:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8000d3a:	e007      	b.n	8000d4c <prvUnlockQueue+0x28>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8000d3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000d42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	dd09      	ble.n	8000d5c <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d4a:	b13b      	cbz	r3, 8000d5c <prvUnlockQueue+0x38>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d4c:	4628      	mov	r0, r5
 8000d4e:	f001 fef9 	bl	8002b44 <xTaskRemoveFromEventList>
 8000d52:	2800      	cmp	r0, #0
 8000d54:	d0f2      	beq.n	8000d3c <prvUnlockQueue+0x18>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8000d56:	f001 ffc7 	bl	8002ce8 <vTaskMissedYield>
 8000d5a:	e7ef      	b.n	8000d3c <prvUnlockQueue+0x18>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d60:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8000d62:	f002 fb55 	bl	8003410 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000d66:	f002 fb3f 	bl	80033e8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000d6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	dd14      	ble.n	8000d9a <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d70:	6923      	ldr	r3, [r4, #16]
 8000d72:	b193      	cbz	r3, 8000d9a <prvUnlockQueue+0x76>
 8000d74:	f104 0510 	add.w	r5, r4, #16
 8000d78:	e007      	b.n	8000d8a <prvUnlockQueue+0x66>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8000d7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000d80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	dd09      	ble.n	8000d9a <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d86:	6923      	ldr	r3, [r4, #16]
 8000d88:	b13b      	cbz	r3, 8000d9a <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	f001 feda 	bl	8002b44 <xTaskRemoveFromEventList>
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d0f2      	beq.n	8000d7a <prvUnlockQueue+0x56>
				{
					vTaskMissedYield();
 8000d94:	f001 ffa8 	bl	8002ce8 <vTaskMissedYield>
 8000d98:	e7ef      	b.n	8000d7a <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8000da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8000da4:	f002 bb34 	b.w	8003410 <vPortExitCritical>

08000da8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000da8:	b570      	push	{r4, r5, r6, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000daa:	4604      	mov	r4, r0
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000dac:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000dae:	b388      	cbz	r0, 8000e14 <xQueueGenericReset+0x6c>

	taskENTER_CRITICAL();
 8000db0:	f002 fb1a 	bl	80033e8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000db4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000db6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	fb02 f200 	mul.w	r2, r2, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000dbe:	1a10      	subs	r0, r2, r0
 8000dc0:	181e      	adds	r6, r3, r0
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000dc2:	2100      	movs	r1, #0

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000dc4:	1898      	adds	r0, r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000dca:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000dcc:	60e6      	str	r6, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8000dce:	6462      	str	r2, [r4, #68]	; 0x44

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000dd0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000dd2:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
		pxQueue->xTxLock = queueUNLOCKED;
 8000dd4:	64a2      	str	r2, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8000dd6:	b98d      	cbnz	r5, 8000dfc <xQueueGenericReset+0x54>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000dd8:	6923      	ldr	r3, [r4, #16]
 8000dda:	b91b      	cbnz	r3, 8000de4 <xQueueGenericReset+0x3c>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 8000ddc:	f002 fb18 	bl	8003410 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8000de0:	2001      	movs	r0, #1
 8000de2:	bd70      	pop	{r4, r5, r6, pc}
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000de4:	f104 0010 	add.w	r0, r4, #16
 8000de8:	f001 feac 	bl	8002b44 <xTaskRemoveFromEventList>
 8000dec:	2801      	cmp	r0, #1
 8000dee:	d1f5      	bne.n	8000ddc <xQueueGenericReset+0x34>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000df0:	f002 faca 	bl	8003388 <vPortYield>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 8000df4:	f002 fb0c 	bl	8003410 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8000df8:	2001      	movs	r0, #1
 8000dfa:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000dfc:	f104 0010 	add.w	r0, r4, #16
 8000e00:	f7ff ff2e 	bl	8000c60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000e04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000e08:	f7ff ff2a 	bl	8000c60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000e0c:	f002 fb00 	bl	8003410 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8000e10:	2001      	movs	r0, #1
 8000e12:	bd70      	pop	{r4, r5, r6, pc}

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000e14:	f002 fac4 	bl	80033a0 <ulPortSetInterruptMask>
 8000e18:	e7fe      	b.n	8000e18 <xQueueGenericReset+0x70>
 8000e1a:	bf00      	nop

08000e1c <xQueueGenericCreate>:
	return pdPASS;
}
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8000e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
 8000e1e:	4605      	mov	r5, r0
	return pdPASS;
}
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8000e20:	460e      	mov	r6, r1
 8000e22:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d031      	beq.n	8000e8c <xQueueGenericCreate+0x70>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8000e28:	2054      	movs	r0, #84	; 0x54
 8000e2a:	f002 fbdf 	bl	80035ec <pvPortMalloc>
		if( pxNewQueue != NULL )
 8000e2e:	4604      	mov	r4, r0
 8000e30:	b360      	cbz	r0, 8000e8c <xQueueGenericCreate+0x70>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e32:	fb06 f005 	mul.w	r0, r6, r5

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
 8000e36:	3001      	adds	r0, #1
 8000e38:	f002 fbd8 	bl	80035ec <pvPortMalloc>
 8000e3c:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
 8000e3e:	b310      	cbz	r0, 8000e86 <xQueueGenericCreate+0x6a>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8000e40:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8000e42:	6426      	str	r6, [r4, #64]	; 0x40
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8000e44:	f002 fad0 	bl	80033e8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000e48:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000e4a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	fb01 f100 	mul.w	r1, r1, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000e52:	1a08      	subs	r0, r1, r0
 8000e54:	181d      	adds	r5, r3, r0
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000e56:	2200      	movs	r2, #0

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000e58:	1858      	adds	r0, r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000e5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000e5e:	63a2      	str	r2, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e60:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000e62:	6461      	str	r1, [r4, #68]	; 0x44

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000e64:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
		pxQueue->xTxLock = queueUNLOCKED;
 8000e66:	64a1      	str	r1, [r4, #72]	; 0x48
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000e68:	f104 0010 	add.w	r0, r4, #16
	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000e6c:	60e5      	str	r5, [r4, #12]
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000e6e:	f7ff fef7 	bl	8000c60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000e72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000e76:	f7ff fef3 	bl	8000c60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000e7a:	f002 fac9 	bl	8003410 <vPortExitCritical>
				pxNewQueue->uxItemSize = uxItemSize;
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8000e7e:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	}

	configASSERT( xReturn );

	return xReturn;
}
 8000e82:	4620      	mov	r0, r4
 8000e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8000e86:	4620      	mov	r0, r4
 8000e88:	f002 fbe0 	bl	800364c <vPortFree>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8000e8c:	f002 fa88 	bl	80033a0 <ulPortSetInterruptMask>
 8000e90:	e7fe      	b.n	8000e90 <xQueueGenericCreate+0x74>
 8000e92:	bf00      	nop

08000e94 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8000e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8000e96:	4605      	mov	r5, r0
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8000e98:	460e      	mov	r6, r1
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d033      	beq.n	8000f06 <xQueueCreateCountingSemaphore+0x72>
		configASSERT( uxInitialCount <= uxMaxCount );
 8000e9e:	4288      	cmp	r0, r1
 8000ea0:	d202      	bcs.n	8000ea8 <xQueueCreateCountingSemaphore+0x14>
 8000ea2:	f002 fa7d 	bl	80033a0 <ulPortSetInterruptMask>
 8000ea6:	e7fe      	b.n	8000ea6 <xQueueCreateCountingSemaphore+0x12>
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8000ea8:	2054      	movs	r0, #84	; 0x54
 8000eaa:	f002 fb9f 	bl	80035ec <pvPortMalloc>
		if( pxNewQueue != NULL )
 8000eae:	4604      	mov	r4, r0
 8000eb0:	b378      	cbz	r0, 8000f12 <xQueueCreateCountingSemaphore+0x7e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f002 fb9a 	bl	80035ec <pvPortMalloc>
 8000eb8:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
 8000eba:	b338      	cbz	r0, 8000f0c <xQueueCreateCountingSemaphore+0x78>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
 8000ebc:	2700      	movs	r7, #0
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8000ebe:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8000ec0:	6427      	str	r7, [r4, #64]	; 0x40
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8000ec2:	f002 fa91 	bl	80033e8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000ec6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000ec8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000eca:	6823      	ldr	r3, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000ecc:	63a7      	str	r7, [r4, #56]	; 0x38

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000ece:	fb02 f201 	mul.w	r2, r2, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000ed2:	1a51      	subs	r1, r2, r1
 8000ed4:	1858      	adds	r0, r3, r1

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000ed6:	1899      	adds	r1, r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000edc:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000ede:	6462      	str	r2, [r4, #68]	; 0x44

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000ee0:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
		pxQueue->xTxLock = queueUNLOCKED;
 8000ee2:	64a2      	str	r2, [r4, #72]	; 0x48
	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000ee4:	60e0      	str	r0, [r4, #12]
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000ee6:	f104 0010 	add.w	r0, r4, #16
 8000eea:	f7ff feb9 	bl	8000c60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000eee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000ef2:	f7ff feb5 	bl	8000c60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000ef6:	f002 fa8b 	bl	8003410 <vPortExitCritical>
				pxNewQueue->uxItemSize = uxItemSize;
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8000efa:	2302      	movs	r3, #2
 8000efc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );

		if( xHandle != NULL )
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8000f00:	63a6      	str	r6, [r4, #56]	; 0x38
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
	}
 8000f02:	4620      	mov	r0, r4
 8000f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8000f06:	f002 fa4b 	bl	80033a0 <ulPortSetInterruptMask>
 8000f0a:	e7fe      	b.n	8000f0a <xQueueCreateCountingSemaphore+0x76>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f002 fb9d 	bl	800364c <vPortFree>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8000f12:	f002 fa45 	bl	80033a0 <ulPortSetInterruptMask>
 8000f16:	e7fe      	b.n	8000f16 <xQueueCreateCountingSemaphore+0x82>

08000f18 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f1c:	b085      	sub	sp, #20
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000f1e:	4604      	mov	r4, r0

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000f20:	4689      	mov	r9, r1
 8000f22:	9201      	str	r2, [sp, #4]
 8000f24:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000f26:	2800      	cmp	r0, #0
 8000f28:	f000 80e5 	beq.w	80010f6 <xQueueGenericSend+0x1de>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f2c:	2900      	cmp	r1, #0
 8000f2e:	f000 8123 	beq.w	8001178 <xQueueGenericSend+0x260>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f32:	2f02      	cmp	r7, #2
 8000f34:	d057      	beq.n	8000fe6 <xQueueGenericSend+0xce>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f36:	f001 feed 	bl	8002d14 <xTaskGetSchedulerState>
 8000f3a:	b918      	cbnz	r0, 8000f44 <xQueueGenericSend+0x2c>
 8000f3c:	9b01      	ldr	r3, [sp, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f040 8117 	bne.w	8001172 <xQueueGenericSend+0x25a>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000f44:	f002 fa50 	bl	80033e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000f4c:	f04f 0b00 	mov.w	fp, #0
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f50:	429a      	cmp	r2, r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8000f52:	46da      	mov	sl, fp
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000f54:	f104 0510 	add.w	r5, r4, #16
 8000f58:	f104 0624 	add.w	r6, r4, #36	; 0x24
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8000f5c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f60:	d371      	bcc.n	8001046 <xQueueGenericSend+0x12e>
 8000f62:	2f02      	cmp	r7, #2
 8000f64:	f000 80da 	beq.w	800111c <xQueueGenericSend+0x204>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000f68:	9801      	ldr	r0, [sp, #4]
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	f000 80cf 	beq.w	800110e <xQueueGenericSend+0x1f6>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
 8000f70:	f1bb 0f00 	cmp.w	fp, #0
 8000f74:	f000 80bb 	beq.w	80010ee <xQueueGenericSend+0x1d6>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000f78:	f002 fa4a 	bl	8003410 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000f7c:	f001 f8b4 	bl	80020e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000f80:	f002 fa32 	bl	80033e8 <vPortEnterCritical>
 8000f84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f86:	3301      	adds	r3, #1
 8000f88:	bf08      	it	eq
 8000f8a:	f8c4 a044 	streq.w	sl, [r4, #68]	; 0x44
 8000f8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f90:	3301      	adds	r3, #1
 8000f92:	bf08      	it	eq
 8000f94:	f8c4 a048 	streq.w	sl, [r4, #72]	; 0x48
 8000f98:	f002 fa3a 	bl	8003410 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f9c:	a802      	add	r0, sp, #8
 8000f9e:	a901      	add	r1, sp, #4
 8000fa0:	f001 fe68 	bl	8002c74 <xTaskCheckForTimeOut>
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	f040 80a9 	bne.w	80010fc <xQueueGenericSend+0x1e4>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000faa:	f002 fa1d 	bl	80033e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000fae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000fb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d05a      	beq.n	800106c <xQueueGenericSend+0x154>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8000fb6:	f002 fa2b 	bl	8003410 <vPortExitCritical>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000fba:	f002 fa15 	bl	80033e8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000fbe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	dc06      	bgt.n	8000fd2 <xQueueGenericSend+0xba>
 8000fc4:	e015      	b.n	8000ff2 <xQueueGenericSend+0xda>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8000fc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000fcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	dd0f      	ble.n	8000ff2 <xQueueGenericSend+0xda>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fd4:	b16b      	cbz	r3, 8000ff2 <xQueueGenericSend+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	f001 fdb4 	bl	8002b44 <xTaskRemoveFromEventList>
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	d0f2      	beq.n	8000fc6 <xQueueGenericSend+0xae>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8000fe0:	f001 fe82 	bl	8002ce8 <vTaskMissedYield>
 8000fe4:	e7ef      	b.n	8000fc6 <xQueueGenericSend+0xae>
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000fe6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d0a4      	beq.n	8000f36 <xQueueGenericSend+0x1e>
 8000fec:	f002 f9d8 	bl	80033a0 <ulPortSetInterruptMask>
 8000ff0:	e7fe      	b.n	8000ff0 <xQueueGenericSend+0xd8>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8000ff2:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8000ff6:	f002 fa0b 	bl	8003410 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000ffa:	f002 f9f5 	bl	80033e8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000ffe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001000:	2b00      	cmp	r3, #0
 8001002:	dd12      	ble.n	800102a <xQueueGenericSend+0x112>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001004:	6923      	ldr	r3, [r4, #16]
 8001006:	b943      	cbnz	r3, 800101a <xQueueGenericSend+0x102>
 8001008:	e00f      	b.n	800102a <xQueueGenericSend+0x112>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800100a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800100c:	3b01      	subs	r3, #1
 800100e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001010:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001012:	2b00      	cmp	r3, #0
 8001014:	dd09      	ble.n	800102a <xQueueGenericSend+0x112>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001016:	6922      	ldr	r2, [r4, #16]
 8001018:	b13a      	cbz	r2, 800102a <xQueueGenericSend+0x112>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800101a:	4628      	mov	r0, r5
 800101c:	f001 fd92 	bl	8002b44 <xTaskRemoveFromEventList>
 8001020:	2800      	cmp	r0, #0
 8001022:	d0f2      	beq.n	800100a <xQueueGenericSend+0xf2>
				{
					vTaskMissedYield();
 8001024:	f001 fe60 	bl	8002ce8 <vTaskMissedYield>
 8001028:	e7ef      	b.n	800100a <xQueueGenericSend+0xf2>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800102a:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800102e:	f002 f9ef 	bl	8003410 <vPortExitCritical>
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
 8001032:	f001 f93f 	bl	80022b4 <xTaskResumeAll>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001036:	f002 f9d7 	bl	80033e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800103a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800103c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800103e:	429a      	cmp	r2, r3
 8001040:	f04f 0b01 	mov.w	fp, #1
 8001044:	d28d      	bcs.n	8000f62 <xQueueGenericSend+0x4a>
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001046:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001048:	2a00      	cmp	r2, #0
 800104a:	d069      	beq.n	8001120 <xQueueGenericSend+0x208>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800104c:	2f00      	cmp	r7, #0
 800104e:	d178      	bne.n	8001142 <xQueueGenericSend+0x22a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001050:	4649      	mov	r1, r9
 8001052:	68a0      	ldr	r0, [r4, #8]
 8001054:	f7ff f8b4 	bl	80001c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001058:	68a1      	ldr	r1, [r4, #8]
 800105a:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800105c:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800105e:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001060:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001062:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001064:	d362      	bcc.n	800112c <xQueueGenericSend+0x214>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	60a3      	str	r3, [r4, #8]
 800106a:	e05f      	b.n	800112c <xQueueGenericSend+0x214>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800106c:	f002 f9d0 	bl	8003410 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001070:	4628      	mov	r0, r5
 8001072:	9901      	ldr	r1, [sp, #4]
 8001074:	f001 fc8e 	bl	8002994 <vTaskPlaceOnEventList>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001078:	f002 f9b6 	bl	80033e8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800107c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800107e:	2b00      	cmp	r3, #0
 8001080:	dc06      	bgt.n	8001090 <xQueueGenericSend+0x178>
 8001082:	e00f      	b.n	80010a4 <xQueueGenericSend+0x18c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8001084:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001086:	3b01      	subs	r3, #1
 8001088:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800108a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800108c:	2b00      	cmp	r3, #0
 800108e:	dd09      	ble.n	80010a4 <xQueueGenericSend+0x18c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001092:	b13b      	cbz	r3, 80010a4 <xQueueGenericSend+0x18c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001094:	4630      	mov	r0, r6
 8001096:	f001 fd55 	bl	8002b44 <xTaskRemoveFromEventList>
 800109a:	2800      	cmp	r0, #0
 800109c:	d0f2      	beq.n	8001084 <xQueueGenericSend+0x16c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800109e:	f001 fe23 	bl	8002ce8 <vTaskMissedYield>
 80010a2:	e7ef      	b.n	8001084 <xQueueGenericSend+0x16c>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80010a4:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80010a8:	f002 f9b2 	bl	8003410 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80010ac:	f002 f99c 	bl	80033e8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80010b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	dc06      	bgt.n	80010c4 <xQueueGenericSend+0x1ac>
 80010b6:	e00f      	b.n	80010d8 <xQueueGenericSend+0x1c0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 80010b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010ba:	3b01      	subs	r3, #1
 80010bc:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80010be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	dd09      	ble.n	80010d8 <xQueueGenericSend+0x1c0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010c4:	6923      	ldr	r3, [r4, #16]
 80010c6:	b13b      	cbz	r3, 80010d8 <xQueueGenericSend+0x1c0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010c8:	4628      	mov	r0, r5
 80010ca:	f001 fd3b 	bl	8002b44 <xTaskRemoveFromEventList>
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d0f2      	beq.n	80010b8 <xQueueGenericSend+0x1a0>
				{
					vTaskMissedYield();
 80010d2:	f001 fe09 	bl	8002ce8 <vTaskMissedYield>
 80010d6:	e7ef      	b.n	80010b8 <xQueueGenericSend+0x1a0>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80010d8:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80010dc:	f002 f998 	bl	8003410 <vPortExitCritical>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80010e0:	f001 f8e8 	bl	80022b4 <xTaskResumeAll>
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d1a6      	bne.n	8001036 <xQueueGenericSend+0x11e>
				{
					portYIELD_WITHIN_API();
 80010e8:	f002 f94e 	bl	8003388 <vPortYield>
 80010ec:	e7a3      	b.n	8001036 <xQueueGenericSend+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80010ee:	a802      	add	r0, sp, #8
 80010f0:	f001 fdae 	bl	8002c50 <vTaskSetTimeOutState>
 80010f4:	e740      	b.n	8000f78 <xQueueGenericSend+0x60>
{
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80010f6:	f002 f953 	bl	80033a0 <ulPortSetInterruptMask>
 80010fa:	e7fe      	b.n	80010fa <xQueueGenericSend+0x1e2>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80010fc:	4620      	mov	r0, r4
 80010fe:	f7ff fe11 	bl	8000d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001102:	f001 f8d7 	bl	80022b4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001106:	2000      	movs	r0, #0
		}
	}
}
 8001108:	b005      	add	sp, #20
 800110a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800110e:	9000      	str	r0, [sp, #0]
 8001110:	f002 f97e 	bl	8003410 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001114:	9800      	ldr	r0, [sp, #0]
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 8001116:	b005      	add	sp, #20
 8001118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800111c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800111e:	b982      	cbnz	r2, 8001142 <xQueueGenericSend+0x22a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001120:	6825      	ldr	r5, [r4, #0]
 8001122:	b91d      	cbnz	r5, 800112c <xQueueGenericSend+0x214>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001124:	6860      	ldr	r0, [r4, #4]
 8001126:	f001 fe43 	bl	8002db0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800112a:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800112c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800112e:	6a63      	ldr	r3, [r4, #36]	; 0x24
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8001130:	3201      	adds	r2, #1
 8001132:	63a2      	str	r2, [r4, #56]	; 0x38
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001134:	bb3b      	cbnz	r3, 8001186 <xQueueGenericSend+0x26e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001136:	f002 f96b 	bl	8003410 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 800113a:	2001      	movs	r0, #1
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 800113c:	b005      	add	sp, #20
 800113e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001142:	4649      	mov	r1, r9
 8001144:	68e0      	ldr	r0, [r4, #12]
 8001146:	f7ff f83b 	bl	80001c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800114a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800114c:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800114e:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001150:	425b      	negs	r3, r3
 8001152:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001154:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001156:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001158:	bf3e      	ittt	cc
 800115a:	6862      	ldrcc	r2, [r4, #4]
 800115c:	189b      	addcc	r3, r3, r2
 800115e:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001160:	2f02      	cmp	r7, #2
 8001162:	d1e3      	bne.n	800112c <xQueueGenericSend+0x214>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001164:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0e0      	beq.n	800112c <xQueueGenericSend+0x214>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 800116a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800116c:	3b01      	subs	r3, #1
 800116e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001170:	e7dc      	b.n	800112c <xQueueGenericSend+0x214>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001172:	f002 f915 	bl	80033a0 <ulPortSetInterruptMask>
 8001176:	e7fe      	b.n	8001176 <xQueueGenericSend+0x25e>
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001178:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800117a:	2b00      	cmp	r3, #0
 800117c:	f43f aed9 	beq.w	8000f32 <xQueueGenericSend+0x1a>
 8001180:	f002 f90e 	bl	80033a0 <ulPortSetInterruptMask>
 8001184:	e7fe      	b.n	8001184 <xQueueGenericSend+0x26c>
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8001186:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800118a:	f001 fcdb 	bl	8002b44 <xTaskRemoveFromEventList>
 800118e:	2801      	cmp	r0, #1
 8001190:	d1d1      	bne.n	8001136 <xQueueGenericSend+0x21e>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001192:	f002 f8f9 	bl	8003388 <vPortYield>
 8001196:	e7ce      	b.n	8001136 <xQueueGenericSend+0x21e>

08001198 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001198:	b570      	push	{r4, r5, r6, lr}
 800119a:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 800119c:	2054      	movs	r0, #84	; 0x54
 800119e:	f002 fa25 	bl	80035ec <pvPortMalloc>
		if( pxNewQueue != NULL )
 80011a2:	4604      	mov	r4, r0
 80011a4:	b1e8      	cbz	r0, 80011e2 <xQueueCreateMutex+0x4a>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80011a6:	2500      	movs	r5, #0
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 80011ac:	2201      	movs	r2, #1
			pxNewQueue->u.pcReadFrom = NULL;

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80011ae:	6385      	str	r5, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 80011b0:	63c2      	str	r2, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 80011b2:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
 80011b4:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;
 80011b8:	6483      	str	r3, [r0, #72]	; 0x48
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80011ba:	6045      	str	r5, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80011bc:	6005      	str	r5, [r0, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 80011be:	6085      	str	r5, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 80011c0:	60c5      	str	r5, [r0, #12]
			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 80011c2:	6405      	str	r5, [r0, #64]	; 0x40
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 80011c4:	3010      	adds	r0, #16
 80011c6:	f7ff fd4b 	bl	8000c60 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 80011ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80011ce:	f7ff fd47 	bl	8000c60 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80011d2:	4620      	mov	r0, r4
 80011d4:	4629      	mov	r1, r5
 80011d6:	462a      	mov	r2, r5
 80011d8:	462b      	mov	r3, r5
 80011da:	f7ff fe9d 	bl	8000f18 <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
 80011de:	4620      	mov	r0, r4
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
 80011e2:	f002 f8dd 	bl	80033a0 <ulPortSetInterruptMask>
 80011e6:	e7fe      	b.n	80011e6 <xQueueCreateMutex+0x4e>

080011e8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80011e8:	b538      	push	{r3, r4, r5, lr}
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;

		configASSERT( pxMutex );
 80011ea:	4604      	mov	r4, r0
 80011ec:	b130      	cbz	r0, 80011fc <xQueueGiveMutexRecursive+0x14>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80011ee:	6845      	ldr	r5, [r0, #4]
 80011f0:	f001 fd8a 	bl	8002d08 <xTaskGetCurrentTaskHandle>
 80011f4:	4285      	cmp	r5, r0
 80011f6:	d004      	beq.n	8001202 <xQueueGiveMutexRecursive+0x1a>
			xReturn = pdPASS;
		}
		else
		{
			/* We cannot give the mutex because we are not the holder. */
			xReturn = pdFAIL;
 80011f8:	2000      	movs	r0, #0
 80011fa:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;

		configASSERT( pxMutex );
 80011fc:	f002 f8d0 	bl	80033a0 <ulPortSetInterruptMask>
 8001200:	e7fe      	b.n	8001200 <xQueueGiveMutexRecursive+0x18>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8001202:	68e1      	ldr	r1, [r4, #12]
 8001204:	3901      	subs	r1, #1
 8001206:	60e1      	str	r1, [r4, #12]

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8001208:	b109      	cbz	r1, 800120e <xQueueGiveMutexRecursive+0x26>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800120a:	2001      	movs	r0, #1

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
	}
 800120c:	bd38      	pop	{r3, r4, r5, pc}
			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800120e:	4620      	mov	r0, r4
 8001210:	460a      	mov	r2, r1
 8001212:	460b      	mov	r3, r1
 8001214:	f7ff fe80 	bl	8000f18 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8001218:	2001      	movs	r0, #1
 800121a:	bd38      	pop	{r3, r4, r5, pc}

0800121c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800121c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001220:	4604      	mov	r4, r0

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001222:	460e      	mov	r6, r1
 8001224:	4690      	mov	r8, r2
 8001226:	461d      	mov	r5, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001228:	2800      	cmp	r0, #0
 800122a:	d02f      	beq.n	800128c <xQueueGenericSendFromISR+0x70>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800122c:	2900      	cmp	r1, #0
 800122e:	d06f      	beq.n	8001310 <xQueueGenericSendFromISR+0xf4>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001230:	2d02      	cmp	r5, #2
 8001232:	d010      	beq.n	8001256 <xQueueGenericSendFromISR+0x3a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001234:	f002 f9b4 	bl	80035a0 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001238:	f002 f8b2 	bl	80033a0 <ulPortSetInterruptMask>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800123c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800123e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001240:	4293      	cmp	r3, r2
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001242:	4607      	mov	r7, r0
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001244:	bf98      	it	ls
 8001246:	2400      	movls	r4, #0
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001248:	d80b      	bhi.n	8001262 <xQueueGenericSendFromISR+0x46>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800124a:	4638      	mov	r0, r7
 800124c:	f002 f8dc 	bl	8003408 <vPortClearInterruptMask>

	return xReturn;
}
 8001250:	4620      	mov	r0, r4
 8001252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001256:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001258:	2b01      	cmp	r3, #1
 800125a:	d033      	beq.n	80012c4 <xQueueGenericSendFromISR+0xa8>
 800125c:	f002 f8a0 	bl	80033a0 <ulPortSetInterruptMask>
 8001260:	e7fe      	b.n	8001260 <xQueueGenericSendFromISR+0x44>
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001262:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001264:	b9aa      	cbnz	r2, 8001292 <xQueueGenericSendFromISR+0x76>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001266:	6825      	ldr	r5, [r4, #0]
 8001268:	2d00      	cmp	r5, #0
 800126a:	d04c      	beq.n	8001306 <xQueueGenericSendFromISR+0xea>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800126c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800126e:	3301      	adds	r3, #1
 8001270:	63a3      	str	r3, [r4, #56]	; 0x38

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8001272:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001274:	3301      	adds	r3, #1
 8001276:	d01b      	beq.n	80012b0 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8001278:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800127a:	3301      	adds	r3, #1
 800127c:	64a3      	str	r3, [r4, #72]	; 0x48
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800127e:	4638      	mov	r0, r7
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
 8001280:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001282:	f002 f8c1 	bl	8003408 <vPortClearInterruptMask>

	return xReturn;
}
 8001286:	4620      	mov	r0, r4
 8001288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800128c:	f002 f888 	bl	80033a0 <ulPortSetInterruptMask>
 8001290:	e7fe      	b.n	8001290 <xQueueGenericSendFromISR+0x74>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001292:	bb05      	cbnz	r5, 80012d6 <xQueueGenericSendFromISR+0xba>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001294:	4631      	mov	r1, r6
 8001296:	68a0      	ldr	r0, [r4, #8]
 8001298:	f7fe ff92 	bl	80001c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800129c:	68a1      	ldr	r1, [r4, #8]
 800129e:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012a0:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80012a2:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012a4:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80012a6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012a8:	d3e0      	bcc.n	800126c <xQueueGenericSendFromISR+0x50>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	60a3      	str	r3, [r4, #8]
 80012ae:	e7dd      	b.n	800126c <xQueueGenericSendFromISR+0x50>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d132      	bne.n	800131c <xQueueGenericSendFromISR+0x100>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80012b6:	4638      	mov	r0, r7
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
 80012b8:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80012ba:	f002 f8a5 	bl	8003408 <vPortClearInterruptMask>

	return xReturn;
}
 80012be:	4620      	mov	r0, r4
 80012c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80012c4:	f002 f96c 	bl	80035a0 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80012c8:	f002 f86a 	bl	80033a0 <ulPortSetInterruptMask>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80012cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80012ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80012d0:	4607      	mov	r7, r0
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80012d2:	2a00      	cmp	r2, #0
 80012d4:	d0c7      	beq.n	8001266 <xQueueGenericSendFromISR+0x4a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012d6:	4631      	mov	r1, r6
 80012d8:	68e0      	ldr	r0, [r4, #12]
 80012da:	f7fe ff71 	bl	80001c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80012de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012e0:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012e2:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80012e4:	425b      	negs	r3, r3
 80012e6:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012e8:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80012ea:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80012ec:	bf3e      	ittt	cc
 80012ee:	6862      	ldrcc	r2, [r4, #4]
 80012f0:	189b      	addcc	r3, r3, r2
 80012f2:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80012f4:	2d02      	cmp	r5, #2
 80012f6:	d1b9      	bne.n	800126c <xQueueGenericSendFromISR+0x50>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0b6      	beq.n	800126c <xQueueGenericSendFromISR+0x50>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 80012fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001300:	3b01      	subs	r3, #1
 8001302:	63a3      	str	r3, [r4, #56]	; 0x38
 8001304:	e7b2      	b.n	800126c <xQueueGenericSendFromISR+0x50>
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001306:	6860      	ldr	r0, [r4, #4]
 8001308:	f001 fd52 	bl	8002db0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800130c:	6065      	str	r5, [r4, #4]
 800130e:	e7ad      	b.n	800126c <xQueueGenericSendFromISR+0x50>
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001310:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d08c      	beq.n	8001230 <xQueueGenericSendFromISR+0x14>
 8001316:	f002 f843 	bl	80033a0 <ulPortSetInterruptMask>
 800131a:	e7fe      	b.n	800131a <xQueueGenericSendFromISR+0xfe>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800131c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001320:	f001 fc10 	bl	8002b44 <xTaskRemoveFromEventList>
 8001324:	2800      	cmp	r0, #0
 8001326:	d0c6      	beq.n	80012b6 <xQueueGenericSendFromISR+0x9a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001328:	2401      	movs	r4, #1
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800132a:	f1b8 0f00 	cmp.w	r8, #0
 800132e:	d08c      	beq.n	800124a <xQueueGenericSendFromISR+0x2e>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001330:	4638      	mov	r0, r7
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001332:	f8c8 4000 	str.w	r4, [r8]
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001336:	f002 f867 	bl	8003408 <vPortClearInterruptMask>

	return xReturn;
}
 800133a:	4620      	mov	r0, r4
 800133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001340 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001344:	b085      	sub	sp, #20
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001346:	4604      	mov	r4, r0
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001348:	4688      	mov	r8, r1
 800134a:	9201      	str	r2, [sp, #4]
 800134c:	469a      	mov	sl, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800134e:	2800      	cmp	r0, #0
 8001350:	f000 80dc 	beq.w	800150c <xQueueGenericReceive+0x1cc>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001354:	2900      	cmp	r1, #0
 8001356:	f000 810b 	beq.w	8001570 <xQueueGenericReceive+0x230>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800135a:	f001 fcdb 	bl	8002d14 <xTaskGetSchedulerState>
 800135e:	b918      	cbnz	r0, 8001368 <xQueueGenericReceive+0x28>
 8001360:	9b01      	ldr	r3, [sp, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f040 8101 	bne.w	800156a <xQueueGenericReceive+0x22a>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001368:	f002 f83e 	bl	80033e8 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800136c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800136e:	f04f 0b00 	mov.w	fp, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8001372:	46d9      	mov	r9, fp
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001374:	f104 0524 	add.w	r5, r4, #36	; 0x24
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001378:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800137c:	f104 0610 	add.w	r6, r4, #16
	{
		taskENTER_CRITICAL();
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001380:	2b00      	cmp	r3, #0
 8001382:	d16f      	bne.n	8001464 <xQueueGenericReceive+0x124>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001384:	9801      	ldr	r0, [sp, #4]
 8001386:	2800      	cmp	r0, #0
 8001388:	f000 80d4 	beq.w	8001534 <xQueueGenericReceive+0x1f4>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
 800138c:	f1bb 0f00 	cmp.w	fp, #0
 8001390:	f000 80b8 	beq.w	8001504 <xQueueGenericReceive+0x1c4>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001394:	f002 f83c 	bl	8003410 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001398:	f000 fea6 	bl	80020e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800139c:	f002 f824 	bl	80033e8 <vPortEnterCritical>
 80013a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013a2:	3301      	adds	r3, #1
 80013a4:	bf08      	it	eq
 80013a6:	f8c4 9044 	streq.w	r9, [r4, #68]	; 0x44
 80013aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013ac:	3301      	adds	r3, #1
 80013ae:	bf08      	it	eq
 80013b0:	f8c4 9048 	streq.w	r9, [r4, #72]	; 0x48
 80013b4:	f002 f82c 	bl	8003410 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013b8:	a802      	add	r0, sp, #8
 80013ba:	a901      	add	r1, sp, #4
 80013bc:	f001 fc5a 	bl	8002c74 <xTaskCheckForTimeOut>
 80013c0:	2800      	cmp	r0, #0
 80013c2:	f040 80ae 	bne.w	8001522 <xQueueGenericReceive+0x1e2>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013c6:	f002 f80f 	bl	80033e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80013ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d162      	bne.n	8001496 <xQueueGenericReceive+0x156>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80013d0:	f002 f81e 	bl	8003410 <vPortExitCritical>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 809b 	beq.w	8001512 <xQueueGenericReceive+0x1d2>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80013dc:	4628      	mov	r0, r5
 80013de:	9901      	ldr	r1, [sp, #4]
 80013e0:	f001 fad8 	bl	8002994 <vTaskPlaceOnEventList>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80013e4:	f002 f800 	bl	80033e8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80013e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dc06      	bgt.n	80013fc <xQueueGenericReceive+0xbc>
 80013ee:	e00f      	b.n	8001410 <xQueueGenericReceive+0xd0>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80013f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013f2:	3b01      	subs	r3, #1
 80013f4:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80013f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	dd09      	ble.n	8001410 <xQueueGenericReceive+0xd0>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013fe:	b13b      	cbz	r3, 8001410 <xQueueGenericReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001400:	4628      	mov	r0, r5
 8001402:	f001 fb9f 	bl	8002b44 <xTaskRemoveFromEventList>
 8001406:	2800      	cmp	r0, #0
 8001408:	d0f2      	beq.n	80013f0 <xQueueGenericReceive+0xb0>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800140a:	f001 fc6d 	bl	8002ce8 <vTaskMissedYield>
 800140e:	e7ef      	b.n	80013f0 <xQueueGenericReceive+0xb0>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001410:	64a7      	str	r7, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8001412:	f001 fffd 	bl	8003410 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001416:	f001 ffe7 	bl	80033e8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800141a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800141c:	2b00      	cmp	r3, #0
 800141e:	dd12      	ble.n	8001446 <xQueueGenericReceive+0x106>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001420:	6923      	ldr	r3, [r4, #16]
 8001422:	b943      	cbnz	r3, 8001436 <xQueueGenericReceive+0xf6>
 8001424:	e00f      	b.n	8001446 <xQueueGenericReceive+0x106>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8001426:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001428:	3b01      	subs	r3, #1
 800142a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800142c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800142e:	2b00      	cmp	r3, #0
 8001430:	dd09      	ble.n	8001446 <xQueueGenericReceive+0x106>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001432:	6922      	ldr	r2, [r4, #16]
 8001434:	b13a      	cbz	r2, 8001446 <xQueueGenericReceive+0x106>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001436:	4630      	mov	r0, r6
 8001438:	f001 fb84 	bl	8002b44 <xTaskRemoveFromEventList>
 800143c:	2800      	cmp	r0, #0
 800143e:	d0f2      	beq.n	8001426 <xQueueGenericReceive+0xe6>
				{
					vTaskMissedYield();
 8001440:	f001 fc52 	bl	8002ce8 <vTaskMissedYield>
 8001444:	e7ef      	b.n	8001426 <xQueueGenericReceive+0xe6>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001446:	6467      	str	r7, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001448:	f001 ffe2 	bl	8003410 <vPortExitCritical>
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
 800144c:	f000 ff32 	bl	80022b4 <xTaskResumeAll>
 8001450:	b908      	cbnz	r0, 8001456 <xQueueGenericReceive+0x116>
				{
					portYIELD_WITHIN_API();
 8001452:	f001 ff99 	bl	8003388 <vPortYield>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001456:	f001 ffc7 	bl	80033e8 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800145a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800145c:	f04f 0b01 	mov.w	fp, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d08f      	beq.n	8001384 <xQueueGenericReceive+0x44>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001464:	4641      	mov	r1, r8
 8001466:	4620      	mov	r0, r4
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001468:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800146a:	f7ff fc47 	bl	8000cfc <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800146e:	f1ba 0f00 	cmp.w	sl, #0
 8001472:	d166      	bne.n	8001542 <xQueueGenericReceive+0x202>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8001474:	6ba2      	ldr	r2, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001476:	6823      	ldr	r3, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8001478:	3a01      	subs	r2, #1
 800147a:	63a2      	str	r2, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800147c:	b913      	cbnz	r3, 8001484 <xQueueGenericReceive+0x144>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800147e:	f001 fc43 	bl	8002d08 <xTaskGetCurrentTaskHandle>
 8001482:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001484:	6923      	ldr	r3, [r4, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d168      	bne.n	800155c <xQueueGenericReceive+0x21c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800148a:	f001 ffc1 	bl	8003410 <vPortExitCritical>
				return pdPASS;
 800148e:	2001      	movs	r0, #1
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
 8001490:	b005      	add	sp, #20
 8001492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001496:	f001 ffbb 	bl	8003410 <vPortExitCritical>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800149a:	f001 ffa5 	bl	80033e8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800149e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	dc06      	bgt.n	80014b2 <xQueueGenericReceive+0x172>
 80014a4:	e00f      	b.n	80014c6 <xQueueGenericReceive+0x186>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80014a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80014a8:	3b01      	subs	r3, #1
 80014aa:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80014ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	dd09      	ble.n	80014c6 <xQueueGenericReceive+0x186>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014b4:	b13b      	cbz	r3, 80014c6 <xQueueGenericReceive+0x186>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014b6:	4628      	mov	r0, r5
 80014b8:	f001 fb44 	bl	8002b44 <xTaskRemoveFromEventList>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d0f2      	beq.n	80014a6 <xQueueGenericReceive+0x166>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80014c0:	f001 fc12 	bl	8002ce8 <vTaskMissedYield>
 80014c4:	e7ef      	b.n	80014a6 <xQueueGenericReceive+0x166>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80014c6:	64a7      	str	r7, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80014c8:	f001 ffa2 	bl	8003410 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80014cc:	f001 ff8c 	bl	80033e8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80014d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	dc06      	bgt.n	80014e4 <xQueueGenericReceive+0x1a4>
 80014d6:	e00f      	b.n	80014f8 <xQueueGenericReceive+0x1b8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 80014d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014da:	3b01      	subs	r3, #1
 80014dc:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80014de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	dd09      	ble.n	80014f8 <xQueueGenericReceive+0x1b8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014e4:	6923      	ldr	r3, [r4, #16]
 80014e6:	b13b      	cbz	r3, 80014f8 <xQueueGenericReceive+0x1b8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014e8:	4630      	mov	r0, r6
 80014ea:	f001 fb2b 	bl	8002b44 <xTaskRemoveFromEventList>
 80014ee:	2800      	cmp	r0, #0
 80014f0:	d0f2      	beq.n	80014d8 <xQueueGenericReceive+0x198>
				{
					vTaskMissedYield();
 80014f2:	f001 fbf9 	bl	8002ce8 <vTaskMissedYield>
 80014f6:	e7ef      	b.n	80014d8 <xQueueGenericReceive+0x198>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80014f8:	6467      	str	r7, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80014fa:	f001 ff89 	bl	8003410 <vPortExitCritical>
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
 80014fe:	f000 fed9 	bl	80022b4 <xTaskResumeAll>
 8001502:	e7a8      	b.n	8001456 <xQueueGenericReceive+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001504:	a802      	add	r0, sp, #8
 8001506:	f001 fba3 	bl	8002c50 <vTaskSetTimeOutState>
 800150a:	e743      	b.n	8001394 <xQueueGenericReceive+0x54>
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800150c:	f001 ff48 	bl	80033a0 <ulPortSetInterruptMask>
 8001510:	e7fe      	b.n	8001510 <xQueueGenericReceive+0x1d0>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						taskENTER_CRITICAL();
 8001512:	f001 ff69 	bl	80033e8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001516:	6860      	ldr	r0, [r4, #4]
 8001518:	f001 fc0e 	bl	8002d38 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800151c:	f001 ff78 	bl	8003410 <vPortExitCritical>
 8001520:	e75c      	b.n	80013dc <xQueueGenericReceive+0x9c>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff fbfe 	bl	8000d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001528:	f000 fec4 	bl	80022b4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 800152c:	2000      	movs	r0, #0
		}
	}
}
 800152e:	b005      	add	sp, #20
 8001530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001534:	9000      	str	r0, [sp, #0]
 8001536:	f001 ff6b 	bl	8003410 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800153a:	9800      	ldr	r0, [sp, #0]
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
 800153c:	b005      	add	sp, #20
 800153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001542:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001544:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001546:	2b00      	cmp	r3, #0
 8001548:	d09f      	beq.n	800148a <xQueueGenericReceive+0x14a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800154a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800154e:	f001 faf9 	bl	8002b44 <xTaskRemoveFromEventList>
 8001552:	2800      	cmp	r0, #0
 8001554:	d099      	beq.n	800148a <xQueueGenericReceive+0x14a>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
						{
							queueYIELD_IF_USING_PREEMPTION();
 8001556:	f001 ff17 	bl	8003388 <vPortYield>
 800155a:	e796      	b.n	800148a <xQueueGenericReceive+0x14a>
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800155c:	f104 0010 	add.w	r0, r4, #16
 8001560:	f001 faf0 	bl	8002b44 <xTaskRemoveFromEventList>
 8001564:	2801      	cmp	r0, #1
 8001566:	d190      	bne.n	800148a <xQueueGenericReceive+0x14a>
 8001568:	e7f5      	b.n	8001556 <xQueueGenericReceive+0x216>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800156a:	f001 ff19 	bl	80033a0 <ulPortSetInterruptMask>
 800156e:	e7fe      	b.n	800156e <xQueueGenericReceive+0x22e>
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001570:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001572:	2b00      	cmp	r3, #0
 8001574:	f43f aef1 	beq.w	800135a <xQueueGenericReceive+0x1a>
 8001578:	f001 ff12 	bl	80033a0 <ulPortSetInterruptMask>
 800157c:	e7fe      	b.n	800157c <xQueueGenericReceive+0x23c>
 800157e:	bf00      	nop

08001580 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8001580:	b570      	push	{r4, r5, r6, lr}
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;

		configASSERT( pxMutex );
 8001582:	4604      	mov	r4, r0
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8001584:	460d      	mov	r5, r1
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;

		configASSERT( pxMutex );
 8001586:	b180      	cbz	r0, 80015aa <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001588:	6846      	ldr	r6, [r0, #4]
 800158a:	f001 fbbd 	bl	8002d08 <xTaskGetCurrentTaskHandle>
 800158e:	4286      	cmp	r6, r0
 8001590:	d00e      	beq.n	80015b0 <xQueueTakeMutexRecursive+0x30>
			( pxMutex->u.uxRecursiveCallCount )++;
			xReturn = pdPASS;
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 8001592:	2100      	movs	r1, #0
 8001594:	460b      	mov	r3, r1
 8001596:	462a      	mov	r2, r5
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff fed1 	bl	8001340 <xQueueGenericReceive>

			/* pdPASS will only be returned if we successfully obtained the mutex,
			we may have blocked to reach here. */
			if( xReturn == pdPASS )
 800159e:	2801      	cmp	r0, #1
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80015a0:	bf02      	ittt	eq
 80015a2:	68e3      	ldreq	r3, [r4, #12]
 80015a4:	3301      	addeq	r3, #1
 80015a6:	60e3      	streq	r3, [r4, #12]
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
	}
 80015a8:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;

		configASSERT( pxMutex );
 80015aa:	f001 fef9 	bl	80033a0 <ulPortSetInterruptMask>
 80015ae:	e7fe      	b.n	80015ae <xQueueTakeMutexRecursive+0x2e>

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80015b0:	68e3      	ldr	r3, [r4, #12]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 80015b6:	2001      	movs	r0, #1
 80015b8:	bd70      	pop	{r4, r5, r6, pc}
 80015ba:	bf00      	nop

080015bc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80015be:	4604      	mov	r4, r0
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80015c0:	460e      	mov	r6, r1
 80015c2:	4615      	mov	r5, r2
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80015c4:	b168      	cbz	r0, 80015e2 <xQueueReceiveFromISR+0x26>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015c6:	b311      	cbz	r1, 800160e <xQueueReceiveFromISR+0x52>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80015c8:	f001 ffea 	bl	80035a0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80015cc:	f001 fee8 	bl	80033a0 <ulPortSetInterruptMask>
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80015d2:	4607      	mov	r7, r0
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015d4:	b943      	cbnz	r3, 80015e8 <xQueueReceiveFromISR+0x2c>

			xReturn = pdPASS;
		}
		else
		{
			xReturn = pdFAIL;
 80015d6:	461c      	mov	r4, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80015d8:	4638      	mov	r0, r7
 80015da:	f001 ff15 	bl	8003408 <vPortClearInterruptMask>

	return xReturn;
}
 80015de:	4620      	mov	r0, r4
 80015e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80015e2:	f001 fedd 	bl	80033a0 <ulPortSetInterruptMask>
 80015e6:	e7fe      	b.n	80015e6 <xQueueReceiveFromISR+0x2a>
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015e8:	4631      	mov	r1, r6
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff fb86 	bl	8000cfc <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 80015f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015f2:	3b01      	subs	r3, #1
 80015f4:	63a3      	str	r3, [r4, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 80015f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015f8:	3301      	adds	r3, #1
 80015fa:	d00e      	beq.n	800161a <xQueueReceiveFromISR+0x5e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 80015fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015fe:	3301      	adds	r3, #1
 8001600:	6463      	str	r3, [r4, #68]	; 0x44
		{
			xReturn = pdFAIL;
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001602:	4638      	mov	r0, r7
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
 8001604:	2401      	movs	r4, #1
		{
			xReturn = pdFAIL;
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001606:	f001 feff 	bl	8003408 <vPortClearInterruptMask>

	return xReturn;
}
 800160a:	4620      	mov	r0, r4
 800160c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800160e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0d9      	beq.n	80015c8 <xQueueReceiveFromISR+0xc>
 8001614:	f001 fec4 	bl	80033a0 <ulPortSetInterruptMask>
 8001618:	e7fe      	b.n	8001618 <xQueueReceiveFromISR+0x5c>
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800161a:	6923      	ldr	r3, [r4, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <xQueueReceiveFromISR+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001620:	f104 0010 	add.w	r0, r4, #16
 8001624:	f001 fa8e 	bl	8002b44 <xTaskRemoveFromEventList>
 8001628:	2800      	cmp	r0, #0
 800162a:	d0ea      	beq.n	8001602 <xQueueReceiveFromISR+0x46>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800162c:	2d00      	cmp	r5, #0
 800162e:	d0e8      	beq.n	8001602 <xQueueReceiveFromISR+0x46>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001630:	2401      	movs	r4, #1
		{
			xReturn = pdFAIL;
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001632:	4638      	mov	r0, r7
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001634:	602c      	str	r4, [r5, #0]
		{
			xReturn = pdFAIL;
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001636:	f001 fee7 	bl	8003408 <vPortClearInterruptMask>

	return xReturn;
}
 800163a:	4620      	mov	r0, r4
 800163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800163e:	bf00      	nop

08001640 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 8001640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001644:	4604      	mov	r4, r0
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 8001646:	460e      	mov	r6, r1
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001648:	b168      	cbz	r0, 8001666 <xQueuePeekFromISR+0x26>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800164a:	b1e1      	cbz	r1, 8001686 <xQueuePeekFromISR+0x46>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800164c:	f001 ffa8 	bl	80035a0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001650:	f001 fea6 	bl	80033a0 <ulPortSetInterruptMask>
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001654:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001656:	4680      	mov	r8, r0
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001658:	b945      	cbnz	r5, 800166c <xQueuePeekFromISR+0x2c>
		{
			xReturn = pdFAIL;
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800165a:	4640      	mov	r0, r8
 800165c:	f001 fed4 	bl	8003408 <vPortClearInterruptMask>

	return xReturn;
}
 8001660:	4628      	mov	r0, r5
 8001662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001666:	f001 fe9b 	bl	80033a0 <ulPortSetInterruptMask>
 800166a:	e7fe      	b.n	800166a <xQueuePeekFromISR+0x2a>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800166c:	68e7      	ldr	r7, [r4, #12]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800166e:	4631      	mov	r1, r6
 8001670:	4620      	mov	r0, r4
 8001672:	f7ff fb43 	bl	8000cfc <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;

			xReturn = pdPASS;
 8001676:	2501      	movs	r5, #1
		{
			xReturn = pdFAIL;
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001678:	4640      	mov	r0, r8

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
			prvCopyDataFromQueue( pxQueue, pvBuffer );
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800167a:	60e7      	str	r7, [r4, #12]
		{
			xReturn = pdFAIL;
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800167c:	f001 fec4 	bl	8003408 <vPortClearInterruptMask>

	return xReturn;
}
 8001680:	4628      	mov	r0, r5
 8001682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001686:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0df      	beq.n	800164c <xQueuePeekFromISR+0xc>
 800168c:	f001 fe88 	bl	80033a0 <ulPortSetInterruptMask>
 8001690:	e7fe      	b.n	8001690 <xQueuePeekFromISR+0x50>
 8001692:	bf00      	nop

08001694 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8001694:	b510      	push	{r4, lr}
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8001696:	4604      	mov	r4, r0
 8001698:	b130      	cbz	r0, 80016a8 <uxQueueMessagesWaiting+0x14>

	taskENTER_CRITICAL();
 800169a:	f001 fea5 	bl	80033e8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800169e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	}
	taskEXIT_CRITICAL();
 80016a0:	f001 feb6 	bl	8003410 <vPortExitCritical>

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80016a4:	4620      	mov	r0, r4
 80016a6:	bd10      	pop	{r4, pc}

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80016a8:	f001 fe7a 	bl	80033a0 <ulPortSetInterruptMask>
 80016ac:	e7fe      	b.n	80016ac <uxQueueMessagesWaiting+0x18>
 80016ae:	bf00      	nop

080016b0 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80016b0:	b510      	push	{r4, lr}
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );
 80016b2:	4604      	mov	r4, r0
 80016b4:	b140      	cbz	r0, 80016c8 <uxQueueSpacesAvailable+0x18>

	taskENTER_CRITICAL();
 80016b6:	f001 fe97 	bl	80033e8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80016ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016bc:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80016be:	1ae4      	subs	r4, r4, r3
	}
	taskEXIT_CRITICAL();
 80016c0:	f001 fea6 	bl	8003410 <vPortExitCritical>

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80016c4:	4620      	mov	r0, r4
 80016c6:	bd10      	pop	{r4, pc}
{
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );
 80016c8:	f001 fe6a 	bl	80033a0 <ulPortSetInterruptMask>
 80016cc:	e7fe      	b.n	80016cc <uxQueueSpacesAvailable+0x1c>
 80016ce:	bf00      	nop

080016d0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80016d0:	b508      	push	{r3, lr}
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80016d2:	b108      	cbz	r0, 80016d8 <uxQueueMessagesWaitingFromISR+0x8>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80016d4:	6b80      	ldr	r0, [r0, #56]	; 0x38

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80016d6:	bd08      	pop	{r3, pc}

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80016d8:	f001 fe62 	bl	80033a0 <ulPortSetInterruptMask>
 80016dc:	e7fe      	b.n	80016dc <uxQueueMessagesWaitingFromISR+0xc>
 80016de:	bf00      	nop

080016e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80016e0:	b510      	push	{r4, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80016e2:	4604      	mov	r4, r0
 80016e4:	b380      	cbz	r0, 8001748 <vQueueDelete+0x68>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80016e6:	f240 03b0 	movw	r3, #176	; 0xb0
 80016ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4290      	cmp	r0, r2
 80016f2:	d02c      	beq.n	800174e <vQueueDelete+0x6e>
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	4290      	cmp	r0, r2
 80016f8:	d02e      	beq.n	8001758 <vQueueDelete+0x78>
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	4290      	cmp	r0, r2
 80016fe:	d030      	beq.n	8001762 <vQueueDelete+0x82>
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	4290      	cmp	r0, r2
 8001704:	d01b      	beq.n	800173e <vQueueDelete+0x5e>
 8001706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001708:	4290      	cmp	r0, r2
 800170a:	d031      	beq.n	8001770 <vQueueDelete+0x90>
 800170c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170e:	4290      	cmp	r0, r2
 8001710:	d02c      	beq.n	800176c <vQueueDelete+0x8c>
 8001712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001714:	4290      	cmp	r0, r2
 8001716:	d00d      	beq.n	8001734 <vQueueDelete+0x54>
 8001718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800171a:	4290      	cmp	r0, r2
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800171c:	bf08      	it	eq
 800171e:	2207      	moveq	r2, #7
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001720:	d009      	beq.n	8001736 <vQueueDelete+0x56>
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	if( pxQueue->pcHead != NULL )
 8001722:	6820      	ldr	r0, [r4, #0]
 8001724:	b108      	cbz	r0, 800172a <vQueueDelete+0x4a>
	{
		vPortFree( pxQueue->pcHead );
 8001726:	f001 ff91 	bl	800364c <vPortFree>
	}
	vPortFree( pxQueue );
 800172a:	4620      	mov	r0, r4
}
 800172c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	#endif
	if( pxQueue->pcHead != NULL )
	{
		vPortFree( pxQueue->pcHead );
	}
	vPortFree( pxQueue );
 8001730:	f001 bf8c 	b.w	800364c <vPortFree>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001734:	2206      	movs	r2, #6
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8001736:	2100      	movs	r1, #0
 8001738:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800173c:	e7f1      	b.n	8001722 <vQueueDelete+0x42>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800173e:	2203      	movs	r2, #3
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8001740:	2100      	movs	r1, #0
 8001742:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8001746:	e7ec      	b.n	8001722 <vQueueDelete+0x42>

void vQueueDelete( QueueHandle_t xQueue )
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001748:	f001 fe2a 	bl	80033a0 <ulPortSetInterruptMask>
 800174c:	e7fe      	b.n	800174c <vQueueDelete+0x6c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800174e:	2200      	movs	r2, #0
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8001750:	2100      	movs	r1, #0
 8001752:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8001756:	e7e4      	b.n	8001722 <vQueueDelete+0x42>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001758:	2201      	movs	r2, #1
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800175a:	2100      	movs	r1, #0
 800175c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8001760:	e7df      	b.n	8001722 <vQueueDelete+0x42>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001762:	2202      	movs	r2, #2
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8001764:	2100      	movs	r1, #0
 8001766:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800176a:	e7da      	b.n	8001722 <vQueueDelete+0x42>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800176c:	2205      	movs	r2, #5
 800176e:	e7e2      	b.n	8001736 <vQueueDelete+0x56>
 8001770:	2204      	movs	r2, #4
 8001772:	e7e0      	b.n	8001736 <vQueueDelete+0x56>

08001774 <uxQueueGetQueueNumber>:
#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
	}
 8001774:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001776:	4770      	bx	lr

08001778 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001778:	64c1      	str	r1, [r0, #76]	; 0x4c
 800177a:	4770      	bx	lr

0800177c <ucQueueGetQueueType>:
#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->ucQueueType;
	}
 800177c:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop

08001784 <xQueueIsQueueEmptyFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 8001784:	b508      	push	{r3, lr}
BaseType_t xReturn;

	configASSERT( xQueue );
 8001786:	b128      	cbz	r0, 8001794 <xQueueIsQueueEmptyFromISR+0x10>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001788:	6b80      	ldr	r0, [r0, #56]	; 0x38
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800178a:	f1d0 0001 	rsbs	r0, r0, #1
 800178e:	bf38      	it	cc
 8001790:	2000      	movcc	r0, #0
 8001792:	bd08      	pop	{r3, pc}

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
 8001794:	f001 fe04 	bl	80033a0 <ulPortSetInterruptMask>
 8001798:	e7fe      	b.n	8001798 <xQueueIsQueueEmptyFromISR+0x14>
 800179a:	bf00      	nop

0800179c <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800179c:	b508      	push	{r3, lr}
BaseType_t xReturn;

	configASSERT( xQueue );
 800179e:	b128      	cbz	r0, 80017ac <xQueueIsQueueFullFromISR+0x10>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 80017a0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80017a2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80017a4:	1a13      	subs	r3, r2, r0
 80017a6:	4258      	negs	r0, r3
 80017a8:	4158      	adcs	r0, r3
 80017aa:	bd08      	pop	{r3, pc}

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
 80017ac:	f001 fdf8 	bl	80033a0 <ulPortSetInterruptMask>
 80017b0:	e7fe      	b.n	80017b0 <xQueueIsQueueFullFromISR+0x14>
 80017b2:	bf00      	nop

080017b4 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80017b4:	f240 03b0 	movw	r3, #176	; 0xb0
 80017b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80017bc:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	b18a      	cbz	r2, 80017e6 <vQueueAddToRegistry+0x32>
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	b1ba      	cbz	r2, 80017f6 <vQueueAddToRegistry+0x42>
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	b1ba      	cbz	r2, 80017fa <vQueueAddToRegistry+0x46>
 80017ca:	699a      	ldr	r2, [r3, #24]
 80017cc:	b1ba      	cbz	r2, 80017fe <vQueueAddToRegistry+0x4a>
 80017ce:	6a1a      	ldr	r2, [r3, #32]
 80017d0:	b1ba      	cbz	r2, 8001802 <vQueueAddToRegistry+0x4e>
 80017d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d4:	b1ba      	cbz	r2, 8001806 <vQueueAddToRegistry+0x52>
 80017d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d8:	b122      	cbz	r2, 80017e4 <vQueueAddToRegistry+0x30>
 80017da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017dc:	b1aa      	cbz	r2, 800180a <vQueueAddToRegistry+0x56>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80017de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017e2:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80017e4:	2206      	movs	r2, #6
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 80017e6:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80017ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80017ee:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80017f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017f4:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80017f6:	2201      	movs	r2, #1
 80017f8:	e7f5      	b.n	80017e6 <vQueueAddToRegistry+0x32>
 80017fa:	2202      	movs	r2, #2
 80017fc:	e7f3      	b.n	80017e6 <vQueueAddToRegistry+0x32>
 80017fe:	2203      	movs	r2, #3
 8001800:	e7f1      	b.n	80017e6 <vQueueAddToRegistry+0x32>
 8001802:	2204      	movs	r2, #4
 8001804:	e7ef      	b.n	80017e6 <vQueueAddToRegistry+0x32>
 8001806:	2205      	movs	r2, #5
 8001808:	e7ed      	b.n	80017e6 <vQueueAddToRegistry+0x32>
 800180a:	2207      	movs	r2, #7
 800180c:	e7eb      	b.n	80017e6 <vQueueAddToRegistry+0x32>
 800180e:	bf00      	nop

08001810 <vQueueUnregisterQueue>:

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001810:	f240 03b0 	movw	r3, #176	; 0xb0
 8001814:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4282      	cmp	r2, r0
 800181c:	d01c      	beq.n	8001858 <vQueueUnregisterQueue+0x48>
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	4282      	cmp	r2, r0
 8001822:	d01b      	beq.n	800185c <vQueueUnregisterQueue+0x4c>
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	4282      	cmp	r2, r0
 8001828:	d01a      	beq.n	8001860 <vQueueUnregisterQueue+0x50>
 800182a:	69da      	ldr	r2, [r3, #28]
 800182c:	4282      	cmp	r2, r0
 800182e:	d019      	beq.n	8001864 <vQueueUnregisterQueue+0x54>
 8001830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001832:	4282      	cmp	r2, r0
 8001834:	d018      	beq.n	8001868 <vQueueUnregisterQueue+0x58>
 8001836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001838:	4282      	cmp	r2, r0
 800183a:	d017      	beq.n	800186c <vQueueUnregisterQueue+0x5c>
 800183c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183e:	4282      	cmp	r2, r0
 8001840:	d005      	beq.n	800184e <vQueueUnregisterQueue+0x3e>
 8001842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001844:	4282      	cmp	r2, r0
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001846:	bf08      	it	eq
 8001848:	2207      	moveq	r2, #7
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800184a:	d001      	beq.n	8001850 <vQueueUnregisterQueue+0x40>
 800184c:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800184e:	2206      	movs	r2, #6
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8001850:	2100      	movs	r1, #0
 8001852:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8001856:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001858:	2200      	movs	r2, #0
 800185a:	e7f9      	b.n	8001850 <vQueueUnregisterQueue+0x40>
 800185c:	2201      	movs	r2, #1
 800185e:	e7f7      	b.n	8001850 <vQueueUnregisterQueue+0x40>
 8001860:	2202      	movs	r2, #2
 8001862:	e7f5      	b.n	8001850 <vQueueUnregisterQueue+0x40>
 8001864:	2203      	movs	r2, #3
 8001866:	e7f3      	b.n	8001850 <vQueueUnregisterQueue+0x40>
 8001868:	2204      	movs	r2, #4
 800186a:	e7f1      	b.n	8001850 <vQueueUnregisterQueue+0x40>
 800186c:	2205      	movs	r2, #5
 800186e:	e7ef      	b.n	8001850 <vQueueUnregisterQueue+0x40>

08001870 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8001870:	b538      	push	{r3, r4, r5, lr}
 8001872:	4604      	mov	r4, r0
 8001874:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001876:	f001 fdb7 	bl	80033e8 <vPortEnterCritical>
 800187a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800187c:	3301      	adds	r3, #1
 800187e:	bf04      	itt	eq
 8001880:	2300      	moveq	r3, #0
 8001882:	6463      	streq	r3, [r4, #68]	; 0x44
 8001884:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001886:	3301      	adds	r3, #1
 8001888:	bf04      	itt	eq
 800188a:	2300      	moveq	r3, #0
 800188c:	64a3      	streq	r3, [r4, #72]	; 0x48
 800188e:	f001 fdbf 	bl	8003410 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001894:	b923      	cbnz	r3, 80018a0 <vQueueWaitForMessageRestricted+0x30>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001896:	4629      	mov	r1, r5
 8001898:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800189c:	f001 f918 	bl	8002ad0 <vTaskPlaceOnEventListRestricted>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80018a0:	f001 fda2 	bl	80033e8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80018a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	dd14      	ble.n	80018d4 <vQueueWaitForMessageRestricted+0x64>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018ac:	b193      	cbz	r3, 80018d4 <vQueueWaitForMessageRestricted+0x64>
 80018ae:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80018b2:	e007      	b.n	80018c4 <vQueueWaitForMessageRestricted+0x54>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80018b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80018b6:	3b01      	subs	r3, #1
 80018b8:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80018ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80018bc:	2b00      	cmp	r3, #0
 80018be:	dd09      	ble.n	80018d4 <vQueueWaitForMessageRestricted+0x64>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018c2:	b13b      	cbz	r3, 80018d4 <vQueueWaitForMessageRestricted+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018c4:	4628      	mov	r0, r5
 80018c6:	f001 f93d 	bl	8002b44 <xTaskRemoveFromEventList>
 80018ca:	2800      	cmp	r0, #0
 80018cc:	d0f2      	beq.n	80018b4 <vQueueWaitForMessageRestricted+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80018ce:	f001 fa0b 	bl	8002ce8 <vTaskMissedYield>
 80018d2:	e7ef      	b.n	80018b4 <vQueueWaitForMessageRestricted+0x44>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80018da:	f001 fd99 	bl	8003410 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80018de:	f001 fd83 	bl	80033e8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80018e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	dd14      	ble.n	8001912 <vQueueWaitForMessageRestricted+0xa2>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018e8:	6923      	ldr	r3, [r4, #16]
 80018ea:	b193      	cbz	r3, 8001912 <vQueueWaitForMessageRestricted+0xa2>
 80018ec:	f104 0510 	add.w	r5, r4, #16
 80018f0:	e007      	b.n	8001902 <vQueueWaitForMessageRestricted+0x92>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 80018f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018f4:	3b01      	subs	r3, #1
 80018f6:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80018f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	dd09      	ble.n	8001912 <vQueueWaitForMessageRestricted+0xa2>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018fe:	6923      	ldr	r3, [r4, #16]
 8001900:	b13b      	cbz	r3, 8001912 <vQueueWaitForMessageRestricted+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001902:	4628      	mov	r0, r5
 8001904:	f001 f91e 	bl	8002b44 <xTaskRemoveFromEventList>
 8001908:	2800      	cmp	r0, #0
 800190a:	d0f2      	beq.n	80018f2 <vQueueWaitForMessageRestricted+0x82>
				{
					vTaskMissedYield();
 800190c:	f001 f9ec 	bl	8002ce8 <vTaskMissedYield>
 8001910:	e7ef      	b.n	80018f2 <vQueueWaitForMessageRestricted+0x82>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001916:	6463      	str	r3, [r4, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8001918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 800191c:	f001 bd78 	b.w	8003410 <vPortExitCritical>

08001920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001920:	b538      	push	{r3, r4, r5, lr}
 8001922:	f240 1510 	movw	r5, #272	; 0x110
 8001926:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800192a:	2400      	movs	r4, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800192c:	1928      	adds	r0, r5, r4
 800192e:	3414      	adds	r4, #20
 8001930:	f7ff f996 	bl	8000c60 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001934:	2c64      	cmp	r4, #100	; 0x64
 8001936:	d1f9      	bne.n	800192c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8001938:	f240 15a4 	movw	r5, #420	; 0x1a4
 800193c:	f2c2 0500 	movt	r5, #8192	; 0x2000
	vListInitialise( &xDelayedTaskList2 );
 8001940:	f240 14b8 	movw	r4, #440	; 0x1b8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8001944:	4628      	mov	r0, r5
	vListInitialise( &xDelayedTaskList2 );
 8001946:	f2c2 0400 	movt	r4, #8192	; 0x2000
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800194a:	f7ff f989 	bl	8000c60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff f986 	bl	8000c60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001954:	f240 1080 	movw	r0, #384	; 0x180
 8001958:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800195c:	f7ff f980 	bl	8000c60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001960:	f240 00fc 	movw	r0, #252	; 0xfc
 8001964:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001968:	f7ff f97a 	bl	8000c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800196c:	f240 10d0 	movw	r0, #464	; 0x1d0
 8001970:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001974:	f7ff f974 	bl	8000c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001978:	f240 02f0 	movw	r2, #240	; 0xf0
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800197c:	f240 139c 	movw	r3, #412	; 0x19c
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001980:	f2c2 0200 	movt	r2, #8192	; 0x2000
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001984:	f2c2 0300 	movt	r3, #8192	; 0x2000
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001988:	6015      	str	r5, [r2, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800198a:	601c      	str	r4, [r3, #0]
 800198c:	bd38      	pop	{r3, r4, r5, pc}
 800198e:	bf00      	nop

08001990 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001994:	af0a      	add	r7, sp, #40	; 0x28
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 8001996:	4606      	mov	r6, r0
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001998:	460d      	mov	r5, r1
 800199a:	4690      	mov	r8, r2
 800199c:	469a      	mov	sl, r3
 800199e:	e897 0a80 	ldmia.w	r7, {r7, r9, fp}
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 80019a2:	2800      	cmp	r0, #0
 80019a4:	f000 80ae 	beq.w	8001b04 <xTaskGenericCreate+0x174>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 80019a8:	2f04      	cmp	r7, #4
 80019aa:	d902      	bls.n	80019b2 <xTaskGenericCreate+0x22>
 80019ac:	f001 fcf8 	bl	80033a0 <ulPortSetInterruptMask>
 80019b0:	e7fe      	b.n	80019b0 <xTaskGenericCreate+0x20>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80019b2:	204c      	movs	r0, #76	; 0x4c
 80019b4:	f001 fe1a 	bl	80035ec <pvPortMalloc>

	if( pxNewTCB != NULL )
 80019b8:	4604      	mov	r4, r0
 80019ba:	2800      	cmp	r0, #0
 80019bc:	f000 80c1 	beq.w	8001b42 <xTaskGenericCreate+0x1b2>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019c0:	f1bb 0f00 	cmp.w	fp, #0
 80019c4:	f000 80b1 	beq.w	8001b2a <xTaskGenericCreate+0x19a>
 80019c8:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
 80019cc:	4658      	mov	r0, fp
 80019ce:	ea4f 0b88 	mov.w	fp, r8, lsl #2
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80019d2:	465a      	mov	r2, fp
 80019d4:	21a5      	movs	r1, #165	; 0xa5
 80019d6:	f004 fcdb 	bl	8006390 <memset>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80019da:	782a      	ldrb	r2, [r5, #0]
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 80019dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80019de:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 80019e2:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80019e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		pxTCB->pcTaskName[ x ] = pcName[ x ];

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80019ea:	782a      	ldrb	r2, [r5, #0]
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 80019ec:	eb03 0388 	add.w	r3, r3, r8, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80019f0:	f023 0b07 	bic.w	fp, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80019f4:	b32a      	cbz	r2, 8001a42 <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80019f6:	786b      	ldrb	r3, [r5, #1]
 80019f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80019fc:	786b      	ldrb	r3, [r5, #1]
 80019fe:	b303      	cbz	r3, 8001a42 <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001a00:	78ab      	ldrb	r3, [r5, #2]
 8001a02:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001a06:	78ab      	ldrb	r3, [r5, #2]
 8001a08:	b1db      	cbz	r3, 8001a42 <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001a0a:	78eb      	ldrb	r3, [r5, #3]
 8001a0c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001a10:	78eb      	ldrb	r3, [r5, #3]
 8001a12:	b1b3      	cbz	r3, 8001a42 <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001a14:	792b      	ldrb	r3, [r5, #4]
 8001a16:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001a1a:	792b      	ldrb	r3, [r5, #4]
 8001a1c:	b18b      	cbz	r3, 8001a42 <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001a1e:	796b      	ldrb	r3, [r5, #5]
 8001a20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001a24:	796b      	ldrb	r3, [r5, #5]
 8001a26:	b163      	cbz	r3, 8001a42 <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001a28:	79ab      	ldrb	r3, [r5, #6]
 8001a2a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001a2e:	79ab      	ldrb	r3, [r5, #6]
 8001a30:	b13b      	cbz	r3, 8001a42 <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001a32:	79eb      	ldrb	r3, [r5, #7]
 8001a34:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001a38:	79eb      	ldrb	r3, [r5, #7]
 8001a3a:	b113      	cbz	r3, 8001a42 <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001a3c:	7a2b      	ldrb	r3, [r5, #8]
 8001a3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a42:	2300      	movs	r3, #0
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001a44:	f104 0804 	add.w	r8, r4, #4
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001a4c:	4640      	mov	r0, r8
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8001a4e:	62e7      	str	r7, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001a50:	64a7      	str	r7, [r4, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001a52:	f7ff f911 	bl	8000c78 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001a56:	f104 0018 	add.w	r0, r4, #24
 8001a5a:	f7ff f90d 	bl	8000c78 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a5e:	f1c7 0305 	rsb	r3, r7, #5
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8001a62:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8001a64:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a66:	4658      	mov	r0, fp
 8001a68:	4631      	mov	r1, r6
 8001a6a:	4652      	mov	r2, sl
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a6c:	61a3      	str	r3, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a6e:	f001 fc65 	bl	800333c <pxPortInitialiseStack>
 8001a72:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8001a74:	f1b9 0f00 	cmp.w	r9, #0
 8001a78:	d001      	beq.n	8001a7e <xTaskGenericCreate+0xee>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a7a:	f8c9 4000 	str.w	r4, [r9]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8001a7e:	f001 fcb3 	bl	80033e8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8001a82:	f240 1378 	movw	r3, #376	; 0x178
 8001a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
			if( pxCurrentTCB == NULL )
 8001a8a:	f240 167c 	movw	r6, #380	; 0x17c

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8001a8e:	681a      	ldr	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8001a90:	f2c2 0600 	movt	r6, #8192	; 0x2000

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8001a94:	3201      	adds	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8001a98:	6832      	ldr	r2, [r6, #0]
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	d03a      	beq.n	8001b14 <xTaskGenericCreate+0x184>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8001a9e:	f240 05f4 	movw	r5, #244	; 0xf4
 8001aa2:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001aa6:	682b      	ldr	r3, [r5, #0]
 8001aa8:	b923      	cbnz	r3, 8001ab4 <xTaskGenericCreate+0x124>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8001aaa:	6833      	ldr	r3, [r6, #0]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
 8001ab0:	bf28      	it	cs
 8001ab2:	6034      	strcs	r4, [r6, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001ab4:	f240 10a0 	movw	r0, #416	; 0x1a0
 8001ab8:	f2c2 0000 	movt	r0, #8192	; 0x2000
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001abc:	f240 12e4 	movw	r2, #484	; 0x1e4
 8001ac0:	f2c2 0200 	movt	r2, #8192	; 0x2000
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001ac4:	6801      	ldr	r1, [r0, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001ac6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ac8:	f8d2 e000 	ldr.w	lr, [r2]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001acc:	3101      	adds	r1, #1
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001ace:	4573      	cmp	r3, lr
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001ad0:	6001      	str	r1, [r0, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001ad2:	f240 1010 	movw	r0, #272	; 0x110
 8001ad6:	bf88      	it	hi
 8001ad8:	6013      	strhi	r3, [r2, #0]
 8001ada:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001ade:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ae2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001ae6:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001ae8:	4641      	mov	r1, r8
 8001aea:	f7ff f8c9 	bl	8000c80 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8001aee:	f001 fc8f 	bl	8003410 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8001af2:	682b      	ldr	r3, [r5, #0]
 8001af4:	b11b      	cbz	r3, 8001afe <xTaskGenericCreate+0x16e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001af6:	6833      	ldr	r3, [r6, #0]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	429f      	cmp	r7, r3
 8001afc:	d805      	bhi.n	8001b0a <xTaskGenericCreate+0x17a>
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
 8001afe:	2001      	movs	r0, #1
 8001b00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 8001b04:	f001 fc4c 	bl	80033a0 <ulPortSetInterruptMask>
 8001b08:	e7fe      	b.n	8001b08 <xTaskGenericCreate+0x178>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
			{
				taskYIELD_IF_USING_PREEMPTION();
 8001b0a:	f001 fc3d 	bl	8003388 <vPortYield>
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
 8001b0e:	2001      	movs	r0, #1
 8001b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uxCurrentNumberOfTasks++;
			if( pxCurrentTCB == NULL )
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8001b14:	6034      	str	r4, [r6, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	f240 05f4 	movw	r5, #244	; 0xf4
 8001b1e:	d101      	bne.n	8001b24 <xTaskGenericCreate+0x194>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8001b20:	f7ff fefe 	bl	8001920 <prvInitialiseTaskLists>
 8001b24:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001b28:	e7c4      	b.n	8001ab4 <xTaskGenericCreate+0x124>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b2a:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 8001b2e:	4658      	mov	r0, fp
 8001b30:	f001 fd5c 	bl	80035ec <pvPortMalloc>
 8001b34:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001b36:	2800      	cmp	r0, #0
 8001b38:	f47f af4b 	bne.w	80019d2 <xTaskGenericCreate+0x42>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f001 fd85 	bl	800364c <vPortFree>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8001b46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b4a:	bf00      	nop

08001b4c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001b4c:	b538      	push	{r3, r4, r5, lr}
 8001b4e:	4604      	mov	r4, r0
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001b50:	f001 fc4a 	bl	80033e8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001b54:	2c00      	cmp	r4, #0
 8001b56:	d053      	beq.n	8001c00 <vTaskDelete+0xb4>

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001b58:	1d25      	adds	r5, r4, #4
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	f7ff f8ba 	bl	8000cd4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b62:	b11b      	cbz	r3, 8001b6c <vTaskDelete+0x20>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b64:	f104 0018 	add.w	r0, r4, #24
 8001b68:	f7ff f8b4 	bl	8000cd4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8001b6c:	f240 00fc 	movw	r0, #252	; 0xfc
 8001b70:	4629      	mov	r1, r5
 8001b72:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001b76:	f7ff f883 	bl	8000c80 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8001b7a:	f240 02f8 	movw	r2, #248	; 0xf8

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8001b7e:	f240 13a0 	movw	r3, #416	; 0x1a0
 8001b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8001b86:	f2c2 0200 	movt	r2, #8192	; 0x2000

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8001b8a:	6819      	ldr	r1, [r3, #0]
			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8001b8c:	6810      	ldr	r0, [r2, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8001b8e:	3101      	adds	r1, #1
			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8001b90:	3001      	adds	r0, #1

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8001b92:	6019      	str	r1, [r3, #0]
			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8001b94:	6010      	str	r0, [r2, #0]
			can detect that the task lists need re-generating. */
			uxTaskNumber++;

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8001b96:	f001 fc3b 	bl	8003410 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8001b9a:	f240 03f4 	movw	r3, #244	; 0xf4
 8001b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b1f3      	cbz	r3, 8001be4 <vTaskDelete+0x98>
		{
			if( pxTCB == pxCurrentTCB )
 8001ba6:	f240 137c 	movw	r3, #380	; 0x17c
 8001baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	429c      	cmp	r4, r3
 8001bb2:	d018      	beq.n	8001be6 <vTaskDelete+0x9a>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bb4:	f240 03f0 	movw	r3, #240	; 0xf0
 8001bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	b93a      	cbnz	r2, 8001bd2 <vTaskDelete+0x86>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001bc2:	f240 0314 	movw	r3, #20
 8001bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	bd38      	pop	{r3, r4, r5, pc}
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	f240 0314 	movw	r3, #20
 8001bdc:	6852      	ldr	r2, [r2, #4]
 8001bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	bd38      	pop	{r3, r4, r5, pc}
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
		{
			if( pxTCB == pxCurrentTCB )
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8001be6:	f240 1374 	movw	r3, #372	; 0x174
 8001bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b113      	cbz	r3, 8001bf8 <vTaskDelete+0xac>
 8001bf2:	f001 fbd5 	bl	80033a0 <ulPortSetInterruptMask>
 8001bf6:	e7fe      	b.n	8001bf6 <vTaskDelete+0xaa>
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
			}
		}
	}
 8001bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
 8001bfc:	f001 bbc4 	b.w	8003388 <vPortYield>

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001c00:	f240 137c 	movw	r3, #380	; 0x17c
 8001c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c08:	681c      	ldr	r4, [r3, #0]
 8001c0a:	e7a5      	b.n	8001b58 <vTaskDelete+0xc>

08001c0c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	4604      	mov	r4, r0
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8001c10:	f001 fbea 	bl	80033e8 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001c14:	b124      	cbz	r4, 8001c20 <uxTaskPriorityGet+0x14>
			uxReturn = pxTCB->uxPriority;
 8001c16:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		}
		taskEXIT_CRITICAL();
 8001c18:	f001 fbfa 	bl	8003410 <vPortExitCritical>

		return uxReturn;
	}
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	bd10      	pop	{r4, pc}

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001c20:	f240 137c 	movw	r3, #380	; 0x17c
 8001c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c28:	681c      	ldr	r4, [r3, #0]
			uxReturn = pxTCB->uxPriority;
 8001c2a:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		}
		taskEXIT_CRITICAL();
 8001c2c:	f001 fbf0 	bl	8003410 <vPortExitCritical>

		return uxReturn;
	}
 8001c30:	4620      	mov	r0, r4
 8001c32:	bd10      	pop	{r4, pc}

08001c34 <vTaskPrioritySet>:
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8001c34:	2904      	cmp	r1, #4
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8001c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c38:	460d      	mov	r5, r1
 8001c3a:	4604      	mov	r4, r0
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8001c3c:	d836      	bhi.n	8001cac <vTaskPrioritySet+0x78>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8001c3e:	f001 fbd3 	bl	80033e8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001c42:	2c00      	cmp	r4, #0
 8001c44:	d035      	beq.n	8001cb2 <vTaskPrioritySet+0x7e>

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001c46:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8001c48:	4295      	cmp	r5, r2
 8001c4a:	d026      	beq.n	8001c9a <vTaskPrioritySet+0x66>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
				{
					if( pxTCB != pxCurrentTCB )
 8001c4c:	f240 137c 	movw	r3, #380	; 0x17c
 8001c50:	f2c2 0300 	movt	r3, #8192	; 0x2000

			if( uxCurrentBasePriority != uxNewPriority )
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8001c54:	d925      	bls.n	8001ca2 <vTaskPrioritySet+0x6e>
				{
					if( pxTCB != pxCurrentTCB )
 8001c56:	6819      	ldr	r1, [r3, #0]
 8001c58:	428c      	cmp	r4, r1

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8001c5a:	bf08      	it	eq
 8001c5c:	2600      	moveq	r6, #0
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
				{
					if( pxTCB != pxCurrentTCB )
 8001c5e:	d005      	beq.n	8001c6c <vTaskPrioritySet+0x38>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001c64:	42b5      	cmp	r5, r6
 8001c66:	bf34      	ite	cc
 8001c68:	2600      	movcc	r6, #0
 8001c6a:	2601      	movcs	r6, #1
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001c6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8001c6e:	64a5      	str	r5, [r4, #72]	; 0x48

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001c70:	429a      	cmp	r2, r3
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001c72:	69a2      	ldr	r2, [r4, #24]
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
					{
						pxTCB->uxPriority = uxNewPriority;
 8001c74:	bf08      	it	eq
 8001c76:	62e5      	streq	r5, [r4, #44]	; 0x2c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001c78:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c7a:	bfa4      	itt	ge
 8001c7c:	f1c5 0505 	rsbge	r5, r5, #5
 8001c80:	61a5      	strge	r5, [r4, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001c82:	f240 1510 	movw	r5, #272	; 0x110
 8001c86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001c8a:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001c8e:	6962      	ldr	r2, [r4, #20]
 8001c90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d018      	beq.n	8001cca <vTaskPrioritySet+0x96>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
 8001c98:	b98e      	cbnz	r6, 8001cbe <vTaskPrioritySet+0x8a>
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
	}
 8001c9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8001c9e:	f001 bbb7 	b.w	8003410 <vPortExitCritical>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8001ca2:	681e      	ldr	r6, [r3, #0]
 8001ca4:	1ba3      	subs	r3, r4, r6
 8001ca6:	425e      	negs	r6, r3
 8001ca8:	415e      	adcs	r6, r3
 8001caa:	e7df      	b.n	8001c6c <vTaskPrioritySet+0x38>
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8001cac:	f001 fb78 	bl	80033a0 <ulPortSetInterruptMask>
 8001cb0:	e7fe      	b.n	8001cb0 <vTaskPrioritySet+0x7c>

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001cb2:	f240 137c 	movw	r3, #380	; 0x17c
 8001cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cba:	681c      	ldr	r4, [r3, #0]
 8001cbc:	e7c3      	b.n	8001c46 <vTaskPrioritySet+0x12>
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
				{
					taskYIELD_IF_USING_PREEMPTION();
 8001cbe:	f001 fb63 	bl	8003388 <vPortYield>
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
	}
 8001cc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8001cc6:	f001 bba3 	b.w	8003410 <vPortExitCritical>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001cca:	1d27      	adds	r7, r4, #4
 8001ccc:	4638      	mov	r0, r7
 8001cce:	f7ff f801 	bl	8000cd4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8001cd2:	f240 12e4 	movw	r2, #484	; 0x1e4
 8001cd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001cda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cdc:	6811      	ldr	r1, [r2, #0]
 8001cde:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8001ce2:	428b      	cmp	r3, r1
 8001ce4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001ce8:	4639      	mov	r1, r7
 8001cea:	bf88      	it	hi
 8001cec:	6013      	strhi	r3, [r2, #0]
 8001cee:	f7fe ffc7 	bl	8000c80 <vListInsertEnd>
 8001cf2:	e7d1      	b.n	8001c98 <vTaskPrioritySet+0x64>

08001cf4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf6:	4604      	mov	r4, r0

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001cf8:	f240 157c 	movw	r5, #380	; 0x17c

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001cfc:	f001 fb74 	bl	80033e8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001d00:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001d04:	2c00      	cmp	r4, #0
 8001d06:	d049      	beq.n	8001d9c <vTaskSuspend+0xa8>

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001d08:	1d27      	adds	r7, r4, #4
 8001d0a:	4638      	mov	r0, r7
 8001d0c:	f7fe ffe2 	bl	8000cd4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d12:	b11b      	cbz	r3, 8001d1c <vTaskSuspend+0x28>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d14:	f104 0018 	add.w	r0, r4, #24
 8001d18:	f7fe ffdc 	bl	8000cd4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8001d1c:	f240 16d0 	movw	r6, #464	; 0x1d0
 8001d20:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8001d24:	4639      	mov	r1, r7
 8001d26:	4630      	mov	r0, r6
 8001d28:	f7fe ffaa 	bl	8000c80 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001d2c:	f001 fb70 	bl	8003410 <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8001d30:	682a      	ldr	r2, [r5, #0]
 8001d32:	f240 137c 	movw	r3, #380	; 0x17c
 8001d36:	4294      	cmp	r4, r2
 8001d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d3c:	d01f      	beq.n	8001d7e <vTaskSuspend+0x8a>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
 8001d3e:	f240 03f4 	movw	r3, #244	; 0xf4
 8001d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b903      	cbnz	r3, 8001d4c <vTaskSuspend+0x58>
 8001d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d4c:	f240 03f0 	movw	r3, #240	; 0xf0
 8001d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	b93a      	cbnz	r2, 8001d6a <vTaskSuspend+0x76>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001d5a:	f240 0314 	movw	r3, #20
 8001d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	f240 0314 	movw	r3, #20
 8001d74:	6852      	ldr	r2, [r2, #4]
 8001d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		taskEXIT_CRITICAL();

		if( pxTCB == pxCurrentTCB )
		{
			if( xSchedulerRunning != pdFALSE )
 8001d7e:	f240 02f4 	movw	r2, #244	; 0xf4
 8001d82:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001d86:	6811      	ldr	r1, [r2, #0]
 8001d88:	b151      	cbz	r1, 8001da0 <vTaskSuspend+0xac>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001d8a:	f240 1374 	movw	r3, #372	; 0x174
 8001d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b173      	cbz	r3, 8001db4 <vTaskSuspend+0xc0>
 8001d96:	f001 fb03 	bl	80033a0 <ulPortSetInterruptMask>
 8001d9a:	e7fe      	b.n	8001d9a <vTaskSuspend+0xa6>

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001d9c:	682c      	ldr	r4, [r5, #0]
 8001d9e:	e7b3      	b.n	8001d08 <vTaskSuspend+0x14>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001da0:	f240 1278 	movw	r2, #376	; 0x178
 8001da4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001da8:	6830      	ldr	r0, [r6, #0]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	4290      	cmp	r0, r2
 8001dae:	d105      	bne.n	8001dbc <vTaskSuspend+0xc8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8001db0:	6019      	str	r1, [r3, #0]
 8001db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001db4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			if( xSchedulerRunning != pdFALSE )
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8001db8:	f001 bae6 	b.w	8003388 <vPortYield>
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001dbc:	f240 1374 	movw	r3, #372	; 0x174
 8001dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dc4:	6819      	ldr	r1, [r3, #0]
 8001dc6:	2900      	cmp	r1, #0
 8001dc8:	d133      	bne.n	8001e32 <vTaskSuspend+0x13e>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8001dca:	f240 12e8 	movw	r2, #488	; 0x1e8
 8001dce:	f2c2 0200 	movt	r2, #8192	; 0x2000
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001dd2:	f240 13e4 	movw	r3, #484	; 0x1e4
 8001dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8001dda:	6011      	str	r1, [r2, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001ddc:	6819      	ldr	r1, [r3, #0]
 8001dde:	f240 1210 	movw	r2, #272	; 0x110
 8001de2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001de6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001dea:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001dee:	b979      	cbnz	r1, 8001e10 <vTaskSuspend+0x11c>
 8001df0:	6819      	ldr	r1, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	b911      	cbnz	r1, 8001dfc <vTaskSuspend+0x108>
 8001df6:	e023      	b.n	8001e40 <vTaskSuspend+0x14c>
 8001df8:	6801      	ldr	r1, [r0, #0]
 8001dfa:	b309      	cbz	r1, 8001e40 <vTaskSuspend+0x14c>
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	3901      	subs	r1, #1
 8001e00:	6019      	str	r1, [r3, #0]
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001e08:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001e0c:	2900      	cmp	r1, #0
 8001e0e:	d0f3      	beq.n	8001df8 <vTaskSuspend+0x104>
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001e1a:	f102 0108 	add.w	r1, r2, #8
 8001e1e:	6853      	ldr	r3, [r2, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	428b      	cmp	r3, r1
 8001e24:	6053      	str	r3, [r2, #4]
 8001e26:	d101      	bne.n	8001e2c <vTaskSuspend+0x138>
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	6053      	str	r3, [r2, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	602b      	str	r3, [r5, #0]
 8001e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001e32:	f240 13e8 	movw	r3, #488	; 0x1e8
 8001e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001e40:	f001 faae 	bl	80033a0 <ulPortSetInterruptMask>
 8001e44:	e7fe      	b.n	8001e44 <vTaskSuspend+0x150>
 8001e46:	bf00      	nop

08001e48 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001e48:	b570      	push	{r4, r5, r6, lr}
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	b1a0      	cbz	r0, 8001e78 <vTaskResume+0x30>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001e4e:	f240 157c 	movw	r5, #380	; 0x17c
 8001e52:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001e56:	682b      	ldr	r3, [r5, #0]
 8001e58:	4298      	cmp	r0, r3
 8001e5a:	d00c      	beq.n	8001e76 <vTaskResume+0x2e>
		{
			taskENTER_CRITICAL();
 8001e5c:	f001 fac4 	bl	80033e8 <vPortEnterCritical>

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001e60:	f240 13d0 	movw	r3, #464	; 0x1d0
 8001e64:	6962      	ldr	r2, [r4, #20]
 8001e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d007      	beq.n	8001e7e <vTaskResume+0x36>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001e72:	f001 bacd 	b.w	8003410 <vPortExitCritical>
 8001e76:	bd70      	pop	{r4, r5, r6, pc}
	void vTaskResume( TaskHandle_t xTaskToResume )
	{
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001e78:	f001 fa92 	bl	80033a0 <ulPortSetInterruptMask>
 8001e7c:	e7fe      	b.n	8001e7c <vTaskResume+0x34>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001e7e:	f240 1380 	movw	r3, #384	; 0x180
 8001e82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d0f0      	beq.n	8001e6e <vTaskResume+0x26>
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
		{
			taskENTER_CRITICAL();
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8001e8c:	2a00      	cmp	r2, #0
 8001e8e:	d1ee      	bne.n	8001e6e <vTaskResume+0x26>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8001e90:	1d26      	adds	r6, r4, #4
 8001e92:	4630      	mov	r0, r6
 8001e94:	f7fe ff1e 	bl	8000cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e98:	f240 12e4 	movw	r2, #484	; 0x1e4
 8001e9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001ea0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ea2:	6811      	ldr	r1, [r2, #0]
 8001ea4:	f240 1010 	movw	r0, #272	; 0x110
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	bf88      	it	hi
 8001eac:	6013      	strhi	r3, [r2, #0]
 8001eae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001eb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001eb6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001eba:	4631      	mov	r1, r6
 8001ebc:	f7fe fee0 	bl	8000c80 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ec0:	682b      	ldr	r3, [r5, #0]
 8001ec2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d3d1      	bcc.n	8001e6e <vTaskResume+0x26>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001eca:	f001 fa5d 	bl	8003388 <vPortYield>
 8001ece:	e7ce      	b.n	8001e6e <vTaskResume+0x26>

08001ed0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BaseType_t xYieldRequired = pdFALSE;
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	b188      	cbz	r0, 8001efa <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001ed6:	f001 fb63 	bl	80035a0 <vPortValidateInterruptPriority>

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001eda:	f001 fa61 	bl	80033a0 <ulPortSetInterruptMask>

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001ede:	f240 13d0 	movw	r3, #464	; 0x1d0
 8001ee2:	6962      	ldr	r2, [r4, #20]
 8001ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ee8:	429a      	cmp	r2, r3
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001eea:	4606      	mov	r6, r0

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001eec:	d008      	beq.n	8001f00 <xTaskResumeFromISR+0x30>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001eee:	4630      	mov	r0, r6

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
 8001ef0:	2500      	movs	r5, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001ef2:	f001 fa89 	bl	8003408 <vPortClearInterruptMask>

		return xYieldRequired;
	}
 8001ef6:	4628      	mov	r0, r5
 8001ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
	BaseType_t xYieldRequired = pdFALSE;
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8001efa:	f001 fa51 	bl	80033a0 <ulPortSetInterruptMask>
 8001efe:	e7fe      	b.n	8001efe <xTaskResumeFromISR+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001f00:	f240 1080 	movw	r0, #384	; 0x180
 8001f04:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001f06:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f0a:	4285      	cmp	r5, r0
 8001f0c:	d0ef      	beq.n	8001eee <xTaskResumeFromISR+0x1e>
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8001f0e:	2d00      	cmp	r5, #0
 8001f10:	d1ed      	bne.n	8001eee <xTaskResumeFromISR+0x1e>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f12:	f240 1274 	movw	r2, #372	; 0x174
 8001f16:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	bb3a      	cbnz	r2, 8001f6e <xTaskResumeFromISR+0x9e>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f1e:	f240 137c 	movw	r3, #380	; 0x17c
 8001f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6add      	ldr	r5, [r3, #44]	; 0x2c
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8001f2c:	1d27      	adds	r7, r4, #4
				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f2e:	42aa      	cmp	r2, r5
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8001f30:	4638      	mov	r0, r7
				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f32:	bf34      	ite	cc
 8001f34:	2500      	movcc	r5, #0
 8001f36:	2501      	movcs	r5, #1
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8001f38:	f7fe fecc 	bl	8000cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f3c:	f240 12e4 	movw	r2, #484	; 0x1e4
 8001f40:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f46:	6811      	ldr	r1, [r2, #0]
 8001f48:	f240 1010 	movw	r0, #272	; 0x110
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	bf88      	it	hi
 8001f50:	6013      	strhi	r3, [r2, #0]
 8001f52:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f5a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001f5e:	4639      	mov	r1, r7
 8001f60:	f7fe fe8e 	bl	8000c80 <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001f64:	4630      	mov	r0, r6
 8001f66:	f001 fa4f 	bl	8003408 <vPortClearInterruptMask>

		return xYieldRequired;
	}
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8001f6e:	f104 0118 	add.w	r1, r4, #24
 8001f72:	f7fe fe85 	bl	8000c80 <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001f76:	4630      	mov	r0, r6
 8001f78:	f001 fa46 	bl	8003408 <vPortClearInterruptMask>

		return xYieldRequired;
	}
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001f82:	204c      	movs	r0, #76	; 0x4c
 8001f84:	f001 fb32 	bl	80035ec <pvPortMalloc>

	if( pxNewTCB != NULL )
 8001f88:	4604      	mov	r4, r0
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	f000 8089 	beq.w	80020a2 <vTaskStartScheduler+0x122>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f90:	f44f 7002 	mov.w	r0, #520	; 0x208
 8001f94:	f001 fb2a 	bl	80035ec <pvPortMalloc>
 8001f98:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	f000 8085 	beq.w	80020aa <vTaskStartScheduler+0x12a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8001fa0:	21a5      	movs	r1, #165	; 0xa5
 8001fa2:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001fa6:	f004 f9f3 	bl	8006390 <memset>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8001faa:	6b23      	ldr	r3, [r4, #48]	; 0x30
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001fac:	2500      	movs	r5, #0
 8001fae:	214c      	movs	r1, #76	; 0x4c
 8001fb0:	2245      	movs	r2, #69	; 0x45
 8001fb2:	2649      	movs	r6, #73	; 0x49
 8001fb4:	2044      	movs	r0, #68	; 0x44
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001fb6:	1d27      	adds	r7, r4, #4
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8001fb8:	f503 7301 	add.w	r3, r3, #516	; 0x204
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001fbc:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
 8001fc0:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
 8001fc4:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 8001fc8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8001fcc:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001fd0:	4638      	mov	r0, r7
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001fd2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8001fd6:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001fd8:	64a5      	str	r5, [r4, #72]	; 0x48
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001fda:	f023 0607 	bic.w	r6, r3, #7
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001fde:	f7fe fe4b 	bl	8000c78 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001fe2:	f104 0018 	add.w	r0, r4, #24
 8001fe6:	f7fe fe47 	bl	8000c78 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fea:	2305      	movs	r3, #5
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001fec:	f242 41ed 	movw	r1, #9453	; 0x24ed
 8001ff0:	462a      	mov	r2, r5
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ff2:	61a3      	str	r3, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	f6c0 0100 	movt	r1, #2048	; 0x800
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8001ffa:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8001ffc:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ffe:	f001 f99d 	bl	800333c <pxPortInitialiseStack>
 8002002:	6020      	str	r0, [r4, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8002004:	f001 f9f0 	bl	80033e8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8002008:	f240 1378 	movw	r3, #376	; 0x178
 800200c:	f2c2 0300 	movt	r3, #8192	; 0x2000
			if( pxCurrentTCB == NULL )
 8002010:	f240 167c 	movw	r6, #380	; 0x17c

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8002014:	681a      	ldr	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8002016:	f2c2 0600 	movt	r6, #8192	; 0x2000

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 800201a:	3201      	adds	r2, #1
 800201c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 800201e:	6832      	ldr	r2, [r6, #0]
 8002020:	2a00      	cmp	r2, #0
 8002022:	d047      	beq.n	80020b4 <vTaskStartScheduler+0x134>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8002024:	f240 05f4 	movw	r5, #244	; 0xf4
 8002028:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800202c:	682b      	ldr	r3, [r5, #0]
 800202e:	b91b      	cbnz	r3, 8002038 <vTaskStartScheduler+0xb8>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8002030:	6833      	ldr	r3, [r6, #0]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	b903      	cbnz	r3, 8002038 <vTaskStartScheduler+0xb8>
					{
						pxCurrentTCB = pxNewTCB;
 8002036:	6034      	str	r4, [r6, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002038:	f240 11a0 	movw	r1, #416	; 0x1a0
 800203c:	f2c2 0100 	movt	r1, #8192	; 0x2000
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002040:	f240 12e4 	movw	r2, #484	; 0x1e4
 8002044:	f2c2 0200 	movt	r2, #8192	; 0x2000
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002048:	6808      	ldr	r0, [r1, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800204a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800204c:	f8d2 e000 	ldr.w	lr, [r2]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002050:	3001      	adds	r0, #1
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002052:	4573      	cmp	r3, lr
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002054:	6008      	str	r0, [r1, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002056:	6420      	str	r0, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002058:	f240 1010 	movw	r0, #272	; 0x110
 800205c:	bf88      	it	hi
 800205e:	6013      	strhi	r3, [r2, #0]
 8002060:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002064:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002068:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800206c:	4639      	mov	r1, r7
 800206e:	f7fe fe07 	bl	8000c80 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8002072:	f001 f9cd 	bl	8003410 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8002076:	682b      	ldr	r3, [r5, #0]
 8002078:	b103      	cbz	r3, 800207c <vTaskStartScheduler+0xfc>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 800207a:	6833      	ldr	r3, [r6, #0]

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
		{
			xReturn = xTimerCreateTimerTask();
 800207c:	f000 fed0 	bl	8002e20 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002080:	2801      	cmp	r0, #1

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
		{
			xReturn = xTimerCreateTimerTask();
 8002082:	4604      	mov	r4, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002084:	d10c      	bne.n	80020a0 <vTaskStartScheduler+0x120>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002086:	f001 f98b 	bl	80033a0 <ulPortSetInterruptMask>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
		xTickCount = ( TickType_t ) 0U;
 800208a:	f240 1398 	movw	r3, #408	; 0x198
 800208e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002092:	2200      	movs	r2, #0
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8002094:	602c      	str	r4, [r5, #0]
		xTickCount = ( TickType_t ) 0U;
 8002096:	601a      	str	r2, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8002098:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800209c:	f001 ba22 	b.w	80034e4 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 80020a0:	b104      	cbz	r4, 80020a4 <vTaskStartScheduler+0x124>
 80020a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020a4:	f001 f97c 	bl	80033a0 <ulPortSetInterruptMask>
 80020a8:	e7fe      	b.n	80020a8 <vTaskStartScheduler+0x128>
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

		if( pxNewTCB->pxStack == NULL )
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80020aa:	4620      	mov	r0, r4
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 80020ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

		if( pxNewTCB->pxStack == NULL )
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80020b0:	f001 bacc 	b.w	800364c <vPortFree>
			uxCurrentNumberOfTasks++;
			if( pxCurrentTCB == NULL )
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80020b4:	6034      	str	r4, [r6, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	f240 05f4 	movw	r5, #244	; 0xf4
 80020be:	d101      	bne.n	80020c4 <vTaskStartScheduler+0x144>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80020c0:	f7ff fc2e 	bl	8001920 <prvInitialiseTaskLists>
 80020c4:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80020c8:	e7b6      	b.n	8002038 <vTaskStartScheduler+0xb8>
 80020ca:	bf00      	nop

080020cc <vTaskEndScheduler>:
	}
}
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 80020cc:	b508      	push	{r3, lr}
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
 80020ce:	f001 f967 	bl	80033a0 <ulPortSetInterruptMask>
	xSchedulerRunning = pdFALSE;
 80020d2:	f240 03f4 	movw	r3, #244	; 0xf4
 80020d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
}
 80020de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
	vPortEndScheduler();
 80020e2:	f001 b973 	b.w	80033cc <vPortEndScheduler>
 80020e6:	bf00      	nop

080020e8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80020e8:	f240 1374 	movw	r3, #372	; 0x174
 80020ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	3201      	adds	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	4770      	bx	lr

080020f8 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80020f8:	b510      	push	{r4, lr}
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 80020fa:	f001 f975 	bl	80033e8 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 80020fe:	f240 1398 	movw	r3, #408	; 0x198
 8002102:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002106:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8002108:	f001 f982 	bl	8003410 <vPortExitCritical>

	return xTicks;
}
 800210c:	4620      	mov	r0, r4
 800210e:	bd10      	pop	{r4, pc}

08002110 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002110:	b510      	push	{r4, lr}
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002112:	f001 fa45 	bl	80035a0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002116:	f001 f943 	bl	80033a0 <ulPortSetInterruptMask>
	{
		xReturn = xTickCount;
 800211a:	f240 1398 	movw	r3, #408	; 0x198
 800211e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002122:	681c      	ldr	r4, [r3, #0]
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002124:	f001 f970 	bl	8003408 <vPortClearInterruptMask>

	return xReturn;
}
 8002128:	4620      	mov	r0, r4
 800212a:	bd10      	pop	{r4, pc}

0800212c <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 800212c:	f240 1378 	movw	r3, #376	; 0x178
 8002130:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002134:	6818      	ldr	r0, [r3, #0]
}
 8002136:	4770      	bx	lr

08002138 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800213c:	f240 1374 	movw	r3, #372	; 0x174
 8002140:	f2c2 0300 	movt	r3, #8192	; 0x2000

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002144:	b083      	sub	sp, #12

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d165      	bne.n	8002218 <xTaskIncrementTick+0xe0>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 800214c:	f240 1398 	movw	r3, #408	; 0x198
 8002150:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002154:	f240 0414 	movw	r4, #20
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	3201      	adds	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800215e:	f8d3 9000 	ldr.w	r9, [r3]
 8002162:	f2c2 0400 	movt	r4, #8192	; 0x2000

			if( xConstTickCount == ( TickType_t ) 0U )
 8002166:	f1b9 0f00 	cmp.w	r9, #0
 800216a:	d069      	beq.n	8002240 <xTaskIncrementTick+0x108>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	4599      	cmp	r9, r3
 8002170:	d370      	bcc.n	8002254 <xTaskIncrementTick+0x11c>
 8002172:	f240 08f0 	movw	r8, #240	; 0xf0
 8002176:	f240 1610 	movw	r6, #272	; 0x110
 800217a:	f240 1b7c 	movw	fp, #380	; 0x17c
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800217e:	f240 17e4 	movw	r7, #484	; 0x1e4
 8002182:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8002186:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800218a:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 800218e:	f2c2 0700 	movt	r7, #8192	; 0x2000

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8002192:	2500      	movs	r5, #0
 8002194:	e02d      	b.n	80021f2 <xTaskIncrementTick+0xba>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002196:	f240 03f0 	movw	r3, #240	; 0xf0
 800219a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68d2      	ldr	r2, [r2, #12]
 80021a2:	f8d2 a00c 	ldr.w	sl, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80021a6:	f8da 1004 	ldr.w	r1, [sl, #4]
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80021aa:	f10a 0304 	add.w	r3, sl, #4
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );

						if( xConstTickCount < xItemValue )
 80021ae:	4589      	cmp	r9, r1
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	4618      	mov	r0, r3
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );

						if( xConstTickCount < xItemValue )
 80021b4:	d374      	bcc.n	80022a0 <xTaskIncrementTick+0x168>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80021b6:	f7fe fd8d 	bl	8000cd4 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021ba:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021be:	f10a 0018 	add.w	r0, sl, #24
						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021c2:	b109      	cbz	r1, 80021c8 <xTaskIncrementTick+0x90>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021c4:	f7fe fd86 	bl	8000cd4 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 80021c8:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	9901      	ldr	r1, [sp, #4]
 80021d0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80021d4:	4293      	cmp	r3, r2
 80021d6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80021da:	bf88      	it	hi
 80021dc:	603b      	strhi	r3, [r7, #0]
 80021de:	f7fe fd4f 	bl	8000c80 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021e2:	f8db 0000 	ldr.w	r0, [fp]
 80021e6:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
 80021ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 80021ec:	4291      	cmp	r1, r2
 80021ee:	bf28      	it	cs
 80021f0:	2501      	movcs	r5, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021f2:	f8d8 2000 	ldr.w	r2, [r8]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	2a00      	cmp	r2, #0
 80021fa:	d1cc      	bne.n	8002196 <xTaskIncrementTick+0x5e>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002200:	6022      	str	r2, [r4, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002202:	f8db 3000 	ldr.w	r3, [fp]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800220c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
 8002210:	2b01      	cmp	r3, #1
 8002212:	bf88      	it	hi
 8002214:	2501      	movhi	r5, #1
 8002216:	e007      	b.n	8002228 <xTaskIncrementTick+0xf0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002218:	f240 13cc 	movw	r3, #460	; 0x1cc
 800221c:	f2c2 0300 	movt	r3, #8192	; 0x2000

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002220:	2500      	movs	r5, #0
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	3201      	adds	r2, #1
 8002226:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002228:	f240 13e8 	movw	r3, #488	; 0x1e8
 800222c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002230:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf18      	it	ne
 8002236:	2501      	movne	r5, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8002238:	4628      	mov	r0, r5
 800223a:	b003      	add	sp, #12
 800223c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			block. */
			const TickType_t xConstTickCount = xTickCount;

			if( xConstTickCount == ( TickType_t ) 0U )
			{
				taskSWITCH_DELAYED_LISTS();
 8002240:	f240 03f0 	movw	r3, #240	; 0xf0
 8002244:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	b162      	cbz	r2, 8002268 <xTaskIncrementTick+0x130>
 800224e:	f001 f8a7 	bl	80033a0 <ulPortSetInterruptMask>
 8002252:	e7fe      	b.n	8002252 <xTaskIncrementTick+0x11a>
 8002254:	f240 1610 	movw	r6, #272	; 0x110
 8002258:	f240 1b7c 	movw	fp, #380	; 0x17c
 800225c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002260:	f2c2 0b00 	movt	fp, #8192	; 0x2000

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002264:	2500      	movs	r5, #0
 8002266:	e7cc      	b.n	8002202 <xTaskIncrementTick+0xca>
			block. */
			const TickType_t xConstTickCount = xTickCount;

			if( xConstTickCount == ( TickType_t ) 0U )
			{
				taskSWITCH_DELAYED_LISTS();
 8002268:	f240 119c 	movw	r1, #412	; 0x19c
 800226c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	680c      	ldr	r4, [r1, #0]
 8002274:	f240 1294 	movw	r2, #404	; 0x194
 8002278:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800227c:	601c      	str	r4, [r3, #0]
 800227e:	6008      	str	r0, [r1, #0]
 8002280:	6811      	ldr	r1, [r2, #0]
 8002282:	3101      	adds	r1, #1
 8002284:	6011      	str	r1, [r2, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	b15a      	cbz	r2, 80022a4 <xTaskIncrementTick+0x16c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f240 0414 	movw	r4, #20
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800229c:	6023      	str	r3, [r4, #0]
 800229e:	e765      	b.n	800216c <xTaskIncrementTick+0x34>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 80022a0:	6021      	str	r1, [r4, #0]
							break;
 80022a2:	e7ae      	b.n	8002202 <xTaskIncrementTick+0xca>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80022a4:	f240 0414 	movw	r4, #20
 80022a8:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022b0:	6023      	str	r3, [r4, #0]
 80022b2:	e75b      	b.n	800216c <xTaskIncrementTick+0x34>

080022b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80022b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80022b8:	f240 1474 	movw	r4, #372	; 0x174
 80022bc:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	b913      	cbnz	r3, 80022ca <xTaskResumeAll+0x16>
 80022c4:	f001 f86c 	bl	80033a0 <ulPortSetInterruptMask>
 80022c8:	e7fe      	b.n	80022c8 <xTaskResumeAll+0x14>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80022ca:	f001 f88d 	bl	80033e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d148      	bne.n	800236c <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80022da:	f240 1378 	movw	r3, #376	; 0x178
 80022de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d041      	beq.n	800236c <xTaskResumeAll+0xb8>
 80022e8:	f240 1680 	movw	r6, #384	; 0x180
 80022ec:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80022f0:	f240 15e8 	movw	r5, #488	; 0x1e8
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 80022f4:	f240 14e4 	movw	r4, #484	; 0x1e4
 80022f8:	f240 1910 	movw	r9, #272	; 0x110

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022fc:	f240 187c 	movw	r8, #380	; 0x17c
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002300:	46b2      	mov	sl, r6
 8002302:	f2c2 0500 	movt	r5, #8192	; 0x2000
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8002306:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800230a:	f2c2 0900 	movt	r9, #8192	; 0x2000

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800230e:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8002312:	e01f      	b.n	8002354 <xTaskResumeAll+0xa0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002314:	f8da 300c 	ldr.w	r3, [sl, #12]
 8002318:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800231a:	f107 0b04 	add.w	fp, r7, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800231e:	f107 0018 	add.w	r0, r7, #24
 8002322:	f7fe fcd7 	bl	8000cd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002326:	4658      	mov	r0, fp
 8002328:	f7fe fcd4 	bl	8000cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	6822      	ldr	r2, [r4, #0]
 8002330:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002334:	4293      	cmp	r3, r2
 8002336:	4659      	mov	r1, fp
 8002338:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800233c:	bf88      	it	hi
 800233e:	6023      	strhi	r3, [r4, #0]
 8002340:	f7fe fc9e 	bl	8000c80 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002344:	f8d8 3000 	ldr.w	r3, [r8]
 8002348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	4299      	cmp	r1, r3
					{
						xYieldPending = pdTRUE;
 800234e:	bf24      	itt	cs
 8002350:	2301      	movcs	r3, #1
 8002352:	602b      	strcs	r3, [r5, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002354:	6833      	ldr	r3, [r6, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1dc      	bne.n	8002314 <xTaskResumeAll+0x60>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800235a:	f240 14cc 	movw	r4, #460	; 0x1cc
 800235e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	b943      	cbnz	r3, 8002378 <xTaskResumeAll+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8002366:	682c      	ldr	r4, [r5, #0]
 8002368:	2c01      	cmp	r4, #1
 800236a:	d014      	beq.n	8002396 <xTaskResumeAll+0xe2>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 800236c:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800236e:	f001 f84f 	bl	8003410 <vPortExitCritical>

	return xAlreadyYielded;
}
 8002372:	4620      	mov	r0, r4
 8002374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f3      	beq.n	8002366 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 800237e:	2601      	movs	r6, #1
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
 8002380:	f7ff feda 	bl	8002138 <xTaskIncrementTick>
 8002384:	b100      	cbz	r0, 8002388 <xTaskResumeAll+0xd4>
						{
							xYieldPending = pdTRUE;
 8002386:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	3b01      	subs	r3, #1
 800238c:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f5      	bne.n	8002380 <xTaskResumeAll+0xcc>
 8002394:	e7e7      	b.n	8002366 <xTaskResumeAll+0xb2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002396:	f000 fff7 	bl	8003388 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800239a:	f001 f839 	bl	8003410 <vPortExitCritical>

	return xAlreadyYielded;
}
 800239e:	4620      	mov	r0, r4
 80023a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080023a4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80023a4:	b570      	push	{r4, r5, r6, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d04d      	beq.n	8002446 <vTaskDelayUntil+0xa2>
		configASSERT( ( xTimeIncrement > 0U ) );
 80023aa:	2900      	cmp	r1, #0
 80023ac:	d048      	beq.n	8002440 <vTaskDelayUntil+0x9c>
		configASSERT( uxSchedulerSuspended == 0 );
 80023ae:	f240 1374 	movw	r3, #372	; 0x174
 80023b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	2a00      	cmp	r2, #0
 80023ba:	d13e      	bne.n	800243a <vTaskDelayUntil+0x96>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80023bc:	681c      	ldr	r4, [r3, #0]
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80023be:	6802      	ldr	r2, [r0, #0]

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80023c0:	f240 1698 	movw	r6, #408	; 0x198
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80023c4:	3401      	adds	r4, #1

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80023c6:	f2c2 0600 	movt	r6, #8192	; 0x2000
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80023ca:	601c      	str	r4, [r3, #0]

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80023cc:	6833      	ldr	r3, [r6, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

			if( xConstTickCount < *pxPreviousWakeTime )
 80023ce:	4293      	cmp	r3, r2
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80023d0:	eb02 0401 	add.w	r4, r2, r1

			if( xConstTickCount < *pxPreviousWakeTime )
 80023d4:	d326      	bcc.n	8002424 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80023d6:	42a2      	cmp	r2, r4
 80023d8:	d801      	bhi.n	80023de <vTaskDelayUntil+0x3a>
 80023da:	42a3      	cmp	r3, r4
 80023dc:	d224      	bcs.n	8002428 <vTaskDelayUntil+0x84>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80023de:	f240 157c 	movw	r5, #380	; 0x17c
 80023e2:	f2c2 0500 	movt	r5, #8192	; 0x2000
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80023e6:	6004      	str	r4, [r0, #0]
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80023e8:	6828      	ldr	r0, [r5, #0]
 80023ea:	3004      	adds	r0, #4
 80023ec:	f7fe fc72 	bl	8000cd4 <uxListRemove>
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80023f0:	682a      	ldr	r2, [r5, #0]

	if( xTimeToWake < xTickCount )
 80023f2:	6833      	ldr	r3, [r6, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80023f4:	6054      	str	r4, [r2, #4]

	if( xTimeToWake < xTickCount )
 80023f6:	429c      	cmp	r4, r3
 80023f8:	d328      	bcc.n	800244c <vTaskDelayUntil+0xa8>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80023fa:	f240 03f0 	movw	r3, #240	; 0xf0
 80023fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	6829      	ldr	r1, [r5, #0]
 8002406:	3104      	adds	r1, #4
 8002408:	f7fe fc4a 	bl	8000ca0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 800240c:	f240 0314 	movw	r3, #20
 8002410:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002418:	bf38      	it	cc
 800241a:	601c      	strcc	r4, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800241c:	f7ff ff4a 	bl	80022b4 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002420:	b138      	cbz	r0, 8002432 <vTaskDelayUntil+0x8e>
 8002422:	bd70      	pop	{r4, r5, r6, pc}
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002424:	42a2      	cmp	r2, r4
 8002426:	d8d8      	bhi.n	80023da <vTaskDelayUntil+0x36>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002428:	6004      	str	r4, [r0, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800242a:	f7ff ff43 	bl	80022b4 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800242e:	2800      	cmp	r0, #0
 8002430:	d1f7      	bne.n	8002422 <vTaskDelayUntil+0x7e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8002436:	f000 bfa7 	b.w	8003388 <vPortYield>
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );
 800243a:	f000 ffb1 	bl	80033a0 <ulPortSetInterruptMask>
 800243e:	e7fe      	b.n	800243e <vTaskDelayUntil+0x9a>
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
 8002440:	f000 ffae 	bl	80033a0 <ulPortSetInterruptMask>
 8002444:	e7fe      	b.n	8002444 <vTaskDelayUntil+0xa0>
	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
 8002446:	f000 ffab 	bl	80033a0 <ulPortSetInterruptMask>
 800244a:	e7fe      	b.n	800244a <vTaskDelayUntil+0xa6>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800244c:	f240 139c 	movw	r3, #412	; 0x19c
 8002450:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	6829      	ldr	r1, [r5, #0]
 8002458:	3104      	adds	r1, #4
 800245a:	f7fe fc21 	bl	8000ca0 <vListInsert>
 800245e:	e7dd      	b.n	800241c <vTaskDelayUntil+0x78>

08002460 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002460:	b570      	push	{r4, r5, r6, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002462:	4602      	mov	r2, r0
 8002464:	b918      	cbnz	r0, 800246e <vTaskDelay+0xe>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 800246a:	f000 bf8d 	b.w	8003388 <vPortYield>


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800246e:	f240 1374 	movw	r3, #372	; 0x174
 8002472:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	bb59      	cbnz	r1, 80024d2 <vTaskDelay+0x72>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800247a:	6819      	ldr	r1, [r3, #0]
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800247c:	f240 1698 	movw	r6, #408	; 0x198

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002480:	f240 147c 	movw	r4, #380	; 0x17c
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002484:	3101      	adds	r1, #1
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002486:	f2c2 0600 	movt	r6, #8192	; 0x2000

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800248a:	f2c2 0400 	movt	r4, #8192	; 0x2000
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800248e:	6019      	str	r1, [r3, #0]
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002490:	6835      	ldr	r5, [r6, #0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002492:	6820      	ldr	r0, [r4, #0]
 8002494:	3004      	adds	r0, #4
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002496:	4415      	add	r5, r2

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002498:	f7fe fc1c 	bl	8000cd4 <uxListRemove>
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800249c:	6822      	ldr	r2, [r4, #0]

	if( xTimeToWake < xTickCount )
 800249e:	6833      	ldr	r3, [r6, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80024a0:	6055      	str	r5, [r2, #4]

	if( xTimeToWake < xTickCount )
 80024a2:	429d      	cmp	r5, r3
 80024a4:	d318      	bcc.n	80024d8 <vTaskDelay+0x78>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80024a6:	f240 03f0 	movw	r3, #240	; 0xf0
 80024aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	6821      	ldr	r1, [r4, #0]
 80024b2:	3104      	adds	r1, #4
 80024b4:	f7fe fbf4 	bl	8000ca0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80024b8:	f240 0314 	movw	r3, #20
 80024bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4295      	cmp	r5, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 80024c4:	bf38      	it	cc
 80024c6:	601d      	strcc	r5, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 80024c8:	f7ff fef4 	bl	80022b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d0ca      	beq.n	8002466 <vTaskDelay+0x6>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80024d0:	bd70      	pop	{r4, r5, r6, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80024d2:	f000 ff65 	bl	80033a0 <ulPortSetInterruptMask>
 80024d6:	e7fe      	b.n	80024d6 <vTaskDelay+0x76>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80024d8:	f240 139c 	movw	r3, #412	; 0x19c
 80024dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	6821      	ldr	r1, [r4, #0]
 80024e4:	3104      	adds	r1, #4
 80024e6:	f7fe fbdb 	bl	8000ca0 <vListInsert>
 80024ea:	e7ed      	b.n	80024c8 <vTaskDelay+0x68>

080024ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80024ec:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80024f0:	f240 06fc 	movw	r6, #252	; 0xfc
 80024f4:	b083      	sub	sp, #12
 80024f6:	f240 05f8 	movw	r5, #248	; 0xf8
 80024fa:	f240 1278 	movw	r2, #376	; 0x178
 80024fe:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002502:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002506:	f240 1474 	movw	r4, #372	; 0x174
 800250a:	f240 1910 	movw	r9, #272	; 0x110
 800250e:	f2c2 0200 	movt	r2, #8192	; 0x2000
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002512:	46b2      	mov	sl, r6
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8002514:	46a8      	mov	r8, r5
 8002516:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800251a:	9201      	str	r2, [sp, #4]
 800251c:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8002520:	e006      	b.n	8002530 <prvIdleTask+0x44>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002522:	6823      	ldr	r3, [r4, #0]
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002524:	6837      	ldr	r7, [r6, #0]
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002526:	3301      	adds	r3, #1
 8002528:	6023      	str	r3, [r4, #0]
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
 800252a:	f7ff fec3 	bl	80022b4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800252e:	b94f      	cbnz	r7, 8002544 <prvIdleTask+0x58>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8002530:	682b      	ldr	r3, [r5, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f5      	bne.n	8002522 <prvIdleTask+0x36>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002536:	f8d9 3000 	ldr.w	r3, [r9]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d9f8      	bls.n	8002530 <prvIdleTask+0x44>
			{
				taskYIELD();
 800253e:	f000 ff23 	bl	8003388 <vPortYield>
 8002542:	e7f5      	b.n	8002530 <prvIdleTask+0x44>

			if( xListIsEmpty == pdFALSE )
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002544:	f000 ff50 	bl	80033e8 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002548:	f8da 300c 	ldr.w	r3, [sl, #12]
 800254c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002550:	f10b 0004 	add.w	r0, fp, #4
 8002554:	f7fe fbbe 	bl	8000cd4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002558:	9a01      	ldr	r2, [sp, #4]
 800255a:	6813      	ldr	r3, [r2, #0]
 800255c:	3b01      	subs	r3, #1
 800255e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8002560:	f8d8 3000 	ldr.w	r3, [r8]
 8002564:	3b01      	subs	r3, #1
 8002566:	f8c8 3000 	str.w	r3, [r8]
				}
				taskEXIT_CRITICAL();
 800256a:	f000 ff51 	bl	8003410 <vPortExitCritical>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 800256e:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 8002572:	f001 f86b 	bl	800364c <vPortFree>
		vPortFree( pxTCB );
 8002576:	4658      	mov	r0, fp
 8002578:	f001 f868 	bl	800364c <vPortFree>
 800257c:	e7d8      	b.n	8002530 <prvIdleTask+0x44>
 800257e:	bf00      	nop

08002580 <uxTaskGetSystemState>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002580:	f240 1374 	movw	r3, #372	; 0x174
 8002584:	f2c2 0300 	movt	r3, #8192	; 0x2000
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8002588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800258c:	681d      	ldr	r5, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;

		vTaskSuspendAll();
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800258e:	f240 1478 	movw	r4, #376	; 0x178
 8002592:	f2c2 0400 	movt	r4, #8192	; 0x2000
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002596:	3501      	adds	r5, #1
 8002598:	601d      	str	r5, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;

		vTaskSuspendAll();
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800259a:	6823      	ldr	r3, [r4, #0]
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800259c:	b085      	sub	sp, #20
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;

		vTaskSuspendAll();
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800259e:	428b      	cmp	r3, r1
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80025a0:	e88d 0005 	stmia.w	sp, {r0, r2}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80025a4:	bf88      	it	hi
 80025a6:	2600      	movhi	r6, #0

		vTaskSuspendAll();
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80025a8:	d83f      	bhi.n	800262a <uxTaskGetSystemState+0xaa>
 80025aa:	f240 1210 	movw	r2, #272	; 0x110
 80025ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80025b2:	f04f 0900 	mov.w	r9, #0
 80025b6:	f1a2 0a0c 	sub.w	sl, r2, #12
 80025ba:	f102 0558 	add.w	r5, r2, #88	; 0x58
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80025be:	46c8      	mov	r8, r9
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 80025c0:	f04f 0c01 	mov.w	ip, #1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80025c4:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80025c8:	2800      	cmp	r0, #0
 80025ca:	d134      	bne.n	8002636 <uxTaskGetSystemState+0xb6>
 80025cc:	3d14      	subs	r5, #20
				do
				{
					uxQueue--;
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ce:	4555      	cmp	r5, sl
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80025d0:	4481      	add	r9, r0

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025d2:	d1f7      	bne.n	80025c4 <uxTaskGetSystemState+0x44>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80025d4:	f240 03f0 	movw	r3, #240	; 0xf0
 80025d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025dc:	681f      	ldr	r7, [r3, #0]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80025de:	683e      	ldr	r6, [r7, #0]
 80025e0:	2e00      	cmp	r6, #0
 80025e2:	f040 80c2 	bne.w	800276a <uxTaskGetSystemState+0x1ea>
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80025e6:	f240 139c 	movw	r3, #412	; 0x19c
 80025ea:	f2c2 0300 	movt	r3, #8192	; 0x2000

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80025ee:	44b1      	add	r9, r6
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80025f0:	681f      	ldr	r7, [r3, #0]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80025f2:	683e      	ldr	r6, [r7, #0]
 80025f4:	2e00      	cmp	r6, #0
 80025f6:	f040 80f6 	bne.w	80027e6 <uxTaskGetSystemState+0x266>
 80025fa:	f240 07fc 	movw	r7, #252	; 0xfc
 80025fe:	f2c2 0700 	movt	r7, #8192	; 0x2000
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8002602:	44b1      	add	r9, r6
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002604:	683e      	ldr	r6, [r7, #0]
 8002606:	2e00      	cmp	r6, #0
 8002608:	f040 8133 	bne.w	8002872 <uxTaskGetSystemState+0x2f2>
 800260c:	f240 17d0 	movw	r7, #464	; 0x1d0
 8002610:	f2c2 0700 	movt	r7, #8192	; 0x2000

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8002614:	eb06 0a09 	add.w	sl, r6, r9
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002618:	683e      	ldr	r6, [r7, #0]
 800261a:	2e00      	cmp	r6, #0
 800261c:	d158      	bne.n	80026d0 <uxTaskGetSystemState+0x150>
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800261e:	9b01      	ldr	r3, [sp, #4]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8002620:	4456      	add	r6, sl
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8002622:	b113      	cbz	r3, 800262a <uxTaskGetSystemState+0xaa>
 8002624:	461a      	mov	r2, r3
					{
						*pulTotalRunTime = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	6013      	str	r3, [r2, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800262a:	f7ff fe43 	bl	80022b4 <xTaskResumeAll>

		return uxTask;
	}
 800262e:	4630      	mov	r0, r6
 8002630:	b005      	add	sp, #20
 8002632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8002636:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	f240 1310 	movw	r3, #272	; 0x110
 8002640:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002644:	42a9      	cmp	r1, r5
 8002646:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800264a:	f845 1c04 	str.w	r1, [r5, #-4]
 800264e:	ebc3 0705 	rsb	r7, r3, r5
 8002652:	bf08      	it	eq
 8002654:	6869      	ldreq	r1, [r5, #4]
 8002656:	4417      	add	r7, r2
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8002658:	9a00      	ldr	r2, [sp, #0]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800265a:	68ce      	ldr	r6, [r1, #12]
 800265c:	bf08      	it	eq
 800265e:	f845 1c04 	streq.w	r1, [r5, #-4]
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8002662:	eb02 1349 	add.w	r3, r2, r9, lsl #5
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8002666:	2000      	movs	r0, #0
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002668:	6849      	ldr	r1, [r1, #4]
 800266a:	42a9      	cmp	r1, r5
 800266c:	f845 1c04 	str.w	r1, [r5, #-4]
 8002670:	bf08      	it	eq
 8002672:	f857 1c54 	ldreq.w	r1, [r7, #-84]
 8002676:	68ca      	ldr	r2, [r1, #12]
 8002678:	bf08      	it	eq
 800267a:	f845 1c04 	streq.w	r1, [r5, #-4]

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800267e:	f102 0434 	add.w	r4, r2, #52	; 0x34
 8002682:	e883 0014 	stmia.w	r3, {r2, r4}
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 8002686:	6c14      	ldr	r4, [r2, #64]	; 0x40
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 8002688:	f883 c00c 	strb.w	ip, [r3, #12]
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800268c:	609c      	str	r4, [r3, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800268e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8002690:	611c      	str	r4, [r3, #16]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 8002692:	6c94      	ldr	r4, [r2, #72]	; 0x48
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 8002694:	f8c3 8018 	str.w	r8, [r3, #24]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 8002698:	615c      	str	r4, [r3, #20]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800269a:	6b14      	ldr	r4, [r2, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 800269c:	f894 e000 	ldrb.w	lr, [r4]
 80026a0:	f1be 0fa5 	cmp.w	lr, #165	; 0xa5
 80026a4:	d112      	bne.n	80026cc <uxTaskGetSystemState+0x14c>
 80026a6:	46a6      	mov	lr, r4

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 80026a8:	2400      	movs	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80026aa:	f81e bf01 	ldrb.w	fp, [lr, #1]!
 80026ae:	f1bb 0fa5 	cmp.w	fp, #165	; 0xa5
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 80026b2:	f104 0401 	add.w	r4, r4, #1

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80026b6:	d0f8      	beq.n	80026aa <uxTaskGetSystemState+0x12a>
 80026b8:	f3c4 048f 	ubfx	r4, r4, #2, #16
				}
				#endif

				uxTask++;

			} while( pxNextTCB != pxFirstTCB );
 80026bc:	4296      	cmp	r6, r2
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 80026be:	839c      	strh	r4, [r3, #28]
				}
				#endif

				uxTask++;
 80026c0:	f100 0001 	add.w	r0, r0, #1
 80026c4:	f103 0320 	add.w	r3, r3, #32

			} while( pxNextTCB != pxFirstTCB );
 80026c8:	d1ce      	bne.n	8002668 <uxTaskGetSystemState+0xe8>
 80026ca:	e77f      	b.n	80025cc <uxTaskGetSystemState+0x4c>

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80026cc:	2400      	movs	r4, #0
 80026ce:	e7f5      	b.n	80026bc <uxTaskGetSystemState+0x13c>
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80026d0:	687b      	ldr	r3, [r7, #4]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80026d2:	68fa      	ldr	r2, [r7, #12]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80026d4:	685d      	ldr	r5, [r3, #4]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80026d6:	9202      	str	r2, [sp, #8]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80026d8:	f107 0e08 	add.w	lr, r7, #8
 80026dc:	4575      	cmp	r5, lr
 80026de:	607d      	str	r5, [r7, #4]
 80026e0:	bf08      	it	eq
 80026e2:	68fd      	ldreq	r5, [r7, #12]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80026e4:	9b00      	ldr	r3, [sp, #0]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80026e6:	f8d5 900c 	ldr.w	r9, [r5, #12]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80026ea:	f240 12d0 	movw	r2, #464	; 0x1d0
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80026ee:	2600      	movs	r6, #0
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80026f0:	f2c2 0200 	movt	r2, #8192	; 0x2000

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80026f4:	eb03 104a 	add.w	r0, r3, sl, lsl #5
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 80026f8:	46b0      	mov	r8, r6
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80026fa:	9203      	str	r2, [sp, #12]

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 80026fc:	f04f 0c03 	mov.w	ip, #3
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 8002700:	f04f 0b02 	mov.w	fp, #2
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002704:	686d      	ldr	r5, [r5, #4]
 8002706:	4575      	cmp	r5, lr
 8002708:	bf08      	it	eq
 800270a:	9b02      	ldreq	r3, [sp, #8]
 800270c:	607d      	str	r5, [r7, #4]
 800270e:	bf04      	itt	eq
 8002710:	461d      	moveq	r5, r3
 8002712:	9a03      	ldreq	r2, [sp, #12]
 8002714:	68ec      	ldr	r4, [r5, #12]
 8002716:	bf08      	it	eq
 8002718:	6053      	streq	r3, [r2, #4]

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800271a:	f104 0334 	add.w	r3, r4, #52	; 0x34
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800271e:	6004      	str	r4, [r0, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 8002720:	6043      	str	r3, [r0, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 8002722:	6c23      	ldr	r3, [r4, #64]	; 0x40
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 8002724:	f880 c00c 	strb.w	ip, [r0, #12]
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 8002728:	6083      	str	r3, [r0, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800272a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800272c:	6103      	str	r3, [r0, #16]
					/* If the task is in the suspended list then there is a chance
					it is actually just blocked indefinitely - so really it should
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800272e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002730:	b10b      	cbz	r3, 8002736 <uxTaskGetSystemState+0x1b6>
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 8002732:	f880 b00c 	strb.w	fp, [r0, #12]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 8002736:	6ca3      	ldr	r3, [r4, #72]	; 0x48
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 8002738:	f8c0 8018 	str.w	r8, [r0, #24]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800273c:	6143      	str	r3, [r0, #20]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800273e:	6b22      	ldr	r2, [r4, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002740:	7813      	ldrb	r3, [r2, #0]
 8002742:	2ba5      	cmp	r3, #165	; 0xa5

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 8002744:	f04f 0300 	mov.w	r3, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002748:	d107      	bne.n	800275a <uxTaskGetSystemState+0x1da>
 800274a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800274e:	29a5      	cmp	r1, #165	; 0xa5
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 8002750:	f103 0301 	add.w	r3, r3, #1

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002754:	d0f9      	beq.n	800274a <uxTaskGetSystemState+0x1ca>
 8002756:	f3c3 038f 	ubfx	r3, r3, #2, #16
				}
				#endif

				uxTask++;

			} while( pxNextTCB != pxFirstTCB );
 800275a:	45a1      	cmp	r9, r4
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800275c:	8383      	strh	r3, [r0, #28]
				}
				#endif

				uxTask++;
 800275e:	f106 0601 	add.w	r6, r6, #1
 8002762:	f100 0020 	add.w	r0, r0, #32

			} while( pxNextTCB != pxFirstTCB );
 8002766:	d1cd      	bne.n	8002704 <uxTaskGetSystemState+0x184>
 8002768:	e759      	b.n	800261e <uxTaskGetSystemState+0x9e>
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685d      	ldr	r5, [r3, #4]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800276e:	9b00      	ldr	r3, [sp, #0]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8002770:	607d      	str	r5, [r7, #4]
 8002772:	f107 0e08 	add.w	lr, r7, #8
 8002776:	4575      	cmp	r5, lr
 8002778:	bf08      	it	eq
 800277a:	f8de 5004 	ldreq.w	r5, [lr, #4]
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800277e:	2600      	movs	r6, #0

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8002780:	f8d5 a00c 	ldr.w	sl, [r5, #12]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 8002784:	46b0      	mov	r8, r6

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8002786:	eb03 1049 	add.w	r0, r3, r9, lsl #5
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800278a:	f04f 0c02 	mov.w	ip, #2
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800278e:	686d      	ldr	r5, [r5, #4]
 8002790:	45ae      	cmp	lr, r5
 8002792:	607d      	str	r5, [r7, #4]
 8002794:	bf08      	it	eq
 8002796:	68fd      	ldreq	r5, [r7, #12]
 8002798:	68ea      	ldr	r2, [r5, #12]
 800279a:	bf08      	it	eq
 800279c:	607d      	streq	r5, [r7, #4]

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800279e:	f102 0334 	add.w	r3, r2, #52	; 0x34
 80027a2:	e880 000c 	stmia.w	r0, {r2, r3}
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 80027a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 80027a8:	f880 c00c 	strb.w	ip, [r0, #12]
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 80027ac:	6083      	str	r3, [r0, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 80027ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80027b0:	6103      	str	r3, [r0, #16]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 80027b2:	6c93      	ldr	r3, [r2, #72]	; 0x48
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 80027b4:	f8c0 8018 	str.w	r8, [r0, #24]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 80027b8:	6143      	str	r3, [r0, #20]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 80027ba:	6b11      	ldr	r1, [r2, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80027bc:	780b      	ldrb	r3, [r1, #0]
 80027be:	2ba5      	cmp	r3, #165	; 0xa5

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 80027c0:	f04f 0300 	mov.w	r3, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80027c4:	d107      	bne.n	80027d6 <uxTaskGetSystemState+0x256>
 80027c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80027ca:	2ca5      	cmp	r4, #165	; 0xa5
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 80027cc:	f103 0301 	add.w	r3, r3, #1

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80027d0:	d0f9      	beq.n	80027c6 <uxTaskGetSystemState+0x246>
 80027d2:	f3c3 038f 	ubfx	r3, r3, #2, #16
				}
				#endif

				uxTask++;

			} while( pxNextTCB != pxFirstTCB );
 80027d6:	4592      	cmp	sl, r2
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 80027d8:	8383      	strh	r3, [r0, #28]
				}
				#endif

				uxTask++;
 80027da:	f106 0601 	add.w	r6, r6, #1
 80027de:	f100 0020 	add.w	r0, r0, #32

			} while( pxNextTCB != pxFirstTCB );
 80027e2:	d1d4      	bne.n	800278e <uxTaskGetSystemState+0x20e>
 80027e4:	e6ff      	b.n	80025e6 <uxTaskGetSystemState+0x66>
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685d      	ldr	r5, [r3, #4]
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80027ea:	9b00      	ldr	r3, [sp, #0]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80027ec:	607d      	str	r5, [r7, #4]
 80027ee:	f107 0e08 	add.w	lr, r7, #8
 80027f2:	4575      	cmp	r5, lr
 80027f4:	bf08      	it	eq
 80027f6:	f8de 5004 	ldreq.w	r5, [lr, #4]
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80027fa:	2600      	movs	r6, #0

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80027fc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 8002800:	46b0      	mov	r8, r6
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8002802:	eb03 1049 	add.w	r0, r3, r9, lsl #5
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 8002806:	f04f 0c02 	mov.w	ip, #2
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800280a:	686d      	ldr	r5, [r5, #4]
 800280c:	45ae      	cmp	lr, r5
 800280e:	607d      	str	r5, [r7, #4]
 8002810:	bf08      	it	eq
 8002812:	68fd      	ldreq	r5, [r7, #12]
 8002814:	68ea      	ldr	r2, [r5, #12]
 8002816:	bf08      	it	eq
 8002818:	607d      	streq	r5, [r7, #4]

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800281a:	f102 0334 	add.w	r3, r2, #52	; 0x34
 800281e:	e880 000c 	stmia.w	r0, {r2, r3}
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 8002822:	6c13      	ldr	r3, [r2, #64]	; 0x40
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 8002824:	f880 c00c 	strb.w	ip, [r0, #12]
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 8002828:	6083      	str	r3, [r0, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800282a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800282c:	6103      	str	r3, [r0, #16]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800282e:	6c93      	ldr	r3, [r2, #72]	; 0x48
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 8002830:	f8c0 8018 	str.w	r8, [r0, #24]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 8002834:	6143      	str	r3, [r0, #20]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 8002836:	6b11      	ldr	r1, [r2, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002838:	780b      	ldrb	r3, [r1, #0]
 800283a:	2ba5      	cmp	r3, #165	; 0xa5

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 800283c:	f04f 0300 	mov.w	r3, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002840:	d107      	bne.n	8002852 <uxTaskGetSystemState+0x2d2>
 8002842:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002846:	2ca5      	cmp	r4, #165	; 0xa5
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 8002848:	f103 0301 	add.w	r3, r3, #1

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 800284c:	d0f9      	beq.n	8002842 <uxTaskGetSystemState+0x2c2>
 800284e:	f3c3 038f 	ubfx	r3, r3, #2, #16
				}
				#endif

				uxTask++;

			} while( pxNextTCB != pxFirstTCB );
 8002852:	4592      	cmp	sl, r2
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 8002854:	8383      	strh	r3, [r0, #28]
				}
				#endif

				uxTask++;
 8002856:	f106 0601 	add.w	r6, r6, #1
 800285a:	f100 0020 	add.w	r0, r0, #32

			} while( pxNextTCB != pxFirstTCB );
 800285e:	d1d4      	bne.n	800280a <uxTaskGetSystemState+0x28a>
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002860:	f240 07fc 	movw	r7, #252	; 0xfc
 8002864:	f2c2 0700 	movt	r7, #8192	; 0x2000
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8002868:	44b1      	add	r9, r6
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800286a:	683e      	ldr	r6, [r7, #0]
 800286c:	2e00      	cmp	r6, #0
 800286e:	f43f aecd 	beq.w	800260c <uxTaskGetSystemState+0x8c>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8002872:	687b      	ldr	r3, [r7, #4]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002874:	68fa      	ldr	r2, [r7, #12]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8002876:	685d      	ldr	r5, [r3, #4]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8002878:	9b00      	ldr	r3, [sp, #0]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800287a:	607d      	str	r5, [r7, #4]
 800287c:	f107 0e08 	add.w	lr, r7, #8
 8002880:	4575      	cmp	r5, lr
 8002882:	bf08      	it	eq
 8002884:	68fd      	ldreq	r5, [r7, #12]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002886:	9202      	str	r2, [sp, #8]
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8002888:	2600      	movs	r6, #0
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800288a:	f240 0bfc 	movw	fp, #252	; 0xfc
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800288e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 8002892:	46b0      	mov	r8, r6
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002894:	f2c2 0b00 	movt	fp, #8192	; 0x2000

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8002898:	eb03 1049 	add.w	r0, r3, r9, lsl #5
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800289c:	f04f 0c04 	mov.w	ip, #4
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80028a0:	686d      	ldr	r5, [r5, #4]
 80028a2:	4575      	cmp	r5, lr
 80028a4:	bf08      	it	eq
 80028a6:	9a02      	ldreq	r2, [sp, #8]
 80028a8:	607d      	str	r5, [r7, #4]
 80028aa:	bf04      	itt	eq
 80028ac:	4615      	moveq	r5, r2
 80028ae:	f8cb 2004 	streq.w	r2, [fp, #4]
 80028b2:	68eb      	ldr	r3, [r5, #12]

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 80028b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 80028b8:	6003      	str	r3, [r0, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 80028ba:	6042      	str	r2, [r0, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 80028bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 80028be:	f880 c00c 	strb.w	ip, [r0, #12]
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 80028c2:	6082      	str	r2, [r0, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 80028c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c6:	6102      	str	r2, [r0, #16]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 80028c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 80028ca:	f8c0 8018 	str.w	r8, [r0, #24]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 80028ce:	6142      	str	r2, [r0, #20]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 80028d0:	6b19      	ldr	r1, [r3, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80028d2:	780a      	ldrb	r2, [r1, #0]
 80028d4:	2aa5      	cmp	r2, #165	; 0xa5

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 80028d6:	f04f 0200 	mov.w	r2, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80028da:	d107      	bne.n	80028ec <uxTaskGetSystemState+0x36c>
 80028dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80028e0:	2ca5      	cmp	r4, #165	; 0xa5
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 80028e2:	f102 0201 	add.w	r2, r2, #1

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80028e6:	d0f9      	beq.n	80028dc <uxTaskGetSystemState+0x35c>
 80028e8:	f3c2 028f 	ubfx	r2, r2, #2, #16
				}
				#endif

				uxTask++;

			} while( pxNextTCB != pxFirstTCB );
 80028ec:	459a      	cmp	sl, r3
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 80028ee:	8382      	strh	r2, [r0, #28]
				}
				#endif

				uxTask++;
 80028f0:	f106 0601 	add.w	r6, r6, #1
 80028f4:	f100 0020 	add.w	r0, r0, #32

			} while( pxNextTCB != pxFirstTCB );
 80028f8:	d1d2      	bne.n	80028a0 <uxTaskGetSystemState+0x320>
 80028fa:	e687      	b.n	800260c <uxTaskGetSystemState+0x8c>

080028fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028fc:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028fe:	f240 1374 	movw	r3, #372	; 0x174
 8002902:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002906:	6819      	ldr	r1, [r3, #0]
 8002908:	2900      	cmp	r1, #0
 800290a:	d135      	bne.n	8002978 <vTaskSwitchContext+0x7c>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 800290c:	f240 12e8 	movw	r2, #488	; 0x1e8
 8002910:	f2c2 0200 	movt	r2, #8192	; 0x2000
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002914:	f240 13e4 	movw	r3, #484	; 0x1e4
 8002918:	f2c2 0300 	movt	r3, #8192	; 0x2000
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 800291c:	6011      	str	r1, [r2, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	f240 1210 	movw	r2, #272	; 0x110
 8002924:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002928:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800292c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002930:	b979      	cbnz	r1, 8002952 <vTaskSwitchContext+0x56>
 8002932:	6819      	ldr	r1, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	b911      	cbnz	r1, 800293e <vTaskSwitchContext+0x42>
 8002938:	e025      	b.n	8002986 <vTaskSwitchContext+0x8a>
 800293a:	6801      	ldr	r1, [r0, #0]
 800293c:	b319      	cbz	r1, 8002986 <vTaskSwitchContext+0x8a>
 800293e:	6819      	ldr	r1, [r3, #0]
 8002940:	3901      	subs	r1, #1
 8002942:	6019      	str	r1, [r3, #0]
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800294a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800294e:	2900      	cmp	r1, #0
 8002950:	d0f3      	beq.n	800293a <vTaskSwitchContext+0x3e>
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002958:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800295c:	f102 0108 	add.w	r1, r2, #8
 8002960:	6853      	ldr	r3, [r2, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	428b      	cmp	r3, r1
 8002966:	6053      	str	r3, [r2, #4]
 8002968:	d010      	beq.n	800298c <vTaskSwitchContext+0x90>
 800296a:	f240 127c 	movw	r2, #380	; 0x17c
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	bd08      	pop	{r3, pc}
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002978:	f240 13e8 	movw	r3, #488	; 0x1e8
 800297c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	bd08      	pop	{r3, pc}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002986:	f000 fd0b 	bl	80033a0 <ulPortSetInterruptMask>
 800298a:	e7fe      	b.n	800298a <vTaskSwitchContext+0x8e>
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	6053      	str	r3, [r2, #4]
 8002990:	e7eb      	b.n	800296a <vTaskSwitchContext+0x6e>
 8002992:	bf00      	nop

08002994 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	460d      	mov	r5, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8002998:	2800      	cmp	r0, #0
 800299a:	d03f      	beq.n	8002a1c <vTaskPlaceOnEventList+0x88>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800299c:	f240 147c 	movw	r4, #380	; 0x17c
 80029a0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80029a4:	6821      	ldr	r1, [r4, #0]
 80029a6:	3118      	adds	r1, #24
 80029a8:	f7fe f97a 	bl	8000ca0 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80029ac:	6820      	ldr	r0, [r4, #0]
 80029ae:	3004      	adds	r0, #4
 80029b0:	f7fe f990 	bl	8000cd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80029b4:	1c6a      	adds	r2, r5, #1
 80029b6:	d027      	beq.n	8002a08 <vTaskPlaceOnEventList+0x74>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 80029b8:	f240 1398 	movw	r3, #408	; 0x198
 80029bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029c0:	6819      	ldr	r1, [r3, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80029c2:	6822      	ldr	r2, [r4, #0]

	if( xTimeToWake < xTickCount )
 80029c4:	681b      	ldr	r3, [r3, #0]
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 80029c6:	440d      	add	r5, r1
static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 80029c8:	429d      	cmp	r5, r3
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80029ca:	6055      	str	r5, [r2, #4]

	if( xTimeToWake < xTickCount )
 80029cc:	d311      	bcc.n	80029f2 <vTaskPlaceOnEventList+0x5e>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80029ce:	f240 03f0 	movw	r3, #240	; 0xf0
 80029d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	6821      	ldr	r1, [r4, #0]
 80029da:	3104      	adds	r1, #4
 80029dc:	f7fe f960 	bl	8000ca0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80029e0:	f240 0314 	movw	r3, #20
 80029e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4295      	cmp	r5, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 80029ec:	bf38      	it	cc
 80029ee:	601d      	strcc	r5, [r3, #0]
 80029f0:	bd38      	pop	{r3, r4, r5, pc}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80029f2:	f240 139c 	movw	r3, #412	; 0x19c
 80029f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	6821      	ldr	r1, [r4, #0]
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80029fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002a02:	3104      	adds	r1, #4
 8002a04:	f7fe b94c 	b.w	8000ca0 <vListInsert>
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002a08:	6821      	ldr	r1, [r4, #0]
 8002a0a:	f240 10d0 	movw	r0, #464	; 0x1d0
 8002a0e:	3104      	adds	r1, #4
 8002a10:	f2c2 0000 	movt	r0, #8192	; 0x2000
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002a18:	f7fe b932 	b.w	8000c80 <vListInsertEnd>

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8002a1c:	f000 fcc0 	bl	80033a0 <ulPortSetInterruptMask>
 8002a20:	e7fe      	b.n	8002a20 <vTaskPlaceOnEventList+0x8c>
 8002a22:	bf00      	nop

08002a24 <vTaskPlaceOnUnorderedEventList>:
	#endif /* INCLUDE_vTaskSuspend */
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8002a24:	b538      	push	{r3, r4, r5, lr}
 8002a26:	4615      	mov	r5, r2
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d038      	beq.n	8002a9e <vTaskPlaceOnUnorderedEventList+0x7a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8002a2c:	f240 1374 	movw	r3, #372	; 0x174
 8002a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b913      	cbnz	r3, 8002a3e <vTaskPlaceOnUnorderedEventList+0x1a>
 8002a38:	f000 fcb2 	bl	80033a0 <ulPortSetInterruptMask>
 8002a3c:	e7fe      	b.n	8002a3c <vTaskPlaceOnUnorderedEventList+0x18>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002a3e:	f240 147c 	movw	r4, #380	; 0x17c
 8002a42:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002a46:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002a4a:	6822      	ldr	r2, [r4, #0]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a4c:	6823      	ldr	r3, [r4, #0]
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002a4e:	6191      	str	r1, [r2, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a50:	f103 0118 	add.w	r1, r3, #24
 8002a54:	f7fe f914 	bl	8000c80 <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002a58:	6820      	ldr	r0, [r4, #0]
 8002a5a:	3004      	adds	r0, #4
 8002a5c:	f7fe f93a 	bl	8000cd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8002a60:	1c69      	adds	r1, r5, #1
 8002a62:	d02a      	beq.n	8002aba <vTaskPlaceOnUnorderedEventList+0x96>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
 8002a64:	f240 1398 	movw	r3, #408	; 0x198
 8002a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a6c:	6819      	ldr	r1, [r3, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002a6e:	6822      	ldr	r2, [r4, #0]

	if( xTimeToWake < xTickCount )
 8002a70:	681b      	ldr	r3, [r3, #0]
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
 8002a72:	440d      	add	r5, r1
static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 8002a74:	429d      	cmp	r5, r3
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002a76:	6055      	str	r5, [r2, #4]

	if( xTimeToWake < xTickCount )
 8002a78:	d314      	bcc.n	8002aa4 <vTaskPlaceOnUnorderedEventList+0x80>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002a7a:	f240 03f0 	movw	r3, #240	; 0xf0
 8002a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	6821      	ldr	r1, [r4, #0]
 8002a86:	3104      	adds	r1, #4
 8002a88:	f7fe f90a 	bl	8000ca0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002a8c:	f240 0314 	movw	r3, #20
 8002a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4295      	cmp	r5, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002a98:	bf38      	it	cc
 8002a9a:	601d      	strcc	r5, [r3, #0]
 8002a9c:	bd38      	pop	{r3, r4, r5, pc}

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8002a9e:	f000 fc7f 	bl	80033a0 <ulPortSetInterruptMask>
 8002aa2:	e7fe      	b.n	8002aa2 <vTaskPlaceOnUnorderedEventList+0x7e>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002aa4:	f240 139c 	movw	r3, #412	; 0x19c
 8002aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	6821      	ldr	r1, [r4, #0]
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002ab4:	3104      	adds	r1, #4
 8002ab6:	f7fe b8f3 	b.w	8000ca0 <vListInsert>
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002aba:	6821      	ldr	r1, [r4, #0]
 8002abc:	f240 10d0 	movw	r0, #464	; 0x1d0
 8002ac0:	3104      	adds	r1, #4
 8002ac2:	f2c2 0000 	movt	r0, #8192	; 0x2000
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002aca:	f7fe b8d9 	b.w	8000c80 <vListInsertEnd>
 8002ace:	bf00      	nop

08002ad0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 8002ad0:	b538      	push	{r3, r4, r5, lr}
 8002ad2:	460d      	mov	r5, r1
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 8002ad4:	b340      	cbz	r0, 8002b28 <vTaskPlaceOnEventListRestricted+0x58>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ad6:	f240 147c 	movw	r4, #380	; 0x17c
 8002ada:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002ade:	6821      	ldr	r1, [r4, #0]
 8002ae0:	3118      	adds	r1, #24
 8002ae2:	f7fe f8cd 	bl	8000c80 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002ae6:	6820      	ldr	r0, [r4, #0]
 8002ae8:	3004      	adds	r0, #4
 8002aea:	f7fe f8f3 	bl	8000cd4 <uxListRemove>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8002aee:	f240 1398 	movw	r3, #408	; 0x198
 8002af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002af6:	6819      	ldr	r1, [r3, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002af8:	6822      	ldr	r2, [r4, #0]

	if( xTimeToWake < xTickCount )
 8002afa:	681b      	ldr	r3, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8002afc:	440d      	add	r5, r1
static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 8002afe:	429d      	cmp	r5, r3
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002b00:	6055      	str	r5, [r2, #4]

	if( xTimeToWake < xTickCount )
 8002b02:	d314      	bcc.n	8002b2e <vTaskPlaceOnEventListRestricted+0x5e>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002b04:	f240 03f0 	movw	r3, #240	; 0xf0
 8002b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	6821      	ldr	r1, [r4, #0]
 8002b10:	3104      	adds	r1, #4
 8002b12:	f7fe f8c5 	bl	8000ca0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002b16:	f240 0314 	movw	r3, #20
 8002b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4295      	cmp	r5, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002b22:	bf38      	it	cc
 8002b24:	601d      	strcc	r5, [r3, #0]
 8002b26:	bd38      	pop	{r3, r4, r5, pc}

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 8002b28:	f000 fc3a 	bl	80033a0 <ulPortSetInterruptMask>
 8002b2c:	e7fe      	b.n	8002b2c <vTaskPlaceOnEventListRestricted+0x5c>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002b2e:	f240 139c 	movw	r3, #412	; 0x19c
 8002b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	6821      	ldr	r1, [r4, #0]
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
 8002b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002b3e:	3104      	adds	r1, #4
 8002b40:	f7fe b8ae 	b.w	8000ca0 <vListInsert>

08002b44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002b44:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002b46:	68c3      	ldr	r3, [r0, #12]
 8002b48:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002b4a:	2c00      	cmp	r4, #0
 8002b4c:	d03c      	beq.n	8002bc8 <xTaskRemoveFromEventList+0x84>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002b4e:	f104 0518 	add.w	r5, r4, #24
 8002b52:	4628      	mov	r0, r5
 8002b54:	f7fe f8be 	bl	8000cd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b58:	f240 1374 	movw	r3, #372	; 0x174
 8002b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	bb4b      	cbnz	r3, 8002bb8 <xTaskRemoveFromEventList+0x74>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002b64:	1d25      	adds	r5, r4, #4
 8002b66:	4628      	mov	r0, r5
 8002b68:	f7fe f8b4 	bl	8000cd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002b6c:	f240 12e4 	movw	r2, #484	; 0x1e4
 8002b70:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002b74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b76:	6811      	ldr	r1, [r2, #0]
 8002b78:	f240 1010 	movw	r0, #272	; 0x110
 8002b7c:	428b      	cmp	r3, r1
 8002b7e:	bf88      	it	hi
 8002b80:	6013      	strhi	r3, [r2, #0]
 8002b82:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002b90:	f7fe f876 	bl	8000c80 <vListInsertEnd>
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b94:	f240 137c 	movw	r3, #380	; 0x17c
 8002b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002ba4:	bf81      	itttt	hi
 8002ba6:	f240 13e8 	movwhi	r3, #488	; 0x1e8
 8002baa:	f2c2 0300 	movthi	r3, #8192	; 0x2000
 8002bae:	2001      	movhi	r0, #1
 8002bb0:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8002bb2:	bf98      	it	ls
 8002bb4:	2000      	movls	r0, #0
	}

	return xReturn;
}
 8002bb6:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002bb8:	f240 1080 	movw	r0, #384	; 0x180
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002bc2:	f7fe f85d 	bl	8000c80 <vListInsertEnd>
 8002bc6:	e7e5      	b.n	8002b94 <xTaskRemoveFromEventList+0x50>
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
	configASSERT( pxUnblockedTCB );
 8002bc8:	f000 fbea 	bl	80033a0 <ulPortSetInterruptMask>
 8002bcc:	e7fe      	b.n	8002bcc <xTaskRemoveFromEventList+0x88>
 8002bce:	bf00      	nop

08002bd0 <xTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8002bd0:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8002bd2:	f240 1374 	movw	r3, #372	; 0x174
 8002bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	2a00      	cmp	r2, #0
 8002bde:	d030      	beq.n	8002c42 <xTaskRemoveFromUnorderedEventList+0x72>
	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8002be0:	68c4      	ldr	r4, [r0, #12]
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002be2:	f041 4200 	orr.w	r2, r1, #2147483648	; 0x80000000
 8002be6:	6002      	str	r2, [r0, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
	configASSERT( pxUnblockedTCB );
 8002be8:	b374      	cbz	r4, 8002c48 <xTaskRemoveFromUnorderedEventList+0x78>
	( void ) uxListRemove( pxEventListItem );

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002bea:	1d25      	adds	r5, r4, #4

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 8002bec:	f7fe f872 	bl	8000cd4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	f7fe f86f 	bl	8000cd4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8002bf6:	f240 12e4 	movw	r2, #484	; 0x1e4
 8002bfa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002bfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c00:	6811      	ldr	r1, [r2, #0]
 8002c02:	f240 1010 	movw	r0, #272	; 0x110
 8002c06:	428b      	cmp	r3, r1
 8002c08:	bf88      	it	hi
 8002c0a:	6013      	strhi	r3, [r2, #0]
 8002c0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c14:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002c18:	4629      	mov	r1, r5
 8002c1a:	f7fe f831 	bl	8000c80 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c1e:	f240 137c 	movw	r3, #380	; 0x17c
 8002c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	429a      	cmp	r2, r3
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002c2e:	bf81      	itttt	hi
 8002c30:	f240 13e8 	movwhi	r3, #488	; 0x1e8
 8002c34:	f2c2 0300 	movthi	r3, #8192	; 0x2000
 8002c38:	2001      	movhi	r0, #1
 8002c3a:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8002c3c:	bf98      	it	ls
 8002c3e:	2000      	movls	r0, #0
	}

	return xReturn;
}
 8002c40:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8002c42:	f000 fbad 	bl	80033a0 <ulPortSetInterruptMask>
 8002c46:	e7fe      	b.n	8002c46 <xTaskRemoveFromUnorderedEventList+0x76>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
	configASSERT( pxUnblockedTCB );
 8002c48:	f000 fbaa 	bl	80033a0 <ulPortSetInterruptMask>
 8002c4c:	e7fe      	b.n	8002c4c <xTaskRemoveFromUnorderedEventList+0x7c>
 8002c4e:	bf00      	nop

08002c50 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002c50:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8002c52:	b160      	cbz	r0, 8002c6e <vTaskSetTimeOutState+0x1e>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c54:	f240 1294 	movw	r2, #404	; 0x194
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002c58:	f240 1398 	movw	r3, #408	; 0x198
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c64:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	e880 000c 	stmia.w	r0, {r2, r3}
 8002c6c:	bd08      	pop	{r3, pc}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
 8002c6e:	f000 fb97 	bl	80033a0 <ulPortSetInterruptMask>
 8002c72:	e7fe      	b.n	8002c72 <vTaskSetTimeOutState+0x22>

08002c74 <xTaskCheckForTimeOut>:
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002c76:	4604      	mov	r4, r0
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002c78:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d031      	beq.n	8002ce2 <xTaskCheckForTimeOut+0x6e>
	configASSERT( pxTicksToWait );
 8002c7e:	b369      	cbz	r1, 8002cdc <xTaskCheckForTimeOut+0x68>

	taskENTER_CRITICAL();
 8002c80:	f000 fbb2 	bl	80033e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002c84:	f240 1398 	movw	r3, #408	; 0x198

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002c88:	682e      	ldr	r6, [r5, #0]
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002c8e:	1c77      	adds	r7, r6, #1
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002c90:	6818      	ldr	r0, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002c92:	d01e      	beq.n	8002cd2 <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c94:	f240 1294 	movw	r2, #404	; 0x194
 8002c98:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002c9c:	6821      	ldr	r1, [r4, #0]
 8002c9e:	6817      	ldr	r7, [r2, #0]
 8002ca0:	42b9      	cmp	r1, r7
 8002ca2:	6861      	ldr	r1, [r4, #4]
 8002ca4:	d001      	beq.n	8002caa <xTaskCheckForTimeOut+0x36>
 8002ca6:	4288      	cmp	r0, r1
 8002ca8:	d20e      	bcs.n	8002cc8 <xTaskCheckForTimeOut+0x54>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8002caa:	1a47      	subs	r7, r0, r1
 8002cac:	42be      	cmp	r6, r7
 8002cae:	d90b      	bls.n	8002cc8 <xTaskCheckForTimeOut+0x54>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8002cb0:	1a30      	subs	r0, r6, r0
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002cb2:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002cb4:	681b      	ldr	r3, [r3, #0]
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8002cb6:	4401      	add	r1, r0
 8002cb8:	6029      	str	r1, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
 8002cba:	2500      	movs	r5, #0

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002cbc:	e884 000c 	stmia.w	r4, {r2, r3}
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002cc0:	f000 fba6 	bl	8003410 <vPortExitCritical>

	return xReturn;
}
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8002cc8:	2501      	movs	r5, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002cca:	f000 fba1 	bl	8003410 <vPortExitCritical>

	return xReturn;
}
 8002cce:	4628      	mov	r0, r5
 8002cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 8002cd2:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002cd4:	f000 fb9c 	bl	8003410 <vPortExitCritical>

	return xReturn;
}
 8002cd8:	4628      	mov	r0, r5
 8002cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );
 8002cdc:	f000 fb60 	bl	80033a0 <ulPortSetInterruptMask>
 8002ce0:	e7fe      	b.n	8002ce0 <xTaskCheckForTimeOut+0x6c>

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002ce2:	f000 fb5d 	bl	80033a0 <ulPortSetInterruptMask>
 8002ce6:	e7fe      	b.n	8002ce6 <xTaskCheckForTimeOut+0x72>

08002ce8 <vTaskMissedYield>:
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8002ce8:	f240 13e8 	movw	r3, #488	; 0x1e8
 8002cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop

08002cf8 <uxTaskGetTaskNumber>:
	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
 8002cf8:	b100      	cbz	r0, 8002cfc <uxTaskGetTaskNumber+0x4>
		{
			pxTCB = ( TCB_t * ) xTask;
			uxReturn = pxTCB->uxTaskNumber;
 8002cfa:	6c40      	ldr	r0, [r0, #68]	; 0x44
		{
			uxReturn = 0U;
		}

		return uxReturn;
	}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop

08002d00 <vTaskSetTaskNumber>:

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
	TCB_t *pxTCB;

		if( xTask != NULL )
 8002d00:	b100      	cbz	r0, 8002d04 <vTaskSetTaskNumber+0x4>
		{
			pxTCB = ( TCB_t * ) xTask;
			pxTCB->uxTaskNumber = uxHandle;
 8002d02:	6441      	str	r1, [r0, #68]	; 0x44
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop

08002d08 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8002d08:	f240 137c 	movw	r3, #380	; 0x17c
 8002d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d10:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
 8002d12:	4770      	bx	lr

08002d14 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002d14:	f240 03f4 	movw	r3, #244	; 0xf4
 8002d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b14b      	cbz	r3, 8002d34 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d20:	f240 1374 	movw	r3, #372	; 0x174
 8002d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d28:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2002      	moveq	r0, #2
 8002d30:	2000      	movne	r0, #0
 8002d32:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002d34:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8002d36:	4770      	bx	lr

08002d38 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	b1f8      	cbz	r0, 8002d7e <vTaskPriorityInherit+0x46>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002d3e:	f240 157c 	movw	r5, #380	; 0x17c
 8002d42:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002d46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002d48:	682a      	ldr	r2, [r5, #0]
 8002d4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d216      	bcs.n	8002d7e <vTaskPriorityInherit+0x46>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002d50:	6982      	ldr	r2, [r0, #24]
 8002d52:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d54:	bfa4      	itt	ge
 8002d56:	682a      	ldrge	r2, [r5, #0]
 8002d58:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002d5a:	f240 1610 	movw	r6, #272	; 0x110
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d5e:	bfa4      	itt	ge
 8002d60:	f1c2 0205 	rsbge	r2, r2, #5
 8002d64:	6182      	strge	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002d66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d6a:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002d6e:	6942      	ldr	r2, [r0, #20]
 8002d70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d003      	beq.n	8002d80 <vTaskPriorityInherit+0x48>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002d80:	1d07      	adds	r7, r0, #4
 8002d82:	4638      	mov	r0, r7
 8002d84:	f7fd ffa6 	bl	8000cd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8002d88:	f240 12e4 	movw	r2, #484	; 0x1e4
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002d8c:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8002d8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002d94:	6811      	ldr	r1, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002d96:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002d98:	428b      	cmp	r3, r1
 8002d9a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002d9e:	bf88      	it	hi
 8002da0:	6013      	strhi	r3, [r2, #0]
 8002da2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8002da6:	4639      	mov	r1, r7
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002da8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8002dac:	f7fd bf68 	b.w	8000c80 <vListInsertEnd>

08002db0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002db0:	b538      	push	{r3, r4, r5, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
 8002db2:	4604      	mov	r4, r0
 8002db4:	b320      	cbz	r0, 8002e00 <vTaskPriorityDisinherit+0x50>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002db6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002db8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d020      	beq.n	8002e00 <vTaskPriorityDisinherit+0x50>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002dbe:	1d05      	adds	r5, r0, #4
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f7fd ff87 	bl	8000cd4 <uxListRemove>
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002dc6:	69a2      	ldr	r2, [r4, #24]
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002dc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002dca:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dcc:	bfa4      	itt	ge
 8002dce:	f1c3 0205 	rsbge	r2, r3, #5
 8002dd2:	61a2      	strge	r2, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
 8002dd4:	f240 12e4 	movw	r2, #484	; 0x1e4
 8002dd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002ddc:	f240 1010 	movw	r0, #272	; 0x110
 8002de0:	6811      	ldr	r1, [r2, #0]
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002de2:	62e3      	str	r3, [r4, #44]	; 0x2c
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
 8002de4:	428b      	cmp	r3, r1
 8002de6:	bf88      	it	hi
 8002de8:	6013      	strhi	r3, [r2, #0]
 8002dea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002dee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002df2:	4629      	mov	r1, r5
 8002df4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
 8002dfc:	f7fd bf40 	b.w	8000c80 <vListInsertEnd>
 8002e00:	bd38      	pop	{r3, r4, r5, pc}
 8002e02:	bf00      	nop

08002e04 <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8002e04:	f240 137c 	movw	r3, #380	; 0x17c
 8002e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e0c:	6819      	ldr	r1, [r3, #0]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8002e12:	6988      	ldr	r0, [r1, #24]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f1c3 0305 	rsb	r3, r3, #5
 8002e1a:	6193      	str	r3, [r2, #24]

	return uxReturn;
}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002e24:	f240 241c 	movw	r4, #540	; 0x21c
 8002e28:	f2c2 0400 	movt	r4, #8192	; 0x2000
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002e2c:	b084      	sub	sp, #16
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002e2e:	f000 fadb 	bl	80033e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002e32:	f8d4 8000 	ldr.w	r8, [r4]
 8002e36:	f1b8 0f00 	cmp.w	r8, #0
 8002e3a:	d01a      	beq.n	8002e72 <xTimerCreateTimerTask+0x52>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e3c:	f000 fae8 	bl	8003410 <vPortExitCritical>
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();

	if( xTimerQueue != NULL )
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d03f      	beq.n	8002ec6 <xTimerCreateTimerTask+0xa6>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8002e46:	2300      	movs	r3, #0
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f642 70d5 	movw	r0, #12245	; 0x2fd5
 8002e4e:	f246 412c 	movw	r1, #25644	; 0x642c
 8002e52:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002e56:	9302      	str	r3, [sp, #8]
 8002e58:	9303      	str	r3, [sp, #12]
 8002e5a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002e5e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002e62:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e66:	f7fe fd93 	bl	8001990 <xTaskGenericCreate>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002e6a:	b360      	cbz	r0, 8002ec6 <xTimerCreateTimerTask+0xa6>
	return xReturn;
}
 8002e6c:	b004      	add	sp, #16
 8002e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002e72:	f240 16f0 	movw	r6, #496	; 0x1f0
 8002e76:	f2c2 0600 	movt	r6, #8192	; 0x2000
			vListInitialise( &xActiveTimerList2 );
 8002e7a:	f240 2504 	movw	r5, #516	; 0x204
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002e7e:	4630      	mov	r0, r6
			vListInitialise( &xActiveTimerList2 );
 8002e80:	f2c2 0500 	movt	r5, #8192	; 0x2000
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002e84:	f7fd feec 	bl	8000c60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f7fd fee9 	bl	8000c60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002e8e:	f240 17ec 	movw	r7, #492	; 0x1ec
			pxOverflowTimerList = &xActiveTimerList2;
 8002e92:	f240 2320 	movw	r3, #544	; 0x220
 8002e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 8002e9a:	f2c2 0700 	movt	r7, #8192	; 0x2000
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002e9e:	4642      	mov	r2, r8
 8002ea0:	200a      	movs	r0, #10
 8002ea2:	210c      	movs	r1, #12
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 8002ea4:	603e      	str	r6, [r7, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002ea6:	601d      	str	r5, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002ea8:	f7fd ffb8 	bl	8000e1c <xQueueGenericCreate>
 8002eac:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
 8002eae:	b168      	cbz	r0, 8002ecc <xTimerCreateTimerTask+0xac>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002eb0:	f246 4124 	movw	r1, #25636	; 0x6424
 8002eb4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002eb8:	f7fe fc7c 	bl	80017b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ebc:	f000 faa8 	bl	8003410 <vPortExitCritical>
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();

	if( xTimerQueue != NULL )
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1bf      	bne.n	8002e46 <xTimerCreateTimerTask+0x26>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002ec6:	f000 fa6b 	bl	80033a0 <ulPortSetInterruptMask>
 8002eca:	e7fe      	b.n	8002eca <xTimerCreateTimerTask+0xaa>
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
			configASSERT( xTimerQueue );
 8002ecc:	f000 fa68 	bl	80033a0 <ulPortSetInterruptMask>
 8002ed0:	e7fe      	b.n	8002ed0 <xTimerCreateTimerTask+0xb0>
 8002ed2:	bf00      	nop

08002ed4 <xTimerCreate>:
	return xReturn;
}
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 8002ed8:	4688      	mov	r8, r1
	return xReturn;
}
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002eda:	b083      	sub	sp, #12
 8002edc:	4683      	mov	fp, r0
 8002ede:	4692      	mov	sl, r2
 8002ee0:	461f      	mov	r7, r3
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 8002ee2:	b1f1      	cbz	r1, 8002f22 <xTimerCreate+0x4e>
	{
		pxNewTimer = NULL;
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002ee4:	202c      	movs	r0, #44	; 0x2c
 8002ee6:	f000 fb81 	bl	80035ec <pvPortMalloc>
		if( pxNewTimer != NULL )
 8002eea:	4604      	mov	r4, r0
 8002eec:	b1a8      	cbz	r0, 8002f1a <xTimerCreate+0x46>
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002eee:	f240 251c 	movw	r5, #540	; 0x21c
 8002ef2:	f2c2 0500 	movt	r5, #8192	; 0x2000
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002ef6:	f000 fa77 	bl	80033e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002efa:	682a      	ldr	r2, [r5, #0]
 8002efc:	b1a2      	cbz	r2, 8002f28 <xTimerCreate+0x54>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002efe:	f000 fa87 	bl	8003410 <vPortExitCritical>
			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
			pxNewTimer->uxAutoReload = uxAutoReload;
			pxNewTimer->pvTimerID = pvTimerID;
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 8002f04:	f8c4 b000 	str.w	fp, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002f08:	f8c4 8018 	str.w	r8, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8002f0c:	f8c4 a01c 	str.w	sl, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8002f10:	6227      	str	r7, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002f12:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002f14:	1d20      	adds	r0, r4, #4
 8002f16:	f7fd feaf 	bl	8000c78 <vListInitialiseItem>

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
}
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	b003      	add	sp, #12
 8002f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			traceTIMER_CREATE_FAILED();
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002f22:	f000 fa3d 	bl	80033a0 <ulPortSetInterruptMask>
 8002f26:	e7fe      	b.n	8002f26 <xTimerCreate+0x52>
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002f28:	f240 19f0 	movw	r9, #496	; 0x1f0
 8002f2c:	f2c2 0900 	movt	r9, #8192	; 0x2000
			vListInitialise( &xActiveTimerList2 );
 8002f30:	f240 2604 	movw	r6, #516	; 0x204
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002f34:	4648      	mov	r0, r9
			vListInitialise( &xActiveTimerList2 );
 8002f36:	f2c2 0600 	movt	r6, #8192	; 0x2000
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002f3a:	9201      	str	r2, [sp, #4]
 8002f3c:	f7fd fe90 	bl	8000c60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002f40:	4630      	mov	r0, r6
 8002f42:	f7fd fe8d 	bl	8000c60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002f46:	f240 1cec 	movw	ip, #492	; 0x1ec
			pxOverflowTimerList = &xActiveTimerList2;
 8002f4a:	f240 2e20 	movw	lr, #544	; 0x220
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 8002f4e:	f2c2 0c00 	movt	ip, #8192	; 0x2000
			pxOverflowTimerList = &xActiveTimerList2;
 8002f52:	f2c2 0e00 	movt	lr, #8192	; 0x2000
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002f56:	9a01      	ldr	r2, [sp, #4]
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 8002f58:	f8cc 9000 	str.w	r9, [ip]
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002f5c:	200a      	movs	r0, #10
 8002f5e:	210c      	movs	r1, #12
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
 8002f60:	f8ce 6000 	str.w	r6, [lr]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002f64:	f7fd ff5a 	bl	8000e1c <xQueueGenericCreate>
 8002f68:	6028      	str	r0, [r5, #0]
			configASSERT( xTimerQueue );
 8002f6a:	b130      	cbz	r0, 8002f7a <xTimerCreate+0xa6>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002f6c:	f246 4124 	movw	r1, #25636	; 0x6424
 8002f70:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002f74:	f7fe fc1e 	bl	80017b4 <vQueueAddToRegistry>
 8002f78:	e7c1      	b.n	8002efe <xTimerCreate+0x2a>
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
			configASSERT( xTimerQueue );
 8002f7a:	f000 fa11 	bl	80033a0 <ulPortSetInterruptMask>
 8002f7e:	e7fe      	b.n	8002f7e <xTimerCreate+0xaa>

08002f80 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002f80:	b570      	push	{r4, r5, r6, lr}
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002f82:	f240 241c 	movw	r4, #540	; 0x21c
 8002f86:	f2c2 0400 	movt	r4, #8192	; 0x2000
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002f8a:	b084      	sub	sp, #16
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002f8c:	6825      	ldr	r5, [r4, #0]
 8002f8e:	b1ed      	cbz	r5, 8002fcc <xTimerGenericCommand+0x4c>
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002f90:	2905      	cmp	r1, #5
	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002f92:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002f94:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002f96:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002f98:	dd07      	ble.n	8002faa <xTimerGenericCommand+0x2a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	a901      	add	r1, sp, #4
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f7fe f93b 	bl	800121c <xQueueGenericSendFromISR>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8002fa6:	b004      	add	sp, #16
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002faa:	f7ff feb3 	bl	8002d14 <xTaskGetSchedulerState>
 8002fae:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002fb0:	bf13      	iteet	ne
 8002fb2:	2200      	movne	r2, #0

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002fb4:	6820      	ldreq	r0, [r4, #0]
 8002fb6:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002fb8:	6820      	ldrne	r0, [r4, #0]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002fba:	bf07      	ittee	eq
 8002fbc:	a901      	addeq	r1, sp, #4
 8002fbe:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002fc0:	4613      	movne	r3, r2
 8002fc2:	a901      	addne	r1, sp, #4
 8002fc4:	f7fd ffa8 	bl	8000f18 <xQueueGenericSend>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8002fc8:	b004      	add	sp, #16
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
 8002fcc:	4628      	mov	r0, r5
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8002fce:	b004      	add	sp, #16
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	bf00      	nop

08002fd4 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd8:	f240 2020 	movw	r0, #544	; 0x220
 8002fdc:	b08b      	sub	sp, #44	; 0x2c
 8002fde:	f240 15ec 	movw	r5, #492	; 0x1ec
 8002fe2:	f240 2818 	movw	r8, #536	; 0x218
 8002fe6:	f240 241c 	movw	r4, #540	; 0x21c
 8002fea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002fee:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002ff2:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8002ff6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002ffa:	9003      	str	r0, [sp, #12]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002ffc:	682b      	ldr	r3, [r5, #0]
 8002ffe:	681e      	ldr	r6, [r3, #0]
 8003000:	f1d6 0601 	rsbs	r6, r6, #1
 8003004:	bf38      	it	cc
 8003006:	2600      	movcc	r6, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003008:	2700      	movs	r7, #0
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
	if( *pxListWasEmpty == pdFALSE )
 800300a:	b90e      	cbnz	r6, 8003010 <prvTimerTask+0x3c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	681f      	ldr	r7, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003010:	f7ff f86a 	bl	80020e8 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003014:	f7ff f870 	bl	80020f8 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8003018:	f8d8 3000 	ldr.w	r3, [r8]
 800301c:	4298      	cmp	r0, r3
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800301e:	4682      	mov	sl, r0

	if( xTimeNow < xLastTime )
 8003020:	d359      	bcc.n	80030d6 <prvTimerTask+0x102>
 8003022:	f086 0301 	eor.w	r3, r6, #1
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003026:	4287      	cmp	r7, r0
 8003028:	bf8c      	ite	hi
 800302a:	2300      	movhi	r3, #0
 800302c:	f003 0301 	andls.w	r3, r3, #1
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8003030:	f240 2018 	movw	r0, #536	; 0x218
 8003034:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003038:	f8c0 a000 	str.w	sl, [r0]
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800303c:	2b00      	cmp	r3, #0
 800303e:	d177      	bne.n	8003130 <prvTimerTask+0x15c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8003040:	ebca 0107 	rsb	r1, sl, r7
 8003044:	6820      	ldr	r0, [r4, #0]
 8003046:	f7fe fc13 	bl	8001870 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 800304a:	f7ff f933 	bl	80022b4 <xTaskResumeAll>
 800304e:	2800      	cmp	r0, #0
 8003050:	f000 8095 	beq.w	800317e <prvTimerTask+0x1aa>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003054:	2200      	movs	r2, #0
 8003056:	4613      	mov	r3, r2
 8003058:	6820      	ldr	r0, [r4, #0]
 800305a:	a904      	add	r1, sp, #16
 800305c:	f7fe f970 	bl	8001340 <xQueueGenericReceive>
 8003060:	2800      	cmp	r0, #0
 8003062:	d0cb      	beq.n	8002ffc <prvTimerTask+0x28>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003064:	9b04      	ldr	r3, [sp, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	dbf4      	blt.n	8003054 <prvTimerTask+0x80>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800306a:	f8dd 9018 	ldr.w	r9, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800306e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003072:	b11b      	cbz	r3, 800307c <prvTimerTask+0xa8>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003074:	f109 0004 	add.w	r0, r9, #4
 8003078:	f7fd fe2c 	bl	8000cd4 <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800307c:	f7ff f83c 	bl	80020f8 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8003080:	f8d8 3000 	ldr.w	r3, [r8]
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003084:	9002      	str	r0, [sp, #8]

	if( xTimeNow < xLastTime )
 8003086:	4298      	cmp	r0, r3
 8003088:	d345      	bcc.n	8003116 <prvTimerTask+0x142>
 800308a:	9b04      	ldr	r3, [sp, #16]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 800308c:	9902      	ldr	r1, [sp, #8]
 800308e:	2b09      	cmp	r3, #9
 8003090:	f8c8 1000 	str.w	r1, [r8]
 8003094:	d8de      	bhi.n	8003054 <prvTimerTask+0x80>
 8003096:	2201      	movs	r2, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	f413 7f04 	tst.w	r3, #528	; 0x210
 80030a0:	f040 80f9 	bne.w	8003296 <prvTimerTask+0x2c2>
 80030a4:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 80030a8:	f040 80ce 	bne.w	8003248 <prvTimerTask+0x274>
 80030ac:	069b      	lsls	r3, r3, #26
 80030ae:	d5d1      	bpl.n	8003054 <prvTimerTask+0x80>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 80030b0:	4648      	mov	r0, r9
 80030b2:	f000 facb 	bl	800364c <vPortFree>
 80030b6:	e7cd      	b.n	8003054 <prvTimerTask+0x80>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030b8:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030ba:	68de      	ldr	r6, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030bc:	f8d3 9000 	ldr.w	r9, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030c0:	f106 0b04 	add.w	fp, r6, #4
 80030c4:	4658      	mov	r0, fp
 80030c6:	f7fd fe05 	bl	8000cd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80030cc:	4630      	mov	r0, r6
 80030ce:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80030d0:	69f3      	ldr	r3, [r6, #28]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d03d      	beq.n	8003152 <prvTimerTask+0x17e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80030d6:	682b      	ldr	r3, [r5, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	f240 17ec 	movw	r7, #492	; 0x1ec
 80030de:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80030e2:	2a00      	cmp	r2, #0
 80030e4:	d1e8      	bne.n	80030b8 <prvTimerTask+0xe4>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80030e6:	9803      	ldr	r0, [sp, #12]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 80030e8:	f8c8 a000 	str.w	sl, [r8]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80030ec:	6802      	ldr	r2, [r0, #0]
	pxOverflowTimerList = pxTemp;
 80030ee:	6003      	str	r3, [r0, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80030f0:	603a      	str	r2, [r7, #0]
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 80030f2:	f7ff f8df 	bl	80022b4 <xTaskResumeAll>
 80030f6:	e7ad      	b.n	8003054 <prvTimerTask+0x80>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030f8:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030fa:	68de      	ldr	r6, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030fc:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003100:	f106 0b04 	add.w	fp, r6, #4
 8003104:	4658      	mov	r0, fp
 8003106:	f7fd fde5 	bl	8000cd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800310a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800310c:	4630      	mov	r0, r6
 800310e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003110:	69f3      	ldr	r3, [r6, #28]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d028      	beq.n	8003168 <prvTimerTask+0x194>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003116:	682b      	ldr	r3, [r5, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	f240 17ec 	movw	r7, #492	; 0x1ec
 800311e:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8003122:	2a00      	cmp	r2, #0
 8003124:	d1e8      	bne.n	80030f8 <prvTimerTask+0x124>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8003126:	9803      	ldr	r0, [sp, #12]
 8003128:	6802      	ldr	r2, [r0, #0]
	pxOverflowTimerList = pxTemp;
 800312a:	6003      	str	r3, [r0, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800312c:	603a      	str	r2, [r7, #0]
 800312e:	e7ac      	b.n	800308a <prvTimerTask+0xb6>
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
			{
				( void ) xTaskResumeAll();
 8003130:	f7ff f8c0 	bl	80022b4 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003134:	682b      	ldr	r3, [r5, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	68de      	ldr	r6, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800313a:	f106 0b04 	add.w	fp, r6, #4
 800313e:	4658      	mov	r0, fp
 8003140:	f7fd fdc8 	bl	8000cd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003144:	69f3      	ldr	r3, [r6, #28]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d01c      	beq.n	8003184 <prvTimerTask+0x1b0>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800314a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800314c:	4630      	mov	r0, r6
 800314e:	4798      	blx	r3
 8003150:	e780      	b.n	8003054 <prvTimerTask+0x80>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003152:	69b3      	ldr	r3, [r6, #24]
 8003154:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8003156:	454b      	cmp	r3, r9
 8003158:	d935      	bls.n	80031c6 <prvTimerTask+0x1f2>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800315a:	6073      	str	r3, [r6, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800315c:	6136      	str	r6, [r6, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800315e:	6838      	ldr	r0, [r7, #0]
 8003160:	4659      	mov	r1, fp
 8003162:	f7fd fd9d 	bl	8000ca0 <vListInsert>
 8003166:	e7b6      	b.n	80030d6 <prvTimerTask+0x102>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003168:	69b3      	ldr	r3, [r6, #24]
 800316a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800316c:	4553      	cmp	r3, sl
 800316e:	d943      	bls.n	80031f8 <prvTimerTask+0x224>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003170:	6073      	str	r3, [r6, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003172:	6136      	str	r6, [r6, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003174:	6838      	ldr	r0, [r7, #0]
 8003176:	4659      	mov	r1, fp
 8003178:	f7fd fd92 	bl	8000ca0 <vListInsert>
 800317c:	e7cb      	b.n	8003116 <prvTimerTask+0x142>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 800317e:	f000 f903 	bl	8003388 <vPortYield>
 8003182:	e767      	b.n	8003054 <prvTimerTask+0x80>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8003184:	69b3      	ldr	r3, [r6, #24]
static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003186:	6136      	str	r6, [r6, #16]
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8003188:	18fa      	adds	r2, r7, r3
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800318a:	4592      	cmp	sl, r2

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800318c:	6072      	str	r2, [r6, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800318e:	d34c      	bcc.n	800322a <prvTimerTask+0x256>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8003190:	ebc7 0a0a 	rsb	sl, r7, sl
 8003194:	4553      	cmp	r3, sl
 8003196:	d851      	bhi.n	800323c <prvTimerTask+0x268>
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	b18b      	cbz	r3, 80031c0 <prvTimerTask+0x1ec>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800319c:	2000      	movs	r0, #0
 800319e:	9007      	str	r0, [sp, #28]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80031a0:	9708      	str	r7, [sp, #32]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80031a2:	9609      	str	r6, [sp, #36]	; 0x24

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80031a4:	f7ff fdb6 	bl	8002d14 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80031a8:	f240 211c 	movw	r1, #540	; 0x21c
 80031ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80031b0:	2200      	movs	r2, #0
 80031b2:	6808      	ldr	r0, [r1, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	a907      	add	r1, sp, #28
 80031b8:	f7fd feae 	bl	8000f18 <xQueueGenericSend>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
			configASSERT( xResult );
 80031bc:	2800      	cmp	r0, #0
 80031be:	d1c4      	bne.n	800314a <prvTimerTask+0x176>
 80031c0:	f000 f8ee 	bl	80033a0 <ulPortSetInterruptMask>
 80031c4:	e7fe      	b.n	80031c4 <prvTimerTask+0x1f0>
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	b19b      	cbz	r3, 80031f2 <prvTimerTask+0x21e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80031ca:	2100      	movs	r1, #0
 80031cc:	9107      	str	r1, [sp, #28]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80031ce:	f8cd 9020 	str.w	r9, [sp, #32]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80031d2:	9609      	str	r6, [sp, #36]	; 0x24

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80031d4:	f7ff fd9e 	bl	8002d14 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80031d8:	f240 211c 	movw	r1, #540	; 0x21c
 80031dc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80031e0:	2200      	movs	r2, #0
 80031e2:	6808      	ldr	r0, [r1, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	a907      	add	r1, sp, #28
 80031e8:	f7fd fe96 	bl	8000f18 <xQueueGenericSend>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
				configASSERT( xResult );
 80031ec:	2800      	cmp	r0, #0
 80031ee:	f47f af72 	bne.w	80030d6 <prvTimerTask+0x102>
 80031f2:	f000 f8d5 	bl	80033a0 <ulPortSetInterruptMask>
 80031f6:	e7fe      	b.n	80031f6 <prvTimerTask+0x222>
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	b19b      	cbz	r3, 8003224 <prvTimerTask+0x250>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80031fc:	2200      	movs	r2, #0
 80031fe:	9207      	str	r2, [sp, #28]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003200:	f8cd a020 	str.w	sl, [sp, #32]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003204:	9609      	str	r6, [sp, #36]	; 0x24

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003206:	f7ff fd85 	bl	8002d14 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800320a:	f240 211c 	movw	r1, #540	; 0x21c
 800320e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003212:	2200      	movs	r2, #0
 8003214:	6808      	ldr	r0, [r1, #0]
 8003216:	4613      	mov	r3, r2
 8003218:	a907      	add	r1, sp, #28
 800321a:	f7fd fe7d 	bl	8000f18 <xQueueGenericSend>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
				configASSERT( xResult );
 800321e:	2800      	cmp	r0, #0
 8003220:	f47f af79 	bne.w	8003116 <prvTimerTask+0x142>
 8003224:	f000 f8bc 	bl	80033a0 <ulPortSetInterruptMask>
 8003228:	e7fe      	b.n	8003228 <prvTimerTask+0x254>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800322a:	f240 13ec 	movw	r3, #492	; 0x1ec
 800322e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003232:	4659      	mov	r1, fp
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	f7fd fd33 	bl	8000ca0 <vListInsert>
 800323a:	e786      	b.n	800314a <prvTimerTask+0x176>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800323c:	9a03      	ldr	r2, [sp, #12]
 800323e:	4659      	mov	r1, fp
 8003240:	6810      	ldr	r0, [r2, #0]
 8003242:	f7fd fd2d 	bl	8000ca0 <vListInsert>
 8003246:	e780      	b.n	800314a <prvTimerTask+0x176>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8003248:	9b05      	ldr	r3, [sp, #20]
 800324a:	f8d9 1018 	ldr.w	r1, [r9, #24]
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800324e:	9802      	ldr	r0, [sp, #8]
static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003250:	f8c9 9010 	str.w	r9, [r9, #16]
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8003254:	18ca      	adds	r2, r1, r3
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8003256:	4282      	cmp	r2, r0

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003258:	f8c9 2004 	str.w	r2, [r9, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800325c:	d82f      	bhi.n	80032be <prvTimerTask+0x2ea>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800325e:	1ac3      	subs	r3, r0, r3
 8003260:	4299      	cmp	r1, r3
 8003262:	d83b      	bhi.n	80032dc <prvTimerTask+0x308>
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003264:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003268:	4648      	mov	r0, r9
 800326a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800326c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003270:	2b01      	cmp	r3, #1
 8003272:	f47f aeef 	bne.w	8003054 <prvTimerTask+0x80>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003276:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800327a:	9b05      	ldr	r3, [sp, #20]
 800327c:	2100      	movs	r1, #0
 800327e:	441a      	add	r2, r3
 8003280:	9100      	str	r1, [sp, #0]
 8003282:	4648      	mov	r0, r9
 8003284:	460b      	mov	r3, r1
 8003286:	f7ff fe7b 	bl	8002f80 <xTimerGenericCommand>
							configASSERT( xResult );
 800328a:	2800      	cmp	r0, #0
 800328c:	f47f aee2 	bne.w	8003054 <prvTimerTask+0x80>
 8003290:	f000 f886 	bl	80033a0 <ulPortSetInterruptMask>
 8003294:	e7fe      	b.n	8003294 <prvTimerTask+0x2c0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003296:	9b05      	ldr	r3, [sp, #20]
 8003298:	f8c9 3018 	str.w	r3, [r9, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800329c:	b32b      	cbz	r3, 80032ea <prvTimerTask+0x316>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800329e:	9a02      	ldr	r2, [sp, #8]
static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80032a0:	f8c9 9010 	str.w	r9, [r9, #16]
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80032a4:	4413      	add	r3, r2
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 80032a6:	4293      	cmp	r3, r2

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80032a8:	f8c9 3004 	str.w	r3, [r9, #4]
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80032ac:	bf96      	itet	ls
 80032ae:	9b03      	ldrls	r3, [sp, #12]
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032b0:	6828      	ldrhi	r0, [r5, #0]
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80032b2:	6818      	ldrls	r0, [r3, #0]
 80032b4:	f109 0104 	add.w	r1, r9, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032b8:	f7fd fcf2 	bl	8000ca0 <vListInsert>
 80032bc:	e6ca      	b.n	8003054 <prvTimerTask+0x80>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80032be:	4283      	cmp	r3, r0
 80032c0:	bf94      	ite	ls
 80032c2:	2100      	movls	r1, #0
 80032c4:	2101      	movhi	r1, #1
 80032c6:	4293      	cmp	r3, r2
 80032c8:	bf88      	it	hi
 80032ca:	2100      	movhi	r1, #0
 80032cc:	2900      	cmp	r1, #0
 80032ce:	d1c9      	bne.n	8003264 <prvTimerTask+0x290>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032d0:	f109 0104 	add.w	r1, r9, #4
 80032d4:	6828      	ldr	r0, [r5, #0]
 80032d6:	f7fd fce3 	bl	8000ca0 <vListInsert>
 80032da:	e6bb      	b.n	8003054 <prvTimerTask+0x80>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80032dc:	9a03      	ldr	r2, [sp, #12]
 80032de:	f109 0104 	add.w	r1, r9, #4
 80032e2:	6810      	ldr	r0, [r2, #0]
 80032e4:	f7fd fcdc 	bl	8000ca0 <vListInsert>
 80032e8:	e6b4      	b.n	8003054 <prvTimerTask+0x80>
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80032ea:	f000 f859 	bl	80033a0 <ulPortSetInterruptMask>
 80032ee:	e7fe      	b.n	80032ee <prvTimerTask+0x31a>

080032f0 <xTimerIsTimerActive>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80032f0:	b510      	push	{r4, lr}
 80032f2:	4604      	mov	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80032f4:	f000 f878 	bl	80033e8 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 80032f8:	6964      	ldr	r4, [r4, #20]
 80032fa:	3400      	adds	r4, #0
 80032fc:	bf18      	it	ne
 80032fe:	2401      	movne	r4, #1
	}
	taskEXIT_CRITICAL();
 8003300:	f000 f886 	bl	8003410 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8003304:	4620      	mov	r0, r4
 8003306:	bd10      	pop	{r4, pc}

08003308 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = ( Timer_t * ) xTimer;

	return pxTimer->pvTimerID;
}
 8003308:	6a00      	ldr	r0, [r0, #32]
 800330a:	4770      	bx	lr

0800330c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800330c:	4805      	ldr	r0, [pc, #20]	; (8003324 <prvPortStartFirstTask+0x18>)
 800330e:	6800      	ldr	r0, [r0, #0]
 8003310:	6800      	ldr	r0, [r0, #0]
 8003312:	f380 8808 	msr	MSP, r0
 8003316:	b662      	cpsie	i
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	df00      	svc	0
 8003322:	bf00      	nop
 8003324:	e000ed08 	and	lr, r0, r8, lsl #26

08003328 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003328:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003338 <vPortEnableVFP+0x10>
 800332c:	6801      	ldr	r1, [r0, #0]
 800332e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003332:	6001      	str	r1, [r0, #0]
 8003334:	4770      	bx	lr
 8003336:	ed880000 	stc	0, cr0, [r8]
 800333a:	b430e000 	ldrtlt	lr, [r0], #-0

0800333c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800333c:	b430      	push	{r4, r5}

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800333e:	f243 33b1 	movw	r3, #13233	; 0x33b1

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003342:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003346:	f06f 0402 	mvn.w	r4, #2

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800334a:	f6c0 0300 	movt	r3, #2048	; 0x800

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800334e:	f840 5c04 	str.w	r5, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003352:	f840 4c24 	str.w	r4, [r0, #-36]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003356:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800335a:	f840 2c20 	str.w	r2, [r0, #-32]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800335e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8003362:	bc30      	pop	{r4, r5}
 8003364:	3844      	subs	r0, #68	; 0x44
 8003366:	4770      	bx	lr

08003368 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <pxCurrentTCBConst2>)
 800336a:	6819      	ldr	r1, [r3, #0]
 800336c:	6808      	ldr	r0, [r1, #0]
 800336e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003372:	f380 8809 	msr	PSP, r0
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f04f 0000 	mov.w	r0, #0
 800337e:	f380 8811 	msr	BASEPRI, r0
 8003382:	4770      	bx	lr

08003384 <pxCurrentTCBConst2>:
 8003384:	2000017c 	andcs	r0, r0, ip, ror r1

08003388 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003388:	f64e 5304 	movw	r3, #60676	; 0xed04
 800338c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003394:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8003396:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	4770      	bx	lr

080033a0 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 80033a0:	f3ef 8011 	mrs	r0, BASEPRI
 80033a4:	f04f 0150 	mov.w	r1, #80	; 0x50
 80033a8:	f381 8811 	msr	BASEPRI, r1
 80033ac:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 80033ae:	2000      	movs	r0, #0

080033b0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033b0:	b508      	push	{r3, lr}
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80033b2:	f240 0318 	movw	r3, #24
 80033b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	d002      	beq.n	80033c6 <prvTaskExitError+0x16>
 80033c0:	f7ff ffee 	bl	80033a0 <ulPortSetInterruptMask>
 80033c4:	e7fe      	b.n	80033c4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80033c6:	f7ff ffeb 	bl	80033a0 <ulPortSetInterruptMask>
 80033ca:	e7fe      	b.n	80033ca <prvTaskExitError+0x1a>

080033cc <vPortEndScheduler>:
	return 0;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 80033cc:	b508      	push	{r3, lr}
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 80033ce:	f240 0318 	movw	r3, #24
 80033d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033dc:	d002      	beq.n	80033e4 <vPortEndScheduler+0x18>
 80033de:	f7ff ffdf 	bl	80033a0 <ulPortSetInterruptMask>
 80033e2:	e7fe      	b.n	80033e2 <vPortEndScheduler+0x16>
 80033e4:	bd08      	pop	{r3, pc}
 80033e6:	bf00      	nop

080033e8 <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80033e8:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
 80033ea:	f7ff ffd9 	bl	80033a0 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 80033ee:	f240 0318 	movw	r3, #24
 80033f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	3201      	adds	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 80033fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	bd08      	pop	{r3, pc}
 8003406:	bf00      	nop

08003408 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 8003408:	f380 8811 	msr	BASEPRI, r0
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop

08003410 <vPortExitCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003410:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
 8003412:	f240 0318 	movw	r3, #24
 8003416:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	b118      	cbz	r0, 8003426 <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800341e:	3801      	subs	r0, #1
 8003420:	6018      	str	r0, [r3, #0]
	if( uxCriticalNesting == 0 )
 8003422:	b118      	cbz	r0, 800342c <vPortExitCritical+0x1c>
 8003424:	bd08      	pop	{r3, pc}
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003426:	f7ff ffbb 	bl	80033a0 <ulPortSetInterruptMask>
 800342a:	e7fe      	b.n	800342a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		portENABLE_INTERRUPTS();
	}
}
 800342c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		portENABLE_INTERRUPTS();
 8003430:	f7ff bfea 	b.w	8003408 <vPortClearInterruptMask>

08003434 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003434:	f3ef 8009 	mrs	r0, PSP
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	4b12      	ldr	r3, [pc, #72]	; (8003488 <pxCurrentTCBConst>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	f01e 0f10 	tst.w	lr, #16
 8003444:	bf08      	it	eq
 8003446:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800344a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344e:	6010      	str	r0, [r2, #0]
 8003450:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003454:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003458:	f380 8811 	msr	BASEPRI, r0
 800345c:	f7ff fa4e 	bl	80028fc <vTaskSwitchContext>
 8003460:	f04f 0000 	mov.w	r0, #0
 8003464:	f380 8811 	msr	BASEPRI, r0
 8003468:	bc08      	pop	{r3}
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	6808      	ldr	r0, [r1, #0]
 800346e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003472:	f01e 0f10 	tst.w	lr, #16
 8003476:	bf08      	it	eq
 8003478:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800347c:	f380 8809 	msr	PSP, r0
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop

08003488 <pxCurrentTCBConst>:
 8003488:	2000017c 	andcs	r0, r0, ip, ror r1

0800348c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800348c:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 800348e:	f7ff ff87 	bl	80033a0 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003492:	f7fe fe51 	bl	8002138 <xTaskIncrementTick>
 8003496:	b130      	cbz	r0, 80034a6 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003498:	f64e 5304 	movw	r3, #60676	; 0xed04
 800349c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80034a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 80034a6:	2000      	movs	r0, #0
}
 80034a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 80034ac:	f7ff bfac 	b.w	8003408 <vPortClearInterruptMask>

080034b0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034b0:	f240 0310 	movw	r3, #16
 80034b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034b8:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	f2c1 0262 	movt	r2, #4194	; 0x1062
 80034c2:	fba2 3000 	umull	r3, r0, r2, r0
 80034c6:	f24e 0214 	movw	r2, #57364	; 0xe014
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80034ca:	f24e 0310 	movw	r3, #57360	; 0xe010
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034ce:	0980      	lsrs	r0, r0, #6
 80034d0:	f2ce 0200 	movt	r2, #57344	; 0xe000
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80034d4:	f2ce 0300 	movt	r3, #57344	; 0xe000
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034d8:	3801      	subs	r0, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80034da:	2107      	movs	r1, #7
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034dc:	6010      	str	r0, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80034de:	6019      	str	r1, [r3, #0]
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop

080034e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034e4:	b510      	push	{r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034e6:	f44f 4364 	mov.w	r3, #58368	; 0xe400
 80034ea:	f2ce 0300 	movt	r3, #57344	; 0xe000

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034ee:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034f0:	7819      	ldrb	r1, [r3, #0]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034f2:	22ff      	movs	r2, #255	; 0xff
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034f4:	b2c9      	uxtb	r1, r1
 80034f6:	9101      	str	r1, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034f8:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003502:	f89d 4003 	ldrb.w	r4, [sp, #3]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003506:	f89d 1003 	ldrb.w	r1, [sp, #3]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800350a:	f240 2224 	movw	r2, #548	; 0x224

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800350e:	f240 2028 	movw	r0, #552	; 0x228

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003512:	f2c2 0200 	movt	r2, #8192	; 0x2000

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003516:	f2c2 0000 	movt	r0, #8192	; 0x2000

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800351a:	f004 0450 	and.w	r4, r4, #80	; 0x50

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800351e:	2307      	movs	r3, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003520:	0609      	lsls	r1, r1, #24

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003522:	7014      	strb	r4, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003524:	6003      	str	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003526:	d50e      	bpl.n	8003546 <xPortStartScheduler+0x62>
 8003528:	2306      	movs	r3, #6
 800352a:	e000      	b.n	800352e <xPortStartScheduler+0x4a>
 800352c:	460b      	mov	r3, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800352e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003532:	0052      	lsls	r2, r2, #1
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	f88d 2003 	strb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800353a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800353e:	0612      	lsls	r2, r2, #24
 8003540:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8003544:	d4f2      	bmi.n	800352c <xPortStartScheduler+0x48>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003546:	9c01      	ldr	r4, [sp, #4]
 8003548:	f44f 4164 	mov.w	r1, #58368	; 0xe400
 800354c:	f2ce 0100 	movt	r1, #57344	; 0xe000
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003550:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003552:	f64e 5220 	movw	r2, #60704	; 0xed20
 8003556:	f2ce 0200 	movt	r2, #57344	; 0xe000
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800355a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800355e:	b2e4      	uxtb	r4, r4
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003560:	6003      	str	r3, [r0, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003562:	700c      	strb	r4, [r1, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003564:	6813      	ldr	r3, [r2, #0]
 8003566:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800356a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800356c:	6813      	ldr	r3, [r2, #0]
 800356e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003574:	f7ff ff9c 	bl	80034b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003578:	f240 0318 	movw	r3, #24
 800357c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003584:	f7ff fed0 	bl	8003328 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003588:	f64e 7334 	movw	r3, #61236	; 0xef34
 800358c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8003596:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003598:	f7ff feb8 	bl	800330c <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800359c:	f7ff ff08 	bl	80033b0 <prvTaskExitError>

080035a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80035a0:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80035a2:	f3ef 8105 	mrs	r1, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80035a6:	290f      	cmp	r1, #15
 80035a8:	d90b      	bls.n	80035c2 <vPortValidateInterruptPriority+0x22>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80035aa:	f24e 32f0 	movw	r2, #58352	; 0xe3f0
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80035ae:	f240 2324 	movw	r3, #548	; 0x224

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80035b2:	f2ce 0200 	movt	r2, #57344	; 0xe000
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80035b6:	f2c2 0300 	movt	r3, #8192	; 0x2000

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80035ba:	5c8a      	ldrb	r2, [r1, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	4293      	cmp	r3, r2
 80035c0:	d811      	bhi.n	80035e6 <vPortValidateInterruptPriority+0x46>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80035c2:	f64e 520c 	movw	r2, #60684	; 0xed0c
 80035c6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80035ca:	f240 2328 	movw	r3, #552	; 0x228
 80035ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80035da:	429a      	cmp	r2, r3
 80035dc:	d800      	bhi.n	80035e0 <vPortValidateInterruptPriority+0x40>
 80035de:	bd08      	pop	{r3, pc}
 80035e0:	f7ff fede 	bl	80033a0 <ulPortSetInterruptMask>
 80035e4:	e7fe      	b.n	80035e4 <vPortValidateInterruptPriority+0x44>
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80035e6:	f7ff fedb 	bl	80033a0 <ulPortSetInterruptMask>
 80035ea:	e7fe      	b.n	80035ea <vPortValidateInterruptPriority+0x4a>

080035ec <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80035ec:	b538      	push	{r3, r4, r5, lr}
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80035ee:	0743      	lsls	r3, r0, #29
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80035f0:	4604      	mov	r4, r0
	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80035f2:	bf1c      	itt	ne
 80035f4:	f020 0407 	bicne.w	r4, r0, #7
 80035f8:	3408      	addne	r4, #8
		}
	#endif

	vTaskSuspendAll();
 80035fa:	f7fe fd75 	bl	80020e8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80035fe:	f240 232c 	movw	r3, #556	; 0x22c
 8003602:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4615      	mov	r5, r2
 800360a:	b1c2      	cbz	r2, 800363e <pvPortMalloc+0x52>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800360c:	f240 2330 	movw	r3, #560	; 0x230
 8003610:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003614:	f642 31f7 	movw	r1, #11255	; 0x2bf7
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	f2c0 0101 	movt	r1, #1
 800361e:	4414      	add	r4, r2
 8003620:	428c      	cmp	r4, r1
 8003622:	d807      	bhi.n	8003634 <pvPortMalloc+0x48>
 8003624:	42a2      	cmp	r2, r4
 8003626:	d205      	bcs.n	8003634 <pvPortMalloc+0x48>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8003628:	4415      	add	r5, r2
			xNextFreeByte += xWantedSize;
 800362a:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}	
	xTaskResumeAll();
 800362c:	f7fe fe42 	bl	80022b4 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 8003630:	4628      	mov	r0, r5
 8003632:	bd38      	pop	{r3, r4, r5, pc}

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 8003634:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}	
	xTaskResumeAll();
 8003636:	f7fe fe3d 	bl	80022b4 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 800363a:	4628      	mov	r0, r5
 800363c:	bd38      	pop	{r3, r4, r5, pc}
	vTaskSuspendAll();
	{
		if( pucAlignedHeap == NULL )
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 800363e:	4d02      	ldr	r5, [pc, #8]	; (8003648 <pvPortMalloc+0x5c>)
 8003640:	f025 0507 	bic.w	r5, r5, #7
 8003644:	601d      	str	r5, [r3, #0]
 8003646:	e7e1      	b.n	800360c <pvPortMalloc+0x20>
 8003648:	2000023c 	andcs	r0, r0, ip, lsr r2

0800364c <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800364c:	b508      	push	{r3, lr}
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800364e:	b110      	cbz	r0, 8003656 <vPortFree+0xa>
 8003650:	f7ff fea6 	bl	80033a0 <ulPortSetInterruptMask>
 8003654:	e7fe      	b.n	8003654 <vPortFree+0x8>
 8003656:	bd08      	pop	{r3, pc}

08003658 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
 8003658:	f240 2330 	movw	r3, #560	; 0x230
 800365c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop

08003668 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8003668:	f240 2330 	movw	r3, #560	; 0x230
 800366c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	f5c0 3095 	rsb	r0, r0, #76288	; 0x12a00
}
 8003676:	f500 70fc 	add.w	r0, r0, #504	; 0x1f8
 800367a:	4770      	bx	lr

0800367c <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800367c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003680:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8003684:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003688:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800368c:	60d8      	str	r0, [r3, #12]
 800368e:	4770      	bx	lr

08003690 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003690:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003692:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003694:	b97b      	cbnz	r3, 80036b6 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003696:	7802      	ldrb	r2, [r0, #0]
 8003698:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800369c:	0951      	lsrs	r1, r2, #5
 800369e:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80036a0:	f002 021f 	and.w	r2, r2, #31
 80036a4:	2001      	movs	r0, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80036a6:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80036aa:	fa00 f202 	lsl.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80036ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80036b2:	bc70      	pop	{r4, r5, r6}
 80036b4:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80036b6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80036ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80036be:	7846      	ldrb	r6, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80036c0:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80036c2:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80036c4:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80036c6:	43d2      	mvns	r2, r2
 80036c8:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80036cc:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;
 80036d0:	250f      	movs	r5, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80036d2:	b2c9      	uxtb	r1, r1
 80036d4:	fa06 f101 	lsl.w	r1, r6, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80036d8:	fa45 f202 	asr.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80036dc:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80036de:	4022      	ands	r2, r4
 80036e0:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80036e2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80036e6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80036ea:	0112      	lsls	r2, r2, #4
 80036ec:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80036ee:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80036f2:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80036f4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80036f8:	f002 011f 	and.w	r1, r2, #31
 80036fc:	2001      	movs	r0, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80036fe:	0952      	lsrs	r2, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003700:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003704:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800370c:	bc70      	pop	{r4, r5, r6}
 800370e:	4770      	bx	lr

08003710 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8003710:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8003714:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003718:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800371c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003720:	4308      	orrs	r0, r1
 8003722:	6098      	str	r0, [r3, #8]
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop

08003728 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8003728:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800372c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003730:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8003732:	b919      	cbnz	r1, 800373c <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8003734:	ea22 0000 	bic.w	r0, r2, r0
 8003738:	6118      	str	r0, [r3, #16]
 800373a:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800373c:	4310      	orrs	r0, r2
 800373e:	6118      	str	r0, [r3, #16]
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop

08003744 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8003744:	f24e 0310 	movw	r3, #57360	; 0xe010
 8003748:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800374c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	bf0c      	ite	eq
 8003752:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8003756:	f022 0204 	bicne.w	r2, r2, #4
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop

08003760 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8003760:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8003762:	2300      	movs	r3, #0
 8003764:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003768:	4298      	cmp	r0, r3
 800376a:	d048      	beq.n	80037fe <GPIO_DeInit+0x9e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 800376c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003770:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003774:	4298      	cmp	r0, r3
 8003776:	d04c      	beq.n	8003812 <GPIO_DeInit+0xb2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8003778:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800377c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003780:	4298      	cmp	r0, r3
 8003782:	d050      	beq.n	8003826 <GPIO_DeInit+0xc6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8003784:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003788:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800378c:	4298      	cmp	r0, r3
 800378e:	d054      	beq.n	800383a <GPIO_DeInit+0xda>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8003790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003794:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003798:	4298      	cmp	r0, r3
 800379a:	d058      	beq.n	800384e <GPIO_DeInit+0xee>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 800379c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80037a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80037a4:	4298      	cmp	r0, r3
 80037a6:	d05c      	beq.n	8003862 <GPIO_DeInit+0x102>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 80037a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80037ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80037b0:	4298      	cmp	r0, r3
 80037b2:	d060      	beq.n	8003876 <GPIO_DeInit+0x116>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 80037b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80037b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80037bc:	4298      	cmp	r0, r3
 80037be:	d064      	beq.n	800388a <GPIO_DeInit+0x12a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 80037c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80037c8:	4298      	cmp	r0, r3
 80037ca:	d068      	beq.n	800389e <GPIO_DeInit+0x13e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 80037cc:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80037d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80037d4:	4298      	cmp	r0, r3
 80037d6:	d06e      	beq.n	80038b6 <GPIO_DeInit+0x156>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 80037d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80037dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80037e0:	4298      	cmp	r0, r3
 80037e2:	d000      	beq.n	80037e6 <GPIO_DeInit+0x86>
 80037e4:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 80037e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80037ea:	2101      	movs	r1, #1
 80037ec:	f000 fb40 	bl	8003e70 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 80037f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80037f4:	2100      	movs	r1, #0
    }
  }
}
 80037f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 80037fa:	f000 bb39 	b.w	8003e70 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80037fe:	2001      	movs	r0, #1
 8003800:	4601      	mov	r1, r0
 8003802:	f000 fb35 	bl	8003e70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8003806:	2001      	movs	r0, #1
 8003808:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800380a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800380e:	f000 bb2f 	b.w	8003e70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003812:	2002      	movs	r0, #2
 8003814:	2101      	movs	r1, #1
 8003816:	f000 fb2b 	bl	8003e70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800381a:	2002      	movs	r0, #2
 800381c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800381e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8003822:	f000 bb25 	b.w	8003e70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003826:	2004      	movs	r0, #4
 8003828:	2101      	movs	r1, #1
 800382a:	f000 fb21 	bl	8003e70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800382e:	2004      	movs	r0, #4
 8003830:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8003832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8003836:	f000 bb1b 	b.w	8003e70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800383a:	2008      	movs	r0, #8
 800383c:	2101      	movs	r1, #1
 800383e:	f000 fb17 	bl	8003e70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8003842:	2008      	movs	r0, #8
 8003844:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8003846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800384a:	f000 bb11 	b.w	8003e70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800384e:	2010      	movs	r0, #16
 8003850:	2101      	movs	r1, #1
 8003852:	f000 fb0d 	bl	8003e70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8003856:	2010      	movs	r0, #16
 8003858:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800385a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800385e:	f000 bb07 	b.w	8003e70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8003862:	2020      	movs	r0, #32
 8003864:	2101      	movs	r1, #1
 8003866:	f000 fb03 	bl	8003e70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800386a:	2020      	movs	r0, #32
 800386c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800386e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8003872:	f000 bafd 	b.w	8003e70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8003876:	2040      	movs	r0, #64	; 0x40
 8003878:	2101      	movs	r1, #1
 800387a:	f000 faf9 	bl	8003e70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800387e:	2040      	movs	r0, #64	; 0x40
 8003880:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8003882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8003886:	f000 baf3 	b.w	8003e70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800388a:	2080      	movs	r0, #128	; 0x80
 800388c:	2101      	movs	r1, #1
 800388e:	f000 faef 	bl	8003e70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8003892:	2080      	movs	r0, #128	; 0x80
 8003894:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8003896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800389a:	f000 bae9 	b.w	8003e70 <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800389e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80038a2:	2101      	movs	r1, #1
 80038a4:	f000 fae4 	bl	8003e70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80038a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80038ac:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80038ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80038b2:	f000 badd 	b.w	8003e70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 80038b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80038ba:	2101      	movs	r1, #1
 80038bc:	f000 fad8 	bl	8003e70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 80038c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80038c4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80038c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 80038ca:	f000 bad1 	b.w	8003e70 <RCC_AHB1PeriphResetCmd>
 80038ce:	bf00      	nop

080038d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80038d0:	2200      	movs	r2, #0
 80038d2:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80038d6:	4613      	mov	r3, r2
 80038d8:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 80038da:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80038dc:	f04f 0803 	mov.w	r8, #3
 80038e0:	e004      	b.n	80038ec <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80038e2:	3301      	adds	r3, #1
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	f102 0202 	add.w	r2, r2, #2
 80038ea:	d02e      	beq.n	800394a <GPIO_Init+0x7a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80038ec:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80038f0:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 80038f4:	42a5      	cmp	r5, r4
 80038f6:	d1f4      	bne.n	80038e2 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80038f8:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80038fc:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003900:	fa08 f402 	lsl.w	r4, r8, r2
 8003904:	43e4      	mvns	r4, r4
 8003906:	ea04 0909 	and.w	r9, r4, r9
 800390a:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800390e:	f8d0 9000 	ldr.w	r9, [r0]
 8003912:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003916:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800391a:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800391e:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003922:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003926:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800392a:	d911      	bls.n	8003950 <GPIO_Init+0x80>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800392c:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800392e:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003932:	402c      	ands	r4, r5
 8003934:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003936:	68c5      	ldr	r5, [r0, #12]
 8003938:	fa0c f402 	lsl.w	r4, ip, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800393c:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800393e:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003940:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003942:	60c4      	str	r4, [r0, #12]
 8003944:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003948:	d1d0      	bne.n	80038ec <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800394a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800394e:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003950:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003954:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003958:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800395c:	ea04 0a0a 	and.w	sl, r4, sl
 8003960:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003964:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8003968:	fa09 f902 	lsl.w	r9, r9, r2
 800396c:	ea49 090a 	orr.w	r9, r9, sl
 8003970:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8003974:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8003978:	ea29 0505 	bic.w	r5, r9, r5
 800397c:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800397e:	6845      	ldr	r5, [r0, #4]
 8003980:	fa0c fc03 	lsl.w	ip, ip, r3
 8003984:	fa1f fc8c 	uxth.w	ip, ip
 8003988:	ea4c 0505 	orr.w	r5, ip, r5
 800398c:	6045      	str	r5, [r0, #4]
 800398e:	e7cd      	b.n	800392c <GPIO_Init+0x5c>

08003990 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8003990:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8003992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003996:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8003998:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800399a:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800399c:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800399e:	71c3      	strb	r3, [r0, #7]
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop

080039a4 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039a4:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 80039a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039aa:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80039ac:	9b01      	ldr	r3, [sp, #4]
 80039ae:	430b      	orrs	r3, r1
 80039b0:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80039b2:	9b01      	ldr	r3, [sp, #4]
 80039b4:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80039b6:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80039b8:	9b01      	ldr	r3, [sp, #4]
 80039ba:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80039bc:	69c3      	ldr	r3, [r0, #28]
 80039be:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80039c0:	69c3      	ldr	r3, [r0, #28]
 80039c2:	9301      	str	r3, [sp, #4]
}
 80039c4:	b002      	add	sp, #8
 80039c6:	4770      	bx	lr

080039c8 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80039c8:	6903      	ldr	r3, [r0, #16]
 80039ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80039cc:	bf0c      	ite	eq
 80039ce:	2000      	moveq	r0, #0
 80039d0:	2001      	movne	r0, #1
 80039d2:	4770      	bx	lr

080039d4 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80039d4:	6900      	ldr	r0, [r0, #16]
}
 80039d6:	b280      	uxth	r0, r0
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop

080039dc <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80039dc:	6943      	ldr	r3, [r0, #20]
 80039de:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80039e0:	bf0c      	ite	eq
 80039e2:	2000      	moveq	r0, #0
 80039e4:	2001      	movne	r0, #1
 80039e6:	4770      	bx	lr

080039e8 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80039e8:	6940      	ldr	r0, [r0, #20]
}
 80039ea:	b280      	uxth	r0, r0
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop

080039f0 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80039f0:	8301      	strh	r1, [r0, #24]
 80039f2:	4770      	bx	lr

080039f4 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80039f4:	8341      	strh	r1, [r0, #26]
 80039f6:	4770      	bx	lr

080039f8 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80039f8:	b90a      	cbnz	r2, 80039fe <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80039fa:	8341      	strh	r1, [r0, #26]
 80039fc:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 80039fe:	8301      	strh	r1, [r0, #24]
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop

08003a04 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8003a04:	6141      	str	r1, [r0, #20]
 8003a06:	4770      	bx	lr

08003a08 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8003a08:	6943      	ldr	r3, [r0, #20]
 8003a0a:	4059      	eors	r1, r3
 8003a0c:	6141      	str	r1, [r0, #20]
 8003a0e:	4770      	bx	lr

08003a10 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003a10:	08cb      	lsrs	r3, r1, #3
 8003a12:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003a16:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003a1a:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003a1c:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003a1e:	6a04      	ldr	r4, [r0, #32]
 8003a20:	230f      	movs	r3, #15
 8003a22:	408b      	lsls	r3, r1
 8003a24:	ea24 0303 	bic.w	r3, r4, r3
 8003a28:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8003a2a:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8003a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003a30:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8003a32:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8003a34:	6203      	str	r3, [r0, #32]
}
 8003a36:	4770      	bx	lr

08003a38 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003a38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003a3c:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a40:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	f041 0101 	orr.w	r1, r1, #1
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8003a48:	b430      	push	{r4, r5}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003a4a:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003a4e:	681d      	ldr	r5, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8003a50:	f44f 5040 	mov.w	r0, #12288	; 0x3000

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8003a54:	4601      	mov	r1, r0

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003a56:	f243 0410 	movw	r4, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003a5a:	f025 55a8 	bic.w	r5, r5, #352321536	; 0x15000000
 8003a5e:	f425 2510 	bic.w	r5, r5, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003a62:	f2c2 4400 	movt	r4, #9216	; 0x2400

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8003a66:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8003a6a:	f2c2 0000 	movt	r0, #8192	; 0x2000

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003a6e:	601d      	str	r5, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003a70:	605c      	str	r4, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8003a72:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8003a76:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003a80:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 

}
 8003a82:	bc30      	pop	{r4, r5}
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003a84:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 8003a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 8003a8a:	4770      	bx	lr

08003a8c <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8003a8c:	f643 0302 	movw	r3, #14338	; 0x3802
 8003a90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8003a98:	7018      	strb	r0, [r3, #0]
 8003a9a:	4770      	bx	lr

08003a9c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8003a9c:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 8003a9e:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8003aa0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8003aa4:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8003aa6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003aaa:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8003aac:	039b      	lsls	r3, r3, #14
 8003aae:	d40f      	bmi.n	8003ad0 <RCC_WaitForHSEStartUp+0x34>
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8003ab0:	9b01      	ldr	r3, [sp, #4]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8003ab6:	9b01      	ldr	r3, [sp, #4]
 8003ab8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003abc:	d1f5      	bne.n	8003aaa <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8003abe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003ac2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ac6:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 8003ac8:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 8003acc:	b002      	add	sp, #8
 8003ace:	4770      	bx	lr
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8003ad0:	9b01      	ldr	r3, [sp, #4]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8003ad6:	9b01      	ldr	r3, [sp, #4]
 8003ad8:	e7f1      	b.n	8003abe <RCC_WaitForHSEStartUp+0x22>
 8003ada:	bf00      	nop

08003adc <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8003adc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ae4:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8003ae6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8003aea:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8003aee:	6018      	str	r0, [r3, #0]
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003afa:	6018      	str	r0, [r3, #0]
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003b00:	f643 0370 	movw	r3, #14448	; 0x3870
 8003b04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b08:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8003b0a:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003b0c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003b0e:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8003b10:	d005      	beq.n	8003b1e <RCC_LSEConfig+0x1e>
 8003b12:	2804      	cmp	r0, #4
 8003b14:	d102      	bne.n	8003b1c <RCC_LSEConfig+0x1c>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8003b16:	2205      	movs	r2, #5
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	4770      	bx	lr
 8003b1c:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8003b1e:	7018      	strb	r0, [r3, #0]
      break;
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop

08003b24 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8003b24:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8003b28:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003b2c:	6018      	str	r0, [r3, #0]
 8003b2e:	4770      	bx	lr

08003b30 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8003b30:	b410      	push	{r4}
 8003b32:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8003b34:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	4301      	orrs	r1, r0
 8003b3c:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8003b40:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8003b44:	3b01      	subs	r3, #1
 8003b46:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8003b4a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8003b4e:	6063      	str	r3, [r4, #4]
                 (PLLQ << 24);
}
 8003b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop

08003b58 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8003b58:	2360      	movs	r3, #96	; 0x60
 8003b5a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003b5e:	6018      	str	r0, [r3, #0]
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop

08003b64 <RCC_PLLI2SConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 8003b64:	0712      	lsls	r2, r2, #28
 8003b66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003b6a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8003b6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b72:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8003b76:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 8003b7a:	4770      	bx	lr

08003b7c <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8003b7c:	2368      	movs	r3, #104	; 0x68
 8003b7e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003b82:	6018      	str	r0, [r3, #0]
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop

08003b88 <RCC_PLLSAIConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8003b88:	0712      	lsls	r2, r2, #28
 8003b8a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003b8e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8003b92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b96:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8003b9a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8003b9e:	4770      	bx	lr

08003ba0 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8003ba0:	2370      	movs	r3, #112	; 0x70
 8003ba2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003ba6:	6018      	str	r0, [r3, #0]
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop

08003bac <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8003bac:	234c      	movs	r3, #76	; 0x4c
 8003bae:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003bb2:	6018      	str	r0, [r3, #0]
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop

08003bb8 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8003bb8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003bbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003bc0:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8003bc2:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8003bc6:	4311      	orrs	r1, r2
 8003bc8:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8003bca:	6098      	str	r0, [r3, #8]
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop

08003bd0 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8003bd0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003bd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003bd8:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8003bda:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8003bde:	4311      	orrs	r1, r2
 8003be0:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8003be2:	6098      	str	r0, [r3, #8]
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop

08003be8 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8003be8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003bec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003bf0:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8003bf2:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8003bf6:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003bf8:	6098      	str	r0, [r3, #8]
 8003bfa:	4770      	bx	lr

08003bfc <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8003bfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003c00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c04:	6898      	ldr	r0, [r3, #8]
}
 8003c06:	f000 000c 	and.w	r0, r0, #12
 8003c0a:	4770      	bx	lr

08003c0c <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8003c0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003c10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c14:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8003c16:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8003c1a:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003c1c:	6098      	str	r0, [r3, #8]
 8003c1e:	4770      	bx	lr

08003c20 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8003c20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003c24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c28:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8003c2a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8003c2e:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003c30:	6098      	str	r0, [r3, #8]
 8003c32:	4770      	bx	lr

08003c34 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8003c34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c3c:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8003c3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8003c42:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003c46:	6098      	str	r0, [r3, #8]
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop

08003c4c <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003c4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003c50:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003c54:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8003c5c:	2a04      	cmp	r2, #4
 8003c5e:	d024      	beq.n	8003caa <RCC_GetClocksFreq+0x5e>
 8003c60:	2a08      	cmp	r2, #8
 8003c62:	d028      	beq.n	8003cb6 <RCC_GetClocksFreq+0x6a>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003c64:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8003c68:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8003c6c:	6001      	str	r1, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003c6e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c72:	f2c4 0202 	movt	r2, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8003c76:	f240 031c 	movw	r3, #28
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003c7a:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8003c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8003c80:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8003c84:	5d1c      	ldrb	r4, [r3, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003c86:	40e1      	lsrs	r1, r4
 8003c88:	6041      	str	r1, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8003c8a:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 8003c8c:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8003c90:	5d1c      	ldrb	r4, [r3, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003c92:	fa21 f404 	lsr.w	r4, r1, r4
 8003c96:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8003c98:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 8003c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 8003c9e:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 8003ca2:	5c9b      	ldrb	r3, [r3, r2]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003ca4:	40d9      	lsrs	r1, r3
 8003ca6:	60c1      	str	r1, [r0, #12]
}
 8003ca8:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003caa:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8003cae:	f2c0 017a 	movt	r1, #122	; 0x7a
 8003cb2:	6001      	str	r1, [r0, #0]
      break;
 8003cb4:	e7db      	b.n	8003c6e <RCC_GetClocksFreq+0x22>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003cb6:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb8:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8003cba:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003cbe:	685c      	ldr	r4, [r3, #4]
 8003cc0:	bf15      	itete	ne
 8003cc2:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003cc6:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003cca:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003cce:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003cd6:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003cda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003cde:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003ce2:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003cec:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003cee:	fb01 f104 	mul.w	r1, r1, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003cf2:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8003cf4:	fbb1 f1f3 	udiv	r1, r1, r3
 8003cf8:	6001      	str	r1, [r0, #0]
      break;
 8003cfa:	e7b8      	b.n	8003c6e <RCC_GetClocksFreq+0x22>

08003cfc <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8003cfc:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8003d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d04:	d10c      	bne.n	8003d20 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8003d06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d0a:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8003d0e:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8003d12:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8003d14:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8003d18:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8003d1c:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8003d1e:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8003d20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d28:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003d2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d2e:	4310      	orrs	r0, r2
 8003d30:	6718      	str	r0, [r3, #112]	; 0x70
 8003d32:	4770      	bx	lr

08003d34 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8003d34:	f640 633c 	movw	r3, #3644	; 0xe3c
 8003d38:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003d3c:	6018      	str	r0, [r3, #0]
 8003d3e:	4770      	bx	lr

08003d40 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8003d40:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8003d44:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003d48:	6018      	str	r0, [r3, #0]
 8003d4a:	4770      	bx	lr

08003d4c <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8003d4c:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8003d50:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003d54:	6018      	str	r0, [r3, #0]
 8003d56:	4770      	bx	lr

08003d58 <RCC_SAIPLLI2SClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8003d58:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d5c:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8003d60:	3801      	subs	r0, #1
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8003d62:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8003d66:	f022 021f 	bic.w	r2, r2, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8003d6a:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8003d6c:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop

08003d74 <RCC_SAIPLLSAIClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8003d74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d78:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8003d7c:	3801      	subs	r0, #1
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8003d7e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8003d82:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8003d86:	ea42 2000 	orr.w	r0, r2, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8003d8a:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8003d8e:	4770      	bx	lr

08003d90 <RCC_SAIBlockACLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8003d90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8003d9c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8003da0:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8003da2:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8003da6:	4770      	bx	lr

08003da8 <RCC_SAIBlockBCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8003da8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003dac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003db0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 8003db4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 8003db8:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8003dba:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8003dbe:	4770      	bx	lr

08003dc0 <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8003dc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8003dcc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8003dd0:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8003dd2:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8003dd6:	4770      	bx	lr

08003dd8 <RCC_TIMCLKPresConfig>:
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8003dd8:	f44f 538f 	mov.w	r3, #4576	; 0x11e0
 8003ddc:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003de0:	6018      	str	r0, [r3, #0]
 8003de2:	4770      	bx	lr

08003de4 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003de4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003de8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003dee:	b919      	cbnz	r1, 8003df8 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003df0:	ea22 0000 	bic.w	r0, r2, r0
 8003df4:	6318      	str	r0, [r3, #48]	; 0x30
 8003df6:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003df8:	4310      	orrs	r0, r2
 8003dfa:	6318      	str	r0, [r3, #48]	; 0x30
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop

08003e00 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8003e00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003e04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003e0a:	b919      	cbnz	r1, 8003e14 <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8003e0c:	ea22 0000 	bic.w	r0, r2, r0
 8003e10:	6358      	str	r0, [r3, #52]	; 0x34
 8003e12:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8003e14:	4310      	orrs	r0, r2
 8003e16:	6358      	str	r0, [r3, #52]	; 0x34
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop

08003e1c <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8003e1c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003e20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003e26:	b919      	cbnz	r1, 8003e30 <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8003e28:	ea22 0000 	bic.w	r0, r2, r0
 8003e2c:	6398      	str	r0, [r3, #56]	; 0x38
 8003e2e:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8003e30:	4310      	orrs	r0, r2
 8003e32:	6398      	str	r0, [r3, #56]	; 0x38
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop

08003e38 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003e38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003e3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003e42:	b919      	cbnz	r1, 8003e4c <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003e44:	ea22 0000 	bic.w	r0, r2, r0
 8003e48:	6418      	str	r0, [r3, #64]	; 0x40
 8003e4a:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003e4c:	4310      	orrs	r0, r2
 8003e4e:	6418      	str	r0, [r3, #64]	; 0x40
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop

08003e54 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003e54:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003e58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003e5e:	b919      	cbnz	r1, 8003e68 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003e60:	ea22 0000 	bic.w	r0, r2, r0
 8003e64:	6458      	str	r0, [r3, #68]	; 0x44
 8003e66:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003e68:	4310      	orrs	r0, r2
 8003e6a:	6458      	str	r0, [r3, #68]	; 0x44
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop

08003e70 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8003e70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003e74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e78:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003e7a:	b919      	cbnz	r1, 8003e84 <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8003e7c:	ea22 0000 	bic.w	r0, r2, r0
 8003e80:	6118      	str	r0, [r3, #16]
 8003e82:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8003e84:	4310      	orrs	r0, r2
 8003e86:	6118      	str	r0, [r3, #16]
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop

08003e8c <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8003e8c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003e94:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003e96:	b919      	cbnz	r1, 8003ea0 <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8003e98:	ea22 0000 	bic.w	r0, r2, r0
 8003e9c:	6158      	str	r0, [r3, #20]
 8003e9e:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8003ea0:	4310      	orrs	r0, r2
 8003ea2:	6158      	str	r0, [r3, #20]
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop

08003ea8 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8003ea8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003eac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003eb0:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003eb2:	b919      	cbnz	r1, 8003ebc <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8003eb4:	ea22 0000 	bic.w	r0, r2, r0
 8003eb8:	6198      	str	r0, [r3, #24]
 8003eba:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8003ebc:	4310      	orrs	r0, r2
 8003ebe:	6198      	str	r0, [r3, #24]
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop

08003ec4 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003ec4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003ec8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ecc:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003ece:	b919      	cbnz	r1, 8003ed8 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8003ed0:	ea22 0000 	bic.w	r0, r2, r0
 8003ed4:	6218      	str	r0, [r3, #32]
 8003ed6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003ed8:	4310      	orrs	r0, r2
 8003eda:	6218      	str	r0, [r3, #32]
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop

08003ee0 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8003ee0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003ee4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003eea:	b919      	cbnz	r1, 8003ef4 <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8003eec:	ea22 0000 	bic.w	r0, r2, r0
 8003ef0:	6258      	str	r0, [r3, #36]	; 0x24
 8003ef2:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8003ef4:	4310      	orrs	r0, r2
 8003ef6:	6258      	str	r0, [r3, #36]	; 0x24
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop

08003efc <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8003efc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003f06:	b919      	cbnz	r1, 8003f10 <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8003f08:	ea22 0000 	bic.w	r0, r2, r0
 8003f0c:	6518      	str	r0, [r3, #80]	; 0x50
 8003f0e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8003f10:	4310      	orrs	r0, r2
 8003f12:	6518      	str	r0, [r3, #80]	; 0x50
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop

08003f18 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8003f18:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003f22:	b919      	cbnz	r1, 8003f2c <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8003f24:	ea22 0000 	bic.w	r0, r2, r0
 8003f28:	6558      	str	r0, [r3, #84]	; 0x54
 8003f2a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8003f2c:	4310      	orrs	r0, r2
 8003f2e:	6558      	str	r0, [r3, #84]	; 0x54
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop

08003f34 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8003f34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003f3e:	b919      	cbnz	r1, 8003f48 <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8003f40:	ea22 0000 	bic.w	r0, r2, r0
 8003f44:	6598      	str	r0, [r3, #88]	; 0x58
 8003f46:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8003f48:	4310      	orrs	r0, r2
 8003f4a:	6598      	str	r0, [r3, #88]	; 0x58
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop

08003f50 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8003f50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003f5a:	b919      	cbnz	r1, 8003f64 <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8003f5c:	ea22 0000 	bic.w	r0, r2, r0
 8003f60:	6618      	str	r0, [r3, #96]	; 0x60
 8003f62:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8003f64:	4310      	orrs	r0, r2
 8003f66:	6618      	str	r0, [r3, #96]	; 0x60
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop

08003f6c <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8003f6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003f76:	b919      	cbnz	r1, 8003f80 <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8003f78:	ea22 0000 	bic.w	r0, r2, r0
 8003f7c:	6658      	str	r0, [r3, #100]	; 0x64
 8003f7e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8003f80:	4310      	orrs	r0, r2
 8003f82:	6658      	str	r0, [r3, #100]	; 0x64
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop

08003f88 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8003f88:	f643 030d 	movw	r3, #14349	; 0x380d
 8003f8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f90:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003f92:	b919      	cbnz	r1, 8003f9c <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8003f94:	ea22 0000 	bic.w	r0, r2, r0
 8003f98:	7018      	strb	r0, [r3, #0]
 8003f9a:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8003f9c:	4310      	orrs	r0, r2
 8003f9e:	7018      	strb	r0, [r3, #0]
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop

08003fa4 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8003fa4:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d00e      	beq.n	8003fc8 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8003faa:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8003fac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8003fb4:	f000 001f 	and.w	r0, r0, #31
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 8003fb8:	bf0c      	ite	eq
 8003fba:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8003fbc:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8003fbe:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003fc2:	f000 0001 	and.w	r0, r0, #1
 8003fc6:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8003fc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8003fd0:	f000 001f 	and.w	r0, r0, #31

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8003fd4:	681b      	ldr	r3, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8003fd6:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003fda:	f000 0001 	and.w	r0, r0, #1
 8003fde:	4770      	bx	lr

08003fe0 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8003fe0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fe4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003fe8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003fea:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003fee:	675a      	str	r2, [r3, #116]	; 0x74
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop

08003ff4 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8003ff4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003ff8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8004000:	bf0c      	ite	eq
 8004002:	2000      	moveq	r0, #0
 8004004:	2001      	movne	r0, #1
 8004006:	4770      	bx	lr

08004008 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8004008:	f643 030e 	movw	r3, #14350	; 0x380e
 800400c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004010:	7018      	strb	r0, [r3, #0]
 8004012:	4770      	bx	lr

08004014 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8004014:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8004016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800401a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800401e:	4298      	cmp	r0, r3
 8004020:	d036      	beq.n	8004090 <USART_DeInit+0x7c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8004022:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8004026:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800402a:	4298      	cmp	r0, r3
 800402c:	d03a      	beq.n	80040a4 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 800402e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8004032:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004036:	4298      	cmp	r0, r3
 8004038:	d040      	beq.n	80040bc <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 800403a:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800403e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004042:	4298      	cmp	r0, r3
 8004044:	d046      	beq.n	80040d4 <USART_DeInit+0xc0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8004046:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800404a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800404e:	4298      	cmp	r0, r3
 8004050:	d04c      	beq.n	80040ec <USART_DeInit+0xd8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
 8004052:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004056:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800405a:	4298      	cmp	r0, r3
 800405c:	d052      	beq.n	8004104 <USART_DeInit+0xf0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
 800405e:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8004062:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004066:	4298      	cmp	r0, r3
 8004068:	d056      	beq.n	8004118 <USART_DeInit+0x104>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
  }     
  else
  {
    if (USARTx == UART8)
 800406a:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800406e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004072:	4298      	cmp	r0, r3
 8004074:	d000      	beq.n	8004078 <USART_DeInit+0x64>
 8004076:	bd08      	pop	{r3, pc}
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8004078:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800407c:	2101      	movs	r1, #1
 800407e:	f7ff ff21 	bl	8003ec4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8004082:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004086:	2100      	movs	r1, #0
    }
  }
}
 8004088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART8)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 800408c:	f7ff bf1a 	b.w	8003ec4 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8004090:	2010      	movs	r0, #16
 8004092:	2101      	movs	r1, #1
 8004094:	f7ff ff24 	bl	8003ee0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8004098:	2010      	movs	r0, #16
 800409a:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800409c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80040a0:	f7ff bf1e 	b.w	8003ee0 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80040a4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80040a8:	2101      	movs	r1, #1
 80040aa:	f7ff ff0b 	bl	8003ec4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80040ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80040b2:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 80040b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80040b8:	f7ff bf04 	b.w	8003ec4 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80040bc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80040c0:	2101      	movs	r1, #1
 80040c2:	f7ff feff 	bl	8003ec4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80040c6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80040ca:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 80040cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80040d0:	f7ff bef8 	b.w	8003ec4 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80040d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80040d8:	2101      	movs	r1, #1
 80040da:	f7ff fef3 	bl	8003ec4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80040de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80040e2:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 80040e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80040e8:	f7ff beec 	b.w	8003ec4 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80040ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80040f0:	2101      	movs	r1, #1
 80040f2:	f7ff fee7 	bl	8003ec4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80040f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80040fa:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 80040fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8004100:	f7ff bee0 	b.w	8003ec4 <RCC_APB1PeriphResetCmd>
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8004104:	2020      	movs	r0, #32
 8004106:	2101      	movs	r1, #1
 8004108:	f7ff feea 	bl	8003ee0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800410c:	2020      	movs	r0, #32
 800410e:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8004110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8004114:	f7ff bee4 	b.w	8003ee0 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8004118:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800411c:	2101      	movs	r1, #1
 800411e:	f7ff fed1 	bl	8003ec4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8004122:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004126:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8004128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 800412c:	f7ff beca 	b.w	8003ec4 <RCC_APB1PeriphResetCmd>

08004130 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004130:	8a02      	ldrh	r2, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8004132:	88cb      	ldrh	r3, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8004134:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004138:	0412      	lsls	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800413a:	b5f0      	push	{r4, r5, r6, r7, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800413c:	0c12      	lsrs	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800413e:	4604      	mov	r4, r0
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8004140:	431a      	orrs	r2, r3

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8004142:	890f      	ldrh	r7, [r1, #8]
 8004144:	888e      	ldrh	r6, [r1, #4]
 8004146:	8948      	ldrh	r0, [r1, #10]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004148:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800414a:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800414c:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800414e:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8004150:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8004154:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8004158:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800415c:	4302      	orrs	r2, r0

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800415e:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8004160:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8004162:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8004164:	4313      	orrs	r3, r2
 8004166:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8004168:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	0c1b      	lsrs	r3, r3, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004172:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8004174:	430b      	orrs	r3, r1
 8004176:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8004178:	4668      	mov	r0, sp
 800417a:	f7ff fd67 	bl	8003c4c <RCC_GetClocksFreq>
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800417e:	89a6      	ldrh	r6, [r4, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8004180:	9802      	ldr	r0, [sp, #8]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8004182:	9b03      	ldr	r3, [sp, #12]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
 8004184:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8004188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800418c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004190:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004194:	4294      	cmp	r4, r2
 8004196:	bf18      	it	ne
 8004198:	428c      	cmpne	r4, r1
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800419a:	b232      	sxth	r2, r6
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800419c:	bf18      	it	ne
 800419e:	4603      	movne	r3, r0
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80041a0:	2a00      	cmp	r2, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80041a2:	682a      	ldr	r2, [r5, #0]

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80041a4:	89a0      	ldrh	r0, [r4, #12]
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80041a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80041aa:	bfb4      	ite	lt
 80041ac:	0052      	lsllt	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80041ae:	0092      	lslge	r2, r2, #2
 80041b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80041b4:	fbb3 f3f2 	udiv	r3, r3, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 80041b8:	f248 521f 	movw	r2, #34079	; 0x851f
 80041bc:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 80041c0:	fba2 5103 	umull	r5, r1, r2, r3

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80041c4:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80041c6:	2564      	movs	r5, #100	; 0x64
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 80041c8:	0949      	lsrs	r1, r1, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80041ca:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80041cc:	fb01 3315 	mls	r3, r1, r5, r3

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80041d0:	bfb5      	itete	lt
 80041d2:	00db      	lsllt	r3, r3, #3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80041d4:	011b      	lslge	r3, r3, #4
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80041d6:	3332      	addlt	r3, #50	; 0x32
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80041d8:	3332      	addge	r3, #50	; 0x32
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80041da:	bfb5      	itete	lt
 80041dc:	fba2 0203 	umulllt	r0, r2, r2, r3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80041e0:	fba2 5203 	umullge	r5, r2, r2, r3
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80041e4:	f3c2 1242 	ubfxlt	r2, r2, #5, #3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80041e8:	f3c2 1243 	ubfxge	r2, r2, #5, #4
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80041ec:	0109      	lsls	r1, r1, #4
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80041ee:	4311      	orrs	r1, r2
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80041f0:	b289      	uxth	r1, r1
 80041f2:	8121      	strh	r1, [r4, #8]
}
 80041f4:	b005      	add	sp, #20
 80041f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041f8 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80041f8:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80041fa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80041fe:	220c      	movs	r2, #12
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8004200:	6001      	str	r1, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004202:	8142      	strh	r2, [r0, #10]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8004204:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8004206:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8004208:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800420a:	8183      	strh	r3, [r0, #12]
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop

08004210 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8004210:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8004212:	880a      	ldrh	r2, [r1, #0]
 8004214:	884d      	ldrh	r5, [r1, #2]
 8004216:	888c      	ldrh	r4, [r1, #4]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004218:	8a03      	ldrh	r3, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800421a:	88c9      	ldrh	r1, [r1, #6]
 800421c:	432a      	orrs	r2, r5
 800421e:	4322      	orrs	r2, r4
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8004220:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8004224:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8004226:	041b      	lsls	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8004228:	b292      	uxth	r2, r2
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800422a:	0c1b      	lsrs	r3, r3, #16
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800422c:	4313      	orrs	r3, r2
 800422e:	8203      	strh	r3, [r0, #16]
}
 8004230:	bc30      	pop	{r4, r5}
 8004232:	4770      	bx	lr

08004234 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8004234:	2300      	movs	r3, #0
 8004236:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8004238:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800423a:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800423c:	80c3      	strh	r3, [r0, #6]
 800423e:	4770      	bx	lr

08004240 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8004240:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004242:	b929      	cbnz	r1, 8004250 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8004244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	0c1b      	lsrs	r3, r3, #16
 800424c:	8183      	strh	r3, [r0, #12]
 800424e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8004250:	b29b      	uxth	r3, r3
 8004252:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004256:	8183      	strh	r3, [r0, #12]
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop

0800425c <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800425c:	8b03      	ldrh	r3, [r0, #24]
 800425e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004262:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8004264:	8b03      	ldrh	r3, [r0, #24]
 8004266:	b29b      	uxth	r3, r3
 8004268:	4319      	orrs	r1, r3
 800426a:	8301      	strh	r1, [r0, #24]
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8004270:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004272:	b919      	cbnz	r1, 800427c <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8004274:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004278:	8183      	strh	r3, [r0, #12]
 800427a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800427c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004284:	b29b      	uxth	r3, r3
 8004286:	8183      	strh	r3, [r0, #12]
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop

0800428c <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800428c:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800428e:	b929      	cbnz	r1, 800429c <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8004290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004294:	041b      	lsls	r3, r3, #16
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	8283      	strh	r3, [r0, #20]
 800429a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800429c:	b29b      	uxth	r3, r3
 800429e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042a2:	8283      	strh	r3, [r0, #20]
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop

080042a8 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80042a8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80042ac:	8081      	strh	r1, [r0, #4]
 80042ae:	4770      	bx	lr

080042b0 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80042b0:	8880      	ldrh	r0, [r0, #4]
}
 80042b2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80042b6:	4770      	bx	lr

080042b8 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80042b8:	8a03      	ldrh	r3, [r0, #16]
 80042ba:	f023 030f 	bic.w	r3, r3, #15
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80042c4:	8a03      	ldrh	r3, [r0, #16]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	4319      	orrs	r1, r3
 80042ca:	8201      	strh	r1, [r0, #16]
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop

080042d0 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80042d0:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80042d2:	b929      	cbnz	r1, 80042e0 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80042d4:	f023 0302 	bic.w	r3, r3, #2
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	8183      	strh	r3, [r0, #12]
 80042de:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f043 0302 	orr.w	r3, r3, #2
 80042e6:	8183      	strh	r3, [r0, #12]
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop

080042ec <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 80042ec:	8983      	ldrh	r3, [r0, #12]
 80042ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	0c1b      	lsrs	r3, r3, #16
 80042f6:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 80042f8:	8983      	ldrh	r3, [r0, #12]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	4319      	orrs	r1, r3
 80042fe:	8181      	strh	r1, [r0, #12]
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop

08004304 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8004304:	8a03      	ldrh	r3, [r0, #16]
 8004306:	f023 0320 	bic.w	r3, r3, #32
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	0c1b      	lsrs	r3, r3, #16
 800430e:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8004310:	8a03      	ldrh	r3, [r0, #16]
 8004312:	b29b      	uxth	r3, r3
 8004314:	4319      	orrs	r1, r3
 8004316:	8201      	strh	r1, [r0, #16]
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop

0800431c <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800431c:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800431e:	b929      	cbnz	r1, 800432c <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8004320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	0c1b      	lsrs	r3, r3, #16
 8004328:	8203      	strh	r3, [r0, #16]
 800432a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800432c:	b29b      	uxth	r3, r3
 800432e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004332:	8203      	strh	r3, [r0, #16]
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop

08004338 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8004338:	8983      	ldrh	r3, [r0, #12]
 800433a:	b29b      	uxth	r3, r3
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	8183      	strh	r3, [r0, #12]
 8004342:	4770      	bx	lr

08004344 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8004344:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004346:	b929      	cbnz	r1, 8004354 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8004348:	f023 0308 	bic.w	r3, r3, #8
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	8283      	strh	r3, [r0, #20]
 8004352:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8004354:	b29b      	uxth	r3, r3
 8004356:	f043 0308 	orr.w	r3, r3, #8
 800435a:	8283      	strh	r3, [r0, #20]
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop

08004360 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8004360:	8b03      	ldrh	r3, [r0, #24]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8004366:	8b03      	ldrh	r3, [r0, #24]
 8004368:	b29b      	uxth	r3, r3
 800436a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800436e:	8301      	strh	r1, [r0, #24]
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop

08004374 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8004374:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004376:	b929      	cbnz	r1, 8004384 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8004378:	f023 0320 	bic.w	r3, r3, #32
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	0c1b      	lsrs	r3, r3, #16
 8004380:	8283      	strh	r3, [r0, #20]
 8004382:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8004384:	b29b      	uxth	r3, r3
 8004386:	f043 0320 	orr.w	r3, r3, #32
 800438a:	8283      	strh	r3, [r0, #20]
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop

08004390 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8004390:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004392:	b929      	cbnz	r1, 80043a0 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8004394:	f023 0310 	bic.w	r3, r3, #16
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	0c1b      	lsrs	r3, r3, #16
 800439c:	8283      	strh	r3, [r0, #20]
 800439e:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f043 0310 	orr.w	r3, r3, #16
 80043a6:	8283      	strh	r3, [r0, #20]
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop

080043ac <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80043ac:	8a83      	ldrh	r3, [r0, #20]
 80043ae:	f023 0304 	bic.w	r3, r3, #4
 80043b2:	041b      	lsls	r3, r3, #16
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80043b8:	8a83      	ldrh	r3, [r0, #20]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	4319      	orrs	r1, r3
 80043be:	8281      	strh	r1, [r0, #20]
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop

080043c4 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80043c4:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80043c6:	b929      	cbnz	r1, 80043d4 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80043c8:	f023 0302 	bic.w	r3, r3, #2
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	0c1b      	lsrs	r3, r3, #16
 80043d0:	8283      	strh	r3, [r0, #20]
 80043d2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f043 0302 	orr.w	r3, r3, #2
 80043da:	8283      	strh	r3, [r0, #20]
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop

080043e0 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80043e0:	8a83      	ldrh	r3, [r0, #20]
 80043e2:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80043e4:	b91a      	cbnz	r2, 80043ee <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80043e6:	ea23 0101 	bic.w	r1, r3, r1
 80043ea:	8281      	strh	r1, [r0, #20]
 80043ec:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80043ee:	4319      	orrs	r1, r3
 80043f0:	8281      	strh	r1, [r0, #20]
 80043f2:	4770      	bx	lr

080043f4 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80043f4:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80043f8:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80043fa:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80043fe:	2401      	movs	r4, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8004400:	42a1      	cmp	r1, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8004402:	fa04 f303 	lsl.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8004406:	bf08      	it	eq
 8004408:	300c      	addeq	r0, #12

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800440a:	d003      	beq.n	8004414 <USART_ITConfig+0x20>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800440c:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 800440e:	bf0c      	ite	eq
 8004410:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8004412:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8004414:	6804      	ldr	r4, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8004416:	b92a      	cbnz	r2, 8004424 <USART_ITConfig+0x30>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8004418:	ea24 0303 	bic.w	r3, r4, r3
 800441c:	6003      	str	r3, [r0, #0]
  }
}
 800441e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004422:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8004424:	4323      	orrs	r3, r4
 8004426:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8004428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop

08004430 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8004430:	8803      	ldrh	r3, [r0, #0]
 8004432:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004434:	bf0c      	ite	eq
 8004436:	2000      	moveq	r0, #0
 8004438:	2001      	movne	r0, #1
 800443a:	4770      	bx	lr

0800443c <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800443c:	43c9      	mvns	r1, r1
 800443e:	b289      	uxth	r1, r1
 8004440:	8001      	strh	r1, [r0, #0]
 8004442:	4770      	bx	lr

08004444 <USART_GetITStatus>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8004444:	f3c1 1342 	ubfx	r3, r1, #5, #3
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8004448:	b430      	push	{r4, r5}
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800444a:	f001 021f 	and.w	r2, r1, #31
 800444e:	2401      	movs	r4, #1
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8004450:	2b01      	cmp	r3, #1
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8004452:	fa04 f402 	lsl.w	r4, r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8004456:	d016      	beq.n	8004486 <USART_GetITStatus+0x42>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8004458:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 800445a:	bf0c      	ite	eq
 800445c:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800445e:	8a82      	ldrhne	r2, [r0, #20]
 8004460:	b292      	uxth	r2, r2
 8004462:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8004464:	8803      	ldrh	r3, [r0, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8004466:	2501      	movs	r5, #1
 8004468:	0a09      	lsrs	r1, r1, #8
 800446a:	fa05 f101 	lsl.w	r1, r5, r1
  bitpos &= USARTx->SR;
 800446e:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8004470:	4219      	tst	r1, r3
 8004472:	bf0c      	ite	eq
 8004474:	2000      	moveq	r0, #0
 8004476:	2001      	movne	r0, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8004478:	2a00      	cmp	r2, #0
 800447a:	bf0c      	ite	eq
 800447c:	2000      	moveq	r0, #0
 800447e:	f000 0001 	andne.w	r0, r0, #1
 8004482:	bc30      	pop	{r4, r5}
 8004484:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8004486:	8982      	ldrh	r2, [r0, #12]
 8004488:	b292      	uxth	r2, r2
 800448a:	4022      	ands	r2, r4
 800448c:	e7ea      	b.n	8004464 <USART_GetITStatus+0x20>
 800448e:	bf00      	nop

08004490 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8004490:	0a09      	lsrs	r1, r1, #8
 8004492:	2301      	movs	r3, #1
 8004494:	fa03 f101 	lsl.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8004498:	43c9      	mvns	r1, r1
 800449a:	b289      	uxth	r1, r1
 800449c:	8001      	strh	r1, [r0, #0]
 800449e:	4770      	bx	lr

080044a0 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80044a0:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80044a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80044a6:	2101      	movs	r1, #1
 80044a8:	f7ff fd1a 	bl	8003ee0 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80044ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80044b0:	2100      	movs	r1, #0
}
 80044b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80044b6:	f7ff bd13 	b.w	8003ee0 <RCC_APB2PeriphResetCmd>
 80044ba:	bf00      	nop

080044bc <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 80044bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80044c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80044c4:	6018      	str	r0, [r3, #0]
 80044c6:	4770      	bx	lr

080044c8 <SYSCFG_MemorySwappingBank>:
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 80044c8:	2320      	movs	r3, #32
 80044ca:	f2c4 2327 	movt	r3, #16935	; 0x4227
 80044ce:	6018      	str	r0, [r3, #0]
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop

080044d4 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80044d4:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 80044d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044dc:	f503 339c 	add.w	r3, r3, #79872	; 0x13800

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80044e0:	f001 0103 	and.w	r1, r1, #3
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80044e4:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80044e6:	0089      	lsls	r1, r1, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80044e8:	689c      	ldr	r4, [r3, #8]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80044ea:	220f      	movs	r2, #15
 80044ec:	408a      	lsls	r2, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80044ee:	ea24 0202 	bic.w	r2, r4, r2
 80044f2:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80044f4:	689a      	ldr	r2, [r3, #8]
}
 80044f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80044fa:	4088      	lsls	r0, r1
 80044fc:	4302      	orrs	r2, r0
 80044fe:	609a      	str	r2, [r3, #8]
}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop

08004504 <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8004504:	23dc      	movs	r3, #220	; 0xdc
 8004506:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800450a:	6018      	str	r0, [r3, #0]
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop

08004510 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8004510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004514:	f2c4 2327 	movt	r3, #16935	; 0x4227
 8004518:	6018      	str	r0, [r3, #0]
 800451a:	4770      	bx	lr

0800451c <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800451c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004520:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004524:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004526:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800452a:	4770      	bx	lr

0800452c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800452c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800452e:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8004532:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004536:	4298      	cmp	r0, r3
 8004538:	d018      	beq.n	800456c <I2C_DeInit+0x40>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 800453a:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800453e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004542:	4298      	cmp	r0, r3
 8004544:	d01e      	beq.n	8004584 <I2C_DeInit+0x58>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 8004546:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800454a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800454e:	4298      	cmp	r0, r3
 8004550:	d000      	beq.n	8004554 <I2C_DeInit+0x28>
 8004552:	bd08      	pop	{r3, pc}
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8004554:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004558:	2101      	movs	r1, #1
 800455a:	f7ff fcb3 	bl	8003ec4 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800455e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004562:	2100      	movs	r1, #0
    }
  }
}
 8004564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8004568:	f7ff bcac 	b.w	8003ec4 <RCC_APB1PeriphResetCmd>
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800456c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004570:	2101      	movs	r1, #1
 8004572:	f7ff fca7 	bl	8003ec4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8004576:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800457a:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800457c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8004580:	f7ff bca0 	b.w	8003ec4 <RCC_APB1PeriphResetCmd>
  }
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8004584:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004588:	2101      	movs	r1, #1
 800458a:	f7ff fc9b 	bl	8003ec4 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800458e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004592:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8004594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8004598:	f7ff bc94 	b.w	8003ec4 <RCC_APB1PeriphResetCmd>

0800459c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800459c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800459e:	4604      	mov	r4, r0
 80045a0:	b085      	sub	sp, #20
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80045a2:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80045a4:	460d      	mov	r5, r1
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80045a6:	88a6      	ldrh	r6, [r4, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80045a8:	f7ff fb50 	bl	8003c4c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80045ac:	f64d 6383 	movw	r3, #56963	; 0xde83
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80045b0:	9902      	ldr	r1, [sp, #8]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80045b2:	682a      	ldr	r2, [r5, #0]
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80045b4:	f2c4 331b 	movt	r3, #17179	; 0x431b
 80045b8:	fba3 0301 	umull	r0, r3, r3, r1

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80045bc:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80045c0:	0c9f      	lsrs	r7, r3, #18

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80045c2:	0436      	lsls	r6, r6, #16
 80045c4:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80045c6:	fa1f fc87 	uxth.w	ip, r7
  tmpreg |= freqrange;
 80045ca:	ea4c 0606 	orr.w	r6, ip, r6
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80045ce:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80045d0:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80045d2:	f248 60a0 	movw	r0, #34464	; 0x86a0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	041b      	lsls	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80045dc:	f2c0 0001 	movt	r0, #1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80045e0:	0c1b      	lsrs	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80045e2:	4282      	cmp	r2, r0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80045e4:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80045e6:	d824      	bhi.n	8004632 <I2C_Init+0x96>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80045e8:	0053      	lsls	r3, r2, #1
 80045ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ee:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80045f0:	f10c 0c01 	add.w	ip, ip, #1
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	bf98      	it	ls
 80045f8:	2304      	movls	r3, #4
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80045fa:	f8a4 c020 	strh.w	ip, [r4, #32]
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80045fe:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8004600:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004602:	896e      	ldrh	r6, [r5, #10]
 8004604:	88a8      	ldrh	r0, [r5, #4]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8004606:	8929      	ldrh	r1, [r5, #8]
 8004608:	89aa      	ldrh	r2, [r5, #12]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800460a:	b29b      	uxth	r3, r3
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8004612:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004614:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8004618:	f023 0302 	bic.w	r3, r3, #2
 800461c:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800461e:	4330      	orrs	r0, r6

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004620:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004622:	4303      	orrs	r3, r0
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8004624:	430a      	orrs	r2, r1
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004626:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8004628:	b292      	uxth	r2, r2
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800462a:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800462c:	8122      	strh	r2, [r4, #8]
}
 800462e:	b005      	add	sp, #20
 8004630:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8004632:	88e8      	ldrh	r0, [r5, #6]
 8004634:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8004638:	4298      	cmp	r0, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800463a:	bf1d      	ittte	ne
 800463c:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 8004640:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 8004644:	fbb1 f3f2 	udivne	r3, r1, r2
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8004648:	eb02 0242 	addeq.w	r2, r2, r2, lsl #1
 800464c:	bf0b      	itete	eq
 800464e:	fbb1 f3f2 	udiveq	r3, r1, r2
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8004652:	b29b      	uxthne	r3, r3
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8004654:	b29b      	uxtheq	r3, r3
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8004656:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800465a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800465e:	b90a      	cbnz	r2, 8004664 <I2C_Init+0xc8>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8004660:	f043 0301 	orr.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8004664:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004668:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 800466c:	fb01 f707 	mul.w	r7, r1, r7
 8004670:	f2c1 0262 	movt	r2, #4194	; 0x1062
 8004674:	fb82 1207 	smull	r1, r2, r2, r7
 8004678:	0992      	lsrs	r2, r2, #6
 800467a:	3201      	adds	r2, #1
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800467c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8004680:	8422      	strh	r2, [r4, #32]
 8004682:	e7bc      	b.n	80045fe <I2C_Init+0x62>

08004684 <I2C_StructInit>:
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8004684:	2300      	movs	r3, #0
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8004686:	b410      	push	{r4}
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8004688:	f64b 71ff 	movw	r1, #49151	; 0xbfff
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800468c:	f241 3488 	movw	r4, #5000	; 0x1388
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8004690:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8004694:	6004      	str	r4, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8004696:	80c1      	strh	r1, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8004698:	8182      	strh	r2, [r0, #12]
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800469a:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800469c:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800469e:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
}
 80046a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop

080046a8 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80046a8:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80046aa:	b929      	cbnz	r1, 80046b8 <I2C_Cmd+0x10>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	041b      	lsls	r3, r3, #16
 80046b2:	0c1b      	lsrs	r3, r3, #16
 80046b4:	8003      	strh	r3, [r0, #0]
 80046b6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	8003      	strh	r3, [r0, #0]
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop

080046c4 <I2C_AnalogFilterCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 80046c4:	8c83      	ldrh	r3, [r0, #36]	; 0x24
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80046c6:	b921      	cbnz	r1, 80046d2 <I2C_AnalogFilterCmd+0xe>
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
  }
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f043 0310 	orr.w	r3, r3, #16
 80046ce:	8483      	strh	r3, [r0, #36]	; 0x24
 80046d0:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 80046d2:	f023 0310 	bic.w	r3, r3, #16
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	0c1b      	lsrs	r3, r3, #16
 80046da:	8483      	strh	r3, [r0, #36]	; 0x24
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop

080046e0 <I2C_DigitalFilterConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 80046e0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 80046e2:	f023 030f 	bic.w	r3, r3, #15
 80046e6:	041b      	lsls	r3, r3, #16
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 80046e8:	f001 010f 	and.w	r1, r1, #15
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 80046ec:	0c1b      	lsrs	r3, r3, #16
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 80046ee:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 80046f0:	8483      	strh	r3, [r0, #36]	; 0x24
 80046f2:	4770      	bx	lr

080046f4 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80046f4:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80046f6:	b929      	cbnz	r1, 8004704 <I2C_GenerateSTART+0x10>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80046f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	0c1b      	lsrs	r3, r3, #16
 8004700:	8003      	strh	r3, [r0, #0]
 8004702:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8004704:	b29b      	uxth	r3, r3
 8004706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470a:	8003      	strh	r3, [r0, #0]
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop

08004710 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8004710:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004712:	b929      	cbnz	r1, 8004720 <I2C_GenerateSTOP+0x10>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8004714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	0c1b      	lsrs	r3, r3, #16
 800471c:	8003      	strh	r3, [r0, #0]
 800471e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8004720:	b29b      	uxth	r3, r3
 8004722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004726:	8003      	strh	r3, [r0, #0]
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop

0800472c <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800472c:	b91a      	cbnz	r2, 8004736 <I2C_Send7bitAddress+0xa>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800472e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8004732:	8201      	strh	r1, [r0, #16]
 8004734:	4770      	bx	lr
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8004736:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 800473a:	8201      	strh	r1, [r0, #16]
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop

08004740 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8004740:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004742:	b929      	cbnz	r1, 8004750 <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8004744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	0c1b      	lsrs	r3, r3, #16
 800474c:	8003      	strh	r3, [r0, #0]
 800474e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8004750:	b29b      	uxth	r3, r3
 8004752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004756:	8003      	strh	r3, [r0, #0]
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop

0800475c <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800475c:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800475e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004762:	041b      	lsls	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8004764:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8004768:	0c1b      	lsrs	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800476a:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800476c:	8183      	strh	r3, [r0, #12]
 800476e:	4770      	bx	lr

08004770 <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8004770:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004772:	b929      	cbnz	r1, 8004780 <I2C_DualAddressCmd+0x10>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8004774:	f023 0301 	bic.w	r3, r3, #1
 8004778:	041b      	lsls	r3, r3, #16
 800477a:	0c1b      	lsrs	r3, r3, #16
 800477c:	8183      	strh	r3, [r0, #12]
 800477e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8004780:	b29b      	uxth	r3, r3
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	8183      	strh	r3, [r0, #12]
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop

0800478c <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800478c:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800478e:	b929      	cbnz	r1, 800479c <I2C_GeneralCallCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENGC;
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8004790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	8003      	strh	r3, [r0, #0]
 800479a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800479c:	b29b      	uxth	r3, r3
 800479e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a2:	8003      	strh	r3, [r0, #0]
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop

080047a8 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80047a8:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80047aa:	b919      	cbnz	r1, 80047b4 <I2C_SoftwareResetCmd+0xc>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80047ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80047b0:	8003      	strh	r3, [r0, #0]
 80047b2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80047b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047bc:	b29b      	uxth	r3, r3
 80047be:	8003      	strh	r3, [r0, #0]
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop

080047c4 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80047c4:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80047c6:	b129      	cbz	r1, 80047d4 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80047c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047cc:	041b      	lsls	r3, r3, #16
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	8003      	strh	r3, [r0, #0]
 80047d2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047da:	8003      	strh	r3, [r0, #0]
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop

080047e0 <I2C_FastModeDutyCycleConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80047e0:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80047e2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80047e6:	bf1b      	ittet	ne
 80047e8:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 80047ec:	041b      	lslne	r3, r3, #16
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80047ee:	b29b      	uxtheq	r3, r3
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80047f0:	0c1b      	lsrne	r3, r3, #16
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80047f2:	bf08      	it	eq
 80047f4:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 80047f8:	8383      	strh	r3, [r0, #28]
 80047fa:	4770      	bx	lr

080047fc <I2C_NACKPositionConfig>:
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80047fc:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80047fe:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8004802:	bf15      	itete	ne
 8004804:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8004808:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800480a:	041b      	lslne	r3, r3, #16
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800480c:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8004810:	bf18      	it	ne
 8004812:	0c1b      	lsrne	r3, r3, #16
 8004814:	8003      	strh	r3, [r0, #0]
 8004816:	4770      	bx	lr

08004818 <I2C_SMBusAlertConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8004818:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800481a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800481e:	bf15      	itete	ne
 8004820:	f423 5300 	bicne.w	r3, r3, #8192	; 0x2000
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8004824:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8004826:	041b      	lslne	r3, r3, #16
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8004828:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800482c:	bf18      	it	ne
 800482e:	0c1b      	lsrne	r3, r3, #16
 8004830:	8003      	strh	r3, [r0, #0]
 8004832:	4770      	bx	lr

08004834 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8004834:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004836:	b929      	cbnz	r1, 8004844 <I2C_ARPCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENARP;
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8004838:	f023 0310 	bic.w	r3, r3, #16
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	0c1b      	lsrs	r3, r3, #16
 8004840:	8003      	strh	r3, [r0, #0]
 8004842:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8004844:	b29b      	uxth	r3, r3
 8004846:	f043 0310 	orr.w	r3, r3, #16
 800484a:	8003      	strh	r3, [r0, #0]
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop

08004850 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8004850:	8201      	strh	r1, [r0, #16]
 8004852:	4770      	bx	lr

08004854 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8004854:	8a00      	ldrh	r0, [r0, #16]
}
 8004856:	b2c0      	uxtb	r0, r0
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop

0800485c <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800485c:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800485e:	b929      	cbnz	r1, 800486c <I2C_TransmitPEC+0x10>
    I2Cx->CR1 |= I2C_CR1_PEC;
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8004860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004864:	041b      	lsls	r3, r3, #16
 8004866:	0c1b      	lsrs	r3, r3, #16
 8004868:	8003      	strh	r3, [r0, #0]
 800486a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800486c:	b29b      	uxth	r3, r3
 800486e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004872:	8003      	strh	r3, [r0, #0]
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop

08004878 <I2C_PECPositionConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8004878:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800487a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800487e:	bf15      	itete	ne
 8004880:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8004884:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8004886:	041b      	lslne	r3, r3, #16
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8004888:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800488c:	bf18      	it	ne
 800488e:	0c1b      	lsrne	r3, r3, #16
 8004890:	8003      	strh	r3, [r0, #0]
 8004892:	4770      	bx	lr

08004894 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8004894:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004896:	b929      	cbnz	r1, 80048a4 <I2C_CalculatePEC+0x10>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8004898:	f023 0320 	bic.w	r3, r3, #32
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	0c1b      	lsrs	r3, r3, #16
 80048a0:	8003      	strh	r3, [r0, #0]
 80048a2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f043 0320 	orr.w	r3, r3, #32
 80048aa:	8003      	strh	r3, [r0, #0]
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop

080048b0 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80048b0:	8b00      	ldrh	r0, [r0, #24]
}
 80048b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80048b6:	4770      	bx	lr

080048b8 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80048b8:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80048ba:	b929      	cbnz	r1, 80048c8 <I2C_DMACmd+0x10>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80048bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	0c1b      	lsrs	r3, r3, #16
 80048c4:	8083      	strh	r3, [r0, #4]
 80048c6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048ce:	8083      	strh	r3, [r0, #4]
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop

080048d4 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80048d4:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80048d6:	b929      	cbnz	r1, 80048e4 <I2C_DMALastTransferCmd+0x10>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80048d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048dc:	041b      	lsls	r3, r3, #16
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	8083      	strh	r3, [r0, #4]
 80048e2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048ea:	8083      	strh	r3, [r0, #4]
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop

080048f0 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80048f0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 80048f6:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80048f8:	9b01      	ldr	r3, [sp, #4]
 80048fa:	4419      	add	r1, r3
 80048fc:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80048fe:	9b01      	ldr	r3, [sp, #4]
 8004900:	8818      	ldrh	r0, [r3, #0]
}
 8004902:	b280      	uxth	r0, r0
 8004904:	b002      	add	sp, #8
 8004906:	4770      	bx	lr

08004908 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8004908:	8883      	ldrh	r3, [r0, #4]
 800490a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800490c:	b91a      	cbnz	r2, 8004916 <I2C_ITConfig+0xe>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800490e:	ea23 0101 	bic.w	r1, r3, r1
 8004912:	8081      	strh	r1, [r0, #4]
 8004914:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8004916:	4319      	orrs	r1, r3
 8004918:	8081      	strh	r1, [r0, #4]
 800491a:	4770      	bx	lr

0800491c <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800491c:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 800491e:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004920:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8004922:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8004926:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800492a:	4018      	ands	r0, r3
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 800492c:	1a0b      	subs	r3, r1, r0
 800492e:	4258      	negs	r0, r3
 8004930:	4158      	adcs	r0, r3
 8004932:	4770      	bx	lr

08004934 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004934:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 8004936:	8b03      	ldrh	r3, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004938:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800493a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

  /* Return status */
  return lastevent;
}
 800493e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004942:	4770      	bx	lr

08004944 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8004944:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8004946:	2300      	movs	r3, #0

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8004948:	0f0a      	lsrs	r2, r1, #28
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800494e:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8004950:	9200      	str	r2, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8004952:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8004954:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 8004958:	b153      	cbz	r3, 8004970 <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800495a:	9b01      	ldr	r3, [sp, #4]
 800495c:	3314      	adds	r3, #20
 800495e:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8004960:	9b01      	ldr	r3, [sp, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8004966:	bf0c      	ite	eq
 8004968:	2000      	moveq	r0, #0
 800496a:	2001      	movne	r0, #1
 800496c:	b002      	add	sp, #8
 800496e:	4770      	bx	lr
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8004970:	9b01      	ldr	r3, [sp, #4]
 8004972:	3318      	adds	r3, #24
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8004974:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	e7f2      	b.n	8004960 <I2C_GetFlagStatus+0x1c>
 800497a:	bf00      	nop

0800497c <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800497c:	43c9      	mvns	r1, r1
 800497e:	b289      	uxth	r1, r1
 8004980:	8281      	strh	r1, [r0, #20]
 8004982:	4770      	bx	lr

08004984 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8004984:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8004986:	8a80      	ldrh	r0, [r0, #20]
 8004988:	b280      	uxth	r0, r0
 800498a:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800498c:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800498e:	d006      	beq.n	800499e <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8004990:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8004994:	ea13 4111 	ands.w	r1, r3, r1, lsr #16
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8004998:	bf0c      	ite	eq
 800499a:	2000      	moveq	r0, #0
 800499c:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 800499e:	4770      	bx	lr

080049a0 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80049a0:	43c9      	mvns	r1, r1
 80049a2:	b289      	uxth	r1, r1
 80049a4:	8281      	strh	r1, [r0, #20]
 80049a6:	4770      	bx	lr

080049a8 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80049a8:	b410      	push	{r4}

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80049aa:	f246 0210 	movw	r2, #24592	; 0x6010
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80049ae:	6804      	ldr	r4, [r0, #0]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80049b0:	f2c4 0202 	movt	r2, #16386	; 0x4002

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80049b4:	2300      	movs	r3, #0

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80049b6:	4290      	cmp	r0, r2
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80049b8:	f024 0401 	bic.w	r4, r4, #1
 80049bc:	6004      	str	r4, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80049be:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80049c0:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80049c2:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80049c4:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80049c6:	6103      	str	r3, [r0, #16]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80049c8:	bf04      	itt	eq
 80049ca:	f44f 43c0 	moveq.w	r3, #24576	; 0x6000
 80049ce:	f2c4 0302 	movteq	r3, #16386	; 0x4002

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80049d2:	f04f 0121 	mov.w	r1, #33	; 0x21

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80049d6:	bf08      	it	eq
 80049d8:	223d      	moveq	r2, #61	; 0x3d

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80049da:	6141      	str	r1, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80049dc:	bf08      	it	eq
 80049de:	609a      	streq	r2, [r3, #8]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80049e0:	f000 80a2 	beq.w	8004b28 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80049e4:	f246 0328 	movw	r3, #24616	; 0x6028
 80049e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80049ec:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80049ee:	bf01      	itttt	eq
 80049f0:	f44f 43c0 	moveq.w	r3, #24576	; 0x6000
 80049f4:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 80049f8:	f44f 6274 	moveq.w	r2, #3904	; 0xf40
 80049fc:	609a      	streq	r2, [r3, #8]
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80049fe:	f000 8093 	beq.w	8004b28 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8004a02:	f246 0340 	movw	r3, #24640	; 0x6040
 8004a06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a0a:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8004a0c:	bf01      	itttt	eq
 8004a0e:	f44f 43c0 	moveq.w	r3, #24576	; 0x6000
 8004a12:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8004a16:	f44f 1274 	moveq.w	r2, #3997696	; 0x3d0000
 8004a1a:	609a      	streq	r2, [r3, #8]
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8004a1c:	f000 8084 	beq.w	8004b28 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8004a20:	f246 0358 	movw	r3, #24664	; 0x6058
 8004a24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a28:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8004a2a:	bf01      	itttt	eq
 8004a2c:	f44f 43c0 	moveq.w	r3, #24576	; 0x6000
 8004a30:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8004a34:	f04f 6274 	moveq.w	r2, #255852544	; 0xf400000
 8004a38:	609a      	streq	r2, [r3, #8]
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8004a3a:	d075      	beq.n	8004b28 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8004a3c:	f246 0370 	movw	r3, #24688	; 0x6070
 8004a40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a44:	4298      	cmp	r0, r3
 8004a46:	d07b      	beq.n	8004b40 <DMA_DeInit+0x198>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8004a48:	f246 0388 	movw	r3, #24712	; 0x6088
 8004a4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a50:	4298      	cmp	r0, r3
 8004a52:	d07e      	beq.n	8004b52 <DMA_DeInit+0x1aa>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8004a54:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8004a58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a5c:	4298      	cmp	r0, r3
 8004a5e:	d066      	beq.n	8004b2e <DMA_DeInit+0x186>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8004a60:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8004a64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a68:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8004a6a:	bf01      	itttt	eq
 8004a6c:	f44f 43c0 	moveq.w	r3, #24576	; 0x6000
 8004a70:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8004a74:	f04f 523d 	moveq.w	r2, #792723456	; 0x2f400000
 8004a78:	60da      	streq	r2, [r3, #12]
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8004a7a:	d055      	beq.n	8004b28 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8004a7c:	f246 4310 	movw	r3, #25616	; 0x6410
 8004a80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a84:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8004a86:	bf01      	itttt	eq
 8004a88:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 8004a8c:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8004a90:	223d      	moveq	r2, #61	; 0x3d
 8004a92:	609a      	streq	r2, [r3, #8]
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8004a94:	d048      	beq.n	8004b28 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8004a96:	f246 4328 	movw	r3, #25640	; 0x6428
 8004a9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a9e:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8004aa0:	bf01      	itttt	eq
 8004aa2:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 8004aa6:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8004aaa:	f44f 6274 	moveq.w	r2, #3904	; 0xf40
 8004aae:	609a      	streq	r2, [r3, #8]
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8004ab0:	d03a      	beq.n	8004b28 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8004ab2:	f246 4340 	movw	r3, #25664	; 0x6440
 8004ab6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004aba:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8004abc:	bf01      	itttt	eq
 8004abe:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 8004ac2:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8004ac6:	f44f 1274 	moveq.w	r2, #3997696	; 0x3d0000
 8004aca:	609a      	streq	r2, [r3, #8]
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8004acc:	d02c      	beq.n	8004b28 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8004ace:	f246 4358 	movw	r3, #25688	; 0x6458
 8004ad2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ad6:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8004ad8:	bf01      	itttt	eq
 8004ada:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 8004ade:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8004ae2:	f04f 6274 	moveq.w	r2, #255852544	; 0xf400000
 8004ae6:	609a      	streq	r2, [r3, #8]
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8004ae8:	d01e      	beq.n	8004b28 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8004aea:	f246 4370 	movw	r3, #25712	; 0x6470
 8004aee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004af2:	4298      	cmp	r0, r3
 8004af4:	d037      	beq.n	8004b66 <DMA_DeInit+0x1be>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8004af6:	f246 4388 	movw	r3, #25736	; 0x6488
 8004afa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004afe:	4298      	cmp	r0, r3
 8004b00:	d03a      	beq.n	8004b78 <DMA_DeInit+0x1d0>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8004b02:	f246 43a0 	movw	r3, #25760	; 0x64a0
 8004b06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b0a:	4298      	cmp	r0, r3
 8004b0c:	d03e      	beq.n	8004b8c <DMA_DeInit+0x1e4>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8004b0e:	f246 43b8 	movw	r3, #25784	; 0x64b8
 8004b12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b16:	4298      	cmp	r0, r3
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8004b18:	bf01      	itttt	eq
 8004b1a:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 8004b1e:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8004b22:	f04f 523d 	moveq.w	r2, #792723456	; 0x2f400000
 8004b26:	60da      	streq	r2, [r3, #12]
    }
  }
}
 8004b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b2c:	4770      	bx	lr
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8004b2e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004b32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b36:	2200      	movs	r2, #0
 8004b38:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	e7f3      	b.n	8004b28 <DMA_DeInit+0x180>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8004b40:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004b44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b48:	223d      	movs	r2, #61	; 0x3d
 8004b4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004b4e:	60da      	str	r2, [r3, #12]
 8004b50:	e7ea      	b.n	8004b28 <DMA_DeInit+0x180>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8004b52:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004b56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b5a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8004b5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004b62:	60da      	str	r2, [r3, #12]
 8004b64:	e7e0      	b.n	8004b28 <DMA_DeInit+0x180>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8004b66:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004b6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b6e:	223d      	movs	r2, #61	; 0x3d
 8004b70:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004b74:	60da      	str	r2, [r3, #12]
 8004b76:	e7d7      	b.n	8004b28 <DMA_DeInit+0x180>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8004b78:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004b7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b80:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8004b84:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004b88:	60da      	str	r2, [r3, #12]
 8004b8a:	e7cd      	b.n	8004b28 <DMA_DeInit+0x180>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8004b8c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004b90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b94:	2200      	movs	r2, #0
 8004b96:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8004b9a:	60da      	str	r2, [r3, #12]
 8004b9c:	e7c4      	b.n	8004b28 <DMA_DeInit+0x180>
 8004b9e:	bf00      	nop

08004ba0 <DMA_Init>:
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004ba0:	68ca      	ldr	r2, [r1, #12]
 8004ba2:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8004ba4:	f8d0 c000 	ldr.w	ip, [r0]
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8004ba8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004bac:	694f      	ldr	r7, [r1, #20]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004bae:	698e      	ldr	r6, [r1, #24]
 8004bb0:	69cd      	ldr	r5, [r1, #28]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004bb2:	6a0c      	ldr	r4, [r1, #32]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004bb4:	ea42 0803 	orr.w	r8, r2, r3
 8004bb8:	ea48 0707 	orr.w	r7, r8, r7
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004bbc:	433e      	orrs	r6, r7
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004bbe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8004bc0:	6b0f      	ldr	r7, [r1, #48]	; 0x30
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004bc2:	4335      	orrs	r5, r6
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004bc4:	432c      	orrs	r4, r5
 8004bc6:	ea44 0203 	orr.w	r2, r4, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004bca:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8004bcc:	ea42 0304 	orr.w	r3, r2, r4
 8004bd0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8004bd2:	6b8c      	ldr	r4, [r1, #56]	; 0x38
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bd4:	f248 063f 	movw	r6, #32831	; 0x803f
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004bd8:	4313      	orrs	r3, r2
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bda:	f2cf 061c 	movt	r6, #61468	; 0xf01c
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8004bde:	4323      	orrs	r3, r4
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004be0:	ea0c 0606 	and.w	r6, ip, r6
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004be4:	431e      	orrs	r6, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8004be6:	6006      	str	r6, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8004be8:	6945      	ldr	r5, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8004bea:	6ace      	ldr	r6, [r1, #44]	; 0x2c
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8004bec:	690c      	ldr	r4, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8004bee:	684a      	ldr	r2, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8004bf0:	688b      	ldr	r3, [r1, #8]
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bf2:	f025 0507 	bic.w	r5, r5, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8004bf6:	ea47 0106 	orr.w	r1, r7, r6
 8004bfa:	4329      	orrs	r1, r5

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8004bfc:	6141      	str	r1, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8004bfe:	6044      	str	r4, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8004c00:	6082      	str	r2, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
}
 8004c02:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8004c06:	60c3      	str	r3, [r0, #12]
}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop

08004c0c <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8004c10:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8004c12:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8004c14:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8004c16:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8004c18:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8004c1a:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8004c1c:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8004c1e:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8004c20:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8004c22:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8004c24:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8004c26:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8004c28:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8004c2a:	6383      	str	r3, [r0, #56]	; 0x38
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop

08004c30 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8004c30:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c32:	b919      	cbnz	r1, 8004c3c <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	6003      	str	r3, [r0, #0]
 8004c3a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	6003      	str	r3, [r0, #0]
 8004c42:	4770      	bx	lr

08004c44 <DMA_PeriphIncOffsetSizeConfig>:

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8004c44:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8004c46:	b919      	cbnz	r1, 8004c50 <DMA_PeriphIncOffsetSizeConfig+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8004c48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c4c:	6003      	str	r3, [r0, #0]
 8004c4e:	4770      	bx	lr

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8004c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c54:	6003      	str	r3, [r0, #0]
 8004c56:	4770      	bx	lr

08004c58 <DMA_FlowControllerConfig>:

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8004c58:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8004c5a:	b919      	cbnz	r1, 8004c64 <DMA_FlowControllerConfig+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8004c5c:	f023 0320 	bic.w	r3, r3, #32
 8004c60:	6003      	str	r3, [r0, #0]
 8004c62:	4770      	bx	lr

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8004c64:	f043 0320 	orr.w	r3, r3, #32
 8004c68:	6003      	str	r3, [r0, #0]
 8004c6a:	4770      	bx	lr

08004c6c <DMA_SetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8004c6c:	6041      	str	r1, [r0, #4]
 8004c6e:	4770      	bx	lr

08004c70 <DMA_GetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8004c70:	6840      	ldr	r0, [r0, #4]
}
 8004c72:	b280      	uxth	r0, r0
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop

08004c78 <DMA_DoubleBufferModeConfig>:
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8004c78:	6803      	ldr	r3, [r0, #0]
{  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8004c7a:	b922      	cbnz	r2, 8004c86 <DMA_DoubleBufferModeConfig+0xe>
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8004c7c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004c80:	6003      	str	r3, [r0, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8004c82:	6101      	str	r1, [r0, #16]
 8004c84:	4770      	bx	lr
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8004c86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c8a:	6003      	str	r3, [r0, #0]
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8004c8c:	6101      	str	r1, [r0, #16]
 8004c8e:	4770      	bx	lr

08004c90 <DMA_DoubleBufferModeCmd>:

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8004c90:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8004c92:	b919      	cbnz	r1, 8004c9c <DMA_DoubleBufferModeCmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8004c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c98:	6003      	str	r3, [r0, #0]
 8004c9a:	4770      	bx	lr

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8004c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ca0:	6003      	str	r3, [r0, #0]
 8004ca2:	4770      	bx	lr

08004ca4 <DMA_MemoryTargetConfig>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8004ca4:	b90a      	cbnz	r2, 8004caa <DMA_MemoryTargetConfig+0x6>
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8004ca6:	60c1      	str	r1, [r0, #12]
 8004ca8:	4770      	bx	lr
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8004caa:	6101      	str	r1, [r0, #16]
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop

08004cb0 <DMA_GetCurrentMemoryTarget>:
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8004cb0:	6800      	ldr	r0, [r0, #0]
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
  }
  return tmp;
}
 8004cb2:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 8004cb6:	4770      	bx	lr

08004cb8 <DMA_GetCmdStatus>:
  FunctionalState state = DISABLE;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8004cb8:	6800      	ldr	r0, [r0, #0]
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
  }
  return state;
}
 8004cba:	f000 0001 	and.w	r0, r0, #1
 8004cbe:	4770      	bx	lr

08004cc0 <DMA_GetFIFOStatus>:
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8004cc0:	6940      	ldr	r0, [r0, #20]
  
  return tmpreg;
}
 8004cc2:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8004cc6:	4770      	bx	lr

08004cc8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8004cc8:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004cca:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004cce:	f246 440f 	movw	r4, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004cd2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004cd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004cda:	f2c4 0402 	movt	r4, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004cde:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004ce2:	42a0      	cmp	r0, r4
 8004ce4:	bf8c      	ite	hi
 8004ce6:	4610      	movhi	r0, r2
 8004ce8:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004cea:	008b      	lsls	r3, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8004cec:	bf4c      	ite	mi
 8004cee:	6843      	ldrmi	r3, [r0, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8004cf0:	6803      	ldrpl	r3, [r0, #0]
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 8004cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8004cf6:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8004cfa:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8004cfe:	4219      	tst	r1, r3
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 8004d00:	bf0c      	ite	eq
 8004d02:	2000      	moveq	r0, #0
 8004d04:	2001      	movne	r0, #1
 8004d06:	4770      	bx	lr

08004d08 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8004d08:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004d0a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004d0e:	f246 440f 	movw	r4, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004d12:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004d16:	f2c4 0402 	movt	r4, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004d1a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004d1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d22:	42a0      	cmp	r0, r4
 8004d24:	bf8c      	ite	hi
 8004d26:	4610      	movhi	r0, r2
 8004d28:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004d2a:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8004d2e:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8004d32:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 8004d36:	bf14      	ite	ne
 8004d38:	60c1      	strne	r1, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8004d3a:	6081      	streq	r1, [r0, #8]
  }    
}
 8004d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop

08004d44 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8004d44:	060b      	lsls	r3, r1, #24
 8004d46:	d50c      	bpl.n	8004d62 <DMA_ITConfig+0x1e>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8004d48:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 8004d4a:	b1aa      	cbz	r2, 8004d78 <DMA_ITConfig+0x34>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8004d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8004d50:	2980      	cmp	r1, #128	; 0x80
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8004d52:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8004d54:	d00f      	beq.n	8004d76 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8004d56:	6803      	ldr	r3, [r0, #0]
 8004d58:	f001 011e 	and.w	r1, r1, #30
 8004d5c:	4319      	orrs	r1, r3
 8004d5e:	6001      	str	r1, [r0, #0]
 8004d60:	4770      	bx	lr
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8004d62:	2980      	cmp	r1, #128	; 0x80
 8004d64:	d007      	beq.n	8004d76 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
 8004d66:	2a00      	cmp	r2, #0
 8004d68:	d1f5      	bne.n	8004d56 <DMA_ITConfig+0x12>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8004d6a:	6803      	ldr	r3, [r0, #0]
 8004d6c:	f001 011e 	and.w	r1, r1, #30
 8004d70:	ea23 0101 	bic.w	r1, r3, r1
 8004d74:	6001      	str	r1, [r0, #0]
 8004d76:	4770      	bx	lr
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8004d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8004d7c:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8004d7e:	6143      	str	r3, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8004d80:	d1f3      	bne.n	8004d6a <DMA_ITConfig+0x26>
 8004d82:	4770      	bx	lr

08004d84 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8004d84:	b470      	push	{r4, r5, r6}
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004d86:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004d8a:	f246 450f 	movw	r5, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004d8e:	f44f 44c8 	mov.w	r4, #25600	; 0x6400
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8004d92:	f021 23f0 	bic.w	r3, r1, #4026593280	; 0xf000f000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004d96:	f2c4 0502 	movt	r5, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004d9a:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8004d9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8004da2:	f023 16c3 	bic.w	r6, r3, #12779715	; 0xc300c3
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004da6:	42a8      	cmp	r0, r5
 8004da8:	bf88      	it	hi
 8004daa:	4622      	movhi	r2, r4
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8004dac:	b196      	cbz	r6, 8004dd4 <DMA_GetITStatus+0x50>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8004dae:	6804      	ldr	r4, [r0, #0]

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8004db0:	f004 041e 	and.w	r4, r4, #30
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8004db4:	ea04 24d1 	and.w	r4, r4, r1, lsr #11
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004db8:	0089      	lsls	r1, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8004dba:	bf4c      	ite	mi
 8004dbc:	6852      	ldrmi	r2, [r2, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8004dbe:	6812      	ldrpl	r2, [r2, #0]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8004dc0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8004dc4:	ea13 0002 	ands.w	r0, r3, r2
 8004dc8:	d002      	beq.n	8004dd0 <DMA_GetITStatus+0x4c>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8004dca:	1c20      	adds	r0, r4, #0
 8004dcc:	bf18      	it	ne
 8004dce:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the DMA_IT status */
  return  bitstatus;
}
 8004dd0:	bc70      	pop	{r4, r5, r6}
 8004dd2:	4770      	bx	lr
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8004dd4:	6944      	ldr	r4, [r0, #20]
 8004dd6:	f004 0480 	and.w	r4, r4, #128	; 0x80
 8004dda:	e7ed      	b.n	8004db8 <DMA_GetITStatus+0x34>

08004ddc <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8004ddc:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004dde:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004de2:	f246 440f 	movw	r4, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004de6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004dea:	f2c4 0402 	movt	r4, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004dee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004df2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004df6:	42a0      	cmp	r0, r4
 8004df8:	bf8c      	ite	hi
 8004dfa:	4610      	movhi	r0, r2
 8004dfc:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004dfe:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8004e02:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8004e06:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 8004e0a:	bf14      	ite	ne
 8004e0c:	60c1      	strne	r1, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8004e0e:	6081      	streq	r1, [r0, #8]
  }   
}
 8004e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop

08004e18 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8004e18:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8004e1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004e1e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004e22:	4298      	cmp	r0, r3
 8004e24:	d02a      	beq.n	8004e7c <SPI_I2S_DeInit+0x64>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8004e26:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004e2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004e2e:	4298      	cmp	r0, r3
 8004e30:	d030      	beq.n	8004e94 <SPI_I2S_DeInit+0x7c>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 8004e32:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004e3a:	4298      	cmp	r0, r3
 8004e3c:	d036      	beq.n	8004eac <SPI_I2S_DeInit+0x94>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8004e3e:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8004e42:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004e46:	4298      	cmp	r0, r3
 8004e48:	d03c      	beq.n	8004ec4 <SPI_I2S_DeInit+0xac>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8004e4a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004e4e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004e52:	4298      	cmp	r0, r3
 8004e54:	d042      	beq.n	8004edc <SPI_I2S_DeInit+0xc4>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 8004e56:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8004e5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004e5e:	4298      	cmp	r0, r3
 8004e60:	d000      	beq.n	8004e64 <SPI_I2S_DeInit+0x4c>
 8004e62:	bd08      	pop	{r3, pc}
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8004e64:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004e68:	2101      	movs	r1, #1
 8004e6a:	f7ff f839 	bl	8003ee0 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8004e6e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004e72:	2100      	movs	r1, #0
    }
  }
}
 8004e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI6)
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8004e78:	f7ff b832 	b.w	8003ee0 <RCC_APB2PeriphResetCmd>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8004e7c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004e80:	2101      	movs	r1, #1
 8004e82:	f7ff f82d 	bl	8003ee0 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8004e86:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004e8a:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8004e8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8004e90:	f7ff b826 	b.w	8003ee0 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8004e94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004e98:	2101      	movs	r1, #1
 8004e9a:	f7ff f813 	bl	8003ec4 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8004e9e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004ea2:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8004ea4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8004ea8:	f7ff b80c 	b.w	8003ec4 <RCC_APB1PeriphResetCmd>
  }
  else if (SPIx == SPI3)
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8004eac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	f7ff f807 	bl	8003ec4 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8004eb6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004eba:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8004ebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI3)
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8004ec0:	f7ff b800 	b.w	8003ec4 <RCC_APB1PeriphResetCmd>
  }
  else if (SPIx == SPI4)
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8004ec4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ec8:	2101      	movs	r1, #1
 8004eca:	f7ff f809 	bl	8003ee0 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8004ece:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ed2:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8004ed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI4)
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8004ed8:	f7ff b802 	b.w	8003ee0 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI5)
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8004edc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	f7fe fffd 	bl	8003ee0 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8004ee6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004eea:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8004eec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI5)
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8004ef0:	f7fe bff6 	b.w	8003ee0 <RCC_APB2PeriphResetCmd>

08004ef4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8004ef4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004ef8:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 8004efc:	f8b1 9000 	ldrh.w	r9, [r1]
 8004f00:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8004f04:	890f      	ldrh	r7, [r1, #8]
 8004f06:	894e      	ldrh	r6, [r1, #10]
 8004f08:	898d      	ldrh	r5, [r1, #12]
 8004f0a:	89cc      	ldrh	r4, [r1, #14]
 8004f0c:	f8b1 c006 	ldrh.w	ip, [r1, #6]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004f10:	8a0a      	ldrh	r2, [r1, #16]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8004f12:	8803      	ldrh	r3, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004f14:	ea4a 0109 	orr.w	r1, sl, r9
 8004f18:	ea41 0108 	orr.w	r1, r1, r8
 8004f1c:	ea41 010c 	orr.w	r1, r1, ip
 8004f20:	4339      	orrs	r1, r7
 8004f22:	4331      	orrs	r1, r6
 8004f24:	4329      	orrs	r1, r5
 8004f26:	4321      	orrs	r1, r4

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004f28:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8004f30:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8004f32:	8b83      	ldrh	r3, [r0, #28]
 8004f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	0c1b      	lsrs	r3, r3, #16
 8004f3c:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
}
 8004f3e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004f42:	8202      	strh	r2, [r0, #16]
}
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop

08004f48 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004f48:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004f4a:	688a      	ldr	r2, [r1, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004f4c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004f50:	f023 030f 	bic.w	r3, r3, #15
 8004f54:	041b      	lsls	r3, r3, #16
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8004f56:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004f5a:	0c1b      	lsrs	r3, r3, #16
  SPIx->I2SPR = 0x0002;
 8004f5c:	2402      	movs	r4, #2
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004f5e:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8004f60:	8404      	strh	r4, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8004f62:	8b86      	ldrh	r6, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004f64:	42a2      	cmp	r2, r4
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8004f66:	b2b6      	uxth	r6, r6
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004f68:	d063      	beq.n	8005032 <I2S_Init+0xea>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8004f6a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004f6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8004f72:	888c      	ldrh	r4, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8004f74:	689d      	ldr	r5, [r3, #8]
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8004f76:	2c00      	cmp	r4, #0
 8004f78:	bf0c      	ite	eq
 8004f7a:	f04f 0820 	moveq.w	r8, #32
 8004f7e:	f04f 0840 	movne.w	r8, #64	; 0x40
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8004f82:	022d      	lsls	r5, r5, #8
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8004f84:	bf42      	ittt	mi
 8004f86:	689d      	ldrmi	r5, [r3, #8]
 8004f88:	f425 0500 	bicmi.w	r5, r5, #8388608	; 0x800000
 8004f8c:	609d      	strmi	r5, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8004f8e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004f92:	f2c4 0302 	movt	r3, #16386	; 0x4002
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004f96:	f44f 5590 	mov.w	r5, #4608	; 0x1200
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8004f9a:	f8d3 c084 	ldr.w	ip, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8004f9e:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8004fa2:	f8d3 9004 	ldr.w	r9, [r3, #4]
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8004fa6:	88cb      	ldrh	r3, [r1, #6]
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8004fa8:	f009 093f 	and.w	r9, r9, #63	; 0x3f

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004fac:	f2c0 057a 	movt	r5, #122	; 0x7a
 8004fb0:	fbb5 f5f9 	udiv	r5, r5, r9
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8004fb4:	f3cc 1c88 	ubfx	ip, ip, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004fb8:	fb0c fc05 	mul.w	ip, ip, r5
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8004fbc:	f3c7 7702 	ubfx	r7, r7, #28, #3
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8004fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004fc4:	fbbc f7f7 	udiv	r7, ip, r7
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004fc8:	bf13      	iteet	ne
 8004fca:	fbb7 f5f8 	udivne	r5, r7, r8
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004fce:	0a3f      	lsreq	r7, r7, #8
 8004fd0:	eb07 0787 	addeq.w	r7, r7, r7, lsl #2
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004fd4:	eb05 0585 	addne.w	r5, r5, r5, lsl #2
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004fd8:	bf0b      	itete	eq
 8004fda:	007f      	lsleq	r7, r7, #1
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004fdc:	006d      	lslne	r5, r5, #1
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004fde:	fbb7 f2f2 	udiveq	r2, r7, r2
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004fe2:	fbb5 f2f2 	udivne	r2, r5, r2
 8004fe6:	3205      	adds	r2, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8004fe8:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 8004fec:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004ff0:	b292      	uxth	r2, r2
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8004ff2:	fba5 7202 	umull	r7, r2, r5, r2
 8004ff6:	08d2      	lsrs	r2, r2, #3
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8004ff8:	0855      	lsrs	r5, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8004ffa:	1eaf      	subs	r7, r5, #2
 8004ffc:	b2bf      	uxth	r7, r7
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8004ffe:	f002 0201 	and.w	r2, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8005002:	2ffd      	cmp	r7, #253	; 0xfd
 8005004:	bf94      	ite	ls
 8005006:	ea45 2202 	orrls.w	r2, r5, r2, lsl #8
 800500a:	2202      	movhi	r2, #2
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800500c:	f8b1 c000 	ldrh.w	ip, [r1]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8005010:	884f      	ldrh	r7, [r1, #2]
 8005012:	898d      	ldrh	r5, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8005014:	ea46 010c 	orr.w	r1, r6, ip
 8005018:	f441 6100 	orr.w	r1, r1, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800501c:	4339      	orrs	r1, r7
 800501e:	4329      	orrs	r1, r5
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8005020:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8005022:	b289      	uxth	r1, r1
 8005024:	430c      	orrs	r4, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8005026:	b29b      	uxth	r3, r3
 8005028:	8403      	strh	r3, [r0, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800502a:	8384      	strh	r4, [r0, #28]
}
 800502c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8005030:	4770      	bx	lr
 8005032:	888c      	ldrh	r4, [r1, #4]
 8005034:	88cb      	ldrh	r3, [r1, #6]
 8005036:	e7e9      	b.n	800500c <I2S_Init+0xc4>

08005038 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8005038:	2300      	movs	r3, #0
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800503a:	2207      	movs	r2, #7
 800503c:	8202      	strh	r2, [r0, #16]
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800503e:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8005040:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8005042:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8005044:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8005046:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8005048:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800504a:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800504c:	81c3      	strh	r3, [r0, #14]
 800504e:	4770      	bx	lr

08005050 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8005050:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8005052:	2202      	movs	r2, #2
 8005054:	6082      	str	r2, [r0, #8]
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8005056:	6003      	str	r3, [r0, #0]
 8005058:	6043      	str	r3, [r0, #4]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 800505a:	8183      	strh	r3, [r0, #12]
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop

08005060 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8005060:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005062:	b929      	cbnz	r1, 8005070 <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8005064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	0c1b      	lsrs	r3, r3, #16
 800506c:	8003      	strh	r3, [r0, #0]
 800506e:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8005070:	b29b      	uxth	r3, r3
 8005072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005076:	8003      	strh	r3, [r0, #0]
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop

0800507c <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800507c:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800507e:	b929      	cbnz	r1, 800508c <I2S_Cmd+0x10>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8005080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	0c1b      	lsrs	r3, r3, #16
 8005088:	8383      	strh	r3, [r0, #28]
 800508a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800508c:	b29b      	uxth	r3, r3
 800508e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005092:	8383      	strh	r3, [r0, #28]
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop

08005098 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8005098:	8803      	ldrh	r3, [r0, #0]
 800509a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800509e:	041b      	lsls	r3, r3, #16
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 80050a4:	8803      	ldrh	r3, [r0, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	4319      	orrs	r1, r3
 80050aa:	8001      	strh	r1, [r0, #0]
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop

080050b0 <SPI_BiDirectionalLineConfig>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 80050b0:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 80050b2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 80050b6:	bf15      	itete	ne
 80050b8:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 80050bc:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 80050be:	041b      	lslne	r3, r3, #16
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 80050c0:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 80050c4:	bf18      	it	ne
 80050c6:	0c1b      	lsrne	r3, r3, #16
 80050c8:	8003      	strh	r3, [r0, #0]
 80050ca:	4770      	bx	lr

080050cc <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80050cc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80050d0:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80050d2:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80050d4:	bf0b      	itete	eq
 80050d6:	f423 7380 	biceq.w	r3, r3, #256	; 0x100
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80050da:	b29b      	uxthne	r3, r3
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80050dc:	041b      	lsleq	r3, r3, #16
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80050de:	f443 7380 	orrne.w	r3, r3, #256	; 0x100
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80050e2:	bf08      	it	eq
 80050e4:	0c1b      	lsreq	r3, r3, #16
 80050e6:	8003      	strh	r3, [r0, #0]
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop

080050ec <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 80050ec:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80050ee:	b929      	cbnz	r1, 80050fc <SPI_SSOutputCmd+0x10>
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 80050f0:	f023 0304 	bic.w	r3, r3, #4
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	0c1b      	lsrs	r3, r3, #16
 80050f8:	8083      	strh	r3, [r0, #4]
 80050fa:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f043 0304 	orr.w	r3, r3, #4
 8005102:	8083      	strh	r3, [r0, #4]
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop

08005108 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8005108:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800510a:	b929      	cbnz	r1, 8005118 <SPI_TIModeCmd+0x10>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800510c:	f023 0310 	bic.w	r3, r3, #16
 8005110:	041b      	lsls	r3, r3, #16
 8005112:	0c1b      	lsrs	r3, r3, #16
 8005114:	8083      	strh	r3, [r0, #4]
 8005116:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8005118:	b29b      	uxth	r3, r3
 800511a:	f043 0310 	orr.w	r3, r3, #16
 800511e:	8083      	strh	r3, [r0, #4]
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop

08005124 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8005124:	8b83      	ldrh	r3, [r0, #28]
 8005126:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800512a:	f023 030f 	bic.w	r3, r3, #15
 800512e:	041b      	lsls	r3, r3, #16
  I2Sxext->I2SPR = 0x0002;
 8005130:	2202      	movs	r2, #2
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8005132:	0c1b      	lsrs	r3, r3, #16
 8005134:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8005136:	8402      	strh	r2, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8005138:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800513a:	880b      	ldrh	r3, [r1, #0]
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800513c:	b430      	push	{r4, r5}
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800513e:	884d      	ldrh	r5, [r1, #2]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005140:	888c      	ldrh	r4, [r1, #4]
 8005142:	8989      	ldrh	r1, [r1, #12]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8005144:	b292      	uxth	r2, r2
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8005146:	432a      	orrs	r2, r5
 8005148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800514c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005150:	4322      	orrs	r2, r4
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8005152:	041b      	lsls	r3, r3, #16
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005154:	430a      	orrs	r2, r1
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8005156:	0c1b      	lsrs	r3, r3, #16
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005158:	b292      	uxth	r2, r2
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
  {
    tmp = I2S_Mode_SlaveRx;
 800515a:	2b00      	cmp	r3, #0
 800515c:	bf0c      	ite	eq
 800515e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005162:	2300      	movne	r3, #0
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005164:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8005166:	8383      	strh	r3, [r0, #28]
}
 8005168:	bc30      	pop	{r4, r5}
 800516a:	4770      	bx	lr

0800516c <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800516c:	8980      	ldrh	r0, [r0, #12]
}
 800516e:	b280      	uxth	r0, r0
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop

08005174 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8005174:	8181      	strh	r1, [r0, #12]
 8005176:	4770      	bx	lr

08005178 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8005178:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800517a:	b929      	cbnz	r1, 8005188 <SPI_CalculateCRC+0x10>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800517c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	0c1b      	lsrs	r3, r3, #16
 8005184:	8003      	strh	r3, [r0, #0]
 8005186:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8005188:	b29b      	uxth	r3, r3
 800518a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800518e:	8003      	strh	r3, [r0, #0]
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop

08005194 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8005194:	8803      	ldrh	r3, [r0, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800519c:	8003      	strh	r3, [r0, #0]
 800519e:	4770      	bx	lr

080051a0 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 80051a0:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 80051a2:	bf14      	ite	ne
 80051a4:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 80051a6:	8a80      	ldrheq	r0, [r0, #20]
 80051a8:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 80051aa:	4770      	bx	lr

080051ac <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 80051ac:	8a00      	ldrh	r0, [r0, #16]
}
 80051ae:	b280      	uxth	r0, r0
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop

080051b4 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80051b4:	8883      	ldrh	r3, [r0, #4]
 80051b6:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 80051b8:	b91a      	cbnz	r2, 80051c2 <SPI_I2S_DMACmd+0xe>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80051ba:	ea23 0101 	bic.w	r1, r3, r1
 80051be:	8081      	strh	r1, [r0, #4]
 80051c0:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80051c2:	4319      	orrs	r1, r3
 80051c4:	8081      	strh	r1, [r0, #4]
 80051c6:	4770      	bx	lr

080051c8 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80051c8:	2301      	movs	r3, #1
 80051ca:	0909      	lsrs	r1, r1, #4
 80051cc:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80051d0:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80051d2:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80051d4:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 80051d6:	b91a      	cbnz	r2, 80051e0 <SPI_I2S_ITConfig+0x18>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80051d8:	ea23 0101 	bic.w	r1, r3, r1
 80051dc:	8081      	strh	r1, [r0, #4]
 80051de:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80051e0:	4319      	orrs	r1, r3
 80051e2:	8081      	strh	r1, [r0, #4]
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop

080051e8 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80051e8:	8903      	ldrh	r3, [r0, #8]
 80051ea:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 80051ec:	bf0c      	ite	eq
 80051ee:	2000      	moveq	r0, #0
 80051f0:	2001      	movne	r0, #1
 80051f2:	4770      	bx	lr

080051f4 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 80051f4:	43c9      	mvns	r1, r1
 80051f6:	b289      	uxth	r1, r1
 80051f8:	8101      	strh	r1, [r0, #8]
 80051fa:	4770      	bx	lr

080051fc <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 80051fc:	b410      	push	{r4}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80051fe:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8005200:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8005202:	f001 030f 	and.w	r3, r1, #15
 8005206:	2201      	movs	r2, #1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8005208:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800520a:	fa02 f303 	lsl.w	r3, r2, r3

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800520e:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8005210:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8005212:	d005      	beq.n	8005220 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8005214:	0909      	lsrs	r1, r1, #4
 8005216:	408a      	lsls	r2, r1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8005218:	4214      	tst	r4, r2
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800521a:	bf0c      	ite	eq
 800521c:	2000      	moveq	r0, #0
 800521e:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8005220:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop

08005228 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8005228:	f001 010f 	and.w	r1, r1, #15
 800522c:	2301      	movs	r3, #1
 800522e:	fa03 f101 	lsl.w	r1, r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8005232:	43c9      	mvns	r1, r1
 8005234:	b289      	uxth	r1, r1
 8005236:	8101      	strh	r1, [r0, #8]
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop

0800523c <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 800523c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005240:	f2c4 0301 	movt	r3, #16385	; 0x4001
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 8005244:	f64f 71ff 	movw	r1, #65535	; 0xffff
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8005248:	2200      	movs	r2, #0
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 800524a:	f2c0 017f 	movt	r1, #127	; 0x7f
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 800524e:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8005250:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8005252:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8005254:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8005256:	6159      	str	r1, [r3, #20]
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop

0800525c <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800525c:	7983      	ldrb	r3, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800525e:	b470      	push	{r4, r5, r6}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8005260:	b343      	cbz	r3, 80052b4 <EXTI_Init+0x58>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8005262:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005266:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800526a:	6801      	ldr	r1, [r0, #0]
 800526c:	681e      	ldr	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800526e:	7902      	ldrb	r2, [r0, #4]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8005270:	7945      	ldrb	r5, [r0, #5]
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8005272:	43cc      	mvns	r4, r1
 8005274:	4026      	ands	r6, r4
 8005276:	601e      	str	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8005278:	685e      	ldr	r6, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800527a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800527e:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8005282:	4034      	ands	r4, r6
 8005284:	605c      	str	r4, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8005286:	6814      	ldr	r4, [r2, #0]
 8005288:	4321      	orrs	r1, r4
 800528a:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800528c:	6802      	ldr	r2, [r0, #0]
 800528e:	6898      	ldr	r0, [r3, #8]
 8005290:	43d1      	mvns	r1, r2
 8005292:	4008      	ands	r0, r1
 8005294:	6098      	str	r0, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8005296:	68d8      	ldr	r0, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8005298:	2d10      	cmp	r5, #16

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800529a:	ea01 0100 	and.w	r1, r1, r0
 800529e:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80052a0:	d014      	beq.n	80052cc <EXTI_Init+0x70>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80052a2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80052a6:	f505 359e 	add.w	r5, r5, #80896	; 0x13c00

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80052aa:	682b      	ldr	r3, [r5, #0]
 80052ac:	431a      	orrs	r2, r3
 80052ae:	602a      	str	r2, [r5, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80052b0:	bc70      	pop	{r4, r5, r6}
 80052b2:	4770      	bx	lr
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80052b4:	7903      	ldrb	r3, [r0, #4]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80052b6:	6801      	ldr	r1, [r0, #0]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80052b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052bc:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80052c0:	bc70      	pop	{r4, r5, r6}
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	ea22 0201 	bic.w	r2, r2, r1
 80052c8:	601a      	str	r2, [r3, #0]
  }
}
 80052ca:	4770      	bx	lr
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80052cc:	6899      	ldr	r1, [r3, #8]
 80052ce:	4311      	orrs	r1, r2
 80052d0:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80052d2:	68d9      	ldr	r1, [r3, #12]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80052d8:	bc70      	pop	{r4, r5, r6}
 80052da:	4770      	bx	lr

080052dc <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80052dc:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 80052de:	220c      	movs	r2, #12
 80052e0:	7142      	strb	r2, [r0, #5]
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80052e2:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80052e4:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 80052e6:	7183      	strb	r3, [r0, #6]
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop

080052ec <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 80052ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80052f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	4310      	orrs	r0, r2
 80052f8:	6118      	str	r0, [r3, #16]
 80052fa:	4770      	bx	lr

080052fc <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80052fc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005300:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005308:	bf0c      	ite	eq
 800530a:	2000      	moveq	r0, #0
 800530c:	2001      	movne	r0, #1
 800530e:	4770      	bx	lr

08005310 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8005310:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005314:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005318:	6158      	str	r0, [r3, #20]
 800531a:	4770      	bx	lr

0800531c <EXTI_GetITStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800531c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005320:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  return bitstatus;
  
}
 8005328:	bf0c      	ite	eq
 800532a:	2000      	moveq	r0, #0
 800532c:	2001      	movne	r0, #1
 800532e:	4770      	bx	lr

08005330 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8005330:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005334:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005338:	6158      	str	r0, [r3, #20]
 800533a:	4770      	bx	lr

0800533c <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 800533c:	b508      	push	{r3, lr}
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 800533e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005342:	2101      	movs	r1, #1
 8005344:	f7fe fd94 	bl	8003e70 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 8005348:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800534c:	2100      	movs	r1, #0
}
 800534e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void DMA2D_DeInit(void)
{
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 8005352:	f7fe bd8d 	b.w	8003e70 <RCC_AHB1PeriphResetCmd>
 8005356:	bf00      	nop

08005358 <DMA2D_Init>:
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 8005358:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800535c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 8005360:	b470      	push	{r4, r5, r6}
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8005368:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800536c:	601a      	str	r2, [r3, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	6802      	ldr	r2, [r0, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	601a      	str	r2, [r3, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 8005376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005378:	f022 0207 	bic.w	r2, r2, #7
 800537c:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 800537e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005380:	6842      	ldr	r2, [r0, #4]
 8005382:	4311      	orrs	r1, r2
 8005384:	6359      	str	r1, [r3, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8005386:	68c6      	ldr	r6, [r0, #12]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8005388:	6905      	ldr	r5, [r0, #16]
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 800538a:	2a00      	cmp	r2, #0
 800538c:	d03a      	beq.n	8005404 <DMA2D_Init+0xac>
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 800538e:	2a01      	cmp	r2, #1
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8005390:	bf02      	ittt	eq
 8005392:	0236      	lsleq	r6, r6, #8
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8005394:	042d      	lsleq	r5, r5, #16
      outalpha = (uint32_t)0x00000000;
 8005396:	2400      	moveq	r4, #0
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 8005398:	d00f      	beq.n	80053ba <DMA2D_Init+0x62>
      outalpha = (uint32_t)0x00000000;
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 800539a:	2a02      	cmp	r2, #2
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 800539c:	bf02      	ittt	eq
 800539e:	0176      	lsleq	r6, r6, #5
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 80053a0:	02ed      	lsleq	r5, r5, #11
      outalpha = (uint32_t)0x00000000;
 80053a2:	2400      	moveq	r4, #0
      outalpha = (uint32_t)0x00000000;
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 80053a4:	d009      	beq.n	80053ba <DMA2D_Init+0x62>

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 80053a6:	6944      	ldr	r4, [r0, #20]
      outalpha = (uint32_t)0x00000000;
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 80053a8:	2a03      	cmp	r2, #3
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 80053aa:	bf03      	ittte	eq
 80053ac:	0176      	lsleq	r6, r6, #5
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 80053ae:	02ad      	lsleq	r5, r5, #10
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 80053b0:	03e4      	lsleq	r4, r4, #15
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 80053b2:	0136      	lslne	r6, r6, #4
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 80053b4:	bf1c      	itt	ne
 80053b6:	022d      	lslne	r5, r5, #8
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 80053b8:	0324      	lslne	r4, r4, #12
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 80053ba:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80053be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053c2:	6882      	ldr	r2, [r0, #8]
 80053c4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80053c6:	4311      	orrs	r1, r2
 80053c8:	4331      	orrs	r1, r6
 80053ca:	ea41 0205 	orr.w	r2, r1, r5
 80053ce:	4322      	orrs	r2, r4
 80053d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 80053d2:	6982      	ldr	r2, [r0, #24]
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 80053d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053d8:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80053dc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80053e0:	641a      	str	r2, [r3, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 80053e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80053e4:	69c2      	ldr	r2, [r0, #28]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 80053ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 80053ec:	6a41      	ldr	r1, [r0, #36]	; 0x24
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 80053ee:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80053f2:	645a      	str	r2, [r3, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 80053f4:	6a02      	ldr	r2, [r0, #32]
 80053f6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80053f8:	4302      	orrs	r2, r0
 80053fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80053fe:	645a      	str	r2, [r3, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 8005400:	bc70      	pop	{r4, r5, r6}
 8005402:	4770      	bx	lr

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 8005404:	6944      	ldr	r4, [r0, #20]

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8005406:	0236      	lsls	r6, r6, #8
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8005408:	042d      	lsls	r5, r5, #16
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 800540a:	0624      	lsls	r4, r4, #24
 800540c:	e7d5      	b.n	80053ba <DMA2D_Init+0x62>
 800540e:	bf00      	nop

08005410 <DMA2D_StructInit>:
  */
}
void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
  /* Initialize the transfer mode member */
  DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 8005410:	2300      	movs	r3, #0
 8005412:	6003      	str	r3, [r0, #0]

  /* Initialize the output color mode members */
  DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 8005414:	6043      	str	r3, [r0, #4]

  /* Initialize the alpha and RGB values */
  DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 8005416:	60c3      	str	r3, [r0, #12]
  DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 8005418:	6083      	str	r3, [r0, #8]
  DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 800541a:	6103      	str	r3, [r0, #16]
  DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 800541c:	6143      	str	r3, [r0, #20]

  /* Initialize the output memory address */
  DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 800541e:	6183      	str	r3, [r0, #24]

  /* Initialize the output offset */
  DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 8005420:	61c3      	str	r3, [r0, #28]

  /* Initialize the number of line and the number of pixel per line */
  DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 8005422:	6203      	str	r3, [r0, #32]
  DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 8005424:	6243      	str	r3, [r0, #36]	; 0x24
 8005426:	4770      	bx	lr

08005428 <DMA2D_StartTransfer>:
  */

void DMA2D_StartTransfer(void)
{
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 8005428:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800542c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop

0800543c <DMA2D_AbortTransfer>:
  */

void DMA2D_AbortTransfer(void)
{
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 800543c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8005440:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	f042 0204 	orr.w	r2, r2, #4
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop

08005450 <DMA2D_Suspend>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 8005450:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8005454:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005458:	681a      	ldr	r2, [r3, #0]
void DMA2D_Suspend(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800545a:	b918      	cbnz	r0, 8005464 <DMA2D_Suspend+0x14>
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
  }
  else
  {
    /* Continue DMA2D transfer by clearing STOP bit */
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 800545c:	f022 0202 	bic.w	r2, r2, #2
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 8005464:	f042 0202 	orr.w	r2, r2, #2
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	4770      	bx	lr

0800546c <DMA2D_FGConfig>:
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 800546c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8005470:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005474:	6801      	ldr	r1, [r0, #0]
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 8005476:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 8005478:	60d9      	str	r1, [r3, #12]

  /* Configures the FG offset */
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 800547a:	6919      	ldr	r1, [r3, #16]
 800547c:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8005480:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005484:	6119      	str	r1, [r3, #16]
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 8005486:	691c      	ldr	r4, [r3, #16]
 8005488:	6841      	ldr	r1, [r0, #4]
 800548a:	4321      	orrs	r1, r4
 800548c:	6119      	str	r1, [r3, #16]

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 800548e:	69d9      	ldr	r1, [r3, #28]
 8005490:	22c0      	movs	r2, #192	; 0xc0
 8005492:	f2c0 02fc 	movt	r2, #252	; 0xfc
 8005496:	400a      	ands	r2, r1
 8005498:	61da      	str	r2, [r3, #28]
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800549a:	69df      	ldr	r7, [r3, #28]
 800549c:	6886      	ldr	r6, [r0, #8]
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 800549e:	68c5      	ldr	r5, [r0, #12]
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 80054a0:	6904      	ldr	r4, [r0, #16]
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 80054a2:	6941      	ldr	r1, [r0, #20]
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 80054a4:	6982      	ldr	r2, [r0, #24]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 80054a6:	433e      	orrs	r6, r7
 80054a8:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
 80054ac:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
                    fg_alpha_mode | fg_alphavalue);
 80054b0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 80054b4:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 80054b8:	61da      	str	r2, [r3, #28]
                    fg_alpha_mode | fg_alphavalue);

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 80054ba:	6a1a      	ldr	r2, [r3, #32]
 80054bc:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80054c0:	621a      	str	r2, [r3, #32]
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 80054c2:	6a1d      	ldr	r5, [r3, #32]
 80054c4:	69c4      	ldr	r4, [r0, #28]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
                    fg_alpha_mode | fg_alphavalue);

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 80054c6:	6a01      	ldr	r1, [r0, #32]
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 80054c8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 80054ca:	432c      	orrs	r4, r5
 80054cc:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
 80054d0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80054d4:	621a      	str	r2, [r3, #32]

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 80054d6:	6a82      	ldr	r2, [r0, #40]	; 0x28
}
 80054d8:	bcf0      	pop	{r4, r5, r6, r7}
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 80054da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop

080054e0 <DMA2D_FG_StructInit>:
  * @retval None
  */
void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
  /*!< Initialize the DMA2D foreground memory address */
  DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 80054e0:	2300      	movs	r3, #0
 80054e2:	6003      	str	r3, [r0, #0]

  /*!< Initialize the DMA2D foreground offset */
  DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 80054e4:	6043      	str	r3, [r0, #4]

  /*!< Initialize the DMA2D foreground color mode */
  DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 80054e6:	6083      	str	r3, [r0, #8]

  /*!< Initialize the DMA2D foreground CLUT color mode */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 80054e8:	60c3      	str	r3, [r0, #12]

  /*!< Initialize the DMA2D foreground CLUT size */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 80054ea:	6103      	str	r3, [r0, #16]

  /*!< Initialize the DMA2D foreground alpha mode */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 80054ec:	6143      	str	r3, [r0, #20]

  /*!< Initialize the DMA2D foreground alpha value */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 80054ee:	6183      	str	r3, [r0, #24]

  /*!< Initialize the DMA2D foreground blue value */
  DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 80054f0:	61c3      	str	r3, [r0, #28]

  /*!< Initialize the DMA2D foreground green value */
  DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 80054f2:	6203      	str	r3, [r0, #32]

  /*!< Initialize the DMA2D foreground red value */
  DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 80054f4:	6243      	str	r3, [r0, #36]	; 0x24

  /*!< Initialize the DMA2D foreground CLUT memory address */
  DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 80054f6:	6283      	str	r3, [r0, #40]	; 0x28
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop

080054fc <DMA2D_BGConfig>:
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 80054fc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8005500:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005504:	6801      	ldr	r1, [r0, #0]
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 8005506:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 8005508:	6159      	str	r1, [r3, #20]

  /* Configures the BG offset */
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 800550a:	6999      	ldr	r1, [r3, #24]
 800550c:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8005510:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005514:	6199      	str	r1, [r3, #24]
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 8005516:	699c      	ldr	r4, [r3, #24]
 8005518:	6841      	ldr	r1, [r0, #4]
 800551a:	4321      	orrs	r1, r4
 800551c:	6199      	str	r1, [r3, #24]

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
 800551e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005520:	22c0      	movs	r2, #192	; 0xc0
 8005522:	f2c0 02fc 	movt	r2, #252	; 0xfc
 8005526:	400a      	ands	r2, r1
 8005528:	625a      	str	r2, [r3, #36]	; 0x24
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800552a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 800552c:	6886      	ldr	r6, [r0, #8]
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 800552e:	68c5      	ldr	r5, [r0, #12]
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 8005530:	6904      	ldr	r4, [r0, #16]
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 8005532:	6941      	ldr	r1, [r0, #20]
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 8005534:	6982      	ldr	r2, [r0, #24]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 8005536:	433e      	orrs	r6, r7
 8005538:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
 800553c:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
                    bg_alpha_mode | bg_alphavalue);
 8005540:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 8005544:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
                    bg_alpha_mode | bg_alphavalue);

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 800554a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800554c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005550:	629a      	str	r2, [r3, #40]	; 0x28
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 8005552:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005554:	69c4      	ldr	r4, [r0, #28]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
                    bg_alpha_mode | bg_alphavalue);

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 8005556:	6a01      	ldr	r1, [r0, #32]
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 8005558:	6a42      	ldr	r2, [r0, #36]	; 0x24
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 800555a:	432c      	orrs	r4, r5
 800555c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
 8005560:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8005564:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 8005566:	6a82      	ldr	r2, [r0, #40]	; 0x28

}
 8005568:	bcf0      	pop	{r4, r5, r6, r7}
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 800556a:	631a      	str	r2, [r3, #48]	; 0x30

}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop

08005570 <DMA2D_BG_StructInit>:
  * @retval None
  */
void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
  /*!< Initialize the DMA2D background memory address */
  DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
 8005570:	2300      	movs	r3, #0
 8005572:	6003      	str	r3, [r0, #0]

  /*!< Initialize the DMA2D background offset */
  DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 8005574:	6043      	str	r3, [r0, #4]

  /*!< Initialize the DMA2D background color mode */
  DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 8005576:	6083      	str	r3, [r0, #8]

  /*!< Initialize the DMA2D background CLUT color mode */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 8005578:	60c3      	str	r3, [r0, #12]

  /*!< Initialize the DMA2D background CLUT size */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 800557a:	6103      	str	r3, [r0, #16]

  /*!< Initialize the DMA2D background alpha mode */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800557c:	6143      	str	r3, [r0, #20]

  /*!< Initialize the DMA2D background alpha value */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 800557e:	6183      	str	r3, [r0, #24]

  /*!< Initialize the DMA2D background blue value */
  DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 8005580:	61c3      	str	r3, [r0, #28]

  /*!< Initialize the DMA2D background green value */
  DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 8005582:	6203      	str	r3, [r0, #32]

  /*!< Initialize the DMA2D background red value */
  DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 8005584:	6243      	str	r3, [r0, #36]	; 0x24

  /*!< Initialize the DMA2D background CLUT memory address */
  DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 8005586:	6283      	str	r3, [r0, #40]	; 0x28
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop

0800558c <DMA2D_FGStart>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 800558c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8005590:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005594:	69da      	ldr	r2, [r3, #28]
void DMA2D_FGStart(FunctionalState NewState) 
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005596:	b918      	cbnz	r0, 80055a0 <DMA2D_FGStart+0x14>
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
  }
  else
  {
    /* abort the transfer */
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 8005598:	f022 0220 	bic.w	r2, r2, #32
 800559c:	61da      	str	r2, [r3, #28]
 800559e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 80055a0:	f042 0220 	orr.w	r2, r2, #32
 80055a4:	61da      	str	r2, [r3, #28]
 80055a6:	4770      	bx	lr

080055a8 <DMA2D_BGStart>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 80055a8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80055ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80055b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void DMA2D_BGStart(FunctionalState NewState) 
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80055b2:	b918      	cbnz	r0, 80055bc <DMA2D_BGStart+0x14>
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
  }
  else
  {
    /* abort the transfer */
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 80055b4:	f022 0220 	bic.w	r2, r2, #32
 80055b8:	625a      	str	r2, [r3, #36]	; 0x24
 80055ba:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 80055bc:	f042 0220 	orr.w	r2, r2, #32
 80055c0:	625a      	str	r2, [r3, #36]	; 0x24
 80055c2:	4770      	bx	lr

080055c4 <DMA2D_DeadTimeConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 80055c4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80055c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80055cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /* Check the parameters */
  assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80055ce:	b919      	cbnz	r1, 80055d8 <DMA2D_DeadTimeConfig+0x14>
    DeadTime = DMA2D_DeadTime << 8;
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
  }
  else
  {
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 80055d0:	f022 0201 	bic.w	r2, r2, #1
 80055d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80055d6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 80055d8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80055dc:	f022 0201 	bic.w	r2, r2, #1
 80055e0:	64da      	str	r2, [r3, #76]	; 0x4c
    DeadTime = DMA2D_DeadTime << 8;
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 80055e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80055ec:	64d8      	str	r0, [r3, #76]	; 0x4c
 80055ee:	4770      	bx	lr

080055f0 <DMA2D_LineWatermarkConfig>:
{
  /* Check the parameters */
  assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));

  /* Sets the Line watermark configuration */
  DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
 80055f0:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80055f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80055f8:	6498      	str	r0, [r3, #72]	; 0x48
 80055fa:	4770      	bx	lr

080055fc <DMA2D_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 80055fc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8005600:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005604:	681a      	ldr	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005606:	b919      	cbnz	r1, 8005610 <DMA2D_ITConfig+0x14>
    DMA2D->CR |= DMA2D_IT;
  }
  else
  {
    /* Disable the selected DMA2D interrupts */
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
 8005608:	ea22 0000 	bic.w	r0, r2, r0
 800560c:	6018      	str	r0, [r3, #0]
 800560e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 8005610:	4310      	orrs	r0, r2
 8005612:	6018      	str	r0, [r3, #0]
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop

08005618 <DMA2D_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 8005618:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800561c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4218      	tst	r0, r3
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
}
 8005624:	bf0c      	ite	eq
 8005626:	2000      	moveq	r0, #0
 8005628:	2001      	movne	r0, #1
 800562a:	4770      	bx	lr

0800562c <DMA2D_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
    
  /* Clear the corresponding DMA2D flag */
  DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 800562c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8005630:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005634:	6098      	str	r0, [r3, #8]
 8005636:	4770      	bx	lr

08005638 <DMA2D_GetITStatus>:
  uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
  
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));

  if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 8005638:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800563c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005640:	685a      	ldr	r2, [r3, #4]
  else
  {
    bitstatus = RESET;
  }
  
  if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4003      	ands	r3, r0
 8005646:	d005      	beq.n	8005654 <DMA2D_GetITStatus+0x1c>
 8005648:	ea12 2010 	ands.w	r0, r2, r0, lsr #8
  {
    bitstatus = SET;
 800564c:	bf0c      	ite	eq
 800564e:	2000      	moveq	r0, #0
 8005650:	2001      	movne	r0, #1
 8005652:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8005654:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 8005656:	4770      	bx	lr

08005658 <DMA2D_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 8005658:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800565c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  */
void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
{
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
 8005660:	0a00      	lsrs	r0, r0, #8
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 8005662:	6098      	str	r0, [r3, #8]
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop

08005668 <LTDC_DeInit>:
  * @param  None
  * @retval None
  */

void LTDC_DeInit(void)
{
 8005668:	b508      	push	{r3, lr}
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
 800566a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800566e:	2101      	movs	r1, #1
 8005670:	f7fe fc36 	bl	8003ee0 <RCC_APB2PeriphResetCmd>
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 8005674:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005678:	2100      	movs	r1, #0
}
 800567a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void LTDC_DeInit(void)
{
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 800567e:	f7fe bc2f 	b.w	8003ee0 <RCC_APB2PeriphResetCmd>
 8005682:	bf00      	nop

08005684 <LTDC_Init>:
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005684:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005688:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800568c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005690:	6899      	ldr	r1, [r3, #8]
 8005692:	f2cf 0200 	movt	r2, #61440	; 0xf000
 8005696:	4011      	ands	r1, r2
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 8005698:	b470      	push	{r4, r5, r6}
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800569a:	6099      	str	r1, [r3, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 800569c:	689d      	ldr	r5, [r3, #8]
 800569e:	6944      	ldr	r4, [r0, #20]
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 80056a0:	6901      	ldr	r1, [r0, #16]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 80056a2:	432c      	orrs	r4, r5
 80056a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80056a8:	6099      	str	r1, [r3, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80056aa:	68d9      	ldr	r1, [r3, #12]
 80056ac:	4011      	ands	r1, r2
 80056ae:	60d9      	str	r1, [r3, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 80056b0:	68dd      	ldr	r5, [r3, #12]
 80056b2:	69c4      	ldr	r4, [r0, #28]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 80056b4:	6981      	ldr	r1, [r0, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 80056b6:	432c      	orrs	r4, r5
 80056b8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80056bc:	60d9      	str	r1, [r3, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80056be:	6919      	ldr	r1, [r3, #16]
 80056c0:	4011      	ands	r1, r2
 80056c2:	6119      	str	r1, [r3, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 80056c4:	691d      	ldr	r5, [r3, #16]
 80056c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 80056c8:	6a01      	ldr	r1, [r0, #32]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 80056ca:	432c      	orrs	r4, r5
 80056cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80056d0:	6119      	str	r1, [r3, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80056d2:	6959      	ldr	r1, [r3, #20]
 80056d4:	400a      	ands	r2, r1
 80056d6:	615a      	str	r2, [r3, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 80056d8:	695c      	ldr	r4, [r3, #20]
 80056da:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 80056dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 80056de:	4321      	orrs	r1, r4
 80056e0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80056e4:	615a      	str	r2, [r3, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 80056e6:	6999      	ldr	r1, [r3, #24]
 80056e8:	f648 028f 	movw	r2, #34959	; 0x888f
 80056ec:	f6c0 72fe 	movt	r2, #4094	; 0xffe
 80056f0:	400a      	ands	r2, r1
 80056f2:	619a      	str	r2, [r3, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80056f4:	699e      	ldr	r6, [r3, #24]
 80056f6:	6805      	ldr	r5, [r0, #0]
 80056f8:	6844      	ldr	r4, [r0, #4]
 80056fa:	6881      	ldr	r1, [r0, #8]
 80056fc:	68c2      	ldr	r2, [r0, #12]
 80056fe:	4335      	orrs	r5, r6
 8005700:	432c      	orrs	r4, r5
 8005702:	4321      	orrs	r1, r4
 8005704:	430a      	orrs	r2, r1
 8005706:	619a      	str	r2, [r3, #24]

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 800570a:	6b44      	ldr	r4, [r0, #52]	; 0x34
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 800570c:	6b01      	ldr	r1, [r0, #48]	; 0x30

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800570e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005712:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 8005714:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005716:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005718:	4302      	orrs	r2, r0
 800571a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800571e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005722:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005724:	bc70      	pop	{r4, r5, r6}
 8005726:	4770      	bx	lr

08005728 <LTDC_StructInit>:
  */

void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
{
  /*--------------- Reset LTDC init structure parameters values ----------------*/
  LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
 8005728:	2300      	movs	r3, #0
 800572a:	6003      	str	r3, [r0, #0]
  LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
 800572c:	6043      	str	r3, [r0, #4]
  LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
 800572e:	6083      	str	r3, [r0, #8]
  LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
 8005730:	60c3      	str	r3, [r0, #12]
  LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
 8005732:	6103      	str	r3, [r0, #16]
  LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
 8005734:	6143      	str	r3, [r0, #20]
  LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
 8005736:	6183      	str	r3, [r0, #24]
  LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
 8005738:	61c3      	str	r3, [r0, #28]
  LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
 800573a:	6203      	str	r3, [r0, #32]
  LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
 800573c:	6243      	str	r3, [r0, #36]	; 0x24
  LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
 800573e:	6283      	str	r3, [r0, #40]	; 0x28
  LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
 8005740:	62c3      	str	r3, [r0, #44]	; 0x2c
  LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
 8005742:	6303      	str	r3, [r0, #48]	; 0x30
  LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
 8005744:	6343      	str	r3, [r0, #52]	; 0x34
  LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
 8005746:	6383      	str	r3, [r0, #56]	; 0x38
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop

0800574c <LTDC_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 800574c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005750:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005754:	699a      	ldr	r2, [r3, #24]
void LTDC_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005756:	b918      	cbnz	r0, 8005760 <LTDC_Cmd+0x14>
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
  }
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 8005758:	f022 0201 	bic.w	r2, r2, #1
 800575c:	619a      	str	r2, [r3, #24]
 800575e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	619a      	str	r2, [r3, #24]
 8005766:	4770      	bx	lr

08005768 <LTDC_DitherCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 8005768:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800576c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005770:	699a      	ldr	r2, [r3, #24]
void LTDC_DitherCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005772:	b918      	cbnz	r0, 800577c <LTDC_DitherCmd+0x14>
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
  }
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 8005774:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005778:	619a      	str	r2, [r3, #24]
 800577a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 800577c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005780:	619a      	str	r2, [r3, #24]
 8005782:	4770      	bx	lr

08005784 <LTDC_GetRGBWidth>:

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 8005784:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005788:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800578c:	f648 028f 	movw	r2, #34959	; 0x888f
 8005790:	6999      	ldr	r1, [r3, #24]
 8005792:	f6c0 72fe 	movt	r2, #4094	; 0xffe
 8005796:	400a      	ands	r2, r1
  *         the Dither RGB width.
  * @retval None
  */

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
 8005798:	b410      	push	{r4}
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 800579a:	619a      	str	r2, [r3, #24]

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 800579c:	699c      	ldr	r4, [r3, #24]
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 800579e:	6999      	ldr	r1, [r3, #24]
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 80057a0:	699a      	ldr	r2, [r3, #24]
{
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 80057a2:	f3c4 1402 	ubfx	r4, r4, #4, #3
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 80057a6:	f3c1 2102 	ubfx	r1, r1, #8, #3
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 80057aa:	f3c2 3202 	ubfx	r2, r2, #12, #3

  return LTDC_RGB_InitStruct;
 80057ae:	6004      	str	r4, [r0, #0]
 80057b0:	6041      	str	r1, [r0, #4]
 80057b2:	6082      	str	r2, [r0, #8]
}
 80057b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop

080057bc <LTDC_RGBStructInit>:
  * @retval None
  */

void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
{
  LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
 80057bc:	2302      	movs	r3, #2
 80057be:	6003      	str	r3, [r0, #0]
  LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
 80057c0:	6043      	str	r3, [r0, #4]
  LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
 80057c2:	6083      	str	r3, [r0, #8]
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop

080057c8 <LTDC_LIPConfig>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
 80057c8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80057cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80057d0:	6418      	str	r0, [r3, #64]	; 0x40
 80057d2:	4770      	bx	lr

080057d4 <LTDC_ReloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 80057d4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80057d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80057dc:	6258      	str	r0, [r3, #36]	; 0x24
 80057de:	4770      	bx	lr

080057e0 <LTDC_LayerInit>:
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80057e0:	6843      	ldr	r3, [r0, #4]
  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 80057e2:	f8d1 c01c 	ldr.w	ip, [r1, #28]
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 80057e6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80057ea:	f403 4b70 	and.w	fp, r3, #61440	; 0xf000
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 80057ee:	e891 000c 	ldmia.w	r1, {r2, r3}
 80057f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 80057f6:	f8d1 a00c 	ldr.w	sl, [r1, #12]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 80057fa:	f8d1 9008 	ldr.w	r9, [r1, #8]
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 80057fe:	f8d1 8020 	ldr.w	r8, [r1, #32]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8005802:	698f      	ldr	r7, [r1, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 8005804:	690d      	ldr	r5, [r1, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 8005806:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 8005808:	694c      	ldr	r4, [r1, #20]
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800580a:	f8c0 b004 	str.w	fp, [r0, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 800580e:	6042      	str	r2, [r0, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005810:	6883      	ldr	r3, [r0, #8]
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 8005812:	f8d1 b02c 	ldr.w	fp, [r1, #44]	; 0x2c
 8005816:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 8005818:	ea49 490a 	orr.w	r9, r9, sl, lsl #16
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800581c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005820:	6083      	str	r3, [r0, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 8005822:	f8c0 9008 	str.w	r9, [r0, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 8005826:	6903      	ldr	r3, [r0, #16]
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 8005828:	f8d1 9030 	ldr.w	r9, [r1, #48]	; 0x30
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 800582c:	ea4f 4808 	mov.w	r8, r8, lsl #16
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8005830:	ea48 2c0c 	orr.w	ip, r8, ip, lsl #8
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 8005834:	f023 0307 	bic.w	r3, r3, #7
  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8005838:	ea4c 0707 	orr.w	r7, ip, r7
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 800583c:	6103      	str	r3, [r0, #16]
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
                        dcred | dcalpha);
 800583e:	ea47 6606 	orr.w	r6, r7, r6, lsl #24
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 8005842:	6105      	str	r5, [r0, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005844:	2300      	movs	r3, #0
 8005846:	6985      	ldr	r5, [r0, #24]
 8005848:	6183      	str	r3, [r0, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 800584a:	6186      	str	r6, [r0, #24]
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 800584c:	6945      	ldr	r5, [r0, #20]
 800584e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005852:	6145      	str	r5, [r0, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 8005854:	6144      	str	r4, [r0, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005856:	69c4      	ldr	r4, [r0, #28]
 8005858:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 800585c:	ea4b 0202 	orr.w	r2, fp, r2
  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005860:	f024 0407 	bic.w	r4, r4, #7
 8005864:	61c4      	str	r4, [r0, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 8005866:	61c2      	str	r2, [r0, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005868:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800586a:	6283      	str	r3, [r0, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 800586c:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005870:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 8005872:	6b8c      	ldr	r4, [r1, #56]	; 0x38
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8005874:	6b4a      	ldr	r2, [r1, #52]	; 0x34

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 8005876:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8005878:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800587c:	f005 21e0 	and.w	r1, r5, #3758153728	; 0xe000e000
 8005880:	62c1      	str	r1, [r0, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8005882:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005884:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005886:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800588a:	f022 0207 	bic.w	r2, r2, #7
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 800588e:	b082      	sub	sp, #8
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005890:	6302      	str	r2, [r0, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 8005892:	6303      	str	r3, [r0, #48]	; 0x30

}
 8005894:	b002      	add	sp, #8
 8005896:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800589a:	4770      	bx	lr

0800589c <LTDC_LayerStructInit>:
void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 800589c:	2300      	movs	r3, #0
  *         be initialized.
  * @retval None
  */

void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
 800589e:	b410      	push	{r4}
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 80058a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 80058a4:	24ff      	movs	r4, #255	; 0xff
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 80058a6:	2207      	movs	r2, #7

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 80058a8:	6144      	str	r4, [r0, #20]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 80058aa:	6281      	str	r1, [r0, #40]	; 0x28
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 80058ac:	62c2      	str	r2, [r0, #44]	; 0x2c
void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 80058ae:	6003      	str	r3, [r0, #0]
  LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
 80058b0:	6043      	str	r3, [r0, #4]

  /*!< Initialize the vertical limit member */
  LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
 80058b2:	6083      	str	r3, [r0, #8]
  LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
 80058b4:	60c3      	str	r3, [r0, #12]

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
 80058b6:	6103      	str	r3, [r0, #16]

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;

  /*!< Initialize the default color values */
  LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
 80058b8:	6183      	str	r3, [r0, #24]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
 80058ba:	61c3      	str	r3, [r0, #28]
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
 80058bc:	6203      	str	r3, [r0, #32]
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
 80058be:	6243      	str	r3, [r0, #36]	; 0x24
  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;

  /*!< Initialize the frame buffer start address */
  LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
 80058c0:	6303      	str	r3, [r0, #48]	; 0x30

  /*!< Initialize the frame buffer pitch and line length */
  LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
 80058c2:	6343      	str	r3, [r0, #52]	; 0x34
  LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
 80058c4:	6383      	str	r3, [r0, #56]	; 0x38

  /*!< Initialize the frame buffer line number */
  LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
 80058c6:	63c3      	str	r3, [r0, #60]	; 0x3c
}
 80058c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop

080058d0 <LTDC_LayerCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 80058d0:	6803      	ldr	r3, [r0, #0]
void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80058d2:	b919      	cbnz	r1, 80058dc <LTDC_LayerCmd+0xc>
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
  }
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 80058d4:	f023 0301 	bic.w	r3, r3, #1
 80058d8:	6003      	str	r3, [r0, #0]
 80058da:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 80058dc:	f043 0301 	orr.w	r3, r3, #1
 80058e0:	6003      	str	r3, [r0, #0]
 80058e2:	4770      	bx	lr

080058e4 <LTDC_GetPosStatus>:

LTDC_PosTypeDef LTDC_GetPosStatus(void)
{
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
 80058e4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80058e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80058ec:	2200      	movs	r2, #0
 80058ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80058f0:	645a      	str	r2, [r3, #68]	; 0x44

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 80058f2:	6c59      	ldr	r1, [r3, #68]	; 0x44
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 80058f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 80058f6:	0c09      	lsrs	r1, r1, #16
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 80058f8:	b292      	uxth	r2, r2

  return LTDC_Pos_InitStruct;
 80058fa:	e880 0006 	stmia.w	r0, {r1, r2}
}
 80058fe:	4770      	bx	lr

08005900 <LTDC_PosStructInit>:
  * @retval None
  */

void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
{
  LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
 8005900:	2300      	movs	r3, #0
 8005902:	6003      	str	r3, [r0, #0]
  LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
 8005904:	6043      	str	r3, [r0, #4]
 8005906:	4770      	bx	lr

08005908 <LTDC_GetCDStatus>:
  FlagStatus bitstatus;

  /* Check the parameters */
  assert_param(IS_LTDC_GET_CD(LTDC_CD));

  if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
 8005908:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800590c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005912:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005914:	bf0c      	ite	eq
 8005916:	2000      	moveq	r0, #0
 8005918:	2001      	movne	r0, #1
 800591a:	4770      	bx	lr

0800591c <LTDC_ColorKeyingConfig>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
{ 
 800591c:	b430      	push	{r4, r5}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
 800591e:	b95a      	cbnz	r2, 8005938 <LTDC_ColorKeyingConfig+0x1c>
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
  }
  else
  {
    /* Disable LTDC color keying by clearing COLKEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8005920:	6803      	ldr	r3, [r0, #0]
 8005922:	f023 0302 	bic.w	r3, r3, #2
 8005926:	6003      	str	r3, [r0, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 8005928:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800592c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005930:	2201      	movs	r2, #1
 8005932:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005934:	bc30      	pop	{r4, r5}
 8005936:	4770      	bx	lr
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8005938:	6805      	ldr	r5, [r0, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
 800593a:	684c      	ldr	r4, [r1, #4]
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
 800593c:	688a      	ldr	r2, [r1, #8]
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 800593e:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8005940:	f045 0102 	orr.w	r1, r5, #2
 8005944:	6001      	str	r1, [r0, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8005946:	68c1      	ldr	r1, [r0, #12]
 8005948:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800594c:	60c1      	str	r1, [r0, #12]
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 800594e:	68c1      	ldr	r1, [r0, #12]
 8005950:	430b      	orrs	r3, r1
 8005952:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8005956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800595a:	60c3      	str	r3, [r0, #12]
 800595c:	e7e4      	b.n	8005928 <LTDC_ColorKeyingConfig+0xc>
 800595e:	bf00      	nop

08005960 <LTDC_ColorKeyingStructInit>:
  */

void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
{
  /*!< Initialize the color keying values */
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
 8005960:	2300      	movs	r3, #0
 8005962:	6003      	str	r3, [r0, #0]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
 8005964:	6043      	str	r3, [r0, #4]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
 8005966:	6083      	str	r3, [r0, #8]
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop

0800596c <LTDC_CLUTCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800596c:	6803      	ldr	r3, [r0, #0]
void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800596e:	b949      	cbnz	r1, 8005984 <LTDC_CLUTCmd+0x18>
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
  }
  else
  {
    /* Disable CLUT by clearing CLUTEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
 8005970:	f023 0310 	bic.w	r3, r3, #16
 8005974:	6003      	str	r3, [r0, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 8005976:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800597a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800597e:	2201      	movs	r2, #1
 8005980:	625a      	str	r2, [r3, #36]	; 0x24
 8005982:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8005984:	f043 0310 	orr.w	r3, r3, #16
 8005988:	6003      	str	r3, [r0, #0]
 800598a:	e7f4      	b.n	8005976 <LTDC_CLUTCmd+0xa>

0800598c <LTDC_CLUTInit>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{  
 800598c:	b430      	push	{r4, r5}
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
 800598e:	e891 0034 	ldmia.w	r1, {r2, r4, r5}
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
 8005992:	68cb      	ldr	r3, [r1, #12]
 8005994:	041b      	lsls	r3, r3, #16
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 8005996:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800599a:	4323      	orrs	r3, r4
                              green | red);
 800599c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 80059a0:	6403      	str	r3, [r0, #64]	; 0x40
                              green | red);
}
 80059a2:	bc30      	pop	{r4, r5}
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop

080059a8 <LTDC_CLUTStructInit>:
  */

void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{
  /*!< Initialize the CLUT adress and RGB values */
  LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
 80059a8:	2300      	movs	r3, #0
 80059aa:	6003      	str	r3, [r0, #0]
  LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
 80059ac:	6043      	str	r3, [r0, #4]
  LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
 80059ae:	6083      	str	r3, [r0, #8]
  LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
 80059b0:	60c3      	str	r3, [r0, #12]
 80059b2:	4770      	bx	lr

080059b4 <LTDC_LayerPosition>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         position reconfiguration.
  */

void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
{
 80059b4:	b430      	push	{r4, r5}
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80059b6:	6844      	ldr	r4, [r0, #4]
 80059b8:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
 80059bc:	6044      	str	r4, [r0, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80059be:	6884      	ldr	r4, [r0, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 80059c0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80059c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80059c8:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
 80059cc:	6084      	str	r4, [r0, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 80059ce:	68dc      	ldr	r4, [r3, #12]
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
  
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
 80059d0:	6903      	ldr	r3, [r0, #16]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 80059d2:	b2a5      	uxth	r5, r4
 80059d4:	3501      	adds	r5, #1
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 80059d6:	eb01 4114 	add.w	r1, r1, r4, lsr #16
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 80059da:	442a      	add	r2, r5
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 80059dc:	1c4c      	adds	r4, r1, #1
  
  tempreg = LTDC_Layerx->PFCR;
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
  {
    temp = 4;
 80059de:	2504      	movs	r5, #4
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 80059e0:	b153      	cbz	r3, 80059f8 <LTDC_LayerPosition+0x44>
  {
    temp = 4;
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 80059e2:	2b01      	cmp	r3, #1
  {
    temp = 3;
 80059e4:	bf08      	it	eq
 80059e6:	2503      	moveq	r5, #3
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
  {
    temp = 4;
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 80059e8:	d006      	beq.n	80059f8 <LTDC_LayerPosition+0x44>
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
 80059ea:	1e99      	subs	r1, r3, #2
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
 80059ec:	2902      	cmp	r1, #2
 80059ee:	d918      	bls.n	8005a22 <LTDC_LayerPosition+0x6e>
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 80059f0:	2b07      	cmp	r3, #7
  {
    temp = 2;  
  }
  else
  {
    temp = 1;
 80059f2:	bf18      	it	ne
 80059f4:	2501      	movne	r5, #1
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 80059f6:	d014      	beq.n	8005a22 <LTDC_LayerPosition+0x6e>
  else
  {
    temp = 1;
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
 80059f8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
  
  tempreg = LTDC_Layerx->CFBLNR;
 80059fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    temp = 1;
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 80059fc:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8005a00:	3903      	subs	r1, #3
  
  tempreg = LTDC_Layerx->CFBLNR;
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 8005a02:	f3c3 030a 	ubfx	r3, r3, #0, #11
  {
    temp = 1;
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 8005a06:	fbb1 f1f5 	udiv	r1, r1, r5
  
  tempreg = LTDC_Layerx->CFBLNR;
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 8005a0a:	3b01      	subs	r3, #1
  {
    temp = 1;
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 8005a0c:	1e65      	subs	r5, r4, #1
 8005a0e:	4429      	add	r1, r5
  
  tempreg = LTDC_Layerx->CFBLNR;
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 8005a10:	4413      	add	r3, r2
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8005a12:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8005a16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
  
  tempreg = LTDC_Layerx->CFBLNR;
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8005a1a:	6044      	str	r4, [r0, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8005a1c:	6082      	str	r2, [r0, #8]
}
 8005a1e:	bc30      	pop	{r4, r5}
 8005a20:	4770      	bx	lr
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8005a22:	2502      	movs	r5, #2
 8005a24:	e7e8      	b.n	80059f8 <LTDC_LayerPosition+0x44>
 8005a26:	bf00      	nop

08005a28 <LTDC_LayerAlpha>:
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 8005a28:	6141      	str	r1, [r0, #20]
 8005a2a:	4770      	bx	lr

08005a2c <LTDC_LayerAddress>:
  */

void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
{
  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->CFBAR = Address;
 8005a2c:	6281      	str	r1, [r0, #40]	; 0x28
 8005a2e:	4770      	bx	lr

08005a30 <LTDC_LayerSize>:
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
 8005a30:	6903      	ldr	r3, [r0, #16]
  * @retval Reload of the shadow registers values must be applied after layer 
  *         size reconfiguration.
  */

void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
{
 8005a32:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8005a34:	b32b      	cbz	r3, 8005a82 <LTDC_LayerSize+0x52>
  {
    temp = 4;
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	bf08      	it	eq
 8005a3a:	2303      	moveq	r3, #3
 8005a3c:	d006      	beq.n	8005a4c <LTDC_LayerSize+0x1c>
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8005a3e:	1e9c      	subs	r4, r3, #2
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8005a40:	2c02      	cmp	r4, #2
 8005a42:	d91c      	bls.n	8005a7e <LTDC_LayerSize+0x4e>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8005a44:	2b07      	cmp	r3, #7
 8005a46:	bf18      	it	ne
 8005a48:	2301      	movne	r3, #1
 8005a4a:	d018      	beq.n	8005a7e <LTDC_LayerSize+0x4e>
  {
    temp = 1;
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
 8005a4c:	6845      	ldr	r5, [r0, #4]
  horizontal_start = (tempreg & 0x1FFF);
  horizontal_stop = Width + horizontal_start - 1;  

  tempreg = LTDC_Layerx->WVPCR;
 8005a4e:	6884      	ldr	r4, [r0, #8]
    temp = 1;
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
  horizontal_start = (tempreg & 0x1FFF);
 8005a50:	f3c5 050c 	ubfx	r5, r5, #0, #13
  horizontal_stop = Width + horizontal_start - 1;  

  tempreg = LTDC_Layerx->WVPCR;
  vertical_start = (tempreg & 0x1FFF);
 8005a54:	f3c4 040c 	ubfx	r4, r4, #0, #13
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
  horizontal_start = (tempreg & 0x1FFF);
  horizontal_stop = Width + horizontal_start - 1;  
 8005a5c:	1e6e      	subs	r6, r5, #1

  tempreg = LTDC_Layerx->WVPCR;
  vertical_start = (tempreg & 0x1FFF);
  vertical_stop = Height + vertical_start - 1;  
 8005a5e:	1e67      	subs	r7, r4, #1
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
  horizontal_start = (tempreg & 0x1FFF);
  horizontal_stop = Width + horizontal_start - 1;  
 8005a60:	4431      	add	r1, r6

  tempreg = LTDC_Layerx->WVPCR;
  vertical_start = (tempreg & 0x1FFF);
  vertical_stop = Height + vertical_start - 1;  
 8005a62:	4417      	add	r7, r2
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 8005a64:	1cde      	adds	r6, r3, #3

  tempreg = LTDC_Layerx->WVPCR;
  vertical_start = (tempreg & 0x1FFF);
  vertical_stop = Height + vertical_start - 1;  
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8005a66:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8005a6a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 8005a6e:	ea46 4303 	orr.w	r3, r6, r3, lsl #16

  tempreg = LTDC_Layerx->WVPCR;
  vertical_start = (tempreg & 0x1FFF);
  vertical_stop = Height + vertical_start - 1;  
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8005a72:	6045      	str	r5, [r0, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8005a74:	6084      	str	r4, [r0, #8]

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 8005a76:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
  
}
 8005a78:	bcf0      	pop	{r4, r5, r6, r7}

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
 8005a7a:	6302      	str	r2, [r0, #48]	; 0x30
  
}
 8005a7c:	4770      	bx	lr
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e7e4      	b.n	8005a4c <LTDC_LayerSize+0x1c>
 8005a82:	2304      	movs	r3, #4
 8005a84:	e7e2      	b.n	8005a4c <LTDC_LayerSize+0x1c>
 8005a86:	bf00      	nop

08005a88 <LTDC_LayerPixelFormat>:
{

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 8005a88:	6903      	ldr	r3, [r0, #16]
 8005a8a:	2204      	movs	r2, #4
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8005a8c:	b13b      	cbz	r3, 8005a9e <LTDC_LayerPixelFormat+0x16>
  {
    temp = 4;
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	bf08      	it	eq
 8005a92:	2203      	moveq	r2, #3
 8005a94:	d003      	beq.n	8005a9e <LTDC_LayerPixelFormat+0x16>
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8005a96:	1e9a      	subs	r2, r3, #2
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8005a98:	2a02      	cmp	r2, #2
 8005a9a:	d81b      	bhi.n	8005ad4 <LTDC_LayerPixelFormat+0x4c>
 8005a9c:	2202      	movs	r2, #2
  else
  {
    temp = 1;
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 8005a9e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005aa0:	0c1b      	lsrs	r3, r3, #16
  tempreg = (tempreg / temp); 
 8005aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aa6:	2204      	movs	r2, #4
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 8005aa8:	b161      	cbz	r1, 8005ac4 <LTDC_LayerPixelFormat+0x3c>
  {
    temp = 4;
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 8005aaa:	2901      	cmp	r1, #1
 8005aac:	bf08      	it	eq
 8005aae:	2203      	moveq	r2, #3
 8005ab0:	d008      	beq.n	8005ac4 <LTDC_LayerPixelFormat+0x3c>
  {
    temp = 3;
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 8005ab2:	1e8a      	subs	r2, r1, #2
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
  {
    temp = 3;
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 8005ab4:	2a02      	cmp	r2, #2
 8005ab6:	bf98      	it	ls
 8005ab8:	2202      	movls	r2, #2
 8005aba:	d903      	bls.n	8005ac4 <LTDC_LayerPixelFormat+0x3c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 8005abc:	2907      	cmp	r1, #7
 8005abe:	bf0c      	ite	eq
 8005ac0:	2202      	moveq	r2, #2
 8005ac2:	2201      	movne	r2, #1
  {
    temp = 1;
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 8005ac4:	fb03 f302 	mul.w	r3, r3, r2
 8005ac8:	1cda      	adds	r2, r3, #3
 8005aca:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8005ace:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 8005ad0:	6101      	str	r1, [r0, #16]
 8005ad2:	4770      	bx	lr
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
          (tempreg == LTDC_Pixelformat_RGB565)    || \
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8005ad4:	2b07      	cmp	r3, #7
 8005ad6:	bf18      	it	ne
 8005ad8:	2201      	movne	r2, #1
 8005ada:	d1e0      	bne.n	8005a9e <LTDC_LayerPixelFormat+0x16>
 8005adc:	e7de      	b.n	8005a9c <LTDC_LayerPixelFormat+0x14>
 8005ade:	bf00      	nop

08005ae0 <LTDC_ITConfig>:
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    LTDC->IER |= LTDC_IT;
 8005ae0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005ae4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005aea:	b919      	cbnz	r1, 8005af4 <LTDC_ITConfig+0x14>
  {
    LTDC->IER |= LTDC_IT;
  }
  else
  {
    LTDC->IER &= (uint32_t)~LTDC_IT;
 8005aec:	ea22 0000 	bic.w	r0, r2, r0
 8005af0:	6358      	str	r0, [r3, #52]	; 0x34
 8005af2:	4770      	bx	lr
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    LTDC->IER |= LTDC_IT;
 8005af4:	4310      	orrs	r0, r2
 8005af6:	6358      	str	r0, [r3, #52]	; 0x34
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop

08005afc <LTDC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
 8005afc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005b00:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005b08:	bf0c      	ite	eq
 8005b0a:	2000      	moveq	r0, #0
 8005b0c:	2001      	movne	r0, #1
 8005b0e:	4770      	bx	lr

08005b10 <LTDC_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  /* Clear the corresponding LTDC flag */
  LTDC->ICR = (uint32_t)LTDC_FLAG;
 8005b10:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005b14:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b18:	63d8      	str	r0, [r3, #60]	; 0x3c
 8005b1a:	4770      	bx	lr

08005b1c <LTDC_GetITStatus>:
  ITStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
 8005b1c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005b20:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  else
  {
    bitstatus = RESET;
  }

  if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b28:	4003      	ands	r3, r0
 8005b2a:	d004      	beq.n	8005b36 <LTDC_GetITStatus+0x1a>
 8005b2c:	4210      	tst	r0, r2
  {
    bitstatus = SET;
 8005b2e:	bf0c      	ite	eq
 8005b30:	2000      	moveq	r0, #0
 8005b32:	2001      	movne	r0, #1
 8005b34:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8005b36:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop

08005b3c <LTDC_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  /* Clear the corresponding LTDC Interrupt */
  LTDC->ICR = (uint32_t)LTDC_IT;
 8005b3c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005b40:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b44:	63d8      	str	r0, [r3, #60]	; 0x3c
 8005b46:	4770      	bx	lr

08005b48 <FMC_NORSRAMDeInit>:
  *            @arg FMC_Bank1_NORSRAM3: FMC Bank1 NOR/SRAM3 
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
{
 8005b48:	b410      	push	{r4}
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 8005b4a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
{
  /* Check the parameter */
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
 8005b4e:	b198      	cbz	r0, 8005b78 <FMC_NORSRAMDeInit+0x30>
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
  }
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
 8005b50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005b54:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 8005b58:	f44f 7382 	mov.w	r3, #260	; 0x104
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 8005b5c:	1c44      	adds	r4, r0, #1
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 8005b5e:	f2ca 0300 	movt	r3, #40960	; 0xa000
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 8005b62:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005b66:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005b6a:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 8005b6e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8005b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b76:	4770      	bx	lr
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 8005b78:	f243 02db 	movw	r2, #12507	; 0x30db
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	e7eb      	b.n	8005b58 <FMC_NORSRAMDeInit+0x10>

08005b80 <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 8005b80:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 8005b84:	6843      	ldr	r3, [r0, #4]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 8005b86:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8005b8a:	68c7      	ldr	r7, [r0, #12]
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 8005b8c:	6906      	ldr	r6, [r0, #16]
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 8005b8e:	6945      	ldr	r5, [r0, #20]
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 8005b90:	6984      	ldr	r4, [r0, #24]
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 8005b92:	69c1      	ldr	r1, [r0, #28]
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 8005b94:	6a02      	ldr	r2, [r0, #32]
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 8005b96:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005b9a:	f8d0 c000 	ldr.w	ip, [r0]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 8005b9e:	ea49 0a03 	orr.w	sl, r9, r3
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 8005ba2:	ea4a 0707 	orr.w	r7, sl, r7
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 8005ba6:	433e      	orrs	r6, r7
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 8005ba8:	4335      	orrs	r5, r6
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 8005baa:	432c      	orrs	r4, r5
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 8005bac:	4321      	orrs	r1, r4
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 8005bae:	430a      	orrs	r2, r1
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 8005bb0:	6a41      	ldr	r1, [r0, #36]	; 0x24
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 8005bb2:	6b05      	ldr	r5, [r0, #48]	; 0x30
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;
 8005bb4:	6b44      	ldr	r4, [r0, #52]	; 0x34
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 8005bb6:	ea42 0301 	orr.w	r3, r2, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 8005bba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 8005bbc:	ea43 0308 	orr.w	r3, r3, r8
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	ea4f 028c 	mov.w	r2, ip, lsl #2
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 8005bc6:	431d      	orrs	r5, r3
 8005bc8:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 8005bcc:	4325      	orrs	r5, r4
            FMC_NORSRAMInitStruct->FMC_ContinousClock;

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 8005bce:	f1b9 0f08 	cmp.w	r9, #8
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005bd2:	6015      	str	r5, [r2, #0]
            FMC_NORSRAMInitStruct->FMC_ContinousClock;

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8005bd4:	bf02      	ittt	eq
 8005bd6:	6813      	ldreq	r3, [r2, #0]
 8005bd8:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8005bdc:	6013      	streq	r3, [r2, #0]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 8005bde:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005be2:	d026      	beq.n	8005c32 <FMC_NORSRAMInit+0xb2>
 8005be4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005be6:	691c      	ldr	r4, [r3, #16]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 8005be8:	e893 0042 	ldmia.w	r3, {r1, r6}
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 8005bec:	699f      	ldr	r7, [r3, #24]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 8005bee:	689d      	ldr	r5, [r3, #8]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 8005bf0:	68da      	ldr	r2, [r3, #12]
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 8005bf2:	695b      	ldr	r3, [r3, #20]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 8005bf4:	4339      	orrs	r1, r7
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 8005bf6:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 8005bfa:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 8005bfe:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 8005c02:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 8005c06:	f10c 0201 	add.w	r2, ip, #1
 8005c0a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 8005c0e:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 8005c12:	f5b8 4f80 	cmp.w	r8, #16384	; 0x4000
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 8005c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 8005c1a:	d021      	beq.n	8005c60 <FMC_NORSRAMInit+0xe0>
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
  }
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 8005c1c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005c20:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8005c24:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005c28:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
  }
  
}
 8005c2c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8005c30:	4770      	bx	lr
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 8005c32:	f1bc 0f00 	cmp.w	ip, #0
 8005c36:	d0d5      	beq.n	8005be4 <FMC_NORSRAMInit+0x64>
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 8005c38:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 8005c3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 8005c3e:	6851      	ldr	r1, [r2, #4]
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 8005c40:	6814      	ldr	r4, [r2, #0]
 8005c42:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005c46:	6014      	str	r4, [r2, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 8005c48:	6814      	ldr	r4, [r2, #0]
 8005c4a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8005c4e:	6014      	str	r4, [r2, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 8005c50:	691c      	ldr	r4, [r3, #16]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 8005c52:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 8005c56:	1e65      	subs	r5, r4, #1
 8005c58:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 8005c5c:	6051      	str	r1, [r2, #4]
 8005c5e:	e7c3      	b.n	8005be8 <FMC_NORSRAMInit+0x68>
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8005c60:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 8005c62:	e893 0024 	ldmia.w	r3, {r2, r5}
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8005c66:	699e      	ldr	r6, [r3, #24]
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8005c68:	689c      	ldr	r4, [r3, #8]
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 8005c6a:	6918      	ldr	r0, [r3, #16]
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8005c6c:	6959      	ldr	r1, [r3, #20]
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8005c6e:	4332      	orrs	r2, r6
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 8005c70:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8005c74:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005c78:	f44f 7382 	mov.w	r3, #260	; 0x104
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 8005c7c:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005c80:	f2ca 0300 	movt	r3, #40960	; 0xa000
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8005c84:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005c88:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
  }
  
}
 8005c8c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop

08005c94 <FMC_NORSRAMStructInit>:
  * @param  FMC_NORSRAMInitStruct: pointer to a FMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
 8005c94:	b4f0      	push	{r4, r5, r6, r7}
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 8005c96:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 8005c98:	6b84      	ldr	r4, [r0, #56]	; 0x38
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	6043      	str	r3, [r0, #4]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 8005c9e:	220f      	movs	r2, #15
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 8005ca0:	2300      	movs	r3, #0
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 8005ca2:	25ff      	movs	r5, #255	; 0xff
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 8005ca4:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 8005ca8:	f44f 5600 	mov.w	r6, #8192	; 0x2000
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 8005cac:	f04f 0c10 	mov.w	ip, #16
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 8005cb0:	6207      	str	r7, [r0, #32]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 8005cb2:	6246      	str	r6, [r0, #36]	; 0x24
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 8005cb4:	f8c0 c00c 	str.w	ip, [r0, #12]
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 8005cb8:	6003      	str	r3, [r0, #0]
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
 8005cba:	6083      	str	r3, [r0, #8]
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 8005cbc:	6103      	str	r3, [r0, #16]
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 8005cbe:	62c3      	str	r3, [r0, #44]	; 0x2c
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 8005cc0:	6143      	str	r3, [r0, #20]
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
 8005cc2:	6183      	str	r3, [r0, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 8005cc4:	61c3      	str	r3, [r0, #28]
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 8005cc6:	6283      	str	r3, [r0, #40]	; 0x28
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
 8005cc8:	6303      	str	r3, [r0, #48]	; 0x30
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
 8005cca:	6343      	str	r3, [r0, #52]	; 0x34
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
 8005ccc:	61a3      	str	r3, [r4, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 8005cce:	6022      	str	r2, [r4, #0]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
 8005cd0:	6062      	str	r2, [r4, #4]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 8005cd2:	60e2      	str	r2, [r4, #12]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
 8005cd4:	6122      	str	r2, [r4, #16]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
 8005cd6:	6162      	str	r2, [r4, #20]
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 8005cd8:	60a5      	str	r5, [r4, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
 8005cda:	608d      	str	r5, [r1, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 8005cdc:	600a      	str	r2, [r1, #0]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
 8005cde:	604a      	str	r2, [r1, #4]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 8005ce0:	60ca      	str	r2, [r1, #12]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision = 15;
 8005ce2:	610a      	str	r2, [r1, #16]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency = 15;
 8005ce4:	614a      	str	r2, [r1, #20]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A;
 8005ce6:	618b      	str	r3, [r1, #24]
}
 8005ce8:	bcf0      	pop	{r4, r5, r6, r7}
 8005cea:	4770      	bx	lr

08005cec <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8005cec:	0080      	lsls	r0, r0, #2
 8005cee:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005cf2:	b939      	cbnz	r1, 8005d04 <FMC_NORSRAMCmd+0x18>
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 8005cf4:	6802      	ldr	r2, [r0, #0]
 8005cf6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005cfa:	f2c0 030f 	movt	r3, #15
 8005cfe:	4013      	ands	r3, r2
 8005d00:	6003      	str	r3, [r0, #0]
 8005d02:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 8005d04:	6803      	ldr	r3, [r0, #0]
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	6003      	str	r3, [r0, #0]
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop

08005d10 <FMC_NANDDeInit>:
void FMC_NANDDeInit(uint32_t FMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8005d10:	2810      	cmp	r0, #16
  {
    /* Set the FMC_Bank2 registers to their reset values */
    FMC_Bank2->PCR2 = 0x00000018;
 8005d12:	bf0c      	ite	eq
 8005d14:	2360      	moveq	r3, #96	; 0x60
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 8005d16:	2380      	movne	r3, #128	; 0x80
 8005d18:	f2ca 0300 	movt	r3, #40960	; 0xa000
    FMC_Bank3->SR3 = 0x00000040;
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8005d1c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 8005d20:	2018      	movs	r0, #24
    FMC_Bank3->SR3 = 0x00000040;
 8005d22:	2140      	movs	r1, #64	; 0x40
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 8005d24:	6018      	str	r0, [r3, #0]
    FMC_Bank3->SR3 = 0x00000040;
 8005d26:	6059      	str	r1, [r3, #4]
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8005d28:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8005d2a:	60da      	str	r2, [r3, #12]
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop

08005d30 <FMC_NANDInit>:
  * @param  FMC_NANDInitStruct : pointer to a FMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FMC NAND specified Banks.                       
  * @retval None
  */
void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{
 8005d30:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 8005d34:	6846      	ldr	r6, [r0, #4]
 8005d36:	6885      	ldr	r5, [r0, #8]
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005d38:	69c2      	ldr	r2, [r0, #28]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005d3a:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 8005d3c:	68c4      	ldr	r4, [r0, #12]
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005d3e:	6891      	ldr	r1, [r2, #8]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005d40:	f8d3 8004 	ldr.w	r8, [r3, #4]
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 8005d44:	f8d0 a010 	ldr.w	sl, [r0, #16]
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 8005d48:	f8d0 c014 	ldr.w	ip, [r0, #20]
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005d4c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005d50:	6817      	ldr	r7, [r2, #0]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 8005d52:	68d2      	ldr	r2, [r2, #12]
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 8005d54:	4335      	orrs	r5, r6
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 8005d56:	f045 0508 	orr.w	r5, r5, #8
            FMC_NANDInitStruct->FMC_ECC |
 8005d5a:	432c      	orrs	r4, r5
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005d5c:	689d      	ldr	r5, [r3, #8]
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
 8005d5e:	6986      	ldr	r6, [r0, #24]
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 8005d60:	6800      	ldr	r0, [r0, #0]
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005d62:	ea4f 4b01 	mov.w	fp, r1, lsl #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005d66:	0429      	lsls	r1, r5, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005d68:	681d      	ldr	r5, [r3, #0]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
 8005d6a:	68db      	ldr	r3, [r3, #12]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005d6c:	ea41 2108 	orr.w	r1, r1, r8, lsl #8
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 8005d70:	2810      	cmp	r0, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005d72:	ea41 0505 	orr.w	r5, r1, r5
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005d76:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 8005d7a:	ea44 040a 	orr.w	r4, r4, sl
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005d7e:	ea4b 2b09 	orr.w	fp, fp, r9, lsl #8
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
  {
    /* FMC_Bank2_NAND registers configuration */
    FMC_Bank2->PCR2 = tmppcr;
 8005d82:	bf0c      	ite	eq
 8005d84:	2360      	moveq	r3, #96	; 0x60
    FMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
 8005d86:	2380      	movne	r3, #128	; 0x80
 8005d88:	f2ca 0300 	movt	r3, #40960	; 0xa000
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 8005d8c:	ea44 2c4c 	orr.w	ip, r4, ip, lsl #9
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005d90:	ea4b 0707 	orr.w	r7, fp, r7
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 8005d94:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005d98:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
    FMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
 8005d9c:	601e      	str	r6, [r3, #0]
    FMC_Bank3->PMEM3 = tmppmem;
 8005d9e:	609f      	str	r7, [r3, #8]
    FMC_Bank3->PATT3 = tmppatt;
 8005da0:	60dd      	str	r5, [r3, #12]
  }
}
 8005da2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005da6:	4770      	bx	lr

08005da8 <FMC_NANDStructInit>:
  * @param  FMC_NANDInitStruct: pointer to a FMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
 8005da8:	b430      	push	{r4, r5}
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8005daa:	6a01      	ldr	r1, [r0, #32]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8005dac:	69c4      	ldr	r4, [r0, #28]
 8005dae:	23fc      	movs	r3, #252	; 0xfc
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8005db0:	2200      	movs	r2, #0
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
 8005db2:	2510      	movs	r5, #16
 8005db4:	6005      	str	r5, [r0, #0]
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
 8005db6:	6085      	str	r5, [r0, #8]
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8005db8:	6042      	str	r2, [r0, #4]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
 8005dba:	60c2      	str	r2, [r0, #12]
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
 8005dbc:	6102      	str	r2, [r0, #16]
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
 8005dbe:	6142      	str	r2, [r0, #20]
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
 8005dc0:	6182      	str	r2, [r0, #24]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8005dc2:	6023      	str	r3, [r4, #0]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005dc4:	6063      	str	r3, [r4, #4]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005dc6:	60a3      	str	r3, [r4, #8]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8005dc8:	60e3      	str	r3, [r4, #12]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8005dca:	600b      	str	r3, [r1, #0]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005dcc:	604b      	str	r3, [r1, #4]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005dce:	608b      	str	r3, [r1, #8]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
 8005dd0:	60cb      	str	r3, [r1, #12]
}
 8005dd2:	bc30      	pop	{r4, r5}
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop

08005dd8 <FMC_NANDCmd>:
void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005dd8:	b151      	cbz	r1, 8005df0 <FMC_NANDCmd+0x18>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8005dda:	2810      	cmp	r0, #16
    {
      FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8005ddc:	bf0c      	ite	eq
 8005dde:	2360      	moveq	r3, #96	; 0x60
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8005de0:	2380      	movne	r3, #128	; 0x80
 8005de2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	f042 0204 	orr.w	r2, r2, #4
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	4770      	bx	lr
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8005df0:	2810      	cmp	r0, #16
    {
      FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8005df2:	bf0c      	ite	eq
 8005df4:	2260      	moveq	r2, #96	; 0x60
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8005df6:	2280      	movne	r2, #128	; 0x80
 8005df8:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8005dfc:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8005e00:	6811      	ldr	r1, [r2, #0]
 8005e02:	f2c0 030f 	movt	r3, #15
 8005e06:	400b      	ands	r3, r1
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	4770      	bx	lr

08005e0c <FMC_NANDECCCmd>:
void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005e0c:	b151      	cbz	r1, 8005e24 <FMC_NANDECCCmd+0x18>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8005e0e:	2810      	cmp	r0, #16
    {
      FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8005e10:	bf0c      	ite	eq
 8005e12:	2360      	moveq	r3, #96	; 0x60
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8005e14:	2380      	movne	r3, #128	; 0x80
 8005e16:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	4770      	bx	lr
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8005e24:	2810      	cmp	r0, #16
    {
      FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8005e26:	bf0c      	ite	eq
 8005e28:	2260      	moveq	r2, #96	; 0x60
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8005e2a:	2280      	movne	r2, #128	; 0x80
 8005e2c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8005e30:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8005e34:	6811      	ldr	r1, [r2, #0]
 8005e36:	f2c0 030f 	movt	r3, #15
 8005e3a:	400b      	ands	r3, r1
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4770      	bx	lr

08005e40 <FMC_GetECC>:
  */
uint32_t FMC_GetECC(uint32_t FMC_Bank)
{
  uint32_t eccval = 0x00000000;
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8005e40:	2810      	cmp	r0, #16
  {
    /* Get the ECCR2 register value */
    eccval = FMC_Bank2->ECCR2;
 8005e42:	bf0c      	ite	eq
 8005e44:	2360      	moveq	r3, #96	; 0x60
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FMC_Bank3->ECCR3;
 8005e46:	2380      	movne	r3, #128	; 0x80
 8005e48:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8005e4c:	6958      	ldr	r0, [r3, #20]
  }
  /* Return the error correction code value */
  return(eccval);
}
 8005e4e:	4770      	bx	lr

08005e50 <FMC_PCCARDDeInit>:
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 8005e50:	23a0      	movs	r3, #160	; 0xa0
 8005e52:	f2ca 0300 	movt	r3, #40960	; 0xa000
  FMC_Bank4->SR4 = 0x00000000;	
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8005e56:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 8005e5a:	2018      	movs	r0, #24
  FMC_Bank4->SR4 = 0x00000000;	
 8005e5c:	2100      	movs	r1, #0
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 8005e5e:	6018      	str	r0, [r3, #0]
  FMC_Bank4->SR4 = 0x00000000;	
 8005e60:	6059      	str	r1, [r3, #4]
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8005e62:	609a      	str	r2, [r3, #8]
  FMC_Bank4->PATT4 = 0xFCFCFCFC;
 8005e64:	60da      	str	r2, [r3, #12]
  FMC_Bank4->PIO4 = 0xFCFCFCFC;
 8005e66:	611a      	str	r2, [r3, #16]
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop

08005e6c <FMC_PCCARDInit>:
  * @param  FMC_PCCARDInitStruct : pointer to a FMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FMC PCCARD Bank.                       
  * @retval None
  */
void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8005e6c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
 8005e6e:	6807      	ldr	r7, [r0, #0]
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8005e70:	6846      	ldr	r6, [r0, #4]
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005e72:	68c4      	ldr	r4, [r0, #12]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005e74:	6901      	ldr	r1, [r0, #16]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8005e76:	6942      	ldr	r2, [r0, #20]
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
 8005e78:	6885      	ldr	r5, [r0, #8]
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8005e7a:	23a0      	movs	r3, #160	; 0xa0
                     FMC_NAND_MemoryDataWidth_16b |  
 8005e7c:	f047 0010 	orr.w	r0, r7, #16
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8005e80:	f2ca 0300 	movt	r3, #40960	; 0xa000
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8005e84:	ea40 2046 	orr.w	r0, r0, r6, lsl #9
 8005e88:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8005e8c:	6018      	str	r0, [r3, #0]
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005e8e:	e894 0060 	ldmia.w	r4, {r5, r6}
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005e92:	68a0      	ldr	r0, [r4, #8]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 8005e94:	68e4      	ldr	r4, [r4, #12]
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005e96:	0400      	lsls	r0, r0, #16
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005e98:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005e9c:	4328      	orrs	r0, r5
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005e9e:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005ea2:	6098      	str	r0, [r3, #8]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005ea4:	e891 0070 	ldmia.w	r1, {r4, r5, r6}
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
 8005ea8:	68c8      	ldr	r0, [r1, #12]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005eaa:	0431      	lsls	r1, r6, #16
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005eac:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005eb0:	4321      	orrs	r1, r4
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005eb2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005eb6:	60d9      	str	r1, [r3, #12]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005eb8:	e892 0031 	ldmia.w	r2, {r0, r4, r5}
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
 8005ebc:	68d1      	ldr	r1, [r2, #12]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005ebe:	042a      	lsls	r2, r5, #16
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8005ec0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005ec4:	4302      	orrs	r2, r0
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005ec6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8005eca:	611a      	str	r2, [r3, #16]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
}
 8005ecc:	bcf0      	pop	{r4, r5, r6, r7}
 8005ece:	4770      	bx	lr

08005ed0 <FMC_PCCARDStructInit>:
  * @param  FMC_PCCARDInitStruct: pointer to a FMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8005ed0:	b430      	push	{r4, r5}
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8005ed2:	6901      	ldr	r1, [r0, #16]
{
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8005ed4:	68c4      	ldr	r4, [r0, #12]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 8005ed6:	6942      	ldr	r2, [r0, #20]
{
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8005ed8:	23fc      	movs	r3, #252	; 0xfc
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8005eda:	2500      	movs	r5, #0
 8005edc:	6005      	str	r5, [r0, #0]
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
 8005ede:	6045      	str	r5, [r0, #4]
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
 8005ee0:	6085      	str	r5, [r0, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8005ee2:	6023      	str	r3, [r4, #0]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005ee4:	6063      	str	r3, [r4, #4]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005ee6:	60a3      	str	r3, [r4, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8005ee8:	60e3      	str	r3, [r4, #12]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8005eea:	600b      	str	r3, [r1, #0]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005eec:	604b      	str	r3, [r1, #4]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005eee:	608b      	str	r3, [r1, #8]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
 8005ef0:	60cb      	str	r3, [r1, #12]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
}
 8005ef2:	bc30      	pop	{r4, r5}
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 8005ef4:	6013      	str	r3, [r2, #0]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8005ef6:	6053      	str	r3, [r2, #4]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005ef8:	6093      	str	r3, [r2, #8]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8005efa:	60d3      	str	r3, [r2, #12]
}
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop

08005f00 <FMC_PCCARDCmd>:
  */
void FMC_PCCARDCmd(FunctionalState NewState)
{
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005f00:	b950      	cbnz	r0, 8005f18 <FMC_PCCARDCmd+0x18>
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8005f02:	22a0      	movs	r2, #160	; 0xa0
 8005f04:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8005f08:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8005f0c:	6811      	ldr	r1, [r2, #0]
 8005f0e:	f2c0 030f 	movt	r3, #15
 8005f12:	400b      	ands	r3, r1
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8005f18:	23a0      	movs	r3, #160	; 0xa0
 8005f1a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	f042 0204 	orr.w	r2, r2, #4
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	4770      	bx	lr

08005f28 <FMC_SDRAMDeInit>:
  *            @arg FMC_Bank1_SDRAM: FMC Bank1 SDRAM 
  *            @arg FMC_Bank2_SDRAM: FMC Bank2 SDRAM 
  * @retval None
  */
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
 8005f28:	b430      	push	{r4, r5}
 8005f2a:	0080      	lsls	r0, r0, #2
 8005f2c:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
  FMC_Bank5_6->SDCMR = 0x00000000;
 8005f30:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005f34:	18c1      	adds	r1, r0, r3
 8005f36:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8005f3a:	2200      	movs	r2, #0
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 8005f3c:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 8005f40:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 8005f44:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 8005f48:	608c      	str	r4, [r1, #8]
  FMC_Bank5_6->SDCMR = 0x00000000;
 8005f4a:	611a      	str	r2, [r3, #16]
  FMC_Bank5_6->SDRTR = 0x00000000;
  FMC_Bank5_6->SDSR = 0x00000000; 
}  
 8005f4c:	bc30      	pop	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
  FMC_Bank5_6->SDCMR = 0x00000000;
  FMC_Bank5_6->SDRTR = 0x00000000;
 8005f4e:	615a      	str	r2, [r3, #20]
  FMC_Bank5_6->SDSR = 0x00000000; 
 8005f50:	619a      	str	r2, [r3, #24]
}  
 8005f52:	4770      	bx	lr

08005f54 <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 8005f54:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8005f58:	6881      	ldr	r1, [r0, #8]
 8005f5a:	6846      	ldr	r6, [r0, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8005f5c:	68c5      	ldr	r5, [r0, #12]
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8005f5e:	6904      	ldr	r4, [r0, #16]
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005f60:	69c7      	ldr	r7, [r0, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8005f62:	f8d0 9020 	ldr.w	r9, [r0, #32]
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8005f66:	6a43      	ldr	r3, [r0, #36]	; 0x24
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8005f68:	6802      	ldr	r2, [r0, #0]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8005f6a:	430e      	orrs	r6, r1
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8005f6c:	4335      	orrs	r5, r6
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8005f6e:	6941      	ldr	r1, [r0, #20]
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8005f70:	432c      	orrs	r4, r5
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8005f72:	430c      	orrs	r4, r1
             FMC_SDRAMInitStruct->FMC_CASLatency |
 8005f74:	6981      	ldr	r1, [r0, #24]
 8005f76:	430c      	orrs	r4, r1
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 8005f78:	433c      	orrs	r4, r7
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005f7a:	ea44 0409 	orr.w	r4, r4, r9
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8005f7e:	431c      	orrs	r4, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8005f80:	bb1a      	cbnz	r2, 8005fca <FMC_SDRAMInit+0x76>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8005f82:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005f86:	f2ca 0200 	movt	r2, #40960	; 0xa000
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005f8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8005f8c:	6014      	str	r4, [r2, #0]
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005f8e:	689f      	ldr	r7, [r3, #8]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005f90:	685d      	ldr	r5, [r3, #4]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005f92:	681e      	ldr	r6, [r3, #0]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005f94:	68dc      	ldr	r4, [r3, #12]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8005f96:	f103 0010 	add.w	r0, r3, #16
 8005f9a:	c80b      	ldmia	r0, {r0, r1, r3}
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005f9c:	3f01      	subs	r7, #1
 8005f9e:	023f      	lsls	r7, r7, #8
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005fa0:	3d01      	subs	r5, #1
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005fa2:	ea47 1505 	orr.w	r5, r7, r5, lsl #4
 8005fa6:	3e01      	subs	r6, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005fa8:	4335      	orrs	r5, r6
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005faa:	3c01      	subs	r4, #1
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005fac:	ea45 3404 	orr.w	r4, r5, r4, lsl #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8005fb0:	3801      	subs	r0, #1
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005fb2:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 8005fb6:	3901      	subs	r1, #1
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8005fb8:	ea40 5101 	orr.w	r1, r0, r1, lsl #20
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8005fbc:	3b01      	subs	r3, #1
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005fbe:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8005fc2:	6093      	str	r3, [r2, #8]
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  
}
 8005fc4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8005fc8:	4770      	bx	lr
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8005fca:	f44f 71a0 	mov.w	r1, #320	; 0x140
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005fce:	ea49 0807 	orr.w	r8, r9, r7
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8005fd2:	f2ca 0100 	movt	r1, #40960	; 0xa000
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005fd6:	ea48 0503 	orr.w	r5, r8, r3
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005fda:	6a83      	ldr	r3, [r0, #40]	; 0x28
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8005fdc:	600d      	str	r5, [r1, #0]
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005fde:	f8d3 8008 	ldr.w	r8, [r3, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005fe2:	685e      	ldr	r6, [r3, #4]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005fe4:	68df      	ldr	r7, [r3, #12]
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005fe6:	f8d3 c000 	ldr.w	ip, [r3]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 8005fea:	695d      	ldr	r5, [r3, #20]
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 8005fec:	6918      	ldr	r0, [r3, #16]
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005fee:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8005ff2:	021b      	lsls	r3, r3, #8
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005ff4:	3e01      	subs	r6, #1
 8005ff6:	0092      	lsls	r2, r2, #2
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005ff8:	ea43 1606 	orr.w	r6, r3, r6, lsl #4
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005ffc:	3f01      	subs	r7, #1
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005ffe:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006002:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8006006:	033f      	lsls	r7, r7, #12
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8006008:	ea46 060c 	orr.w	r6, r6, ip
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 800600c:	3d01      	subs	r5, #1
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 800600e:	3801      	subs	r0, #1
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8006010:	ea47 5505 	orr.w	r5, r7, r5, lsl #20
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8006014:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8006018:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 800601c:	608d      	str	r5, [r1, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800601e:	f8c2 0148 	str.w	r0, [r2, #328]	; 0x148
  }
  
}
 8006022:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8006026:	4770      	bx	lr

08006028 <FMC_SDRAMStructInit>:
  * @param  FMC_SDRAMInitStruct: pointer to a FMC_SDRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
 8006028:	b430      	push	{r4, r5}
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 800602a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
 800602c:	2340      	movs	r3, #64	; 0x40
 800602e:	6103      	str	r3, [r0, #16]
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 8006030:	2100      	movs	r1, #0
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 8006032:	2310      	movs	r3, #16
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 8006034:	2580      	movs	r5, #128	; 0x80
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 8006036:	f44f 7400 	mov.w	r4, #512	; 0x200
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 800603a:	6145      	str	r5, [r0, #20]
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 800603c:	6184      	str	r4, [r0, #24]
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 800603e:	6001      	str	r1, [r0, #0]
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 8006040:	6041      	str	r1, [r0, #4]
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
 8006042:	6081      	str	r1, [r0, #8]
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
 8006044:	61c1      	str	r1, [r0, #28]
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
 8006046:	6201      	str	r1, [r0, #32]
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
 8006048:	6241      	str	r1, [r0, #36]	; 0x24
{  
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 800604a:	60c3      	str	r3, [r0, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
  
}
 800604c:	bc30      	pop	{r4, r5}
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 800604e:	6013      	str	r3, [r2, #0]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay = 16;
 8006050:	6053      	str	r3, [r2, #4]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime = 16;
 8006052:	6093      	str	r3, [r2, #8]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
 8006054:	60d3      	str	r3, [r2, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
 8006056:	6113      	str	r3, [r2, #16]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
 8006058:	6153      	str	r3, [r2, #20]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
 800605a:	6193      	str	r3, [r2, #24]
  
}
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop

08006060 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 8006060:	b430      	push	{r4, r5}
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8006062:	e890 0022 	ldmia.w	r0, {r1, r5}
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 8006066:	68c4      	ldr	r4, [r0, #12]
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 8006068:	6882      	ldr	r2, [r0, #8]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800606a:	4329      	orrs	r1, r5
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 800606c:	f44f 73a0 	mov.w	r3, #320	; 0x140
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8006070:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 8006074:	3a01      	subs	r2, #1
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 8006076:	f2ca 0300 	movt	r3, #40960	; 0xa000
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800607a:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 800607e:	611a      	str	r2, [r3, #16]

}
 8006080:	bc30      	pop	{r4, r5}
 8006082:	4770      	bx	lr

08006084 <FMC_GetModeStatus>:
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 8006084:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006088:	f2ca 0300 	movt	r3, #40960	; 0xa000
  
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
 800608c:	b120      	cbz	r0, 8006098 <FMC_GetModeStatus+0x14>
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
  }
  else
  {
    tmpreg = ((uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES2) >> 2);
 800608e:	6998      	ldr	r0, [r3, #24]
 8006090:	f000 0018 	and.w	r0, r0, #24
 8006094:	0880      	lsrs	r0, r0, #2
  }
  
  /* Return the mode status */
  return tmpreg;
}
 8006096:	4770      	bx	lr
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 8006098:	6998      	ldr	r0, [r3, #24]
 800609a:	f000 0006 	and.w	r0, r0, #6
 800609e:	4770      	bx	lr

080060a0 <FMC_SetRefreshCount>:
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 80060a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80060a4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80060a8:	695a      	ldr	r2, [r3, #20]
 80060aa:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 80060ae:	6158      	str	r0, [r3, #20]
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop

080060b4 <FMC_SetAutoRefresh_Number>:
void FMC_SetAutoRefresh_Number(uint32_t FMC_Number)
{
  /* check the parameters */
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_Number));
  
  FMC_Bank5_6->SDCMR |= (FMC_Number << 5);   
 80060b4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80060b8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80060bc:	691a      	ldr	r2, [r3, #16]
 80060be:	ea42 1040 	orr.w	r0, r2, r0, lsl #5
 80060c2:	6118      	str	r0, [r3, #16]
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop

080060c8 <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 80060c8:	0080      	lsls	r0, r0, #2
 80060ca:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 80060ce:	b939      	cbnz	r1, 80060e0 <FMC_SDRAMWriteProtectionConfig+0x18>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
  }
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 80060d0:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 80060d4:	f647 53ff 	movw	r3, #32255	; 0x7dff
 80060d8:	4013      	ands	r3, r2
 80060da:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 80060de:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 80060e0:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 80060e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060e8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop

080060f0 <FMC_ITConfig>:
{
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80060f0:	b1ba      	cbz	r2, 8006122 <FMC_ITConfig+0x32>
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 80060f2:	2810      	cmp	r0, #16
 80060f4:	d037      	beq.n	8006166 <FMC_ITConfig+0x76>
    {
      FMC_Bank2->SR2 |= FMC_IT;
    }
    /* Enable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 80060f6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80060fa:	d03b      	beq.n	8006174 <FMC_ITConfig+0x84>
    {
      FMC_Bank3->SR3 |= FMC_IT;
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
 80060fc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 8006100:	bf0b      	itete	eq
 8006102:	23a0      	moveq	r3, #160	; 0xa0
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 8006104:	f44f 73a0 	movne.w	r3, #320	; 0x140
      FMC_Bank3->SR3 |= FMC_IT;
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 8006108:	f2ca 0300 	movteq	r3, #40960	; 0xa000
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 800610c:	f2ca 0300 	movtne	r3, #40960	; 0xa000
      FMC_Bank3->SR3 |= FMC_IT;
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 8006110:	bf0b      	itete	eq
 8006112:	685a      	ldreq	r2, [r3, #4]
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 8006114:	695a      	ldrne	r2, [r3, #20]
      FMC_Bank3->SR3 |= FMC_IT;
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 8006116:	4311      	orreq	r1, r2
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 8006118:	4311      	orrne	r1, r2
      FMC_Bank3->SR3 |= FMC_IT;
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 800611a:	bf0c      	ite	eq
 800611c:	6059      	streq	r1, [r3, #4]
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 800611e:	6159      	strne	r1, [r3, #20]
 8006120:	4770      	bx	lr
    }
  }
  else
  {
    /* Disable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 8006122:	2810      	cmp	r0, #16
 8006124:	d017      	beq.n	8006156 <FMC_ITConfig+0x66>
    {
      
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 8006126:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800612a:	d02a      	beq.n	8006182 <FMC_ITConfig+0x92>
    {
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
 800612c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 8006130:	bf0b      	itete	eq
 8006132:	23a0      	moveq	r3, #160	; 0xa0
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 8006134:	f44f 73a0 	movne.w	r3, #320	; 0x140
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 8006138:	f2ca 0300 	movteq	r3, #40960	; 0xa000
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 800613c:	f2ca 0300 	movtne	r3, #40960	; 0xa000
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 8006140:	bf0b      	itete	eq
 8006142:	685a      	ldreq	r2, [r3, #4]
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 8006144:	695a      	ldrne	r2, [r3, #20]
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 8006146:	ea22 0101 	biceq.w	r1, r2, r1
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 800614a:	ea22 0101 	bicne.w	r1, r2, r1
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 800614e:	bf0c      	ite	eq
 8006150:	6059      	streq	r1, [r3, #4]
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 8006152:	6159      	strne	r1, [r3, #20]
 8006154:	4770      	bx	lr
  {
    /* Disable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
    {
      
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
 8006156:	2360      	movs	r3, #96	; 0x60
 8006158:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	ea22 0101 	bic.w	r1, r2, r1
 8006162:	6059      	str	r1, [r3, #4]
 8006164:	4770      	bx	lr
  if (NewState != DISABLE)
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
    {
      FMC_Bank2->SR2 |= FMC_IT;
 8006166:	2360      	movs	r3, #96	; 0x60
 8006168:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	4311      	orrs	r1, r2
 8006170:	6059      	str	r1, [r3, #4]
 8006172:	4770      	bx	lr
    }
    /* Enable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
    {
      FMC_Bank3->SR3 |= FMC_IT;
 8006174:	2380      	movs	r3, #128	; 0x80
 8006176:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	4311      	orrs	r1, r2
 800617e:	6059      	str	r1, [r3, #4]
 8006180:	4770      	bx	lr
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
    {
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
 8006182:	2380      	movs	r3, #128	; 0x80
 8006184:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	ea22 0101 	bic.w	r1, r2, r1
 800618e:	6059      	str	r1, [r3, #4]
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop

08006194 <FMC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8006194:	2810      	cmp	r0, #16
 8006196:	d014      	beq.n	80061c2 <FMC_GetFlagStatus+0x2e>
  {
    tmpsr = FMC_Bank2->SR2;
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8006198:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800619c:	d016      	beq.n	80061cc <FMC_GetFlagStatus+0x38>
  {
    tmpsr = FMC_Bank3->SR3;
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800619e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  {
    tmpsr = FMC_Bank4->SR4;
 80061a2:	bf0b      	itete	eq
 80061a4:	23a0      	moveq	r3, #160	; 0xa0
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 80061a6:	f44f 73a0 	movne.w	r3, #320	; 0x140
  {
    tmpsr = FMC_Bank3->SR3;
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    tmpsr = FMC_Bank4->SR4;
 80061aa:	f2ca 0300 	movteq	r3, #40960	; 0xa000
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 80061ae:	f2ca 0300 	movtne	r3, #40960	; 0xa000
  {
    tmpsr = FMC_Bank3->SR3;
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    tmpsr = FMC_Bank4->SR4;
 80061b2:	bf0c      	ite	eq
 80061b4:	6858      	ldreq	r0, [r3, #4]
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 80061b6:	6998      	ldrne	r0, [r3, #24]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 80061b8:	4008      	ands	r0, r1
  {
    bitstatus = SET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80061ba:	1a0b      	subs	r3, r1, r0
 80061bc:	4258      	negs	r0, r3
 80061be:	4158      	adcs	r0, r3
 80061c0:	4770      	bx	lr
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
  {
    tmpsr = FMC_Bank2->SR2;
 80061c2:	2360      	movs	r3, #96	; 0x60
 80061c4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80061c8:	6858      	ldr	r0, [r3, #4]
 80061ca:	e7f5      	b.n	80061b8 <FMC_GetFlagStatus+0x24>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
  {
    tmpsr = FMC_Bank3->SR3;
 80061cc:	2380      	movs	r3, #128	; 0x80
 80061ce:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80061d2:	6858      	ldr	r0, [r3, #4]
 80061d4:	e7f0      	b.n	80061b8 <FMC_GetFlagStatus+0x24>
 80061d6:	bf00      	nop

080061d8 <FMC_ClearFlag>:
{
 /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
 80061d8:	2810      	cmp	r0, #16
 80061da:	d017      	beq.n	800620c <FMC_ClearFlag+0x34>
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 80061dc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80061e0:	d01c      	beq.n	800621c <FMC_ClearFlag+0x44>
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80061e2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 80061e6:	bf0b      	itete	eq
 80061e8:	23a0      	moveq	r3, #160	; 0xa0
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 80061ea:	f44f 73a0 	movne.w	r3, #320	; 0x140
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 80061ee:	f2ca 0300 	movteq	r3, #40960	; 0xa000
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 80061f2:	f2ca 0300 	movtne	r3, #40960	; 0xa000
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 80061f6:	bf0b      	itete	eq
 80061f8:	685a      	ldreq	r2, [r3, #4]
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 80061fa:	695a      	ldrne	r2, [r3, #20]
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 80061fc:	ea22 0101 	biceq.w	r1, r2, r1
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 8006200:	ea22 0101 	bicne.w	r1, r2, r1
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 8006204:	bf0c      	ite	eq
 8006206:	6059      	streq	r1, [r3, #4]
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 8006208:	6159      	strne	r1, [r3, #20]
 800620a:	4770      	bx	lr
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
 800620c:	2360      	movs	r3, #96	; 0x60
 800620e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	ea22 0101 	bic.w	r1, r2, r1
 8006218:	6059      	str	r1, [r3, #4]
 800621a:	4770      	bx	lr
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
 800621c:	2380      	movs	r3, #128	; 0x80
 800621e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	ea22 0101 	bic.w	r1, r2, r1
 8006228:	6059      	str	r1, [r3, #4]
 800622a:	4770      	bx	lr

0800622c <FMC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800622c:	2810      	cmp	r0, #16
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.    
  * @retval The new state of FMC_IT (SET or RESET).
  */
ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 800622e:	b410      	push	{r4}
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8006230:	d024      	beq.n	800627c <FMC_GetITStatus+0x50>
  {
    tmpsr = FMC_Bank2->SR2;
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8006232:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006236:	d018      	beq.n	800626a <FMC_GetITStatus+0x3e>
  {
    tmpsr = FMC_Bank3->SR3;
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8006238:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800623c:	d027      	beq.n	800628e <FMC_GetITStatus+0x62>
    tmpsr = FMC_Bank4->SR4;
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 800623e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006242:	f2ca 0200 	movt	r2, #40960	; 0xa000
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 8006246:	2801      	cmp	r0, #1
    tmpsr = FMC_Bank4->SR4;
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 8006248:	6953      	ldr	r3, [r2, #20]
    tmpsr2 = FMC_Bank5_6->SDSR;
 800624a:	6994      	ldr	r4, [r2, #24]
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 800624c:	ea01 0203 	and.w	r2, r1, r3
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
 8006250:	bf98      	it	ls
 8006252:	f004 0101 	andls.w	r1, r4, #1
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 8006256:	d80e      	bhi.n	8006276 <FMC_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus; 
 8006258:	2a00      	cmp	r2, #0
 800625a:	bf18      	it	ne
 800625c:	2900      	cmpne	r1, #0
 800625e:	bf0c      	ite	eq
 8006260:	2000      	moveq	r0, #0
 8006262:	2001      	movne	r0, #1
}
 8006264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006268:	4770      	bx	lr
  {
    tmpsr = FMC_Bank2->SR2;
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
  {
    tmpsr = FMC_Bank3->SR3;
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006270:	685b      	ldr	r3, [r3, #4]
    tmpsr = FMC_Bank5_6->SDRTR;
    tmpsr2 = FMC_Bank5_6->SDSR;
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 8006272:	ea03 0201 	and.w	r2, r3, r1
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 8006276:	ea03 01d1 	and.w	r1, r3, r1, lsr #3
 800627a:	e7ed      	b.n	8006258 <FMC_GetITStatus+0x2c>
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
  {
    tmpsr = FMC_Bank2->SR2;
 800627c:	2360      	movs	r3, #96	; 0x60
 800627e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006282:	685b      	ldr	r3, [r3, #4]
    tmpsr = FMC_Bank5_6->SDRTR;
    tmpsr2 = FMC_Bank5_6->SDSR;
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 8006284:	ea01 0203 	and.w	r2, r1, r3
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 8006288:	ea03 01d1 	and.w	r1, r3, r1, lsr #3
 800628c:	e7e4      	b.n	8006258 <FMC_GetITStatus+0x2c>
  {
    tmpsr = FMC_Bank3->SR3;
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    tmpsr = FMC_Bank4->SR4;
 800628e:	23a0      	movs	r3, #160	; 0xa0
 8006290:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	e7ec      	b.n	8006272 <FMC_GetITStatus+0x46>

08006298 <FMC_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
 8006298:	2810      	cmp	r0, #16
 800629a:	d017      	beq.n	80062cc <FMC_ClearITPendingBit+0x34>
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800629c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80062a0:	d01c      	beq.n	80062dc <FMC_ClearITPendingBit+0x44>
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80062a2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 80062a6:	bf0b      	itete	eq
 80062a8:	23a0      	moveq	r3, #160	; 0xa0
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 80062aa:	f44f 73a0 	movne.w	r3, #320	; 0x140
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 80062ae:	f2ca 0300 	movteq	r3, #40960	; 0xa000
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 80062b2:	f2ca 0300 	movtne	r3, #40960	; 0xa000
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 80062b6:	bf0b      	itete	eq
 80062b8:	685a      	ldreq	r2, [r3, #4]
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 80062ba:	695a      	ldrne	r2, [r3, #20]
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 80062bc:	ea22 01d1 	biceq.w	r1, r2, r1, lsr #3
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 80062c0:	f042 0201 	orrne.w	r2, r2, #1
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 80062c4:	bf0c      	ite	eq
 80062c6:	6059      	streq	r1, [r3, #4]
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 80062c8:	615a      	strne	r2, [r3, #20]
 80062ca:	4770      	bx	lr
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
 80062cc:	2360      	movs	r3, #96	; 0x60
 80062ce:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 80062d8:	6059      	str	r1, [r3, #4]
 80062da:	4770      	bx	lr
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
 80062dc:	2380      	movs	r3, #128	; 0x80
 80062de:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 80062e8:	6059      	str	r1, [r3, #4]
 80062ea:	4770      	bx	lr

080062ec <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 80062ec:	b508      	push	{r3, lr}
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 80062ee:	2040      	movs	r0, #64	; 0x40
 80062f0:	2101      	movs	r1, #1
 80062f2:	f7fd fdcb 	bl	8003e8c <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 80062f6:	2040      	movs	r0, #64	; 0x40
 80062f8:	2100      	movs	r1, #0
}
 80062fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 80062fe:	f7fd bdc5 	b.w	8003e8c <RCC_AHB2PeriphResetCmd>
 8006302:	bf00      	nop

08006304 <RNG_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8006304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006308:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800630c:	681a      	ldr	r2, [r3, #0]
void RNG_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800630e:	b918      	cbnz	r0, 8006318 <RNG_Cmd+0x14>
    RNG->CR |= RNG_CR_RNGEN;
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8006310:	f022 0204 	bic.w	r2, r2, #4
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8006318:	f042 0204 	orr.w	r2, r2, #4
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	4770      	bx	lr

08006320 <RNG_GetRandomNumber>:
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8006320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006324:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006328:	6898      	ldr	r0, [r3, #8]
}
 800632a:	4770      	bx	lr

0800632c <RNG_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 800632c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006330:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006334:	681a      	ldr	r2, [r3, #0]
void RNG_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006336:	b918      	cbnz	r0, 8006340 <RNG_ITConfig+0x14>
    RNG->CR |= RNG_CR_IE;
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 8006338:	f022 0208 	bic.w	r2, r2, #8
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8006340:	f042 0208 	orr.w	r2, r2, #8
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	4770      	bx	lr

08006348 <RNG_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 8006348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800634c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	4218      	tst	r0, r3
    /* RNG_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
}
 8006354:	bf0c      	ite	eq
 8006356:	2000      	moveq	r0, #0
 8006358:	2001      	movne	r0, #1
 800635a:	4770      	bx	lr

0800635c <RNG_ClearFlag>:
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 800635c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006360:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006364:	ea6f 1000 	mvn.w	r0, r0, lsl #4
 8006368:	6058      	str	r0, [r3, #4]
 800636a:	4770      	bx	lr

0800636c <RNG_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 800636c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006370:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	4218      	tst	r0, r3
    /* RNG_IT is reset */
    bitstatus = RESET;
  }
  /* Return the RNG_IT status */
  return bitstatus;
}
 8006378:	bf0c      	ite	eq
 800637a:	2000      	moveq	r0, #0
 800637c:	2001      	movne	r0, #1
 800637e:	4770      	bx	lr

08006380 <RNG_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 8006380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006384:	43c0      	mvns	r0, r0
 8006386:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800638a:	b2c0      	uxtb	r0, r0
 800638c:	6058      	str	r0, [r3, #4]
 800638e:	4770      	bx	lr

08006390 <memset>:
 8006390:	b4f0      	push	{r4, r5, r6, r7}
 8006392:	0784      	lsls	r4, r0, #30
 8006394:	d043      	beq.n	800641e <memset+0x8e>
 8006396:	1e54      	subs	r4, r2, #1
 8006398:	2a00      	cmp	r2, #0
 800639a:	d03e      	beq.n	800641a <memset+0x8a>
 800639c:	b2cd      	uxtb	r5, r1
 800639e:	4603      	mov	r3, r0
 80063a0:	e003      	b.n	80063aa <memset+0x1a>
 80063a2:	1e62      	subs	r2, r4, #1
 80063a4:	2c00      	cmp	r4, #0
 80063a6:	d038      	beq.n	800641a <memset+0x8a>
 80063a8:	4614      	mov	r4, r2
 80063aa:	f803 5b01 	strb.w	r5, [r3], #1
 80063ae:	079a      	lsls	r2, r3, #30
 80063b0:	d1f7      	bne.n	80063a2 <memset+0x12>
 80063b2:	2c03      	cmp	r4, #3
 80063b4:	d92a      	bls.n	800640c <memset+0x7c>
 80063b6:	b2cd      	uxtb	r5, r1
 80063b8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80063bc:	2c0f      	cmp	r4, #15
 80063be:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80063c2:	d915      	bls.n	80063f0 <memset+0x60>
 80063c4:	f1a4 0710 	sub.w	r7, r4, #16
 80063c8:	093f      	lsrs	r7, r7, #4
 80063ca:	f103 0610 	add.w	r6, r3, #16
 80063ce:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80063d2:	461a      	mov	r2, r3
 80063d4:	6015      	str	r5, [r2, #0]
 80063d6:	6055      	str	r5, [r2, #4]
 80063d8:	6095      	str	r5, [r2, #8]
 80063da:	60d5      	str	r5, [r2, #12]
 80063dc:	3210      	adds	r2, #16
 80063de:	42b2      	cmp	r2, r6
 80063e0:	d1f8      	bne.n	80063d4 <memset+0x44>
 80063e2:	f004 040f 	and.w	r4, r4, #15
 80063e6:	3701      	adds	r7, #1
 80063e8:	2c03      	cmp	r4, #3
 80063ea:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80063ee:	d90d      	bls.n	800640c <memset+0x7c>
 80063f0:	461e      	mov	r6, r3
 80063f2:	4622      	mov	r2, r4
 80063f4:	3a04      	subs	r2, #4
 80063f6:	2a03      	cmp	r2, #3
 80063f8:	f846 5b04 	str.w	r5, [r6], #4
 80063fc:	d8fa      	bhi.n	80063f4 <memset+0x64>
 80063fe:	1f22      	subs	r2, r4, #4
 8006400:	f022 0203 	bic.w	r2, r2, #3
 8006404:	3204      	adds	r2, #4
 8006406:	4413      	add	r3, r2
 8006408:	f004 0403 	and.w	r4, r4, #3
 800640c:	b12c      	cbz	r4, 800641a <memset+0x8a>
 800640e:	b2c9      	uxtb	r1, r1
 8006410:	441c      	add	r4, r3
 8006412:	f803 1b01 	strb.w	r1, [r3], #1
 8006416:	42a3      	cmp	r3, r4
 8006418:	d1fb      	bne.n	8006412 <memset+0x82>
 800641a:	bcf0      	pop	{r4, r5, r6, r7}
 800641c:	4770      	bx	lr
 800641e:	4614      	mov	r4, r2
 8006420:	4603      	mov	r3, r0
 8006422:	e7c6      	b.n	80063b2 <memset+0x22>

Disassembly of section .rodata:

08006424 <.rodata>:
 8006424:	51726d54 	cmnpl	r2, r4, asr sp
 8006428:	00000000 	andeq	r0, r0, r0
 800642c:	20726d54 	rsbscs	r6, r2, r4, asr sp
 8006430:	00637653 	rsbeq	r7, r3, r3, asr r6

Disassembly of section .data:

20000000 <AHBPrescTable>:
	...
20000008:	04030201 	streq	r0, [r3], #-513	; 0x201
2000000c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000010 <SystemCoreClock>:
20000010:	08f0d180 	ldmeq	r0!, {r7, r8, ip, lr, pc}^

20000014 <xNextTaskUnblockTime>:
20000014:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000018 <uxCriticalNesting>:
20000018:	aaaaaaaa 	bge	1eaaaac8 <_eccmram+0xeaaaac8>

2000001c <APBAHBPrescTable>:
2000001c:	00000000 	andeq	r0, r0, r0
20000020:	04030201 	streq	r0, [r3], #-513	; 0x201
20000024:	04030201 	streq	r0, [r3], #-513	; 0x201
20000028:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

Disassembly of section .bss:

2000002c <__bss_start__>:
2000002c:	00000000 	andeq	r0, r0, r0

20000030 <xDelayedCoRoutineList1>:
	...

20000044 <xPassedTicks>:
20000044:	00000000 	andeq	r0, r0, r0

20000048 <xPendingReadyCoRoutineList>:
	...

2000005c <pxCurrentCoRoutine>:
2000005c:	00000000 	andeq	r0, r0, r0

20000060 <xDelayedCoRoutineList2>:
	...

20000074 <xCoRoutineTickCount>:
20000074:	00000000 	andeq	r0, r0, r0

20000078 <xLastTickCount>:
20000078:	00000000 	andeq	r0, r0, r0

2000007c <pxDelayedCoRoutineList>:
2000007c:	00000000 	andeq	r0, r0, r0

20000080 <pxReadyCoRoutineLists>:
	...

200000a8 <uxTopCoRoutineReadyPriority>:
200000a8:	00000000 	andeq	r0, r0, r0

200000ac <pxOverflowDelayedCoRoutineList>:
200000ac:	00000000 	andeq	r0, r0, r0

200000b0 <xQueueRegistry>:
	...

200000f0 <pxDelayedTaskList>:
200000f0:	00000000 	andeq	r0, r0, r0

200000f4 <xSchedulerRunning>:
200000f4:	00000000 	andeq	r0, r0, r0

200000f8 <uxTasksDeleted>:
200000f8:	00000000 	andeq	r0, r0, r0

200000fc <xTasksWaitingTermination>:
	...

20000110 <pxReadyTasksLists>:
	...

20000174 <uxSchedulerSuspended>:
20000174:	00000000 	andeq	r0, r0, r0

20000178 <uxCurrentNumberOfTasks>:
20000178:	00000000 	andeq	r0, r0, r0

2000017c <pxCurrentTCB>:
2000017c:	00000000 	andeq	r0, r0, r0

20000180 <xPendingReadyList>:
	...

20000194 <xNumOfOverflows>:
20000194:	00000000 	andeq	r0, r0, r0

20000198 <xTickCount>:
20000198:	00000000 	andeq	r0, r0, r0

2000019c <pxOverflowDelayedTaskList>:
2000019c:	00000000 	andeq	r0, r0, r0

200001a0 <uxTaskNumber>:
200001a0:	00000000 	andeq	r0, r0, r0

200001a4 <xDelayedTaskList1>:
	...

200001b8 <xDelayedTaskList2>:
	...

200001cc <uxPendedTicks>:
200001cc:	00000000 	andeq	r0, r0, r0

200001d0 <xSuspendedTaskList>:
	...

200001e4 <uxTopReadyPriority>:
200001e4:	00000000 	andeq	r0, r0, r0

200001e8 <xYieldPending>:
200001e8:	00000000 	andeq	r0, r0, r0

200001ec <pxCurrentTimerList>:
200001ec:	00000000 	andeq	r0, r0, r0

200001f0 <xActiveTimerList1>:
	...

20000204 <xActiveTimerList2>:
	...

20000218 <xLastTime.4800>:
20000218:	00000000 	andeq	r0, r0, r0

2000021c <xTimerQueue>:
2000021c:	00000000 	andeq	r0, r0, r0

20000220 <pxOverflowTimerList>:
20000220:	00000000 	andeq	r0, r0, r0

20000224 <ucMaxSysCallPriority>:
20000224:	00000000 	andeq	r0, r0, r0

20000228 <ulMaxPRIGROUPValue>:
20000228:	00000000 	andeq	r0, r0, r0

2000022c <pucAlignedHeap.4557>:
2000022c:	00000000 	andeq	r0, r0, r0

20000230 <xNextFreeByte>:
20000230:	00000000 	andeq	r0, r0, r0

20000234 <ucHeap>:
	...

Disassembly of section ._user_heap_stack:

20012e34 <._user_heap_stack>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002d41 	andeq	r2, r0, r1, asr #26
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000023 	andeq	r0, r0, r3, lsr #32
  10:	2d453705 	stclcs	7, cr3, [r5, #-20]	; 0xffffffec
  14:	0d06004d 	stceq	0, cr0, [r6, #-308]	; 0xfffffecc
  18:	02094d07 	andeq	r4, r9, #448	; 0x1c0
  1c:	0412060a 	ldreq	r0, [r2], #-1546	; 0x60a
  20:	01150114 	tsteq	r5, r4, lsl r1
  24:	01180317 	tsteq	r8, r7, lsl r3
  28:	031b011a 	tsteq	fp, #-2147483642	; 0x80000006
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000084 	andeq	r0, r0, r4, lsl #1
       4:	00430002 	subeq	r0, r3, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
      20:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
      24:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
      28:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      2c:	73000034 	movwvc	r0, #52	; 0x34
      30:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
      34:	735f7075 	cmpvc	pc, #117	; 0x75
      38:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      3c:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
      40:	3933345f 	ldmdbcc	r3!, {r0, r1, r2, r3, r4, r6, sl, ip, sp}
      44:	732e7878 	teqvc	lr, #120, 16	; 0x780000
      48:	00000100 	andeq	r0, r0, r0, lsl #2
      4c:	02050000 	andeq	r0, r5, #0
      50:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
      54:	0100ca03 	tsteq	r0, r3, lsl #20
      58:	21212321 	teqcs	r1, r1, lsr #6
      5c:	21212321 	teqcs	r1, r1, lsr #6
      60:	21212121 	teqcs	r1, r1, lsr #2
      64:	21312123 	teqcs	r1, r3, lsr #2
      68:	2f302321 	svccs	0x00302321
      6c:	34206503 	strtcc	r6, [r0], #-1283	; 0x503
      70:	0236322f 	eorseq	r3, r6, #-268435454	; 0xf0000002
      74:	01010002 	tsteq	r1, r2
      78:	38020500 	stmdacc	r2, {r8, sl}
      7c:	03080003 	movweq	r0, #32771	; 0x8003
      80:	020100f6 	andeq	r0, r1, #246	; 0xf6
      84:	01010001 	tsteq	r1, r1
      88:	000001a3 	andeq	r0, r0, r3, lsr #3
      8c:	011b0002 	tsteq	fp, r2
      90:	01020000 	mrseq	r0, (UNDEF: 2)
      94:	000d0efb 	strdeq	r0, [sp], -fp
      98:	01010101 	tsteq	r1, r1, lsl #2
      9c:	01000000 	mrseq	r0, (UNDEF: 0)
      a0:	43010000 	movwmi	r0, #4096	; 0x1000
      a4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
      a8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
      ac:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
      b0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      b4:	74732f34 	ldrbtvc	r2, [r3], #-3892	; 0xf34
      b8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0x261
      bc:	752f0070 	strvc	r0, [pc, #-112]!	; 54 <_Min_Heap_Size+0x54>
      c0:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
      c4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
      c8:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
      cc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
      d0:	616d2f62 	cmnvs	sp, r2, ror #30
      d4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
      d8:	752f0065 	strvc	r0, [pc, #-101]!	; 7b <_Min_Heap_Size+0x7b>
      dc:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
      e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
      e4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
      e8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
      ec:	4f430062 	svcmi	0x00430062
      f0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
      f4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
      f8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
      fc:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     100:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     104:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     108:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     10c:	5349534d 	movtpl	r5, #37709	; 0x934d
     110:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     114:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     118:	524f4300 	subpl	r4, pc, #0, 6
     11c:	5f584554 	svcpl	0x00584554
     120:	5f46344d 	svcpl	0x0046344d
     124:	334d5453 	movtcc	r5, #54355	; 0xd453
     128:	2f344632 	svccs	0x00344632
     12c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     130:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     134:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     138:	2f534953 	svccs	0x00534953
     13c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     140:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     144:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     148:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     14c:	2f787834 	svccs	0x00787834
     150:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     154:	00656475 	rsbeq	r6, r5, r5, ror r4
     158:	73797300 	cmnvc	r9, #0, 6
     15c:	5f6d6574 	svcpl	0x006d6574
     160:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     164:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     168:	00632e78 	rsbeq	r2, r3, r8, ror lr
     16c:	5f000001 	svcpl	0x00000001
     170:	61666564 	cmnvs	r6, r4, ror #10
     174:	5f746c75 	svcpl	0x00746c75
     178:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     17c:	00682e73 	rsbeq	r2, r8, r3, ror lr
     180:	73000002 	movwvc	r0, #2
     184:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     188:	00682e74 	rsbeq	r2, r8, r4, ror lr
     18c:	63000003 	movwvs	r0, #3
     190:	5f65726f 	svcpl	0x0065726f
     194:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     198:	00040068 	andeq	r0, r4, r8, rrx
     19c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     1a0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     1a4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     1a8:	00000500 	andeq	r0, r0, r0, lsl #10
     1ac:	02050000 	andeq	r0, r5, #0
     1b0:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
     1b4:	0101d003 	tsteq	r1, r3
     1b8:	322a4e15 	eorcc	r4, sl, #336	; 0x150
     1bc:	1d234e2a 	stcne	14, cr4, [r3, #-168]!	; 0xffffff58
     1c0:	2b23233f 	blcs	8c8ec4 <_Min_Stack_Size+0x8c8ac4>
     1c4:	233f2b31 	teqcs	pc, #50176	; 0xc400
     1c8:	03206d03 	teqeq	r0, #3, 26	; 0xc0
     1cc:	033f2013 	teqeq	pc, #19
     1d0:	312000f3 	strdcc	r0, [r0, -r3]!
     1d4:	4b48304f 	blmi	120c318 <_Min_Stack_Size+0x120bf18>
     1d8:	32763e3d 	rsbscc	r3, r6, #976	; 0x3d0
     1dc:	7f860323 	svcvc	0x00860323
     1e0:	fb03763c 	blx	ddada <_Min_Stack_Size+0xdd6da>
     1e4:	2d4b2e00 	stclcs	14, cr2, [fp, #-0]
     1e8:	4d3d2d21 	ldcmi	13, cr2, [sp, #-132]!	; 0xffffff7c
     1ec:	2b234d31 	blcs	8d36b8 <_Min_Stack_Size+0x8d32b8>
     1f0:	24232b31 	strtcs	r2, [r3], #-2865	; 0xb31
     1f4:	4b77874d 	blmi	1de1f30 <_Min_Stack_Size+0x1de1b30>
     1f8:	0006024d 	andeq	r0, r6, sp, asr #4
     1fc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     200:	00046002 	andeq	r6, r4, r2
     204:	029d0308 	addseq	r0, sp, #8, 6	; 0x20000000
     208:	03761601 	cmneq	r6, #1048576	; 0x100000
     20c:	2cae8224 	sfmcs	f0, 1, [lr], #144	; 0x90
     210:	58670322 	stmdapl	r7!, {r1, r5, r8, r9}^
     214:	4f312221 	svcmi	0x00312221
     218:	76033329 	strvc	r3, [r3], -r9, lsr #6
     21c:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
     220:	47314731 			; <UNDEFINED> instruction: 0x47314731
     224:	032f2131 	teqeq	pc, #1073741836	; 0x4000000c
     228:	0502206a 	streq	r2, [r2, #-106]	; 0x6a
     22c:	1b010100 	blne	40634 <_Min_Stack_Size+0x40234>
     230:	02000002 	andeq	r0, r0, #2
     234:	00018f00 	andeq	r8, r1, r0, lsl #30
     238:	fb010200 	blx	40a42 <_Min_Stack_Size+0x40642>
     23c:	01000d0e 	tsteq	r0, lr, lsl #26
     240:	00010101 	andeq	r0, r1, r1, lsl #2
     244:	00010000 	andeq	r0, r1, r0
     248:	72730100 	rsbsvc	r0, r3, #0, 2
     24c:	752f0063 	strvc	r0, [pc, #-99]!	; 1f1 <_Min_Heap_Size+0x1f1>
     250:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     254:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     258:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     25c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     260:	616d2f62 	cmnvs	sp, r2, ror #30
     264:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     268:	752f0065 	strvc	r0, [pc, #-101]!	; 20b <_Min_Heap_Size+0x20b>
     26c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     270:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     274:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     278:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     27c:	4f430062 	svcmi	0x00430062
     280:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     284:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     288:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     28c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     290:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     294:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     298:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     29c:	5349534d 	movtpl	r5, #37709	; 0x934d
     2a0:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
     2a4:	2f656369 	svccs	0x00656369
     2a8:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
     2ac:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     2b0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     2b4:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     2b8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     2bc:	524f4300 	subpl	r4, pc, #0, 6
     2c0:	5f584554 	svcpl	0x00584554
     2c4:	5f46344d 	svcpl	0x0046344d
     2c8:	334d5453 	movtcc	r5, #54355	; 0xd453
     2cc:	2f344632 	svccs	0x00344632
     2d0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     2d4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     2d8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     2dc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     2e0:	5f787834 	svcpl	0x00787834
     2e4:	50647453 	rsbpl	r7, r4, r3, asr r4
     2e8:	70697265 	rsbvc	r7, r9, r5, ror #4
     2ec:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     2f0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     2f4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     2f8:	524f4300 	subpl	r4, pc, #0, 6
     2fc:	5f584554 	svcpl	0x00584554
     300:	5f46344d 	svcpl	0x0046344d
     304:	334d5453 	movtcc	r5, #54355	; 0xd453
     308:	2f344632 	svccs	0x00344632
     30c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     310:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     314:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     318:	2f534953 	svccs	0x00534953
     31c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     320:	00656475 	rsbeq	r6, r5, r5, ror r4
     324:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     328:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     32c:	5f000001 	svcpl	0x00000001
     330:	61666564 	cmnvs	r6, r4, ror #10
     334:	5f746c75 	svcpl	0x00746c75
     338:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     33c:	00682e73 	rsbeq	r2, r8, r3, ror lr
     340:	73000002 	movwvc	r0, #2
     344:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     348:	00682e74 	rsbeq	r2, r8, r4, ror lr
     34c:	73000003 	movwvc	r0, #3
     350:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     354:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     358:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     35c:	74730000 	ldrbtvc	r0, [r3], #-0
     360:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     364:	5f787834 	svcpl	0x00787834
     368:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
     36c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
     370:	74730000 	ldrbtvc	r0, [r3], #-0
     374:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     378:	5f787834 	svcpl	0x00787834
     37c:	6f697067 	svcvs	0x00697067
     380:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
     384:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
     388:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
     38c:	00000500 	andeq	r0, r0, r0, lsl #10
     390:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     394:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
     398:	0600682e 	streq	r6, [r0], -lr, lsr #16
     39c:	74730000 	ldrbtvc	r0, [r3], #-0
     3a0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     3a4:	5f787834 	svcpl	0x00787834
     3a8:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     3ac:	00050068 	andeq	r0, r5, r8, rrx
     3b0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     3b4:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     3b8:	735f7878 	cmpvc	pc, #120, 16	; 0x780000
     3bc:	66637379 			; <UNDEFINED> instruction: 0x66637379
     3c0:	00682e67 	rsbeq	r2, r8, r7, ror #28
     3c4:	00000005 	andeq	r0, r0, r5
     3c8:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
     3cc:	17080004 	strne	r0, [r8, -r4]
     3d0:	2d2f4b22 	vstmdbcs	pc!, {d4-d20}
     3d4:	01000202 	tsteq	r0, r2, lsl #4
     3d8:	02050001 	andeq	r0, r5, #1
     3dc:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
     3e0:	27010c03 	strcs	r0, [r1, -r3, lsl #24]
     3e4:	242e7903 	strtcs	r7, [lr], #-2307	; 0x903
     3e8:	21232f1e 	teqcs	r3, lr, lsl pc
     3ec:	2f2f2137 	svccs	0x002f2137
     3f0:	09032f2f 	stmdbeq	r3, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
     3f4:	22311b2e 	eorscs	r1, r1, #47104	; 0xb800
     3f8:	2a302f38 	bcs	c0c0e0 <_Min_Stack_Size+0xc0bce0>
     3fc:	022f3023 	eoreq	r3, pc, #35	; 0x23
     400:	01010002 	tsteq	r1, r2
     404:	64020500 	strvs	r0, [r2], #-1280	; 0x500
     408:	03080005 	movweq	r0, #32773	; 0x8005
     40c:	1b250120 	blne	940894 <_Min_Stack_Size+0x940494>
     410:	21214125 	teqcs	r1, r5, lsr #2
     414:	2c2f1d22 	stccs	13, cr1, [pc], #-136	; 394 <_Min_Heap_Size+0x394>
     418:	1f322f23 	svcne	0x00322f23
     41c:	2f2b1f24 	svccs	0x002b1f24
     420:	0230302f 	eorseq	r3, r0, #47	; 0x2f
     424:	01010002 	tsteq	r1, r2
     428:	a8020500 	stmdage	r2, {r8, sl}
     42c:	03080005 	movweq	r0, #32773	; 0x8005
     430:	5c21013a 	stfpls	f0, [r1], #-232	; 0xffffff18
     434:	022c229f 	eoreq	r2, ip, #-268435447	; 0xf0000009
     438:	01010002 	tsteq	r1, r2
     43c:	d4020500 	strle	r0, [r2], #-1280	; 0x500
     440:	03080005 	movweq	r0, #32773	; 0x8005
     444:	210100c7 	smlabtcs	r1, r7, r0, r0
     448:	0003022f 	andeq	r0, r3, pc, lsr #4
     44c:	02540101 	subseq	r0, r4, #1073741824	; 0x40000000
     450:	00020000 	andeq	r0, r2, r0
     454:	0000011e 	andeq	r0, r0, lr, lsl r1
     458:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     45c:	0101000d 	tsteq	r1, sp
     460:	00000101 	andeq	r0, r0, r1, lsl #2
     464:	00000100 	andeq	r0, r0, r0, lsl #2
     468:	65724601 	ldrbvs	r4, [r2, #-1537]!	; 0x601
     46c:	4f545265 	svcmi	0x00545265
     470:	752f0053 	strvc	r0, [pc, #-83]!	; 425 <_Min_Stack_Size+0x25>
     474:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 2b0 <_Min_Heap_Size+0x2b0>
     478:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     47c:	612f6363 	teqvs	pc, r3, ror #6
     480:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     484:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     488:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     48c:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     490:	692f322e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, ip, sp}	; <UNPREDICTABLE>
     494:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     498:	2f006564 	svccs	0x00006564
     49c:	2f727375 	svccs	0x00727375
     4a0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     4a4:	2f656475 	svccs	0x00656475
     4a8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     4ac:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 310 <_Min_Heap_Size+0x310>
     4b0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     4b4:	2f00656e 	svccs	0x0000656e
     4b8:	2f727375 	svccs	0x00727375
     4bc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     4c0:	2f656475 	svccs	0x00656475
     4c4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     4c8:	46006269 	strmi	r6, [r0], -r9, ror #4
     4cc:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     4d0:	2f534f54 	svccs	0x00534f54
     4d4:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
     4d8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     4dc:	4343472f 	movtmi	r4, #14127	; 0x372f
     4e0:	4d52412f 	ldfmie	f4, [r2, #-188]	; 0xffffff44
     4e4:	344d435f 	strbcc	r4, [sp], #-863	; 0x35f
     4e8:	72460046 	subvc	r0, r6, #70	; 0x46
     4ec:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     4f0:	692f534f 	stmdbvs	pc!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     4f4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     4f8:	00006564 	andeq	r6, r0, r4, ror #10
     4fc:	756f7263 	strbvc	r7, [pc, #-611]!	; 2a1 <_Min_Heap_Size+0x2a1>
     500:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     504:	0100632e 	tsteq	r0, lr, lsr #6
     508:	74730000 	ldrbtvc	r0, [r3], #-0
     50c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     510:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     514:	645f0000 	ldrbvs	r0, [pc], #-0	; 51c <_Min_Stack_Size+0x11c>
     518:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     51c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 524 <_Min_Stack_Size+0x124>
     520:	73657079 	cmnvc	r5, #121	; 0x79
     524:	0300682e 	movweq	r6, #2094	; 0x82e
     528:	74730000 	ldrbtvc	r0, [r3], #-0
     52c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     530:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     534:	6f700000 	svcvs	0x00700000
     538:	616d7472 	smcvs	55106	; 0xd742
     53c:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     540:	00050068 	andeq	r0, r5, r8, rrx
     544:	73696c00 	cmnvc	r9, #0, 24
     548:	00682e74 	rsbeq	r2, r8, r4, ror lr
     54c:	63000006 	movwvs	r0, #6
     550:	74756f72 	ldrbtvc	r6, [r5], #-3954	; 0xf72
     554:	2e656e69 	cdpcs	14, 6, cr6, cr5, cr9, {3}
     558:	00060068 	andeq	r0, r6, r8, rrx
     55c:	726f7000 	rsbvc	r7, pc, #0
     560:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     564:	00682e65 	rsbeq	r2, r8, r5, ror #28
     568:	74000006 	strvc	r0, [r0], #-6
     56c:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
     570:	00060068 	andeq	r0, r6, r8, rrx
     574:	05000000 	streq	r0, [r0, #-0]
     578:	0005e002 	andeq	lr, r5, r2
     57c:	01890308 	orreq	r0, r9, r8, lsl #6
     580:	1b252e01 	blne	94bd8c <_Min_Stack_Size+0x94b98c>
     584:	03402f33 	movteq	r2, #3891	; 0xf33
     588:	591d6610 	ldmdbpl	sp, {r4, r9, sl, sp, lr}
     58c:	3d312f21 	ldccc	15, cr2, [r1, #-132]!	; 0xffffff7c
     590:	034a0d03 	movteq	r0, #44291	; 0xad03
     594:	54286678 	strtpl	r6, [r8], #-1656	; 0x678
     598:	271d6232 			; <UNDEFINED> instruction: 0x271d6232
     59c:	01a6033e 			; <UNDEFINED> instruction: 0x01a6033e
     5a0:	b6034d3c 			; <UNDEFINED> instruction: 0xb6034d3c
     5a4:	ca032e7e 	bgt	cbfa4 <_Min_Stack_Size+0xcbba4>
     5a8:	322b2001 	eorcc	r2, fp, #1
     5ac:	3d2d402a 	stccc	0, cr4, [sp, #-168]!	; 0xffffff58
     5b0:	2d2f6a3d 	vstmdbcs	pc!, {s12-s72}
     5b4:	032f2d2f 	teqeq	pc, #3008	; 0xbc0
     5b8:	322e7ed4 	eorcc	r7, lr, #212, 28	; 0xd40
     5bc:	01000502 	tsteq	r0, r2, lsl #10
     5c0:	02050001 	andeq	r0, r5, #1
     5c4:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
     5c8:	0101c203 	tsteq	r1, r3, lsl #4
     5cc:	33293325 	teqcc	r9, #-1811939328	; 0x94000000
     5d0:	251b2529 	ldrcs	r2, [fp, #-1321]	; 0x529
     5d4:	03207603 	teqeq	r0, #3145728	; 0x300000
     5d8:	1e33200a 	cdpne	0, 3, cr2, cr3, cr10, {0}
     5dc:	03422422 	movteq	r2, #9250	; 0x2422
     5e0:	03342e7a 	teqeq	r4, #1952	; 0x7a0
     5e4:	0c032e74 	stceq	14, cr2, [r3], {116}	; 0x74
     5e8:	3e244d20 	cdpcc	13, 2, cr4, cr4, cr0, {1}
     5ec:	0003022c 	andeq	r0, r3, ip, lsr #4
     5f0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     5f4:	00071402 	andeq	r1, r7, r2, lsl #8
     5f8:	02b90308 	adcseq	r0, r9, #8, 6	; 0x20000000
     5fc:	7fb30301 	svcvc	0x00b30301
     600:	00cd032e 	sbceq	r0, sp, lr, lsr #6
     604:	7fb3034a 	svcvc	0x00b3034a
     608:	9e0d0320 	cdpls	3, 0, cr0, cr13, cr0, {1}
     60c:	303c7803 	eorscc	r7, ip, r3, lsl #16
     610:	3e1e4e2f 	cdpcc	14, 1, cr4, cr14, cr15, {1}
     614:	c873033d 	ldmdagt	r3!, {r0, r2, r3, r4, r5, r8, r9}^
     618:	033c1603 	teqeq	ip, #3145728	; 0x300000
     61c:	0320080e 	teqeq	r0, #917504	; 0xe0000
     620:	0d032e72 	stceq	14, cr2, [r3, #-456]	; 0xfffffe38
     624:	2e210320 	cdpcs	3, 2, cr0, cr1, cr0, {1}
     628:	032e5203 	teqeq	lr, #805306368	; 0x30000000
     62c:	7203200e 	andvc	r2, r3, #14
     630:	200d034a 	andcs	r0, sp, sl, asr #6
     634:	032e2103 	teqeq	lr, #-1073741824	; 0xc0000000
     638:	2d312e53 	ldccs	14, cr2, [r1, #-332]!	; 0xfffffeb4
     63c:	0c03232f 	stceq	3, cr2, [r3], {47}	; 0x2f
     640:	563e764a 	ldrtpl	r7, [lr], -sl, asr #12
     644:	03301e22 	teqeq	r0, #544	; 0x220
     648:	79034a0d 	stmdbvc	r3, {r0, r2, r3, r9, fp, lr}
     64c:	303f352e 	eorscc	r3, pc, lr, lsr #10
     650:	3e31222c 	cdpcc	2, 3, cr2, cr1, cr12, {1}
     654:	03d66503 	bicseq	r6, r6, #12582912	; 0xc00000
     658:	3e03746e 	cdpcc	4, 0, cr7, cr3, cr14, {3}
     65c:	2073032e 	rsbscs	r0, r3, lr, lsr #6
     660:	922e0d03 	eorls	r0, lr, #3, 26	; 0xc0
     664:	20790325 	rsbscs	r0, r9, r5, lsr #6
     668:	7903335a 	stmdbvc	r3, {r1, r3, r4, r6, r8, r9, ip, sp}
     66c:	66120320 	ldrvs	r0, [r2], -r0, lsr #6
     670:	3c7fbd03 	ldclcc	13, cr11, [pc], #-12	; 66c <_Min_Stack_Size+0x26c>
     674:	24212f1f 	strtcs	r2, [r1], #-3871	; 0xf1f
     678:	32502d1b 	subscc	r2, r0, #1728	; 0x6c0
     67c:	412e2f03 	teqmi	lr, r3, lsl #30
     680:	311d2308 	tstcc	sp, r8, lsl #6
     684:	0331231d 	teqeq	r1, #1946157056	; 0x74000000
     688:	02029e70 	andeq	r9, r2, #112, 28	; 0x700
     68c:	00010100 	andeq	r0, r1, r0, lsl #2
     690:	09040205 	stmdbeq	r4, {r0, r2, r9}
     694:	eb030800 	bl	c269c <_Min_Stack_Size+0xc229c>
     698:	2f270102 	svccs	0x00270102
     69c:	0a037659 	beq	de008 <_Min_Stack_Size+0xddc08>
     6a0:	00050274 	andeq	r0, r5, r4, ror r2
     6a4:	033d0101 	teqeq	sp, #1073741824	; 0x40000000
     6a8:	00020000 	andeq	r0, r2, r0
     6ac:	00000126 	andeq	r0, r0, r6, lsr #2
     6b0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     6b4:	0101000d 	tsteq	r1, sp
     6b8:	00000101 	andeq	r0, r0, r1, lsl #2
     6bc:	00000100 	andeq	r0, r0, r0, lsl #2
     6c0:	65724601 	ldrbvs	r4, [r2, #-1537]!	; 0x601
     6c4:	4f545265 	svcmi	0x00545265
     6c8:	752f0053 	strvc	r0, [pc, #-83]!	; 67d <_Min_Stack_Size+0x27d>
     6cc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 508 <_Min_Stack_Size+0x108>
     6d0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     6d4:	612f6363 	teqvs	pc, r3, ror #6
     6d8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     6dc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     6e0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     6e4:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     6e8:	692f322e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, ip, sp}	; <UNPREDICTABLE>
     6ec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     6f0:	2f006564 	svccs	0x00006564
     6f4:	2f727375 	svccs	0x00727375
     6f8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     6fc:	2f656475 	svccs	0x00656475
     700:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     704:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 568 <_Min_Stack_Size+0x168>
     708:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     70c:	2f00656e 	svccs	0x0000656e
     710:	2f727375 	svccs	0x00727375
     714:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     718:	2f656475 	svccs	0x00656475
     71c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     720:	46006269 	strmi	r6, [r0], -r9, ror #4
     724:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     728:	2f534f54 	svccs	0x00534f54
     72c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
     730:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     734:	4343472f 	movtmi	r4, #14127	; 0x372f
     738:	4d52412f 	ldfmie	f4, [r2, #-188]	; 0xffffff44
     73c:	344d435f 	strbcc	r4, [sp], #-863	; 0x35f
     740:	72460046 	subvc	r0, r6, #70	; 0x46
     744:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     748:	692f534f 	stmdbvs	pc!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     74c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     750:	00006564 	andeq	r6, r0, r4, ror #10
     754:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     758:	72675f74 	rsbvc	r5, r7, #116, 30	; 0x1d0
     75c:	7370756f 	cmnvc	r0, #465567744	; 0x1bc00000
     760:	0100632e 	tsteq	r0, lr, lsr #6
     764:	74730000 	ldrbtvc	r0, [r3], #-0
     768:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     76c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     770:	645f0000 	ldrbvs	r0, [pc], #-0	; 778 <_Min_Stack_Size+0x378>
     774:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     778:	745f746c 	ldrbvc	r7, [pc], #-1132	; 780 <_Min_Stack_Size+0x380>
     77c:	73657079 	cmnvc	r5, #121	; 0x79
     780:	0300682e 	movweq	r6, #2094	; 0x82e
     784:	74730000 	ldrbtvc	r0, [r3], #-0
     788:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     78c:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     790:	6f700000 	svcvs	0x00700000
     794:	616d7472 	smcvs	55106	; 0xd742
     798:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     79c:	00050068 	andeq	r0, r5, r8, rrx
     7a0:	73696c00 	cmnvc	r9, #0, 24
     7a4:	00682e74 	rsbeq	r2, r8, r4, ror lr
     7a8:	65000006 	strvs	r0, [r0, #-6]
     7ac:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     7b0:	6f72675f 	svcvs	0x0072675f
     7b4:	2e737075 	mrccs	0, 3, r7, cr3, cr5, {3}
     7b8:	00060068 	andeq	r0, r6, r8, rrx
     7bc:	726f7000 	rsbvc	r7, pc, #0
     7c0:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     7c4:	00682e65 	rsbeq	r2, r8, r5, ror #28
     7c8:	74000006 	strvc	r0, [r0], #-6
     7cc:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
     7d0:	00060068 	andeq	r0, r6, r8, rrx
     7d4:	05000000 	streq	r0, [r0, #-0]
     7d8:	00093c02 	andeq	r3, r9, r2, lsl #24
     7dc:	01860308 	orreq	r0, r6, r8, lsl #6
     7e0:	303d2301 	eorscc	r2, sp, r1, lsl #6
     7e4:	2e09033d 	mcrcs	3, 0, r0, cr9, cr13, {1}
     7e8:	01000202 	tsteq	r0, r2, lsl #4
     7ec:	02050001 	andeq	r0, r5, #1
     7f0:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
     7f4:	01028b03 	tsteq	r2, r3, lsl #22
     7f8:	2e780336 	mrccs	3, 3, r0, cr8, cr6, {1}
     7fc:	0200216e 	andeq	r2, r0, #-2147483621	; 0x8000001b
     800:	20060104 	andcs	r0, r6, r4, lsl #2
     804:	02003f06 	andeq	r3, r0, #6, 30
     808:	3c060204 	sfmcc	f0, 4, [r6], {4}
     80c:	03304006 	teqeq	r0, #6
     810:	402002b2 	strhtmi	r0, [r0], -r2
     814:	2e7dd703 	cdpcs	7, 7, cr13, cr13, cr3, {0}
     818:	04020022 	streq	r0, [r2], #-34	; 0x22
     81c:	4a670301 	bmi	19c1428 <_Min_Stack_Size+0x19c1028>
     820:	02c90340 	sbceq	r0, r9, #64, 6
     824:	7dd3033c 	ldclvc	3, cr0, [r3, #240]	; 0xf0
     828:	3c2b034a 	stccc	3, cr0, [fp], #-296	; 0xfffffed8
     82c:	032e3903 	teqeq	lr, #49152	; 0xc000
     830:	033c7fa8 	teqeq	ip, #168, 30	; 0x2a0
     834:	0c039e09 	stceq	14, cr9, [r3], {9}
     838:	580a034a 	stmdapl	sl, {r1, r3, r6, r8, r9}
     83c:	0b032232 	bleq	c910c <_Min_Stack_Size+0xc8d0c>
     840:	2103302e 	tstcs	r3, lr, lsr #32
     844:	3c5f0320 	mrrccc	3, 2, r0, pc, cr0	; <UNPREDICTABLE>
     848:	d9033122 	stmdble	r3, {r1, r5, r8, ip, sp}
     84c:	03402001 	movteq	r2, #1
     850:	222e7ea9 	eorcs	r7, lr, #2704	; 0xa90
     854:	02040200 	andeq	r0, r4, #0, 4
     858:	033c0c03 	teqeq	ip, #768	; 0x300
     85c:	023c01d6 	eorseq	r0, ip, #-2147483595	; 0x80000035
     860:	01010005 	tsteq	r1, r5
     864:	28020500 	stmdacs	r2, {r8, sl}
     868:	0308000a 	movweq	r0, #32778	; 0x800a
     86c:	1801039b 	stmdane	r1, {r0, r1, r3, r4, r7, r8, r9}
     870:	202e7a03 	eorcs	r7, lr, r3, lsl #20
     874:	04020034 	streq	r0, [r2], #-52	; 0x34
     878:	06200601 	strteq	r0, [r0], -r1, lsl #12
     87c:	3e23343e 	mcrcc	4, 1, r3, cr3, cr14, {1}
     880:	00020231 	andeq	r0, r2, r1, lsr r2
     884:	05000101 	streq	r0, [r0, #-257]	; 0x101
     888:	000a5002 	andeq	r5, sl, r2
     88c:	03b50308 			; <UNDEFINED> instruction: 0x03b50308
     890:	79031901 	stmdbvc	r3, {r0, r8, fp, ip}
     894:	0035202e 	eorseq	r2, r5, lr, lsr #32
     898:	06010402 	streq	r0, [r1], -r2, lsl #8
     89c:	343e0620 	ldrtcc	r0, [lr], #-1568	; 0x620
     8a0:	02313e23 	eorseq	r3, r1, #560	; 0x230
     8a4:	01010002 	tsteq	r1, r2
     8a8:	78020500 	stmdavc	r2, {r8, sl}
     8ac:	0308000a 	movweq	r0, #32778	; 0x800a
     8b0:	030103d0 	movweq	r0, #5072	; 0x13d0
     8b4:	7603200a 	strvc	r2, [r3], -sl
     8b8:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
     8bc:	01040200 	mrseq	r0, R12_usr
     8c0:	40062006 	andmi	r2, r6, r6
     8c4:	03231d35 	teqeq	r3, #3392	; 0xd40
     8c8:	0b032078 	bleq	c8ab0 <_Min_Stack_Size+0xc86b0>
     8cc:	03231d2e 	teqeq	r3, #2944	; 0xb80
     8d0:	16032e0d 	strne	r2, [r3], -sp, lsl #28
     8d4:	200e032e 	andcs	r0, lr, lr, lsr #6
     8d8:	032e7403 	teqeq	lr, #50331648	; 0x3000000
     8dc:	02002e0c 	andeq	r2, r0, #12, 28	; 0xc0
     8e0:	4f030104 	svcmi	0x00030104
     8e4:	062e063c 			; <UNDEFINED> instruction: 0x062e063c
     8e8:	302c3622 	eorcc	r3, ip, r2, lsr #12
     8ec:	03200c03 	teqeq	r0, #768	; 0x300
     8f0:	3c034a6a 	stccc	10, cr4, [r3], {106}	; 0x6a
     8f4:	0330303c 	teqeq	r0, #60	; 0x3c
     8f8:	03022e40 	movweq	r2, #11840	; 0x2e40
     8fc:	00010100 	andeq	r0, r1, r0, lsl #2
     900:	0ae80205 	beq	ffa0111c <_estack+0xdf9d111c>
     904:	9a030800 	bls	c290c <_Min_Stack_Size+0xc250c>
     908:	03180101 	tsteq	r8, #1073741824	; 0x40000000
     90c:	50202e7a 	eorpl	r2, r0, sl, ror lr
     910:	04020021 	streq	r0, [r2], #-33	; 0x21
     914:	06200601 	strteq	r0, [r0], -r1, lsl #12
     918:	0402003f 	streq	r0, [r2], #-63	; 0x3f
     91c:	063c0602 	ldrteq	r0, [ip], -r2, lsl #12
     920:	30223032 	eorcc	r3, r2, r2, lsr r0
     924:	2003301e 	andcs	r3, r3, lr, lsl r0
     928:	3503244a 	strcc	r2, [r3, #-1098]	; 0x44a
     92c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     930:	7f990301 	svcvc	0x00990301
     934:	2230442e 	eorscs	r4, r0, #771751936	; 0x2e000000
     938:	03301e30 	teqeq	r0, #48, 28	; 0x300
     93c:	03354a0d 	teqeq	r5, #53248	; 0xd000
     940:	22326610 	eorscs	r6, r2, #16, 12	; 0x1000000
     944:	302e0b03 	eorcc	r0, lr, r3, lsl #22
     948:	03201c03 	teqeq	r0, #768	; 0x300
     94c:	30233c64 	eorcc	r3, r3, r4, ror #24
     950:	03513e26 	cmpeq	r1, #608	; 0x260
     954:	033c7fbc 	teqeq	ip, #188, 30	; 0x2f0
     958:	03024a6f 	movweq	r4, #10863	; 0x2a6f
     95c:	00010100 	andeq	r0, r1, r0, lsl #2
     960:	0b9c0205 	bleq	fe70117c <_estack+0xde6d117c>
     964:	ad030800 	stcge	8, cr0, [r3, #-0]
     968:	24200104 	strtcs	r0, [r0], #-260	; 0x104
     96c:	45913232 	ldrmi	r3, [r1, #562]	; 0x232
     970:	032d3f44 	teqeq	sp, #68, 30	; 0x110
     974:	03022e7a 	movweq	r2, #11898	; 0x2e7a
     978:	00010100 	andeq	r0, r1, r0, lsl #2
     97c:	0bdc0205 	bleq	ff701198 <_estack+0xdf6d1198>
     980:	c6030800 	strgt	r0, [r3], -r0, lsl #16
     984:	94030104 	strls	r0, [r3], #-260	; 0x104
     988:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
     98c:	94032e00 	strls	r2, [r3], #-3584	; 0xe00
     990:	354e2e7f 	strbcc	r2, [lr, #-3711]	; 0xe7f
     994:	7803231d 	stmdavc	r3, {r0, r2, r3, r4, r8, r9, sp}
     998:	2e0b0320 	cdpcs	3, 0, cr0, cr11, cr0, {1}
     99c:	0d03231d 	stceq	3, cr2, [r3, #-116]	; 0xffffff8c
     9a0:	2e16032e 	cdpcs	3, 1, cr0, cr6, cr14, {1}
     9a4:	03200e03 	teqeq	r0, #3, 28	; 0x30
     9a8:	0c032e74 	stceq	14, cr2, [r3], {116}	; 0x74
     9ac:	3c4f032e 	mcrrcc	3, 2, r0, pc, cr14
     9b0:	302c363e 	eorcc	r3, ip, lr, lsr r6
     9b4:	03200c03 	teqeq	r0, #768	; 0x300
     9b8:	3c034a6a 	stccc	10, cr4, [r3], {106}	; 0x6a
     9bc:	2e24033c 	mcrcs	3, 1, r0, cr4, cr12, {1}
     9c0:	032e5e03 	teqeq	lr, #3, 28	; 0x30
     9c4:	3c032e42 	stccc	14, cr2, [r3], {66}	; 0x42
     9c8:	2e24032e 	cdpcs	3, 2, cr0, cr4, cr14, {1}
     9cc:	022e5e03 	eoreq	r5, lr, #3, 28	; 0x30
     9d0:	01010002 	tsteq	r1, r2
     9d4:	58020500 	stmdapl	r2, {r8, sl}
     9d8:	0308000c 	movweq	r0, #32780	; 0x800c
     9dc:	160104fd 			; <UNDEFINED> instruction: 0x160104fd
     9e0:	01022426 	tsteq	r2, r6, lsr #8
     9e4:	6c010100 	stfvss	f0, [r1], {-0}
     9e8:	02000001 	andeq	r0, r0, #1
     9ec:	0000bf00 	andeq	fp, r0, r0, lsl #30
     9f0:	fb010200 	blx	411fa <_Min_Stack_Size+0x40dfa>
     9f4:	01000d0e 	tsteq	r0, lr, lsl #26
     9f8:	00010101 	andeq	r0, r1, r1, lsl #2
     9fc:	00010000 	andeq	r0, r1, r0
     a00:	72460100 	subvc	r0, r6, #0, 2
     a04:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     a08:	2f00534f 	svccs	0x0000534f
     a0c:	2f727375 	svccs	0x00727375
     a10:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     a14:	2f656475 	svccs	0x00656475
     a18:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     a1c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 880 <_Min_Stack_Size+0x480>
     a20:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     a24:	2f00656e 	svccs	0x0000656e
     a28:	2f727375 	svccs	0x00727375
     a2c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     a30:	2f656475 	svccs	0x00656475
     a34:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     a38:	46006269 	strmi	r6, [r0], -r9, ror #4
     a3c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     a40:	2f534f54 	svccs	0x00534f54
     a44:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
     a48:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     a4c:	4343472f 	movtmi	r4, #14127	; 0x372f
     a50:	4d52412f 	ldfmie	f4, [r2, #-188]	; 0xffffff44
     a54:	344d435f 	strbcc	r4, [sp], #-863	; 0x35f
     a58:	72460046 	subvc	r0, r6, #70	; 0x46
     a5c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     a60:	692f534f 	stmdbvs	pc!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     a64:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     a68:	00006564 	andeq	r6, r0, r4, ror #10
     a6c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
     a70:	0100632e 	tsteq	r0, lr, lsr #6
     a74:	645f0000 	ldrbvs	r0, [pc], #-0	; a7c <_Min_Stack_Size+0x67c>
     a78:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     a7c:	745f746c 	ldrbvc	r7, [pc], #-1132	; a84 <_Min_Stack_Size+0x684>
     a80:	73657079 	cmnvc	r5, #121	; 0x79
     a84:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a88:	74730000 	ldrbtvc	r0, [r3], #-0
     a8c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     a90:	0300682e 	movweq	r6, #2094	; 0x82e
     a94:	6f700000 	svcvs	0x00700000
     a98:	616d7472 	smcvs	55106	; 0xd742
     a9c:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     aa0:	00040068 	andeq	r0, r4, r8, rrx
     aa4:	73696c00 	cmnvc	r9, #0, 24
     aa8:	00682e74 	rsbeq	r2, r8, r4, ror lr
     aac:	00000005 	andeq	r0, r0, r5
     ab0:	60020500 	andvs	r0, r2, r0, lsl #10
     ab4:	0308000c 	movweq	r0, #32780	; 0x800c
     ab8:	160100cb 	strne	r0, [r1], -fp, asr #1
     abc:	79033532 	stmdbvc	r3, {r1, r4, r5, r8, sl, ip, sp}
     ac0:	21361c20 	teqcs	r6, r0, lsr #24
     ac4:	01000202 	tsteq	r0, r2, lsl #4
     ac8:	02050001 	andeq	r0, r5, #1
     acc:	08000c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp}
     ad0:	0100df03 	tsteq	r0, r3, lsl #30
     ad4:	00030214 	andeq	r0, r3, r4, lsl r2
     ad8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     adc:	000c8002 	andeq	r8, ip, r2
     ae0:	00e60308 	rsceq	r0, r6, r8, lsl #6
     ae4:	03261301 	teqeq	r6, #67108864	; 0x4000000
     ae8:	0e032079 	mcreq	0, 0, r2, cr3, cr9, {3}
     aec:	20790320 	rsbscs	r0, r9, r0, lsr #6
     af0:	03281e21 	teqeq	r8, #528	; 0x210
     af4:	2321207a 	teqcs	r1, #122	; 0x7a
     af8:	03022122 	movweq	r2, #8482	; 0x2122
     afc:	00010100 	andeq	r0, r1, r0, lsl #2
     b00:	0ca00205 	sfmeq	f0, 4, [r0], #20
     b04:	f9030800 			; <UNDEFINED> instruction: 0xf9030800
     b08:	03220100 	teqeq	r2, #0, 2
     b0c:	1803200b 	stmdane	r3, {r0, r1, r3, sp}
     b10:	3c680320 	stclcc	3, cr0, [r8], #-128	; 0xffffff80
     b14:	01040200 	mrseq	r0, R12_usr
     b18:	033c1803 	teqeq	ip, #196608	; 0x30000
     b1c:	77034a10 	smladvc	r3, r0, sl, r4
     b20:	20090320 	andcs	r0, r9, r0, lsr #6
     b24:	21207803 	teqcs	r0, r3, lsl #16
     b28:	21222421 	teqcs	r2, r1, lsr #8
     b2c:	022e5903 	eoreq	r5, lr, #49152	; 0xc000
     b30:	01010003 	tsteq	r1, r3
     b34:	d4020500 	strle	r0, [r2], #-1280	; 0x500
     b38:	0308000c 	movweq	r0, #32780	; 0x800c
     b3c:	170101b3 			; <UNDEFINED> instruction: 0x170101b3
     b40:	21251d2c 	teqcs	r5, ip, lsr #26
     b44:	0d031d23 	stceq	13, cr1, [r3, #-140]	; 0xffffff74
     b48:	20760320 	rsbscs	r0, r6, r0, lsr #6
     b4c:	321f3622 	andscc	r3, pc, #35651584	; 0x2200000
     b50:	0202232b 	andeq	r2, r2, #-1409286144	; 0xac000000
     b54:	84010100 	strhi	r0, [r1], #-256	; 0x100
     b58:	02000007 	andeq	r0, r0, #7
     b5c:	00011800 	andeq	r1, r1, r0, lsl #16
     b60:	fb010200 	blx	4136a <_Min_Stack_Size+0x40f6a>
     b64:	01000d0e 	tsteq	r0, lr, lsl #26
     b68:	00010101 	andeq	r0, r1, r1, lsl #2
     b6c:	00010000 	andeq	r0, r1, r0
     b70:	72460100 	subvc	r0, r6, #0, 2
     b74:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     b78:	2f00534f 	svccs	0x0000534f
     b7c:	2f727375 	svccs	0x00727375
     b80:	2f62696c 	svccs	0x0062696c
     b84:	2f636367 	svccs	0x00636367
     b88:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     b8c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     b90:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     b94:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
     b98:	2f322e38 	svccs	0x00322e38
     b9c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     ba0:	00656475 	rsbeq	r6, r5, r5, ror r4
     ba4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     ba8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     bac:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     bb0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     bb4:	2f62696c 	svccs	0x0062696c
     bb8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     bbc:	00656e69 	rsbeq	r6, r5, r9, ror #28
     bc0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     bc4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     bc8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     bcc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     bd0:	0062696c 	rsbeq	r6, r2, ip, ror #18
     bd4:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     bd8:	534f5452 	movtpl	r5, #62546	; 0xf452
     bdc:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     be0:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     be4:	43472f65 	movtmi	r2, #32613	; 0x7f65
     be8:	52412f43 	subpl	r2, r1, #268	; 0x10c
     bec:	4d435f4d 	stclmi	15, cr5, [r3, #-308]	; 0xfffffecc
     bf0:	46004634 			; <UNDEFINED> instruction: 0x46004634
     bf4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     bf8:	2f534f54 	svccs	0x00534f54
     bfc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     c00:	00656475 	rsbeq	r6, r5, r5, ror r4
     c04:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0x100
     c08:	632e6575 	teqvs	lr, #490733568	; 0x1d400000
     c0c:	00000100 	andeq	r0, r0, r0, lsl #2
     c10:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
     c14:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     c18:	00000200 	andeq	r0, r0, r0, lsl #4
     c1c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     c20:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     c24:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     c28:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     c2c:	00000300 	andeq	r0, r0, r0, lsl #6
     c30:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     c34:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     c38:	00000400 	andeq	r0, r0, r0, lsl #8
     c3c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
     c40:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     c44:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     c48:	6c000005 	stcvs	0, cr0, [r0], {5}
     c4c:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     c50:	00060068 	andeq	r0, r6, r8, rrx
     c54:	73617400 	cmnvc	r1, #0, 8
     c58:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     c5c:	71000006 	tstvc	r0, r6
     c60:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     c64:	0600682e 	streq	r6, [r0], -lr, lsr #16
     c68:	6f700000 	svcvs	0x00700000
     c6c:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     c70:	682e656c 	stmdavs	lr!, {r2, r3, r5, r6, r8, sl, sp, lr}
     c74:	00000600 	andeq	r0, r0, r0, lsl #12
     c78:	02050000 	andeq	r0, r5, #0
     c7c:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
     c80:	010d8003 	tsteq	sp, r3
     c84:	22211f21 	eorcs	r1, r1, #33, 30	; 0x84
     c88:	1f211f2f 	svcne	0x00211f2f
     c8c:	03263423 	teqeq	r6, #587202560	; 0x23000000
     c90:	0242207a 	subeq	r2, r2, #122	; 0x7a
     c94:	01010002 	tsteq	r1, r2
     c98:	24020500 	strcs	r0, [r2], #-1280	; 0x500
     c9c:	0308000d 	movweq	r0, #32781	; 0x800d
     ca0:	20010d96 	mulcs	r1, r6, sp
     ca4:	2f033127 	svccs	0x00033127
     ca8:	5814033c 	ldmdapl	r4, {r2, r3, r4, r5, r8, r9}
     cac:	3c7fbd03 	ldclcc	13, cr11, [pc], #-12	; ca8 <_Min_Stack_Size+0x8a8>
     cb0:	303c2f03 	eorscc	r2, ip, r3, lsl #30
     cb4:	3c11035c 	ldccc	3, cr0, [r1], {92}	; 0x5c
     cb8:	3e30313e 	mrccc	1, 1, r3, cr0, cr14, {1}
     cbc:	03580b03 	cmpeq	r8, #3072	; 0xc00
     cc0:	303e3c73 	eorscc	r3, lr, r3, ror ip
     cc4:	3c0f035a 	stccc	3, cr0, [pc], {90}	; 0x5a
     cc8:	02022d3f 	andeq	r2, r2, #4032	; 0xfc0
     ccc:	00010100 	andeq	r0, r1, r0, lsl #2
     cd0:	0da80205 	sfmeq	f0, 4, [r8, #20]!
     cd4:	ff030800 			; <UNDEFINED> instruction: 0xff030800
     cd8:	1d230101 	stfnes	f0, [r3, #-4]!
     cdc:	5b302223 	blpl	c09570 <_Min_Stack_Size+0xc09170>
     ce0:	2b241f2c 	blcs	908998 <_Min_Stack_Size+0x908598>
     ce4:	221c2122 	andscs	r2, ip, #-2147483640	; 0x80000008
     ce8:	03272223 	teqeq	r7, #805306370	; 0x30000002
     cec:	03332e17 	teqeq	r3, #368	; 0x170
     cf0:	03682e66 	cmneq	r8, #1632	; 0x660
     cf4:	03332e13 	teqeq	r3, #304	; 0x130
     cf8:	4d4b2e77 	stclmi	14, cr2, [fp, #-476]	; 0xfffffe24
     cfc:	04020033 	streq	r0, [r2], #-51	; 0x33
     d00:	2e520301 	cdpcs	3, 5, cr0, cr2, cr1, {0}
     d04:	01000302 	tsteq	r0, r2, lsl #6
     d08:	02050001 	andeq	r0, r5, #1
     d0c:	08000e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp}
     d10:	0102b403 	tsteq	r2, r3, lsl #8
     d14:	03200a03 	teqeq	r0, #12288	; 0x3000
     d18:	0a032076 	beq	c8ef8 <_Min_Stack_Size+0xc8af8>
     d1c:	323d302e 	eorscc	r3, sp, #46	; 0x2e
     d20:	21244b30 	teqcs	r4, r0, lsr fp
     d24:	207fb703 	rsbscs	fp, pc, r3, lsl #14
     d28:	1f2c5b30 	svcne	0x002c5b30
     d2c:	22212b24 	eorcs	r2, r1, #36, 22	; 0x9000
     d30:	1c03251c 	cfstr32ne	mvfx2, [r3], {28}
     d34:	2e620320 	cdpcs	3, 6, cr0, cr2, cr0, {1}
     d38:	2f201e03 	svccs	0x00201e03
     d3c:	2e27034d 	cdpcs	3, 2, cr0, cr7, cr13, {2}
     d40:	032e2003 	teqeq	lr, #3
     d44:	0d032e70 	stceq	14, cr2, [r3, #-448]	; 0xfffffe40
     d48:	0003023c 	andeq	r0, r3, ip, lsr r2
     d4c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d50:	000e9402 	andeq	r9, lr, r2, lsl #8
     d54:	04b60308 	ldrteq	r0, [r6], #776	; 0x308
     d58:	231d2301 	tstcs	sp, #67108864	; 0x4000000
     d5c:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     d60:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     d64:	3c7e8603 	ldclcc	6, cr8, [lr], #-12
     d68:	254b343d 	strbcs	r3, [fp, #-1085]	; 0x43d
     d6c:	b703211f 	smladlt	r3, pc, r1, r2	; <UNPREDICTABLE>
     d70:	3d30207f 	ldccc	0, cr2, [r0, #-508]!	; 0xfffffe04
     d74:	242b311f 	strtcs	r3, [fp], #-287	; 0x11f
     d78:	251c222c 	ldrcs	r2, [ip, #-556]	; 0x22c
     d7c:	201e031e 	andscs	r0, lr, lr, lsl r3
     d80:	27034d4b 	strcs	r4, [r3, -fp, asr #26]
     d84:	01ee032e 	mvneq	r0, lr, lsr #6
     d88:	200b033c 	andcs	r0, fp, ip, lsr r3
     d8c:	01040200 	mrseq	r0, R12_usr
     d90:	032e6e03 	teqeq	lr, #3, 28	; 0x30
     d94:	033c7ea9 	teqeq	ip, #2704	; 0xa90
     d98:	03023c0d 	movweq	r3, #11277	; 0x2c0d
     d9c:	00010100 	andeq	r0, r1, r0, lsl #2
     da0:	0f180205 	svceq	0x00180205
     da4:	d1030800 	tstle	r3, r0, lsl #16
     da8:	1b410104 	blne	10411c0 <_Min_Stack_Size+0x1040dc0>
     dac:	313d3d41 	teqcc	sp, r1, asr #26
     db0:	02040200 	andeq	r0, r4, #0, 4
     db4:	03063c06 	movweq	r3, #27654	; 0x6c06
     db8:	03344a0a 	teqeq	r4, #40960	; 0xa000
     dbc:	1a032e66 	bne	cc75c <_Min_Stack_Size+0xcc35c>
     dc0:	00ef032e 	rsceq	r0, pc, lr, lsr #6
     dc4:	84032820 	strhi	r2, [r3], #-2080	; 0x820
     dc8:	85034a08 	strhi	r4, [r3, #-2568]	; 0xa08
     dcc:	02002e77 	andeq	r2, r0, #1904	; 0x770
     dd0:	20060104 	andcs	r0, r6, r4, lsl #2
     dd4:	00d00306 	sbcseq	r0, r0, r6, lsl #6
     dd8:	4a0b033c 	bmi	2c1ad0 <_Min_Stack_Size+0x2c16d0>
     ddc:	334a0e03 	movtcc	r0, #44547	; 0xae03
     de0:	d603d92f 	strle	sp, [r3], -pc, lsr #18
     de4:	03307408 	teqeq	r0, #8, 8	; 0x8000000
     de8:	df034a09 	svcle	0x00034a09
     dec:	03312e7e 	teqeq	r1, #2016	; 0x7e0
     df0:	034a00c3 	movteq	r0, #41155	; 0xa0c3
     df4:	033c7fbd 	teqeq	ip, #756	; 0x2f4
     df8:	5c303c2f 	ldcpl	12, cr3, [r0], #-188	; 0xffffff44
     dfc:	02040200 	andeq	r0, r4, #0, 4
     e00:	3c778303 	ldclcc	3, cr8, [r7], #-12
     e04:	03063c06 	movweq	r3, #27654	; 0x6c06
     e08:	303c098e 	eorscc	r0, ip, lr, lsl #19
     e0c:	033e3031 	teqeq	lr, #49	; 0x31
     e10:	73033c0b 	movwvc	r3, #15371	; 0x3c0b
     e14:	5a303e3c 	bpl	c1070c <_Min_Stack_Size+0xc1030c>
     e18:	303c0f03 	eorscc	r0, ip, r3, lsl #30
     e1c:	2e77f503 	cdpcs	5, 7, cr15, cr7, cr3, {0}
     e20:	2e7eec03 	cdpcs	12, 7, cr14, cr14, cr3, {0}
     e24:	07d00334 			; <UNDEFINED> instruction: 0x07d00334
     e28:	3c110366 	ldccc	3, cr0, [r1], {102}	; 0x66
     e2c:	1f2f4b30 	svcne	0x002f4b30
     e30:	22211f21 	eorcs	r1, r1, #33, 30	; 0x84
     e34:	3c01ec03 	stccc	12, cr14, [r1], {3}
     e38:	2e77a403 	cdpcs	4, 7, cr10, cr7, cr3, {0}
     e3c:	4a07bb03 	bmi	1efa50 <_Min_Stack_Size+0x1ef650>
     e40:	00c30331 	sbceq	r0, r3, r1, lsr r3
     e44:	7fbd034a 	svcvc	0x00bd034a
     e48:	3c2f033c 	stccc	3, cr0, [pc], #-240	; d60 <_Min_Stack_Size+0x960>
     e4c:	11035c30 	tstne	r3, r0, lsr ip
     e50:	3031303c 	eorscc	r3, r1, ip, lsr r0
     e54:	034a0d03 	movteq	r0, #44291	; 0xad03
     e58:	303e3c73 	eorscc	r3, lr, r3, ror ip
     e5c:	3c0f035a 	stccc	3, cr0, [pc], {90}	; 0x5a
     e60:	77ec0330 			; <UNDEFINED> instruction: 0x77ec0330
     e64:	58034c2e 	stmdapl	r3, {r1, r2, r3, r5, sl, fp, lr}
     e68:	0402003c 	streq	r0, [r2], #-60	; 0x3c
     e6c:	7f8c0301 	svcvc	0x008c0301
     e70:	01a9034a 			; <UNDEFINED> instruction: 0x01a9034a
     e74:	23333d3c 	teqcs	r3, #60, 26	; 0xf00
     e78:	3c7fb703 	ldclcc	7, cr11, [pc], #-12	; e74 <_Min_Stack_Size+0xa74>
     e7c:	00c40341 	sbceq	r0, r4, r1, asr #6
     e80:	06b30320 	ldrteq	r0, [r3], r0, lsr #6
     e84:	3d31323c 	lfmcc	f3, 4, [r1, #-240]!	; 0xffffff10
     e88:	03203803 	teqeq	r0, #196608	; 0x30000
     e8c:	032078a2 	teqeq	r0, #10616832	; 0xa20000
     e90:	032007de 	teqeq	r0, #58195968	; 0x3780000
     e94:	032e78a2 	teqeq	lr, #10616832	; 0xa20000
     e98:	03322016 	teqeq	r2, #22
     e9c:	032000d1 	teqeq	r0, #209	; 0xd1
     ea0:	4b3c06d3 	blmi	f029f4 <_Min_Stack_Size+0xf025f4>
     ea4:	1f2f1f2f 	svcne	0x002f1f2f
     ea8:	42305123 	eorsmi	r5, r0, #-1073741816	; 0xc0000008
     eac:	4a77ed03 	bmi	1dfc2c0 <_Min_Stack_Size+0x1dfbec0>
     eb0:	02040200 	andeq	r0, r4, #0, 4
     eb4:	064a0638 			; <UNDEFINED> instruction: 0x064a0638
     eb8:	3c00c803 	stccc	8, cr12, [r0], {3}
     ebc:	0003026c 	andeq	r0, r3, ip, ror #4
     ec0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ec4:	00119802 	andseq	r9, r1, r2, lsl #16
     ec8:	02f80308 	rscseq	r0, r8, #8, 6	; 0x20000000
     ecc:	3d282001 	stccc	0, cr2, [r8, #-4]!
     ed0:	200e0331 	andcs	r0, lr, r1, lsr r3
     ed4:	22211f2c 	eorcs	r1, r1, #44, 30	; 0xb0
     ed8:	71032a25 	tstvc	r3, r5, lsr #20
     edc:	21242120 	teqcs	r4, r0, lsr #2
     ee0:	20110327 	andscs	r0, r1, r7, lsr #6
     ee4:	09034f3d 	stmdbeq	r3, {r0, r2, r3, r4, r5, r8, r9, sl, fp, lr}
     ee8:	03022c66 	movweq	r2, #11366	; 0x2c66
     eec:	00010100 	andeq	r0, r1, r0, lsl #2
     ef0:	11e80205 	mvnne	r0, r5, lsl #4
     ef4:	d7030800 	strle	r0, [r3, -r0, lsl #16]
     ef8:	36240103 	strtcc	r0, [r4], -r3, lsl #2
     efc:	00581c03 	subseq	r1, r8, r3, lsl #24
     f00:	03010402 	movweq	r0, #5122	; 0x1402
     f04:	11032e5c 	tstne	r3, ip, asr lr
     f08:	0b033f3c 	bleq	d0c00 <_Min_Stack_Size+0xd0800>
     f0c:	200b0320 	andcs	r0, fp, r0, lsr #6
     f10:	5f206e03 	svcpl	0x00206e03
     f14:	01000202 	tsteq	r0, r2, lsl #4
     f18:	02050001 	andeq	r0, r5, #1
     f1c:	0800121c 	stmdaeq	r0, {r2, r3, r4, r9, ip}
     f20:	01088103 	tsteq	r8, r3, lsl #2
     f24:	2f411b33 	svccs	0x00411b33
     f28:	2e10032f 	cdpcs	3, 1, cr0, cr0, cr15, {1}
     f2c:	033a3035 	teqeq	sl, #53	; 0x35
     f30:	032000e8 	teqeq	r0, #232	; 0xe8
     f34:	032e7f9a 	teqeq	lr, #616	; 0x268
     f38:	3f2000e9 	svccc	0x002000e9
     f3c:	02040200 	andeq	r0, r4, #0, 4
     f40:	3c7efb03 	ldclcc	11, cr15, [lr], #-12
     f44:	03063c06 	movweq	r3, #27654	; 0x6c06
     f48:	323c04b3 	eorscc	r0, ip, #-1291845632	; 0xb3000000
     f4c:	033c3c03 	teqeq	ip, #768	; 0x300
     f50:	033c7bae 	teqeq	ip, #178176	; 0x2b800
     f54:	033c00d6 	teqeq	ip, #214	; 0xd6
     f58:	78033c0b 	stmdavc	r3, {r0, r1, r3, sl, fp, ip, sp}
     f5c:	00312820 	eorseq	r2, r1, r0, lsr #16
     f60:	03010402 	movweq	r0, #5122	; 0x1402
     f64:	033c7ef9 	teqeq	ip, #3984	; 0xf90
     f68:	223c04c6 	eorscs	r0, ip, #-973078528	; 0xc6000000
     f6c:	211f2f4b 	tstcs	pc, fp, asr #30
     f70:	0322211f 	teqeq	r2, #-1073741817	; 0xc0000007
     f74:	033c7c8e 	teqeq	ip, #36352	; 0x8e00
     f78:	78033c2a 	stmdavc	r3, {r1, r3, r5, sl, fp, ip, sp}
     f7c:	03312820 	teqeq	r1, #32, 16	; 0x200000
     f80:	353c7f8b 	ldrcc	r7, [ip, #-3979]!	; 0xf8b
     f84:	049a0330 	ldreq	r0, [sl], #816	; 0x330
     f88:	7be40320 	blvc	ff901c10 <_estack+0xdf8d1c10>
     f8c:	049c0320 	ldreq	r0, [ip], #800	; 0x320
     f90:	2e200320 	cdpcs	3, 2, cr0, cr0, cr0, {1}
     f94:	2f1f2f4b 	svccs	0x001f2f4b
     f98:	3051231f 	subscc	r2, r1, pc, lsl r3
     f9c:	4a540342 	bmi	1501cac <_Min_Stack_Size+0x15018ac>
     fa0:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     fa4:	7bc40302 	blvc	ff101bb4 <_estack+0xdf0d1bb4>
     fa8:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
     fac:	3c00db03 	stccc	11, cr13, [r0], {3}
     fb0:	24031e6c 	strcs	r1, [r3], #-3692	; 0xe6c
     fb4:	205e033c 	subscs	r0, lr, ip, lsr r3
     fb8:	312e2203 	teqcc	lr, r3, lsl #4
     fbc:	01000302 	tsteq	r0, r2, lsl #6
     fc0:	02050001 	andeq	r0, r5, #1
     fc4:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
     fc8:	01099103 	tsteq	r9, r3, lsl #2
     fcc:	207a0342 	rsbscs	r0, sl, r2, asr #6
     fd0:	003f3d42 	eorseq	r3, pc, r2, asr #26
     fd4:	06020402 	streq	r0, [r2], -r2, lsl #8
     fd8:	0a03063c 	beq	c28d0 <_Min_Stack_Size+0xc24d0>
     fdc:	6803324a 	stmdavs	r3, {r1, r3, r6, r9, ip, sp}
     fe0:	01850320 	orreq	r0, r5, r0, lsr #6
     fe4:	201a032e 	andscs	r0, sl, lr, lsr #6
     fe8:	2e03b603 	cfmadd32cs	mvax0, mvfx11, mvfx3, mvfx3
     fec:	4a7bc303 	bmi	1ef1c00 <_Min_Stack_Size+0x1ef1800>
     ff0:	2e00d103 	mvfcss	f5, f3
     ff4:	4a0e0352 	bmi	381d44 <_Min_Stack_Size+0x381944>
     ff8:	03d92f33 	bicseq	r2, r9, #51, 30	; 0xcc
     ffc:	307403f3 	ldrshtcc	r0, [r4], #-51	; 0xffffffcd
    1000:	033c0903 	teqeq	ip, #49152	; 0xc000
    1004:	032e7c8a 	teqeq	lr, #35328	; 0x8a00
    1008:	ed034a0f 	vstr	s8, [r3, #-60]	; 0xffffffc4
    100c:	03314a02 	teqeq	r1, #8192	; 0x2000
    1010:	034a00c3 	movteq	r0, #41155	; 0xa0c3
    1014:	033c7fbd 	teqeq	ip, #756	; 0x2f4
    1018:	5c303c2f 	ldcpl	12, cr3, [r0], #-188	; 0xffffff44
    101c:	223c1103 	eorscs	r1, ip, #-1073741824	; 0xc0000000
    1020:	033e3031 	teqeq	lr, #49	; 0x31
    1024:	73033c0b 	movwvc	r3, #15371	; 0x3c0b
    1028:	5a303e3c 	bpl	c10920 <_Min_Stack_Size+0xc10520>
    102c:	223c0f03 	eorscs	r0, ip, #3, 30
    1030:	2e7cae03 	cdpcs	14, 7, cr10, cr12, cr3, {0}
    1034:	7ef1033e 	mrcvc	3, 7, r0, cr1, cr14, {1}
    1038:	2c5e322e 	lfmcs	f3, 2, [lr], {46}	; 0x2e
    103c:	24413022 	strbcs	r3, [r1], #-34	; 0x22
    1040:	0324321c 	teqeq	r4, #28, 4	; 0xc0000001
    1044:	2e033c09 	cdpcs	12, 0, cr3, cr3, cr9, {0}
    1048:	d4032f3c 	strle	r2, [r3], #-3900	; 0xf3c
    104c:	cd032000 	stcgt	0, cr2, [r3, #-0]
    1050:	86033c03 	strhi	r3, [r3], -r3, lsl #24
    1054:	03312e7f 	teqeq	r1, #2032	; 0x7f0
    1058:	034a00c3 	movteq	r0, #41155	; 0xa0c3
    105c:	033c7fbd 	teqeq	ip, #756	; 0x2f4
    1060:	5c303c2f 	ldcpl	12, cr3, [r0], #-188	; 0xffffff44
    1064:	223c1103 	eorscs	r1, ip, #-1073741824	; 0xc0000000
    1068:	0d033031 	stceq	0, cr3, [r3, #-196]	; 0xffffff3c
    106c:	3c73034a 	ldclcc	3, cr0, [r3], #-296	; 0xfffffed8
    1070:	035a303e 	cmpeq	sl, #62	; 0x3e
    1074:	03223c0f 	teqeq	r2, #3840	; 0xf00
    1078:	032e7cbb 	teqeq	lr, #47872	; 0xbb00
    107c:	02003c47 	andeq	r3, r0, #18176	; 0x4700
    1080:	91030104 	tstls	r3, r4, lsl #2
    1084:	8c034a7f 	stchi	10, cr4, [r3], {127}	; 0x7f
    1088:	3e303c01 	cdpcc	12, 3, cr3, cr0, cr1, {0}
    108c:	3d3c1d03 	ldccc	13, cr1, [ip, #-12]!
    1090:	b4032330 	strlt	r2, [r3], #-816	; 0x330
    1094:	033e3c7f 	teqeq	lr, #32512	; 0x7f00
    1098:	032000ca 	teqeq	r0, #202	; 0xca
    109c:	1c3c7f97 	ldcne	15, cr7, [ip], #-604	; 0xfffffda4
    10a0:	66033224 	strvs	r3, [r3], -r4, lsr #4
    10a4:	52033a66 	andpl	r3, r3, #417792	; 0x66000
    10a8:	04020074 	streq	r0, [r2], #-116	; 0x74
    10ac:	4a063902 	bmi	18f4bc <_Min_Stack_Size+0x18f0bc>
    10b0:	01000302 	tsteq	r0, r2, lsl #6
    10b4:	02050001 	andeq	r0, r5, #1
    10b8:	08001580 	stmdaeq	r0, {r7, r8, sl, ip}
    10bc:	01048d03 	tsteq	r4, r3, lsl #26
    10c0:	27241c24 	strcs	r1, [r4, -r4, lsr #24]!
    10c4:	03226a5f 	teqeq	r2, #389120	; 0x5f000
    10c8:	02004a09 	andeq	r4, r0, #36864	; 0x9000
    10cc:	63030104 	movwvs	r0, #12548	; 0x3104
    10d0:	3c090320 	stccc	3, cr0, [r9], {32}
    10d4:	0002023d 	andeq	r0, r2, sp, lsr r2
    10d8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    10dc:	0015bc02 	andseq	fp, r5, r2, lsl #24
    10e0:	0ace0308 	beq	ff381d08 <_estack+0xdf351d08>
    10e4:	331b2501 	tstcc	fp, #4194304	; 0x400000
    10e8:	20100321 	andscs	r0, r0, r1, lsr #6
    10ec:	231d3130 	tstcs	sp, #48, 2
    10f0:	24203103 	strtcs	r3, [r0], #-259	; 0x103
    10f4:	0402003f 	streq	r0, [r2], #-63	; 0x3f
    10f8:	7fb20301 	svcvc	0x00b20301
    10fc:	3c1a032e 	ldccc	3, cr0, [sl], {46}	; 0x2e
    1100:	1f03424b 	svcne	0x0003424b
    1104:	3c0b033c 	stccc	3, cr0, [fp], {60}	; 0x3c
    1108:	28207803 	stmdacs	r0!, {r0, r1, fp, ip, sp, lr}
    110c:	04020031 	streq	r0, [r2], #-49	; 0x31
    1110:	7fb30302 	svcvc	0x00b30302
    1114:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    1118:	3e3c2203 	cdpcc	2, 3, cr2, cr12, cr3, {0}
    111c:	2003306a 	andcs	r3, r3, sl, rrx
    1120:	20600320 	rsbcs	r0, r0, r0, lsr #6
    1124:	31202003 	teqcc	r0, r3
    1128:	01000202 	tsteq	r0, r2, lsl #4
    112c:	02050001 	andeq	r0, r5, #1
    1130:	08001640 	stmdaeq	r0, {r6, r9, sl, ip}
    1134:	010ba503 	tsteq	fp, r3, lsl #10
    1138:	207a0334 	rsbscs	r0, sl, r4, lsr r3
    113c:	10032126 	andne	r2, r3, r6, lsr #2
    1140:	1d313020 	ldcne	0, cr3, [r1, #-128]!	; 0xffffff80
    1144:	20120323 	andscs	r0, r2, r3, lsr #6
    1148:	0402003f 	streq	r0, [r2], #-63	; 0x3f
    114c:	3c550301 	mrrccc	3, 0, r0, r5, cr1
    1150:	213c1c03 	teqcs	ip, r3, lsl #24
    1154:	7603284d 	strvc	r2, [r3], -sp, asr #16
    1158:	200a0320 	andcs	r0, sl, r0, lsr #6
    115c:	04020031 	streq	r0, [r2], #-49	; 0x31
    1160:	3c560302 	mrrccc	3, 0, r0, r6, cr2
    1164:	03023c06 	movweq	r3, #11270	; 0x2c06
    1168:	00010100 	andeq	r0, r1, r0, lsl #2
    116c:	16940205 	ldrne	r0, [r4], r5, lsl #4
    1170:	da030800 	ble	c3178 <_Min_Stack_Size+0xc2d78>
    1174:	3023010b 	eorcc	r0, r3, fp, lsl #2
    1178:	00312230 	eorseq	r2, r1, r0, lsr r2
    117c:	03010402 	movweq	r0, #5122	; 0x1402
    1180:	03022e77 	movweq	r2, #11895	; 0x2e77
    1184:	00010100 	andeq	r0, r1, r0, lsl #2
    1188:	16b00205 	ldrtne	r0, [r0], r5, lsl #4
    118c:	ea030800 	b	c3194 <_Min_Stack_Size+0xc2d94>
    1190:	3025010b 	eorcc	r0, r5, fp, lsl #2
    1194:	00313e30 	eorseq	r3, r1, r0, lsr lr
    1198:	03010402 	movweq	r0, #5122	; 0x1402
    119c:	03022e77 	movweq	r2, #11895	; 0x2e77
    11a0:	00010100 	andeq	r0, r1, r0, lsl #2
    11a4:	16d00205 	ldrbne	r0, [r0], r5, lsl #4
    11a8:	fc030800 	stc2	8, cr0, [r3], {-0}
    11ac:	2223010b 	eorcs	r0, r3, #-1073741822	; 0xc0000002
    11b0:	04020023 	streq	r0, [r2], #-35	; 0x23
    11b4:	03021b01 	movweq	r1, #11009	; 0x2b01
    11b8:	00010100 	andeq	r0, r1, r0, lsl #2
    11bc:	16e00205 	strbtne	r0, [r0], r5, lsl #4
    11c0:	88030800 	stmdahi	r3, {fp}
    11c4:	0323010c 	teqeq	r3, #12, 2
    11c8:	082e0585 	stmdaeq	lr!, {r0, r2, r7, r8, sl}
    11cc:	8303309c 	movwhi	r3, #12444	; 0x309c
    11d0:	3030207b 	eorscc	r2, r0, fp, ror r0
    11d4:	f7032d21 			; <UNDEFINED> instruction: 0xf7032d21
    11d8:	45252e04 	strmi	r2, [r5, #-3588]!	; 0xe04
    11dc:	04020025 	streq	r0, [r2], #-37	; 0x25
    11e0:	7af80301 	bvc	ffe01dec <_estack+0xdfdd1dec>
    11e4:	0585034a 	streq	r0, [r5, #842]	; 0x34a
    11e8:	2545233c 	strbcs	r2, [r5, #-828]	; 0x33c
    11ec:	02452545 	subeq	r2, r5, #289406976	; 0x11400000
    11f0:	01010004 	tsteq	r1, r4
    11f4:	74020500 	strvc	r0, [r2], #-1280	; 0x500
    11f8:	03080017 	movweq	r0, #32791	; 0x8017
    11fc:	14010c9e 	strne	r0, [r1], #-3230	; 0xc9e
    1200:	01000202 	tsteq	r0, r2, lsl #4
    1204:	02050001 	andeq	r0, r5, #1
    1208:	08001778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip}
    120c:	010ca803 	tsteq	ip, r3, lsl #16
    1210:	00020213 	andeq	r0, r2, r3, lsl r2
    1214:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1218:	00177c02 	andseq	r7, r7, r2, lsl #24
    121c:	0cb20308 	ldceq	3, cr0, [r2], #32
    1220:	03021401 	movweq	r1, #9217	; 0x2401
    1224:	00010100 	andeq	r0, r1, r0, lsl #2
    1228:	17840205 	strne	r0, [r4, r5, lsl #4]
    122c:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
    1230:	2123010e 	teqcs	r3, lr, lsl #2
    1234:	00200a03 	eoreq	r0, r0, r3, lsl #20
    1238:	03010402 	movweq	r0, #5122	; 0x1402
    123c:	03025875 	movweq	r5, #10357	; 0x2875
    1240:	00010100 	andeq	r0, r1, r0, lsl #2
    1244:	179c0205 	ldrne	r0, [ip, r5, lsl #4]
    1248:	c5030800 	strgt	r0, [r3, #-2048]	; 0x800
    124c:	2123010e 	teqcs	r3, lr, lsl #2
    1250:	002e0a03 	eoreq	r0, lr, r3, lsl #20
    1254:	03010402 	movweq	r0, #5122	; 0x1402
    1258:	03024a75 	movweq	r4, #10869	; 0x2a75
    125c:	00010100 	andeq	r0, r1, r0, lsl #2
    1260:	17b40205 	ldrne	r0, [r4, r5, lsl #4]!
    1264:	ec030800 	stc	8, cr0, [r3], {-0}
    1268:	03190110 	tsteq	r9, #16, 2
    126c:	03274a79 	teqeq	r7, #495616	; 0x79000
    1270:	7003f20e 	andvc	pc, r3, lr, lsl #4
    1274:	2f2d263c 	svccs	0x002d263c
    1278:	03200a03 	teqeq	r0, #12288	; 0x3000
    127c:	0c023c70 	stceq	12, cr3, [r2], {112}	; 0x70
    1280:	00010100 	andeq	r0, r1, r0, lsl #2
    1284:	18100205 	ldmdane	r0, {r0, r2, r9}
    1288:	89030800 	stmdbhi	r3, {fp}
    128c:	08190111 	ldmdaeq	r9, {r0, r4, r8}
    1290:	252c309c 	strcs	r3, [ip, #-156]!	; 0x9c
    1294:	000c0245 	andeq	r0, ip, r5, asr #4
    1298:	05000101 	streq	r0, [r0, #-257]	; 0x101
    129c:	00187002 	andseq	r7, r8, r2
    12a0:	11a40308 			; <UNDEFINED> instruction: 0x11a40308
    12a4:	11032001 	tstne	r3, r1
    12a8:	0331d72e 	teqeq	r1, #12058624	; 0xb80000
    12ac:	31587be4 	cmpcc	r8, r4, ror #23
    12b0:	033c2f03 	teqeq	ip, #3, 30
    12b4:	bd035814 	stclt	8, cr5, [r3, #-80]	; 0xffffffb0
    12b8:	2f033c7f 	svccs	0x00033c7f
    12bc:	035c303c 	cmpeq	ip, #60	; 0x3c
    12c0:	313e3c11 	teqcc	lr, r1, lsl ip
    12c4:	0b033e30 	bleq	d0b8c <_Min_Stack_Size+0xd078c>
    12c8:	3c730358 	ldclcc	3, cr0, [r3], #-352	; 0xfffffea0
    12cc:	035a303e 	cmpeq	sl, #62	; 0x3e
    12d0:	be033c0f 	cdplt	12, 0, cr3, cr3, cr15, {0}
    12d4:	c4033c03 	strgt	r3, [r3], #-3075	; 0xc03
    12d8:	02022e7c 	andeq	r2, r2, #124, 28	; 0x7c0
    12dc:	6d010100 	stfvss	f0, [r1, #-0]
    12e0:	0200000b 	andeq	r0, r0, #11
    12e4:	00013300 	andeq	r3, r1, r0, lsl #6
    12e8:	fb010200 	blx	41af2 <_Min_Stack_Size+0x416f2>
    12ec:	01000d0e 	tsteq	r0, lr, lsl #26
    12f0:	00010101 	andeq	r0, r1, r1, lsl #2
    12f4:	00010000 	andeq	r0, r1, r0
    12f8:	72460100 	subvc	r0, r6, #0, 2
    12fc:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
    1300:	2f00534f 	svccs	0x0000534f
    1304:	2f727375 	svccs	0x00727375
    1308:	2f62696c 	svccs	0x0062696c
    130c:	2f636367 	svccs	0x00636367
    1310:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1314:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1318:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    131c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    1320:	2f322e38 	svccs	0x00322e38
    1324:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1328:	00656475 	rsbeq	r6, r5, r5, ror r4
    132c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1330:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1334:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1338:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    133c:	2f62696c 	svccs	0x0062696c
    1340:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1344:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1348:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    134c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1350:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1354:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1358:	0062696c 	rsbeq	r6, r2, ip, ror #18
    135c:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    1360:	534f5452 	movtpl	r5, #62546	; 0xf452
    1364:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1368:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    136c:	65724600 	ldrbvs	r4, [r2, #-1536]!	; 0x600
    1370:	4f545265 	svcmi	0x00545265
    1374:	6f702f53 	svcvs	0x00702f53
    1378:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    137c:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
    1380:	412f4343 	teqmi	pc, r3, asr #6
    1384:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    1388:	0046344d 	subeq	r3, r6, sp, asr #8
    138c:	73617400 	cmnvc	r1, #0, 8
    1390:	632e736b 	teqvs	lr, #-1409286143	; 0xac000001
    1394:	00000100 	andeq	r0, r0, r0, lsl #2
    1398:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
    139c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    13a0:	00000200 	andeq	r0, r0, r0, lsl #4
    13a4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    13a8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    13ac:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    13b0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    13b4:	00000300 	andeq	r0, r0, r0, lsl #6
    13b8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    13bc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    13c0:	00000400 	andeq	r0, r0, r0, lsl #8
    13c4:	6a6f7270 	bvs	1bddd8c <_Min_Stack_Size+0x1bdd98c>
    13c8:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
    13cc:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    13d0:	6f700000 	svcvs	0x00700000
    13d4:	616d7472 	smcvs	55106	; 0xd742
    13d8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    13dc:	00060068 	andeq	r0, r6, r8, rrx
    13e0:	73696c00 	cmnvc	r9, #0, 24
    13e4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    13e8:	74000005 	strvc	r0, [r0], #-5
    13ec:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
    13f0:	00050068 	andeq	r0, r5, r8, rrx
    13f4:	726f7000 	rsbvc	r7, pc, #0
    13f8:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    13fc:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1400:	73000005 	movwvc	r0, #5
    1404:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1408:	00682e67 	rsbeq	r2, r8, r7, ror #28
    140c:	74000004 	strvc	r0, [r0], #-4
    1410:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1414:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1418:	00000005 	andeq	r0, r0, r5
    141c:	20020500 	andcs	r0, r2, r0, lsl #10
    1420:	03080019 	movweq	r0, #32793	; 0x8019
    1424:	580115ef 	stmdapl	r1, {r0, r1, r2, r3, r5, r6, r7, r8, sl, ip}
    1428:	02040200 	andeq	r0, r4, #0, 4
    142c:	04020025 	streq	r0, [r2], #-37	; 0x25
    1430:	4b334802 	blmi	cd3440 <_Min_Stack_Size+0xcd3040>
    1434:	2f2d212d 	svccs	0x002d212d
    1438:	6c6c6a3d 	stclvs	10, cr6, [ip], #-244	; 0xffffff0c
    143c:	2d2f2d2f 	stccs	13, cr2, [pc, #-188]!	; 1388 <_Min_Stack_Size+0xf88>
    1440:	00020221 	andeq	r0, r2, r1, lsr #4
    1444:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1448:	00199002 	andseq	r9, r9, r2
    144c:	04830308 	streq	r0, [r3], #776	; 0x308
    1450:	1c242e01 	stcne	14, cr2, [r4], #-4
    1454:	02003d5c 	andeq	r3, r0, #92, 26	; 0x1700
    1458:	2e060104 	adfcss	f0, f6, f4
    145c:	12d30306 	sbcsne	r0, r3, #402653184	; 0x18000000
    1460:	034f3e3c 	movteq	r3, #65084	; 0xfe3c
    1464:	9903900e 	stmdbls	r3, {r1, r2, r3, ip, pc}
    1468:	9d034a7e 	vstrls	s8, [r3, #-504]	; 0xfffffe08
    146c:	e303206f 	movw	r2, #12399	; 0x306f
    1470:	9d032010 	stcls	0, cr2, [r3, #-64]	; 0xffffffc0
    1474:	e8032e6f 	stmda	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp}
    1478:	98034a10 	stmdals	r3, {r4, r9, fp, lr}
    147c:	032f206f 	teqeq	pc, #111	; 0x6f
    1480:	1b2e10e7 	blne	b85824 <_Min_Stack_Size+0xb85424>
    1484:	29412941 	stmdbcs	r1, {r0, r6, r8, fp, sp}^
    1488:	29412941 	stmdbcs	r1, {r0, r6, r8, fp, sp}^
    148c:	29412941 	stmdbcs	r1, {r0, r6, r8, fp, sp}^
    1490:	11032941 	tstne	r3, r1, asr #18
    1494:	2014033c 	andscs	r0, r4, ip, lsr r3
    1498:	032e6c03 	teqeq	lr, #768	; 0x300
    149c:	79032e14 	stmdbvc	r3, {r2, r4, r9, sl, fp, sp}
    14a0:	2f242320 	svccs	0x00242320
    14a4:	03242b51 	teqeq	r4, #82944	; 0x14400
    14a8:	03206f90 	teqeq	r0, #144, 30	; 0x240
    14ac:	033c10ef 	teqeq	ip, #239	; 0xef
    14b0:	40206f91 	mlami	r0, r1, pc, r6	; <UNPREDICTABLE>
    14b4:	2e090341 	cdpcs	3, 0, cr0, cr9, cr1, {2}
    14b8:	212d4b30 	teqcs	sp, r0, lsr fp
    14bc:	17032f2d 	strne	r2, [r3, -sp, lsr #30]
    14c0:	033e683c 	teqeq	lr, #60, 16	; 0x3c0000
    14c4:	0a032e0d 	beq	ccd00 <_Min_Stack_Size+0xcc900>
    14c8:	4a76034a 	bmi	1d821f8 <_Min_Stack_Size+0x1d81df8>
    14cc:	03200a03 	teqeq	r0, #12288	; 0x3000
    14d0:	0a033c76 	beq	d06b0 <_Min_Stack_Size+0xd02b0>
    14d4:	20760320 	rsbscs	r0, r6, r0, lsr #6
    14d8:	99200a03 	stmdbls	r0!, {r0, r1, r9, fp}
    14dc:	0a034125 	beq	d1978 <_Min_Stack_Size+0xd1578>
    14e0:	6f03322e 	svcvs	0x0003322e
    14e4:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    14e8:	7ef70301 	cdpvc	3, 15, cr0, cr7, cr1, {0}
    14ec:	019c033c 	orrseq	r0, ip, ip, lsr r3
    14f0:	2e6d033c 	mcrcs	3, 3, r0, cr13, cr12, {1}
    14f4:	223c5003 	eorscs	r5, ip, #3
    14f8:	11fb035d 	mvnsne	r0, sp, asr r3
    14fc:	033f6858 	teqeq	pc, #88, 16	; 0x580000
    1500:	033c6eb0 	teqeq	ip, #176, 28	; 0xb00
    1504:	02022e1a 	andeq	r2, r2, #416	; 0x1a0
    1508:	00010100 	andeq	r0, r1, r0, lsl #2
    150c:	1b4c0205 	blne	1301d28 <_Min_Stack_Size+0x1301928>
    1510:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
    1514:	23200105 	teqcs	r0, #1073741825	; 0x40000001
    1518:	04020032 	streq	r0, [r2], #-50	; 0x32
    151c:	02003403 	andeq	r3, r0, #50331648	; 0x3000000
    1520:	0a030304 	beq	c2138 <_Min_Stack_Size+0xc1d38>
    1524:	7951304a 	ldmdbvc	r1, {r1, r3, r6, ip, sp}^
    1528:	1c324632 	ldcne	6, cr4, [r2], #-200	; 0xffffff38
    152c:	1c241c24 	stcne	12, cr1, [r4], #-144	; 0xffffff70
    1530:	03683228 	cmneq	r8, #40, 4	; 0x80000002
    1534:	7b7412ab 	blvc	1d05fe8 <_Min_Stack_Size+0x1d05be8>
    1538:	c7032f8a 	strgt	r2, [r3, -sl, lsl #31]
    153c:	0200826d 	andeq	r8, r0, #-805306362	; 0xd0000006
    1540:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1544:	3c110306 	ldccc	3, cr0, [r1], {6}
    1548:	002e7703 	eoreq	r7, lr, r3, lsl #14
    154c:	03010402 	movweq	r0, #5122	; 0x1402
    1550:	06022e4a 	streq	r2, [r2], -sl, asr #28
    1554:	00010100 	andeq	r0, r1, r0, lsl #2
    1558:	1c0c0205 	sfmne	f0, 4, [ip], {5}
    155c:	ed030800 	stc	8, cr0, [r3, #-0]
    1560:	24200107 	strtcs	r0, [r0], #-263	; 0x107
    1564:	04020032 	streq	r0, [r2], #-50	; 0x32
    1568:	02002103 	andeq	r2, r0, #-1073741824	; 0xc0000000
    156c:	00220304 	eoreq	r0, r2, r4, lsl #6
    1570:	31030402 	tstcc	r3, r2, lsl #8
    1574:	01040200 	mrseq	r0, R12_usr
    1578:	002e7a03 	eoreq	r7, lr, r3, lsl #20
    157c:	59010402 	stmdbpl	r1, {r1, sl}
    1580:	01040200 	mrseq	r0, R12_usr
    1584:	04020022 	streq	r0, [r2], #-34	; 0x22
    1588:	02023101 	andeq	r3, r2, #1073741824	; 0x40000000
    158c:	00010100 	andeq	r0, r1, r0, lsl #2
    1590:	1c340205 	lfmne	f0, 4, [r4], #-20	; 0xffffffec
    1594:	83030800 	movwhi	r0, #14336	; 0x3800
    1598:	1b170108 	blne	5c19c0 <_Min_Stack_Size+0x5c15c0>
    159c:	0c033320 	stceq	3, cr3, [r3], {32}
    15a0:	02003220 	andeq	r3, r0, #32, 4
    15a4:	00340304 	eorseq	r0, r4, r4, lsl #6
    15a8:	28030402 	stmdacs	r3, {r1, sl}
    15ac:	03224834 	teqeq	r2, #52, 16	; 0x340000
    15b0:	26032e5a 			; <UNDEFINED> instruction: 0x26032e5a
    15b4:	2103252e 	tstcs	r3, lr, lsr #10
    15b8:	20100366 	andscs	r0, r0, r6, ror #6
    15bc:	03207603 	teqeq	r0, #3145728	; 0x300000
    15c0:	6e032014 	mcrvs	0, 0, r2, cr3, cr4, {0}
    15c4:	2e120320 	cdpcs	3, 1, cr0, cr2, cr0, {1}
    15c8:	4a0b0322 	bmi	2c2258 <_Min_Stack_Size+0x2c1e58>
    15cc:	03ac1703 			; <UNDEFINED> instruction: 0x03ac1703
    15d0:	032d200f 	teqeq	sp, #15
    15d4:	002e7fa3 	eoreq	r7, lr, r3, lsr #31
    15d8:	03010402 	movweq	r0, #5122	; 0x1402
    15dc:	02005847 	andeq	r5, r0, #4653056	; 0x470000
    15e0:	10030104 	andne	r0, r3, r4, lsl #2
    15e4:	00fa033c 	rscseq	r0, sl, ip, lsr r3
    15e8:	2e0d0366 	cdpcs	3, 0, cr0, cr13, cr6, {3}
    15ec:	2e60032d 	cdpcs	3, 6, cr0, cr0, cr13, {1}
    15f0:	084a0b03 	stmdaeq	sl, {r0, r1, r8, r9, fp}^
    15f4:	00010100 	andeq	r0, r1, r0, lsl #2
    15f8:	1cf40205 	lfmne	f0, 2, [r4], #20
    15fc:	a7030800 	strge	r0, [r3, -r0, lsl #16]
    1600:	27200109 	strcs	r0, [r0, -r9, lsl #2]!
    1604:	0200322a 	andeq	r3, r0, #-1610612734	; 0xa0000002
    1608:	00500304 	subseq	r0, r0, r4, lsl #6
    160c:	03030402 	movweq	r0, #13314	; 0x3402
    1610:	51304a0a 	teqpl	r0, sl, lsl #20
    1614:	1d033084 	stcne	0, cr3, [r3, #-528]	; 0xfffffdf0
    1618:	0ead0374 	mcreq	3, 5, r0, cr13, cr4, {3}
    161c:	2f8a7b74 	svccs	0x008a7b74
    1620:	8271a803 	rsbshi	sl, r1, #196608	; 0x30000
    1624:	04020069 	streq	r0, [r2], #-105	; 0x69
    1628:	00660601 	rsbeq	r0, r6, r1, lsl #12
    162c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1630:	033c5e03 	teqeq	ip, #3, 28	; 0x30
    1634:	03882e2a 	orreq	r2, r8, #672	; 0x2a0
    1638:	5d032e16 	stcpl	14, cr2, [r3, #-88]	; 0xffffffa8
    163c:	06e9032e 	strbteq	r0, [r9], lr, lsr #6
    1640:	21037c2e 	tstcs	r3, lr, lsr #24
    1644:	4a5f034a 	bmi	17c2374 <_Min_Stack_Size+0x17c1f74>
    1648:	03202103 	teqeq	r0, #-1073741824	; 0xc0000000
    164c:	012b025b 	teqeq	fp, fp, asr r2
    1650:	02742503 	rsbseq	r2, r4, #12582912	; 0xc00000
    1654:	01010003 	tsteq	r1, r3
    1658:	48020500 	stmdami	r2, {r8, sl}
    165c:	0308001e 	movweq	r0, #32798	; 0x801e
    1660:	24010aaa 	strcs	r0, [r1], #-2730	; 0xaaa
    1664:	01040200 	mrseq	r0, R12_usr
    1668:	53037632 	movwpl	r7, #13874	; 0x3632
    166c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    1670:	00d00302 	sbcseq	r0, r0, r2, lsl #6
    1674:	04020074 	streq	r0, [r2], #-116	; 0x74
    1678:	2e7a0302 	cdpcs	3, 7, cr0, cr10, cr2, {0}
    167c:	01040200 	mrseq	r0, R12_usr
    1680:	033c5d03 	teqeq	ip, #3, 26	; 0xc0
    1684:	2c033c5c 	stccs	12, cr3, [r3], {92}	; 0x5c
    1688:	084b3474 	stmdaeq	fp, {r2, r4, r5, r6, sl, ip, sp}^
    168c:	03025d3f 	movweq	r5, #11583	; 0x2d3f
    1690:	00010100 	andeq	r0, r1, r0, lsl #2
    1694:	1ed00205 	cdpne	2, 13, cr0, cr0, cr5, {0}
    1698:	e0030800 	and	r0, r3, r0, lsl #16
    169c:	0325010a 	teqeq	r5, #-2147483646	; 0x80000002
    16a0:	03302e12 	teqeq	r0, #288	; 0x120
    16a4:	032e7f8e 	teqeq	lr, #568	; 0x238
    16a8:	036600f2 	cmneq	r6, #242	; 0xf2
    16ac:	03207f8e 	teqeq	r0, #568	; 0x238
    16b0:	03200196 	teqeq	r0, #-2147483611	; 0x80000025
    16b4:	3c032044 	stccc	0, cr2, [r3], {68}	; 0x44
    16b8:	02003120 	andeq	r3, r0, #32, 2
    16bc:	45030104 	strmi	r0, [r3, #-260]	; 0x104
    16c0:	7fa5032e 	svcvc	0x00a5032e
    16c4:	00f1033c 	rscseq	r0, r1, ip, lsr r3
    16c8:	036a3374 	cmneq	sl, #116, 6	; 0xd0000001
    16cc:	77037409 	strvc	r7, [r3, -r9, lsl #8]
    16d0:	20090320 	andcs	r0, r9, r0, lsr #6
    16d4:	03207703 	teqeq	r0, #786432	; 0xc0000
    16d8:	032f3c09 	teqeq	pc, #2304	; 0x900
    16dc:	3f3c080f 	svccc	0x003c080f
    16e0:	522e7503 	eorpl	r7, lr, #12582912	; 0xc00000
    16e4:	0002023f 	andeq	r0, r2, pc, lsr r2
    16e8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    16ec:	001f8002 	andseq	r8, pc, r2
    16f0:	0ba60308 	bleq	fe982318 <_estack+0xde952318>
    16f4:	0bb50301 	bleq	fed42300 <_estack+0xded12300>
    16f8:	5a4f3e20 	bpl	13d0f80 <_Min_Stack_Size+0x13d0b80>
    16fc:	033c0c03 	teqeq	ip, #768	; 0x300
    1700:	03586db6 	cmpeq	r8, #11648	; 0x2d80
    1704:	032010e3 	teqeq	r0, #227	; 0xe3
    1708:	f8035825 			; <UNDEFINED> instruction: 0xf8035825
    170c:	e303206e 	movw	r2, #12398	; 0x306e
    1710:	25032e10 	strcs	r2, [r3, #-3600]	; 0xe10
    1714:	206c039e 	mlscs	ip, lr, r3, r0
    1718:	232e0d03 	teqcs	lr, #3, 26	; 0xc0
    171c:	206efd03 	rsbcs	pc, lr, r3, lsl #26
    1720:	2e118703 	cdpcs	7, 1, cr8, cr1, cr3, {0}
    1724:	9103512f 	tstls	r3, pc, lsr #2
    1728:	ef03206f 	svc	0x0003206f
    172c:	91033c10 	tstls	r3, r0, lsl ip
    1730:	ec03206f 	stc	0, cr2, [r3], {111}	; 0x6f
    1734:	03243c10 	teqeq	r4, #16, 24	; 0x1000
    1738:	03206f90 	teqeq	r0, #144, 30	; 0x240
    173c:	4b303c12 	blmi	c1078c <_Min_Stack_Size+0xc1038c>
    1740:	2f2d212d 	svccs	0x002d212d
    1744:	683c1703 	ldmdavs	ip!, {r0, r1, r8, r9, sl, ip}
    1748:	200d033e 	andcs	r0, sp, lr, lsr r3
    174c:	034a0a03 	movteq	r0, #43523	; 0xaa03
    1750:	0a034a76 	beq	d4130 <_Min_Stack_Size+0xd3d30>
    1754:	3c760320 	ldclcc	3, cr0, [r6], #-128	; 0xffffff80
    1758:	03200a03 	teqeq	r0, #12288	; 0x3000
    175c:	25252076 	strcs	r2, [r5, #-118]!	; 0x76
    1760:	2e0a03cd 	cdpcs	3, 0, cr0, cr10, cr13, {6}
    1764:	069a0332 			; <UNDEFINED> instruction: 0x069a0332
    1768:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    176c:	03207703 	teqeq	r0, #786432	; 0xc0000
    1770:	03272009 	teqeq	r7, #9
    1774:	21572e0b 	cmpcs	r7, fp, lsl #28
    1778:	03201a03 	teqeq	r0, #12288	; 0x3000
    177c:	0f032e6f 	svceq	0x00032e6f
    1780:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    1784:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    1788:	3c0af903 	stccc	9, cr15, [sl], {3}
    178c:	20758903 	rsbscs	r8, r5, r3, lsl #18
    1790:	2e0af703 	cdpcs	7, 0, cr15, cr10, cr3, {0}
    1794:	2e6df903 	cdpcs	9, 6, cr15, cr13, cr3, {0}
    1798:	05025d22 	streq	r5, [r2, #-3362]	; 0xd22
    179c:	00010100 	andeq	r0, r1, r0, lsl #2
    17a0:	20cc0205 	sbccs	r0, ip, r5, lsl #4
    17a4:	f4030800 	vst2.8	{d0-d1}, [r3], r0
    17a8:	2f24010b 	svccs	0x0024010b
    17ac:	02022d68 	andeq	r2, r2, #104, 26	; 0x1a00
    17b0:	00010100 	andeq	r0, r1, r0, lsl #2
    17b4:	20e80205 	rsccs	r0, r8, r5, lsl #4
    17b8:	ff030800 			; <UNDEFINED> instruction: 0xff030800
    17bc:	0217010b 	andseq	r0, r7, #-1073741822	; 0xc0000002
    17c0:	01010008 	tsteq	r1, r8
    17c4:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    17c8:	03080020 	movweq	r0, #32800	; 0x8020
    17cc:	24010d82 	strcs	r0, [r1], #-3458	; 0xd82
    17d0:	02315a30 	eorseq	r5, r1, #48, 20	; 0x30000
    17d4:	01010002 	tsteq	r1, r2
    17d8:	10020500 	andne	r0, r2, r0, lsl #10
    17dc:	03080021 	movweq	r0, #32801	; 0x8021
    17e0:	03010d91 	movweq	r0, #7569	; 0x1d91
    17e4:	30302012 	eorscc	r2, r0, r2, lsl r0
    17e8:	0202315a 	andeq	r3, r2, #-2147483626	; 0x80000016
    17ec:	00010100 	andeq	r0, r1, r0, lsl #2
    17f0:	212c0205 	teqcs	ip, r5, lsl #4
    17f4:	b0030800 	andlt	r0, r3, r0, lsl #16
    17f8:	5915010d 	ldmdbpl	r5, {r0, r2, r3, r8}
    17fc:	01000102 	tsteq	r0, r2, lsl #2
    1800:	02050001 	andeq	r0, r5, #1
    1804:	08002138 	stmdaeq	r0, {r3, r4, r5, r8, sp}
    1808:	010eb103 	tsteq	lr, r3, lsl #2
    180c:	032e0903 	teqeq	lr, #49152	; 0xc000
    1810:	09034a77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, fp, lr}
    1814:	4c954020 	ldcmi	0, cr4, [r5], {32}
    1818:	033c0d03 	teqeq	ip, #3, 26	; 0xc0
    181c:	4a039036 	bmi	e58fc <_Min_Stack_Size+0xe54fc>
    1820:	2e14039e 	mrccs	3, 0, r0, cr4, cr14, {4}
    1824:	2e120383 	cdpcs	3, 1, cr0, cr2, cr3, {4}
    1828:	032e7003 	teqeq	lr, #3
    182c:	70032010 	andvc	r2, r3, r0, lsl r0
    1830:	2010032e 	andscs	r0, r0, lr, lsr #6
    1834:	222c3032 	eorcs	r3, ip, #50	; 0x32
    1838:	032e0903 	teqeq	lr, #49152	; 0xc000
    183c:	035ac80a 	cmpeq	sl, #655360	; 0xa0000
    1840:	035f3c42 	cmpeq	pc, #16896	; 0x4200
    1844:	763c00c9 	ldrtvc	r0, [ip], -r9, asr #1
    1848:	034a1a03 	movteq	r1, #43523	; 0xaa03
    184c:	034a7ef2 	movteq	r7, #44786	; 0xaef2
    1850:	0320018e 	teqeq	r0, #-2147483613	; 0x80000023
    1854:	035a3c0d 	cmpeq	sl, #3328	; 0xd00
    1858:	ec033c0a 	stc	12, cr3, [r3], {10}
    185c:	02004a7e 	andeq	r4, r0, #516096	; 0x7e000
    1860:	74060104 	strvc	r0, [r6], #-260	; 0x104
    1864:	ac6d0306 	stclge	3, cr0, [sp], #-24	; 0xffffffe8
    1868:	02040200 	andeq	r0, r4, #0, 4
    186c:	002e1303 	eoreq	r1, lr, r3, lsl #6
    1870:	03020402 	movweq	r0, #9218	; 0x2402
    1874:	03e409ce 	mvneq	r0, #3375104	; 0x338000
    1878:	032f3c0f 	teqeq	pc, #3840	; 0xf00
    187c:	218276cb 	orrcs	r7, r2, fp, asr #13
    1880:	2009ab03 	andcs	sl, r9, r3, lsl #22
    1884:	01000802 	tsteq	r0, r2, lsl #16
    1888:	02050001 	andeq	r0, r5, #1
    188c:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
    1890:	010ca503 	tsteq	ip, r3, lsl #10
    1894:	04020034 	streq	r0, [r2], #-52	; 0x34
    1898:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    189c:	3e3e3043 	cdpcc	0, 3, cr3, cr14, cr3, {2}
    18a0:	4ec80903 	cdpmi	9, 12, cr0, cr8, cr3, {0}
    18a4:	412e7703 	teqmi	lr, r3, lsl #14
    18a8:	3c79034e 	ldclcc	3, cr0, [r9], #-312	; 0xfffffec8
    18ac:	3d4b2d3e 	stclcc	13, cr2, [fp, #-248]	; 0xffffff08
    18b0:	02005abe 	andeq	r5, r0, #778240	; 0xbe000
    18b4:	75030104 	strvc	r0, [r3, #-260]	; 0x104
    18b8:	3c17033c 	ldccc	3, cr0, [r7], {60}	; 0x3c
    18bc:	03661403 	cmneq	r6, #50331648	; 0x3000000
    18c0:	d4033c40 	strle	r3, [r3], #-3136	; 0xc40
    18c4:	00312000 	eorseq	r2, r1, r0
    18c8:	03010402 	movweq	r0, #5122	; 0x1402
    18cc:	1e403c57 	mcrne	12, 2, r3, cr0, cr7, {2}
    18d0:	7603263e 			; <UNDEFINED> instruction: 0x7603263e
    18d4:	4a19033c 	bmi	6425cc <_Min_Stack_Size+0x6421cc>
    18d8:	312e0d03 	teqcc	lr, r3, lsl #26
    18dc:	01000302 	tsteq	r0, r2, lsl #6
    18e0:	02050001 	andeq	r0, r5, #1
    18e4:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
    18e8:	01068503 	tsteq	r6, r3, lsl #10
    18ec:	032f2f24 	teqeq	pc, #36, 30	; 0x90
    18f0:	037405f9 	cmneq	r4, #1044381696	; 0x3e400000
    18f4:	1d207a90 	vstmdbne	r0!, {s14-s157}
    18f8:	2e05f303 	cdpcs	3, 0, cr15, cr5, cr3, {0}
    18fc:	207a8d03 	rsbscs	r8, sl, r3, lsl #26
    1900:	2e05f303 	cdpcs	3, 0, cr15, cr5, cr3, {0}
    1904:	207a8d03 	rsbscs	r8, sl, r3, lsl #26
    1908:	03301e25 	teqeq	r0, #592	; 0x250
    190c:	02002015 	andeq	r2, r0, #21
    1910:	2e060104 	adfcss	f0, f6, f4
    1914:	2e130306 	cdpcs	3, 1, cr0, cr3, cr6, {0}
    1918:	284a7803 	stmdacs	sl, {r0, r1, fp, ip, sp, lr}^
    191c:	4a0ffc03 	bmi	400930 <_Min_Stack_Size+0x400530>
    1920:	36221e22 	strtcc	r1, [r2], -r2, lsr #28
    1924:	86036895 			; <UNDEFINED> instruction: 0x86036895
    1928:	03322e70 	teqeq	r2, #112, 28	; 0x700
    192c:	19032e48 	stmdbne	r3, {r3, r6, r9, sl, fp, sp}
    1930:	201b032e 	andscs	r0, fp, lr, lsr #6
    1934:	7a033632 	bvc	cf204 <_Min_Stack_Size+0xcee04>
    1938:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    193c:	7fb40301 	svcvc	0x00b40301
    1940:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    1944:	02003b01 	andeq	r3, r0, #1024	; 0x400
    1948:	033b0104 	teqeq	fp, #4, 2
    194c:	023c10b6 	eorseq	r1, ip, #182	; 0xb6
    1950:	0101000a 	tsteq	r1, sl
    1954:	60020500 	andvs	r0, r2, r0, lsl #10
    1958:	03080024 	movweq	r0, #32804	; 0x8024
    195c:	260106e5 	strcs	r0, [r1], -r5, ror #13
    1960:	032e3403 	teqeq	lr, #50331648	; 0x3000000
    1964:	54032e7a 	strpl	r2, [r3], #-3706	; 0xe7a
    1968:	0597032e 	ldreq	r0, [r7, #814]	; 0x32e
    196c:	7af80366 	bvc	ffe0270c <_estack+0xdfdd270c>
    1970:	83033320 	movwhi	r3, #13088	; 0x3320
    1974:	f8032e05 			; <UNDEFINED> instruction: 0xf8032e05
    1978:	0333207a 	teqeq	r3, #122	; 0x7a
    197c:	032e0583 	teqeq	lr, #549453824	; 0x20c00000
    1980:	25207af8 	strcs	r7, [r0, #-2808]!	; 0xaf8
    1984:	b9032529 	stmdblt	r3, {r0, r3, r5, r8, sl, sp}
    1988:	1e222e0f 	cdpne	14, 2, cr2, cr2, cr15, {0}
    198c:	68953622 	ldmvs	r5, {r1, r5, r9, sl, ip, sp}
    1990:	2e70c303 	cdpcs	3, 7, cr12, cr0, cr3, {0}
    1994:	362e0903 	strtcc	r0, [lr], -r3, lsl #18
    1998:	01040200 	mrseq	r0, R12_usr
    199c:	03204e03 	teqeq	r0, #3, 28	; 0x30
    19a0:	023c0fd2 	eorseq	r0, ip, #840	; 0x348
    19a4:	0101000a 	tsteq	r1, sl
    19a8:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    19ac:	03080024 	movweq	r0, #32804	; 0x8024
    19b0:	030113f0 	movweq	r1, #5104	; 0x13f0
    19b4:	2e0802aa 	cdpcs	2, 0, cr0, cr8, cr10, {5}
    19b8:	75ee031c 	strbvc	r0, [lr, #796]!	; 0x31c
    19bc:	0a960374 	beq	fe582794 <_estack+0xde552794>
    19c0:	75ea0320 	strbvc	r0, [sl, #800]!	; 0x320
    19c4:	0a980320 	beq	fe60264c <_estack+0xde5d264c>
    19c8:	7803302e 	stmdavc	r3, {r1, r2, r3, r5, ip, sp}
    19cc:	7df80320 	ldclvc	3, cr0, [r8, #128]!	; 0x80
    19d0:	92034c3c 	andls	r4, r3, #60, 24	; 0x3c00
    19d4:	4b303c02 	blmi	c109e4 <_Min_Stack_Size+0xc105e4>
    19d8:	035a4b4b 	cmpeq	sl, #76800	; 0x12c00
    19dc:	4b2e01e1 	blmi	b82168 <_Min_Stack_Size+0xb81d68>
    19e0:	01000402 	tsteq	r0, r2, lsl #8
    19e4:	02050001 	andeq	r0, r5, #1
    19e8:	08002580 	stmdaeq	r0, {r7, r8, sl, sp}
    19ec:	010dc903 	tsteq	sp, r3, lsl #18
    19f0:	017ebb03 	cmneq	lr, r3, lsl #22
    19f4:	4a01c503 	bmi	72e08 <_Min_Stack_Size+0x72a08>
    19f8:	2e7ebb03 	vaddcs.f64	d27, d14, d3
    19fc:	2001cb03 	andcs	ip, r1, r3, lsl #22
    1a00:	4a7eb503 	bmi	1faee14 <_Min_Stack_Size+0x1faea14>
    1a04:	2e01cb03 	vmlacs.f64	d12, d1, d3
    1a08:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    1a0c:	2f207a03 	svccs	0x00207a03
    1a10:	09b00333 	ldmibeq	r0!, {r0, r1, r4, r5, r8, r9}
    1a14:	201103ac 	andscs	r0, r1, ip, lsr #7
    1a18:	01040200 	mrseq	r0, R12_usr
    1a1c:	032e7103 	teqeq	lr, #-1073741824	; 0xc0000000
    1a20:	1e5876d7 	mrcne	6, 2, r7, cr8, cr7, {6}
    1a24:	a5032422 	strge	r2, [r3, #-1058]	; 0x422
    1a28:	dc035809 	stcle	8, cr5, [r3], {9}
    1a2c:	21494a76 	hvccs	38054	; 0x94a6
    1a30:	2009a403 	andcs	sl, r9, r3, lsl #8
    1a34:	8276dc03 	rsbshi	sp, r6, #768	; 0x300
    1a38:	2009a403 	andcs	sl, r9, r3, lsl #8
    1a3c:	8276e203 	rsbshi	lr, r6, #805306368	; 0x30000000
    1a40:	2e099e03 	cdpcs	14, 0, cr9, cr9, cr3, {0}
    1a44:	3c76fb03 	ldclcc	11, cr15, [r6], #-12
    1a48:	03206f03 	teqeq	r0, #3, 30
    1a4c:	03302011 	teqeq	r0, #17
    1a50:	03312e0a 	teqeq	r1, #10, 28	; 0xa0
    1a54:	034a08f8 	movteq	r0, #43256	; 0xa8f8
    1a58:	120876d3 	andne	r7, r8, #221249536	; 0xd300000
    1a5c:	2009ad03 	andcs	sl, r9, r3, lsl #26
    1a60:	4a76d303 	bmi	1db6674 <_Min_Stack_Size+0x1db6274>
    1a64:	2e09a903 	cdpcs	9, 0, cr10, cr9, cr3, {0}
    1a68:	af200c03 	svcge	0x00200c03
    1a6c:	222d214b 	eorcs	r2, sp, #-1073741806	; 0xc0000012
    1a70:	032e1303 	teqeq	lr, #201326592	; 0xc000000
    1a74:	7203200e 	andvc	r2, r3, #14
    1a78:	2018032e 	andscs	r0, r8, lr, lsr #6
    1a7c:	64201903 	strtvs	r1, [r0], #-2307	; 0x903
    1a80:	032b4d22 	teqeq	fp, #2176	; 0x880
    1a84:	7a033c6d 	bvc	d0c40 <_Min_Stack_Size+0xd0840>
    1a88:	034c2420 	movteq	r2, #50208	; 0xc420
    1a8c:	ae032e13 	mcrge	14, 0, r2, cr3, cr3, {0}
    1a90:	03282e7f 	teqeq	r8, #2032	; 0x7f0
    1a94:	03282078 	teqeq	r8, #120	; 0x78
    1a98:	e8032078 	stmda	r3, {r3, r4, r5, r6, sp}
    1a9c:	98036676 	stmdals	r3, {r1, r2, r4, r5, r6, r9, sl, sp, lr}
    1aa0:	03362009 	teqeq	r6, #9
    1aa4:	0c032e74 	stceq	14, cr2, [r3], {116}	; 0x74
    1aa8:	76e00320 	strbtvc	r0, [r0], r0, lsr #6
    1aac:	09c7032e 	stmibeq	r7, {r1, r2, r3, r5, r8, r9}^
    1ab0:	2059032e 	subscs	r0, r9, lr, lsr #6
    1ab4:	2e0c0325 	cdpcs	3, 0, cr0, cr12, cr5, {1}
    1ab8:	af2e6f03 	svcge	0x002e6f03
    1abc:	2121212d 	teqcs	r1, sp, lsr #2
    1ac0:	0903222d 	stmdbeq	r3, {r0, r2, r3, r5, r9, sp}
    1ac4:	0336302e 	teqeq	r6, #46	; 0x2e
    1ac8:	7203200e 	andvc	r2, r3, #14
    1acc:	2018032e 	andscs	r0, r8, lr, lsr #6
    1ad0:	2c201903 	stccs	9, cr1, [r0], #-12
    1ad4:	032b4d30 	teqeq	fp, #48, 26	; 0xc00
    1ad8:	7a033c6d 	bvc	d0c94 <_Min_Stack_Size+0xd0894>
    1adc:	034c2420 	movteq	r2, #50208	; 0xc420
    1ae0:	d9032e41 	stmdble	r3, {r0, r6, r9, sl, fp, sp}
    1ae4:	a7032e76 	smlsdxge	r3, r6, lr, r2
    1ae8:	24702009 	ldrbtcs	r2, [r0], #-9
    1aec:	032e2f03 	teqeq	lr, #3, 30
    1af0:	032076aa 	teqeq	r0, #178257920	; 0xaa00000
    1af4:	292e09b4 	stmdbcs	lr!, {r2, r4, r5, r7, r8, fp}
    1af8:	2d214b85 	fstmdbxcs	r1!, {d4-d69}	;@ Deprecated
    1afc:	2e130322 	cdpcs	3, 1, cr0, cr3, cr2, {1}
    1b00:	03200e03 	teqeq	r0, #3, 28	; 0x30
    1b04:	18032e72 	stmdane	r3, {r1, r4, r5, r6, r9, sl, fp, sp}
    1b08:	20190320 	andscs	r0, r9, r0, lsr #6
    1b0c:	2b4d302c 	blcs	134dbc4 <_Min_Stack_Size+0x134d7c4>
    1b10:	033c6d03 	teqeq	ip, #3, 26	; 0xc0
    1b14:	4c24207a 	stcmi	0, cr2, [r4], #-488	; 0xfffffe18
    1b18:	032e4103 	teqeq	lr, #-1073741824	; 0xc0000000
    1b1c:	032e76da 	teqeq	lr, #228589568	; 0xda00000
    1b20:	702009a6 	eorvc	r0, r0, r6, lsr #19
    1b24:	2e2f0324 	cdpcs	3, 2, cr0, cr15, cr4, {1}
    1b28:	2076ab03 	rsbscs	sl, r6, r3, lsl #22
    1b2c:	2e09b303 	cdpcs	3, 0, cr11, cr9, cr3, {0}
    1b30:	214b8529 	cmpcs	fp, r9, lsr #10
    1b34:	1303222d 	movwne	r2, #12845	; 0x322d
    1b38:	200e032e 	andcs	r0, lr, lr, lsr #6
    1b3c:	032e7203 	teqeq	lr, #805306368	; 0x30000000
    1b40:	19032018 	stmdbne	r3, {r3, r4, sp}
    1b44:	4d302c20 	ldcmi	12, cr2, [r0, #-128]!	; 0xffffff80
    1b48:	3c6d032b 	stclcc	3, cr0, [sp], #-172	; 0xffffff54
    1b4c:	24207a03 	strtcs	r7, [r0], #-2563	; 0xa03
    1b50:	7fbf034c 	svcvc	0x00bf034c
    1b54:	76dc0320 	ldrbvc	r0, [ip], r0, lsr #6
    1b58:	09a4034a 	stmibeq	r4!, {r1, r3, r6, r8, r9}
    1b5c:	03284c20 	teqeq	r8, #32, 24	; 0x2000
    1b60:	e0032078 	and	r2, r3, r8, ror r0
    1b64:	a0032076 	andge	r2, r3, r6, ror r0
    1b68:	036e2009 	cmneq	lr, #9
    1b6c:	0c032074 	stceq	0, cr2, [r3], {116}	; 0x74
    1b70:	2e780320 	cdpcs	3, 7, cr0, cr8, cr0, {1}
    1b74:	032e2f03 	teqeq	lr, #3, 30
    1b78:	d8032059 	stmdale	r3, {r0, r3, r4, r6, sp}
    1b7c:	ad032e76 	stcge	14, cr2, [r3, #-472]	; 0xfffffe28
    1b80:	a1292e09 	teqge	r9, r9, lsl #28
    1b84:	2121212d 	teqcs	r1, sp, lsr #2
    1b88:	1303222d 	movwne	r2, #12845	; 0x322d
    1b8c:	200e032e 	andcs	r0, lr, lr, lsr #6
    1b90:	032e7203 	teqeq	lr, #805306368	; 0x30000000
    1b94:	19032018 	stmdbne	r3, {r3, r4, sp}
    1b98:	4d302c20 	ldcmi	12, cr2, [r0, #-128]!	; 0xffffff80
    1b9c:	3c6d032b 	stclcc	3, cr0, [sp], #-172	; 0xffffff54
    1ba0:	24207a03 	strtcs	r7, [r0], #-2563	; 0xa03
    1ba4:	0002024c 	andeq	r0, r2, ip, asr #4
    1ba8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1bac:	0028fc02 	eoreq	pc, r8, r2, lsl #24
    1bb0:	10b90308 	adcsne	r0, r9, r8, lsl #6
    1bb4:	037c2101 	cmneq	ip, #1073741824	; 0x40000000
    1bb8:	5f034a21 	svcpl	0x00034a21
    1bbc:	2021034a 	eorcs	r0, r1, sl, asr #6
    1bc0:	02040200 	andeq	r0, r4, #0, 4
    1bc4:	00bad606 	adcseq	sp, sl, r6, lsl #12
    1bc8:	ba020402 	blt	82bd8 <_Min_Stack_Size+0x827d8>
    1bcc:	745b0306 	ldrbvc	r0, [fp], #-774	; 0x306
    1bd0:	00742503 	rsbseq	r2, r4, r3, lsl #10
    1bd4:	06010402 	streq	r0, [r1], -r2, lsl #8
    1bd8:	0003023c 	andeq	r0, r3, ip, lsr r2
    1bdc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1be0:	00299402 	eoreq	r9, r9, r2, lsl #8
    1be4:	10f30308 	rscsne	r0, r3, r8, lsl #6
    1be8:	03232001 	teqeq	r3, #1
    1bec:	03872e09 	orreq	r2, r7, #9, 28	; 0x90
    1bf0:	0c034a0d 	stceq	10, cr4, [r3], {13}
    1bf4:	059d032e 	ldreq	r0, [sp, #814]	; 0x32e
    1bf8:	e1032258 	tst	r3, r8, asr r2
    1bfc:	9f03207a 	svcls	0x0003207a
    1c00:	221e2005 	andscs	r2, lr, #5
    1c04:	03689528 	cmneq	r8, #40, 10	; 0xa000000
    1c08:	eb033c74 	bl	d0de0 <_Min_Stack_Size+0xd09e0>
    1c0c:	9503667a 	strls	r6, [r3, #-1658]	; 0x67a
    1c10:	d7032e05 	strle	r2, [r3, -r5, lsl #28]
    1c14:	14033c7a 	strne	r3, [r3], #-3194	; 0xc7a
    1c18:	2e6c0366 	cdpcs	3, 6, cr0, cr12, cr6, {3}
    1c1c:	01040200 	mrseq	r0, R12_usr
    1c20:	022e6003 	eoreq	r6, lr, #3
    1c24:	01010003 	tsteq	r1, r3
    1c28:	24020500 	strcs	r0, [r2], #-1280	; 0x500
    1c2c:	0308002a 	movweq	r0, #32810	; 0x802a
    1c30:	200111ae 	andcs	r1, r1, lr, lsr #3
    1c34:	02003223 	andeq	r3, r0, #805306370	; 0x30000002
    1c38:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1c3c:	037b4106 	cmneq	fp, #-2147483647	; 0x80000001
    1c40:	4f272079 	svcmi	0x00272079
    1c44:	034a0d03 	movteq	r0, #44291	; 0xad03
    1c48:	db032e0c 	blle	cd480 <_Min_Stack_Size+0xcd080>
    1c4c:	03225804 	teqeq	r2, #4, 16	; 0x40000
    1c50:	03207ba3 	teqeq	r0, #166912	; 0x28c00
    1c54:	1e2004dd 	mcrne	4, 1, r0, cr0, cr13, {6}
    1c58:	68952822 	ldmvs	r5, {r1, r5, fp, sp}
    1c5c:	01040200 	mrseq	r0, R12_usr
    1c60:	3c7ae603 	ldclcc	6, cr14, [sl], #-12
    1c64:	3c058e03 	stccc	14, cr8, [r5], {3}
    1c68:	667bad03 	ldrbtvs	sl, [fp], -r3, lsl #26
    1c6c:	2e04d303 	cdpcs	3, 0, cr13, cr4, cr3, {0}
    1c70:	3c7b9903 	ldclcc	9, cr9, [fp], #-12
    1c74:	03661403 	cmneq	r6, #50331648	; 0x3000000
    1c78:	02022e6c 	andeq	r2, r2, #108, 28	; 0x6c0
    1c7c:	00010100 	andeq	r0, r1, r0, lsl #2
    1c80:	2ad00205 	bcs	ff40249c <_estack+0xdf3d249c>
    1c84:	f2030800 	vadd.i8	d0, d3, d0
    1c88:	23200111 	teqcs	r0, #1073741828	; 0x40000004
    1c8c:	87200c03 	strhi	r0, [r0, -r3, lsl #24]!
    1c90:	034a0d03 	movteq	r0, #44291	; 0xad03
    1c94:	225804a7 	subscs	r0, r8, #-1493172224	; 0xa7000000
    1c98:	207bd703 	rsbscs	sp, fp, r3, lsl #14
    1c9c:	2004a903 	andcs	sl, r4, r3, lsl #18
    1ca0:	9528221e 	strls	r2, [r8, #-542]!	; 0x21e
    1ca4:	04020068 	streq	r0, [r2], #-104	; 0x68
    1ca8:	7baa0301 	blvc	fea828b4 <_estack+0xdea528b4>
    1cac:	04ca033c 	strbeq	r0, [sl], #828	; 0x33c
    1cb0:	7bd8033c 	blvc	ff6029a8 <_estack+0xdf5d29a8>
    1cb4:	04a80366 	strteq	r0, [r8], #870	; 0x366
    1cb8:	0003022e 	andeq	r0, r3, lr, lsr #4
    1cbc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1cc0:	002b4402 	eoreq	r4, fp, r2, lsl #8
    1cc4:	129d0308 	addsne	r0, sp, #8, 6	; 0x20000000
    1cc8:	20110301 	andscs	r0, r1, r1, lsl #6
    1ccc:	685a2f2f 	ldmdavs	sl, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    1cd0:	0809034b 	stmdaeq	r9, {r0, r1, r3, r6, r8, r9}
    1cd4:	8209033c 	andhi	r0, r9, #60, 6	; 0xf0000000
    1cd8:	6c033278 	sfmvs	f3, 4, [r3], {120}	; 0x78
    1cdc:	04020020 	streq	r0, [r2], #-32
    1ce0:	82740301 	rsbshi	r0, r4, #67108864	; 0x4000000
    1ce4:	01000302 	tsteq	r0, r2, lsl #6
    1ce8:	02050001 	andeq	r0, r5, #1
    1cec:	08002bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, sp}
    1cf0:	0112d303 	tsteq	r2, r3, lsl #6
    1cf4:	411c7b26 	tstmi	ip, r6, lsr #22
    1cf8:	3d331b26 	vldmdbcc	r3!, {d1-d19}
    1cfc:	0a033e08 	beq	d1524 <_Min_Stack_Size+0xd1124>
    1d00:	00327882 	eorseq	r7, r2, r2, lsl #17
    1d04:	03010402 	movweq	r0, #5122	; 0x1402
    1d08:	0200205d 	andeq	r2, r0, #93	; 0x5d
    1d0c:	02440104 	subeq	r0, r4, #4, 2
    1d10:	01010003 	tsteq	r1, r3
    1d14:	50020500 	andpl	r0, r2, r0, lsl #10
    1d18:	0308002c 	movweq	r0, #32812	; 0x802c
    1d1c:	21011380 	smlabbcs	r1, r0, r3, r1
    1d20:	2f2d2f21 	svccs	0x002d2f21
    1d24:	0200212d 	andeq	r2, r0, #1073741835	; 0x4000000b
    1d28:	02480104 	subeq	r0, r8, #4, 2
    1d2c:	01010003 	tsteq	r1, r3
    1d30:	74020500 	strvc	r0, [r2], #-1280	; 0x500
    1d34:	0308002c 	movweq	r0, #32812	; 0x802c
    1d38:	23011388 	movwcs	r1, #5000	; 0x1388
    1d3c:	222f231d 	eorcs	r2, pc, #1946157056	; 0x74000000
    1d40:	7a033431 	bvc	cee0c <_Min_Stack_Size+0xcea0c>
    1d44:	7a033420 	bvc	cedcc <_Min_Stack_Size+0xce9cc>
    1d48:	00272620 	eoreq	r2, r7, r0, lsr #12
    1d4c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1d50:	3f360690 	svccc	0x00360690
    1d54:	21205903 	teqcs	r0, r3, lsl #18
    1d58:	30202603 	eorcc	r2, r0, r3, lsl #12
    1d5c:	03205803 	teqeq	r0, #196608	; 0x30000
    1d60:	03312e2f 	teqeq	r1, #752	; 0x2f0
    1d64:	0e032e6f 	cdpeq	14, 0, cr2, cr3, cr15, {3}
    1d68:	64033120 	strvs	r3, [r3], #-288	; 0x120
    1d6c:	2019032e 	andscs	r0, r9, lr, lsr #6
    1d70:	04020031 	streq	r0, [r2], #-49	; 0x31
    1d74:	2e570301 	cdpcs	3, 5, cr0, cr7, cr1, {0}
    1d78:	01040200 	mrseq	r0, R12_usr
    1d7c:	0003023b 	andeq	r0, r3, fp, lsr r2
    1d80:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1d84:	002ce802 	eoreq	lr, ip, r2, lsl #16
    1d88:	13b90308 			; <UNDEFINED> instruction: 0x13b90308
    1d8c:	07021301 	streq	r1, [r2, -r1, lsl #6]
    1d90:	00010100 	andeq	r0, r1, r0, lsl #2
    1d94:	2cf80205 	lfmcs	f0, 2, [r8], #20
    1d98:	c1030800 	tstgt	r3, r0, lsl #16
    1d9c:	23160113 	tstcs	r6, #-1073741820	; 0xc0000004
    1da0:	00010228 	andeq	r0, r1, r8, lsr #4
    1da4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1da8:	002d0002 	eoreq	r0, sp, r2
    1dac:	13d80308 	bicsne	r0, r8, #8, 6	; 0x20000000
    1db0:	02231501 	eoreq	r1, r3, #4194304	; 0x400000
    1db4:	01010002 	tsteq	r1, r2
    1db8:	08020500 	stmdaeq	r2, {r8, sl}
    1dbc:	0308002d 	movweq	r0, #32813	; 0x802d
    1dc0:	180118ad 	stmdane	r1, {r0, r2, r3, r5, r7, fp, ip}
    1dc4:	0001025b 	andeq	r0, r1, fp, asr r2
    1dc8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1dcc:	002d1402 	eoreq	r1, sp, r2, lsl #8
    1dd0:	18be0308 	ldmne	lr!, {r3, r8, r9}
    1dd4:	5a6c1501 	bpl	1b071e0 <_Min_Stack_Size+0x1b06de0>
    1dd8:	03587a03 	cmpeq	r8, #12288	; 0x3000
    1ddc:	0102200f 	tsteq	r2, pc
    1de0:	00010100 	andeq	r0, r1, r0, lsl #2
    1de4:	2d380205 	lfmcs	f0, 4, [r8, #-20]!	; 0xffffffec
    1de8:	da030800 	ble	c3df0 <_Min_Stack_Size+0xc39f0>
    1dec:	30250118 	eorcc	r0, r5, r8, lsl r1
    1df0:	09033095 	stmdbeq	r3, {r0, r2, r4, r7, ip, sp}
    1df4:	2e77033c 	mrccs	3, 3, r0, cr7, cr12, {1}
    1df8:	034a0903 	movteq	r0, #43267	; 0xa903
    1dfc:	70039012 	andvc	r9, r3, r2, lsl r0
    1e00:	4a0b034a 	bmi	2c2b30 <_Min_Stack_Size+0x2c2730>
    1e04:	212d212d 	teqcs	sp, sp, lsr #2
    1e08:	1303211f 	movwne	r2, #12575	; 0x311f
    1e0c:	2e6d0382 	cdpcs	3, 6, cr0, cr13, cr2, {4}
    1e10:	01000202 	tsteq	r0, r2, lsl #4
    1e14:	02050001 	andeq	r0, r5, #1
    1e18:	08002db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, sp}
    1e1c:	01199903 	tsteq	r9, r3, lsl #18
    1e20:	034e3023 	movteq	r3, #57379	; 0xe023
    1e24:	241c4a10 	ldrcs	r4, [ip], #-2576	; 0xa10
    1e28:	74035022 	strvc	r5, [r3], #-34	; 0x22
    1e2c:	200c0374 	andcs	r0, ip, r4, ror r3
    1e30:	039e0b03 	orrseq	r0, lr, #3072	; 0xc00
    1e34:	03022e75 	movweq	r2, #11893	; 0x2e75
    1e38:	00010100 	andeq	r0, r1, r0, lsl #2
    1e3c:	2e040205 	cdpcs	2, 0, cr0, cr4, cr5, {0}
    1e40:	cd030800 	stcgt	8, cr0, [r3, #-0]
    1e44:	5c15011b 	ldfpls	f0, [r5], {27}
    1e48:	024d242a 	subeq	r2, sp, #704643072	; 0x2a000000
    1e4c:	01010001 	tsteq	r1, r1
    1e50:	0000034a 	andeq	r0, r0, sl, asr #6
    1e54:	01330002 	teqeq	r3, r2
    1e58:	01020000 	mrseq	r0, (UNDEF: 2)
    1e5c:	000d0efb 	strdeq	r0, [sp], -fp
    1e60:	01010101 	tsteq	r1, r1, lsl #2
    1e64:	01000000 	mrseq	r0, (UNDEF: 0)
    1e68:	46010000 	strmi	r0, [r1], -r0
    1e6c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1e70:	00534f54 	subseq	r4, r3, r4, asr pc
    1e74:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1e78:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1e7c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1e80:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1e84:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1e88:	61652d65 	cmnvs	r5, r5, ror #26
    1e8c:	342f6962 	strtcc	r6, [pc], #-2402	; 1e94 <_Min_Stack_Size+0x1a94>
    1e90:	322e382e 	eorcc	r3, lr, #3014656	; 0x2e0000
    1e94:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1e98:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1e9c:	73752f00 	cmnvc	r5, #0, 30
    1ea0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1ea4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1ea8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1eac:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1eb0:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    1eb4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1eb8:	73752f00 	cmnvc	r5, #0, 30
    1ebc:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1ec0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1ec4:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1ec8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1ecc:	65724600 	ldrbvs	r4, [r2, #-1536]!	; 0x600
    1ed0:	4f545265 	svcmi	0x00545265
    1ed4:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
    1ed8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1edc:	72460065 	subvc	r0, r6, #101	; 0x65
    1ee0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
    1ee4:	702f534f 	eorvc	r5, pc, pc, asr #6
    1ee8:	6174726f 	cmnvs	r4, pc, ror #4
    1eec:	2f656c62 	svccs	0x00656c62
    1ef0:	2f434347 	svccs	0x00434347
    1ef4:	5f4d5241 	svcpl	0x004d5241
    1ef8:	46344d43 	ldrtmi	r4, [r4], -r3, asr #26
    1efc:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    1f00:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
    1f04:	0100632e 	tsteq	r0, lr, lsr #6
    1f08:	74730000 	ldrbtvc	r0, [r3], #-0
    1f0c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    1f10:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1f14:	645f0000 	ldrbvs	r0, [pc], #-0	; 1f1c <_Min_Stack_Size+0x1b1c>
    1f18:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    1f1c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1f24 <_Min_Stack_Size+0x1b24>
    1f20:	73657079 	cmnvc	r5, #121	; 0x79
    1f24:	0300682e 	movweq	r6, #2094	; 0x82e
    1f28:	74730000 	ldrbtvc	r0, [r3], #-0
    1f2c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    1f30:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    1f34:	72700000 	rsbsvc	r0, r0, #0
    1f38:	65646a6f 	strbvs	r6, [r4, #-2671]!	; 0xa6f
    1f3c:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    1f40:	00000500 	andeq	r0, r0, r0, lsl #10
    1f44:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
    1f48:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
    1f4c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1f50:	6c000006 	stcvs	0, cr0, [r0], {6}
    1f54:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
    1f58:	00050068 	andeq	r0, r5, r8, rrx
    1f5c:	73617400 	cmnvc	r1, #0, 8
    1f60:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    1f64:	71000005 	tstvc	r0, r5
    1f68:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1f6c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1f70:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    1f74:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
    1f78:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1f7c:	6f700000 	svcvs	0x00700000
    1f80:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    1f84:	682e656c 	stmdavs	lr!, {r2, r3, r5, r6, r8, sl, sp, lr}
    1f88:	00000500 	andeq	r0, r0, r0, lsl #10
    1f8c:	02050000 	andeq	r0, r5, #0
    1f90:	08002e20 	stmdaeq	r0, {r5, r9, sl, fp, sp}
    1f94:	0101ec03 	tsteq	r1, r3, lsl #24
    1f98:	2e049003 	cdpcs	0, 0, cr9, cr4, cr3, {0}
    1f9c:	4a7bf003 	bmi	1efdfb0 <_Min_Stack_Size+0x1efdbb0>
    1fa0:	20048e03 	andcs	r8, r4, r3, lsl #28
    1fa4:	581b0330 	ldmdapl	fp, {r4, r5, r8, r9}
    1fa8:	2e7bde03 	cdpcs	14, 7, cr13, cr11, cr3, {0}
    1fac:	033c0b03 	teqeq	ip, #3072	; 0xc00
    1fb0:	22200809 	eorcs	r0, r0, #589824	; 0x90000
    1fb4:	3c03f303 	stccc	3, cr15, [r3], {3}
    1fb8:	2d212d4b 	stccs	13, cr2, [r1, #-300]!	; 0xfffffed4
    1fbc:	492f3d2f 	stmdbmi	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
    1fc0:	21213a30 	teqcs	r1, r0, lsr sl
    1fc4:	0e03263d 	mcreq	6, 0, r2, cr3, cr13, {1}
    1fc8:	7bde0366 	blvc	ff782d68 <_estack+0xdf752d68>
    1fcc:	3c14032e 	ldccc	3, cr0, [r4], {46}	; 0x2e
    1fd0:	3c03fa03 	stccc	10, cr15, [r3], {3}
    1fd4:	01000302 	tsteq	r0, r2, lsl #6
    1fd8:	02050001 	andeq	r0, r5, #1
    1fdc:	08002ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, sp}
    1fe0:	01028f03 	tsteq	r2, r3, lsl #30
    1fe4:	40201c32 	eormi	r1, r0, r2, lsr ip
    1fe8:	e2033d26 	and	r3, r3, #2432	; 0x980
    1fec:	30482e03 	subcc	r2, r8, r3, lsl #28
    1ff0:	032e1b03 	teqeq	lr, #3072	; 0xc00
    1ff4:	1c2e7c8e 	stcne	12, cr7, [lr], #-568	; 0xfffffdc8
    1ff8:	212f2f2f 	teqcs	pc, pc, lsr #30
    1ffc:	3c0e0321 	stccc	3, cr0, [lr], {33}	; 0x21
    2000:	03cd0347 	biceq	r0, sp, #469762049	; 0x1c000001
    2004:	212d4b3c 	teqcs	sp, ip, lsr fp
    2008:	2f3d3d2d 	svccs	0x003d3d2d
    200c:	1e2f2f2d 	cdpne	15, 2, cr2, cr15, cr13, {1}
    2010:	3d2f2d30 	stccc	13, cr2, [pc, #-192]!	; 1f58 <_Min_Stack_Size+0x1b58>
    2014:	747a0326 	ldrbtvc	r0, [sl], #-806	; 0x326
    2018:	01000302 	tsteq	r0, r2, lsl #6
    201c:	02050001 	andeq	r0, r5, #1
    2020:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
    2024:	0102b803 	tsteq	r2, r3, lsl #16
    2028:	4a7a0326 	bmi	1e82cc8 <_Min_Stack_Size+0x1e828c8>
    202c:	211c3526 	tstcs	ip, r6, lsr #10
    2030:	0d032221 	sfmeq	f2, 4, [r3, #-132]	; 0xffffff7c
    2034:	660b0320 	strvs	r0, [fp], -r0, lsr #6
    2038:	422e6a03 	eormi	r6, lr, #12288	; 0x3000
    203c:	401c322a 	andsmi	r3, ip, sl, lsr #4
    2040:	034a1003 	movteq	r1, #40963	; 0xa003
    2044:	24032e5c 	strcs	r2, [r3], #-3676	; 0xe5c
    2048:	00020220 	andeq	r0, r2, r0, lsr #4
    204c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2050:	002fd402 	eoreq	sp, pc, r2, lsl #8
    2054:	03960308 	orrseq	r0, r6, #8, 6	; 0x20000000
    2058:	04020001 	streq	r0, [r2], #-1
    205c:	00d70301 	sbcseq	r0, r7, r1, lsl #6
    2060:	02003c08 	andeq	r3, r0, #8, 24	; 0x800
    2064:	006e0104 	rsbeq	r0, lr, r4, lsl #2
    2068:	03010402 	movweq	r0, #5122	; 0x1402
    206c:	03222079 	teqeq	r2, #121	; 0x79
    2070:	cf032e42 	svcgt	0x00032e42
    2074:	3a302e00 	bcc	c0d87c <_Min_Stack_Size+0xc0d47c>
    2078:	7fba0322 	svcvc	0x00ba0322
    207c:	00d0033c 	sbcseq	r0, r0, ip, lsr r3
    2080:	7fb00358 	svcvc	0x00b00358
    2084:	2e0d0366 	cdpcs	3, 0, cr0, cr13, cr6, {3}
    2088:	00f7035a 	rscseq	r0, r7, sl, asr r3
    208c:	821a0358 	andshi	r0, sl, #88, 6	; 0x60000001
    2090:	033f3040 	teqeq	pc, #64	; 0x40
    2094:	304a7f9b 	umaalcc	r7, sl, fp, pc	; <UNPREDICTABLE>
    2098:	0a03222c 	beq	ca950 <_Min_Stack_Size+0xca550>
    209c:	01a1033c 			; <UNDEFINED> instruction: 0x01a1033c
    20a0:	19032008 	stmdbne	r3, {r3, sp}
    20a4:	321d234a 	andscc	r2, sp, #671088641	; 0x28000001
    20a8:	72033e5e 	andvc	r3, r3, #1504	; 0x5e0
    20ac:	822b033c 	eorhi	r0, fp, #60, 6	; 0xf0000000
    20b0:	207e9d03 	rsbscs	r9, lr, r3, lsl #26
    20b4:	2e01e303 	cdpcs	3, 0, cr14, cr1, cr3, {0}
    20b8:	ec031f21 	stc	15, cr1, [r3], {33}	; 0x21
    20bc:	eb03207d 	bl	ca2b8 <_Min_Stack_Size+0xc9eb8>
    20c0:	1d233c01 	stcne	12, cr3, [r3, #-4]!
    20c4:	033e5e32 	teqeq	lr, #800	; 0x320
    20c8:	2b033c72 	blcs	d1298 <_Min_Stack_Size+0xd0e98>
    20cc:	031f2f82 	tsteq	pc, #520	; 0x208
    20d0:	032e7dcf 	teqeq	lr, #13248	; 0x33c0
    20d4:	402e7fb1 	strhtmi	r7, [lr], -r1
    20d8:	3c18035d 	ldccc	3, cr0, [r8], {93}	; 0x5d
    20dc:	4a02ca03 	bmi	b48f0 <_Min_Stack_Size+0xb44f0>
    20e0:	2121302f 	teqcs	r1, pc, lsr #32
    20e4:	21302f53 	teqcs	r0, r3, asr pc
    20e8:	7df20321 	ldclvc	3, cr0, [r2, #132]!	; 0x84
    20ec:	7fac0358 	svcvc	0x00ac0358
    20f0:	019a033c 	orrseq	r0, sl, ip, lsr r3
    20f4:	7ee60320 	cdpvc	3, 14, cr0, cr6, cr0, {1}
    20f8:	019c0320 	orrseq	r0, ip, r0, lsr #6
    20fc:	24231d20 	strtcs	r1, [r3], #-3360	; 0xd20
    2100:	4a7ea003 	bmi	1faa114 <_Min_Stack_Size+0x1fa9d14>
    2104:	24212f31 	strtcs	r2, [r1], #-3889	; 0xf31
    2108:	9e3a0330 	mrcls	3, 1, r0, cr10, cr0, {1}
    210c:	587fbb03 	ldmdapl	pc!, {r0, r1, r8, r9, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    2110:	242f2f31 	strtcs	r2, [pc], #-3889	; 2118 <_Min_Stack_Size+0x1d18>
    2114:	039c0330 	orrseq	r0, ip, #48, 6	; 0xc0000000
    2118:	7cd9039e 	ldclvc	3, cr0, [r9], {158}	; 0x9e
    211c:	2f2f3166 	svccs	0x002f3166
    2120:	9c033024 	stcls	0, cr3, [r3], {36}	; 0x24
    2124:	cf039e03 	svcgt	0x00039e03
    2128:	7203667e 	andvc	r6, r3, #132120576	; 0x7e00000
    212c:	00d90390 	smullseq	r0, r9, r0, r3
    2130:	7f9b0366 	svcvc	0x009b0366
    2134:	e7031e3c 	smladx	r3, ip, lr, r1
    2138:	9b032e00 	blls	cd940 <_Min_Stack_Size+0xcd540>
    213c:	311d207f 	tstcc	sp, pc, ror r0
    2140:	00e50324 	rsceq	r0, r5, r4, lsr #6
    2144:	9f5a4d3c 	svcls	0x005a4d3c
    2148:	3d661603 	stclcc	6, cr1, [r6, #-12]!
    214c:	7ef00328 	cdpvc	3, 15, cr0, cr0, cr8, {1}
    2150:	01900320 	orrseq	r0, r0, r0, lsr #6
    2154:	7ef2032e 	cdpvc	3, 15, cr0, cr2, cr14, {1}
    2158:	0f031d20 	svceq	0x00031d20
    215c:	2e0e032e 	cdpcs	3, 0, cr0, cr14, cr14, {1}
    2160:	03207203 	teqeq	r0, #805306368	; 0x30000000
    2164:	77033c0e 	strvc	r3, [r3, -lr, lsl #24]
    2168:	9009033c 	andls	r0, r9, ip, lsr r3
    216c:	03667203 	cmneq	r6, #805306368	; 0x30000000
    2170:	027400fa 	rsbseq	r0, r4, #250	; 0xfa
    2174:	01010003 	tsteq	r1, r3
    2178:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    217c:	03080032 	movweq	r0, #32818	; 0x8032
    2180:	2001069c 	mulcs	r1, ip, r6
    2184:	314c3325 	cmpcc	ip, r5, lsr #6
    2188:	01000202 	tsteq	r0, r2, lsl #4
    218c:	02050001 	andeq	r0, r5, #1
    2190:	08003308 	stmdaeq	r0, {r3, r8, r9, ip, sp}
    2194:	0106af03 	tsteq	r6, r3, lsl #30
    2198:	00020216 	andeq	r0, r2, r6, lsl r2
    219c:	027d0101 	rsbseq	r0, sp, #1073741824	; 0x40000000
    21a0:	00020000 	andeq	r0, r2, r0
    21a4:	000000c4 	andeq	r0, r0, r4, asr #1
    21a8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    21ac:	0101000d 	tsteq	r1, sp
    21b0:	00000101 	andeq	r0, r0, r1, lsl #2
    21b4:	00000100 	andeq	r0, r0, r0, lsl #2
    21b8:	65724601 	ldrbvs	r4, [r2, #-1537]!	; 0x601
    21bc:	4f545265 	svcmi	0x00545265
    21c0:	6f702f53 	svcvs	0x00702f53
    21c4:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    21c8:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
    21cc:	412f4343 	teqmi	pc, r3, asr #6
    21d0:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    21d4:	0046344d 	subeq	r3, r6, sp, asr #8
    21d8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    21dc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    21e0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    21e4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    21e8:	2f62696c 	svccs	0x0062696c
    21ec:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    21f0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    21f4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    21f8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    21fc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2200:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2204:	0062696c 	rsbeq	r6, r2, ip, ror #18
    2208:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    220c:	534f5452 	movtpl	r5, #62546	; 0xf452
    2210:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2214:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2218:	6f700000 	svcvs	0x00700000
    221c:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    2220:	00000100 	andeq	r0, r0, r0, lsl #2
    2224:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2228:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    222c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2230:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2234:	00000200 	andeq	r0, r0, r0, lsl #4
    2238:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    223c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2240:	00000300 	andeq	r0, r0, r0, lsl #6
    2244:	6a6f7270 	bvs	1bdec0c <_Min_Stack_Size+0x1bde80c>
    2248:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
    224c:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    2250:	6f700000 	svcvs	0x00700000
    2254:	616d7472 	smcvs	55106	; 0xd742
    2258:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    225c:	00010068 	andeq	r0, r1, r8, rrx
    2260:	73617400 	cmnvc	r1, #0, 8
    2264:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    2268:	00000004 	andeq	r0, r0, r4
    226c:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    2270:	03080033 	movweq	r0, #32819	; 0x8033
    2274:	13010297 	movwne	r0, #4759	; 0x1297
    2278:	01000e02 	tsteq	r0, r2, lsl #28
    227c:	02050001 	andeq	r0, r5, #1
    2280:	08003328 	stmdaeq	r0, {r3, r5, r8, r9, ip, sp}
    2284:	0102a303 	tsteq	r2, r3, lsl #6
    2288:	01039903 	tsteq	r3, r3, lsl #18
    228c:	000a0213 	andeq	r0, sl, r3, lsl r2
    2290:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2294:	00333c02 	eorseq	r3, r3, r2, lsl #24
    2298:	05c60308 	strbeq	r0, [r6, #776]	; 0x308
    229c:	7c920301 	ldcvc	3, cr0, [r2], {1}
    22a0:	200c0301 	andcs	r0, ip, r1, lsl #6
    22a4:	2e0d032a 	cdpcs	3, 0, cr0, cr13, cr10, {1}
    22a8:	2a2e7703 	bcs	b9febc <_Min_Stack_Size+0xb9fabc>
    22ac:	032e0d03 	teqeq	lr, #3, 26	; 0xc0
    22b0:	2a342e75 	bcs	d0dc8c <_Min_Stack_Size+0xd0d88c>
    22b4:	022e0e03 	eoreq	r0, lr, #3, 28	; 0x30
    22b8:	01010003 	tsteq	r1, r3
    22bc:	68020500 	stmdavs	r2, {r8, sl}
    22c0:	03080033 	movweq	r0, #32819	; 0x8033
    22c4:	13010284 	movwne	r0, #4740	; 0x1284
    22c8:	01001002 	tsteq	r0, r2
    22cc:	02050001 	andeq	r0, r5, #1
    22d0:	08003388 	stmdaeq	r0, {r3, r7, r8, r9, ip, sp}
    22d4:	01029303 	tsteq	r2, r3, lsl #6
    22d8:	0100f003 	tsteq	r0, r3
    22dc:	022f7814 	eoreq	r7, pc, #20, 16	; 0x140000
    22e0:	01010003 	tsteq	r1, r3
    22e4:	a0020500 	andge	r0, r2, r0, lsl #10
    22e8:	03080033 	movweq	r0, #32819	; 0x8033
    22ec:	130103a3 	movwne	r0, #5027	; 0x13a3
    22f0:	02740c03 	rsbseq	r0, r4, #768	; 0x300
    22f4:	01010001 	tsteq	r1, r1
    22f8:	b0020500 	andlt	r0, r2, r0, lsl #10
    22fc:	03080033 	movweq	r0, #32819	; 0x8033
    2300:	270101f6 			; <UNDEFINED> instruction: 0x270101f6
    2304:	01040200 	mrseq	r0, R12_usr
    2308:	3d067406 	cfstrscc	mvf7, [r6, #-24]	; 0xffffffe8
    230c:	01000302 	tsteq	r0, r2, lsl #6
    2310:	02050001 	andeq	r0, r5, #1
    2314:	080033cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp}
    2318:	0102fb03 	tsteq	r2, r3, lsl #22
    231c:	04020023 	streq	r0, [r2], #-35	; 0x23
    2320:	02820601 	addeq	r0, r2, #1048576	; 0x100000
    2324:	01010004 	tsteq	r1, r4
    2328:	e8020500 	stmda	r2, {r8, sl}
    232c:	03080033 	movweq	r0, #32819	; 0x8033
    2330:	2101038f 	smlabbcs	r1, pc, r3, r0	; <UNPREDICTABLE>
    2334:	022f752f 	eoreq	r7, pc, #197132288	; 0xbc00000
    2338:	01010003 	tsteq	r1, r3
    233c:	08020500 	stmdaeq	r2, {r8, sl}
    2340:	03080034 	movweq	r0, #32820	; 0x8034
    2344:	130103b4 	movwne	r0, #5044	; 0x13b4
    2348:	01000302 	tsteq	r0, r2, lsl #6
    234c:	02050001 	andeq	r0, r5, #1
    2350:	08003410 	stmdaeq	r0, {r4, sl, ip, sp}
    2354:	0103be03 	tsteq	r3, r3, lsl #28
    2358:	21015a03 	tstcs	r1, r3, lsl #20
    235c:	02002f67 	andeq	r2, r0, #412	; 0x19c
    2360:	422c0104 	eormi	r0, ip, #4, 2
    2364:	0002022c 	andeq	r0, r2, ip, lsr #4
    2368:	05000101 	streq	r0, [r0, #-257]	; 0x101
    236c:	00343402 	eorseq	r3, r4, r2, lsl #8
    2370:	03c20308 	biceq	r0, r2, #8, 6	; 0x20000000
    2374:	2c021501 	cfstr32cs	mvfx1, [r2], {1}
    2378:	00010100 	andeq	r0, r1, r0, lsl #2
    237c:	348c0205 	strcc	r0, [ip], #517	; 0x205
    2380:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    2384:	25160103 	ldrcs	r0, [r6, #-259]	; 0x103
    2388:	21774031 	cmncs	r7, r1, lsr r0
    238c:	0002022d 	andeq	r0, r2, sp, lsr #4
    2390:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2394:	0034b002 	eorseq	fp, r4, r2
    2398:	05aa0308 	streq	r0, [sl, #776]!	; 0x308
    239c:	010b0301 	tsteq	fp, r1, lsl #6
    23a0:	2d3d2dc9 	ldccs	13, cr2, [sp, #-804]!	; 0xfffffcdc
    23a4:	02211f21 	eoreq	r1, r1, #33, 30	; 0x84
    23a8:	01010002 	tsteq	r1, r2
    23ac:	e4020500 	str	r0, [r2], #-1280	; 0x500
    23b0:	03080034 	movweq	r0, #32820	; 0x8034
    23b4:	030102aa 	movweq	r0, #4778	; 0x12aa
    23b8:	6f032011 	svcvs	0x00032011
    23bc:	2011034a 	andscs	r0, r1, sl, asr #6
    23c0:	23321c24 	teqcs	r2, #36, 24	; 0x2400
    23c4:	3229334d 	eorcc	r3, r9, #872415233	; 0x34000001
    23c8:	322a322a 	eorcc	r3, sl, #-1610612734	; 0xa0000002
    23cc:	21241b21 	teqcs	r4, r1, lsr #22
    23d0:	0d03634d 	stceq	3, cr6, [r3, #-308]	; 0xfffffecc
    23d4:	0a035366 	beq	d7174 <_Min_Stack_Size+0xd6d74>
    23d8:	4a770320 	bmi	1dc3060 <_Min_Stack_Size+0x1dc2c60>
    23dc:	25241c32 	strcs	r1, [r4, #-3122]!	; 0xc32
    23e0:	69314e4b 	ldmdbvs	r1!, {r0, r1, r3, r6, r9, sl, fp, lr}
    23e4:	02348531 	eorseq	r8, r4, #205520896	; 0xc400000
    23e8:	01010002 	tsteq	r1, r2
    23ec:	a0020500 	andge	r0, r2, r0, lsl #10
    23f0:	03080035 	movweq	r0, #32821	; 0x8035
    23f4:	250105cc 	strcs	r0, [r1, #-1484]	; 0x5cc
    23f8:	19033131 	stmdbne	r3, {r0, r4, r5, r8, ip, sp}
    23fc:	2e67032e 	cdpcs	3, 6, cr0, cr7, cr14, {1}
    2400:	032e1903 	teqeq	lr, #49152	; 0xc000
    2404:	19032e67 	stmdbne	r3, {r0, r1, r2, r5, r6, r9, sl, fp, sp}
    2408:	3c100320 	ldccc	3, cr0, [r0], {32}
    240c:	01040200 	mrseq	r0, R12_usr
    2410:	0200e406 	andeq	lr, r0, #100663296	; 0x6000000
    2414:	03060104 	movweq	r0, #24836	; 0x6104
    2418:	03023c70 	movweq	r3, #11376	; 0x2c70
    241c:	7a010100 	bvc	42824 <_Min_Stack_Size+0x42424>
    2420:	02000001 	andeq	r0, r0, #1
    2424:	00010700 	andeq	r0, r1, r0, lsl #14
    2428:	fb010200 	blx	42c32 <_Min_Stack_Size+0x42832>
    242c:	01000d0e 	tsteq	r0, lr, lsl #26
    2430:	00010101 	andeq	r0, r1, r1, lsl #2
    2434:	00010000 	andeq	r0, r1, r0
    2438:	72460100 	subvc	r0, r6, #0, 2
    243c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
    2440:	702f534f 	eorvc	r5, pc, pc, asr #6
    2444:	6174726f 	cmnvs	r4, pc, ror #4
    2448:	2f656c62 	svccs	0x00656c62
    244c:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
    2450:	00676e61 	rsbeq	r6, r7, r1, ror #28
    2454:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2458:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    245c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2460:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    2464:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2468:	61652d65 	cmnvs	r5, r5, ror #26
    246c:	342f6962 	strtcc	r6, [pc], #-2402	; 2474 <_Min_Stack_Size+0x2074>
    2470:	322e382e 	eorcc	r3, lr, #3014656	; 0x2e0000
    2474:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2478:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    247c:	73752f00 	cmnvc	r5, #0, 30
    2480:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2484:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2488:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    248c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2490:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    2494:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    2498:	73752f00 	cmnvc	r5, #0, 30
    249c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    24a0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    24a4:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    24a8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    24ac:	65724600 	ldrbvs	r4, [r2, #-1536]!	; 0x600
    24b0:	4f545265 	svcmi	0x00545265
    24b4:	6f702f53 	svcvs	0x00702f53
    24b8:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    24bc:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
    24c0:	412f4343 	teqmi	pc, r3, asr #6
    24c4:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    24c8:	0046344d 	subeq	r3, r6, sp, asr #8
    24cc:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    24d0:	534f5452 	movtpl	r5, #62546	; 0xf452
    24d4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    24d8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    24dc:	65680000 	strbvs	r0, [r8, #-0]!
    24e0:	315f7061 	cmpcc	pc, r1, rrx
    24e4:	0100632e 	tsteq	r0, lr, lsr #6
    24e8:	74730000 	ldrbtvc	r0, [r3], #-0
    24ec:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    24f0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    24f4:	645f0000 	ldrbvs	r0, [pc], #-0	; 24fc <_Min_Stack_Size+0x20fc>
    24f8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    24fc:	745f746c 	ldrbvc	r7, [pc], #-1132	; 2504 <_Min_Stack_Size+0x2104>
    2500:	73657079 	cmnvc	r5, #121	; 0x79
    2504:	0300682e 	movweq	r6, #2094	; 0x82e
    2508:	74730000 	ldrbtvc	r0, [r3], #-0
    250c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    2510:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    2514:	6f700000 	svcvs	0x00700000
    2518:	616d7472 	smcvs	55106	; 0xd742
    251c:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    2520:	00050068 	andeq	r0, r5, r8, rrx
    2524:	73617400 	cmnvc	r1, #0, 8
    2528:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    252c:	00000006 	andeq	r0, r0, r6
    2530:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    2534:	03080035 	movweq	r0, #32821	; 0x8035
    2538:	260100df 			; <UNDEFINED> instruction: 0x260100df
    253c:	03207a03 	teqeq	r0, #12288	; 0x3000
    2540:	304e2009 	subcc	r2, lr, r9
    2544:	0402007b 	streq	r0, [r2], #-123	; 0x7b
    2548:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
    254c:	03252133 	teqeq	r5, #-1073741812	; 0xc000000c
    2550:	53032e0d 	movwpl	r2, #15885	; 0x3e0d
    2554:	2020032e 	eorcs	r0, r0, lr, lsr #6
    2558:	032e0d03 	teqeq	lr, #3, 26	; 0xc0
    255c:	07022e64 	streq	r2, [r2, -r4, ror #28]
    2560:	00010100 	andeq	r0, r1, r0, lsl #2
    2564:	364c0205 	strbcc	r0, [ip], -r5, lsl #4
    2568:	91030800 	tstls	r3, r0, lsl #16
    256c:	00270101 	eoreq	r0, r7, r1, lsl #2
    2570:	06010402 	streq	r0, [r1], -r2, lsl #8
    2574:	00040220 	andeq	r0, r4, r0, lsr #4
    2578:	05000101 	streq	r0, [r0, #-257]	; 0x101
    257c:	00365802 	eorseq	r5, r6, r2, lsl #16
    2580:	019d0308 	orrseq	r0, sp, r8, lsl #6
    2584:	07021401 	streq	r1, [r2, -r1, lsl #8]
    2588:	00010100 	andeq	r0, r1, r0, lsl #2
    258c:	36680205 	strbtcc	r0, [r8], -r5, lsl #4
    2590:	a4030800 	strge	r0, [r3], #-2048	; 0x800
    2594:	75130101 	ldrvc	r0, [r3, #-257]	; 0x101
    2598:	01000302 	tsteq	r0, r2, lsl #6
    259c:	00020001 	andeq	r0, r2, r1
    25a0:	76000200 	strvc	r0, [r0], -r0, lsl #4
    25a4:	02000001 	andeq	r0, r0, #1
    25a8:	0d0efb01 	vstreq	d15, [lr, #-4]
    25ac:	01010100 	mrseq	r0, (UNDEF: 17)
    25b0:	00000001 	andeq	r0, r0, r1
    25b4:	01000001 	tsteq	r0, r1
    25b8:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    25bc:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 24b0 <_Min_Stack_Size+0x20b0>
    25c0:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    25c4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    25c8:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 24b8 <_Min_Stack_Size+0x20b8>
    25cc:	61726269 	cmnvs	r2, r9, ror #4
    25d0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    25d4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    25d8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    25dc:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    25e0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    25e4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    25e8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    25ec:	2f726576 	svccs	0x00726576
    25f0:	00637273 	rsbeq	r7, r3, r3, ror r2
    25f4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    25f8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    25fc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2600:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2604:	2f62696c 	svccs	0x0062696c
    2608:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    260c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    2610:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2614:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2618:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    261c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2620:	0062696c 	rsbeq	r6, r2, ip, ror #18
    2624:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2628:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 251c <_Min_Stack_Size+0x211c>
    262c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2630:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2634:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 2524 <_Min_Stack_Size+0x2124>
    2638:	61726269 	cmnvs	r2, r9, ror #4
    263c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2640:	534d432f 	movtpl	r4, #54063	; 0xd32f
    2644:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    2648:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    264c:	43006564 	movwmi	r6, #1380	; 0x564
    2650:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2654:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2658:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    265c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2660:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2664:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2668:	2f736569 	svccs	0x00736569
    266c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    2670:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    2674:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    2678:	2f54532f 	svccs	0x0054532f
    267c:	334d5453 	movtcc	r5, #54355	; 0xd453
    2680:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2684:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    2688:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    268c:	4f430065 	svcmi	0x00430065
    2690:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2694:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2698:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    269c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    26a0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    26a4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    26a8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    26ac:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    26b0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    26b4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    26b8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    26bc:	445f6870 	ldrbmi	r6, [pc], #-2160	; 26c4 <_Min_Stack_Size+0x22c4>
    26c0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    26c4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    26c8:	6d000063 	stcvs	0, cr0, [r0, #-396]	; 0xfffffe74
    26cc:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
    26d0:	00010063 	andeq	r0, r1, r3, rrx
    26d4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    26d8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    26dc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    26e0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    26e4:	00020068 	andeq	r0, r2, r8, rrx
    26e8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    26ec:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    26f0:	00030068 	andeq	r0, r3, r8, rrx
    26f4:	726f6300 	rsbvc	r6, pc, #0, 6
    26f8:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    26fc:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    2700:	73000004 	movwvc	r0, #4
    2704:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2708:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    270c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    2710:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
    2714:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    2718:	00000600 	andeq	r0, r0, r0, lsl #12
    271c:	02050000 	andeq	r0, r5, #0
    2720:	0800367c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip, sp}
    2724:	0100f603 	tsteq	r0, r3, lsl #12
    2728:	000a0217 	andeq	r0, sl, r7, lsl r2
    272c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2730:	00369002 	eorseq	r9, r6, r2
    2734:	01880308 	orreq	r0, r8, r8, lsl #6
    2738:	78031a01 	stmdavc	r3, {r0, r9, fp, ip}
    273c:	15032820 	strne	r2, [r3, #-2080]	; 0x820
    2740:	2f3b5920 	svccs	0x003b5920
    2744:	6b03312d 	blvs	cec00 <_Min_Stack_Size+0xce800>
    2748:	251c4e2e 	ldrcs	r4, [ip, #-3630]	; 0xe2e
    274c:	20770324 	rsbscs	r0, r7, r4, lsr #6
    2750:	3a222f3d 	bcc	88e44c <_Min_Stack_Size+0x88e04c>
    2754:	48322130 	ldmdami	r2!, {r4, r5, r8, sp}
    2758:	321d3130 	andscc	r3, sp, #48, 2
    275c:	2d321d3b 	ldccs	13, cr1, [r2, #-236]!	; 0xffffff14
    2760:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
    2764:	01010002 	tsteq	r1, r2
    2768:	10020500 	andne	r0, r2, r0, lsl #10
    276c:	03080037 	movweq	r0, #32823	; 0x8037
    2770:	170101b4 			; <UNDEFINED> instruction: 0x170101b4
    2774:	01000b02 	tsteq	r0, r2, lsl #22
    2778:	02050001 	andeq	r0, r5, #1
    277c:	08003728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp}
    2780:	0101c703 	tsteq	r1, r3, lsl #14
    2784:	46265619 			; <UNDEFINED> instruction: 0x46265619
    2788:	01000302 	tsteq	r0, r2, lsl #6
    278c:	02050001 	andeq	r0, r5, #1
    2790:	08003744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip, sp}
    2794:	0101df03 	tsteq	r1, r3, lsl #30
    2798:	4e224817 	mcrmi	8, 1, r4, cr2, cr7, {0}
    279c:	01000402 	tsteq	r0, r2, lsl #8
    27a0:	00034c01 	andeq	r4, r3, r1, lsl #24
    27a4:	9d000200 	sfmls	f0, 4, [r0, #-0]
    27a8:	02000001 	andeq	r0, r0, #1
    27ac:	0d0efb01 	vstreq	d15, [lr, #-4]
    27b0:	01010100 	mrseq	r0, (UNDEF: 17)
    27b4:	00000001 	andeq	r0, r0, r1
    27b8:	01000001 	tsteq	r0, r1
    27bc:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    27c0:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 26b4 <_Min_Stack_Size+0x22b4>
    27c4:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    27c8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    27cc:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 26bc <_Min_Stack_Size+0x22bc>
    27d0:	61726269 	cmnvs	r2, r9, ror #4
    27d4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    27d8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    27dc:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    27e0:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    27e4:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    27e8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    27ec:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    27f0:	2f726576 	svccs	0x00726576
    27f4:	00637273 	rsbeq	r7, r3, r3, ror r2
    27f8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    27fc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2800:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2804:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2808:	2f62696c 	svccs	0x0062696c
    280c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    2810:	00656e69 	rsbeq	r6, r5, r9, ror #28
    2814:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2818:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    281c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2820:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2824:	0062696c 	rsbeq	r6, r2, ip, ror #18
    2828:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    282c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 2720 <_Min_Stack_Size+0x2320>
    2830:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2834:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2838:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 2728 <_Min_Stack_Size+0x2328>
    283c:	61726269 	cmnvs	r2, r9, ror #4
    2840:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2844:	534d432f 	movtpl	r4, #54063	; 0xd32f
    2848:	442f5349 	strtmi	r5, [pc], #-841	; 2850 <_Min_Stack_Size+0x2450>
    284c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2850:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    2854:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2858:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    285c:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    2860:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2864:	43006564 	movwmi	r6, #1380	; 0x564
    2868:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    286c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2870:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2874:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2878:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    287c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2880:	2f736569 	svccs	0x00736569
    2884:	334d5453 	movtcc	r5, #54355	; 0xd453
    2888:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    288c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    2890:	72655064 	rsbvc	r5, r5, #100	; 0x64
    2894:	5f687069 	svcpl	0x00687069
    2898:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    289c:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    28a0:	4300636e 	movwmi	r6, #878	; 0x36e
    28a4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    28a8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    28ac:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    28b0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    28b4:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    28b8:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    28bc:	2f736569 	svccs	0x00736569
    28c0:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    28c4:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    28c8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    28cc:	73000065 	movwvc	r0, #101	; 0x65
    28d0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    28d4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    28d8:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    28dc:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    28e0:	5f000001 	svcpl	0x00000001
    28e4:	61666564 	cmnvs	r6, r4, ror #10
    28e8:	5f746c75 	svcpl	0x00746c75
    28ec:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    28f0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    28f4:	73000002 	movwvc	r0, #2
    28f8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    28fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2900:	73000003 	movwvc	r0, #3
    2904:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2908:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    290c:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    2910:	74730000 	ldrbtvc	r0, [r3], #-0
    2914:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2918:	5f787834 	svcpl	0x00787834
    291c:	6f697067 	svcvs	0x00697067
    2920:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    2924:	6f630000 	svcvs	0x00630000
    2928:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    292c:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    2930:	00000600 	andeq	r0, r0, r0, lsl #12
    2934:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2938:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    293c:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    2940:	00682e63 	rsbeq	r2, r8, r3, ror #28
    2944:	00000005 	andeq	r0, r0, r5
    2948:	60020500 	andvs	r0, r2, r0, lsl #10
    294c:	03080037 	movweq	r0, #32823	; 0x8037
    2950:	240100ff 	strcs	r0, [r1], #-255	; 0xff
    2954:	6b6b6b5d 	blvs	1add6d0 <_Min_Stack_Size+0x1add2d0>
    2958:	6c6b6b6b 	stclvs	11, cr6, [fp], #-428	; 0xfffffe54
    295c:	59766d6b 	ldmdbpl	r6!, {r0, r1, r3, r5, r6, r8, sl, fp, sp, lr}^
    2960:	4a032b3f 	bmi	cd664 <_Min_Stack_Size+0xcd264>
    2964:	38034b2e 	stmdacc	r3, {r1, r2, r3, r5, r8, r9, fp, lr}
    2968:	2e48032e 	cdpcs	3, 4, cr0, cr8, cr14, {1}
    296c:	33034b32 	movwcc	r4, #15154	; 0x3b32
    2970:	2e4d032e 	cdpcs	3, 4, cr0, cr13, cr14, {1}
    2974:	2e034b32 	vmovcs.16	d3[0], r4
    2978:	2e52032e 	cdpcs	3, 5, cr0, cr2, cr14, {1}
    297c:	29034b32 	stmdbcs	r3, {r1, r4, r5, r8, r9, fp, lr}
    2980:	2e57032e 	cdpcs	3, 5, cr0, cr7, cr14, {1}
    2984:	24034b32 	strcs	r4, [r3], #-2866	; 0xb32
    2988:	2e5c032e 	cdpcs	3, 5, cr0, cr12, cr14, {1}
    298c:	1f034b32 	svcne	0x00034b32
    2990:	2e61032e 	cdpcs	3, 6, cr0, cr1, cr14, {1}
    2994:	1a034b32 	bne	d5664 <_Min_Stack_Size+0xd5264>
    2998:	2e66032e 	cdpcs	3, 6, cr0, cr6, cr14, {1}
    299c:	15034b32 	strne	r4, [r3, #-2866]	; 0xb32
    29a0:	2e6b032e 	cdpcs	3, 6, cr0, cr11, cr14, {1}
    29a4:	0f035933 	svceq	0x00035933
    29a8:	2e71033c 	mrccs	3, 3, r0, cr1, cr12, {1}
    29ac:	0a035932 	beq	d8e7c <_Min_Stack_Size+0xd8a7c>
    29b0:	2e76033c 	mrccs	3, 3, r0, cr6, cr12, {1}
    29b4:	01000202 	tsteq	r0, r2, lsl #4
    29b8:	02050001 	andeq	r0, r5, #1
    29bc:	080038d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, sp}
    29c0:	0101ca03 	tsteq	r1, r3, lsl #20
    29c4:	303c0b03 	eorscc	r0, ip, r3, lsl #22
    29c8:	3c780326 	ldclcc	3, cr0, [r8], #-152	; 0xffffff68
    29cc:	3030305a 	eorscc	r3, r0, sl, asr r0
    29d0:	4c752d2f 	ldclmi	13, cr2, [r5], #-188	; 0xffffff44
    29d4:	302c3048 	eorcc	r3, ip, r8, asr #32
    29d8:	21201203 	teqcs	r0, r3, lsl #4
    29dc:	62032f2d 	andvs	r2, r3, #45, 30	; 0xb4
    29e0:	201e033c 	andscs	r0, lr, ip, lsr r3
    29e4:	03206203 	teqeq	r0, #805306368	; 0x30000000
    29e8:	6203201e 	andvs	r2, r3, #30
    29ec:	2021033c 	eorcs	r0, r1, ip, lsr r3
    29f0:	2f3c7003 	svccs	0x003c7003
    29f4:	2e780335 	mrccs	3, 3, r0, cr8, cr5, {1}
    29f8:	0259884b 	subseq	r8, r9, #4915200	; 0x4b0000
    29fc:	01010009 	tsteq	r1, r9
    2a00:	90020500 	andls	r0, r2, r0, lsl #10
    2a04:	03080039 	movweq	r0, #32825	; 0x8039
    2a08:	150101fe 	strne	r0, [r1, #-510]	; 0x1fe
    2a0c:	21213d1f 	teqcs	r1, pc, lsl sp
    2a10:	00020221 	andeq	r0, r2, r1, lsr #4
    2a14:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2a18:	0039a402 	eorseq	sl, r9, r2, lsl #8
    2a1c:	02950308 	addseq	r0, r5, #8, 6	; 0x20000000
    2a20:	3e422101 	dvfccs	f2, f2, f1
    2a24:	30302230 	eorscc	r2, r0, r0, lsr r2
    2a28:	0002022f 	andeq	r0, r2, pc, lsr #4
    2a2c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2a30:	0039c802 	eorseq	ip, r9, r2, lsl #16
    2a34:	02c30308 	sbceq	r0, r3, #8, 6	; 0x20000000
    2a38:	09031901 	stmdbeq	r3, {r0, r8, fp, ip}
    2a3c:	0004022e 	andeq	r0, r4, lr, lsr #4
    2a40:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2a44:	0039d402 	eorseq	sp, r9, r2, lsl #8
    2a48:	02dd0308 	sbcseq	r0, sp, #8, 6	; 0x20000000
    2a4c:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    2a50:	01010002 	tsteq	r1, r2
    2a54:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    2a58:	03080039 	movweq	r0, #32825	; 0x8039
    2a5c:	190102ee 	stmdbne	r1, {r1, r2, r3, r5, r6, r7, r9}
    2a60:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
    2a64:	01010004 	tsteq	r1, r4
    2a68:	e8020500 	stmda	r2, {r8, sl}
    2a6c:	03080039 	movweq	r0, #32825	; 0x8039
    2a70:	16010388 	strne	r0, [r1], -r8, lsl #7
    2a74:	00020221 	andeq	r0, r2, r1, lsr #4
    2a78:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2a7c:	0039f002 	eorseq	pc, r9, r2
    2a80:	039c0308 	orrseq	r0, ip, #8, 6	; 0x20000000
    2a84:	02021701 	andeq	r1, r2, #262144	; 0x40000
    2a88:	00010100 	andeq	r0, r1, r0, lsl #2
    2a8c:	39f40205 	ldmibcc	r4!, {r0, r2, r9}^
    2a90:	b1030800 	tstlt	r3, r0, lsl #16
    2a94:	02170103 	andseq	r0, r7, #-1073741824	; 0xc0000000
    2a98:	01010002 	tsteq	r1, r2
    2a9c:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    2aa0:	03080039 	movweq	r0, #32825	; 0x8039
    2aa4:	180103c7 	stmdane	r1, {r0, r1, r2, r6, r7, r8, r9}
    2aa8:	02022a26 	andeq	r2, r2, #155648	; 0x26000
    2aac:	00010100 	andeq	r0, r1, r0, lsl #2
    2ab0:	3a040205 	bcc	1032cc <_Min_Stack_Size+0x102ecc>
    2ab4:	e0030800 	and	r0, r3, r0, lsl #16
    2ab8:	02160103 	andseq	r0, r6, #-1073741824	; 0xc0000000
    2abc:	01010002 	tsteq	r1, r2
    2ac0:	08020500 	stmdaeq	r2, {r8, sl}
    2ac4:	0308003a 	movweq	r0, #32826	; 0x803a
    2ac8:	160103f0 			; <UNDEFINED> instruction: 0x160103f0
    2acc:	01000402 	tsteq	r0, r2, lsl #8
    2ad0:	02050001 	andeq	r0, r5, #1
    2ad4:	08003a10 	stmdaeq	r0, {r4, r9, fp, ip, sp}
    2ad8:	0104c303 	tsteq	r4, r3, lsl #6
    2adc:	033c0903 	teqeq	ip, #49152	; 0xc000
    2ae0:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    2ae4:	22672120 	rsbcs	r2, r7, #32, 2
    2ae8:	2121222a 	teqcs	r1, sl, lsr #4
    2aec:	01000102 	tsteq	r0, r2, lsl #2
    2af0:	00060c01 	andeq	r0, r6, r1, lsl #24
    2af4:	88000200 	stmdahi	r0, {r9}
    2af8:	02000001 	andeq	r0, r0, #1
    2afc:	0d0efb01 	vstreq	d15, [lr, #-4]
    2b00:	01010100 	mrseq	r0, (UNDEF: 17)
    2b04:	00000001 	andeq	r0, r0, r1
    2b08:	01000001 	tsteq	r0, r1
    2b0c:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2b10:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 2a04 <_Min_Stack_Size+0x2604>
    2b14:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2b18:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2b1c:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 2a0c <_Min_Stack_Size+0x260c>
    2b20:	61726269 	cmnvs	r2, r9, ror #4
    2b24:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2b28:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2b2c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2b30:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    2b34:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    2b38:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2b3c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2b40:	2f726576 	svccs	0x00726576
    2b44:	00637273 	rsbeq	r7, r3, r3, ror r2
    2b48:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2b4c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2b50:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2b54:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2b58:	2f62696c 	svccs	0x0062696c
    2b5c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    2b60:	00656e69 	rsbeq	r6, r5, r9, ror #28
    2b64:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2b68:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2b6c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2b70:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2b74:	0062696c 	rsbeq	r6, r2, ip, ror #18
    2b78:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2b7c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 2a70 <_Min_Stack_Size+0x2670>
    2b80:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2b84:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2b88:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 2a78 <_Min_Stack_Size+0x2678>
    2b8c:	61726269 	cmnvs	r2, r9, ror #4
    2b90:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2b94:	534d432f 	movtpl	r4, #54063	; 0xd32f
    2b98:	442f5349 	strtmi	r5, [pc], #-841	; 2ba0 <_Min_Stack_Size+0x27a0>
    2b9c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2ba0:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    2ba4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2ba8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2bac:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    2bb0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2bb4:	43006564 	movwmi	r6, #1380	; 0x564
    2bb8:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2bbc:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2bc0:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2bc4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2bc8:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2bcc:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2bd0:	2f736569 	svccs	0x00736569
    2bd4:	334d5453 	movtcc	r5, #54355	; 0xd453
    2bd8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2bdc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    2be0:	72655064 	rsbvc	r5, r5, #100	; 0x64
    2be4:	5f687069 	svcpl	0x00687069
    2be8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2bec:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2bf0:	4300636e 	movwmi	r6, #878	; 0x36e
    2bf4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2bf8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2bfc:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2c00:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2c04:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2c08:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2c0c:	2f736569 	svccs	0x00736569
    2c10:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    2c14:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    2c18:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2c1c:	73000065 	movwvc	r0, #101	; 0x65
    2c20:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2c24:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    2c28:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    2c2c:	0100632e 	tsteq	r0, lr, lsr #6
    2c30:	645f0000 	ldrbvs	r0, [pc], #-0	; 2c38 <_Min_Stack_Size+0x2838>
    2c34:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    2c38:	745f746c 	ldrbvc	r7, [pc], #-1132	; 2c40 <_Min_Stack_Size+0x2840>
    2c3c:	73657079 	cmnvc	r5, #121	; 0x79
    2c40:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2c44:	74730000 	ldrbtvc	r0, [r3], #-0
    2c48:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    2c4c:	0300682e 	movweq	r6, #2094	; 0x82e
    2c50:	74730000 	ldrbtvc	r0, [r3], #-0
    2c54:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2c58:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    2c5c:	00040068 	andeq	r0, r4, r8, rrx
    2c60:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2c64:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    2c68:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    2c6c:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    2c70:	00000500 	andeq	r0, r0, r0, lsl #10
    2c74:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    2c78:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    2c7c:	0600682e 	streq	r6, [r0], -lr, lsr #16
    2c80:	00000000 	andeq	r0, r0, r0
    2c84:	3a380205 	bcc	e034a0 <_Min_Stack_Size+0xe030a0>
    2c88:	d5030800 	strle	r0, [r3, #-2048]	; 0x800
    2c8c:	4d140101 	ldfmis	f0, [r4, #-4]
    2c90:	23223a1d 	teqcs	r2, #118784	; 0x1d000
    2c94:	03312623 	teqeq	r1, #36700160	; 0x2300000
    2c98:	4d2b207a 	stcmi	0, cr2, [fp, #-488]!	; 0xfffffe18
    2c9c:	7a032b34 	bvc	cd974 <_Min_Stack_Size+0xcd574>
    2ca0:	3123232e 	teqcc	r3, lr, lsr #6
    2ca4:	231b5231 	tstcs	fp, #268435459	; 0x10000003
    2ca8:	00010230 	andeq	r0, r1, r0, lsr r2
    2cac:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2cb0:	003a8c02 	eorseq	r8, sl, r2, lsl #24
    2cb4:	02880308 	addeq	r0, r8, #8, 6	; 0x20000000
    2cb8:	02691701 	rsbeq	r1, r9, #262144	; 0x40000
    2cbc:	01010002 	tsteq	r1, r2
    2cc0:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    2cc4:	0308003a 	movweq	r0, #32826	; 0x803a
    2cc8:	210102a0 	smlatbcs	r1, r0, r2, r0
    2ccc:	200e9703 	andcs	r9, lr, r3, lsl #14
    2cd0:	2e71e903 	cdpcs	9, 7, cr14, cr1, cr3, {0}
    2cd4:	200e9703 	andcs	r9, lr, r3, lsl #14
    2cd8:	01040200 	mrseq	r0, R12_usr
    2cdc:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
    2ce0:	03060104 	movweq	r0, #24836	; 0x6104
    2ce4:	e303200d 	movw	r2, #12301	; 0x300d
    2ce8:	033d2e71 	teqeq	sp, #1808	; 0x710
    2cec:	034a0e8f 	movteq	r0, #44687	; 0xae8f
    2cf0:	2f5871fb 	svccs	0x005871fb
    2cf4:	3d2e7403 	cfstrscc	mvf7, [lr, #-12]!
    2cf8:	01000202 	tsteq	r0, r2, lsl #4
    2cfc:	02050001 	andeq	r0, r5, #1
    2d00:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
    2d04:	0102bf03 	tsteq	r2, r3, lsl #30
    2d08:	31315b17 	teqcc	r1, r7, lsl fp
    2d0c:	01000202 	tsteq	r0, r2, lsl #4
    2d10:	02050001 	andeq	r0, r5, #1
    2d14:	08003af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, sp}
    2d18:	0102e303 	tsteq	r2, r3, lsl #6
    2d1c:	00050216 	andeq	r0, r5, r6, lsl r2
    2d20:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2d24:	003b0002 	eorseq	r0, fp, r2
    2d28:	02fc0308 	rscseq	r0, ip, #8, 6	; 0x20000000
    2d2c:	035e1801 	cmpeq	lr, #65536	; 0x10000
    2d30:	2323207a 	teqcs	r3, #122	; 0x7a
    2d34:	02214644 	eoreq	r4, r1, #68, 12	; 0x4400000
    2d38:	01010001 	tsteq	r1, r1
    2d3c:	24020500 	strcs	r0, [r2], #-1280	; 0x500
    2d40:	0308003b 	movweq	r0, #32827	; 0x803b
    2d44:	160103a4 	strne	r0, [r1], -r4, lsr #7
    2d48:	01000602 	tsteq	r0, r2, lsl #12
    2d4c:	02050001 	andeq	r0, r5, #1
    2d50:	08003b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip, sp}
    2d54:	0103cf03 	tsteq	r3, r3, lsl #30
    2d58:	02d82820 	sbcseq	r2, r8, #32, 16	; 0x200000
    2d5c:	01010003 	tsteq	r1, r3
    2d60:	58020500 	stmdapl	r2, {r8, sl}
    2d64:	0308003b 	movweq	r0, #32827	; 0x803b
    2d68:	150103e6 	strne	r0, [r1, #-998]	; 0x3e6
    2d6c:	01000502 	tsteq	r0, r2, lsl #10
    2d70:	02050001 	andeq	r0, r5, #1
    2d74:	08003b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, sp}
    2d78:	0104a803 	tsteq	r4, r3, lsl #16
    2d7c:	000c0218 	andeq	r0, ip, r8, lsl r2
    2d80:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2d84:	003b7c02 	eorseq	r7, fp, r2, lsl #24
    2d88:	04b90308 	ldrteq	r0, [r9], #776	; 0x308
    2d8c:	05021501 	streq	r1, [r2, #-1281]	; 0x501
    2d90:	00010100 	andeq	r0, r1, r0, lsl #2
    2d94:	3b880205 	blcc	fe2035b0 <_estack+0xde1d35b0>
    2d98:	d6030800 	strle	r0, [r3], -r0, lsl #16
    2d9c:	02170104 	andseq	r0, r7, #4, 2
    2da0:	0101000c 	tsteq	r1, ip
    2da4:	a0020500 	andge	r0, r2, r0, lsl #10
    2da8:	0308003b 	movweq	r0, #32827	; 0x803b
    2dac:	150104e8 	strne	r0, [r1, #-1256]	; 0x4e8
    2db0:	01000502 	tsteq	r0, r2, lsl #10
    2db4:	02050001 	andeq	r0, r5, #1
    2db8:	08003bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip, sp}
    2dbc:	0104fa03 	tsteq	r4, r3, lsl #20
    2dc0:	00050215 	andeq	r0, r5, r5, lsl r2
    2dc4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2dc8:	003bb802 	eorseq	fp, fp, r2, lsl #16
    2dcc:	05930308 	ldreq	r0, [r3, #776]	; 0x308
    2dd0:	315b1901 	cmpcc	fp, r1, lsl #18
    2dd4:	00020231 	andeq	r0, r2, r1, lsr r2
    2dd8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2ddc:	003bd002 	eorseq	sp, fp, r2
    2de0:	05b90308 	ldreq	r0, [r9, #776]!	; 0x308
    2de4:	315b1901 	cmpcc	fp, r1, lsl #18
    2de8:	00020231 	andeq	r0, r2, r1, lsr r2
    2dec:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2df0:	003be802 	eorseq	lr, fp, r2, lsl #16
    2df4:	06df0308 	ldrbeq	r0, [pc], r8, lsl #6
    2df8:	315b1801 	cmpcc	fp, r1, lsl #16
    2dfc:	00020223 	andeq	r0, r2, r3, lsr #4
    2e00:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2e04:	003bfc02 	eorseq	pc, fp, r2, lsl #24
    2e08:	06fb0308 	ldrbteq	r0, [fp], r8, lsl #6
    2e0c:	02591301 	subseq	r1, r9, #67108864	; 0x4000000
    2e10:	01010003 	tsteq	r1, r3
    2e14:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    2e18:	0308003c 	movweq	r0, #32828	; 0x803c
    2e1c:	18010794 	stmdane	r1, {r2, r4, r7, r8, r9, sl}
    2e20:	0223315b 	eoreq	r3, r3, #-1073741802	; 0xc0000016
    2e24:	01010002 	tsteq	r1, r2
    2e28:	20020500 	andcs	r0, r2, r0, lsl #10
    2e2c:	0308003c 	movweq	r0, #32828	; 0x803c
    2e30:	180107b4 	stmdane	r1, {r2, r4, r5, r7, r8, r9, sl}
    2e34:	0223315b 	eoreq	r3, r3, #-1073741802	; 0xc0000016
    2e38:	01010002 	tsteq	r1, r2
    2e3c:	34020500 	strcc	r0, [r2], #-1280	; 0x500
    2e40:	0308003c 	movweq	r0, #32828	; 0x803c
    2e44:	180107d3 	stmdane	r1, {r0, r1, r4, r6, r7, r8, r9, sl}
    2e48:	0231315b 	eorseq	r3, r1, #-1073741802	; 0xc0000016
    2e4c:	01010002 	tsteq	r1, r2
    2e50:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    2e54:	0308003c 	movweq	r0, #32828	; 0x803c
    2e58:	16010887 	strne	r0, [r1], -r7, lsl #17
    2e5c:	4d3e2446 	cfldrsmi	mvf2, [lr, #-280]!	; 0xfffffee8
    2e60:	4c582203 	lfmmi	f2, 2, [r8], {3}
    2e64:	2f2d222c 	svccs	0x002d222c
    2e68:	2f213122 	svccs	0x00213122
    2e6c:	2a253f22 	bcs	952afc <_Min_Stack_Size+0x9526fc>
    2e70:	032f222f 	teqeq	pc, #-268435454	; 0xf0000002
    2e74:	2659204e 	ldrbcs	r2, [r9], -lr, asr #32
    2e78:	4f312221 	svcmi	0x00312221
    2e7c:	76033329 	strvc	r3, [r3], -r9, lsr #6
    2e80:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
    2e84:	47314731 			; <UNDEFINED> instruction: 0x47314731
    2e88:	023d2131 	eorseq	r2, sp, #1073741836	; 0x4000000c
    2e8c:	01010001 	tsteq	r1, r1
    2e90:	fc020500 	stc2	5, cr0, [r2], {-0}
    2e94:	0308003c 	movweq	r0, #32828	; 0x803c
    2e98:	18010984 	stmdane	r1, {r2, r7, r8, fp}
    2e9c:	7a03505a 	bvc	d700c <_Min_Stack_Size+0xd6c0c>
    2ea0:	312b262e 	teqcc	fp, lr, lsr #12
    2ea4:	0a022423 	beq	8bf38 <_Min_Stack_Size+0x8bb38>
    2ea8:	00010100 	andeq	r0, r1, r0, lsl #2
    2eac:	3d340205 	lfmcc	f0, 4, [r4, #-20]!	; 0xffffffec
    2eb0:	a4030800 	strge	r0, [r3], #-2048	; 0x800
    2eb4:	02160109 	andseq	r0, r6, #1073741826	; 0x40000002
    2eb8:	01010006 	tsteq	r1, r6
    2ebc:	40020500 	andmi	r0, r2, r0, lsl #10
    2ec0:	0308003d 	movweq	r0, #32829	; 0x803d
    2ec4:	150109b5 	strne	r0, [r1, #-2485]	; 0x9b5
    2ec8:	01000602 	tsteq	r0, r2, lsl #12
    2ecc:	02050001 	andeq	r0, r5, #1
    2ed0:	08003d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip, sp}
    2ed4:	0109c603 	tsteq	r9, r3, lsl #12
    2ed8:	00060216 	andeq	r0, r6, r6, lsl r2
    2edc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2ee0:	003d5802 	eorseq	r5, sp, r2, lsl #16
    2ee4:	09db0308 	ldmibeq	fp, {r3, r8, r9}^
    2ee8:	03501801 	cmpeq	r0, #65536	; 0x10000
    2eec:	3131207a 	teqcc	r1, sl, ror r0
    2ef0:	00030223 	andeq	r0, r3, r3, lsr #4
    2ef4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2ef8:	003d7402 	eorseq	r7, sp, r2, lsl #8
    2efc:	09fb0308 	ldmibeq	fp!, {r3, r8, r9}^
    2f00:	03501801 	cmpeq	r0, #65536	; 0x10000
    2f04:	3131207a 	teqcc	r1, sl, ror r0
    2f08:	00030231 	andeq	r0, r3, r1, lsr r2
    2f0c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2f10:	003d9002 	eorseq	r9, sp, r2
    2f14:	0a9f0308 	beq	fe7c3b3c <_estack+0xde793b3c>
    2f18:	31691801 	cmncc	r9, r1, lsl #16
    2f1c:	00030223 	andeq	r0, r3, r3, lsr #4
    2f20:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2f24:	003da802 	eorseq	sl, sp, r2, lsl #16
    2f28:	0ac30308 	beq	ff0c3b50 <_estack+0xdf093b50>
    2f2c:	31691801 	cmncc	r9, r1, lsl #16
    2f30:	00030223 	andeq	r0, r3, r3, lsr #4
    2f34:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2f38:	003dc002 	eorseq	ip, sp, r2
    2f3c:	0ae40308 	beq	ff903b64 <_estack+0xdf8d3b64>
    2f40:	31691801 	cmncc	r9, r1, lsl #16
    2f44:	00030223 	andeq	r0, r3, r3, lsr #4
    2f48:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2f4c:	003dd802 	eorseq	sp, sp, r2, lsl #16
    2f50:	0b890308 	bleq	fe243b78 <_estack+0xde213b78>
    2f54:	06021601 	streq	r1, [r2], -r1, lsl #12
    2f58:	00010100 	andeq	r0, r1, r0, lsl #2
    2f5c:	3de40205 	sfmcc	f0, 2, [r4, #20]!
    2f60:	b4030800 	strlt	r0, [r3], #-2048	; 0x800
    2f64:	5619010b 	ldrpl	r0, [r9], -fp, lsl #2
    2f68:	03024626 	movweq	r4, #9766	; 0x2626
    2f6c:	00010100 	andeq	r0, r1, r0, lsl #2
    2f70:	3e000205 	cdpcc	2, 0, cr0, cr0, cr5, {0}
    2f74:	d4030800 	strle	r0, [r3], #-2048	; 0x800
    2f78:	5619010b 	ldrpl	r0, [r9], -fp, lsl #2
    2f7c:	03024626 	movweq	r4, #9766	; 0x2626
    2f80:	00010100 	andeq	r0, r1, r0, lsl #2
    2f84:	3e1c0205 	cdpcc	2, 1, cr0, cr12, cr5, {0}
    2f88:	f0030800 			; <UNDEFINED> instruction: 0xf0030800
    2f8c:	5619010b 	ldrpl	r0, [r9], -fp, lsl #2
    2f90:	03024626 	movweq	r4, #9766	; 0x2626
    2f94:	00010100 	andeq	r0, r1, r0, lsl #2
    2f98:	3e380205 	cdpcc	2, 3, cr0, cr8, cr5, {0}
    2f9c:	a4030800 	strge	r0, [r3], #-2048	; 0x800
    2fa0:	5619010c 	ldrpl	r0, [r9], -ip, lsl #2
    2fa4:	03024626 	movweq	r4, #9766	; 0x2626
    2fa8:	00010100 	andeq	r0, r1, r0, lsl #2
    2fac:	3e540205 	cdpcc	2, 5, cr0, cr4, cr5, {0}
    2fb0:	d1030800 	tstle	r3, r0, lsl #16
    2fb4:	5619010c 	ldrpl	r0, [r9], -ip, lsl #2
    2fb8:	03024626 	movweq	r4, #9766	; 0x2626
    2fbc:	00010100 	andeq	r0, r1, r0, lsl #2
    2fc0:	3e700205 	cdpcc	2, 7, cr0, cr0, cr5, {0}
    2fc4:	fb030800 	blx	c4fce <_Min_Stack_Size+0xc4bce>
    2fc8:	5619010c 	ldrpl	r0, [r9], -ip, lsl #2
    2fcc:	03024626 	movweq	r4, #9766	; 0x2626
    2fd0:	00010100 	andeq	r0, r1, r0, lsl #2
    2fd4:	3e8c0205 	cdpcc	2, 8, cr0, cr12, cr5, {0}
    2fd8:	98030800 	stmdals	r3, {fp}
    2fdc:	5619010d 	ldrpl	r0, [r9], -sp, lsl #2
    2fe0:	03024626 	movweq	r4, #9766	; 0x2626
    2fe4:	00010100 	andeq	r0, r1, r0, lsl #2
    2fe8:	3ea80205 	cdpcc	2, 10, cr0, cr8, cr5, {0}
    2fec:	b1030800 	tstlt	r3, r0, lsl #16
    2ff0:	5619010d 	ldrpl	r0, [r9], -sp, lsl #2
    2ff4:	03024626 	movweq	r4, #9766	; 0x2626
    2ff8:	00010100 	andeq	r0, r1, r0, lsl #2
    2ffc:	3ec40205 	cdpcc	2, 12, cr0, cr4, cr5, {0}
    3000:	e2030800 	and	r0, r3, #0, 16
    3004:	5618010d 	ldrpl	r0, [r8], -sp, lsl #2
    3008:	03024626 	movweq	r4, #9766	; 0x2626
    300c:	00010100 	andeq	r0, r1, r0, lsl #2
    3010:	3ee00205 	cdpcc	2, 14, cr0, cr0, cr5, {0}
    3014:	8b030800 	blhi	c501c <_Min_Stack_Size+0xc4c1c>
    3018:	5618010e 	ldrpl	r0, [r8], -lr, lsl #2
    301c:	03024626 	movweq	r4, #9766	; 0x2626
    3020:	00010100 	andeq	r0, r1, r0, lsl #2
    3024:	3efc0205 	cdpcc	2, 15, cr0, cr12, cr5, {0}
    3028:	bc030800 	stclt	8, cr0, [r3], {-0}
    302c:	5618010e 	ldrpl	r0, [r8], -lr, lsl #2
    3030:	03024626 	movweq	r4, #9766	; 0x2626
    3034:	00010100 	andeq	r0, r1, r0, lsl #2
    3038:	3f180205 	svccc	0x00180205
    303c:	dc030800 	stcle	8, cr0, [r3], {-0}
    3040:	5618010e 	ldrpl	r0, [r8], -lr, lsl #2
    3044:	03024626 	movweq	r4, #9766	; 0x2626
    3048:	00010100 	andeq	r0, r1, r0, lsl #2
    304c:	3f340205 	svccc	0x00340205
    3050:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    3054:	5618010e 	ldrpl	r0, [r8], -lr, lsl #2
    3058:	03024626 	movweq	r4, #9766	; 0x2626
    305c:	00010100 	andeq	r0, r1, r0, lsl #2
    3060:	3f500205 	svccc	0x00500205
    3064:	ac030800 	stcge	8, cr0, [r3], {-0}
    3068:	5618010f 	ldrpl	r0, [r8], -pc, lsl #2
    306c:	03024626 	movweq	r4, #9766	; 0x2626
    3070:	00010100 	andeq	r0, r1, r0, lsl #2
    3074:	3f6c0205 	svccc	0x006c0205
    3078:	d9030800 	stmdble	r3, {fp}
    307c:	5618010f 	ldrpl	r0, [r8], -pc, lsl #2
    3080:	03024626 	movweq	r4, #9766	; 0x2626
    3084:	00010100 	andeq	r0, r1, r0, lsl #2
    3088:	3f880205 	svccc	0x00880205
    308c:	87030800 	strhi	r0, [r3, -r0, lsl #16]
    3090:	55190110 	ldrpl	r0, [r9, #-272]	; 0x110
    3094:	03024528 	movweq	r4, #9512	; 0x2528
    3098:	00010100 	andeq	r0, r1, r0, lsl #2
    309c:	3fa40205 	svccc	0x00a40205
    30a0:	ac030800 	stcge	8, cr0, [r3], {-0}
    30a4:	09030110 	stmdbeq	r3, {r4, r8}
    30a8:	22322101 	eorscs	r2, r2, #1073741824	; 0x40000000
    30ac:	034a0903 	movteq	r0, #43267	; 0xa903
    30b0:	25322e77 	ldrcs	r2, [r2, #-3703]!	; 0xe77
    30b4:	032e0a03 	teqeq	lr, #12288	; 0x3000
    30b8:	0d033c69 	stceq	12, cr3, [r3, #-420]	; 0xfffffe5c
    30bc:	2e73034a 	cdpcs	3, 7, cr0, cr3, cr10, {2}
    30c0:	03200d03 	teqeq	r0, #3, 26	; 0xc0
    30c4:	03022e0a 	movweq	r2, #11786	; 0x2e0a
    30c8:	00010100 	andeq	r0, r1, r0, lsl #2
    30cc:	3fe00205 	svccc	0x00e00205
    30d0:	d9030800 	stmdble	r3, {fp}
    30d4:	02140110 	andseq	r0, r4, #16, 2
    30d8:	01010009 	tsteq	r1, r9
    30dc:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    30e0:	0308003f 	movweq	r0, #32831	; 0x803f
    30e4:	190110ed 	stmdbne	r1, {r0, r2, r3, r5, r6, r7, ip}
    30e8:	02660a03 	rsbeq	r0, r6, #12288	; 0x3000
    30ec:	01010004 	tsteq	r1, r4
    30f0:	08020500 	stmdaeq	r2, {r8, sl}
    30f4:	03080040 	movweq	r0, #32832	; 0x8040
    30f8:	1801118f 	stmdane	r1, {r0, r1, r2, r3, r7, r8, ip}
    30fc:	01000602 	tsteq	r0, r2, lsl #12
    3100:	0004bd01 	andeq	fp, r4, r1, lsl #26
    3104:	9f000200 	svcls	0x00000200
    3108:	02000001 	andeq	r0, r0, #1
    310c:	0d0efb01 	vstreq	d15, [lr, #-4]
    3110:	01010100 	mrseq	r0, (UNDEF: 17)
    3114:	00000001 	andeq	r0, r0, r1
    3118:	01000001 	tsteq	r0, r1
    311c:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3120:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3014 <_Min_Stack_Size+0x2c14>
    3124:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3128:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    312c:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 301c <_Min_Stack_Size+0x2c1c>
    3130:	61726269 	cmnvs	r2, r9, ror #4
    3134:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3138:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    313c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3140:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    3144:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    3148:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    314c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3150:	2f726576 	svccs	0x00726576
    3154:	00637273 	rsbeq	r7, r3, r3, ror r2
    3158:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    315c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3160:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3164:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3168:	2f62696c 	svccs	0x0062696c
    316c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3170:	00656e69 	rsbeq	r6, r5, r9, ror #28
    3174:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3178:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    317c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3180:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3184:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3188:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    318c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3080 <_Min_Stack_Size+0x2c80>
    3190:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3194:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3198:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3088 <_Min_Stack_Size+0x2c88>
    319c:	61726269 	cmnvs	r2, r9, ror #4
    31a0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    31a4:	534d432f 	movtpl	r4, #54063	; 0xd32f
    31a8:	442f5349 	strtmi	r5, [pc], #-841	; 31b0 <_Min_Stack_Size+0x2db0>
    31ac:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    31b0:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    31b4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    31b8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    31bc:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    31c0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    31c4:	43006564 	movwmi	r6, #1380	; 0x564
    31c8:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    31cc:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    31d0:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    31d4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    31d8:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    31dc:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    31e0:	2f736569 	svccs	0x00736569
    31e4:	334d5453 	movtcc	r5, #54355	; 0xd453
    31e8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    31ec:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    31f0:	72655064 	rsbvc	r5, r5, #100	; 0x64
    31f4:	5f687069 	svcpl	0x00687069
    31f8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    31fc:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3200:	4300636e 	movwmi	r6, #878	; 0x36e
    3204:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3208:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    320c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3210:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3214:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3218:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    321c:	2f736569 	svccs	0x00736569
    3220:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    3224:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    3228:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    322c:	73000065 	movwvc	r0, #101	; 0x65
    3230:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3234:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3238:	6173755f 	cmnvs	r3, pc, asr r5
    323c:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    3240:	00000100 	andeq	r0, r0, r0, lsl #2
    3244:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    3248:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    324c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3250:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3254:	00000200 	andeq	r0, r0, r0, lsl #4
    3258:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    325c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3260:	00000300 	andeq	r0, r0, r0, lsl #6
    3264:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3268:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    326c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3270:	73000004 	movwvc	r0, #4
    3274:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3278:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    327c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    3280:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    3284:	74730000 	ldrbtvc	r0, [r3], #-0
    3288:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    328c:	5f787834 	svcpl	0x00787834
    3290:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    3294:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3298:	63000005 	movwvs	r0, #5
    329c:	5f65726f 	svcpl	0x0065726f
    32a0:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    32a4:	00060068 	andeq	r0, r6, r8, rrx
    32a8:	05000000 	streq	r0, [r0, #-0]
    32ac:	00401402 	subeq	r1, r0, r2, lsl #8
    32b0:	01bb0308 			; <UNDEFINED> instruction: 0x01bb0308
    32b4:	6b6b2401 	blvs	1acc2c0 <_Min_Stack_Size+0x1acbec0>
    32b8:	6b6b6b6b 	blvs	1ade06c <_Min_Stack_Size+0x1addc6c>
    32bc:	3f59766d 	svccc	0x0059766d
    32c0:	2e5a032b 	cdpcs	3, 5, cr0, cr10, cr11, {1}
    32c4:	2e28034b 	cdpcs	3, 2, cr0, cr8, cr11, {2}
    32c8:	322e5803 	eorcc	r5, lr, #196608	; 0x30000
    32cc:	3c230359 	stccc	3, cr0, [r3], #-356	; 0xfffffe9c
    32d0:	322e5d03 	eorcc	r5, lr, #3, 26	; 0xc0
    32d4:	3c1e0359 	ldccc	3, cr0, [lr], {89}	; 0x59
    32d8:	322e6203 	eorcc	r6, lr, #805306368	; 0x30000000
    32dc:	3c190359 	ldccc	3, cr0, [r9], {89}	; 0x59
    32e0:	322e6703 	eorcc	r6, lr, #786432	; 0xc0000
    32e4:	3c140359 	ldccc	3, cr0, [r4], {89}	; 0x59
    32e8:	322e6c03 	eorcc	r6, lr, #768	; 0x300
    32ec:	2e0f034b 	cdpcs	3, 0, cr0, cr15, cr11, {2}
    32f0:	322e7103 	eorcc	r7, lr, #-1073741824	; 0xc0000000
    32f4:	3c0a0359 	stccc	3, cr0, [sl], {89}	; 0x59
    32f8:	022e7603 	eoreq	r7, lr, #3145728	; 0x300000
    32fc:	01010002 	tsteq	r1, r2
    3300:	30020500 	andcc	r0, r2, r0, lsl #10
    3304:	03080041 	movweq	r0, #32833	; 0x8041
    3308:	030101f6 	movweq	r0, #4598	; 0x11f6
    330c:	1c270116 	stfnes	f0, [r7], #-88	; 0xffffffa8
    3310:	033c6703 	teqeq	ip, #786432	; 0xc0000
    3314:	67032019 	smladvs	r3, r9, r0, r2
    3318:	20200320 	eorcs	r0, r0, r0, lsr #6
    331c:	03200c03 	teqeq	r0, #768	; 0x300
    3320:	3a033c54 	bcc	d2478 <_Min_Stack_Size+0xd2078>
    3324:	20660320 	rsbcs	r0, r6, r0, lsr #6
    3328:	03342323 	teqeq	r4, #-1946157056	; 0x8c000000
    332c:	03342e7a 	teqeq	r4, #1952	; 0x7a0
    3330:	0326207a 	teqeq	r6, #122	; 0x7a
    3334:	0a03207a 	beq	cb524 <_Min_Stack_Size+0xcb124>
    3338:	03233120 	teqeq	r3, #32, 2
    333c:	3d034a4a 	vstrcc	s8, [r3, #-296]	; 0xfffffed8
    3340:	0c033220 	sfmeq	f3, 4, [r3], {32}
    3344:	1e1c1c3c 	mrcne	12, 0, r1, cr12, cr12, {1}
    3348:	1cac0a03 	vstmiane	ip!, {s0-s2}
    334c:	0d032332 	stceq	3, cr2, [r3, #-200]	; 0xffffff38
    3350:	20730320 	rsbscs	r0, r3, r0, lsr #6
    3354:	1d6c5a4f 	vstmdbne	ip!, {s11-s89}
    3358:	331d261d 	tstcc	sp, #30408704	; 0x1d00000
    335c:	1c241c32 	stcne	12, cr1, [r4], #-200	; 0xffffff38
    3360:	03322a40 	teqeq	r2, #64, 20	; 0x40000
    3364:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    3368:	022f2420 	eoreq	r2, pc, #32, 8	; 0x20000000
    336c:	01010002 	tsteq	r1, r2
    3370:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    3374:	03080041 	movweq	r0, #32833	; 0x8041
    3378:	150102e7 	strne	r0, [r1, #-743]	; 0x2e7
    337c:	241c321f 	ldrcs	r3, [ip], #-543	; 0x21f
    3380:	2221211d 	eorcs	r2, r1, #1073741831	; 0x40000007
    3384:	01000202 	tsteq	r0, r2, lsl #4
    3388:	02050001 	andeq	r0, r5, #1
    338c:	08004210 	stmdaeq	r0, {r4, r9, lr}
    3390:	0102fb03 	tsteq	r2, r3, lsl #22
    3394:	03201303 	teqeq	r0, #201326592	; 0xc000000
    3398:	09033c77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sl, fp, ip, sp}
    339c:	3c790320 	ldclcc	3, cr0, [r9], #-128	; 0xffffff80
    33a0:	20790335 	rsbscs	r0, r9, r5, lsr r3
    33a4:	20790327 	rsbscs	r0, r9, r7, lsr #6
    33a8:	2f200903 	svccs	0x00200903
    33ac:	01000202 	tsteq	r0, r2, lsl #4
    33b0:	02050001 	andeq	r0, r5, #1
    33b4:	08004234 	stmdaeq	r0, {r2, r4, r5, r9, lr}
    33b8:	01039a03 	tsteq	r3, r3, lsl #20
    33bc:	21212f14 	teqcs	r1, r4, lsl pc
    33c0:	01000202 	tsteq	r0, r2, lsl #4
    33c4:	02050001 	andeq	r0, r5, #1
    33c8:	08004240 	stmdaeq	r0, {r6, r9, lr}
    33cc:	0103ab03 	tsteq	r3, r3, lsl #22
    33d0:	61281d1a 	teqvs	r8, sl, lsl sp
    33d4:	01000502 	tsteq	r0, r2, lsl #10
    33d8:	02050001 	andeq	r0, r5, #1
    33dc:	0800425c 	stmdaeq	r0, {r2, r3, r4, r6, r9, lr}
    33e0:	0103c503 	tsteq	r3, r3, lsl #10
    33e4:	05024c17 	streq	r4, [r2, #-3095]	; 0xc17
    33e8:	00010100 	andeq	r0, r1, r0, lsl #2
    33ec:	42700205 	rsbsmi	r0, r0, #1342177280	; 0x50000000
    33f0:	da030800 	ble	c53f8 <_Min_Stack_Size+0xc4ff8>
    33f4:	1d1a0103 	ldfnes	f0, [sl, #-12]
    33f8:	07024528 	streq	r4, [r2, -r8, lsr #10]
    33fc:	00010100 	andeq	r0, r1, r0, lsl #2
    3400:	428c0205 	addmi	r0, ip, #1342177280	; 0x50000000
    3404:	f4030800 	vst2.8	{d0-d1}, [r3], r0
    3408:	1d1a0103 	ldfnes	f0, [sl, #-12]
    340c:	05026128 	streq	r6, [r2, #-296]	; 0x128
    3410:	00010100 	andeq	r0, r1, r0, lsl #2
    3414:	42a80205 	adcmi	r0, r8, #1342177280	; 0x50000000
    3418:	ad030800 	stcge	8, cr0, [r3, #-0]
    341c:	02180104 	andseq	r0, r8, #4, 2
    3420:	01010004 	tsteq	r1, r4
    3424:	b0020500 	andlt	r0, r2, r0, lsl #10
    3428:	03080042 	movweq	r0, #32834	; 0x8042
    342c:	170104bd 			; <UNDEFINED> instruction: 0x170104bd
    3430:	00030221 	andeq	r0, r3, r1, lsr #4
    3434:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3438:	0042b802 	subeq	fp, r2, r2, lsl #16
    343c:	04f10308 	ldrbteq	r0, [r1], #776	; 0x308
    3440:	02681801 	rsbeq	r1, r8, #65536	; 0x10000
    3444:	01010005 	tsteq	r1, r5
    3448:	d0020500 	andle	r0, r2, r0, lsl #10
    344c:	03080042 	movweq	r0, #32834	; 0x8042
    3450:	1a010585 	bne	44a6c <_Min_Stack_Size+0x4466c>
    3454:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    3458:	01010005 	tsteq	r1, r5
    345c:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    3460:	03080042 	movweq	r0, #32834	; 0x8042
    3464:	170105a0 	strne	r0, [r1, -r0, lsr #11]
    3468:	00050267 	andeq	r0, r5, r7, ror #4
    346c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3470:	00430402 	subeq	r0, r3, r2, lsl #8
    3474:	05e50308 	strbeq	r0, [r5, #776]!	; 0x308
    3478:	02671701 	rsbeq	r1, r7, #262144	; 0x40000
    347c:	01010005 	tsteq	r1, r5
    3480:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    3484:	03080043 	movweq	r0, #32835	; 0x8043
    3488:	1a0105f7 	bne	44c6c <_Min_Stack_Size+0x4486c>
    348c:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    3490:	01010005 	tsteq	r1, r5
    3494:	38020500 	stmdacc	r2, {r8, sl}
    3498:	03080043 	movweq	r0, #32835	; 0x8043
    349c:	1701068f 	strne	r0, [r1, -pc, lsl #13]
    34a0:	01000602 	tsteq	r0, r2, lsl #12
    34a4:	02050001 	andeq	r0, r5, #1
    34a8:	08004344 	stmdaeq	r0, {r2, r6, r8, r9, lr}
    34ac:	0106c403 	tsteq	r6, r3, lsl #8
    34b0:	61281d1a 	teqvs	r8, sl, lsl sp
    34b4:	01000502 	tsteq	r0, r2, lsl #10
    34b8:	02050001 	andeq	r0, r5, #1
    34bc:	08004360 	stmdaeq	r0, {r5, r6, r8, r9, lr}
    34c0:	01079803 	tsteq	r7, r3, lsl #16
    34c4:	06023e17 			; <UNDEFINED> instruction: 0x06023e17
    34c8:	00010100 	andeq	r0, r1, r0, lsl #2
    34cc:	43740205 	cmnmi	r4, #1342177280	; 0x50000000
    34d0:	ab030800 	blge	c54d8 <_Min_Stack_Size+0xc50d8>
    34d4:	1d190107 	ldfnes	f0, [r9, #-28]	; 0xffffffe4
    34d8:	05026128 	streq	r6, [r2, #-296]	; 0x128
    34dc:	00010100 	andeq	r0, r1, r0, lsl #2
    34e0:	43900205 	orrsmi	r0, r0, #1342177280	; 0x50000000
    34e4:	c4030800 	strgt	r0, [r3], #-2048	; 0x800
    34e8:	1d190107 	ldfnes	f0, [r9, #-28]	; 0xffffffe4
    34ec:	05026128 	streq	r6, [r2, #-296]	; 0x128
    34f0:	00010100 	andeq	r0, r1, r0, lsl #2
    34f4:	43ac0205 			; <UNDEFINED> instruction: 0x43ac0205
    34f8:	8b030800 	blhi	c5500 <_Min_Stack_Size+0xc5100>
    34fc:	67170108 	ldrvs	r0, [r7, -r8, lsl #2]
    3500:	01000502 	tsteq	r0, r2, lsl #10
    3504:	02050001 	andeq	r0, r5, #1
    3508:	080043c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, lr}
    350c:	01089d03 	tsteq	r8, r3, lsl #26
    3510:	61281d1a 	teqvs	r8, sl, lsl sp
    3514:	01000502 	tsteq	r0, r2, lsl #10
    3518:	02050001 	andeq	r0, r5, #1
    351c:	080043e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, lr}
    3520:	0108cb03 	tsteq	r8, r3, lsl #22
    3524:	2a010a03 	bcs	45d38 <_Min_Stack_Size+0x45938>
    3528:	03200a03 	teqeq	r0, #12288	; 0x3000
    352c:	03024a7a 	movweq	r4, #10874	; 0x2a7a
    3530:	00010100 	andeq	r0, r1, r0, lsl #2
    3534:	43f40205 	mvnsmi	r0, #1342177280	; 0x50000000
    3538:	cf030800 	svcgt	0x00030800
    353c:	15030109 	strne	r0, [r3, #-265]	; 0x109
    3540:	2e6b0301 	cdpcs	3, 6, cr0, cr11, cr1, {0}
    3544:	32201103 	eorcc	r1, r0, #-1073741824	; 0xc0000000
    3548:	2c321e22 	ldccs	14, cr1, [r2], #-136	; 0xffffff78
    354c:	24322224 	ldrtcs	r2, [r2], #-548	; 0x224
    3550:	033e261e 	teqeq	lr, #31457280	; 0x1e00000
    3554:	02343c7a 	eorseq	r3, r4, #31232	; 0x7a00
    3558:	01010003 	tsteq	r1, r3
    355c:	30020500 	andcc	r0, r2, r0, lsl #10
    3560:	03080044 	movweq	r0, #32836	; 0x8044
    3564:	03010a8f 	movweq	r0, #6799	; 0x1a8f
    3568:	0903010c 	stmdbeq	r3, {r2, r3, r8}
    356c:	0004022e 	andeq	r0, r4, lr, lsr #4
    3570:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3574:	00443c02 	subeq	r3, r4, r2, lsl #24
    3578:	0ac00308 	beq	ff0041a0 <_estack+0xdefd41a0>
    357c:	010b0301 	tsteq	fp, r1, lsl #6
    3580:	01000402 	tsteq	r0, r2, lsl #8
    3584:	02050001 	andeq	r0, r5, #1
    3588:	08004444 	stmdaeq	r0, {r2, r6, sl, lr}
    358c:	010ae203 	tsteq	sl, r3, lsl #4
    3590:	03010e03 	movweq	r0, #7683	; 0x1e03
    3594:	11032e72 	tstne	r3, r2, ror lr
    3598:	301e3e20 	andscc	r3, lr, r0, lsr #28
    359c:	41322224 	teqmi	r2, r4, lsr #4
    35a0:	03214b1f 	teqeq	r1, #31744	; 0x7c00
    35a4:	68034a0a 	stmdavs	r3, {r1, r3, r9, fp, lr}
    35a8:	00040274 	andeq	r0, r4, r4, ror r2
    35ac:	05000101 	streq	r0, [r0, #-257]	; 0x101
    35b0:	00449002 	subeq	r9, r4, r2
    35b4:	0bac0308 	bleq	feb041dc <_estack+0xdead41dc>
    35b8:	010d0301 	tsteq	sp, r1, lsl #6
    35bc:	0004024b 	andeq	r0, r4, fp, asr #4
    35c0:	02190101 	andseq	r0, r9, #1073741824	; 0x40000000
    35c4:	00020000 	andeq	r0, r2, r0
    35c8:	0000018b 	andeq	r0, r0, fp, lsl #3
    35cc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    35d0:	0101000d 	tsteq	r1, sp
    35d4:	00000101 	andeq	r0, r0, r1, lsl #2
    35d8:	00000100 	andeq	r0, r0, r0, lsl #2
    35dc:	524f4301 	subpl	r4, pc, #67108864	; 0x4000000
    35e0:	5f584554 	svcpl	0x00584554
    35e4:	5f46344d 	svcpl	0x0046344d
    35e8:	334d5453 	movtcc	r5, #54355	; 0xd453
    35ec:	2f344632 	svccs	0x00344632
    35f0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    35f4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    35f8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    35fc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3600:	5f787834 	svcpl	0x00787834
    3604:	50647453 	rsbpl	r7, r4, r3, asr r4
    3608:	70697265 	rsbvc	r7, r9, r5, ror #4
    360c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    3610:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3614:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3618:	73752f00 	cmnvc	r5, #0, 30
    361c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3620:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3624:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    3628:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    362c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    3630:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    3634:	73752f00 	cmnvc	r5, #0, 30
    3638:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    363c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3640:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    3644:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3648:	524f4300 	subpl	r4, pc, #0, 6
    364c:	5f584554 	svcpl	0x00584554
    3650:	5f46344d 	svcpl	0x0046344d
    3654:	334d5453 	movtcc	r5, #54355	; 0xd453
    3658:	2f344632 	svccs	0x00344632
    365c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3660:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3664:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    3668:	2f534953 	svccs	0x00534953
    366c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3670:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    3674:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    3678:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    367c:	2f787834 	svccs	0x00787834
    3680:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    3684:	00656475 	rsbeq	r6, r5, r5, ror r4
    3688:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    368c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3580 <_Min_Stack_Size+0x3180>
    3690:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3694:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3698:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3588 <_Min_Stack_Size+0x3188>
    369c:	61726269 	cmnvs	r2, r9, ror #4
    36a0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    36a4:	534d432f 	movtpl	r4, #54063	; 0xd32f
    36a8:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    36ac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    36b0:	43006564 	movwmi	r6, #1380	; 0x564
    36b4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    36b8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    36bc:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    36c0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    36c4:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    36c8:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    36cc:	2f736569 	svccs	0x00736569
    36d0:	334d5453 	movtcc	r5, #54355	; 0xd453
    36d4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    36d8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    36dc:	72655064 	rsbvc	r5, r5, #100	; 0x64
    36e0:	5f687069 	svcpl	0x00687069
    36e4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    36e8:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    36ec:	0000636e 	andeq	r6, r0, lr, ror #6
    36f0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    36f4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    36f8:	79735f78 	ldmdbvc	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    36fc:	67666373 			; <UNDEFINED> instruction: 0x67666373
    3700:	0100632e 	tsteq	r0, lr, lsr #6
    3704:	645f0000 	ldrbvs	r0, [pc], #-0	; 370c <_Min_Stack_Size+0x330c>
    3708:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    370c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 3714 <_Min_Stack_Size+0x3314>
    3710:	73657079 	cmnvc	r5, #121	; 0x79
    3714:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3718:	74730000 	ldrbtvc	r0, [r3], #-0
    371c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    3720:	0300682e 	movweq	r6, #2094	; 0x82e
    3724:	74730000 	ldrbtvc	r0, [r3], #-0
    3728:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    372c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    3730:	00040068 	andeq	r0, r4, r8, rrx
    3734:	726f6300 	rsbvc	r6, pc, #0, 6
    3738:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    373c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    3740:	73000005 	movwvc	r0, #5
    3744:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3748:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    374c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    3750:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3754:	00000000 	andeq	r0, r0, r0
    3758:	44a00205 	strtmi	r0, [r0], #517	; 0x205
    375c:	e4030800 	str	r0, [r3], #-2048	; 0x800
    3760:	59210100 	stmdbpl	r1!, {r8}
    3764:	02022d3d 	andeq	r2, r2, #3904	; 0xf40
    3768:	00010100 	andeq	r0, r1, r0, lsl #2
    376c:	44bc0205 	ldrtmi	r0, [ip], #517	; 0x205
    3770:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    3774:	02160100 	andseq	r0, r6, #0, 2
    3778:	01010006 	tsteq	r1, r6
    377c:	c8020500 	stmdagt	r2, {r8, sl}
    3780:	03080044 	movweq	r0, #32836	; 0x8044
    3784:	1601018b 	strne	r0, [r1], -fp, lsl #3
    3788:	01000502 	tsteq	r0, r2, lsl #10
    378c:	02050001 	andeq	r0, r5, #1
    3790:	080044d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, lr}
    3794:	0101a203 	tsteq	r1, r3, lsl #4
    3798:	2e79036d 	cdpcs	3, 7, cr0, cr9, cr13, {3}
    379c:	2f1f2127 	svccs	0x001f2127
    37a0:	3d2d213d 	stfccs	f2, [sp, #-244]!	; 0xffffff0c
    37a4:	01000102 	tsteq	r0, r2, lsl #2
    37a8:	02050001 	andeq	r0, r5, #1
    37ac:	08004504 	stmdaeq	r0, {r2, r8, sl, lr}
    37b0:	0101b703 	tsteq	r1, r3, lsl #14
    37b4:	00050215 	andeq	r0, r5, r5, lsl r2
    37b8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    37bc:	00451002 	subeq	r1, r5, r2
    37c0:	01c80308 	biceq	r0, r8, r8, lsl #6
    37c4:	06021601 	streq	r1, [r2], -r1, lsl #12
    37c8:	00010100 	andeq	r0, r1, r0, lsl #2
    37cc:	451c0205 	ldrmi	r0, [ip, #-517]	; 0x205
    37d0:	d5030800 	strle	r0, [r3, #-2048]	; 0x800
    37d4:	03150101 	tsteq	r5, #1073741824	; 0x40000000
    37d8:	03025809 	movweq	r5, #10249	; 0x2809
    37dc:	0e010100 	adfeqs	f0, f1, f0
    37e0:	02000005 	andeq	r0, r0, #5
    37e4:	00019b00 	andeq	r9, r1, r0, lsl #22
    37e8:	fb010200 	blx	43ff2 <_Min_Stack_Size+0x43bf2>
    37ec:	01000d0e 	tsteq	r0, lr, lsl #26
    37f0:	00010101 	andeq	r0, r1, r1, lsl #2
    37f4:	00010000 	andeq	r0, r1, r0
    37f8:	4f430100 	svcmi	0x00430100
    37fc:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3800:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3804:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3808:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    380c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3810:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3814:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3818:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    381c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3820:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    3824:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3828:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3830 <_Min_Stack_Size+0x3430>
    382c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3830:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    3834:	752f0063 	strvc	r0, [pc, #-99]!	; 37d9 <_Min_Stack_Size+0x33d9>
    3838:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    383c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3840:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3844:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3848:	616d2f62 	cmnvs	sp, r2, ror #30
    384c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3850:	752f0065 	strvc	r0, [pc, #-101]!	; 37f3 <_Min_Stack_Size+0x33f3>
    3854:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3858:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    385c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3860:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3864:	4f430062 	svcmi	0x00430062
    3868:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    386c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3870:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3874:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3878:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    387c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3880:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    3884:	5349534d 	movtpl	r5, #37709	; 0x934d
    3888:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    388c:	2f656369 	svccs	0x00656369
    3890:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    3894:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3898:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    389c:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    38a0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    38a4:	524f4300 	subpl	r4, pc, #0, 6
    38a8:	5f584554 	svcpl	0x00584554
    38ac:	5f46344d 	svcpl	0x0046344d
    38b0:	334d5453 	movtcc	r5, #54355	; 0xd453
    38b4:	2f344632 	svccs	0x00344632
    38b8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    38bc:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    38c0:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    38c4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    38c8:	5f787834 	svcpl	0x00787834
    38cc:	50647453 	rsbpl	r7, r4, r3, asr r4
    38d0:	70697265 	rsbvc	r7, r9, r5, ror #4
    38d4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    38d8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    38dc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    38e0:	524f4300 	subpl	r4, pc, #0, 6
    38e4:	5f584554 	svcpl	0x00584554
    38e8:	5f46344d 	svcpl	0x0046344d
    38ec:	334d5453 	movtcc	r5, #54355	; 0xd453
    38f0:	2f344632 	svccs	0x00344632
    38f4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    38f8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    38fc:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    3900:	2f534953 	svccs	0x00534953
    3904:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    3908:	00656475 	rsbeq	r6, r5, r5, ror r4
    390c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3910:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3914:	695f7878 	ldmdbvs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    3918:	632e6332 	teqvs	lr, #-939524096	; 0xc8000000
    391c:	00000100 	andeq	r0, r0, r0, lsl #2
    3920:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    3924:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    3928:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    392c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3930:	00000200 	andeq	r0, r0, r0, lsl #4
    3934:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3938:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    393c:	00000300 	andeq	r0, r0, r0, lsl #6
    3940:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3944:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3948:	00682e78 	rsbeq	r2, r8, r8, ror lr
    394c:	73000004 	movwvc	r0, #4
    3950:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3954:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3958:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    395c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    3960:	74730000 	ldrbtvc	r0, [r3], #-0
    3964:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3968:	5f787834 	svcpl	0x00787834
    396c:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    3970:	00050068 	andeq	r0, r5, r8, rrx
    3974:	726f6300 	rsbvc	r6, pc, #0, 6
    3978:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    397c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    3980:	00000006 	andeq	r0, r0, r6
    3984:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    3988:	03080045 	movweq	r0, #32837	; 0x8045
    398c:	24010189 	strcs	r0, [r1], #-393	; 0x189
    3990:	6609036d 	strvs	r0, [r9], -sp, ror #6
    3994:	2b3f5a77 	blcs	fda378 <_Min_Stack_Size+0xfd9f78>
    3998:	5a2e6e03 	bpl	b9f1ac <_Min_Stack_Size+0xb9edac>
    399c:	033c1303 	teqeq	ip, #201326592	; 0xc000000
    39a0:	5a332e6d 	bpl	ccf35c <_Min_Stack_Size+0xccef5c>
    39a4:	033c0c03 	teqeq	ip, #768	; 0x300
    39a8:	02022e74 	andeq	r2, r2, #116, 28	; 0x740
    39ac:	00010100 	andeq	r0, r1, r0, lsl #2
    39b0:	459c0205 	ldrmi	r0, [ip, #517]	; 0x205
    39b4:	b4030800 	strlt	r0, [r3], #-2048	; 0x800
    39b8:	14030101 	strne	r0, [r3], #-257	; 0x101
    39bc:	206c033c 	rsbcs	r0, ip, ip, lsr r3
    39c0:	24201003 	strtcs	r1, [r0], #-3
    39c4:	0f032c31 	svceq	0x00032c31
    39c8:	20730320 	rsbscs	r0, r3, r0, lsr #6
    39cc:	331b3345 	tstcc	fp, #335544321	; 0x14000001
    39d0:	2624302f 	strtcs	r3, [r4], -pc, lsr #32
    39d4:	422e7a03 	eormi	r7, lr, #12288	; 0x3000
    39d8:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
    39dc:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    39e0:	4a0a0323 	bmi	284674 <_Min_Stack_Size+0x284274>
    39e4:	21034129 	tstcs	r3, r9, lsr #2
    39e8:	0a03222e 	beq	cc2a8 <_Min_Stack_Size+0xcbea8>
    39ec:	70033420 	andvc	r3, r3, r0, lsr #8
    39f0:	5c224e2e 	stcpl	14, cr4, [r2], #-184	; 0xffffff48
    39f4:	0326241c 	teqeq	r6, #28, 8	; 0x1c000000
    39f8:	1c26207a 	stcne	0, cr2, [r6], #-488	; 0xfffffe18
    39fc:	53032124 	movwpl	r2, #12580	; 0x3124
    3a00:	5d6f522e 	sfmpl	f5, 2, [pc, #-184]!	; 3950 <_Min_Stack_Size+0x3550>
    3a04:	3f32271b 	svccc	0x0032271b
    3a08:	0230b833 	eorseq	fp, r0, #3342336	; 0x330000
    3a0c:	01010002 	tsteq	r1, r2
    3a10:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    3a14:	03080046 	movweq	r0, #32838	; 0x8046
    3a18:	170102a1 	strne	r0, [r1, -r1, lsr #5]
    3a1c:	032a271b 	teqeq	sl, #7077888	; 0x6c0000
    3a20:	76032e0a 	strvc	r2, [r3], -sl, lsl #28
    3a24:	0326242e 	teqeq	r6, #771751936	; 0x2e000000
    3a28:	22242078 	eorcs	r2, r4, #120	; 0x78
    3a2c:	00030223 	andeq	r0, r3, r3, lsr #4
    3a30:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3a34:	0046a802 	subeq	sl, r6, r2, lsl #16
    3a38:	02b90308 	adcseq	r0, r9, #8, 6	; 0x20000000
    3a3c:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    3a40:	00050261 	andeq	r0, r5, r1, ror #4
    3a44:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3a48:	0046c402 	subeq	ip, r6, r2, lsl #8
    3a4c:	02d60308 	sbcseq	r0, r6, #8, 6	; 0x20000000
    3a50:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    3a54:	00060253 	andeq	r0, r6, r3, asr r2
    3a58:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3a5c:	0046e002 	subeq	lr, r6, r2
    3a60:	02f30308 	rscseq	r0, r3, #8, 6	; 0x20000000
    3a64:	3f231a01 	svccc	0x00231a01
    3a68:	0223232b 	eoreq	r2, r3, #-1409286144	; 0xac000000
    3a6c:	01010002 	tsteq	r1, r2
    3a70:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    3a74:	03080046 	movweq	r0, #32838	; 0x8046
    3a78:	1901038f 	stmdbne	r1, {r0, r1, r2, r3, r7, r8, r9}
    3a7c:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    3a80:	01010005 	tsteq	r1, r5
    3a84:	10020500 	andne	r0, r2, r0, lsl #10
    3a88:	03080047 	movweq	r0, #32839	; 0x8047
    3a8c:	190103a7 	stmdbne	r1, {r0, r1, r2, r5, r7, r8, r9}
    3a90:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    3a94:	01010005 	tsteq	r1, r5
    3a98:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    3a9c:	03080047 	movweq	r0, #32839	; 0x8047
    3aa0:	170103c3 	strne	r0, [r1, -r3, asr #7]
    3aa4:	78033128 	stmdavc	r3, {r3, r5, r8, ip, sp}
    3aa8:	0202362e 	andeq	r3, r2, #48234496	; 0x2e00000
    3aac:	00010100 	andeq	r0, r1, r0, lsl #2
    3ab0:	47400205 	strbmi	r0, [r0, -r5, lsl #4]
    3ab4:	de030800 	cdple	8, 0, cr0, cr3, cr0, {0}
    3ab8:	1d190103 	ldfnes	f0, [r9, #-12]
    3abc:	05026128 	streq	r6, [r2, #-296]	; 0x128
    3ac0:	00010100 	andeq	r0, r1, r0, lsl #2
    3ac4:	475c0205 	ldrbmi	r0, [ip, -r5, lsl #4]
    3ac8:	f5030800 			; <UNDEFINED> instruction: 0xf5030800
    3acc:	23190103 	tstcs	r9, #-1073741824	; 0xc0000000
    3ad0:	23232b3f 	teqcs	r3, #64512	; 0xfc00
    3ad4:	01000202 	tsteq	r0, r2, lsl #4
    3ad8:	02050001 	andeq	r0, r5, #1
    3adc:	08004770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, lr}
    3ae0:	01049003 	tsteq	r4, r3
    3ae4:	61281d19 	teqvs	r8, r9, lsl sp
    3ae8:	01000502 	tsteq	r0, r2, lsl #10
    3aec:	02050001 	andeq	r0, r5, #1
    3af0:	0800478c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, lr}
    3af4:	0104a803 	tsteq	r4, r3, lsl #16
    3af8:	61281d19 	teqvs	r8, r9, lsl sp
    3afc:	01000502 	tsteq	r0, r2, lsl #10
    3b00:	02050001 	andeq	r0, r5, #1
    3b04:	080047a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, lr}
    3b08:	0104c203 	tsteq	r4, r3, lsl #4
    3b0c:	45281d19 	strmi	r1, [r8, #-3353]!	; 0xd19
    3b10:	01000702 	tsteq	r0, r2, lsl #14
    3b14:	02050001 	andeq	r0, r5, #1
    3b18:	080047c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, lr}
    3b1c:	0104da03 	tsteq	r4, r3, lsl #20
    3b20:	61281d19 	teqvs	r8, r9, lsl sp
    3b24:	01000502 	tsteq	r0, r2, lsl #10
    3b28:	02050001 	andeq	r0, r5, #1
    3b2c:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
    3b30:	0104f403 	tsteq	r4, r3, lsl #8
    3b34:	4f311d19 	svcmi	0x00311d19
    3b38:	0502251b 	streq	r2, [r2, #-1307]	; 0x51b
    3b3c:	00010100 	andeq	r0, r1, r0, lsl #2
    3b40:	47fc0205 	ldrbmi	r0, [ip, r5, lsl #4]!
    3b44:	9a030800 	bls	c5b4c <_Min_Stack_Size+0xc574c>
    3b48:	09030105 	stmdbeq	r3, {r0, r2, r8}
    3b4c:	37361d01 	ldrcc	r1, [r6, -r1, lsl #26]!
    3b50:	02331b25 	eorseq	r1, r3, #37888	; 0x9400
    3b54:	01010004 	tsteq	r1, r4
    3b58:	18020500 	stmdane	r2, {r8, sl}
    3b5c:	03080048 	movweq	r0, #32840	; 0x8048
    3b60:	190105b6 	stmdbne	r1, {r1, r2, r4, r5, r7, r8, sl}
    3b64:	2537361d 	ldrcs	r3, [r7, #-1565]!	; 0x61d
    3b68:	0402331b 	streq	r3, [r2], #-795	; 0x31b
    3b6c:	00010100 	andeq	r0, r1, r0, lsl #2
    3b70:	48340205 	ldmdami	r4!, {r0, r2, r9}
    3b74:	ce030800 	cdpgt	8, 0, cr0, cr3, cr0, {0}
    3b78:	1d190105 	ldfnes	f0, [r9, #-20]	; 0xffffffec
    3b7c:	05026128 	streq	r6, [r2, #-296]	; 0x128
    3b80:	00010100 	andeq	r0, r1, r0, lsl #2
    3b84:	48500205 	ldmdami	r0, {r0, r2, r9}^
    3b88:	f4030800 	vst2.8	{d0-d1}, [r3], r0
    3b8c:	02160105 	andseq	r0, r6, #1073741825	; 0x40000001
    3b90:	01010002 	tsteq	r1, r2
    3b94:	54020500 	strpl	r0, [r2], #-1280	; 0x500
    3b98:	03080048 	movweq	r0, #32840	; 0x8048
    3b9c:	16010681 	strne	r0, [r1], -r1, lsl #13
    3ba0:	00020221 	andeq	r0, r2, r1, lsr #4
    3ba4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3ba8:	00485c02 	subeq	r5, r8, r2, lsl #24
    3bac:	06a00308 	strteq	r0, [r0], r8, lsl #6
    3bb0:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    3bb4:	00050261 	andeq	r0, r5, r1, ror #4
    3bb8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3bbc:	00487802 	subeq	r7, r8, r2, lsl #16
    3bc0:	06bf0308 	ldrteq	r0, [pc], r8, lsl #6
    3bc4:	361d1901 	ldrcc	r1, [sp], -r1, lsl #18
    3bc8:	331b2537 	tstcc	fp, #230686720	; 0xdc00000
    3bcc:	01000402 	tsteq	r0, r2, lsl #8
    3bd0:	02050001 	andeq	r0, r5, #1
    3bd4:	08004894 	stmdaeq	r0, {r2, r4, r7, fp, lr}
    3bd8:	0106d703 	tsteq	r6, r3, lsl #14
    3bdc:	61281d19 	teqvs	r8, r9, lsl sp
    3be0:	01000502 	tsteq	r0, r2, lsl #10
    3be4:	02050001 	andeq	r0, r5, #1
    3be8:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
    3bec:	0106ed03 	tsteq	r6, r3, lsl #26
    3bf0:	03022116 	movweq	r2, #8470	; 0x2116
    3bf4:	00010100 	andeq	r0, r1, r0, lsl #2
    3bf8:	48b80205 	ldmmi	r8!, {r0, r2, r9}
    3bfc:	8e030800 	cdphi	8, 0, cr0, cr3, cr0, {0}
    3c00:	1d190107 	ldfnes	f0, [r9, #-28]	; 0xffffffe4
    3c04:	05026128 	streq	r6, [r2, #-296]	; 0x128
    3c08:	00010100 	andeq	r0, r1, r0, lsl #2
    3c0c:	48d40205 	ldmmi	r4, {r0, r2, r9}^
    3c10:	a6030800 	strge	r0, [r3], -r0, lsl #16
    3c14:	1d190107 	ldfnes	f0, [r9, #-28]	; 0xffffffe4
    3c18:	05026128 	streq	r6, [r2, #-296]	; 0x128
    3c1c:	00010100 	andeq	r0, r1, r0, lsl #2
    3c20:	48f00205 	ldmmi	r0!, {r0, r2, r9}^
    3c24:	b0030800 	andlt	r0, r3, r0, lsl #16
    3c28:	34210108 	strtcc	r0, [r1], #-264	; 0x108
    3c2c:	022f3f21 	eoreq	r3, pc, #33, 30	; 0x84
    3c30:	01010003 	tsteq	r1, r3
    3c34:	08020500 	stmdaeq	r2, {r8, sl}
    3c38:	03080049 	movweq	r0, #32841	; 0x8049
    3c3c:	030108cb 	movweq	r0, #6347	; 0x18cb
    3c40:	282b0109 	stmdacs	fp!, {r0, r3, r8}
    3c44:	00030245 	andeq	r0, r3, r5, asr #4
    3c48:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3c4c:	00491c02 	subeq	r1, r9, r2, lsl #24
    3c50:	09860308 	stmibeq	r6, {r3, r8, r9}
    3c54:	010a0301 	tsteq	sl, r1, lsl #6
    3c58:	4d251f21 	stcmi	15, cr1, [r5, #-132]!	; 0xffffff7c
    3c5c:	02200c03 	eoreq	r0, r0, #768	; 0x300
    3c60:	01010004 	tsteq	r1, r4
    3c64:	34020500 	strcc	r0, [r2], #-1280	; 0x500
    3c68:	03080049 	movweq	r0, #32841	; 0x8049
    3c6c:	1a0109b6 	bne	4634c <_Min_Stack_Size+0x45f4c>
    3c70:	32251f21 	eorcc	r1, r5, #33, 30	; 0x84
    3c74:	01000302 	tsteq	r0, r2, lsl #6
    3c78:	02050001 	andeq	r0, r5, #1
    3c7c:	08004944 	stmdaeq	r0, {r2, r6, r8, fp, lr}
    3c80:	0109ed03 	tsteq	r9, r3, lsl #26
    3c84:	200a0322 	andcs	r0, sl, r2, lsr #6
    3c88:	35207603 	strcc	r7, [r0, #-1539]!	; 0x603
    3c8c:	301e2523 	andscc	r2, lr, r3, lsr #10
    3c90:	3c0a0323 	stccc	3, cr0, [sl], {35}	; 0x23
    3c94:	033c0d03 	teqeq	ip, #3, 26	; 0xc0
    3c98:	222c5870 	eorcs	r5, ip, #112, 16	; 0x700000
    3c9c:	01000202 	tsteq	r0, r2, lsl #4
    3ca0:	02050001 	andeq	r0, r5, #1
    3ca4:	0800497c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, lr}
    3ca8:	010aba03 	tsteq	sl, r3, lsl #20
    3cac:	0004021a 	andeq	r0, r4, sl, lsl r2
    3cb0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3cb4:	00498402 	subeq	r8, r9, r2, lsl #8
    3cb8:	0adc0308 	beq	ff7048e0 <_estack+0xdf6d48e0>
    3cbc:	01090301 	tsteq	r9, r1, lsl #6
    3cc0:	3c7a0326 	ldclcc	3, cr0, [sl], #-152	; 0xffffff68
    3cc4:	04020026 	streq	r0, [r2], #-38	; 0x26
    3cc8:	207a0301 	rsbscs	r0, sl, r1, lsl #6
    3ccc:	01040200 	mrseq	r0, R12_usr
    3cd0:	04020034 	streq	r0, [r2], #-52	; 0x34
    3cd4:	09033101 	stmdbeq	r3, {r0, r8, ip, sp}
    3cd8:	0001023c 	andeq	r0, r1, ip, lsr r2
    3cdc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3ce0:	0049a002 	subeq	sl, r9, r2
    3ce4:	0b980308 	bleq	fe60490c <_estack+0xde5d490c>
    3ce8:	010a0301 	tsteq	sl, r1, lsl #6
    3cec:	01000402 	tsteq	r0, r2, lsl #8
    3cf0:	0003fa01 	andeq	pc, r3, r1, lsl #20
    3cf4:	88000200 	stmdahi	r0, {r9}
    3cf8:	02000001 	andeq	r0, r0, #1
    3cfc:	0d0efb01 	vstreq	d15, [lr, #-4]
    3d00:	01010100 	mrseq	r0, (UNDEF: 17)
    3d04:	00000001 	andeq	r0, r0, r1
    3d08:	01000001 	tsteq	r0, r1
    3d0c:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3d10:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3c04 <_Min_Stack_Size+0x3804>
    3d14:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3d18:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3d1c:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3c0c <_Min_Stack_Size+0x380c>
    3d20:	61726269 	cmnvs	r2, r9, ror #4
    3d24:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3d28:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3d2c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3d30:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    3d34:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    3d38:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3d3c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3d40:	2f726576 	svccs	0x00726576
    3d44:	00637273 	rsbeq	r7, r3, r3, ror r2
    3d48:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3d4c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3d50:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3d54:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3d58:	2f62696c 	svccs	0x0062696c
    3d5c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3d60:	00656e69 	rsbeq	r6, r5, r9, ror #28
    3d64:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3d68:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3d6c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3d70:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3d74:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3d78:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3d7c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3c70 <_Min_Stack_Size+0x3870>
    3d80:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3d84:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3d88:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3c78 <_Min_Stack_Size+0x3878>
    3d8c:	61726269 	cmnvs	r2, r9, ror #4
    3d90:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3d94:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3d98:	442f5349 	strtmi	r5, [pc], #-841	; 3da0 <_Min_Stack_Size+0x39a0>
    3d9c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3da0:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    3da4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3da8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3dac:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    3db0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3db4:	43006564 	movwmi	r6, #1380	; 0x564
    3db8:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3dbc:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3dc0:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3dc4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3dc8:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3dcc:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3dd0:	2f736569 	svccs	0x00736569
    3dd4:	334d5453 	movtcc	r5, #54355	; 0xd453
    3dd8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    3ddc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    3de0:	72655064 	rsbvc	r5, r5, #100	; 0x64
    3de4:	5f687069 	svcpl	0x00687069
    3de8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3dec:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3df0:	4300636e 	movwmi	r6, #878	; 0x36e
    3df4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3df8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3dfc:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3e00:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3e04:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3e08:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3e0c:	2f736569 	svccs	0x00736569
    3e10:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    3e14:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    3e18:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3e1c:	73000065 	movwvc	r0, #101	; 0x65
    3e20:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3e24:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3e28:	616d645f 	cmnvs	sp, pc, asr r4
    3e2c:	0100632e 	tsteq	r0, lr, lsr #6
    3e30:	645f0000 	ldrbvs	r0, [pc], #-0	; 3e38 <_Min_Stack_Size+0x3a38>
    3e34:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    3e38:	745f746c 	ldrbvc	r7, [pc], #-1132	; 3e40 <_Min_Stack_Size+0x3a40>
    3e3c:	73657079 	cmnvc	r5, #121	; 0x79
    3e40:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3e44:	74730000 	ldrbtvc	r0, [r3], #-0
    3e48:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    3e4c:	0300682e 	movweq	r6, #2094	; 0x82e
    3e50:	74730000 	ldrbtvc	r0, [r3], #-0
    3e54:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3e58:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    3e5c:	00040068 	andeq	r0, r4, r8, rrx
    3e60:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3e64:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3e68:	645f7878 	ldrbvs	r7, [pc], #-2168	; 3e70 <_Min_Stack_Size+0x3a70>
    3e6c:	682e616d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sp, lr}
    3e70:	00000500 	andeq	r0, r0, r0, lsl #10
    3e74:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    3e78:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    3e7c:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3e80:	00000000 	andeq	r0, r0, r0
    3e84:	49a80205 	stmibmi	r8!, {r0, r2, r9}
    3e88:	c4030800 	strgt	r0, [r3], #-2048	; 0x800
    3e8c:	1a030101 	bne	c4298 <_Min_Stack_Size+0xc3e98>
    3e90:	2e6b0320 	cdpcs	3, 6, cr0, cr11, cr0, {1}
    3e94:	03201503 	teqeq	r0, #12582912	; 0xc00000
    3e98:	12032e6e 	andne	r2, r3, #1760	; 0x6e0
    3e9c:	206b0320 	rsbcs	r0, fp, r0, lsr #6
    3ea0:	2323233f 	teqcs	r3, #-67108864	; 0xfc000000
    3ea4:	20090323 	andcs	r0, r9, r3, lsr #6
    3ea8:	34587a03 	ldrbcc	r7, [r8], #-2563	; 0xa03
    3eac:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
    3eb0:	7f5b332b 	svcvc	0x005b332b
    3eb4:	337f5b33 	cmncc	pc, #52224	; 0xcc00
    3eb8:	6b257f5b 	blvs	963c2c <_Min_Stack_Size+0x96382c>
    3ebc:	7f5b6b6b 	svcvc	0x005b6b6b
    3ec0:	25715b25 	ldrbcs	r5, [r1, #-2853]!	; 0xb25
    3ec4:	5b257f5b 	blpl	963c38 <_Min_Stack_Size+0x963838>
    3ec8:	7f5b257f 	svcvc	0x005b257f
    3ecc:	6d6b6b25 	fstmdbxvs	fp!, {d22-d39}	;@ Deprecated
    3ed0:	4e03855b 	cfrshl32mi	mvfx3, mvfx11, r8
    3ed4:	9076033c 	rsbsls	r0, r6, ip, lsr r3
    3ed8:	9e230395 	mcrls	3, 1, r0, cr3, cr5, {4}
    3edc:	0902a395 	stmdbeq	r2, {r0, r2, r4, r7, r8, r9, sp, pc}
    3ee0:	00010100 	andeq	r0, r1, r0, lsl #2
    3ee4:	4ba00205 	blmi	fe804700 <_estack+0xde7d4700>
    3ee8:	bf030800 	svclt	0x00030800
    3eec:	28030102 	stmdacs	r3, {r1, r8}
    3ef0:	2e6d0301 	cdpcs	3, 6, cr0, cr13, cr1, {0}
    3ef4:	032e6b03 	teqeq	lr, #3072	; 0xc00
    3ef8:	2f212e28 	svccs	0x00212e28
    3efc:	03214b1e 	teqeq	r1, #30720	; 0x7800
    3f00:	6e032011 	mcrvs	0, 0, r2, cr3, cr1, {0}
    3f04:	4b3d2120 	blmi	f4c38c <_Min_Stack_Size+0xf4bf8c>
    3f08:	03206c03 	teqeq	r0, #768	; 0x300
    3f0c:	6d032e13 	stcvs	14, cr2, [r3, #-76]	; 0xffffffb4
    3f10:	2e140320 	cdpcs	3, 1, cr0, cr4, cr0, {1}
    3f14:	03206c03 	teqeq	r0, #768	; 0x300
    3f18:	24272e10 	strtcs	r2, [r7], #-3600	; 0xe10
    3f1c:	24242728 	strtcs	r2, [r4], #-1832	; 0x728
    3f20:	33206c03 	teqcc	r0, #768	; 0x300
    3f24:	2524243f 	strcs	r2, [r4, #-1087]!	; 0x43f
    3f28:	0102212d 	tsteq	r2, sp, lsr #2
    3f2c:	00010100 	andeq	r0, r1, r0, lsl #2
    3f30:	4c0c0205 	sfmmi	f0, 4, [ip], {5}
    3f34:	93030800 	movwls	r0, #14336	; 0x3800
    3f38:	31150103 	tstcc	r5, r3, lsl #2
    3f3c:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    3f40:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    3f44:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    3f48:	00020223 	andeq	r0, r2, r3, lsr #4
    3f4c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3f50:	004c3002 	subeq	r3, ip, r2
    3f54:	03de0308 	bicseq	r0, lr, #8, 6	; 0x20000000
    3f58:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    3f5c:	00040245 	andeq	r0, r4, r5, asr #4
    3f60:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3f64:	004c4402 	subeq	r4, ip, r2, lsl #8
    3f68:	04820308 	streq	r0, [r2], #776	; 0x308
    3f6c:	01090301 	tsteq	r9, r1, lsl #6
    3f70:	0245281d 	subeq	r2, r5, #1900544	; 0x1d0000
    3f74:	01010004 	tsteq	r1, r4
    3f78:	58020500 	stmdapl	r2, {r8, sl}
    3f7c:	0308004c 	movweq	r0, #32844	; 0x804c
    3f80:	030104a6 	movweq	r0, #5286	; 0x14a6
    3f84:	281d0109 	ldmdacs	sp, {r0, r3, r8}
    3f88:	00040245 	andeq	r0, r4, r5, asr #4
    3f8c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3f90:	004c6c02 	subeq	r6, ip, r2, lsl #24
    3f94:	04f80308 	ldrbteq	r0, [r8], #776	; 0x308
    3f98:	02021701 	andeq	r1, r2, #262144	; 0x40000
    3f9c:	00010100 	andeq	r0, r1, r0, lsl #2
    3fa0:	4c700205 	lfmmi	f0, 2, [r0], #-20	; 0xffffffec
    3fa4:	87030800 	strhi	r0, [r3, -r0, lsl #16]
    3fa8:	21170105 	tstcs	r7, r5, lsl #2
    3fac:	01000202 	tsteq	r0, r2, lsl #4
    3fb0:	02050001 	andeq	r0, r5, #1
    3fb4:	08004c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp, lr}
    3fb8:	0105db03 	tsteq	r5, r3, lsl #22
    3fbc:	40281d1a 	eormi	r1, r8, sl, lsl sp
    3fc0:	032e7703 	teqeq	lr, #786432	; 0xc0000
    3fc4:	02023c09 	andeq	r3, r2, #2304	; 0x900
    3fc8:	00010100 	andeq	r0, r1, r0, lsl #2
    3fcc:	4c900205 	lfmmi	f0, 4, [r0], {5}
    3fd0:	f9030800 			; <UNDEFINED> instruction: 0xf9030800
    3fd4:	09030105 	stmdbeq	r3, {r0, r2, r8}
    3fd8:	45281d01 	strmi	r1, [r8, #-3329]!	; 0xd01
    3fdc:	01000402 	tsteq	r0, r2, lsl #8
    3fe0:	02050001 	andeq	r0, r5, #1
    3fe4:	08004ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, lr}
    3fe8:	0106a303 	tsteq	r6, r3, lsl #6
    3fec:	02292818 	eoreq	r2, r9, #24, 16	; 0x180000
    3ff0:	01010002 	tsteq	r1, r2
    3ff4:	b0020500 	andlt	r0, r2, r0, lsl #10
    3ff8:	0308004c 	movweq	r0, #32844	; 0x804c
    3ffc:	190106bc 	stmdbne	r1, {r2, r3, r4, r5, r7, r9, sl}
    4000:	02200b03 	eoreq	r0, r0, #3072	; 0xc00
    4004:	01010003 	tsteq	r1, r3
    4008:	b8020500 	stmdalt	r2, {r8, sl}
    400c:	0308004c 	movweq	r0, #32844	; 0x804c
    4010:	180107af 	stmdane	r1, {r0, r1, r2, r3, r5, r7, r8, r9, sl}
    4014:	02200c03 	eoreq	r0, r0, #768	; 0x300
    4018:	01010003 	tsteq	r1, r3
    401c:	c0020500 	andgt	r0, r2, r0, lsl #10
    4020:	0308004c 	movweq	r0, #32844	; 0x804c
    4024:	190107d1 	stmdbne	r1, {r0, r4, r6, r7, r8, r9, sl}
    4028:	00030223 	andeq	r0, r3, r3, lsr #4
    402c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4030:	004cc802 	subeq	ip, ip, r2, lsl #16
    4034:	07ec0308 	strbeq	r0, [ip, r8, lsl #6]!
    4038:	200d0301 	andcs	r0, sp, r1, lsl #6
    403c:	3147312b 	cmpcc	r7, fp, lsr #2
    4040:	23660903 	cmncs	r6, #49152	; 0xc000
    4044:	20140333 	andscs	r0, r4, r3, lsr r3
    4048:	4d2e7003 	stcmi	0, cr7, [lr, #-12]!
    404c:	02200d03 	eoreq	r0, r0, #3, 26	; 0xc0
    4050:	01010004 	tsteq	r1, r4
    4054:	08020500 	stmdaeq	r2, {r8, sl}
    4058:	0308004d 	movweq	r0, #32845	; 0x804d
    405c:	030108af 	movweq	r0, #6319	; 0x18af
    4060:	312b200b 	teqcc	fp, fp
    4064:	0903312b 	stmdbeq	r3, {r0, r1, r3, r5, r8, ip, sp}
    4068:	226b3182 	rsbcs	r3, fp, #-2147483616	; 0x80000020
    406c:	01000302 	tsteq	r0, r2, lsl #6
    4070:	02050001 	andeq	r0, r5, #1
    4074:	08004d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, lr}
    4078:	0108de03 	tsteq	r8, r3, lsl #28
    407c:	231d3319 	tstcs	sp, #1677721600	; 0x64000000
    4080:	032e0a03 	teqeq	lr, #12288	; 0x3000
    4084:	0a032076 	beq	cc264 <_Min_Stack_Size+0xcbe64>
    4088:	30612520 	rsbcc	r2, r1, r0, lsr #10
    408c:	74710336 	ldrbtvc	r0, [r1], #-822	; 0x336
    4090:	02251b33 	eoreq	r1, r5, #52224	; 0xcc00
    4094:	01010002 	tsteq	r1, r2
    4098:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    409c:	0308004d 	movweq	r0, #32845	; 0x804d
    40a0:	03010992 	movweq	r0, #6546	; 0x1992
    40a4:	312b200d 	teqcc	fp, sp
    40a8:	032e0903 	teqeq	lr, #49152	; 0xc000
    40ac:	03312e74 	teqeq	r1, #116, 28	; 0x740
    40b0:	77034a09 	strvc	r4, [r3, -r9, lsl #20]
    40b4:	3c09032e 	stccc	3, cr0, [r9], {46}	; 0x2e
    40b8:	03311d26 	teqeq	r1, #2432	; 0x980
    40bc:	33232e09 	teqcc	r3, #9, 28	; 0x90
    40c0:	02003124 	andeq	r3, r0, #36, 2
    40c4:	033f0104 	teqeq	pc, #4, 2
    40c8:	60033c0a 	andvs	r3, r3, sl, lsl #24
    40cc:	0004022e 	andeq	r0, r4, lr, lsr #4
    40d0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    40d4:	004ddc02 	subeq	sp, sp, r2, lsl #24
    40d8:	09e40308 	stmibeq	r4!, {r3, r8, r9}^
    40dc:	200b0301 	andcs	r0, fp, r1, lsl #6
    40e0:	312b312b 	teqcc	fp, fp, lsr #2
    40e4:	31820903 	orrcc	r0, r2, r3, lsl #18
    40e8:	0302226b 	movweq	r2, #8811	; 0x226b
    40ec:	8b010100 	blhi	444f4 <_Min_Stack_Size+0x440f4>
    40f0:	02000004 	andeq	r0, r0, #4
    40f4:	00019b00 	andeq	r9, r1, r0, lsl #22
    40f8:	fb010200 	blx	44902 <_Min_Stack_Size+0x44502>
    40fc:	01000d0e 	tsteq	r0, lr, lsl #26
    4100:	00010101 	andeq	r0, r1, r1, lsl #2
    4104:	00010000 	andeq	r0, r1, r0
    4108:	4f430100 	svcmi	0x00430100
    410c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    4110:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    4114:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    4118:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    411c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    4120:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    4124:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    4128:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    412c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    4130:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    4134:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    4138:	445f6870 	ldrbmi	r6, [pc], #-2160	; 4140 <_Min_Stack_Size+0x3d40>
    413c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    4140:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    4144:	752f0063 	strvc	r0, [pc, #-99]!	; 40e9 <_Min_Stack_Size+0x3ce9>
    4148:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    414c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    4150:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4154:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4158:	616d2f62 	cmnvs	sp, r2, ror #30
    415c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    4160:	752f0065 	strvc	r0, [pc, #-101]!	; 4103 <_Min_Stack_Size+0x3d03>
    4164:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    4168:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    416c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4170:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4174:	4f430062 	svcmi	0x00430062
    4178:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    417c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    4180:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    4184:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    4188:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    418c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    4190:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    4194:	5349534d 	movtpl	r5, #37709	; 0x934d
    4198:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    419c:	2f656369 	svccs	0x00656369
    41a0:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    41a4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    41a8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    41ac:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    41b0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    41b4:	524f4300 	subpl	r4, pc, #0, 6
    41b8:	5f584554 	svcpl	0x00584554
    41bc:	5f46344d 	svcpl	0x0046344d
    41c0:	334d5453 	movtcc	r5, #54355	; 0xd453
    41c4:	2f344632 	svccs	0x00344632
    41c8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    41cc:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    41d0:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    41d4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    41d8:	5f787834 	svcpl	0x00787834
    41dc:	50647453 	rsbpl	r7, r4, r3, asr r4
    41e0:	70697265 	rsbvc	r7, r9, r5, ror #4
    41e4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    41e8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    41ec:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    41f0:	524f4300 	subpl	r4, pc, #0, 6
    41f4:	5f584554 	svcpl	0x00584554
    41f8:	5f46344d 	svcpl	0x0046344d
    41fc:	334d5453 	movtcc	r5, #54355	; 0xd453
    4200:	2f344632 	svccs	0x00344632
    4204:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    4208:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    420c:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    4210:	2f534953 	svccs	0x00534953
    4214:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    4218:	00656475 	rsbeq	r6, r5, r5, ror r4
    421c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    4220:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    4224:	735f7878 	cmpvc	pc, #120, 16	; 0x780000
    4228:	632e6970 	teqvs	lr, #112, 18	; 0x1c0000
    422c:	00000100 	andeq	r0, r0, r0, lsl #2
    4230:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    4234:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    4238:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    423c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    4240:	00000200 	andeq	r0, r0, r0, lsl #4
    4244:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4248:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    424c:	00000300 	andeq	r0, r0, r0, lsl #6
    4250:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4254:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    4258:	00682e78 	rsbeq	r2, r8, r8, ror lr
    425c:	73000004 	movwvc	r0, #4
    4260:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4264:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    4268:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    426c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    4270:	6f630000 	svcvs	0x00630000
    4274:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    4278:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    427c:	00000600 	andeq	r0, r0, r0, lsl #12
    4280:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4284:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    4288:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    428c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    4290:	00000005 	andeq	r0, r0, r5
    4294:	18020500 	stmdane	r2, {r8, sl}
    4298:	0308004e 	movweq	r0, #32846	; 0x804e
    429c:	240101e0 	strcs	r0, [r1], #-480	; 0x1e0
    42a0:	6d6d6d6d 	stclvs	13, cr6, [sp, #-436]!	; 0xfffffe4c
    42a4:	77660903 	strbvc	r0, [r6, -r3, lsl #18]!
    42a8:	032b3f5a 	teqeq	fp, #360	; 0x168
    42ac:	035a2e59 	cmpeq	sl, #1424	; 0x590
    42b0:	58033c28 	stmdapl	r3, {r3, r5, sl, fp, ip, sp}
    42b4:	035a332e 	cmpeq	sl, #-1207959552	; 0xb8000000
    42b8:	5f033c21 	svcpl	0x00033c21
    42bc:	035a332e 	cmpeq	sl, #-1207959552	; 0xb8000000
    42c0:	66033c1a 			; <UNDEFINED> instruction: 0x66033c1a
    42c4:	035a332e 	cmpeq	sl, #-1207959552	; 0xb8000000
    42c8:	6d033c13 	stcvs	12, cr3, [r3, #-76]	; 0xffffffb4
    42cc:	035a332e 	cmpeq	sl, #-1207959552	; 0xb8000000
    42d0:	74033c0c 	strvc	r3, [r3], #-3084	; 0xc0c
    42d4:	0002022e 	andeq	r0, r2, lr, lsr #4
    42d8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    42dc:	004ef402 	subeq	pc, lr, r2, lsl #8
    42e0:	029c0308 	addseq	r0, ip, #8, 6	; 0x20000000
    42e4:	2e1e0301 	cdpcs	3, 1, cr0, cr14, cr1, {0}
    42e8:	03ba0b03 			; <UNDEFINED> instruction: 0x03ba0b03
    42ec:	0b03206a 	bleq	cc49c <_Min_Stack_Size+0xcc09c>
    42f0:	9e770320 	cdpls	3, 7, cr0, cr7, cr0, {1}
    42f4:	332e0903 	teqcc	lr, #49152	; 0xc000
    42f8:	212d6a23 	teqcs	sp, r3, lsr #20
    42fc:	01000102 	tsteq	r0, r2, lsl #2
    4300:	02050001 	andeq	r0, r5, #1
    4304:	08004f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, lr}
    4308:	0102dc03 	tsteq	r2, r3, lsl #24
    430c:	27011203 	strcs	r1, [r1, -r3, lsl #4]
    4310:	03207903 	teqeq	r0, #49152	; 0xc000
    4314:	1203586e 	andne	r5, r3, #7208960	; 0x6e0000
    4318:	211f212e 	tstcs	pc, lr, lsr #2
    431c:	231d2323 	tstcs	sp, #-1946157056	; 0x8c000000
    4320:	03202403 	teqeq	r0, #50331648	; 0x3000000
    4324:	1b034a65 	blne	d6cc0 <_Min_Stack_Size+0xd68c0>
    4328:	20650320 	rsbcs	r0, r5, r0, lsr #6
    432c:	22661b03 	rsbcs	r1, r6, #3072	; 0xc00
    4330:	4a0b035c 	bmi	2c50a8 <_Min_Stack_Size+0x2c4ca8>
    4334:	322e7503 	eorcc	r7, lr, #12582912	; 0xc00000
    4338:	79033532 	stmdbvc	r3, {r1, r4, r5, r8, sl, ip, sp}
    433c:	75033120 	strvc	r3, [r3, #-288]	; 0x120
    4340:	2e0b034a 	cdpcs	3, 0, cr0, cr11, cr10, {2}
    4344:	032e7903 	teqeq	lr, #49152	; 0xc000
    4348:	032a2e0b 	teqeq	sl, #11, 28	; 0xb0
    434c:	41372e0c 	teqmi	r7, ip, lsl #28
    4350:	331b3329 	tstcc	fp, #-1543503872	; 0xa4000000
    4354:	42244640 	eormi	r4, r4, #64, 12	; 0x4000000
    4358:	2e790327 	cdpcs	3, 7, cr0, cr9, cr7, {1}
    435c:	580c0335 	stmdapl	ip, {r0, r2, r4, r5, r8, r9}
    4360:	2b492f2d 	blcs	125001c <_Min_Stack_Size+0x124fc1c>
    4364:	21362b23 	teqcs	r6, r3, lsr #22
    4368:	01000602 	tsteq	r0, r2, lsl #12
    436c:	02050001 	andeq	r0, r5, #1
    4370:	08005038 	stmdaeq	r0, {r3, r4, r5, ip, lr}
    4374:	0103e003 	tsteq	r3, r3
    4378:	20100315 	andscs	r0, r0, r5, lsl r3
    437c:	222e7003 	eorcs	r7, lr, #3
    4380:	22222222 	eorcs	r2, r2, #536870914	; 0x20000002
    4384:	02022222 	andeq	r2, r2, #536870914	; 0x20000002
    4388:	00010100 	andeq	r0, r1, r0, lsl #2
    438c:	50500205 	subspl	r0, r0, r5, lsl #4
    4390:	fc030800 	stc2	8, cr0, [r3], {-0}
    4394:	03150103 	tsteq	r5, #-1073741824	; 0xc0000000
    4398:	7403200c 	strvc	r2, [r3], #-12
    439c:	2e0f032e 	cdpcs	3, 0, cr0, cr15, cr14, {1}
    43a0:	01000202 	tsteq	r0, r2, lsl #4
    43a4:	02050001 	andeq	r0, r5, #1
    43a8:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
    43ac:	01049903 	tsteq	r4, r3, lsl #18
    43b0:	61281d19 	teqvs	r8, r9, lsl sp
    43b4:	01000502 	tsteq	r0, r2, lsl #10
    43b8:	02050001 	andeq	r0, r5, #1
    43bc:	0800507c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip, lr}
    43c0:	0104b203 	tsteq	r4, r3, lsl #4
    43c4:	61281d1a 	teqvs	r8, sl, lsl sp
    43c8:	01000502 	tsteq	r0, r2, lsl #10
    43cc:	02050001 	andeq	r0, r5, #1
    43d0:	08005098 	stmdaeq	r0, {r3, r4, r7, ip, lr}
    43d4:	0104cd03 	tsteq	r4, r3, lsl #26
    43d8:	05026817 	streq	r6, [r2, #-2071]	; 0x817
    43dc:	00010100 	andeq	r0, r1, r0, lsl #2
    43e0:	50b00205 	adcspl	r0, r0, r5, lsl #4
    43e4:	e1030800 	tst	r3, r0, lsl #16
    43e8:	1d190104 	ldfnes	f0, [r9, #-16]
    43ec:	1b253736 	blne	9520cc <_Min_Stack_Size+0x951ccc>
    43f0:	00040233 	andeq	r0, r4, r3, lsr r2
    43f4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    43f8:	0050cc02 	subseq	ip, r0, r2, lsl #24
    43fc:	04fb0308 	ldrbteq	r0, [fp], #776	; 0x308
    4400:	253f1601 	ldrcs	r1, [pc, #-1537]!	; 3e07 <_Min_Stack_Size+0x3a07>
    4404:	331b2537 	tstcc	fp, #230686720	; 0xdc00000
    4408:	01000402 	tsteq	r0, r2, lsl #8
    440c:	02050001 	andeq	r0, r5, #1
    4410:	080050ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, lr}
    4414:	01059303 	tsteq	r5, r3, lsl #6
    4418:	61281d19 	teqvs	r8, r9, lsl sp
    441c:	01000502 	tsteq	r0, r2, lsl #10
    4420:	02050001 	andeq	r0, r5, #1
    4424:	08005108 	stmdaeq	r0, {r3, r8, ip, lr}
    4428:	0105b203 	tsteq	r5, r3, lsl #4
    442c:	61281d1a 	teqvs	r8, sl, lsl sp
    4430:	01000502 	tsteq	r0, r2, lsl #10
    4434:	02050001 	andeq	r0, r5, #1
    4438:	08005124 	stmdaeq	r0, {r2, r5, r8, ip, lr}
    443c:	0105d703 	tsteq	r5, r3, lsl #14
    4440:	67010c03 	strvs	r0, [r1, -r3, lsl #24]
    4444:	23232f1f 	teqcs	r3, #31, 30	; 0x7c
    4448:	03206d03 	teqeq	r0, #3, 26	; 0xc0
    444c:	031f2022 	tsteq	pc, #34	; 0x22
    4450:	12032e6f 	andne	r2, r3, #1776	; 0x6f0
    4454:	3c710320 	ldclcc	3, cr0, [r1], #-128	; 0xffffff80
    4458:	032e0e03 	teqeq	lr, #3, 28	; 0x30
    445c:	0e032072 	mcreq	0, 0, r2, cr3, cr2, {3}
    4460:	20720320 	rsbscs	r0, r2, r0, lsr #6
    4464:	03200e03 	teqeq	r0, #3, 28	; 0x30
    4468:	0c032074 	stceq	0, cr2, [r3], {116}	; 0x74
    446c:	02212558 	eoreq	r2, r1, #88, 10	; 0x16000000
    4470:	01010002 	tsteq	r1, r2
    4474:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    4478:	03080051 	movweq	r0, #32849	; 0x8051
    447c:	170106a1 	strne	r0, [r1, -r1, lsr #13]
    4480:	00020221 	andeq	r0, r2, r1, lsr #4
    4484:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4488:	00517402 	subseq	r7, r1, r2, lsl #8
    448c:	06b10308 	ldrteq	r0, [r1], r8, lsl #6
    4490:	02021701 	andeq	r1, r2, #262144	; 0x40000
    4494:	00010100 	andeq	r0, r1, r0, lsl #2
    4498:	51780205 	cmnpl	r8, r5, lsl #4
    449c:	8b030800 	blhi	c64a4 <_Min_Stack_Size+0xc60a4>
    44a0:	1d190107 	ldfnes	f0, [r9, #-28]	; 0xffffffe4
    44a4:	05026128 	streq	r6, [r2, #-296]	; 0x128
    44a8:	00010100 	andeq	r0, r1, r0, lsl #2
    44ac:	51940205 	orrspl	r0, r4, r5, lsl #4
    44b0:	a1030800 	tstge	r3, r0, lsl #16
    44b4:	02170107 	andseq	r0, r7, #-1073741823	; 0xc0000001
    44b8:	01010006 	tsteq	r1, r6
    44bc:	a0020500 	andge	r0, r2, r0, lsl #10
    44c0:	03080051 	movweq	r0, #32849	; 0x8051
    44c4:	170107b3 			; <UNDEFINED> instruction: 0x170107b3
    44c8:	02323323 	eorseq	r3, r2, #-1946157056	; 0x8c000000
    44cc:	01010001 	tsteq	r1, r1
    44d0:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    44d4:	03080051 	movweq	r0, #32849	; 0x8051
    44d8:	170107cc 	strne	r0, [r1, -ip, asr #15]
    44dc:	00020221 	andeq	r0, r2, r1, lsr #4
    44e0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    44e4:	0051b402 	subseq	fp, r1, r2, lsl #8
    44e8:	07f10308 	ldrbeq	r0, [r1, r8, lsl #6]!
    44ec:	01090301 	tsteq	r9, r1, lsl #6
    44f0:	0245282b 	subeq	r2, r5, #2818048	; 0x2b0000
    44f4:	01010003 	tsteq	r1, r3
    44f8:	c8020500 	stmdagt	r2, {r8, sl}
    44fc:	03080051 	movweq	r0, #32849	; 0x8051
    4500:	030108dd 	movweq	r0, #6365	; 0x18dd
    4504:	1b4f010c 	blne	13c493c <_Min_Stack_Size+0x13c453c>
    4508:	45281d25 	strmi	r1, [r8, #-3365]!	; 0xd25
    450c:	01000302 	tsteq	r0, r2, lsl #6
    4510:	02050001 	andeq	r0, r5, #1
    4514:	080051e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip, lr}
    4518:	01098903 	tsteq	r9, r3, lsl #18
    451c:	2e0c0319 	mcrcs	3, 0, r0, cr12, cr9, {0}
    4520:	01000402 	tsteq	r0, r2, lsl #8
    4524:	02050001 	andeq	r0, r5, #1
    4528:	080051f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, lr}
    452c:	0109b203 	tsteq	r9, r3, lsl #4
    4530:	00040218 	andeq	r0, r4, r8, lsl r2
    4534:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4538:	0051fc02 	subseq	pc, r1, r2, lsl #24
    453c:	09cb0308 	stmibeq	fp, {r3, r8, r9}^
    4540:	20120301 	andscs	r0, r2, r1, lsl #6
    4544:	20740323 	rsbscs	r0, r4, r3, lsr #6
    4548:	033c0c03 	teqeq	ip, #768	; 0x300
    454c:	0c032074 	stceq	0, cr2, [r3], {116}	; 0x74
    4550:	00231d2e 	eoreq	r1, r3, lr, lsr #26
    4554:	03010402 	movweq	r0, #5122	; 0x1402
    4558:	0200207a 	andeq	r2, r0, #122	; 0x7a
    455c:	00340104 	eorseq	r0, r4, r4, lsl #2
    4560:	23010402 	movwcs	r0, #5122	; 0x1402
    4564:	023c0903 	eorseq	r0, ip, #49152	; 0xc000
    4568:	01010003 	tsteq	r1, r3
    456c:	28020500 	stmdacs	r2, {r8, sl}
    4570:	03080052 	movweq	r0, #32850	; 0x8052
    4574:	19010a82 	stmdbne	r1, {r1, r7, r9, fp}
    4578:	0004025b 	andeq	r0, r4, fp, asr r2
    457c:	02570101 	subseq	r0, r7, #1073741824	; 0x40000000
    4580:	00020000 	andeq	r0, r2, r0
    4584:	0000018a 	andeq	r0, r0, sl, lsl #3
    4588:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    458c:	0101000d 	tsteq	r1, sp
    4590:	00000101 	andeq	r0, r0, r1, lsl #2
    4594:	00000100 	andeq	r0, r0, r0, lsl #2
    4598:	524f4301 	subpl	r4, pc, #67108864	; 0x4000000
    459c:	5f584554 	svcpl	0x00584554
    45a0:	5f46344d 	svcpl	0x0046344d
    45a4:	334d5453 	movtcc	r5, #54355	; 0xd453
    45a8:	2f344632 	svccs	0x00344632
    45ac:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    45b0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    45b4:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    45b8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    45bc:	5f787834 	svcpl	0x00787834
    45c0:	50647453 	rsbpl	r7, r4, r3, asr r4
    45c4:	70697265 	rsbvc	r7, r9, r5, ror #4
    45c8:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    45cc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    45d0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    45d4:	73752f00 	cmnvc	r5, #0, 30
    45d8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    45dc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    45e0:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    45e4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    45e8:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    45ec:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    45f0:	73752f00 	cmnvc	r5, #0, 30
    45f4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    45f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    45fc:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    4600:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4604:	524f4300 	subpl	r4, pc, #0, 6
    4608:	5f584554 	svcpl	0x00584554
    460c:	5f46344d 	svcpl	0x0046344d
    4610:	334d5453 	movtcc	r5, #54355	; 0xd453
    4614:	2f344632 	svccs	0x00344632
    4618:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    461c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    4620:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    4624:	2f534953 	svccs	0x00534953
    4628:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    462c:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    4630:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    4634:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4638:	2f787834 	svccs	0x00787834
    463c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    4640:	00656475 	rsbeq	r6, r5, r5, ror r4
    4644:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    4648:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 453c <_Min_Stack_Size+0x413c>
    464c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    4650:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4654:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 4544 <_Min_Stack_Size+0x4144>
    4658:	61726269 	cmnvs	r2, r9, ror #4
    465c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    4660:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    4664:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    4668:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    466c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    4670:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    4674:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    4678:	2f726576 	svccs	0x00726576
    467c:	00636e69 	rsbeq	r6, r3, r9, ror #28
    4680:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    4684:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 4578 <_Min_Stack_Size+0x4178>
    4688:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    468c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4690:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 4580 <_Min_Stack_Size+0x4180>
    4694:	61726269 	cmnvs	r2, r9, ror #4
    4698:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    469c:	534d432f 	movtpl	r4, #54063	; 0xd32f
    46a0:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    46a4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    46a8:	00006564 	andeq	r6, r0, r4, ror #10
    46ac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    46b0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    46b4:	78655f78 	stmdavc	r5!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    46b8:	632e6974 	teqvs	lr, #116, 18	; 0x1d0000
    46bc:	00000100 	andeq	r0, r0, r0, lsl #2
    46c0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    46c4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    46c8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    46cc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    46d0:	00000200 	andeq	r0, r0, r0, lsl #4
    46d4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    46d8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    46dc:	00000300 	andeq	r0, r0, r0, lsl #6
    46e0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    46e4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    46e8:	00682e78 	rsbeq	r2, r8, r8, ror lr
    46ec:	73000004 	movwvc	r0, #4
    46f0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    46f4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    46f8:	7478655f 	ldrbtvc	r6, [r8], #-1375	; 0x55f
    46fc:	00682e69 	rsbeq	r2, r8, r9, ror #28
    4700:	63000005 	movwvs	r0, #5
    4704:	5f65726f 	svcpl	0x0065726f
    4708:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    470c:	00060068 	andeq	r0, r6, r8, rrx
    4710:	05000000 	streq	r0, [r0, #-0]
    4714:	00523c02 	subseq	r3, r2, r2, lsl #24
    4718:	00ee0308 	rsceq	r0, lr, r8, lsl #6
    471c:	2a4e1301 	bcs	1389328 <_Min_Stack_Size+0x1388f28>
    4720:	21212a24 	teqcs	r1, r4, lsr #20
    4724:	02022121 	andeq	r2, r2, #1073741832	; 0x40000008
    4728:	00010100 	andeq	r0, r1, r0, lsl #2
    472c:	525c0205 	subspl	r0, ip, #1342177280	; 0x50000000
    4730:	fe030800 	cdp2	8, 0, cr0, cr3, cr0, {0}
    4734:	0b030100 	bleq	c4b3c <_Min_Stack_Size+0xc473c>
    4738:	20750301 	rsbscs	r0, r5, r1, lsl #6
    473c:	23200b03 	teqcs	r0, #3072	; 0xc00
    4740:	20090369 	andcs	r0, r9, r9, ror #6
    4744:	3d207403 	cfstrscc	mvf7, [r0, #-12]!
    4748:	3f324822 	svccc	0x00324822
    474c:	3f1d2359 	svccc	0x001d2359
    4750:	4c200903 	stcmi	9, cr0, [r0], #-12
    4754:	293c0a03 	ldmdbcs	ip!, {r0, r1, r9, fp}
    4758:	1e4f1d23 	cdpne	13, 4, cr1, cr15, cr3, {1}
    475c:	206e034c 	rsbcs	r0, lr, ip, asr #6
    4760:	3c11033d 	ldccc	3, cr0, [r1], {61}	; 0x3d
    4764:	01000202 	tsteq	r0, r2, lsl #4
    4768:	02050001 	andeq	r0, r5, #1
    476c:	080052dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip, lr}
    4770:	0101b603 	tsteq	r1, r3, lsl #12
    4774:	212c2213 	teqcs	ip, r3, lsl r2
    4778:	00020222 	andeq	r0, r2, r2, lsr #4
    477c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4780:	0052ec02 	subseq	lr, r2, r2, lsl #24
    4784:	01c50308 	biceq	r0, r5, r8, lsl #6
    4788:	08021601 	stmdaeq	r2, {r0, r9, sl, ip}
    478c:	00010100 	andeq	r0, r1, r0, lsl #2
    4790:	52fc0205 	rscspl	r0, ip, #1342177280	; 0x50000000
    4794:	e3030800 	movw	r0, #14336	; 0x3800
    4798:	03170101 	tsteq	r7, #1073741824	; 0x40000000
    479c:	04026609 	streq	r6, [r2], #-1545	; 0x609
    47a0:	00010100 	andeq	r0, r1, r0, lsl #2
    47a4:	53100205 	tstpl	r0, #1342177280	; 0x50000000
    47a8:	fa030800 	blx	c67b0 <_Min_Stack_Size+0xc63b0>
    47ac:	02160101 	andseq	r0, r6, #1073741824	; 0x40000000
    47b0:	01010006 	tsteq	r1, r6
    47b4:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    47b8:	03080053 	movweq	r0, #32851	; 0x8053
    47bc:	17010288 	strne	r0, [r1, -r8, lsl #5]
    47c0:	02660a03 	rsbeq	r0, r6, #12288	; 0x3000
    47c4:	01010004 	tsteq	r1, r4
    47c8:	30020500 	andcc	r0, r2, r0, lsl #10
    47cc:	03080053 	movweq	r0, #32851	; 0x8053
    47d0:	160102a0 	strne	r0, [r1], -r0, lsr #5
    47d4:	01000602 	tsteq	r0, r2, lsl #12
    47d8:	00039f01 	andeq	r9, r3, r1, lsl #30
    47dc:	9f000200 	svcls	0x00000200
    47e0:	02000001 	andeq	r0, r0, #1
    47e4:	0d0efb01 	vstreq	d15, [lr, #-4]
    47e8:	01010100 	mrseq	r0, (UNDEF: 17)
    47ec:	00000001 	andeq	r0, r0, r1
    47f0:	01000001 	tsteq	r0, r1
    47f4:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    47f8:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 46ec <_Min_Stack_Size+0x42ec>
    47fc:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    4800:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4804:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 46f4 <_Min_Stack_Size+0x42f4>
    4808:	61726269 	cmnvs	r2, r9, ror #4
    480c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    4810:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    4814:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    4818:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    481c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    4820:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    4824:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    4828:	2f726576 	svccs	0x00726576
    482c:	00637273 	rsbeq	r7, r3, r3, ror r2
    4830:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4834:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4838:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    483c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4840:	2f62696c 	svccs	0x0062696c
    4844:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4848:	00656e69 	rsbeq	r6, r5, r9, ror #28
    484c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4850:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4854:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    4858:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    485c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    4860:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    4864:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 4758 <_Min_Stack_Size+0x4358>
    4868:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    486c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4870:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 4760 <_Min_Stack_Size+0x4360>
    4874:	61726269 	cmnvs	r2, r9, ror #4
    4878:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    487c:	534d432f 	movtpl	r4, #54063	; 0xd32f
    4880:	442f5349 	strtmi	r5, [pc], #-841	; 4888 <_Min_Stack_Size+0x4488>
    4884:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4888:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    488c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    4890:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    4894:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    4898:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    489c:	43006564 	movwmi	r6, #1380	; 0x564
    48a0:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    48a4:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    48a8:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    48ac:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    48b0:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    48b4:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    48b8:	2f736569 	svccs	0x00736569
    48bc:	334d5453 	movtcc	r5, #54355	; 0xd453
    48c0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    48c4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    48c8:	72655064 	rsbvc	r5, r5, #100	; 0x64
    48cc:	5f687069 	svcpl	0x00687069
    48d0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    48d4:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    48d8:	4300636e 	movwmi	r6, #878	; 0x36e
    48dc:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    48e0:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    48e4:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    48e8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    48ec:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    48f0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    48f4:	2f736569 	svccs	0x00736569
    48f8:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    48fc:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    4900:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    4904:	73000065 	movwvc	r0, #101	; 0x65
    4908:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    490c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    4910:	616d645f 	cmnvs	sp, pc, asr r4
    4914:	632e6432 	teqvs	lr, #838860800	; 0x32000000
    4918:	00000100 	andeq	r0, r0, r0, lsl #2
    491c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    4920:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    4924:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    4928:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    492c:	00000200 	andeq	r0, r0, r0, lsl #4
    4930:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4934:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4938:	00000300 	andeq	r0, r0, r0, lsl #6
    493c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4940:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    4944:	00682e78 	rsbeq	r2, r8, r8, ror lr
    4948:	73000004 	movwvc	r0, #4
    494c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4950:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    4954:	616d645f 	cmnvs	sp, pc, asr r4
    4958:	682e6432 	stmdavs	lr!, {r1, r4, r5, sl, sp, lr}
    495c:	00000500 	andeq	r0, r0, r0, lsl #10
    4960:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    4964:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    4968:	0600682e 	streq	r6, [r0], -lr, lsr #16
    496c:	74730000 	ldrbtvc	r0, [r3], #-0
    4970:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    4974:	5f787834 	svcpl	0x00787834
    4978:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    497c:	00050068 	andeq	r0, r5, r8, rrx
    4980:	05000000 	streq	r0, [r0, #-0]
    4984:	00533c02 	subseq	r3, r3, r2, lsl #24
    4988:	00e90308 	rsceq	r0, r9, r8, lsl #6
    498c:	3d5a2201 	lfmcc	f2, 2, [sl, #-4]
    4990:	0002022d 	andeq	r0, r2, sp, lsr #4
    4994:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4998:	00535802 	subseq	r5, r3, r2, lsl #16
    499c:	00fa0308 	rscseq	r0, sl, r8, lsl #6
    49a0:	01130301 	tsteq	r3, r1, lsl #6
    49a4:	034a6d03 	movteq	r6, #44291	; 0xad03
    49a8:	4d672013 	stclmi	0, cr2, [r7, #-76]!	; 0xffffffb4
    49ac:	1d21504b 	stcne	0, cr5, [r1, #-300]!	; 0xfffffed4
    49b0:	212f2236 	teqcs	pc, r6, lsr r2	; <UNPREDICTABLE>
    49b4:	2009031c 	andcs	r0, r9, ip, lsl r3
    49b8:	1c212f22 	stcne	15, cr2, [r1], #-136	; 0xffffff78
    49bc:	1c200d03 	stcne	13, cr0, [r0], #-12
    49c0:	25212f22 	strcs	r2, [r1, #-3874]!	; 0xf22
    49c4:	bd222f21 	stclt	15, cr2, [r2, #-132]!	; 0xffffff7c
    49c8:	1f4e6731 	svcne	0x004e6731
    49cc:	036e3d21 	cmneq	lr, #2112	; 0x840
    49d0:	211e2e49 	tstcs	lr, r9, asr #28
    49d4:	00020221 	andeq	r0, r2, r1, lsr #4
    49d8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    49dc:	00541002 	subseq	r1, r4, r2
    49e0:	01d30308 	bicseq	r0, r3, r8, lsl #6
    49e4:	23311401 	teqcs	r1, #16777216	; 0x1000000
    49e8:	23212121 	teqcs	r1, #1073741832	; 0x40000008
    49ec:	02212323 	eoreq	r2, r1, #-1946157056	; 0x8c000000
    49f0:	01010002 	tsteq	r1, r2
    49f4:	28020500 	stmdacs	r2, {r8, sl}
    49f8:	03080054 	movweq	r0, #32852	; 0x8054
    49fc:	140101f2 	strne	r0, [r1], #-498	; 0x1f2
    4a00:	01000902 	tsteq	r0, r2, lsl #18
    4a04:	02050001 	andeq	r0, r5, #1
    4a08:	0800543c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, lr}
    4a0c:	0101fe03 	tsteq	r1, r3, lsl #28
    4a10:	00090214 	andeq	r0, r9, r4, lsl r2
    4a14:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4a18:	00545002 	subseq	r5, r4, r2
    4a1c:	028b0308 	addeq	r0, fp, #8, 6	; 0x20000000
    4a20:	28551901 	ldmdacs	r5, {r0, r8, fp, ip}^
    4a24:	00040245 	andeq	r0, r4, r5, asr #4
    4a28:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4a2c:	00546c02 	subseq	r6, r4, r2, lsl #24
    4a30:	02a40308 	adceq	r0, r4, #8, 6	; 0x20000000
    4a34:	01140301 	tsteq	r4, r1, lsl #6
    4a38:	03586c03 	cmpeq	r8, #768	; 0x300
    4a3c:	67232014 			; <UNDEFINED> instruction: 0x67232014
    4a40:	212a6b4d 	teqcs	sl, sp, asr #22
    4a44:	59212121 	stmdbpl	r1!, {r0, r5, r8, sp}
    4a48:	2c4d402d 	mcrrcs	0, 2, r4, sp, cr13
    4a4c:	21692121 	cmncs	r9, r1, lsr #2
    4a50:	0102211f 	tsteq	r2, pc, lsl r1
    4a54:	00010100 	andeq	r0, r1, r0, lsl #2
    4a58:	54e00205 	strbtpl	r0, [r0], #517	; 0x205
    4a5c:	d8030800 	stmdale	r3, {fp}
    4a60:	31140102 	tstcc	r4, r2, lsl #2
    4a64:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    4a68:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    4a6c:	00020223 	andeq	r0, r2, r3, lsr #4
    4a70:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4a74:	0054fc02 	subseq	pc, r4, r2, lsl #24
    4a78:	03850308 	orreq	r0, r5, #8, 6	; 0x20000000
    4a7c:	01140301 	tsteq	r4, r1, lsl #6
    4a80:	03586c03 	cmpeq	r8, #768	; 0x300
    4a84:	67232014 			; <UNDEFINED> instruction: 0x67232014
    4a88:	212a6b4d 	teqcs	sl, sp, asr #22
    4a8c:	59212121 	stmdbpl	r1!, {r0, r5, r8, sp}
    4a90:	2c4d402d 	mcrrcs	0, 2, r4, sp, cr13
    4a94:	22692121 	rsbcs	r2, r9, #1073741832	; 0x40000008
    4a98:	0102221e 	tsteq	r2, lr, lsl r2
    4a9c:	00010100 	andeq	r0, r1, r0, lsl #2
    4aa0:	55700205 	ldrbpl	r0, [r0, #-517]!	; 0x205
    4aa4:	ba030800 	blt	c6aac <_Min_Stack_Size+0xc66ac>
    4aa8:	31140103 	tstcc	r4, r3, lsl #2
    4aac:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    4ab0:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    4ab4:	00020223 	andeq	r0, r2, r3, lsr #4
    4ab8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4abc:	00558c02 	subseq	r8, r5, r2, lsl #24
    4ac0:	03e50308 	mvneq	r0, #8, 6	; 0x20000000
    4ac4:	28551901 	ldmdacs	r5, {r0, r8, fp, ip}^
    4ac8:	00040245 	andeq	r0, r4, r5, asr #4
    4acc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4ad0:	0055a802 	subseq	sl, r5, r2, lsl #16
    4ad4:	03fd0308 	mvnseq	r0, #8, 6	; 0x20000000
    4ad8:	28551901 	ldmdacs	r5, {r0, r8, fp, ip}^
    4adc:	00040245 	andeq	r0, r4, r5, asr #4
    4ae0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4ae4:	0055c402 	subseq	ip, r5, r2, lsl #8
    4ae8:	04940308 	ldreq	r0, [r4], #776	; 0x308
    4aec:	010a0301 	tsteq	sl, r1, lsl #6
    4af0:	20090355 	andcs	r0, r9, r5, asr r3
    4af4:	5a4a7a03 	bpl	12a3308 <_Min_Stack_Size+0x12a2f08>
    4af8:	01000702 	tsteq	r0, r2, lsl #14
    4afc:	02050001 	andeq	r0, r5, #1
    4b00:	080055f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, lr}
    4b04:	0104af03 	tsteq	r4, r3, lsl #30
    4b08:	00060217 	andeq	r0, r6, r7, lsl r2
    4b0c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4b10:	0055fc02 	subseq	pc, r5, r2, lsl #24
    4b14:	04f20308 	ldrbteq	r0, [r2], #776	; 0x308
    4b18:	28551a01 	ldmdacs	r5, {r0, r9, fp, ip}^
    4b1c:	00030245 	andeq	r0, r3, r5, asr #4
    4b20:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4b24:	00561802 	subseq	r1, r6, r2, lsl #16
    4b28:	05910308 	ldreq	r0, [r1, #776]	; 0x308
    4b2c:	0c031901 	stceq	9, cr1, [r3], {1}
    4b30:	00040266 	andeq	r0, r4, r6, ror #4
    4b34:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4b38:	00562c02 	subseq	r2, r6, r2, lsl #24
    4b3c:	05b30308 	ldreq	r0, [r3, #776]!	; 0x308
    4b40:	06021701 	streq	r1, [r2], -r1, lsl #14
    4b44:	00010100 	andeq	r0, r1, r0, lsl #2
    4b48:	56380205 	ldrtpl	r0, [r8], -r5, lsl #4
    4b4c:	c8030800 	stmdagt	r3, {fp}
    4b50:	03190105 	tsteq	r9, #1073741825	; 0x40000001
    4b54:	02005809 	andeq	r5, r0, #589824	; 0x90000
    4b58:	3c060104 	stfccs	f0, [r6], {4}
    4b5c:	01040200 	mrseq	r0, R12_usr
    4b60:	234e3006 	movtcs	r3, #57350	; 0xe006
    4b64:	01000102 	tsteq	r0, r2, lsl #2
    4b68:	02050001 	andeq	r0, r5, #1
    4b6c:	08005658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, lr}
    4b70:	0105f003 	tsteq	r5, r3
    4b74:	02234718 	eoreq	r4, r3, #24, 14	; 0x600000
    4b78:	01010002 	tsteq	r1, r2
    4b7c:	000004ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4b80:	019d0002 	orrseq	r0, sp, r2
    4b84:	01020000 	mrseq	r0, (UNDEF: 2)
    4b88:	000d0efb 	strdeq	r0, [sp], -fp
    4b8c:	01010101 	tsteq	r1, r1, lsl #2
    4b90:	01000000 	mrseq	r0, (UNDEF: 0)
    4b94:	43010000 	movwmi	r0, #4096	; 0x1000
    4b98:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    4b9c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    4ba0:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    4ba4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4ba8:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    4bac:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    4bb0:	2f736569 	svccs	0x00736569
    4bb4:	334d5453 	movtcc	r5, #54355	; 0xd453
    4bb8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    4bbc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    4bc0:	72655064 	rsbvc	r5, r5, #100	; 0x64
    4bc4:	5f687069 	svcpl	0x00687069
    4bc8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    4bcc:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    4bd0:	2f006372 	svccs	0x00006372
    4bd4:	2f727375 	svccs	0x00727375
    4bd8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4bdc:	2f656475 	svccs	0x00656475
    4be0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4be4:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 4a48 <_Min_Stack_Size+0x4648>
    4be8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    4bec:	2f00656e 	svccs	0x0000656e
    4bf0:	2f727375 	svccs	0x00727375
    4bf4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4bf8:	2f656475 	svccs	0x00656475
    4bfc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4c00:	43006269 	movwmi	r6, #617	; 0x269
    4c04:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    4c08:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    4c0c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    4c10:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4c14:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    4c18:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    4c1c:	2f736569 	svccs	0x00736569
    4c20:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    4c24:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    4c28:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    4c2c:	2f54532f 	svccs	0x0054532f
    4c30:	334d5453 	movtcc	r5, #54355	; 0xd453
    4c34:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    4c38:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    4c3c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    4c40:	4f430065 	svcmi	0x00430065
    4c44:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    4c48:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    4c4c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    4c50:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    4c54:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    4c58:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    4c5c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    4c60:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4c64:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    4c68:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    4c6c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    4c70:	445f6870 	ldrbmi	r6, [pc], #-2160	; 4c78 <_Min_Stack_Size+0x4878>
    4c74:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    4c78:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    4c7c:	4f430063 	svcmi	0x00430063
    4c80:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    4c84:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    4c88:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    4c8c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    4c90:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    4c94:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    4c98:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    4c9c:	5349534d 	movtpl	r5, #37709	; 0x934d
    4ca0:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    4ca4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    4ca8:	74730000 	ldrbtvc	r0, [r3], #-0
    4cac:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    4cb0:	5f787834 	svcpl	0x00787834
    4cb4:	6364746c 	cmnvs	r4, #108, 8	; 0x6c000000
    4cb8:	0100632e 	tsteq	r0, lr, lsr #6
    4cbc:	645f0000 	ldrbvs	r0, [pc], #-0	; 4cc4 <_Min_Stack_Size+0x48c4>
    4cc0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    4cc4:	745f746c 	ldrbvc	r7, [pc], #-1132	; 4ccc <_Min_Stack_Size+0x48cc>
    4cc8:	73657079 	cmnvc	r5, #121	; 0x79
    4ccc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4cd0:	74730000 	ldrbtvc	r0, [r3], #-0
    4cd4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    4cd8:	0300682e 	movweq	r6, #2094	; 0x82e
    4cdc:	74730000 	ldrbtvc	r0, [r3], #-0
    4ce0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    4ce4:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    4ce8:	00040068 	andeq	r0, r4, r8, rrx
    4cec:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    4cf0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    4cf4:	6c5f7878 	mrrcvs	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    4cf8:	2e636474 	mcrcs	4, 3, r6, cr3, cr4, {3}
    4cfc:	00050068 	andeq	r0, r5, r8, rrx
    4d00:	726f6300 	rsbvc	r6, pc, #0, 6
    4d04:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    4d08:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    4d0c:	73000006 	movwvc	r0, #6
    4d10:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4d14:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    4d18:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    4d1c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    4d20:	00000000 	andeq	r0, r0, r0
    4d24:	56680205 	strbtpl	r0, [r8], -r5, lsl #4
    4d28:	fb030800 	blx	c6d32 <_Min_Stack_Size+0xc6932>
    4d2c:	5a220100 	bpl	885134 <_Min_Stack_Size+0x884d34>
    4d30:	02022d3d 	andeq	r2, r2, #3904	; 0xf40
    4d34:	00010100 	andeq	r0, r1, r0, lsl #2
    4d38:	56840205 	strpl	r0, [r4], r5, lsl #4
    4d3c:	8c030800 	stchi	8, cr0, [r3], {-0}
    4d40:	1a030101 	bne	c514c <_Min_Stack_Size+0xc4d4c>
    4d44:	9e660301 	cdpls	3, 6, cr0, cr6, cr1, {0}
    4d48:	22201a03 	eorcs	r1, r0, #12288	; 0x3000
    4d4c:	3e4d212d 	dvfccep	f2, f5, #5.0
    4d50:	3e4d212d 	dvfccep	f2, f5, #5.0
    4d54:	3e4d212d 	dvfccep	f2, f5, #5.0
    4d58:	754c212d 	strbvc	r2, [ip, #-301]	; 0x12d
    4d5c:	22211da5 	eorcs	r1, r1, #10560	; 0x2940
    4d60:	0202833d 	andeq	r8, r2, #-201326592	; 0xf4000000
    4d64:	00010100 	andeq	r0, r1, r0, lsl #2
    4d68:	57280205 	strpl	r0, [r8, -r5, lsl #4]!
    4d6c:	cd030800 	stcgt	8, cr0, [r3, #-0]
    4d70:	2f140101 	svccs	0x00140101
    4d74:	21212121 	teqcs	r1, r1, lsr #2
    4d78:	21212121 	teqcs	r1, r1, lsr #2
    4d7c:	21212121 	teqcs	r1, r1, lsr #2
    4d80:	00020221 	andeq	r0, r2, r1, lsr #4
    4d84:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4d88:	00574c02 	subseq	r4, r7, r2, lsl #24
    4d8c:	01e80308 	mvneq	r0, r8, lsl #6
    4d90:	28551901 	ldmdacs	r5, {r0, r8, fp, ip}^
    4d94:	00040245 	andeq	r0, r4, r5, asr #4
    4d98:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4d9c:	00576802 	subseq	r6, r7, r2, lsl #16
    4da0:	02800308 	addeq	r0, r0, #8, 6	; 0x20000000
    4da4:	28551901 	ldmdacs	r5, {r0, r8, fp, ip}^
    4da8:	00040245 	andeq	r0, r4, r5, asr #4
    4dac:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4db0:	00578402 	subseq	r8, r7, r2, lsl #8
    4db4:	02980308 	addseq	r0, r8, #8, 6	; 0x20000000
    4db8:	239b1501 	orrscs	r1, fp, #4194304	; 0x400000
    4dbc:	1e212122 	sufnesp	f2, f1, f2
    4dc0:	3d302f2f 	ldccc	15, cr2, [r0, #-188]!	; 0xffffff44
    4dc4:	01000302 	tsteq	r0, r2, lsl #6
    4dc8:	02050001 	andeq	r0, r5, #1
    4dcc:	080057bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    4dd0:	0102ac03 	tsteq	r2, r3, lsl #24
    4dd4:	02212f13 	eoreq	r2, r1, #19, 30	; 0x4c
    4dd8:	01010002 	tsteq	r1, r2
    4ddc:	c8020500 	stmdagt	r2, {r8, sl}
    4de0:	03080057 	movweq	r0, #32855	; 0x8057
    4de4:	170102ba 			; <UNDEFINED> instruction: 0x170102ba
    4de8:	01000602 	tsteq	r0, r2, lsl #12
    4dec:	02050001 	andeq	r0, r5, #1
    4df0:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
    4df4:	0102cc03 	tsteq	r2, r3, lsl #24
    4df8:	00060217 	andeq	r0, r6, r7, lsl r2
    4dfc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4e00:	0057e002 	subseq	lr, r7, r2
    4e04:	02e10308 	rsceq	r0, r1, #8, 6	; 0x20000000
    4e08:	011b0301 	tsteq	fp, r1, lsl #6
    4e0c:	03200d03 	teqeq	r0, #3, 26	; 0xc0
    4e10:	1b032e58 	blne	d0778 <_Min_Stack_Size+0xd0378>
    4e14:	304d2f2e 	subcc	r2, sp, lr, lsr #30
    4e18:	79033136 	stmdbvc	r3, {r1, r2, r4, r5, r8, ip, sp}
    4e1c:	03272520 	teqeq	r7, #32, 10	; 0x8000000
    4e20:	242f206a 	strtcs	r2, [pc], #-106	; 4e28 <_Min_Stack_Size+0x4a28>
    4e24:	03201503 	teqeq	r0, #12582912	; 0xc00000
    4e28:	3d2d3c6c 	stccc	12, cr3, [sp, #-432]!	; 0xfffffe50
    4e2c:	20150331 	andscs	r0, r5, r1, lsr r3
    4e30:	312e7003 	teqcc	lr, r3
    4e34:	362e7803 	strtcc	r7, [lr], -r3, lsl #16
    4e38:	032e7803 	teqeq	lr, #196608	; 0x30000
    4e3c:	78032009 	stmdavc	r3, {r0, r3, sp}
    4e40:	243d262e 	ldrtcs	r2, [sp], #-1582	; 0x62e
    4e44:	2d3d234b 	ldccs	3, cr2, [sp, #-300]!	; 0xfffffed4
    4e48:	322f233d 	eorcc	r2, pc, #-201326592	; 0xf4000000
    4e4c:	1c24221f 	sfmne	f2, 4, [r4], #-124	; 0xffffff84
    4e50:	03233d2d 	teqeq	r3, #2880	; 0xb40
    4e54:	03587fbf 	cmpeq	r8, #764	; 0x2fc
    4e58:	212000c1 	smlawtcs	r0, r1, r0, r0
    4e5c:	00040222 	andeq	r0, r4, r2, lsr #4
    4e60:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4e64:	00589c02 	subseq	r9, r8, r2, lsl #24
    4e68:	03af0308 			; <UNDEFINED> instruction: 0x03af0308
    4e6c:	031c1601 	tsteq	ip, #1048576	; 0x100000
    4e70:	77032018 	smladvc	r3, r8, r0, r2
    4e74:	200a032e 	andcs	r0, sl, lr, lsr #6
    4e78:	03207603 	teqeq	r0, #3145728	; 0x300000
    4e7c:	03212009 	teqeq	r1, #9
    4e80:	2321206b 	teqcs	r1, #107	; 0x6b
    4e84:	21262321 	teqcs	r6, r1, lsr #6
    4e88:	23272121 	teqcs	r7, #1073741832	; 0x40000008
    4e8c:	02212321 	eoreq	r2, r1, #-2080374784	; 0x84000000
    4e90:	01010003 	tsteq	r1, r3
    4e94:	d0020500 	andle	r0, r2, r0, lsl #10
    4e98:	03080058 	movweq	r0, #32856	; 0x8058
    4e9c:	190103e0 	stmdbne	r1, {r5, r6, r7, r8, r9}
    4ea0:	0245281d 	subeq	r2, r5, #1900544	; 0x1d0000
    4ea4:	01010004 	tsteq	r1, r4
    4ea8:	e4020500 	str	r0, [r2], #-1280	; 0x500
    4eac:	03080058 	movweq	r0, #32856	; 0x8058
    4eb0:	150103f9 	strne	r0, [r1, #-1017]	; 0x3f9
    4eb4:	211f2176 	tstcs	pc, r6, ror r1	; <UNPREDICTABLE>
    4eb8:	01022f22 	tsteq	r2, r2, lsr #30
    4ebc:	00010100 	andeq	r0, r1, r0, lsl #2
    4ec0:	59000205 	stmdbpl	r0, {r0, r2, r9}
    4ec4:	8c030800 	stchi	8, cr0, [r3], {-0}
    4ec8:	2f130104 	svccs	0x00130104
    4ecc:	01000202 	tsteq	r0, r2, lsl #4
    4ed0:	02050001 	andeq	r0, r5, #1
    4ed4:	08005908 	stmdaeq	r0, {r3, r8, fp, ip, lr}
    4ed8:	01049d03 	tsteq	r4, r3, lsl #26
    4edc:	66090318 			; <UNDEFINED> instruction: 0x66090318
    4ee0:	01000402 	tsteq	r0, r2, lsl #8
    4ee4:	02050001 	andeq	r0, r5, #1
    4ee8:	0800591c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, lr}
    4eec:	0104b803 	tsteq	r4, r3, lsl #16
    4ef0:	03200a03 	teqeq	r0, #12288	; 0x3000
    4ef4:	674e200e 	strbvs	r2, [lr, -lr]
    4ef8:	232e7003 	teqcs	lr, #3
    4efc:	7a032221 	bvc	cd788 <_Min_Stack_Size+0xcd388>
    4f00:	024b4120 	subeq	r4, fp, #32, 2
    4f04:	01010008 	tsteq	r1, r8
    4f08:	60020500 	andvs	r0, r2, r0, lsl #10
    4f0c:	03080059 	movweq	r0, #32857	; 0x8059
    4f10:	140104df 	strne	r0, [r1], #-1247	; 0x4df
    4f14:	0202212f 	andeq	r2, r2, #-1073741813	; 0xc000000b
    4f18:	00010100 	andeq	r0, r1, r0, lsl #2
    4f1c:	596c0205 	stmdbpl	ip!, {r0, r2, r9}^
    4f20:	f1030800 			; <UNDEFINED> instruction: 0xf1030800
    4f24:	1d190104 	ldfnes	f0, [r9, #-16]
    4f28:	77034028 	strvc	r4, [r3, -r8, lsr #32]
    4f2c:	00040274 	andeq	r0, r4, r4, ror r2
    4f30:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4f34:	00598c02 	subseq	r8, r9, r2, lsl #24
    4f38:	058e0308 	streq	r0, [lr, #776]	; 0x308
    4f3c:	200e0301 	andcs	r0, lr, r1, lsl #6
    4f40:	2d3d302d 	ldccs	0, cr3, [sp, #-180]!	; 0xffffff4c
    4f44:	00020222 	andeq	r0, r2, r2, lsr #4
    4f48:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4f4c:	0059a802 	subseq	sl, r9, r2, lsl #16
    4f50:	05a90308 	streq	r0, [r9, #776]!	; 0x308
    4f54:	212f1401 	teqcs	pc, r1, lsl #8
    4f58:	00020221 	andeq	r0, r2, r1, lsr #4
    4f5c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4f60:	0059b402 	subseq	fp, r9, r2, lsl #8
    4f64:	05bd0308 	ldreq	r0, [sp, #776]!	; 0x308
    4f68:	234b2801 	movtcs	r2, #47105	; 0xb801
    4f6c:	1b273f47 	blne	9d4c90 <_Min_Stack_Size+0x9d4890>
    4f70:	031f2f2d 	tsteq	pc, #45, 30	; 0xb4
    4f74:	241e200a 	ldrcs	r2, [lr], #-10
    4f78:	1f252c22 	svcne	0x00252c22
    4f7c:	79032730 	stmdbvc	r3, {r4, r5, r8, r9, sl, sp}
    4f80:	200a032e 	andcs	r0, sl, lr, lsr #6
    4f84:	2b3f1e23 	blcs	fcc818 <_Min_Stack_Size+0xfcc418>
    4f88:	22311d31 	eorscs	r1, r1, #3136	; 0xc40
    4f8c:	21212d2f 	teqcs	r1, pc, lsr #26
    4f90:	022e7103 	eoreq	r7, lr, #-1073741824	; 0xc0000000
    4f94:	01010002 	tsteq	r1, r2
    4f98:	28020500 	stmdacs	r2, {r8, sl}
    4f9c:	0308005a 	movweq	r0, #32858	; 0x805a
    4fa0:	140105fa 	strne	r0, [r1], #-1530	; 0x5fa
    4fa4:	01000202 	tsteq	r0, r2, lsl #4
    4fa8:	02050001 	andeq	r0, r5, #1
    4fac:	08005a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, lr}
    4fb0:	01068903 	tsteq	r6, r3, lsl #18
    4fb4:	00020214 	andeq	r0, r2, r4, lsl r2
    4fb8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4fbc:	005a3002 	subseq	r3, sl, r2
    4fc0:	06990308 	ldreq	r0, [r9], r8, lsl #6
    4fc4:	01090301 	tsteq	r9, r1, lsl #6
    4fc8:	03207703 	teqeq	r0, #786432	; 0xc0000
    4fcc:	4f24200b 	svcmi	0x0024200b
    4fd0:	0b03301f 	bleq	d1054 <_Min_Stack_Size+0xd0c54>
    4fd4:	321d244a 	andscc	r2, sp, #1241513984	; 0x4a000000
    4fd8:	2e760335 	mrccs	3, 3, r0, cr6, cr5, {1}
    4fdc:	26241c24 	strtcs	r1, [r4], -r4, lsr #24
    4fe0:	2a312f1c 	bcs	c50c58 <_Min_Stack_Size+0xc50858>
    4fe4:	1e252321 	cdpne	3, 2, cr2, cr5, cr1, {1}
    4fe8:	00050222 	andeq	r0, r5, r2, lsr #4
    4fec:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4ff0:	005a8802 	subseq	r8, sl, r2, lsl #16
    4ff4:	06d70308 	ldrbeq	r0, [r7], r8, lsl #6
    4ff8:	24301701 	ldrtcs	r1, [r0], #-1793	; 0x701
    4ffc:	0c031f4f 	stceq	15, cr1, [r3], {79}	; 0x4f
    5000:	243e2f3c 	ldrtcs	r2, [lr], #-3900	; 0xf3c
    5004:	034c1f4f 	movteq	r1, #53071	; 0xcf4f
    5008:	03694a0b 	cmneq	r9, #45056	; 0xb000
    500c:	05022e5b 	streq	r2, [r2, #-3675]	; 0xe5b
    5010:	00010100 	andeq	r0, r1, r0, lsl #2
    5014:	5ae00205 	bpl	ff805830 <_estack+0xdf7d5830>
    5018:	c9030800 	stmdbgt	r3, {fp}
    501c:	56190107 	ldrpl	r0, [r9], -r7, lsl #2
    5020:	03024626 	movweq	r4, #9766	; 0x2626
    5024:	00010100 	andeq	r0, r1, r0, lsl #2
    5028:	5afc0205 	bpl	fff05844 <_estack+0xdfed5844>
    502c:	e3030800 	movw	r0, #14336	; 0x3800
    5030:	03180107 	tsteq	r8, #-1073741823	; 0xc0000001
    5034:	04026609 	streq	r6, [r2], #-1545	; 0x609
    5038:	00010100 	andeq	r0, r1, r0, lsl #2
    503c:	5b100205 	blpl	405858 <_Min_Stack_Size+0x405458>
    5040:	ff030800 			; <UNDEFINED> instruction: 0xff030800
    5044:	02170107 	andseq	r0, r7, #-1073741823	; 0xc0000001
    5048:	01010006 	tsteq	r1, r6
    504c:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    5050:	0308005b 	movweq	r0, #32859	; 0x805b
    5054:	18010892 	stmdane	r1, {r1, r4, r7, fp}
    5058:	00580903 	subseq	r0, r8, r3, lsl #18
    505c:	06010402 	streq	r0, [r1], -r2, lsl #8
    5060:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    5064:	4e220601 	cfmadda32mi	mvax0, mvax0, mvfx2, mvfx1
    5068:	00010223 	andeq	r0, r1, r3, lsr #4
    506c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5070:	005b3c02 	subseq	r3, fp, r2, lsl #24
    5074:	08b80308 	ldmeq	r8!, {r3, r8, r9}
    5078:	06021701 	streq	r1, [r2], -r1, lsl #14
    507c:	e4010100 	str	r0, [r1], #-256	; 0x100
    5080:	02000005 	andeq	r0, r0, #5
    5084:	00018800 	andeq	r8, r1, r0, lsl #16
    5088:	fb010200 	blx	45892 <_Min_Stack_Size+0x45492>
    508c:	01000d0e 	tsteq	r0, lr, lsl #26
    5090:	00010101 	andeq	r0, r1, r1, lsl #2
    5094:	00010000 	andeq	r0, r1, r0
    5098:	4f430100 	svcmi	0x00430100
    509c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    50a0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    50a4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    50a8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    50ac:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    50b0:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    50b4:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    50b8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    50bc:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    50c0:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    50c4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    50c8:	445f6870 	ldrbmi	r6, [pc], #-2160	; 50d0 <_Min_Stack_Size+0x4cd0>
    50cc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    50d0:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    50d4:	752f0063 	strvc	r0, [pc, #-99]!	; 5079 <_Min_Stack_Size+0x4c79>
    50d8:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    50dc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    50e0:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    50e4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    50e8:	616d2f62 	cmnvs	sp, r2, ror #30
    50ec:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    50f0:	752f0065 	strvc	r0, [pc, #-101]!	; 5093 <_Min_Stack_Size+0x4c93>
    50f4:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    50f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    50fc:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    5100:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5104:	4f430062 	svcmi	0x00430062
    5108:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    510c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    5110:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    5114:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    5118:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    511c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    5120:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    5124:	5349534d 	movtpl	r5, #37709	; 0x934d
    5128:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    512c:	2f656369 	svccs	0x00656369
    5130:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    5134:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    5138:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    513c:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    5140:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    5144:	524f4300 	subpl	r4, pc, #0, 6
    5148:	5f584554 	svcpl	0x00584554
    514c:	5f46344d 	svcpl	0x0046344d
    5150:	334d5453 	movtcc	r5, #54355	; 0xd453
    5154:	2f344632 	svccs	0x00344632
    5158:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    515c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    5160:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    5164:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    5168:	5f787834 	svcpl	0x00787834
    516c:	50647453 	rsbpl	r7, r4, r3, asr r4
    5170:	70697265 	rsbvc	r7, r9, r5, ror #4
    5174:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    5178:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    517c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5180:	524f4300 	subpl	r4, pc, #0, 6
    5184:	5f584554 	svcpl	0x00584554
    5188:	5f46344d 	svcpl	0x0046344d
    518c:	334d5453 	movtcc	r5, #54355	; 0xd453
    5190:	2f344632 	svccs	0x00344632
    5194:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    5198:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    519c:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    51a0:	2f534953 	svccs	0x00534953
    51a4:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    51a8:	00656475 	rsbeq	r6, r5, r5, ror r4
    51ac:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    51b0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    51b4:	665f7878 			; <UNDEFINED> instruction: 0x665f7878
    51b8:	632e636d 	teqvs	lr, #-1275068415	; 0xb4000001
    51bc:	00000100 	andeq	r0, r0, r0, lsl #2
    51c0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    51c4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    51c8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    51cc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    51d0:	00000200 	andeq	r0, r0, r0, lsl #4
    51d4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    51d8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    51dc:	00000300 	andeq	r0, r0, r0, lsl #6
    51e0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    51e4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    51e8:	00682e78 	rsbeq	r2, r8, r8, ror lr
    51ec:	73000004 	movwvc	r0, #4
    51f0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    51f4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    51f8:	636d665f 	cmnvs	sp, #99614720	; 0x5f00000
    51fc:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    5200:	6f630000 	svcvs	0x00630000
    5204:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    5208:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    520c:	00000600 	andeq	r0, r0, r0, lsl #12
    5210:	02050000 	andeq	r0, r5, #0
    5214:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
    5218:	01018203 	tsteq	r1, r3, lsl #4
    521c:	4d272c27 	stcmi	12, cr2, [r7, #-156]!	; 0xffffff64
    5220:	672d212d 	strvs	r2, [sp, -sp, lsr #2]!
    5224:	3c77032f 	ldclcc	3, cr0, [r7], #-188	; 0xffffff44
    5228:	01000402 	tsteq	r0, r2, lsl #8
    522c:	02050001 	andeq	r0, r5, #1
    5230:	08005b80 	stmdaeq	r0, {r7, r8, r9, fp, ip, lr}
    5234:	01019d03 	tsteq	r1, r3, lsl #26
    5238:	212e1c03 	teqcs	lr, r3, lsl #24
    523c:	2121213d 	teqcs	r1, sp, lsr r1
    5240:	76032321 	strvc	r2, [r3], -r1, lsr #6
    5244:	2f2f2f2e 	svccs	0x002f2f2e
    5248:	21212121 	teqcs	r1, r1, lsr #2
    524c:	1b222321 	blne	88ded8 <_Min_Stack_Size+0x88dad8>
    5250:	3d2f1f30 	stccc	15, cr1, [pc, #-192]!	; 5198 <_Min_Stack_Size+0x4d98>
    5254:	7003243d 	andvc	r2, r3, sp, lsr r4
    5258:	2012032e 	andscs	r0, r2, lr, lsr #6
    525c:	580c035c 	stmdapl	ip, {r2, r3, r4, r6, r8, r9}
    5260:	2221222d 	eorcs	r2, r1, #-805306366	; 0xd0000002
    5264:	2f2f211b 	svccs	0x002f211b
    5268:	3250292f 	subscc	r2, r0, #770048	; 0xbc000
    526c:	032e7603 	teqeq	lr, #3145728	; 0x300000
    5270:	13032e0a 	movwne	r2, #15882	; 0x3e0a
    5274:	02008520 	andeq	r8, r0, #32, 10	; 0x8000000
    5278:	56030104 	strpl	r0, [r3], -r4, lsl #2
    527c:	1c323e3c 	ldcne	14, cr3, [r2], #-240	; 0xffffff10
    5280:	1c4b4b22 	mcrrne	11, 2, r4, fp, cr2
    5284:	58180332 	ldmdapl	r8, {r1, r4, r5, r8, r9}
    5288:	21222d21 	teqcs	r2, r1, lsr #26
    528c:	2f211c21 	svccs	0x00211c21
    5290:	332a322b 	teqcc	sl, #-1342177278	; 0xb0000002
    5294:	2e0d0329 	cdpcs	3, 0, cr0, cr13, cr9, {1}
    5298:	01000302 	tsteq	r0, r2, lsl #6
    529c:	02050001 	andeq	r0, r5, #1
    52a0:	08005c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, ip, lr}
    52a4:	01028103 	tsteq	r2, r3, lsl #2
    52a8:	03201803 	teqeq	r0, #196608	; 0x30000
    52ac:	72032079 	andvc	r2, r3, #121	; 0x79
    52b0:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    52b4:	03207103 	teqeq	r0, #-1073741824	; 0xc0000000
    52b8:	78032011 	stmdavc	r3, {r0, r4, sp}
    52bc:	79032f20 	stmdbvc	r3, {r5, r8, r9, sl, fp, sp}
    52c0:	0321342e 	teqeq	r1, #771751936	; 0x2e000000
    52c4:	222b2079 	eorcs	r2, fp, #121	; 0x79
    52c8:	21212122 	teqcs	r1, r2, lsr #2
    52cc:	21212321 	teqcs	r1, r1, lsr #6
    52d0:	207a0328 	rsbscs	r0, sl, r8, lsr #6
    52d4:	21212221 	teqcs	r1, r1, lsr #4
    52d8:	211e271d 	tstcs	lr, sp, lsl r7
    52dc:	21212122 	teqcs	r1, r2, lsr #2
    52e0:	00020221 	andeq	r0, r2, r1, lsr #4
    52e4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    52e8:	005cec02 	subseq	lr, ip, r2, lsl #24
    52ec:	02ae0308 	adceq	r0, lr, #8, 6	; 0x20000000
    52f0:	7d284001 	stcvc	0, cr4, [r8, #-4]!
    52f4:	01000502 	tsteq	r0, r2, lsl #10
    52f8:	02050001 	andeq	r0, r5, #1
    52fc:	08005d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, lr}
    5300:	0102f703 	tsteq	r2, r3, lsl #14
    5304:	09032316 	stmdbeq	r3, {r1, r2, r4, r8, r9, sp}
    5308:	212c3e2e 	teqcs	ip, lr, lsr #28
    530c:	2121211f 	teqcs	r1, pc, lsl r1
    5310:	01000202 	tsteq	r0, r2, lsl #4
    5314:	02050001 	andeq	r0, r5, #1
    5318:	08005d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, lr}
    531c:	01039603 	tsteq	r3, r3, lsl #12
    5320:	362e1603 	strtcc	r1, [lr], -r3, lsl #12
    5324:	20740326 	rsbscs	r0, r4, r6, lsr #6
    5328:	74032528 	strvc	r2, [r3], #-1320	; 0x528
    532c:	3e332f2e 	cdpcc	15, 3, cr2, cr3, cr14, {1}
    5330:	21207503 	teqcs	r0, r3, lsl #10
    5334:	200e032f 	andcs	r0, lr, pc, lsr #6
    5338:	03207503 	teqeq	r0, #12582912	; 0xc00000
    533c:	7703200e 	strvc	r2, [r3, -lr]
    5340:	221f3420 	andscs	r3, pc, #32, 8	; 0x20000000
    5344:	2d1c331d 	ldccs	3, cr3, [ip, #-116]	; 0xffffff8c
    5348:	332e7503 	teqcc	lr, #12582912	; 0xc00000
    534c:	352e0e03 	strcc	r0, [lr, #-3587]!	; 0xe03
    5350:	333c6703 	teqcc	ip, #786432	; 0xc0000
    5354:	032e7603 	teqeq	lr, #3145728	; 0x300000
    5358:	15032e09 	strne	r2, [r3, #-3593]	; 0xe09
    535c:	2221212e 	eorcs	r2, r1, #-2147483637	; 0x8000000b
    5360:	01000302 	tsteq	r0, r2, lsl #6
    5364:	02050001 	andeq	r0, r5, #1
    5368:	08005da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, lr}
    536c:	0103d703 	tsteq	r3, r3, lsl #14
    5370:	1c200d03 	stcne	13, cr0, [r0], #-12
    5374:	1f2e7a03 	svcne	0x002e7a03
    5378:	21221f30 	teqcs	r2, r0, lsr pc
    537c:	21212121 	teqcs	r1, r1, lsr #2
    5380:	21212121 	teqcs	r1, r1, lsr #2
    5384:	02212121 	eoreq	r2, r1, #1073741832	; 0x40000008
    5388:	01010002 	tsteq	r1, r2
    538c:	d8020500 	stmdale	r2, {r8, sl}
    5390:	0308005d 	movweq	r0, #32861	; 0x805d
    5394:	160103f4 			; <UNDEFINED> instruction: 0x160103f4
    5398:	88322223 	ldmdahi	r2!, {r0, r1, r5, r9, sp}
    539c:	0b023222 	bleq	91c2c <_Min_Stack_Size+0x9182c>
    53a0:	00010100 	andeq	r0, r1, r0, lsl #2
    53a4:	5e0c0205 	cdppl	2, 0, cr0, cr12, cr5, {0}
    53a8:	9c030800 	stcls	8, cr0, [r3], {-0}
    53ac:	23160104 	tstcs	r6, #4, 2
    53b0:	22883222 	addcs	r3, r8, #536870914	; 0x20000002
    53b4:	000b0232 	andeq	r0, fp, r2, lsr r2
    53b8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    53bc:	005e4002 	subseq	r4, lr, r2
    53c0:	04c30308 	strbeq	r0, [r3], #776	; 0x308
    53c4:	33231501 	teqcc	r3, #4194304	; 0x400000
    53c8:	0001024e 	andeq	r0, r1, lr, asr #4
    53cc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    53d0:	005e5002 	subseq	r5, lr, r2
    53d4:	05830308 	streq	r0, [r3, #776]	; 0x308
    53d8:	2c3e1401 	cfldrscs	mvf1, [lr], #-4
    53dc:	21211f21 	teqcs	r1, r1, lsr #30
    53e0:	02022121 	andeq	r2, r2, #1073741832	; 0x40000008
    53e4:	00010100 	andeq	r0, r1, r0, lsl #2
    53e8:	5e6c0205 	cdppl	2, 6, cr0, cr12, cr5, {0}
    53ec:	94030800 	strls	r0, [r3], #-2048	; 0x800
    53f0:	16030105 	strne	r0, [r3], -r5, lsl #2
    53f4:	26242120 	strtcs	r2, [r4], -r0, lsr #2
    53f8:	20710326 	rsbscs	r0, r1, r6, lsr #6
    53fc:	302d211d 	eorcc	r2, sp, sp, lsl r1
    5400:	212f2748 	teqcs	pc, r8, asr #14
    5404:	212f1e1f 	teqcs	pc, pc, lsl lr	; <UNPREDICTABLE>
    5408:	1f30272c 	svcne	0x0030272c
    540c:	2c212f1e 	stccs	15, cr2, [r1], #-120	; 0xffffff88
    5410:	1e1f3027 	cdpne	0, 1, cr3, cr15, cr7, {1}
    5414:	242c212f 	strtcs	r2, [ip], #-303	; 0x12f
    5418:	01000202 	tsteq	r0, r2, lsl #4
    541c:	02050001 	andeq	r0, r5, #1
    5420:	08005ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip, lr}
    5424:	0105c803 	tsteq	r5, r3, lsl #16
    5428:	1c200903 	stcne	9, cr0, [r0], #-12
    542c:	20780328 	rsbscs	r0, r8, r8, lsr #6
    5430:	21212f1d 	teqcs	r1, sp, lsl pc
    5434:	21212121 	teqcs	r1, r1, lsr #2
    5438:	25212121 	strcs	r2, [r1, #-289]!	; 0x121
    543c:	2121211c 	teqcs	r1, ip, lsl r1
    5440:	00010221 	andeq	r0, r1, r1, lsr #4
    5444:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5448:	005f0002 	subseq	r0, pc, r2
    544c:	05e20308 	strbeq	r0, [r2, #776]!	; 0x308
    5450:	a7281501 	strge	r1, [r8, -r1, lsl #10]!
    5454:	01000802 	tsteq	r0, r2, lsl #16
    5458:	02050001 	andeq	r0, r5, #1
    545c:	08005f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp, ip, lr}
    5460:	0106aa03 	tsteq	r6, r3, lsl #20
    5464:	2d2f6450 	cfstrscs	mvf6, [pc, #-320]!	; 532c <_Min_Stack_Size+0x4f2c>
    5468:	1e23212f 	sufnesp	f2, f3, #10.0
    546c:	01022121 	tsteq	r2, r1, lsr #2
    5470:	00010100 	andeq	r0, r1, r0, lsl #2
    5474:	5f540205 	svcpl	0x00540205
    5478:	be030800 	cdplt	8, 0, cr0, cr3, cr0, {0}
    547c:	1f030106 	svcne	0x00030106
    5480:	24212f2e 	strtcs	r2, [r1], #-3886	; 0xf2e
    5484:	03222f21 	teqeq	r2, #33, 30	; 0x84
    5488:	22212076 	eorcs	r2, r1, #118	; 0x76
    548c:	2f21211f 	svccs	0x0021211f
    5490:	2e7a0321 	cdpcs	3, 7, cr0, cr10, cr1, {1}
    5494:	22200a03 	eorcs	r0, r0, #12288	; 0x3000
    5498:	034a0e03 	movteq	r0, #44547	; 0xae03
    549c:	10032072 	andne	r2, r3, r2, ror r0
    54a0:	231f1f20 	tstcs	pc, #32, 30	; 0x80
    54a4:	1f2d3823 	svcne	0x002d3823
    54a8:	301f223d 	andscc	r2, pc, sp, lsr r2	; <UNPREDICTABLE>
    54ac:	301f301f 	andscc	r3, pc, pc, lsl r0	; <UNPREDICTABLE>
    54b0:	36207a03 	strtcc	r7, [r0], -r3, lsl #20
    54b4:	03201003 	teqeq	r0, #3
    54b8:	322a3c62 	eorcc	r3, sl, #25088	; 0x6200
    54bc:	2e16032a 	cdpcs	3, 1, cr0, cr6, cr10, {1}
    54c0:	03206e03 	teqeq	r0, #3, 28	; 0x30
    54c4:	242d2014 	strtcs	r2, [sp], #-20
    54c8:	1f1d341b 	svcne	0x001d341b
    54cc:	1b332d3b 	blne	cd09c0 <_Min_Stack_Size+0xcd05c0>
    54d0:	1d331c4f 	ldcne	12, cr1, [r3, #-316]!	; 0xfffffec4
    54d4:	6f032922 	svcvs	0x00032922
    54d8:	2e19032e 	cdpcs	3, 1, cr0, cr9, cr14, {1}
    54dc:	03023121 	movweq	r3, #8481	; 0x2121
    54e0:	00010100 	andeq	r0, r1, r0, lsl #2
    54e4:	60280205 	eorvs	r0, r8, r5, lsl #4
    54e8:	98030800 	stmdals	r3, {fp}
    54ec:	0d030107 	stfeqs	f0, [r3, #-28]	; 0xffffffe4
    54f0:	20790320 	rsbscs	r0, r9, r0, lsr #6
    54f4:	2122232a 	teqcs	r2, sl, lsr #6
    54f8:	7a03212d 	bvc	cd9b4 <_Min_Stack_Size+0xcd5b4>
    54fc:	25212120 	strcs	r2, [r1, #-288]!	; 0x120
    5500:	7a032121 	bvc	cd98c <_Min_Stack_Size+0xcd58c>
    5504:	20100320 	andscs	r0, r0, r0, lsr #6
    5508:	21207803 	teqcs	r0, r3, lsl #16
    550c:	21212121 	teqcs	r1, r1, lsr #2
    5510:	01022221 	tsteq	r2, r1, lsr #4
    5514:	00010100 	andeq	r0, r1, r0, lsl #2
    5518:	60600205 	rsbvs	r0, r0, r5, lsl #4
    551c:	b6030800 	strlt	r0, [r3], -r0, lsl #16
    5520:	09030107 	stmdbeq	r3, {r0, r1, r2, r8}
    5524:	1e1f3120 	mufneep	f3, f7, f0
    5528:	232f2a25 	teqcs	pc, #151552	; 0x25000
    552c:	02223329 	eoreq	r3, r2, #-1543503872	; 0xa4000000
    5530:	01010002 	tsteq	r1, r2
    5534:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    5538:	03080060 	movweq	r0, #32864	; 0x8060
    553c:	030107d0 	movweq	r0, #6096	; 0x17d0
    5540:	26480109 	strbcs	r0, [r8], -r9, lsl #2
    5544:	2077034f 	rsbscs	r0, r7, pc, asr #6
    5548:	01000402 	tsteq	r0, r2, lsl #8
    554c:	02050001 	andeq	r0, r5, #1
    5550:	080060a0 	stmdaeq	r0, {r5, r7, sp, lr}
    5554:	0107ea03 	tsteq	r7, r3, lsl #20
    5558:	00090216 	andeq	r0, r9, r6, lsl r2
    555c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5560:	0060b402 	rsbeq	fp, r0, r2, lsl #8
    5564:	07f80308 	ldrbeq	r0, [r8, r8, lsl #6]!
    5568:	09021601 	stmdbeq	r2, {r0, r9, sl, ip}
    556c:	00010100 	andeq	r0, r1, r0, lsl #2
    5570:	60c80205 	sbcvs	r0, r8, r5, lsl #4
    5574:	88030800 	stmdahi	r3, {fp}
    5578:	26410108 	strbcs	r0, [r1], -r8, lsl #2
    557c:	0007027e 	andeq	r0, r7, lr, ror r2
    5580:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5584:	0060f002 	rsbeq	pc, r0, r2
    5588:	08bc0308 	ldmeq	ip!, {r3, r8, r9}
    558c:	33231701 	teqcc	r3, #262144	; 0x40000
    5590:	03343041 	teqeq	r4, #65	; 0x41
    5594:	03342e7a 	teqeq	r4, #1952	; 0x7a0
    5598:	03342e7a 	teqeq	r4, #1952	; 0x7a0
    559c:	0326207a 	teqeq	r6, #122	; 0x7a
    55a0:	3434207a 	ldrtcc	r2, [r4], #-122	; 0x7a
    55a4:	34304134 	ldrtcc	r4, [r0], #-308	; 0x134
    55a8:	342e7a03 	strtcc	r7, [lr], #-2563	; 0xa03
    55ac:	342e7a03 	strtcc	r7, [lr], #-2563	; 0xa03
    55b0:	34207a03 	strtcc	r7, [r0], #-2563	; 0xa03
    55b4:	342e7a03 	strtcc	r7, [lr], #-2563	; 0xa03
    55b8:	032e7003 	teqeq	lr, #3
    55bc:	03798267 	cmneq	r9, #1879048198	; 0x70000006
    55c0:	08027419 	stmdaeq	r2, {r0, r3, r4, sl, ip, sp, lr}
    55c4:	00010100 	andeq	r0, r1, r0, lsl #2
    55c8:	61940205 	orrsvs	r0, r4, r5, lsl #4
    55cc:	89030800 	stmdbhi	r3, {fp}
    55d0:	321a0109 	andscc	r0, sl, #1073741826	; 0x40000002
    55d4:	2a323040 	bcs	c916dc <_Min_Stack_Size+0xc912dc>
    55d8:	24322a32 	ldrtcs	r2, [r2], #-2610	; 0xa32
    55dc:	03200a03 	teqeq	r0, #12288	; 0x3000
    55e0:	025c4a66 	subseq	r4, ip, #417792	; 0x66000
    55e4:	01010005 	tsteq	r1, r5
    55e8:	d8020500 	stmdale	r2, {r8, sl}
    55ec:	03080061 	movweq	r0, #32865	; 0x8061
    55f0:	170109c1 	strne	r0, [r1, -r1, asr #19]
    55f4:	33304032 	teqcc	r0, #50	; 0x32
    55f8:	33293329 	teqcc	r9, #-1543503872	; 0xa4000000
    55fc:	3329331b 	teqcc	r9, #1811939328	; 0x6c000000
    5600:	862e7303 	strthi	r7, [lr], -r3, lsl #6
    5604:	01000802 	tsteq	r0, r2, lsl #16
    5608:	02050001 	andeq	r0, r5, #1
    560c:	0800622c 	stmdaeq	r0, {r2, r3, r5, r9, sp, lr}
    5610:	0109ec03 	tsteq	r9, r3, lsl #24
    5614:	03010b03 	movweq	r0, #6915	; 0x1b03
    5618:	0b032075 	bleq	cd7f4 <_Min_Stack_Size+0xcd3f4>
    561c:	43402420 	movtmi	r2, #1056	; 0x420
    5620:	20780352 	rsbscs	r0, r8, r2, asr r3
    5624:	3a332421 	bcc	cce6b0 <_Min_Stack_Size+0xcce2b0>
    5628:	67201103 	strvs	r1, [r0, -r3, lsl #2]!
    562c:	033c5d03 	teqeq	ip, #3, 26	; 0xc0
    5630:	09034a0e 	stmdbeq	r3, {r1, r2, r3, r9, fp, lr}
    5634:	3c65032e 	stclcc	3, cr0, [r5], #-184	; 0xffffff48
    5638:	034a1203 	movteq	r1, #41475	; 0xa203
    563c:	6d032e09 	stcvs	14, cr2, [r3, #-36]	; 0xffffffdc
    5640:	0005023c 	andeq	r0, r5, ip, lsr r2
    5644:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5648:	00629802 	rsbeq	r9, r2, r2, lsl #16
    564c:	0ab40308 	beq	fed06274 <_estack+0xdecd6274>
    5650:	40321701 	eorsmi	r1, r2, r1, lsl #14
    5654:	33293330 	teqcc	r9, #48, 6	; 0xc0000000
    5658:	331b3329 	tstcc	fp, #-1543503872	; 0xa4000000
    565c:	73033329 	movwvc	r3, #13097	; 0x3329
    5660:	0802862e 	stmdaeq	r2, {r1, r2, r3, r5, r9, sl, pc}
    5664:	26010100 	strcs	r0, [r1], -r0, lsl #2
    5668:	02000002 	andeq	r0, r0, #2
    566c:	00018800 	andeq	r8, r1, r0, lsl #16
    5670:	fb010200 	blx	45e7a <_Min_Stack_Size+0x45a7a>
    5674:	01000d0e 	tsteq	r0, lr, lsl #26
    5678:	00010101 	andeq	r0, r1, r1, lsl #2
    567c:	00010000 	andeq	r0, r1, r0
    5680:	4f430100 	svcmi	0x00430100
    5684:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    5688:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    568c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    5690:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    5694:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    5698:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    569c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    56a0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    56a4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    56a8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    56ac:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    56b0:	445f6870 	ldrbmi	r6, [pc], #-2160	; 56b8 <_Min_Stack_Size+0x52b8>
    56b4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    56b8:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    56bc:	752f0063 	strvc	r0, [pc, #-99]!	; 5661 <_Min_Stack_Size+0x5261>
    56c0:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    56c4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    56c8:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    56cc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    56d0:	616d2f62 	cmnvs	sp, r2, ror #30
    56d4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    56d8:	752f0065 	strvc	r0, [pc, #-101]!	; 567b <_Min_Stack_Size+0x527b>
    56dc:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    56e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    56e4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    56e8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    56ec:	4f430062 	svcmi	0x00430062
    56f0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    56f4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    56f8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    56fc:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    5700:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    5704:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    5708:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    570c:	5349534d 	movtpl	r5, #37709	; 0x934d
    5710:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    5714:	2f656369 	svccs	0x00656369
    5718:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    571c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    5720:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    5724:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    5728:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    572c:	524f4300 	subpl	r4, pc, #0, 6
    5730:	5f584554 	svcpl	0x00584554
    5734:	5f46344d 	svcpl	0x0046344d
    5738:	334d5453 	movtcc	r5, #54355	; 0xd453
    573c:	2f344632 	svccs	0x00344632
    5740:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    5744:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    5748:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    574c:	2f534953 	svccs	0x00534953
    5750:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    5754:	00656475 	rsbeq	r6, r5, r5, ror r4
    5758:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    575c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 5650 <_Min_Stack_Size+0x5250>
    5760:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    5764:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    5768:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 5658 <_Min_Stack_Size+0x5258>
    576c:	61726269 	cmnvs	r2, r9, ror #4
    5770:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    5774:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    5778:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    577c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    5780:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    5784:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    5788:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    578c:	2f726576 	svccs	0x00726576
    5790:	00636e69 	rsbeq	r6, r3, r9, ror #28
    5794:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    5798:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    579c:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    57a0:	632e676e 	teqvs	lr, #28835840	; 0x1b80000
    57a4:	00000100 	andeq	r0, r0, r0, lsl #2
    57a8:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    57ac:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    57b0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    57b4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    57b8:	00000200 	andeq	r0, r0, r0, lsl #4
    57bc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    57c0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    57c4:	00000300 	andeq	r0, r0, r0, lsl #6
    57c8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    57cc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    57d0:	00682e78 	rsbeq	r2, r8, r8, ror lr
    57d4:	63000004 	movwvs	r0, #4
    57d8:	5f65726f 	svcpl	0x0065726f
    57dc:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    57e0:	00050068 	andeq	r0, r5, r8, rrx
    57e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    57e8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    57ec:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    57f0:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    57f4:	00000600 	andeq	r0, r0, r0, lsl #12
    57f8:	02050000 	andeq	r0, r5, #0
    57fc:	080062ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sp, lr}
    5800:	0100e303 	tsteq	r0, r3, lsl #6
    5804:	2d2f4d22 	stccs	13, cr4, [pc, #-136]!	; 5784 <_Min_Stack_Size+0x5384>
    5808:	01000202 	tsteq	r0, r2, lsl #4
    580c:	02050001 	andeq	r0, r5, #1
    5810:	08006304 	stmdaeq	r0, {r2, r8, r9, sp, lr}
    5814:	0100f203 	tsteq	r0, r3, lsl #4
    5818:	45285519 	strmi	r5, [r8, #-1305]!	; 0x519
    581c:	01000402 	tsteq	r0, r2, lsl #8
    5820:	02050001 	andeq	r0, r5, #1
    5824:	08006320 	stmdaeq	r0, {r5, r8, r9, sp, lr}
    5828:	0101b003 	tsteq	r1, r3
    582c:	01025914 	tsteq	r2, r4, lsl r9
    5830:	00010100 	andeq	r0, r1, r0, lsl #2
    5834:	632c0205 	teqvs	ip, #1342177280	; 0x50000000
    5838:	8b030800 	blhi	c7840 <_Min_Stack_Size+0xc7440>
    583c:	55190102 	ldrpl	r0, [r9, #-258]	; 0x102
    5840:	04024528 	streq	r4, [r2], #-1320	; 0x528
    5844:	00010100 	andeq	r0, r1, r0, lsl #2
    5848:	63480205 	movtvs	r0, #33285	; 0x8205
    584c:	a5030800 	strge	r0, [r3, #-2048]	; 0x800
    5850:	03180102 	tsteq	r8, #-2147483648	; 0x80000000
    5854:	0402660c 	streq	r6, [r2], #-1548	; 0x60c
    5858:	00010100 	andeq	r0, r1, r0, lsl #2
    585c:	635c0205 	cmpvs	ip, #1342177280	; 0x50000000
    5860:	c6030800 	strgt	r0, [r3], -r0, lsl #16
    5864:	02160102 	andseq	r0, r6, #-2147483648	; 0x80000000
    5868:	01010008 	tsteq	r1, r8
    586c:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    5870:	03080063 	movweq	r0, #32867	; 0x8063
    5874:	180102d6 	stmdane	r1, {r1, r2, r4, r6, r7, r9}
    5878:	02660c03 	rsbeq	r0, r6, #768	; 0x300
    587c:	01010004 	tsteq	r1, r4
    5880:	80020500 	andhi	r0, r2, r0, lsl #10
    5884:	03080063 	movweq	r0, #32867	; 0x8063
    5888:	170102f4 			; <UNDEFINED> instruction: 0x170102f4
    588c:	01000802 	tsteq	r0, r2, lsl #16
    5890:	Address 0x0000000000005890 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000006f 	andeq	r0, r0, pc, rrx
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
      14:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
      18:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; ffffff0c <_estack+0xdffcff0c>
      1c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
      20:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      24:	732f3446 	teqvc	pc, #1174405120	; 0x46000000
      28:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
      2c:	735f7075 	cmpvc	pc, #117	; 0x75
      30:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      34:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
      38:	3933345f 	ldmdbcc	r3!, {r0, r1, r2, r3, r4, r6, sl, ip, sp}
      3c:	732e7878 	teqvc	lr, #120, 16	; 0x780000
      40:	6f682f00 	svcvs	0x00682f00
      44:	682f656d 	stmdavs	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	; <UNPREDICTABLE>
      48:	2f736470 	svccs	0x00736470
      4c:	6b726f77 	blvs	1c9be30 <_Min_Stack_Size+0x1c9ba30>
      50:	63617073 	cmnvs	r1, #115	; 0x73
      54:	72662f65 	rsbvc	r2, r6, #404	; 0x194
      58:	74726565 	ldrbtvc	r6, [r2], #-1381	; 0x565
      5c:	732d736f 	teqvc	sp, #-1140850687	; 0xbc000001
      60:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      64:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
      68:	20534120 	subscs	r4, r3, r0, lsr #2
      6c:	34322e32 	ldrtcc	r2, [r2], #-3634	; 0xe32
      70:	da800100 	ble	fe000478 <_estack+0xddfd0478>
      74:	04000005 	streq	r0, [r0], #-5
      78:	00001200 	andeq	r1, r0, r0, lsl #4
      7c:	84010400 	strhi	r0, [r1], #-1024	; 0x400
      80:	01000002 	tsteq	r0, r2
      84:	0000018a 	andeq	r0, r0, sl, lsl #3
      88:	00000101 	andeq	r0, r0, r1, lsl #2
      8c:	00000038 	andeq	r0, r0, r8, lsr r0
      90:	00000000 	andeq	r0, r0, r0
      94:	00000088 	andeq	r0, r0, r8, lsl #1
      98:	50060102 	andpl	r0, r6, r2, lsl #2
      9c:	03000001 	movweq	r0, #1
      a0:	000000f2 	strdeq	r0, [r0], -r2
      a4:	00371c02 	eorseq	r1, r7, r2, lsl #24
      a8:	01020000 	mrseq	r0, (UNDEF: 2)
      ac:	00014e08 	andeq	r4, r1, r8, lsl #28
      b0:	05020200 	streq	r0, [r2, #-512]	; 0x200
      b4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      b8:	00005c03 	andeq	r5, r0, r3, lsl #24
      bc:	50260200 	eorpl	r0, r6, r0, lsl #4
      c0:	02000000 	andeq	r0, r0, #0
      c4:	01e50702 	mvneq	r0, r2, lsl #14
      c8:	77030000 	strvc	r0, [r3, -r0]
      cc:	02000003 	andeq	r0, r0, #3
      d0:	00006237 	andeq	r6, r0, r7, lsr r2
      d4:	05040200 	streq	r0, [r4, #-512]	; 0x200
      d8:	000000c5 	andeq	r0, r0, r5, asr #1
      dc:	00005103 	andeq	r5, r0, r3, lsl #2
      e0:	74380200 	ldrtvc	r0, [r8], #-512	; 0x200
      e4:	02000000 	andeq	r0, r0, #0
      e8:	01780704 	cmneq	r8, r4, lsl #14
      ec:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      f0:	0000c005 	andeq	ip, r0, r5
      f4:	07080200 	streq	r0, [r8, -r0, lsl #4]
      f8:	00000173 	andeq	r0, r0, r3, ror r1
      fc:	69050404 	stmdbvs	r5, {r2, sl}
     100:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     104:	017d0704 	cmneq	sp, r4, lsl #14
     108:	f4030000 	vst4.8	{d0-d3}, [r3], r0
     10c:	03000000 	movweq	r0, #0
     110:	00002c2a 	andeq	r2, r0, sl, lsr #24
     114:	005e0300 	subseq	r0, lr, r0, lsl #6
     118:	36030000 	strcc	r0, [r3], -r0
     11c:	00000045 	andeq	r0, r0, r5, asr #32
     120:	00037903 	andeq	r7, r3, r3, lsl #18
     124:	57410300 	strbpl	r0, [r1, -r0, lsl #6]
     128:	03000000 	movweq	r0, #0
     12c:	00000053 	andeq	r0, r0, r3, asr r0
     130:	00694203 	rsbeq	r4, r9, r3, lsl #4
     134:	04020000 	streq	r0, [r2], #-0
     138:	00002c07 	andeq	r2, r0, r7, lsl #24
     13c:	00b80500 	adcseq	r0, r8, r0, lsl #10
     140:	8c060000 	stchi	0, cr0, [r6], {-0}
     144:	ea017004 	b	5c15c <_Min_Stack_Size+0x5bd5c>
     148:	07000001 	streq	r0, [r0, -r1]
     14c:	00000077 	andeq	r0, r0, r7, ror r0
     150:	ea017204 	b	5c968 <_Min_Stack_Size+0x5c568>
     154:	00000001 	andeq	r0, r0, r1
     158:	0000b307 	andeq	fp, r0, r7, lsl #6
     15c:	01730400 	cmneq	r3, r0, lsl #8
     160:	000000ca 	andeq	r0, r0, sl, asr #1
     164:	02090704 	andeq	r0, r9, #4, 14	; 0x100000
     168:	74040000 	strvc	r0, [r4], #-0
     16c:	0000ca01 	andeq	ip, r0, r1, lsl #20
     170:	48070800 	stmdami	r7, {fp}
     174:	04000001 	streq	r0, [r0], #-1
     178:	00ca0175 	sbceq	r0, sl, r5, ror r1
     17c:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     180:	00524353 	subseq	r4, r2, r3, asr r3
     184:	ca017604 	bgt	5d99c <_Min_Stack_Size+0x5d59c>
     188:	10000000 	andne	r0, r0, r0
     18c:	52434308 	subpl	r4, r3, #8, 6	; 0x20000000
     190:	01770400 	cmneq	r7, r0, lsl #8
     194:	000000ca 	andeq	r0, r0, sl, asr #1
     198:	48530814 	ldmdami	r3, {r2, r4, fp}^
     19c:	78040050 	stmdavc	r4, {r4, r6}
     1a0:	0001ff01 	andeq	pc, r1, r1, lsl #30
     1a4:	b8071800 	stmdalt	r7, {fp, ip}
     1a8:	04000001 	streq	r0, [r0], #-1
     1ac:	00ca0179 	sbceq	r0, sl, r9, ror r1
     1b0:	07240000 	streq	r0, [r4, -r0]!
     1b4:	000000fc 	strdeq	r0, [r0], -ip
     1b8:	ca017a04 	bgt	5e9d0 <_Min_Stack_Size+0x5e5d0>
     1bc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     1c0:	00022807 	andeq	r2, r2, r7, lsl #16
     1c4:	017b0400 	cmneq	fp, r0, lsl #8
     1c8:	000000ca 	andeq	r0, r0, sl, asr #1
     1cc:	0213072c 	andseq	r0, r3, #44, 14	; 0xb00000
     1d0:	7c040000 	stcvc	0, cr0, [r4], {-0}
     1d4:	0000ca01 	andeq	ip, r0, r1, lsl #20
     1d8:	d4073000 	strle	r3, [r7], #-0
     1dc:	04000001 	streq	r0, [r0], #-1
     1e0:	00ca017d 	sbceq	r0, sl, sp, ror r1
     1e4:	07340000 	ldreq	r0, [r4, -r0]!
     1e8:	000000ce 	andeq	r0, r0, lr, asr #1
     1ec:	ca017e04 	bgt	5fa04 <_Min_Stack_Size+0x5f604>
     1f0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     1f4:	00038107 	andeq	r8, r3, r7, lsl #2
     1f8:	017f0400 	cmneq	pc, r0, lsl #8
     1fc:	000000ca 	andeq	r0, r0, sl, asr #1
     200:	4650083c 			; <UNDEFINED> instruction: 0x4650083c
     204:	80040052 	andhi	r0, r4, r2, asr r0
     208:	00021401 	andeq	r1, r2, r1, lsl #8
     20c:	44084000 	strmi	r4, [r8], #-0
     210:	04005246 	streq	r5, [r0], #-582	; 0x246
     214:	01ea0181 	mvneq	r0, r1, lsl #3
     218:	08480000 	stmdaeq	r8, {}^	; <UNPREDICTABLE>
     21c:	00524441 	subseq	r4, r2, r1, asr #8
     220:	ea018204 	b	60a38 <_Min_Stack_Size+0x60638>
     224:	4c000001 	stcmi	0, cr0, [r0], {1}
     228:	00023707 	andeq	r3, r2, r7, lsl #14
     22c:	01830400 	orreq	r0, r3, r0, lsl #8
     230:	0000022e 	andeq	r0, r0, lr, lsr #4
     234:	020e0750 	andeq	r0, lr, #80, 14	; 0x1400000
     238:	84040000 	strhi	r0, [r4], #-0
     23c:	00024801 	andeq	r4, r2, r1, lsl #16
     240:	3c076000 	stccc	0, cr6, [r7], {-0}
     244:	04000002 	streq	r0, [r0], #-2
     248:	02380185 	eorseq	r0, r8, #1073741857	; 0x40000021
     24c:	07740000 	ldrbeq	r0, [r4, -r0]!
     250:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
     254:	ca018604 	bgt	61a6c <_Min_Stack_Size+0x6166c>
     258:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     25c:	00ca0900 	sbceq	r0, sl, r0, lsl #18
     260:	970a0000 	strls	r0, [sl, -r0]
     264:	ff000000 			; <UNDEFINED> instruction: 0xff000000
     268:	0b000001 	bleq	274 <_Min_Heap_Size+0x274>
     26c:	000000c3 	andeq	r0, r0, r3, asr #1
     270:	ef05000b 	svc	0x0005000b
     274:	0a000001 	beq	280 <_Min_Heap_Size+0x280>
     278:	000000b8 	strheq	r0, [r0], -r8
     27c:	00000214 	andeq	r0, r0, r4, lsl r2
     280:	0000c30b 	andeq	ip, r0, fp, lsl #6
     284:	09000100 	stmdbeq	r0, {r8}
     288:	00000219 	andeq	r0, r0, r9, lsl r2
     28c:	00020405 	andeq	r0, r2, r5, lsl #8
     290:	00b80a00 	adcseq	r0, r8, r0, lsl #20
     294:	022e0000 	eoreq	r0, lr, #0
     298:	c30b0000 	movwgt	r0, #45056	; 0xb000
     29c:	03000000 	movweq	r0, #0
     2a0:	02330900 	eorseq	r0, r3, #0, 18
     2a4:	1e050000 	cdpne	0, 0, cr0, cr5, cr0, {0}
     2a8:	0a000002 	beq	2b8 <_Min_Heap_Size+0x2b8>
     2ac:	000000b8 	strheq	r0, [r0], -r8
     2b0:	00000248 	andeq	r0, r0, r8, asr #4
     2b4:	0000c30b 	andeq	ip, r0, fp, lsl #6
     2b8:	09000400 	stmdbeq	r0, {sl}
     2bc:	0000024d 	andeq	r0, r0, sp, asr #4
     2c0:	00023805 	andeq	r3, r2, r5, lsl #16
     2c4:	009a0c00 	addseq	r0, sl, r0, lsl #24
     2c8:	87040000 	strhi	r0, [r4, -r0]
     2cc:	0000cf01 	andeq	ip, r0, r1, lsl #30
     2d0:	00ad0500 	adceq	r0, sp, r0, lsl #10
     2d4:	010d0000 	mrseq	r0, (UNDEF: 13)
     2d8:	7901f705 	stmdbvc	r1, {r0, r2, r8, r9, sl, ip, sp, lr, pc}
     2dc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     2e0:	000028e4 	andeq	r2, r0, r4, ror #17
     2e4:	45530f00 	ldrbmi	r0, [r3, #-3840]	; 0xf00
     2e8:	00010054 	andeq	r0, r1, r4, asr r0
     2ec:	3e051c06 	cdpcc	12, 0, cr1, cr5, cr6, {0}
     2f0:	0002dc03 	andeq	sp, r2, r3, lsl #24
     2f4:	43410800 	movtmi	r0, #6144	; 0x1800
     2f8:	40050052 	andmi	r0, r5, r2, asr r0
     2fc:	0000ca03 	andeq	ip, r0, r3, lsl #20
     300:	bb070000 	bllt	1c0308 <_Min_Stack_Size+0x1bff08>
     304:	05000000 	streq	r0, [r0, #-0]
     308:	00ca0341 	sbceq	r0, sl, r1, asr #6
     30c:	07040000 	streq	r0, [r4, -r0]
     310:	000000b8 	strheq	r0, [r0], -r8
     314:	ca034205 	bgt	d0b30 <_Min_Stack_Size+0xd0730>
     318:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     31c:	00525308 	subseq	r5, r2, r8, lsl #6
     320:	ca034305 	bgt	d0f3c <_Min_Stack_Size+0xd0b3c>
     324:	0c000000 	stceq	0, cr0, [r0], {-0}
     328:	00524308 	subseq	r4, r2, r8, lsl #6
     32c:	ca034405 	bgt	d1348 <_Min_Stack_Size+0xd0f48>
     330:	10000000 	andne	r0, r0, r0
     334:	0003c507 	andeq	ip, r3, r7, lsl #10
     338:	03450500 	movteq	r0, #21760	; 0x5500
     33c:	000000ca 	andeq	r0, r0, sl, asr #1
     340:	01250714 	teqeq	r5, r4, lsl r7
     344:	46050000 	strmi	r0, [r5], -r0
     348:	0000ca03 	andeq	ip, r0, r3, lsl #20
     34c:	0c001800 	stceq	8, cr1, [r0], {-0}
     350:	0000038f 	andeq	r0, r0, pc, lsl #7
     354:	79034705 	stmdbvc	r3, {r0, r2, r8, r9, sl, lr}
     358:	06000002 	streq	r0, [r0], -r2
     35c:	044b0508 	strbeq	r0, [fp], #-1288	; 0x508
     360:	0000030b 	andeq	r0, r0, fp, lsl #6
     364:	00524308 	subseq	r4, r2, r8, lsl #6
     368:	ca044d05 	bgt	113784 <_Min_Stack_Size+0x113384>
     36c:	00000000 	andeq	r0, r0, r0
     370:	52534308 	subspl	r4, r3, #8, 6	; 0x20000000
     374:	044e0500 	strbeq	r0, [lr], #-1280	; 0x500
     378:	000000ca 	andeq	r0, r0, sl, asr #1
     37c:	450c0004 	strmi	r0, [ip, #-4]
     380:	05000000 	streq	r0, [r0, #-0]
     384:	02e8044f 	rsceq	r0, r8, #1325400064	; 0x4f000000
     388:	90060000 	andls	r0, r6, r0
     38c:	c0045505 	andgt	r5, r4, r5, lsl #10
     390:	08000004 	stmdaeq	r0, {r2}
     394:	05005243 	streq	r5, [r0, #-579]	; 0x243
     398:	00ca0457 	sbceq	r0, sl, r7, asr r4
     39c:	07000000 	streq	r0, [r0, -r0]
     3a0:	0000000a 	andeq	r0, r0, sl
     3a4:	ca045805 	bgt	1163c0 <_Min_Stack_Size+0x115fc0>
     3a8:	04000000 	streq	r0, [r0], #-0
     3ac:	0003b007 	andeq	fp, r3, r7
     3b0:	04590500 	ldrbeq	r0, [r9], #-1280	; 0x500
     3b4:	000000ca 	andeq	r0, r0, sl, asr #1
     3b8:	49430808 	stmdbmi	r3, {r3, fp}^
     3bc:	5a050052 	bpl	14050c <_Min_Stack_Size+0x14010c>
     3c0:	0000ca04 	andeq	ip, r0, r4, lsl #20
     3c4:	7d070c00 	stcvc	12, cr0, [r7, #-0]
     3c8:	05000000 	streq	r0, [r0, #-0]
     3cc:	00ca045b 	sbceq	r0, sl, fp, asr r4
     3d0:	07100000 	ldreq	r0, [r0, -r0]
     3d4:	00000023 	andeq	r0, r0, r3, lsr #32
     3d8:	ca045c05 	bgt	1173f4 <_Min_Stack_Size+0x116ff4>
     3dc:	14000000 	strne	r0, [r0], #-0
     3e0:	00038607 	andeq	r8, r3, r7, lsl #12
     3e4:	045d0500 	ldrbeq	r0, [sp], #-1280	; 0x500
     3e8:	000000ca 	andeq	r0, r0, sl, asr #1
     3ec:	023c0718 	eorseq	r0, ip, #24, 14	; 0x600000
     3f0:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
     3f4:	0000b804 	andeq	fp, r0, r4, lsl #16
     3f8:	12071c00 	andne	r1, r7, #0, 24
     3fc:	05000000 	streq	r0, [r0, #-0]
     400:	00ca045f 	sbceq	r0, sl, pc, asr r4
     404:	07200000 	streq	r0, [r0, -r0]!
     408:	000000e9 	andeq	r0, r0, r9, ror #1
     40c:	ca046005 	bgt	118428 <_Min_Stack_Size+0x118028>
     410:	24000000 	strcs	r0, [r0], #-0
     414:	00024607 	andeq	r4, r2, r7, lsl #12
     418:	04610500 	strbteq	r0, [r1], #-1280	; 0x500
     41c:	00000204 	andeq	r0, r0, r4, lsl #4
     420:	036f0728 	cmneq	pc, #40, 14	; 0xa00000
     424:	62050000 	andvs	r0, r5, #0
     428:	0000ca04 	andeq	ip, r0, r4, lsl #20
     42c:	1b073000 	blne	1cc434 <_Min_Stack_Size+0x1cc034>
     430:	05000000 	streq	r0, [r0, #-0]
     434:	00ca0463 	sbceq	r0, sl, r3, ror #8
     438:	07340000 	ldreq	r0, [r4, -r0]!
     43c:	00000136 	andeq	r0, r0, r6, lsr r1
     440:	ca046405 	bgt	11945c <_Min_Stack_Size+0x11905c>
     444:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     448:	00025007 	andeq	r5, r2, r7
     44c:	04650500 	strbteq	r0, [r5], #-1280	; 0x500
     450:	000000b8 	strheq	r0, [r0], -r8
     454:	00a3073c 	adceq	r0, r3, ip, lsr r7
     458:	66050000 	strvs	r0, [r5], -r0
     45c:	0000ca04 	andeq	ip, r0, r4, lsl #20
     460:	5c074000 	stcpl	0, cr4, [r7], {-0}
     464:	05000001 	streq	r0, [r0, #-1]
     468:	00ca0467 	sbceq	r0, sl, r7, ror #8
     46c:	07440000 	strbeq	r0, [r4, -r0]
     470:	00000090 	muleq	r0, r0, r0
     474:	04046805 	streq	r6, [r4], #-2053	; 0x805
     478:	48000002 	stmdami	r0, {r1}
     47c:	00000007 	andeq	r0, r0, r7
     480:	04690500 	strbteq	r0, [r9], #-1280	; 0x500
     484:	000000ca 	andeq	r0, r0, sl, asr #1
     488:	022d0750 	eoreq	r0, sp, #80, 14	; 0x1400000
     48c:	6a050000 	bvs	140494 <_Min_Stack_Size+0x140094>
     490:	0000ca04 	andeq	ip, r0, r4, lsl #20
     494:	86075400 	strhi	r5, [r7], -r0, lsl #8
     498:	05000000 	streq	r0, [r0, #-0]
     49c:	00ca046b 	sbceq	r0, sl, fp, ror #8
     4a0:	07580000 	ldrbeq	r0, [r8, -r0]
     4a4:	00000266 	andeq	r0, r0, r6, ror #4
     4a8:	b8046c05 	stmdalt	r4, {r0, r2, sl, fp, sp, lr}
     4ac:	5c000000 	stcpl	0, cr0, [r0], {-0}
     4b0:	0001f807 	andeq	pc, r1, r7, lsl #16
     4b4:	046d0500 	strbteq	r0, [sp], #-1280	; 0x500
     4b8:	000000ca 	andeq	r0, r0, sl, asr #1
     4bc:	03bb0760 			; <UNDEFINED> instruction: 0x03bb0760
     4c0:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
     4c4:	0000ca04 	andeq	ip, r0, r4, lsl #20
     4c8:	70076400 	andvc	r6, r7, r0, lsl #8
     4cc:	05000002 	streq	r0, [r0, #-2]
     4d0:	0204046f 	andeq	r0, r4, #1862270976	; 0x6f000000
     4d4:	07680000 	strbeq	r0, [r8, -r0]!
     4d8:	00000035 	andeq	r0, r0, r5, lsr r0
     4dc:	ca047005 	bgt	11c4f8 <_Min_Stack_Size+0x11c0f8>
     4e0:	70000000 	andvc	r0, r0, r0
     4e4:	52534308 	subspl	r4, r3, #8, 6	; 0x20000000
     4e8:	04710500 	ldrbteq	r0, [r1], #-1280	; 0x500
     4ec:	000000ca 	andeq	r0, r0, sl, asr #1
     4f0:	027a0774 	rsbseq	r0, sl, #116, 14	; 0x1d00000
     4f4:	72050000 	andvc	r0, r5, #0
     4f8:	00020404 	andeq	r0, r2, r4, lsl #8
     4fc:	67077800 	strvs	r7, [r7, -r0, lsl #16]
     500:	05000000 	streq	r0, [r0, #-0]
     504:	00ca0473 	sbceq	r0, sl, r3, ror r4
     508:	07800000 	streq	r0, [r0, r0]
     50c:	0000003a 	andeq	r0, r0, sl, lsr r0
     510:	ca047405 	bgt	11d52c <_Min_Stack_Size+0x11d12c>
     514:	84000000 	strhi	r0, [r0], #-0
     518:	0003aa07 	andeq	sl, r3, r7, lsl #20
     51c:	04750500 	ldrbteq	r0, [r5], #-1280	; 0x500
     520:	000000ca 	andeq	r0, r0, sl, asr #1
     524:	00ab0788 	adceq	r0, fp, r8, lsl #15
     528:	76050000 	strvc	r0, [r5], -r0
     52c:	0000ca04 	andeq	ip, r0, r4, lsl #20
     530:	0c008c00 	stceq	12, cr8, [r0], {-0}
     534:	000000d3 	ldrdeq	r0, [r0], -r3
     538:	17047805 	strne	r7, [r4, -r5, lsl #16]
     53c:	10000003 	andne	r0, r0, r3
     540:	0000025a 	andeq	r0, r0, sl, asr r2
     544:	01015501 	tsteq	r1, r1, lsl #10
     548:	000004f2 	strdeq	r0, [r0], -r2
     54c:	00016411 	andeq	r6, r1, r1, lsl r4
     550:	015a0100 	cmpeq	sl, r0, lsl #2
     554:	000000ca 	andeq	r0, r0, sl, asr #1
     558:	00006d11 	andeq	r6, r0, r1, lsl sp
     55c:	015a0100 	cmpeq	sl, r0, lsl #2
     560:	000000ca 	andeq	r0, r0, sl, asr #1
     564:	01da1200 	bicseq	r1, sl, r0, lsl #4
     568:	d0010000 	andle	r0, r1, r0
     56c:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
     570:	00000122 	andeq	r0, r0, r2, lsr #2
     574:	052e9c01 	streq	r9, [lr, #-3073]!	; 0xc01
     578:	cc130000 	ldcgt	0, cr0, [r3], {-0}
     57c:	86000004 	strhi	r0, [r0], -r4
     580:	20080003 	andcs	r0, r8, r3
     584:	01000000 	mrseq	r0, (UNDEF: 0)
     588:	002014ef 	eoreq	r1, r0, pc, ror #9
     58c:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
     590:	02000004 	andeq	r0, r0, #4
     594:	e5157891 	ldr	r7, [r5, #-2193]	; 0x891
     598:	02000004 	andeq	r0, r0, #4
     59c:	00007c91 	muleq	r0, r1, ip
     5a0:	01be1600 			; <UNDEFINED> instruction: 0x01be1600
     5a4:	1d010000 	stcne	0, cr0, [r1, #-0]
     5a8:	00046001 	andeq	r6, r4, r1
     5ac:	00009208 	andeq	r9, r0, r8, lsl #4
     5b0:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
     5b4:	17000005 	strne	r0, [r0, -r5]
     5b8:	00706d74 	rsbseq	r6, r0, r4, ror sp
     5bc:	b8011f01 	stmdalt	r1, {r0, r8, r9, sl, fp, ip}
     5c0:	00000000 	andeq	r0, r0, r0
     5c4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     5c8:	00000202 	andeq	r0, r0, r2, lsl #4
     5cc:	b8011f01 	stmdalt	r1, {r0, r8, r9, sl, fp, ip}
     5d0:	54000000 	strpl	r0, [r0], #-0
     5d4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     5d8:	00000143 	andeq	r0, r0, r3, asr #2
     5dc:	b8011f01 	stmdalt	r1, {r0, r8, r9, sl, fp, ip}
     5e0:	8b000000 	blhi	5e8 <_Min_Stack_Size+0x1e8>
     5e4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     5e8:	0000012c 	andeq	r0, r0, ip, lsr #2
     5ec:	b8011f01 	stmdalt	r1, {r0, r8, r9, sl, fp, ip}
     5f0:	b7000000 	strlt	r0, [r0, -r0]
     5f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     5f8:	0000013e 	andeq	r0, r0, lr, lsr r1
     5fc:	b8011f01 	stmdalt	r1, {r0, r8, r9, sl, fp, ip}
     600:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
     604:	00000000 	andeq	r0, r0, r0
     608:	00039d19 	andeq	r9, r3, r9, lsl sp
     60c:	06a70400 	strteq	r0, [r7], r0, lsl #8
     610:	0000025e 	andeq	r0, r0, lr, asr r2
     614:	0002181a 	andeq	r1, r2, sl, lsl r8
     618:	b8b00100 	ldmlt	r0!, {r8}
     61c:	05000000 	streq	r0, [r0, #-0]
     620:	00001003 	andeq	r1, r0, r3
     624:	00970a20 	addseq	r0, r7, r0, lsr #20
     628:	05c20000 	strbeq	r0, [r2]
     62c:	c30b0000 	movwgt	r0, #45056	; 0xb000
     630:	0f000000 	svceq	0x00000000
     634:	2ef61a00 	vmovcs.f32	s3, #96	; 0x60
     638:	b2010000 	andlt	r0, r1, #0
     63c:	000005d3 	ldrdeq	r0, [r0], -r3
     640:	00000305 	andeq	r0, r0, r5, lsl #6
     644:	d8092000 	stmdale	r9, {sp}
     648:	05000005 	streq	r0, [r0, #-5]
     64c:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
     650:	00082500 	andeq	r2, r8, r0, lsl #10
     654:	71000400 	tstvc	r0, r0, lsl #8
     658:	04000001 	streq	r0, [r0], #-1
     65c:	00028401 	andeq	r8, r2, r1, lsl #8
     660:	04160100 	ldreq	r0, [r6], #-256	; 0x100
     664:	01010000 	mrseq	r0, (UNDEF: 1)
     668:	00500000 	subseq	r0, r0, r0
     66c:	00000000 	andeq	r0, r0, r0
     670:	022f0000 	eoreq	r0, pc, #0
     674:	dd020000 	stcle	0, cr0, [r2, #-0]
     678:	01000009 	tsteq	r0, r9
     67c:	029fab04 	addseq	sl, pc, #4, 22	; 0x1000
     680:	2d030000 	stccs	0, cr0, [r3, #-0]
     684:	7200000b 	andvc	r0, r0, #11
     688:	0006ed03 	andeq	lr, r6, r3, lsl #26
     68c:	53037400 	movwpl	r7, #13312	; 0x3400
     690:	75000006 	strvc	r0, [r0, #-6]
     694:	000ac203 	andeq	ip, sl, r3, lsl #4
     698:	84037600 	strhi	r7, [r3], #-1536	; 0x600
     69c:	7b000008 	blvc	6c4 <_Min_Stack_Size+0x2c4>
     6a0:	000b9403 	andeq	r9, fp, r3, lsl #8
     6a4:	73037c00 	movwvc	r7, #15360	; 0x3c00
     6a8:	7e000006 	cdpvc	0, 0, cr0, cr0, cr6, {0}
     6ac:	00080703 	andeq	r0, r8, r3, lsl #14
     6b0:	06037f00 	streq	r7, [r3], -r0, lsl #30
     6b4:	00000005 	andeq	r0, r0, r5
     6b8:	0003ff03 	andeq	pc, r3, r3, lsl #30
     6bc:	84030100 	strhi	r0, [r3], #-256	; 0x100
     6c0:	0200000b 	andeq	r0, r0, #11
     6c4:	0004f803 	andeq	pc, r4, r3, lsl #16
     6c8:	84030300 	strhi	r0, [r3], #-768	; 0x300
     6cc:	0400000a 	streq	r0, [r0], #-10
     6d0:	000ce703 	andeq	lr, ip, r3, lsl #14
     6d4:	e2030500 	and	r0, r3, #0, 10
     6d8:	0600000b 	streq	r0, [r0], -fp
     6dc:	000d0b03 	andeq	r0, sp, r3, lsl #22
     6e0:	4e030700 	cdpmi	7, 0, cr0, cr3, cr0, {0}
     6e4:	0800000a 	stmdaeq	r0, {r1, r3}
     6e8:	0008e503 	andeq	lr, r8, r3, lsl #10
     6ec:	e2030900 	and	r0, r3, #0, 18
     6f0:	0a000009 	beq	71c <_Min_Stack_Size+0x31c>
     6f4:	000d1603 	andeq	r1, sp, r3, lsl #12
     6f8:	af030b00 	svcge	0x00030b00
     6fc:	0c000007 	stceq	0, cr0, [r0], {7}
     700:	0008fa03 	andeq	pc, r8, r3, lsl #20
     704:	c9030d00 	stmdbgt	r3, {r8, sl, fp}
     708:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     70c:	0008b303 	andeq	fp, r8, r3, lsl #6
     710:	a1030f00 	tstge	r3, r0, lsl #30
     714:	10000005 	andne	r0, r0, r5
     718:	0006db03 	andeq	sp, r6, r3, lsl #22
     71c:	6e031100 	adfvss	f1, f3, f0
     720:	1200000c 	andne	r0, r0, #12
     724:	00077803 	andeq	r7, r7, r3, lsl #16
     728:	f1031300 			; <UNDEFINED> instruction: 0xf1031300
     72c:	14000003 	strne	r0, [r0], #-3
     730:	000ca303 	andeq	sl, ip, r3, lsl #6
     734:	cb031500 	blgt	c5b3c <_Min_Stack_Size+0xc573c>
     738:	1600000c 	strne	r0, [r0], -ip
     73c:	0005b303 	andeq	fp, r5, r3, lsl #6
     740:	bc031700 	stclt	7, cr1, [r3], {-0}
     744:	18000009 	stmdane	r0, {r0, r3}
     748:	0009cf03 	andeq	ip, r9, r3, lsl #30
     74c:	16031900 	strne	r1, [r3], -r0, lsl #18
     750:	1a00000a 	bne	780 <_Min_Stack_Size+0x380>
     754:	00081403 	andeq	r1, r8, r3, lsl #8
     758:	d8031b00 	stmdale	r3, {r8, r9, fp, ip}
     75c:	1c00000b 	stcne	0, cr0, [r0], {11}
     760:	000d0103 	andeq	r0, sp, r3, lsl #2
     764:	d2031d00 	andle	r1, r3, #0, 26
     768:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
     76c:	00044603 	andeq	r4, r4, r3, lsl #12
     770:	61031f00 	tstvs	r3, r0, lsl #30
     774:	2000000c 	andcs	r0, r0, ip
     778:	00057903 	andeq	r7, r5, r3, lsl #18
     77c:	cf032100 	svcgt	0x00032100
     780:	22000004 	andcs	r0, r0, #4
     784:	0007a503 	andeq	sl, r7, r3, lsl #10
     788:	f0032300 			; <UNDEFINED> instruction: 0xf0032300
     78c:	24000008 	strcs	r0, [r0], #-8
     790:	00099403 	andeq	r9, r9, r3, lsl #8
     794:	b6032500 	strlt	r2, [r3], -r0, lsl #10
     798:	2600000a 	strcs	r0, [r0], -sl
     79c:	000bbe03 	andeq	fp, fp, r3, lsl #28
     7a0:	85032700 	strhi	r2, [r3, #-1792]	; 0x700
     7a4:	28000007 	stmdacs	r0, {r0, r1, r2}
     7a8:	0004b503 	andeq	fp, r4, r3, lsl #10
     7ac:	1a032900 	bne	cabb4 <_Min_Stack_Size+0xca7b4>
     7b0:	2a000006 	bcs	7d0 <_Min_Stack_Size+0x3d0>
     7b4:	0007d103 	andeq	sp, r7, r3, lsl #2
     7b8:	38032b00 	stmdacc	r3, {r8, r9, fp, sp}
     7bc:	2c000006 	stccs	0, cr0, [r0], {6}
     7c0:	00084303 	andeq	r4, r8, r3, lsl #6
     7c4:	2c032d00 	stccs	13, cr2, [r3], {-0}
     7c8:	2e000005 	cdpcs	0, 0, cr0, cr0, cr5, {0}
     7cc:	000adc03 	andeq	sp, sl, r3, lsl #24
     7d0:	2e032f00 	cdpcs	15, 0, cr2, cr3, cr0, {0}
     7d4:	3000000a 	andcc	r0, r0, sl
     7d8:	00051003 	andeq	r1, r5, r3
     7dc:	db033100 	blle	ccbe4 <_Min_Stack_Size+0xcc7e4>
     7e0:	32000008 	andcc	r0, r0, #8
     7e4:	0009a003 	andeq	sl, r9, r3
     7e8:	0f033300 	svceq	0x00033300
     7ec:	34000006 	strcc	r0, [r0], #-6
     7f0:	000a0b03 	andeq	r0, sl, r3, lsl #22
     7f4:	01033500 	tsteq	r3, r0, lsl #10
     7f8:	36000006 	strcc	r0, [r0], -r6
     7fc:	000b1003 	andeq	r1, fp, r3
     800:	a6033700 	strge	r3, [r3], -r0, lsl #14
     804:	3800000b 	stmdacc	r0, {r0, r1, r3}
     808:	000c7703 	andeq	r7, ip, r3, lsl #14
     80c:	66033900 	strvs	r3, [r3], -r0, lsl #18
     810:	3a000007 	bcc	834 <_Min_Stack_Size+0x434>
     814:	00089003 	andeq	r9, r8, r3
     818:	aa033b00 	bge	cf420 <_Min_Stack_Size+0xcf020>
     81c:	3c000009 	stccc	0, cr0, [r0], {9}
     820:	00087103 	andeq	r7, r8, r3, lsl #2
     824:	de033d00 	cdple	13, 0, cr3, cr3, cr0, {0}
     828:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
     82c:	00090c03 	andeq	r0, r9, r3, lsl #24
     830:	08033f00 	stmdaeq	r3, {r8, r9, sl, fp, ip, sp}
     834:	c0000004 	andgt	r0, r0, r4
     838:	05390300 	ldreq	r0, [r9, #-768]!	; 0x300
     83c:	00c10000 	sbceq	r0, r1, r0
     840:	000cd903 	andeq	sp, ip, r3, lsl #18
     844:	0300c200 	movweq	ip, #512	; 0x200
     848:	00000a8f 	andeq	r0, r0, pc, lsl #21
     84c:	5a0300c3 	bpl	c0b60 <_Min_Stack_Size+0xc0760>
     850:	c4000004 	strgt	r0, [r0], #-4
     854:	05540300 	ldrbeq	r0, [r4, #-768]	; 0x300
     858:	00c50000 	sbceq	r0, r5, r0
     85c:	00067f03 	andeq	r7, r6, r3, lsl #30
     860:	0300c600 	movweq	ip, #1536	; 0x600
     864:	000008c5 	andeq	r0, r0, r5, asr #17
     868:	030300c7 	movweq	r0, #12487	; 0x30c7
     86c:	c8000007 	stmdagt	r0, {r0, r1, r2}
     870:	04210300 	strteq	r0, [r1], #-768	; 0x300
     874:	00c90000 	sbceq	r0, r9, r0
     878:	00073c03 	andeq	r3, r7, r3, lsl #24
     87c:	0300ca00 	movweq	ip, #2560	; 0xa00
     880:	00000b1a 	andeq	r0, r0, sl, lsl fp
     884:	f00300cb 			; <UNDEFINED> instruction: 0xf00300cb
     888:	cc00000c 	stcgt	0, cr0, [r0], {12}
     88c:	094d0300 	stmdbeq	sp, {r8, r9}^
     890:	00cd0000 	sbceq	r0, sp, r0
     894:	000c0203 	andeq	r0, ip, r3, lsl #4
     898:	0300ce00 	movweq	ip, #3584	; 0xe00
     89c:	00000b06 	andeq	r0, r0, r6, lsl #22
     8a0:	ed0300cf 	stc	0, cr0, [r3, #-828]	; 0xfffffcc4
     8a4:	d0000009 	andle	r0, r0, r9
     8a8:	0c340300 	ldceq	3, cr0, [r4], #-0
     8ac:	00d10000 	sbcseq	r0, r1, r0
     8b0:	000c0c03 	andeq	r0, ip, r3, lsl #24
     8b4:	0300d200 	movweq	sp, #512	; 0x200
     8b8:	0000042e 	andeq	r0, r0, lr, lsr #8
     8bc:	9e0300d3 	mcrls	0, 0, r0, cr3, cr3, {6}
     8c0:	d4000004 	strle	r0, [r0], #-4
     8c4:	05970300 	ldreq	r0, [r7, #768]	; 0x300
     8c8:	00d50000 	sbcseq	r0, r5, r0
     8cc:	00072d03 	andeq	r2, r7, r3, lsl #26
     8d0:	0300d600 	movweq	sp, #1536	; 0x600
     8d4:	00000710 	andeq	r0, r0, r0, lsl r7
     8d8:	6c0300d7 	stcvs	0, cr0, [r3], {215}	; 0xd7
     8dc:	d8000009 	stmdale	r0, {r0, r3}
     8e0:	03cb0300 	biceq	r0, fp, #0, 6
     8e4:	00d90000 	sbcseq	r0, r9, r0
     8e8:	00085b03 	andeq	r5, r8, r3, lsl #22
     8ec:	0000da00 	andeq	sp, r0, r0, lsl #20
     8f0:	50060104 	andpl	r0, r6, r4, lsl #2
     8f4:	05000001 	streq	r0, [r0, #-1]
     8f8:	000000f2 	strdeq	r0, [r0], -r2
     8fc:	02b11c02 	adcseq	r1, r1, #512	; 0x200
     900:	01040000 	mrseq	r0, (UNDEF: 4)
     904:	00014e08 	andeq	r4, r1, r8, lsl #28
     908:	05020400 	streq	r0, [r2, #-1024]	; 0x400
     90c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     910:	00005c05 	andeq	r5, r0, r5, lsl #24
     914:	ca260200 	bgt	98111c <_Min_Stack_Size+0x980d1c>
     918:	04000002 	streq	r0, [r0], #-2
     91c:	01e50702 	mvneq	r0, r2, lsl #14
     920:	77050000 	strvc	r0, [r5, -r0]
     924:	02000003 	andeq	r0, r0, #3
     928:	0002dc37 	andeq	sp, r2, r7, lsr ip
     92c:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     930:	000000c5 	andeq	r0, r0, r5, asr #1
     934:	00005105 	andeq	r5, r0, r5, lsl #2
     938:	ee380200 	cdp	2, 3, cr0, cr8, cr0, {0}
     93c:	04000002 	streq	r0, [r0], #-2
     940:	01780704 	cmneq	r8, r4, lsl #14
     944:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     948:	0000c005 	andeq	ip, r0, r5
     94c:	07080400 	streq	r0, [r8, -r0, lsl #8]
     950:	00000173 	andeq	r0, r0, r3, ror r1
     954:	69050406 	stmdbvs	r5, {r1, r2, sl}
     958:	0400746e 	streq	r7, [r0], #-1134	; 0x46e
     95c:	017d0704 	cmneq	sp, r4, lsl #14
     960:	f4050000 	vst4.8	{d0-d3}, [r5], r0
     964:	03000000 	movweq	r0, #0
     968:	0002a62a 	andeq	sl, r2, sl, lsr #12
     96c:	005e0500 	subseq	r0, lr, r0, lsl #10
     970:	36030000 	strcc	r0, [r3], -r0
     974:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
     978:	00037905 	andeq	r7, r3, r5, lsl #18
     97c:	d1410300 	mrsle	r0, (UNDEF: 113)
     980:	05000002 	streq	r0, [r0, #-2]
     984:	00000053 	andeq	r0, r0, r3, asr r0
     988:	02e34203 	rsceq	r4, r3, #805306368	; 0x30000000
     98c:	04040000 	streq	r0, [r4], #-0
     990:	00002c07 	andeq	r2, r0, r7, lsl #24
     994:	03320700 	teqeq	r2, #0, 14
     998:	32080000 	andcc	r0, r8, #0
     99c:	59000003 	stmdbpl	r0, {r0, r1}
     9a0:	09000003 	stmdbeq	r0, {r0, r1}
     9a4:	0000033d 	andeq	r0, r0, sp, lsr r3
     9a8:	1c070001 	stcne	0, cr0, [r7], {1}
     9ac:	07000003 	streq	r0, [r0, -r3]
     9b0:	00000327 	andeq	r0, r0, r7, lsr #6
     9b4:	f704010a 			; <UNDEFINED> instruction: 0xf704010a
     9b8:	00037901 	andeq	r7, r3, r1, lsl #18
     9bc:	28e40300 	stmiacs	r4!, {r8, r9}^
     9c0:	0b000000 	bleq	9c8 <_Min_Stack_Size+0x5c8>
     9c4:	00544553 	subseq	r4, r4, r3, asr r5
     9c8:	290c0001 	stmdbcs	ip, {r0}
     9cc:	0400003d 	streq	r0, [r0], #-61	; 0x3d
     9d0:	036301f7 	cmneq	r3, #-1073741763	; 0xc000003d
     9d4:	010a0000 	mrseq	r0, (UNDEF: 10)
     9d8:	9b01f904 	blls	7edf0 <_Min_Stack_Size+0x7e9f0>
     9dc:	03000003 	movweq	r0, #3
     9e0:	00000488 	andeq	r0, r0, r8, lsl #9
     9e4:	05c00300 	strbeq	r0, [r0, #768]	; 0x300
     9e8:	00010000 	andeq	r0, r1, r0
     9ec:	00092a0c 	andeq	r2, r9, ip, lsl #20
     9f0:	01f90400 	mvnseq	r0, r0, lsl #8
     9f4:	00000385 	andeq	r0, r0, r5, lsl #7
     9f8:	d404280d 	strle	r2, [r4], #-2061	; 0x80d
     9fc:	00043303 	andeq	r3, r4, r3, lsl #6
     a00:	093a0e00 	ldmdbeq	sl!, {r9, sl, fp}
     a04:	d6040000 	strle	r0, [r4], -r0
     a08:	00034403 	andeq	r4, r3, r3, lsl #8
     a0c:	530e0000 	movwpl	r0, #57344	; 0xe000
     a10:	04000004 	streq	r0, [r0], #-4
     a14:	034403d7 	movteq	r0, #17367	; 0x43d7
     a18:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     a1c:	0000064b 	andeq	r0, r0, fp, asr #12
     a20:	4403d804 	strmi	sp, [r3], #-2052	; 0x804
     a24:	08000003 	stmdaeq	r0, {r0, r1}
     a28:	0003d80e 	andeq	sp, r3, lr, lsl #16
     a2c:	03d90400 	bicseq	r0, r9, #0, 8
     a30:	00000344 	andeq	r0, r0, r4, asr #6
     a34:	44490f0c 	strbmi	r0, [r9], #-3852	; 0xf0c
     a38:	da040052 	ble	100b88 <_Min_Stack_Size+0x100788>
     a3c:	00034403 	andeq	r4, r3, r3, lsl #8
     a40:	4f0f1000 	svcmi	0x000f1000
     a44:	04005244 	streq	r5, [r0], #-580	; 0x244
     a48:	034403db 	movteq	r0, #17371	; 0x43db
     a4c:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
     a50:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
     a54:	5903dc04 	stmdbpl	r3, {r2, sl, fp, ip, lr, pc}
     a58:	18000003 	stmdane	r0, {r0, r1}
     a5c:	000bed0e 	andeq	lr, fp, lr, lsl #26
     a60:	03dd0400 	bicseq	r0, sp, #0, 8
     a64:	00000359 	andeq	r0, r0, r9, asr r3
     a68:	07370e1a 			; <UNDEFINED> instruction: 0x07370e1a
     a6c:	de040000 	cdple	0, 0, cr0, cr4, cr0, {0}
     a70:	00034403 	andeq	r4, r3, r3, lsl #8
     a74:	410f1c00 	tstmi	pc, r0, lsl #24
     a78:	04005246 	streq	r5, [r0], #-582	; 0x246
     a7c:	043303df 	ldrteq	r0, [r3], #-991	; 0x3df
     a80:	00200000 	eoreq	r0, r0, r0
     a84:	00034907 	andeq	r4, r3, r7, lsl #18
     a88:	062b0c00 	strteq	r0, [fp], -r0, lsl #24
     a8c:	e0040000 	and	r0, r4, r0
     a90:	0003a703 	andeq	sl, r3, r3, lsl #14
     a94:	05011000 	streq	r1, [r1, #-0]
     a98:	00045937 	andeq	r5, r4, r7, lsr r9
     a9c:	09800300 	stmibeq	r0, {r8, r9}
     aa0:	03000000 	movweq	r0, #0
     aa4:	00000c17 	andeq	r0, r0, r7, lsl ip
     aa8:	86050004 	strhi	r0, [r5], -r4
     aac:	05000005 	streq	r0, [r0, #-5]
     ab0:	0004443a 	andeq	r4, r4, sl, lsr r4
     ab4:	05011000 	streq	r1, [r1, #-0]
     ab8:	00047f43 	andeq	r7, r4, r3, asr #30
     abc:	0b700300 	bleq	1c016c4 <_Min_Stack_Size+0x1c012c4>
     ac0:	03080000 	movweq	r0, #32768	; 0x8000
     ac4:	000005ec 	andeq	r0, r0, ip, ror #11
     ac8:	046c030c 	strbteq	r0, [ip], #-780	; 0x30c
     acc:	00100000 	andseq	r0, r0, r0
     ad0:	000b4105 	andeq	r4, fp, r5, lsl #2
     ad4:	64470500 	strbvs	r0, [r7], #-1280	; 0x500
     ad8:	11000004 	tstne	r0, r4
     adc:	c3500508 	cmpgt	r0, #8, 10	; 0x2000000
     ae0:	12000004 	andne	r0, r0, #4
     ae4:	000008d1 	ldrdeq	r0, [r0], -r1
     ae8:	03325205 	teqeq	r2, #1342177280	; 0x50000000
     aec:	12000000 	andne	r0, r0, #0
     af0:	00000976 	andeq	r0, r0, r6, ror r9
     af4:	04595505 	ldrbeq	r5, [r9], #-1285	; 0x505
     af8:	12040000 	andne	r0, r4, #0
     afc:	00000940 	andeq	r0, r0, r0, asr #18
     b00:	047f5805 	ldrbteq	r5, [pc], #-2053	; b08 <_Min_Stack_Size+0x708>
     b04:	12050000 	andne	r0, r5, #0
     b08:	00000439 	andeq	r0, r0, r9, lsr r4
     b0c:	039b5b05 	orrseq	r5, fp, #5120	; 0x1400
     b10:	00060000 	andeq	r0, r6, r0
     b14:	000b5f05 	andeq	r5, fp, r5, lsl #30
     b18:	8a5d0500 	bhi	1741f20 <_Min_Stack_Size+0x1741b20>
     b1c:	10000004 	andne	r0, r0, r4
     b20:	ef420601 	svc	0x00420601
     b24:	03000004 	movweq	r0, #4
     b28:	00000547 	andeq	r0, r0, r7, asr #10
     b2c:	0aee0300 	beq	ffb81734 <_estack+0xdfb51734>
     b30:	03010000 	movweq	r0, #4096	; 0x1000
     b34:	000004a8 	andeq	r0, r0, r8, lsr #9
     b38:	04dc0302 	ldrbeq	r0, [ip], #770	; 0x302
     b3c:	00030000 	andeq	r0, r3, r0
     b40:	000c5005 	andeq	r5, ip, r5
     b44:	ce470600 	cdpgt	6, 4, cr0, cr7, cr0, {0}
     b48:	10000004 	andne	r0, r0, r4
     b4c:	0f4f0601 	svceq	0x004f0601
     b50:	03000005 	movweq	r0, #5
     b54:	00000490 	muleq	r0, r0, r4
     b58:	0bca0300 	bleq	ff281760 <_estack+0xdf251760>
     b5c:	00010000 	andeq	r0, r1, r0
     b60:	00051a05 	andeq	r1, r5, r5, lsl #20
     b64:	fa520600 	blx	148236c <_Min_Stack_Size+0x1481f6c>
     b68:	10000004 	andne	r0, r0, r4
     b6c:	3b5a0601 	blcc	1682378 <_Min_Stack_Size+0x1681f78>
     b70:	03000005 	movweq	r0, #5
     b74:	000004e9 	andeq	r0, r0, r9, ror #9
     b78:	06610300 	strbteq	r0, [r1], -r0, lsl #6
     b7c:	03010000 	movweq	r0, #4096	; 0x1000
     b80:	000009fb 	strdeq	r0, [r0], -fp
     b84:	0cbb0302 	ldceq	3, cr0, [fp], #8
     b88:	00030000 	andeq	r0, r3, r0
     b8c:	00069105 	andeq	r9, r6, r5, lsl #2
     b90:	1a5f0600 	bne	17c2398 <_Min_Stack_Size+0x17c1f98>
     b94:	10000005 	andne	r0, r0, r5
     b98:	616e0601 	cmnvs	lr, r1, lsl #12
     b9c:	03000005 	movweq	r0, #5
     ba0:	00000821 	andeq	r0, r0, r1, lsr #16
     ba4:	0c270300 	stceq	3, cr0, [r7], #-0
     ba8:	03010000 	movweq	r0, #4096	; 0x1000
     bac:	00000bf3 	strdeq	r0, [r0], -r3
     bb0:	94050002 	strls	r0, [r5], #-2
     bb4:	06000007 	streq	r0, [r0], -r7
     bb8:	00054672 	andeq	r4, r5, r2, ror r6
     bbc:	06081100 	streq	r1, [r8], -r0, lsl #2
     bc0:	0005b184 	andeq	fp, r5, r4, lsl #3
     bc4:	06a31200 	strteq	r1, [r3], r0, lsl #4
     bc8:	86060000 	strhi	r0, [r6], -r0
     bcc:	00000332 	andeq	r0, r0, r2, lsr r3
     bd0:	0b551200 	bleq	15453d8 <_Min_Stack_Size+0x1544fd8>
     bd4:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
     bd8:	000004ef 	andeq	r0, r0, pc, ror #9
     bdc:	04c41204 	strbeq	r1, [r4], #516	; 0x204
     be0:	8c060000 	stchi	0, cr0, [r6], {-0}
     be4:	0000053b 	andeq	r0, r0, fp, lsr r5
     be8:	08661205 	stmdaeq	r6!, {r0, r2, r9, ip}^
     bec:	8f060000 	svchi	0x00060000
     bf0:	0000050f 	andeq	r0, r0, pc, lsl #10
     bf4:	0afc1206 	beq	fff05414 <_estack+0xdfed5414>
     bf8:	92060000 	andls	r0, r6, #0
     bfc:	00000561 	andeq	r0, r0, r1, ror #10
     c00:	19050007 	stmdbne	r5, {r0, r1, r2}
     c04:	06000009 	streq	r0, [r0], -r9
     c08:	00056c94 	muleq	r5, r4, ip
     c0c:	07041100 	streq	r1, [r4, -r0, lsl #2]
     c10:	0005f536 	andeq	pc, r5, r6, lsr r5	; <UNPREDICTABLE>
     c14:	07c11200 	strbeq	r1, [r1, r0, lsl #4]
     c18:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
     c1c:	00000311 	andeq	r0, r0, r1, lsl r3
     c20:	07e51200 	strbeq	r1, [r5, r0, lsl #4]!
     c24:	3d070000 	stccc	0, cr0, [r7, #-0]
     c28:	00000311 	andeq	r0, r0, r1, lsl r3
     c2c:	0a9b1201 	beq	fe6c5438 <_estack+0xde695438>
     c30:	42070000 	andmi	r0, r7, #0
     c34:	00000311 	andeq	r0, r0, r1, lsl r3
     c38:	03de1202 	bicseq	r1, lr, #536870912	; 0x20000000
     c3c:	47070000 	strmi	r0, [r7, -r0]
     c40:	0000039b 	muleq	r0, fp, r3
     c44:	a2050003 	andge	r0, r5, #3
     c48:	07000008 	streq	r0, [r0, -r8]
     c4c:	0005bc4a 	andeq	fp, r5, sl, asr #24
     c50:	0a591300 	beq	1645858 <_Min_Stack_Size+0x1645458>
     c54:	05010000 	streq	r0, [r1, #-0]
     c58:	080004f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl}
     c5c:	00000016 	andeq	r0, r0, r6, lsl r0
     c60:	06439c01 	strbeq	r9, [r3], -r1, lsl #24
     c64:	fe140000 	cdp2	0, 1, cr0, cr4, cr0, {0}
     c68:	88080004 	stmdahi	r8, {r2}
     c6c:	2e000007 	cdpcs	0, 0, cr0, cr0, cr7, {0}
     c70:	15000006 	strne	r0, [r0, #-6]
     c74:	31015101 	tstcc	r1, r1, lsl #2
     c78:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
     c7c:	16004008 	strne	r4, [r0], -r8
     c80:	0800050a 	stmdaeq	r0, {r1, r3, r8, sl}
     c84:	00000788 	andeq	r0, r0, r8, lsl #15
     c88:	01510115 	cmpeq	r1, r5, lsl r1
     c8c:	50011531 	andpl	r1, r1, r1, lsr r5
     c90:	00003101 	andeq	r3, r0, r1, lsl #2
     c94:	000c3d13 	andeq	r3, ip, r3, lsl sp
     c98:	0c0c0100 	stfeqs	f0, [ip], {-0}
     c9c:	56080005 	strpl	r0, [r8], -r5
     ca0:	01000000 	mrseq	r0, (UNDEF: 0)
     ca4:	0006999c 	muleq	r6, ip, r9
     ca8:	05661700 	strbeq	r1, [r6, #-1792]!	; 0x700
     cac:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     cb0:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     cb4:	17609102 	strbne	r9, [r0, -r2, lsl #2]!
     cb8:	00000c89 	andeq	r0, r0, r9, lsl #25
     cbc:	05b11701 	ldreq	r1, [r1, #1793]!	; 0x701
     cc0:	91020000 	mrsls	r0, (UNDEF: 2)
     cc4:	053a1468 	ldreq	r1, [sl, #-1128]!	; 0x468
     cc8:	079f0800 	ldreq	r0, [pc, r0, lsl #16]
     ccc:	06880000 	streq	r0, [r8], r0
     cd0:	01150000 	tsteq	r5, r0
     cd4:	007d0251 	rsbseq	r0, sp, r1, asr r2
     cd8:	055e1800 	ldrbeq	r1, [lr, #-2048]	; 0x800
     cdc:	079f0800 	ldreq	r0, [pc, r0, lsl #16]
     ce0:	01150000 	tsteq	r5, r0
     ce4:	68910251 	ldmvs	r1, {r0, r4, r6, r9}
     ce8:	6b130000 	blvs	4c0cf0 <_Min_Stack_Size+0x4c08f0>
     cec:	0100000a 	tsteq	r0, sl
     cf0:	00056420 	andeq	r6, r5, r0, lsr #8
     cf4:	00004408 	andeq	r4, r0, r8, lsl #8
     cf8:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
     cfc:	17000007 	strne	r0, [r0, -r7]
     d00:	00000959 	andeq	r0, r0, r9, asr r9
     d04:	04c32201 	strbeq	r2, [r3], #513	; 0x201
     d08:	91020000 	mrsls	r0, (UNDEF: 2)
     d0c:	06ac1770 			; <UNDEFINED> instruction: 0x06ac1770
     d10:	23010000 	movwcs	r0, #4096	; 0x1000
     d14:	000005f5 	strdeq	r0, [r0], -r5
     d18:	146c9102 	strbtne	r9, [ip], #-258	; 0x102
     d1c:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
     d20:	000007c2 	andeq	r0, r0, r2, asr #15
     d24:	000006e2 	andeq	r0, r0, r2, ror #13
     d28:	01510115 	cmpeq	r1, r5, lsl r1
     d2c:	50011530 	andpl	r1, r1, r0, lsr r5
     d30:	14003001 	strne	r3, [r0], #-1
     d34:	0800058a 	stmdaeq	r0, {r1, r3, r7, r8, sl}
     d38:	000007d8 	ldrdeq	r0, [r0], -r8
     d3c:	000006f6 	strdeq	r0, [r0], -r6
     d40:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
     d44:	18007091 	stmdane	r0, {r0, r4, r7, ip, sp, lr}
     d48:	080005a4 	stmdaeq	r0, {r2, r5, r7, r8, sl}
     d4c:	000007ef 	andeq	r0, r0, pc, ror #15
     d50:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
     d54:	00006c91 	muleq	r0, r1, ip
     d58:	00083213 	andeq	r3, r8, r3, lsl r2
     d5c:	a83a0100 	ldmdage	sl!, {r8}
     d60:	2a080005 	bcs	200d7c <_Min_Stack_Size+0x20097c>
     d64:	01000000 	mrseq	r0, (UNDEF: 0)
     d68:	00073f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
     d6c:	05b01400 	ldreq	r1, [r0, #1024]!	; 0x400
     d70:	08060800 	stmdaeq	r6, {fp}
     d74:	072f0000 	streq	r0, [pc, -r0]!
     d78:	01150000 	tsteq	r5, r0
     d7c:	00310150 	eorseq	r0, r1, r0, asr r1
     d80:	0005d216 	andeq	sp, r5, r6, lsl r2
     d84:	00081b08 	andeq	r1, r8, r8, lsl #22
     d88:	50011500 	andpl	r1, r1, r0, lsl #10
     d8c:	00003101 	andeq	r3, r0, r1, lsl #2
     d90:	000c9e19 	andeq	r9, ip, r9, lsl lr
     d94:	03470100 	movteq	r0, #28928	; 0x7100
     d98:	d4000003 	strle	r0, [r0], #-3
     d9c:	0c080005 	stceq	0, cr0, [r8], {5}
     da0:	01000000 	mrseq	r0, (UNDEF: 0)
     da4:	00076b9c 	muleq	r7, ip, fp
     da8:	05da1a00 	ldrbeq	r1, [sl, #2560]	; 0xa00
     dac:	06000800 	streq	r0, [r0], -r0, lsl #16
     db0:	de1a0000 	cdple	0, 1, cr0, cr10, cr0, {0}
     db4:	43080005 	movwmi	r0, #32773	; 0x8005
     db8:	00000006 	andeq	r0, r0, r6
     dbc:	00039d1b 	andeq	r9, r3, fp, lsl sp
     dc0:	06a70800 	strteq	r0, [r7], r0, lsl #16
     dc4:	0000035e 	andeq	r0, r0, lr, asr r3
     dc8:	0039df1c 	eorseq	sp, r9, ip, lsl pc
     dcc:	11450100 	mrsne	r0, (UNDEF: 85)
     dd0:	05000003 	streq	r0, [r0, #-3]
     dd4:	00002c03 	andeq	r2, r0, r3, lsl #24
     dd8:	0a371d20 	beq	dc8260 <_Min_Stack_Size+0xdc7e60>
     ddc:	40090000 	andmi	r0, r9, r0
     de0:	00079f02 	andeq	r9, r7, r2, lsl #30
     de4:	03321e00 	teqeq	r2, #0, 28
     de8:	9b1e0000 	blls	780df0 <_Min_Stack_Size+0x7809f0>
     dec:	00000003 	andeq	r0, r0, r3
     df0:	00087a1d 	andeq	r7, r8, sp, lsl sl
     df4:	01c90600 	biceq	r0, r9, r0, lsl #12
     df8:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
     dfc:	0007b61e 	andeq	fp, r7, lr, lsl r6
     e00:	07bc1e00 	ldreq	r1, [ip, r0, lsl #28]!
     e04:	1f000000 	svcne	0x00000000
     e08:	00043804 	andeq	r3, r4, r4, lsl #16
     e0c:	b1041f00 	tstlt	r4, r0, lsl #30
     e10:	20000005 	andcs	r0, r0, r5
     e14:	00000750 	andeq	r0, r0, r0, asr r7
     e18:	07d8bf0a 	ldrbeq	fp, [r8, sl, lsl #30]
     e1c:	111e0000 	tstne	lr, r0
     e20:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
     e24:	00000311 	andeq	r0, r0, r1, lsl r3
     e28:	06bf2000 	ldrteq	r2, [pc], r0
     e2c:	9f050000 	svcls	0x00050000
     e30:	000007e9 	andeq	r0, r0, r9, ror #15
     e34:	0007e91e 	andeq	lr, r7, lr, lsl r9
     e38:	041f0000 	ldreq	r0, [pc], #-0	; e40 <_Min_Stack_Size+0xa40>
     e3c:	000004c3 	andeq	r0, r0, r3, asr #9
     e40:	000cb120 	andeq	fp, ip, r0, lsr #2
     e44:	009f0700 	addseq	r0, pc, r0, lsl #14
     e48:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
     e4c:	00000800 	andeq	r0, r0, r0, lsl #16
     e50:	f5041f00 			; <UNDEFINED> instruction: 0xf5041f00
     e54:	21000005 	tstcs	r0, r5
     e58:	0000071a 	andeq	r0, r0, sl, lsl r7
     e5c:	0379a405 	cmneq	r9, #83886080	; 0x5000000
     e60:	081b0000 	ldmdaeq	fp, {}	; <UNPREDICTABLE>
     e64:	321e0000 	andscc	r0, lr, #0
     e68:	00000003 	andeq	r0, r0, r3
     e6c:	0005c722 	andeq	ip, r5, r2, lsr #14
     e70:	1ea70500 	cdpne	5, 10, cr0, cr7, cr0, {0}
     e74:	00000332 	andeq	r0, r0, r2, lsr r3
     e78:	078d0000 	streq	r0, [sp, r0]
     e7c:	00040000 	andeq	r0, r4, r0
     e80:	0000034e 	andeq	r0, r0, lr, asr #6
     e84:	02840104 	addeq	r0, r4, #4, 2
     e88:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
     e8c:	01000010 	tsteq	r0, r0, lsl r0
     e90:	28000001 	stmdacs	r0, {r0}
     e94:	00000001 	andeq	r0, r0, r1
     e98:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     e9c:	02000004 	andeq	r0, r0, #4
     ea0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     ea4:	bf030074 	svclt	0x00030074
     ea8:	0200000d 	andeq	r0, r0, #13
     eac:	000037d4 	ldrdeq	r3, [r0], -r4
     eb0:	07040400 	streq	r0, [r4, -r0, lsl #8]
     eb4:	0000017d 	andeq	r0, r0, sp, ror r1
     eb8:	50060104 	andpl	r0, r6, r4, lsl #2
     ebc:	04000001 	streq	r0, [r0], #-1
     ec0:	014e0801 	cmpeq	lr, r1, lsl #16
     ec4:	02040000 	andeq	r0, r4, #0
     ec8:	0000df05 	andeq	sp, r0, r5, lsl #30
     ecc:	005c0300 	subseq	r0, ip, r0, lsl #6
     ed0:	26030000 	strcs	r0, [r3], -r0
     ed4:	0000005e 	andeq	r0, r0, lr, asr r0
     ed8:	e5070204 	str	r0, [r7, #-516]	; 0x204
     edc:	04000001 	streq	r0, [r0], #-1
     ee0:	00c50504 	sbceq	r0, r5, r4, lsl #10
     ee4:	51030000 	mrspl	r0, (UNDEF: 3)
     ee8:	03000000 	movweq	r0, #0
     eec:	00007738 	andeq	r7, r0, r8, lsr r7
     ef0:	07040400 	streq	r0, [r4, -r0, lsl #8]
     ef4:	00000178 	andeq	r0, r0, r8, ror r1
     ef8:	c0050804 	andgt	r0, r5, r4, lsl #16
     efc:	04000000 	streq	r0, [r0], #-0
     f00:	01730708 	cmneq	r3, r8, lsl #14
     f04:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
     f08:	04000000 	streq	r0, [r0], #-0
     f0c:	00005336 	andeq	r5, r0, r6, lsr r3
     f10:	00530300 	subseq	r0, r3, r0, lsl #6
     f14:	42040000 	andmi	r0, r4, #0
     f18:	0000006c 	andeq	r0, r0, ip, rrx
     f1c:	df030405 	svcle	0x00030405
     f20:	0500000f 	streq	r0, [r0, #-15]
     f24:	0000655e 	andeq	r6, r0, lr, asr r5
     f28:	0fde0300 	svceq	0x00de0300
     f2c:	5f050000 	svcpl	0x00050000
     f30:	00000077 	andeq	r0, r0, r7, ror r0
     f34:	000e7003 	andeq	r7, lr, r3
     f38:	97650500 	strbls	r0, [r5, -r0, lsl #10]!
     f3c:	06000000 	streq	r0, [r0], -r0
     f40:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
     f44:	0e880614 	mcreq	6, 4, r0, cr8, cr4, {0}
     f48:	07000001 	streq	r0, [r0, -r1]
     f4c:	00000e8d 	andeq	r0, r0, sp, lsl #29
     f50:	00ba8a06 	adcseq	r8, sl, r6, lsl #20
     f54:	07000000 	streq	r0, [r0, -r0]
     f58:	00000f89 	andeq	r0, r0, r9, lsl #31
     f5c:	010e8b06 	tsteq	lr, r6, lsl #22
     f60:	07040000 	streq	r0, [r4, -r0]
     f64:	00000dc6 	andeq	r0, r0, r6, asr #27
     f68:	010e8c06 	tsteq	lr, r6, lsl #24
     f6c:	07080000 	streq	r0, [r8, -r0]
     f70:	00000e2c 	andeq	r0, r0, ip, lsr #28
     f74:	00a28d06 	adceq	r8, r2, r6, lsl #26
     f78:	070c0000 	streq	r0, [ip, -r0]
     f7c:	00000f22 	andeq	r0, r0, r2, lsr #30
     f80:	00a28e06 	adceq	r8, r2, r6, lsl #28
     f84:	00100000 	andseq	r0, r0, r0
     f88:	00c50408 	sbceq	r0, r5, r8, lsl #8
     f8c:	65030000 	strvs	r0, [r3, #-0]
     f90:	0600000e 	streq	r0, [r0], -lr
     f94:	0000c590 	muleq	r0, r0, r5
     f98:	10c00600 	sbcne	r0, r0, r0, lsl #12
     f9c:	060c0000 	streq	r0, [ip], -r0
     fa0:	00015092 	muleq	r1, r2, r0
     fa4:	0e8d0700 	cdpeq	7, 8, cr0, cr13, cr0, {0}
     fa8:	94060000 	strls	r0, [r6], #-0
     fac:	000000ba 	strheq	r0, [r0], -sl
     fb0:	0f890700 	svceq	0x00890700
     fb4:	95060000 	strls	r0, [r6, #-0]
     fb8:	0000010e 	andeq	r0, r0, lr, lsl #2
     fbc:	0dc60704 	stcleq	7, cr0, [r6, #16]
     fc0:	96060000 	strls	r0, [r6], -r0
     fc4:	0000010e 	andeq	r0, r0, lr, lsl #2
     fc8:	61030008 	tstvs	r3, r8
     fcc:	0600000e 	streq	r0, [r0], -lr
     fd0:	00011f98 	muleq	r1, r8, pc	; <UNPREDICTABLE>
     fd4:	0e870600 	cdpeq	6, 8, cr0, cr7, cr0, {0}
     fd8:	06140000 	ldreq	r0, [r4], -r0
     fdc:	00018c9d 	muleq	r1, sp, ip
     fe0:	10180700 	andsne	r0, r8, r0, lsl #14
     fe4:	9f060000 	svcls	0x00060000
     fe8:	000000af 	andeq	r0, r0, pc, lsr #1
     fec:	10b80700 	adcsne	r0, r8, r0, lsl #14
     ff0:	a0060000 	andge	r0, r6, r0
     ff4:	0000018c 	andeq	r0, r0, ip, lsl #3
     ff8:	14230704 	strtne	r0, [r3], #-1796	; 0x704
     ffc:	a1060000 	mrsge	r0, (UNDEF: 6)
    1000:	00000150 	andeq	r0, r0, r0, asr r1
    1004:	04080008 	streq	r0, [r8], #-8
    1008:	00000114 	andeq	r0, r0, r4, lsl r1
    100c:	000f7503 	andeq	r7, pc, r3, lsl #10
    1010:	5ba20600 	blpl	fe882818 <_estack+0xde852818>
    1014:	04000001 	streq	r0, [r0], #-1
    1018:	01570801 	cmpeq	r7, r1, lsl #16
    101c:	04040000 	streq	r0, [r4], #-0
    1020:	00002c07 	andeq	r2, r0, r7, lsl #24
    1024:	0ed50300 	cdpeq	3, 13, cr0, cr5, cr0, {0}
    1028:	52070000 	andpl	r0, r7, #0
    102c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1030:	000f6403 	andeq	r6, pc, r3, lsl #8
    1034:	c1550700 	cmpgt	r5, r0, lsl #14
    1038:	08000001 	stmdaeq	r0, {r0}
    103c:	0001c704 	andeq	ip, r1, r4, lsl #14
    1040:	01d70900 	bicseq	r0, r7, r0, lsl #18
    1044:	ab0a0000 	blge	28104c <_Min_Stack_Size+0x280c4c>
    1048:	0a000001 	beq	1054 <_Min_Stack_Size+0xc54>
    104c:	000000af 	andeq	r0, r0, pc, lsr #1
    1050:	0fc50600 	svceq	0x00c50600
    1054:	07380000 	ldreq	r0, [r8, -r0]!
    1058:	00022c57 	andeq	r2, r2, r7, asr ip
    105c:	0df70700 	ldcleq	7, cr0, [r7]
    1060:	59070000 	stmdbpl	r7, {}	; <UNPREDICTABLE>
    1064:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    1068:	0e1b0700 	cdpeq	7, 1, cr0, cr11, cr0, {0}
    106c:	5a070000 	bpl	1c1074 <_Min_Stack_Size+0x1c0c74>
    1070:	00000114 	andeq	r0, r0, r4, lsl r1
    1074:	215f0704 	cmpcs	pc, r4, lsl #14
    1078:	5b070000 	blpl	1c1080 <_Min_Stack_Size+0x1c0c80>
    107c:	00000114 	andeq	r0, r0, r4, lsl r1
    1080:	10ad0718 	adcne	r0, sp, r8, lsl r7
    1084:	5c070000 	stcpl	0, cr0, [r7], {-0}
    1088:	000000af 	andeq	r0, r0, pc, lsr #1
    108c:	0def072c 	stcleq	7, cr0, [pc, #176]!	; 1144 <_Min_Stack_Size+0xd44>
    1090:	5d070000 	stcpl	0, cr0, [r7, #-0]
    1094:	000000af 	andeq	r0, r0, pc, lsr #1
    1098:	0efa0730 	mrceq	7, 7, r0, cr10, cr0, {1}
    109c:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    10a0:	0000008c 	andeq	r0, r0, ip, lsl #1
    10a4:	90030034 	andls	r0, r3, r4, lsr r0
    10a8:	0700000f 	streq	r0, [r0, -pc]
    10ac:	0001d75f 	andeq	sp, r1, pc, asr r7
    10b0:	10280b00 	eorne	r0, r8, r0, lsl #22
    10b4:	57010000 	strpl	r0, [r1, -r0]
    10b8:	02510101 	subseq	r0, r1, #1073741824	; 0x40000000
    10bc:	ad0c0000 	stcge	0, cr0, [ip, #-0]
    10c0:	01000010 	tsteq	r0, r0, lsl r0
    10c4:	00af0159 	adceq	r0, pc, r9, asr r1	; <UNPREDICTABLE>
    10c8:	0d000000 	stceq	0, cr0, [r0, #-0]
    10cc:	00000d34 	andeq	r0, r0, r4, lsr sp
    10d0:	00a48901 	adceq	r8, r4, r1, lsl #18
    10d4:	05e00000 	strbeq	r0, [r0, #0]!
    10d8:	00e00800 	rsceq	r0, r0, r0, lsl #16
    10dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    10e0:	0000038e 	andeq	r0, r0, lr, lsl #7
    10e4:	000d650e 	andeq	r6, sp, lr, lsl #10
    10e8:	b6890100 	strlt	r0, [r9], r0, lsl #2
    10ec:	2d000001 	stccs	0, cr0, [r0, #-4]
    10f0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    10f4:	000010ad 	andeq	r1, r0, sp, lsr #1
    10f8:	00af8901 	adceq	r8, pc, r1, lsl #18
    10fc:	01590000 	cmpeq	r9, r0
    1100:	ef0e0000 	svc	0x000e0000
    1104:	0100000d 	tsteq	r0, sp
    1108:	0000af89 	andeq	sl, r0, r9, lsl #31
    110c:	0001b000 	andeq	fp, r1, r0
    1110:	12510f00 	subsne	r0, r1, #0, 30
    1114:	8b010000 	blhi	4111c <_Min_Stack_Size+0x40d1c>
    1118:	000000a4 	andeq	r0, r0, r4, lsr #1
    111c:	000001dc 	ldrdeq	r0, [r0], -ip
    1120:	000d590f 	andeq	r5, sp, pc, lsl #18
    1124:	8e8c0100 	rmfhie	f0, f4, f0
    1128:	fb000003 	blx	113e <_Min_Stack_Size+0xd3e>
    112c:	10000001 	andne	r0, r0, r1
    1130:	00000237 	andeq	r0, r0, r7, lsr r2
    1134:	0800065e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl}
    1138:	00000080 	andeq	r0, r0, r0, lsl #1
    113c:	03419701 	movteq	r9, #5889	; 0x1701
    1140:	80110000 	andshi	r0, r1, r0
    1144:	12000000 	andne	r0, r0, #0
    1148:	00000244 	andeq	r0, r0, r4, asr #4
    114c:	00000245 	andeq	r0, r0, r5, asr #4
    1150:	00067413 	andeq	r7, r6, r3, lsl r4
    1154:	0006e508 	andeq	lr, r6, r8, lsl #10
    1158:	0002ed00 	andeq	lr, r2, r0, lsl #26
    115c:	50011400 	andpl	r1, r1, r0, lsl #8
    1160:	00800305 	addeq	r0, r0, r5, lsl #6
    1164:	13002000 	movwne	r2, #0
    1168:	0800067e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl}
    116c:	000006e5 	andeq	r0, r0, r5, ror #13
    1170:	00000304 	andeq	r0, r0, r4, lsl #6
    1174:	05500114 	ldrbeq	r0, [r0, #-276]	; 0x114
    1178:	00009403 	andeq	r9, r0, r3, lsl #8
    117c:	88130020 	ldmdahi	r3, {r5}
    1180:	e5080006 	str	r0, [r8, #-6]
    1184:	18000006 	stmdane	r0, {r1, r2}
    1188:	14000003 	strne	r0, [r0], #-3
    118c:	79025001 	stmdbvc	r2, {r0, ip, lr}
    1190:	8e130000 	cdphi	0, 1, cr0, cr3, cr0, {0}
    1194:	e5080006 	str	r0, [r8, #-6]
    1198:	2c000006 	stccs	0, cr0, [r0], {6}
    119c:	14000003 	strne	r0, [r0], #-3
    11a0:	75025001 	strvc	r5, [r2, #-1]
    11a4:	9a150000 	bls	5411ac <_Min_Stack_Size+0x540dac>
    11a8:	e5080006 	str	r0, [r8, #-6]
    11ac:	14000006 	strne	r0, [r0], #-6
    11b0:	03055001 	movweq	r5, #20481	; 0x5001
    11b4:	20000048 	andcs	r0, r0, r8, asr #32
    11b8:	13000000 	movwne	r0, #0
    11bc:	080005f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl}
    11c0:	000006f7 	strdeq	r0, [r0], -r7
    11c4:	00000355 	andeq	r0, r0, r5, asr r3
    11c8:	02500114 	subseq	r0, r0, #20, 2
    11cc:	13003808 	movwne	r3, #2056	; 0x808
    11d0:	0800061e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl}
    11d4:	0000070d 	andeq	r0, r0, sp, lsl #14
    11d8:	00000369 	andeq	r0, r0, r9, ror #6
    11dc:	02500114 	subseq	r0, r0, #20, 2
    11e0:	13000075 	movwne	r0, #117	; 0x75
    11e4:	08000626 	stmdaeq	r0, {r1, r2, r5, r9, sl}
    11e8:	0000070d 	andeq	r0, r0, sp, lsl #14
    11ec:	0000037d 	andeq	r0, r0, sp, ror r3
    11f0:	02500114 	subseq	r0, r0, #20, 2
    11f4:	15001874 	strne	r1, [r0, #-2164]	; 0x874
    11f8:	08000658 	stmdaeq	r0, {r3, r4, r6, r9, sl}
    11fc:	00000724 	andeq	r0, r0, r4, lsr #14
    1200:	02510114 	subseq	r0, r1, #20, 2
    1204:	00000075 	andeq	r0, r0, r5, ror r0
    1208:	022c0408 	eoreq	r0, ip, #8, 8	; 0x8000000
    120c:	49160000 	ldmdbmi	r6, {}	; <UNPREDICTABLE>
    1210:	0100000f 	tsteq	r0, pc
    1214:	0006c0c2 	andeq	ip, r6, r2, asr #1
    1218:	00005408 	andeq	r5, r0, r8, lsl #8
    121c:	fa9c0100 	blx	fe701624 <_estack+0xde6d1624>
    1220:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    1224:	00000e34 	andeq	r0, r0, r4, lsr lr
    1228:	00bac201 	adcseq	ip, sl, r1, lsl #4
    122c:	02710000 	rsbseq	r0, r1, #0
    1230:	280e0000 	stmdacs	lr, {}	; <UNPREDICTABLE>
    1234:	0100000d 	tsteq	r0, sp
    1238:	0003fac2 	andeq	pc, r3, r2, asr #21
    123c:	00029200 	andeq	r9, r2, r0, lsl #4
    1240:	10dd0f00 	sbcsne	r0, sp, r0, lsl #30
    1244:	c4010000 	strgt	r0, [r1], #-0
    1248:	000000ba 	strheq	r0, [r0], -sl
    124c:	000002d4 	ldrdeq	r0, [r0], -r4
    1250:	0006e017 	andeq	lr, r6, r7, lsl r0
    1254:	00073b08 	andeq	r3, r7, r8, lsl #22
    1258:	07021700 	streq	r1, [r2, -r0, lsl #14]
    125c:	07510800 	ldrbeq	r0, [r1, -r0, lsl #16]
    1260:	12180000 	andsne	r0, r8, #0
    1264:	51080007 	tstpl	r8, r7
    1268:	14000007 	strne	r0, [r0], #-7
    126c:	f3035001 	vhadd.u8	d5, d3, d1
    1270:	00005101 	andeq	r5, r0, r1, lsl #2
    1274:	01920408 	orrseq	r0, r2, r8, lsl #8
    1278:	bc190000 	ldclt	0, cr0, [r9], {-0}
    127c:	0100000e 	tsteq	r0, lr
    1280:	041a01e8 	ldreq	r0, [sl], #-488	; 0x1e8
    1284:	1b1a0000 	blne	68128c <_Min_Stack_Size+0x680e8c>
    1288:	00000e0b 	andeq	r0, r0, fp, lsl #28
    128c:	038eef01 	orreq	lr, lr, #1, 30
    1290:	00000000 	andeq	r0, r0, r0
    1294:	000d4519 	andeq	r4, sp, r9, lsl r5
    1298:	01ff0100 	mvnseq	r0, r0, lsl #2
    129c:	00000441 	andeq	r0, r0, r1, asr #8
    12a0:	000e980c 	andeq	r9, lr, ip, lsl #16
    12a4:	01010100 	mrseq	r0, (UNDEF: 17)
    12a8:	0000038e 	andeq	r0, r0, lr, lsl #7
    12ac:	0e420c1a 	mcreq	12, 2, r0, cr2, cr10, {0}
    12b0:	0c010000 	stceq	0, cr0, [r1], {-0}
    12b4:	0003fa01 	andeq	pc, r3, r1, lsl #20
    12b8:	1c000000 	stcne	0, cr0, [r0], {-0}
    12bc:	00000ee7 	andeq	r0, r0, r7, ror #29
    12c0:	14013901 	strne	r3, [r1], #-2305	; 0x901
    12c4:	ee080007 	cdp	0, 0, cr0, cr8, cr7, {0}
    12c8:	01000001 	tsteq	r0, r1
    12cc:	00057e9c 	muleq	r5, ip, lr
    12d0:	04001d00 	streq	r1, [r0], #-3328	; 0xd00
    12d4:	07180000 	ldreq	r0, [r8, -r0]
    12d8:	00980800 	addseq	r0, r8, r0, lsl #16
    12dc:	3c010000 	stccc	0, cr0, [r1], {-0}
    12e0:	0004d301 	andeq	sp, r4, r1, lsl #6
    12e4:	07361e00 	ldreq	r1, [r6, -r0, lsl #28]!
    12e8:	003e0800 	eorseq	r0, lr, r0, lsl #16
    12ec:	0d120000 	ldceq	0, cr0, [r2, #-0]
    12f0:	f2000004 	vhadd.s8	d0, d0, d4
    12f4:	17000002 	strne	r0, [r0, -r2]
    12f8:	08000740 	stmdaeq	r0, {r6, r8, r9, sl}
    12fc:	00000768 	andeq	r0, r0, r8, ror #14
    1300:	00074c13 	andeq	r4, r7, r3, lsl ip
    1304:	00073b08 	andeq	r3, r7, r8, lsl #22
    1308:	00049a00 	andeq	r9, r4, r0, lsl #20
    130c:	50011400 	andpl	r1, r1, r0, lsl #8
    1310:	00187402 	andseq	r7, r8, r2, lsl #8
    1314:	00075413 	andeq	r5, r7, r3, lsl r4
    1318:	00077308 	andeq	r7, r7, r8, lsl #6
    131c:	0004ad00 	andeq	sl, r4, r0, lsl #26
    1320:	50011400 	andpl	r1, r1, r0, lsl #8
    1324:	13003001 	movwne	r3, #1
    1328:	0800075a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl}
    132c:	0000073b 	andeq	r0, r0, fp, lsr r7
    1330:	000004c1 	andeq	r0, r0, r1, asr #9
    1334:	02500114 	subseq	r0, r0, #20, 2
    1338:	15000075 	strne	r0, [r0, #-117]	; 0x75
    133c:	08000774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl}
    1340:	00000724 	andeq	r0, r0, r4, lsr #14
    1344:	02510114 	subseq	r0, r1, #20, 2
    1348:	00000075 	andeq	r0, r0, r5, ror r0
    134c:	041a1d00 	ldreq	r1, [sl], #-3328	; 0xd00
    1350:	077a0000 	ldrbeq	r0, [sl, -r0]!
    1354:	00b00800 	adcseq	r0, r0, r0, lsl #16
    1358:	3f010000 	svccc	0x00010000
    135c:	00056701 	andeq	r6, r5, r1, lsl #14
    1360:	00b01100 	adcseq	r1, r0, r0, lsl #2
    1364:	26120000 	ldrcs	r0, [r2], -r0
    1368:	05000004 	streq	r0, [r0, #-4]
    136c:	1f000003 	svcne	0x00000003
    1370:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1374:	00000508 	andeq	r0, r0, r8, lsl #10
    1378:	00043312 	andeq	r3, r4, r2, lsl r3
    137c:	00031800 	andeq	r1, r3, r0, lsl #16
    1380:	88170000 	ldmdahi	r7, {}	; <UNPREDICTABLE>
    1384:	84080007 	strhi	r0, [r8], #-7
    1388:	17000007 	strne	r0, [r0, -r7]
    138c:	0800080c 	stmdaeq	r0, {r2, r3, fp}
    1390:	00000768 	andeq	r0, r0, r8, ror #14
    1394:	00081213 	andeq	r1, r8, r3, lsl r2
    1398:	00073b08 	andeq	r3, r7, r8, lsl #22
    139c:	00052e00 	andeq	r2, r5, r0, lsl #28
    13a0:	50011400 	andpl	r1, r1, r0, lsl #8
    13a4:	00007402 	andeq	r7, r0, r2, lsl #8
    13a8:	00082013 	andeq	r2, r8, r3, lsl r0
    13ac:	00073b08 	andeq	r3, r7, r8, lsl #22
    13b0:	00054200 	andeq	r4, r5, r0, lsl #4
    13b4:	50011400 	andpl	r1, r1, r0, lsl #8
    13b8:	00187a02 	andseq	r7, r8, r2, lsl #20
    13bc:	00082613 	andeq	r2, r8, r3, lsl r6
    13c0:	00077308 	andeq	r7, r7, r8, lsl #6
    13c4:	00055500 	andeq	r5, r5, r0, lsl #10
    13c8:	50011400 	andpl	r1, r1, r0, lsl #8
    13cc:	15003001 	strne	r3, [r0, #-1]
    13d0:	08000842 	stmdaeq	r0, {r1, r6, fp}
    13d4:	00000724 	andeq	r0, r0, r4, lsr #14
    13d8:	02510114 	subseq	r0, r1, #20, 2
    13dc:	00000074 	andeq	r0, r0, r4, ror r0
    13e0:	01081100 	mrseq	r1, (UNDEF: 24)
    13e4:	7b200000 	blvc	8013ec <_Min_Stack_Size+0x800fec>
    13e8:	0100000e 	tsteq	r0, lr
    13ec:	057e014e 	ldrbeq	r0, [lr, #-334]!	; 0x14e
    13f0:	033a0000 	teqeq	sl, #0
    13f4:	00000000 	andeq	r0, r0, r0
    13f8:	0003fa21 	andeq	pc, r3, r1, lsr #20
    13fc:	0dd12200 	lfmeq	f2, 2, [r1]
    1400:	6b010000 	blvs	41408 <_Min_Stack_Size+0x41008>
    1404:	0000a401 	andeq	sl, r0, r1, lsl #8
    1408:	00090400 	andeq	r0, r9, r0, lsl #8
    140c:	00003608 	andeq	r3, r0, r8, lsl #12
    1410:	0f9c0100 	svceq	0x009c0100
    1414:	23000006 	movwcs	r0, #6
    1418:	00000d28 	andeq	r0, r0, r8, lsr #26
    141c:	0f016b01 	svceq	0x00016b01
    1420:	4d000006 	stcmi	0, cr0, [r0, #-24]	; 0xffffffe8
    1424:	24000003 	strcs	r0, [r0], #-3
    1428:	00000e0b 	andeq	r0, r0, fp, lsl #28
    142c:	8e016d01 	cdphi	13, 0, cr6, cr1, cr1, {0}
    1430:	01000003 	tsteq	r0, r3
    1434:	12512454 	subsne	r2, r1, #84, 8	; 0x54000000
    1438:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    143c:	0000a401 	andeq	sl, r0, r1, lsl #8
    1440:	2c741900 	ldclcs	9, cr1, [r4], #-0
    1444:	244b4006 	strbcs	r4, [fp], #-6
    1448:	005c0322 	subseq	r0, ip, r2, lsr #6
    144c:	23062000 	movwcs	r2, #24576	; 0x6000
    1450:	4b40062c 	blmi	1002d08 <_Min_Stack_Size+0x1002908>
    1454:	082a2224 	stmdaeq	sl!, {r2, r5, r9, sp}
    1458:	139f1aff 	orrsne	r1, pc, #1044480	; 0xff000
    145c:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
    1460:	0000073b 	andeq	r0, r0, fp, lsr r7
    1464:	000005f5 	strdeq	r0, [r0], -r5
    1468:	02500114 	subseq	r0, r0, #20, 2
    146c:	15000075 	strne	r0, [r0, #-117]	; 0x75
    1470:	08000922 	stmdaeq	r0, {r1, r5, r8, fp}
    1474:	00000724 	andeq	r0, r0, r4, lsr #14
    1478:	02510114 	subseq	r0, r1, #20, 2
    147c:	01140075 	tsteq	r4, r5, ror r0
    1480:	48030550 	stmdami	r3, {r4, r6, r8, sl}
    1484:	00200000 	eoreq	r0, r0, r0
    1488:	15040800 	strne	r0, [r4, #-2048]	; 0x800
    148c:	21000006 	tstcs	r0, r6
    1490:	00000192 	muleq	r0, r2, r1
    1494:	00019225 	andeq	r9, r1, r5, lsr #4
    1498:	00062a00 	andeq	r2, r6, r0, lsl #20
    149c:	01a42600 			; <UNDEFINED> instruction: 0x01a42600
    14a0:	00010000 	andeq	r0, r1, r0
    14a4:	00104427 	andseq	r4, r0, r7, lsr #8
    14a8:	1a500100 	bne	14018b0 <_Min_Stack_Size+0x14014b0>
    14ac:	05000006 	streq	r0, [r0, #-6]
    14b0:	00008003 	andeq	r8, r0, r3
    14b4:	0fea2720 	svceq	0x00ea2720
    14b8:	51010000 	mrspl	r0, (UNDEF: 1)
    14bc:	00000192 	muleq	r0, r2, r1
    14c0:	00300305 	eorseq	r0, r0, r5, lsl #6
    14c4:	01272000 	teqeq	r7, r0
    14c8:	01000010 	tsteq	r0, r0, lsl r0
    14cc:	00019252 	andeq	r9, r1, r2, asr r2
    14d0:	60030500 	andvs	r0, r3, r0, lsl #10
    14d4:	27200000 	strcs	r0, [r0, -r0]!
    14d8:	00000d75 	andeq	r0, r0, r5, ror sp
    14dc:	03fa5301 	mvnseq	r5, #67108864	; 0x4000000
    14e0:	03050000 	movweq	r0, #20480	; 0x5000
    14e4:	2000007c 	andcs	r0, r0, ip, ror r0
    14e8:	000f9727 	andeq	r9, pc, r7, lsr #14
    14ec:	fa540100 	blx	15018f4 <_Min_Stack_Size+0x15014f4>
    14f0:	05000003 	streq	r0, [r0, #-3]
    14f4:	0000ac03 	andeq	sl, r0, r3, lsl #24
    14f8:	0f2e2720 	svceq	0x002e2720
    14fc:	55010000 	strpl	r0, [r1, #-0]
    1500:	00000192 	muleq	r0, r2, r1
    1504:	00480305 	subeq	r0, r8, r5, lsl #6
    1508:	7d272000 	stcvc	0, cr2, [r7, #-0]
    150c:	01000010 	tsteq	r0, r0, lsl r0
    1510:	0000af59 	andeq	sl, r0, r9, asr pc
    1514:	a8030500 	stmdage	r3, {r8, sl}
    1518:	27200000 	strcs	r0, [r0, -r0]!
    151c:	00001069 	andeq	r1, r0, r9, rrx
    1520:	00ba5a01 	adcseq	r5, sl, r1, lsl #20
    1524:	03050000 	movweq	r0, #20480	; 0x5000
    1528:	20000074 	andcs	r0, r0, r4, ror r0
    152c:	00105a27 	andseq	r5, r0, r7, lsr #20
    1530:	ba5a0100 	blt	1681938 <_Min_Stack_Size+0x1681538>
    1534:	05000000 	streq	r0, [r0, #-0]
    1538:	00007803 	andeq	r7, r0, r3, lsl #16
    153c:	0f022720 	svceq	0x00022720
    1540:	5a010000 	bpl	41548 <_Min_Stack_Size+0x41148>
    1544:	000000ba 	strheq	r0, [r0], -sl
    1548:	00440305 	subeq	r0, r4, r5, lsl #6
    154c:	0f282000 	svceq	0x00282000
    1550:	0100000f 	tsteq	r0, pc
    1554:	00038e58 	andeq	r8, r3, r8, asr lr
    1558:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    155c:	29200000 	stmdbcs	r0!, {}	; <UNPREDICTABLE>
    1560:	00000da3 	andeq	r0, r0, r3, lsr #27
    1564:	f7015006 			; <UNDEFINED> instruction: 0xf7015006
    1568:	0a000006 	beq	1588 <_Min_Stack_Size+0x1188>
    156c:	0000057e 	andeq	r0, r0, lr, ror r5
    1570:	10d02a00 	sbcsne	r2, r0, r0, lsl #20
    1574:	71080000 	mrsvc	r0, (UNDEF: 8)
    1578:	0000a201 	andeq	sl, r0, r1, lsl #4
    157c:	00070d00 	andeq	r0, r7, r0, lsl #26
    1580:	002c0a00 	eoreq	r0, ip, r0, lsl #20
    1584:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    1588:	000010e9 	andeq	r1, r0, r9, ror #1
    158c:	1f015b06 	svcne	0x00015b06
    1590:	0a000007 	beq	15b4 <_Min_Stack_Size+0x11b4>
    1594:	0000071f 	andeq	r0, r0, pc, lsl r7
    1598:	018c2100 	orreq	r2, ip, r0, lsl #2
    159c:	b6290000 	strtlt	r0, [r9], -r0
    15a0:	0600000f 	streq	r0, [r0], -pc
    15a4:	073b017d 			; <UNDEFINED> instruction: 0x073b017d
    15a8:	7e0a0000 	cdpvc	0, 0, cr0, cr10, cr0, {0}
    15ac:	0a000005 	beq	15c8 <_Min_Stack_Size+0x11c8>
    15b0:	0000071f 	andeq	r0, r0, pc, lsl r7
    15b4:	0f7c2a00 	svceq	0x007c2a00
    15b8:	8c060000 	stchi	0, cr0, [r6], {-0}
    15bc:	0000af01 	andeq	sl, r0, r1, lsl #30
    15c0:	00075100 	andeq	r5, r7, r0, lsl #2
    15c4:	071f0a00 	ldreq	r0, [pc, -r0, lsl #20]
    15c8:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    15cc:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    15d0:	68016806 	stmdavs	r1, {r1, r2, fp, sp, lr}
    15d4:	0a000007 	beq	15f8 <_Min_Stack_Size+0x11f8>
    15d8:	0000057e 	andeq	r0, r0, lr, ror r5
    15dc:	00071f0a 	andeq	r1, r7, sl, lsl #30
    15e0:	8c2b0000 	stchi	0, cr0, [fp], #-0
    15e4:	0500000d 	streq	r0, [r0, #-13]
    15e8:	0000977d 	andeq	r9, r0, sp, ror r7
    15ec:	0e492c00 	cdpeq	12, 4, cr2, cr9, cr0, {0}
    15f0:	7e050000 	cdpvc	0, 0, cr0, cr5, cr0, {0}
    15f4:	00000784 	andeq	r0, r0, r4, lsl #15
    15f8:	0000970a 	andeq	r9, r0, sl, lsl #14
    15fc:	9f2d0000 	svcls	0x002d0000
    1600:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    1604:	00ba0414 	adcseq	r0, sl, r4, lsl r4
    1608:	b4000000 	strlt	r0, [r0], #-0
    160c:	0400000a 	streq	r0, [r0], #-10
    1610:	0005d600 	andeq	sp, r5, r0, lsl #12
    1614:	84010400 	strhi	r0, [r1], #-1024	; 0x400
    1618:	01000002 	tsteq	r0, r2
    161c:	000011f0 	strdeq	r1, [r0], -r0
    1620:	00000101 	andeq	r0, r0, r1, lsl #2
    1624:	000001c8 	andeq	r0, r0, r8, asr #3
    1628:	00000000 	andeq	r0, r0, r0
    162c:	000006a6 	andeq	r0, r0, r6, lsr #13
    1630:	000dbf02 	andeq	fp, sp, r2, lsl #30
    1634:	30d40200 	sbcscc	r0, r4, r0, lsl #4
    1638:	03000000 	movweq	r0, #0
    163c:	017d0704 	cmneq	sp, r4, lsl #14
    1640:	04040000 	streq	r0, [r4], #-0
    1644:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1648:	06010300 	streq	r0, [r1], -r0, lsl #6
    164c:	00000150 	andeq	r0, r0, r0, asr r1
    1650:	4e080103 	adfmie	f0, f0, f3
    1654:	03000001 	movweq	r0, #1
    1658:	00df0502 	sbcseq	r0, pc, r2, lsl #10
    165c:	02030000 	andeq	r0, r3, #0
    1660:	0001e507 	andeq	lr, r1, r7, lsl #10
    1664:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1668:	000000c5 	andeq	r0, r0, r5, asr #1
    166c:	00005102 	andeq	r5, r0, r2, lsl #2
    1670:	6c380300 	ldcvs	3, cr0, [r8], #-0
    1674:	03000000 	movweq	r0, #0
    1678:	01780704 	cmneq	r8, r4, lsl #14
    167c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1680:	0000c005 	andeq	ip, r0, r5
    1684:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1688:	00000173 	andeq	r0, r0, r3, ror r1
    168c:	2c070403 	cfstrscs	mvf0, [r7], {3}
    1690:	05000000 	streq	r0, [r0, #-0]
    1694:	08010304 	stmdaeq	r1, {r2, r8, r9}
    1698:	00000157 	andeq	r0, r0, r7, asr r1
    169c:	00005302 	andeq	r5, r0, r2, lsl #6
    16a0:	61420400 	cmpvs	r2, r0, lsl #8
    16a4:	02000000 	andeq	r0, r0, #0
    16a8:	00000fdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    16ac:	005a5e05 	subseq	r5, sl, r5, lsl #28
    16b0:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    16b4:	0500000f 	streq	r0, [r0, #-15]
    16b8:	00006c5f 	andeq	r6, r0, pc, asr ip
    16bc:	0e700200 	cdpeq	2, 7, cr0, cr0, cr0, {0}
    16c0:	65050000 	strvs	r0, [r5, #-0]
    16c4:	00000091 	muleq	r0, r1, r0
    16c8:	000eb106 	andeq	fp, lr, r6, lsl #2
    16cc:	88061400 	stmdahi	r6, {sl, ip}
    16d0:	00000106 	andeq	r0, r0, r6, lsl #2
    16d4:	000e8d07 	andeq	r8, lr, r7, lsl #26
    16d8:	b28a0600 	addlt	r0, sl, #0, 12
    16dc:	00000000 	andeq	r0, r0, r0
    16e0:	000f8907 	andeq	r8, pc, r7, lsl #18
    16e4:	068b0600 	streq	r0, [fp], r0, lsl #12
    16e8:	04000001 	streq	r0, [r0], #-1
    16ec:	000dc607 	andeq	ip, sp, r7, lsl #12
    16f0:	068c0600 	streq	r0, [ip], r0, lsl #12
    16f4:	08000001 	stmdaeq	r0, {r0}
    16f8:	000e2c07 	andeq	r2, lr, r7, lsl #24
    16fc:	888d0600 	stmhi	sp, {r9, sl}
    1700:	0c000000 	stceq	0, cr0, [r0], {-0}
    1704:	000f2207 	andeq	r2, pc, r7, lsl #4
    1708:	888e0600 	stmhi	lr, {r9, sl}
    170c:	10000000 	andne	r0, r0, r0
    1710:	bd040800 	stclt	8, cr0, [r4, #-0]
    1714:	02000000 	andeq	r0, r0, #0
    1718:	00000e65 	andeq	r0, r0, r5, ror #28
    171c:	00bd9006 	adcseq	r9, sp, r6
    1720:	c0060000 	andgt	r0, r6, r0
    1724:	0c000010 	stceq	0, cr0, [r0], {16}
    1728:	01489206 	cmpeq	r8, r6, lsl #4
    172c:	8d070000 	stchi	0, cr0, [r7, #-0]
    1730:	0600000e 	streq	r0, [r0], -lr
    1734:	0000b294 	muleq	r0, r4, r2
    1738:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
    173c:	0600000f 	streq	r0, [r0], -pc
    1740:	00010695 	muleq	r1, r5, r6
    1744:	c6070400 	strgt	r0, [r7], -r0, lsl #8
    1748:	0600000d 	streq	r0, [r0], -sp
    174c:	00010696 	muleq	r1, r6, r6
    1750:	02000800 	andeq	r0, r0, #0, 16
    1754:	00000e61 	andeq	r0, r0, r1, ror #28
    1758:	01179806 	tsteq	r7, r6, lsl #16
    175c:	87060000 	strhi	r0, [r6, -r0]
    1760:	1400000e 	strne	r0, [r0], #-14
    1764:	01849d06 	orreq	r9, r4, r6, lsl #26
    1768:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    176c:	06000010 			; <UNDEFINED> instruction: 0x06000010
    1770:	0000a79f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    1774:	b8070000 	stmdalt	r7, {}	; <UNPREDICTABLE>
    1778:	06000010 			; <UNDEFINED> instruction: 0x06000010
    177c:	000184a0 	andeq	r8, r1, r0, lsr #9
    1780:	23070400 	movwcs	r0, #29696	; 0x7400
    1784:	06000014 			; <UNDEFINED> instruction: 0x06000014
    1788:	000148a1 	andeq	r4, r1, r1, lsr #17
    178c:	08000800 	stmdaeq	r0, {fp}
    1790:	00010c04 	andeq	r0, r1, r4, lsl #24
    1794:	0f750200 	svceq	0x00750200
    1798:	a2060000 	andge	r0, r6, #0
    179c:	00000153 	andeq	r0, r0, r3, asr r1
    17a0:	0011a302 	andseq	sl, r1, r2, lsl #6
    17a4:	88760700 	ldmdahi	r6!, {r8, r9, sl}^
    17a8:	02000000 	andeq	r0, r0, #0
    17ac:	00001139 	andeq	r1, r0, r9, lsr r1
    17b0:	00b28007 	adcseq	r8, r2, r7
    17b4:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
    17b8:	1c000012 	stcne	0, cr0, [r0], {18}
    17bc:	01dc6d01 	bicseq	r6, ip, r1, lsl #26
    17c0:	95070000 	strls	r0, [r7, #-0]
    17c4:	01000013 	tsteq	r0, r3, lsl r0
    17c8:	0001a06f 	andeq	sl, r1, pc, rrx
    17cc:	6f070000 	svcvs	0x00070000
    17d0:	01000011 	tsteq	r0, r1, lsl r0
    17d4:	00018a70 	andeq	r8, r1, r0, ror sl
    17d8:	e1070400 	tst	r7, r0, lsl #8
    17dc:	01000012 	tsteq	r0, r2, lsl r0
    17e0:	0000a773 	andeq	sl, r0, r3, ror r7
    17e4:	02001800 	andeq	r1, r0, #0, 16
    17e8:	00001161 	andeq	r1, r0, r1, ror #2
    17ec:	01ab7601 			; <UNDEFINED> instruction: 0x01ab7601
    17f0:	ab090000 	blge	2417f8 <_Min_Stack_Size+0x2413f8>
    17f4:	01000012 	tsteq	r0, r2, lsl r0
    17f8:	009c024c 	addseq	r0, ip, ip, asr #4
    17fc:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    1800:	0a000002 	beq	1810 <_Min_Stack_Size+0x1410>
    1804:	0000121e 	andeq	r1, r0, lr, lsl r2
    1808:	29024c01 	stmdbcs	r2, {r0, sl, fp, lr}
    180c:	0a000002 	beq	181c <_Min_Stack_Size+0x141c>
    1810:	00001263 	andeq	r1, r0, r3, ror #4
    1814:	29024c01 	stmdbcs	r2, {r0, sl, fp, lr}
    1818:	0a000002 	beq	1828 <_Min_Stack_Size+0x1428>
    181c:	00001400 	andeq	r1, r0, r0, lsl #8
    1820:	2e024c01 	cdpcs	12, 0, cr4, cr2, cr1, {0}
    1824:	0b000002 	bleq	1834 <_Min_Stack_Size+0x1434>
    1828:	00001410 	andeq	r1, r0, r0, lsl r4
    182c:	9c024e01 	stcls	14, cr4, [r2], {1}
    1830:	00000000 	andeq	r0, r0, r0
    1834:	0001a00c 	andeq	sl, r1, ip
    1838:	009c0c00 	addseq	r0, ip, r0, lsl #24
    183c:	2c0d0000 	stccs	0, cr0, [sp], {-0}
    1840:	01000014 	tsteq	r0, r4, lsl r0
    1844:	00019586 	andeq	r9, r1, r6, lsl #11
    1848:	00093c00 	andeq	r3, r9, r0, lsl #24
    184c:	00001a08 	andeq	r1, r0, r8, lsl #20
    1850:	7f9c0100 	svcvc	0x009c0100
    1854:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1858:	000011d4 	ldrdeq	r1, [r0], -r4
    185c:	027f8801 	rsbseq	r8, pc, #65536	; 0x10000
    1860:	036e0000 	cmneq	lr, #0
    1864:	440f0000 	strmi	r0, [pc], #-0	; 186c <_Min_Stack_Size+0x146c>
    1868:	e3080009 	movw	r0, #32777	; 0x8009
    186c:	6e000009 	cdpvs	0, 0, cr0, cr0, cr9, {0}
    1870:	10000002 	andne	r0, r0, r2
    1874:	4c015001 	stcmi	0, cr5, [r1], {1}
    1878:	09521100 	ldmdbeq	r2, {r8, ip}^
    187c:	09f90800 	ldmibeq	r9!, {fp}^
    1880:	01100000 	tsteq	r0, r0
    1884:	04740250 	ldrbteq	r0, [r4], #-592	; 0x250
    1888:	04080000 	streq	r0, [r8], #-0
    188c:	000001dc 	ldrdeq	r0, [r0], -ip
    1890:	0012cd12 	andseq	ip, r2, r2, lsl sp
    1894:	010b0100 	mrseq	r0, (UNDEF: 27)
    1898:	000001a0 	andeq	r0, r0, r0, lsr #3
    189c:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
    18a0:	000000ce 	andeq	r0, r0, lr, asr #1
    18a4:	04829c01 	streq	r9, [r2], #3073	; 0xc01
    18a8:	17130000 	ldrne	r0, [r3, -r0]
    18ac:	01000011 	tsteq	r0, r1, lsl r0
    18b0:	0195010b 	orrseq	r0, r5, fp, lsl #2
    18b4:	038c0000 	orreq	r0, ip, #0
    18b8:	63130000 	tstvs	r3, #0
    18bc:	01000012 	tsteq	r0, r2, lsl r0
    18c0:	0229010b 	eoreq	r0, r9, #-1073741822	; 0xc0000002
    18c4:	03d60000 	bicseq	r0, r6, #0
    18c8:	c0130000 	andsgt	r0, r3, r0
    18cc:	01000012 	tsteq	r0, r2, lsl r0
    18d0:	022e010b 	eoreq	r0, lr, #-1073741822	; 0xc0000002
    18d4:	04600000 	strbteq	r0, [r0], #-0
    18d8:	00130000 	andseq	r0, r3, r0
    18dc:	01000014 	tsteq	r0, r4, lsl r0
    18e0:	022e010b 	eoreq	r0, lr, #-1073741822	; 0xc0000002
    18e4:	04aa0000 	strteq	r0, [sl], #0
    18e8:	47130000 	ldrmi	r0, [r3, -r0]
    18ec:	0100001c 	tsteq	r0, ip, lsl r0
    18f0:	00b2010b 	adcseq	r0, r2, fp, lsl #2
    18f4:	04f40000 	ldrbteq	r0, [r4], #0
    18f8:	d4140000 	ldrle	r0, [r4], #-0
    18fc:	01000011 	tsteq	r0, r1, lsl r0
    1900:	027f010d 	rsbseq	r0, pc, #1073741827	; 0x40000003
    1904:	05430000 	strbeq	r0, [r3, #-0]
    1908:	50140000 	andspl	r0, r4, r0
    190c:	01000012 	tsteq	r0, r2, lsl r0
    1910:	01a0010e 	lsleq	r0, lr, #2
    1914:	058d0000 	streq	r0, [sp]
    1918:	84140000 	ldrhi	r0, [r4], #-0
    191c:	01000011 	tsteq	r0, r1, lsl r0
    1920:	01a0010e 	lsleq	r0, lr, #2
    1924:	05cd0000 	strbeq	r0, [sp]
    1928:	100b0000 	andne	r0, fp, r0
    192c:	01000014 	tsteq	r0, r4, lsl r0
    1930:	009c010f 	addseq	r0, ip, pc, lsl #2
    1934:	45140000 	ldrmi	r0, [r4, #-0]
    1938:	01000011 	tsteq	r0, r1, lsl r0
    193c:	009c010f 	addseq	r0, ip, pc, lsl #2
    1940:	06580000 	ldrbeq	r0, [r8], -r0
    1944:	92150000 	andsls	r0, r5, #0
    1948:	01000011 	tsteq	r0, r1, lsl r0
    194c:	009c0110 	addseq	r0, ip, r0, lsl r1
    1950:	16000000 	strne	r0, [r0], -r0
    1954:	00000150 	andeq	r0, r0, r0, asr r1
    1958:	000003e3 	andeq	r0, r0, r3, ror #7
    195c:	00121e14 	andseq	r1, r2, r4, lsl lr
    1960:	011e0100 	tsteq	lr, r0, lsl #2
    1964:	00000229 	andeq	r0, r0, r9, lsr #4
    1968:	0000066b 	andeq	r0, r0, fp, ror #12
    196c:	0001e717 	andeq	lr, r1, r7, lsl r7
    1970:	00098800 	andeq	r8, r9, r0, lsl #16
    1974:	00017008 	andeq	r7, r1, r8
    1978:	01210100 	teqeq	r1, r0, lsl #2
    197c:	000003a0 	andeq	r0, r0, r0, lsr #7
    1980:	00021018 	andeq	r1, r2, r8, lsl r0
    1984:	00069400 	andeq	r9, r6, r0, lsl #8
    1988:	02041800 	andeq	r1, r4, #0, 16
    198c:	06b20000 	ldrteq	r0, [r2], r0
    1990:	f8180000 			; <UNDEFINED> instruction: 0xf8180000
    1994:	6b000001 	blvs	19a0 <_Min_Stack_Size+0x15a0>
    1998:	19000006 	stmdbne	r0, {r1, r2}
    199c:	00000170 	andeq	r0, r0, r0, ror r1
    19a0:	00021c1a 	andeq	r1, r2, sl, lsl ip
    19a4:	00071000 	andeq	r1, r7, r0
    19a8:	11000000 	mrsne	r0, (UNDEF: 0)
    19ac:	080009e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp}
    19b0:	00000a10 	andeq	r0, r0, r0, lsl sl
    19b4:	02520110 	subseq	r0, r2, #16, 2
    19b8:	01100079 	tsteq	r0, r9, ror r0
    19bc:	46442851 			; <UNDEFINED> instruction: 0x46442851
    19c0:	24464024 	strbcs	r4, [r6], #-36	; 0x24
    19c4:	2e300077 	mrccs	0, 1, r0, cr0, cr7, {3}
    19c8:	16000128 	strne	r0, [r0], -r8, lsr #2
    19cc:	24444013 	strbcs	r4, [r4], #-19
    19d0:	30007730 	andcc	r7, r0, r0, lsr r7
    19d4:	0001282e 	andeq	r2, r1, lr, lsr #16
    19d8:	00781316 	rsbseq	r1, r8, r6, lsl r3
    19dc:	01282e30 	teqeq	r8, r0, lsr lr
    19e0:	74131600 	ldrvc	r1, [r3], #-1536	; 0x600
    19e4:	01102100 	tsteq	r0, r0, lsl #2
    19e8:	04760250 	ldrbteq	r0, [r6], #-592	; 0x250
    19ec:	e7170000 	ldr	r0, [r7, -r0]
    19f0:	04000001 	streq	r0, [r0], #-1
    19f4:	8808000a 	stmdahi	r8, {r1, r3}
    19f8:	01000001 	tsteq	r0, r1
    19fc:	041e017b 	ldreq	r0, [lr], #-379	; 0x17b
    1a00:	101b0000 	andsne	r0, fp, r0
    1a04:	01000002 	tsteq	r0, r2
    1a08:	02041858 	andeq	r1, r4, #88, 16	; 0x580000
    1a0c:	07480000 	strbeq	r0, [r8, -r0]
    1a10:	f81b0000 			; <UNDEFINED> instruction: 0xf81b0000
    1a14:	01000001 	tsteq	r0, r1
    1a18:	01881955 	orreq	r1, r8, r5, asr r9
    1a1c:	1c1a0000 	ldcne	0, cr0, [sl], {-0}
    1a20:	74000002 	strvc	r0, [r0], #-2
    1a24:	00000007 	andeq	r0, r0, r7
    1a28:	09741c00 	ldmdbeq	r4!, {sl, fp, ip}^
    1a2c:	0a310800 	beq	c43a34 <_Min_Stack_Size+0xc43634>
    1a30:	7a1c0000 	bvc	701a38 <_Min_Stack_Size+0x701638>
    1a34:	3c080009 	stccc	0, cr0, [r8], {9}
    1a38:	1c00000a 	stcne	0, cr0, [r0], {10}
    1a3c:	08000986 	stmdaeq	r0, {r1, r2, r7, r8, fp}
    1a40:	00000a48 	andeq	r0, r0, r8, asr #20
    1a44:	0009a01c 	andeq	sl, r9, ip, lsl r0
    1a48:	000a3108 	andeq	r3, sl, r8, lsl #2
    1a4c:	09a61c00 	stmibeq	r6!, {sl, fp, ip}
    1a50:	0a310800 	beq	c43a58 <_Min_Stack_Size+0xc43658>
    1a54:	ba1c0000 	blt	701a5c <_Min_Stack_Size+0x70165c>
    1a58:	50080009 	andpl	r0, r8, r9
    1a5c:	1c00000a 	stcne	0, cr0, [r0], {10}
    1a60:	080009ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, fp}
    1a64:	00000a50 	andeq	r0, r0, r0, asr sl
    1a68:	0009f01c 	andeq	pc, r9, ip, lsl r0	; <UNPREDICTABLE>
    1a6c:	000a5c08 	andeq	r5, sl, r8, lsl #24
    1a70:	09f41c00 	ldmibeq	r4!, {sl, fp, ip}^
    1a74:	0a630800 	beq	18c3a7c <_Min_Stack_Size+0x18c367c>
    1a78:	021c0000 	andseq	r0, ip, #0
    1a7c:	6f08000a 	svcvs	0x0008000a
    1a80:	1c00000a 	stcne	0, cr0, [r0], {10}
    1a84:	08000a1a 	stmdaeq	r0, {r1, r3, r4, r9, fp}
    1a88:	00000a76 	andeq	r0, r0, r6, ror sl
    1a8c:	12f41200 	rscsne	r1, r4, #0, 4
    1a90:	9b010000 	blls	41a98 <_Min_Stack_Size+0x41698>
    1a94:	0001a001 	andeq	sl, r1, r1
    1a98:	000a2800 	andeq	r2, sl, r0, lsl #16
    1a9c:	00002608 	andeq	r2, r0, r8, lsl #12
    1aa0:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    1aa4:	13000004 	movwne	r0, #4
    1aa8:	00001117 	andeq	r1, r0, r7, lsl r1
    1aac:	95019b01 	strls	r9, [r1, #-2817]	; 0xb01
    1ab0:	a0000001 	andge	r0, r0, r1
    1ab4:	13000007 	movwne	r0, #7
    1ab8:	00001334 	andeq	r1, r0, r4, lsr r3
    1abc:	29019b01 	stmdbcs	r1, {r0, r8, r9, fp, ip, pc}
    1ac0:	d4000002 	strle	r0, [r0], #-2
    1ac4:	14000007 	strne	r0, [r0], #-7
    1ac8:	000011d4 	ldrdeq	r1, [r0], -r4
    1acc:	7f019d01 	svcvc	0x00019d01
    1ad0:	16000002 	strne	r0, [r0], -r2
    1ad4:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    1ad8:	00001250 	andeq	r1, r0, r0, asr r2
    1adc:	a0019e01 	andge	r9, r1, r1, lsl #28
    1ae0:	01000001 	tsteq	r0, r1
    1ae4:	0a381c55 	beq	e08c40 <_Min_Stack_Size+0xe08840>
    1ae8:	0a310800 	beq	c43af0 <_Min_Stack_Size+0xc436f0>
    1aec:	3e1c0000 	cdpcc	0, 1, cr0, cr12, cr0, {0}
    1af0:	6f08000a 	svcvs	0x0008000a
    1af4:	1c00000a 	stcne	0, cr0, [r0], {10}
    1af8:	08000a4a 	stmdaeq	r0, {r1, r3, r6, r9, fp}
    1afc:	00000a76 	andeq	r0, r0, r6, ror sl
    1b00:	13091200 	movwne	r1, #37376	; 0x9200
    1b04:	b5010000 	strlt	r0, [r1, #-0]
    1b08:	0001a001 	andeq	sl, r1, r1
    1b0c:	000a5000 	andeq	r5, sl, r0
    1b10:	00002608 	andeq	r2, r0, r8, lsl #12
    1b14:	7a9c0100 	bvc	fe701f1c <_estack+0xde6d1f1c>
    1b18:	13000005 	movwne	r0, #5
    1b1c:	00001117 	andeq	r1, r0, r7, lsl r1
    1b20:	9501b501 	strls	fp, [r1, #-1281]	; 0x501
    1b24:	4a000001 	bmi	1b30 <_Min_Stack_Size+0x1730>
    1b28:	13000008 	movwne	r0, #8
    1b2c:	00001334 	andeq	r1, r0, r4, lsr r3
    1b30:	2901b501 	stmdbcs	r1, {r0, r8, sl, ip, sp, pc}
    1b34:	7e000002 	cdpvc	0, 0, cr0, cr0, cr2, {0}
    1b38:	14000008 	strne	r0, [r0], #-8
    1b3c:	00001359 	andeq	r1, r0, r9, asr r3
    1b40:	a701b701 	strge	fp, [r1, -r1, lsl #14]
    1b44:	c0000000 	andgt	r0, r0, r0
    1b48:	14000008 	strne	r0, [r0], #-8
    1b4c:	000011d4 	ldrdeq	r1, [r0], -r4
    1b50:	7f01b801 	svcvc	0x0001b801
    1b54:	d3000002 	movwle	r0, #2
    1b58:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    1b5c:	00001250 	andeq	r1, r0, r0, asr r2
    1b60:	a001b901 	andge	fp, r1, r1, lsl #18
    1b64:	01000001 	tsteq	r0, r1
    1b68:	0a601c54 	beq	1808cc0 <_Min_Stack_Size+0x18088c0>
    1b6c:	0a310800 	beq	c43b74 <_Min_Stack_Size+0xc43774>
    1b70:	661c0000 	ldrvs	r0, [ip], -r0
    1b74:	3108000a 	tstcc	r8, sl
    1b78:	1c00000a 	stcne	0, cr0, [r0], {10}
    1b7c:	08000a72 	stmdaeq	r0, {r1, r4, r5, r6, r9, fp}
    1b80:	00000a7d 	andeq	r0, r0, sp, ror sl
    1b84:	11b61e00 			; <UNDEFINED> instruction: 0x11b61e00
    1b88:	d0010000 	andle	r0, r1, r0
    1b8c:	0001a001 	andeq	sl, r1, r1
    1b90:	06100100 	ldreq	r0, [r0], -r0, lsl #2
    1b94:	170a0000 	strne	r0, [sl, -r0]
    1b98:	01000011 	tsteq	r0, r1, lsl r0
    1b9c:	019501d0 			; <UNDEFINED> instruction: 0x019501d0
    1ba0:	c60a0000 	strgt	r0, [sl], -r0
    1ba4:	01000013 	tsteq	r0, r3, lsl r0
    1ba8:	022901d0 	eoreq	r0, r9, #208, 2	; 0x34
    1bac:	c90b0000 	stmdbgt	fp, {}	; <UNPREDICTABLE>
    1bb0:	01000011 	tsteq	r0, r1, lsl r0
    1bb4:	018401d2 	ldrdeq	r0, [r4, r2]
    1bb8:	890b0000 	stmdbhi	fp, {}	; <UNPREDICTABLE>
    1bbc:	0100000f 	tsteq	r0, pc
    1bc0:	018401d2 	ldrdeq	r0, [r4, r2]
    1bc4:	220b0000 	andcs	r0, fp, #0
    1bc8:	01000014 	tsteq	r0, r4, lsl r0
    1bcc:	061001d3 			; <UNDEFINED> instruction: 0x061001d3
    1bd0:	7c0b0000 	stcvc	0, cr0, [fp], {-0}
    1bd4:	01000013 	tsteq	r0, r3, lsl r0
    1bd8:	061b01d4 			; <UNDEFINED> instruction: 0x061b01d4
    1bdc:	340b0000 	strcc	r0, [fp], #-0
    1be0:	01000013 	tsteq	r0, r3, lsl r0
    1be4:	01a001d5 	ldrdeq	r0, [r0, r5]!
    1be8:	8e0b0000 	cdphi	0, 0, cr0, cr11, cr0, {0}
    1bec:	01000012 	tsteq	r0, r2, lsl r0
    1bf0:	01a001d5 	ldrdeq	r0, [r0, r5]!
    1bf4:	840b0000 	strhi	r0, [fp], #-0
    1bf8:	01000011 	tsteq	r0, r1, lsl r0
    1bfc:	01a001d5 	ldrdeq	r0, [r0, r5]!
    1c00:	d40b0000 	strle	r0, [fp], #-0
    1c04:	01000011 	tsteq	r0, r1, lsl r0
    1c08:	027f01d6 	rsbseq	r0, pc, #-2147483595	; 0x80000035
    1c0c:	700b0000 	andvc	r0, fp, r0
    1c10:	01000013 	tsteq	r0, r3, lsl r0
    1c14:	009c01d7 			; <UNDEFINED> instruction: 0x009c01d7
    1c18:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1c1c:	00061604 	andeq	r1, r6, r4, lsl #12
    1c20:	010c0c00 	tsteq	ip, r0, lsl #24
    1c24:	04080000 	streq	r0, [r8], #-0
    1c28:	0000018a 	andeq	r0, r0, sl, lsl #3
    1c2c:	00057a1f 	andeq	r7, r5, pc, lsl sl
    1c30:	000a7800 	andeq	r7, sl, r0, lsl #16
    1c34:	00007008 	andeq	r7, r0, r8
    1c38:	ba9c0100 	blt	fe702040 <_estack+0xde6d2040>
    1c3c:	18000006 	stmdane	r0, {r1, r2}
    1c40:	0000058b 	andeq	r0, r0, fp, lsl #11
    1c44:	00000907 	andeq	r0, r0, r7, lsl #18
    1c48:	00059718 	andeq	r9, r5, r8, lsl r7
    1c4c:	00093b00 	andeq	r3, r9, r0, lsl #22
    1c50:	05a31a00 	streq	r1, [r3, #2560]!	; 0xa00
    1c54:	097d0000 	ldmdbeq	sp!, {}^	; <UNPREDICTABLE>
    1c58:	af1a0000 	svcge	0x001a0000
    1c5c:	bc000005 	stclt	0, cr0, [r0], {5}
    1c60:	20000009 	andcs	r0, r0, r9
    1c64:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    1c68:	c71a5601 	ldrgt	r5, [sl, -r1, lsl #12]
    1c6c:	da000005 	ble	1c88 <_Min_Stack_Size+0x1888>
    1c70:	1a000009 	bne	1c9c <_Min_Stack_Size+0x189c>
    1c74:	000005d3 	ldrdeq	r0, [r0], -r3
    1c78:	000009fc 	strdeq	r0, [r0], -ip
    1c7c:	0005df1a 	andeq	sp, r5, sl, lsl pc
    1c80:	000a2700 	andeq	r2, sl, r0, lsl #14
    1c84:	05eb1a00 	strbeq	r1, [fp, #2560]!	; 0xa00
    1c88:	0a500000 	beq	1401c90 <_Min_Stack_Size+0x1401890>
    1c8c:	f71a0000 			; <UNDEFINED> instruction: 0xf71a0000
    1c90:	8f000005 	svchi	0x00000005
    1c94:	1a00000a 	bne	1cc4 <_Min_Stack_Size+0x18c4>
    1c98:	00000603 	andeq	r0, r0, r3, lsl #12
    1c9c:	00000ac3 	andeq	r0, r0, r3, asr #21
    1ca0:	000a881c 	andeq	r8, sl, ip, lsl r8
    1ca4:	000a3108 	andeq	r3, sl, r8, lsl #2
    1ca8:	0a8e1c00 	beq	fe388cb0 <_estack+0xde358cb0>
    1cac:	0a480800 	beq	1203cb4 <_Min_Stack_Size+0x12038b4>
    1cb0:	b21c0000 	andslt	r0, ip, #0
    1cb4:	8e08000a 	cdphi	0, 0, cr0, cr8, cr10, {0}
    1cb8:	1c00000a 	stcne	0, cr0, [r0], {10}
    1cbc:	08000ade 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, fp}
    1cc0:	00000a50 	andeq	r0, r0, r0, asr sl
    1cc4:	11e00d00 	mvnne	r0, r0, lsl #26
    1cc8:	9a010000 	bls	41cd0 <_Min_Stack_Size+0x418d0>
    1ccc:	000001a0 	andeq	r0, r0, r0, lsr #3
    1cd0:	08000ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp}
    1cd4:	000000b2 	strheq	r0, [r0], -r2
    1cd8:	08219c01 	stmdaeq	r1!, {r0, sl, fp, ip, pc}
    1cdc:	17210000 	strne	r0, [r1, -r0]!
    1ce0:	01000011 	tsteq	r0, r1, lsl r0
    1ce4:	0001959a 	muleq	r1, sl, r5
    1ce8:	000afb00 	andeq	pc, sl, r0, lsl #22
    1cec:	13c62100 	bicne	r2, r6, #0, 2
    1cf0:	9a010000 	bls	41cf8 <_Min_Stack_Size+0x418f8>
    1cf4:	00000229 	andeq	r0, r0, r9, lsr #4
    1cf8:	00000b45 	andeq	r0, r0, r5, asr #22
    1cfc:	00126321 	andseq	r6, r2, r1, lsr #6
    1d00:	299a0100 	ldmibcs	sl, {r8}
    1d04:	cc000002 	stcgt	0, cr0, [r0], {2}
    1d08:	2100000b 	tstcs	r0, fp
    1d0c:	00001c47 	andeq	r1, r0, r7, asr #24
    1d10:	00b29a01 	adcseq	r9, r2, r1, lsl #20
    1d14:	0c3d0000 	ldceq	0, cr0, [sp], #-0
    1d18:	ed0e0000 	stc	0, cr0, [lr, #-0]
    1d1c:	01000013 	tsteq	r0, r3, lsl r0
    1d20:	0001a09c 	muleq	r1, ip, r0
    1d24:	000caa00 	andeq	sl, ip, r0, lsl #20
    1d28:	12500e00 	subsne	r0, r0, #0, 28
    1d2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d30:	000001a0 	andeq	r0, r0, r0, lsr #3
    1d34:	00000cc8 	andeq	r0, r0, r8, asr #25
    1d38:	0011d40e 	andseq	sp, r1, lr, lsl #8
    1d3c:	7f9d0100 	svcvc	0x009d0100
    1d40:	fd000002 	stc2	0, cr0, [r0, #-8]
    1d44:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    1d48:	00001145 	andeq	r1, r0, r5, asr #2
    1d4c:	009c9e01 	addseq	r9, ip, r1, lsl #28
    1d50:	0d470000 	stcleq	0, cr0, [r7, #-0]
    1d54:	920e0000 	andls	r0, lr, #0
    1d58:	01000011 	tsteq	r0, r1, lsl r0
    1d5c:	00009c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1d60:	000d5a00 	andeq	r5, sp, r0, lsl #20
    1d64:	0afe1c00 	beq	fff88d6c <_estack+0xdff58d6c>
    1d68:	0a310800 	beq	c43d70 <_Min_Stack_Size+0xc43970>
    1d6c:	041c0000 	ldreq	r0, [ip], #-0
    1d70:	3c08000b 	stccc	0, cr0, [r8], {11}
    1d74:	1c00000a 	stcne	0, cr0, [r0], {10}
    1d78:	08000b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp}
    1d7c:	00000a48 	andeq	r0, r0, r8, asr #20
    1d80:	000b1a0f 	andeq	r1, fp, pc, lsl #20
    1d84:	00057a08 	andeq	r7, r5, r8, lsl #20
    1d88:	00079000 	andeq	r9, r7, r0
    1d8c:	51011000 	mrspl	r1, (UNDEF: 1)
    1d90:	5101f303 	tstpl	r1, r3, lsl #6
    1d94:	02500110 	subseq	r0, r0, #16, 2
    1d98:	1c000074 	stcne	0, cr0, [r0], {116}	; 0x74
    1d9c:	08000b28 	stmdaeq	r0, {r3, r5, r8, r9, fp}
    1da0:	00000a50 	andeq	r0, r0, r0, asr sl
    1da4:	000b301c 	andeq	r3, fp, ip, lsl r0
    1da8:	000a3108 	andeq	r3, sl, r8, lsl #2
    1dac:	0b361c00 	bleq	d88db4 <_Min_Stack_Size+0xd889b4>
    1db0:	0a480800 	beq	1203db8 <_Min_Stack_Size+0x12039b8>
    1db4:	420f0000 	andmi	r0, pc, #0
    1db8:	7a08000b 	bvc	201dec <_Min_Stack_Size+0x2019ec>
    1dbc:	c6000005 	strgt	r0, [r0], -r5
    1dc0:	10000007 	andne	r0, r0, r7
    1dc4:	f3035101 	vrhadd.u8	d5, d3, d1
    1dc8:	01105101 	tsteq	r0, r1, lsl #2
    1dcc:	00740250 	rsbseq	r0, r4, r0, asr r2
    1dd0:	0b5a0f00 	bleq	16859d8 <_Min_Stack_Size+0x16855d8>
    1dd4:	0a100800 	beq	403ddc <_Min_Stack_Size+0x4039dc>
    1dd8:	07ea0000 	strbeq	r0, [sl, r0]!
    1ddc:	01100000 	tsteq	r0, r0
    1de0:	00770252 	rsbseq	r0, r7, r2, asr r2
    1de4:	06510110 			; <UNDEFINED> instruction: 0x06510110
    1de8:	46440075 			; <UNDEFINED> instruction: 0x46440075
    1dec:	01102124 	tsteq	r0, r4, lsr #2
    1df0:	04740250 	ldrbteq	r0, [r4], #-592	; 0x250
    1df4:	0b5e1c00 	bleq	1788dfc <_Min_Stack_Size+0x17889fc>
    1df8:	0a500800 	beq	1403e00 <_Min_Stack_Size+0x1403a00>
    1dfc:	641c0000 	ldrvs	r0, [ip], #-0
    1e00:	5c08000b 	stcpl	0, cr0, [r8], {11}
    1e04:	1c00000a 	stcne	0, cr0, [r0], {10}
    1e08:	08000b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp}
    1e0c:	00000a63 	andeq	r0, r0, r3, ror #20
    1e10:	000b761c 	andeq	r7, fp, ip, lsl r6
    1e14:	000a6f08 	andeq	r6, sl, r8, lsl #30
    1e18:	0b8a1c00 	bleq	fe288e20 <_estack+0xde258e20>
    1e1c:	0a760800 	beq	1d83e24 <_Min_Stack_Size+0x1d83a24>
    1e20:	981c0000 	ldmdals	ip, {}	; <UNPREDICTABLE>
    1e24:	3108000b 	tstcc	r8, fp
    1e28:	0000000a 	andeq	r0, r0, sl
    1e2c:	0013a122 	andseq	sl, r3, r2, lsr #2
    1e30:	022d0100 	eoreq	r0, sp, #0, 2
    1e34:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
    1e38:	00000040 	andeq	r0, r0, r0, asr #32
    1e3c:	08ac9c01 	stmiaeq	ip!, {r0, sl, fp, ip, pc}
    1e40:	17130000 	ldrne	r0, [r3, -r0]
    1e44:	01000011 	tsteq	r0, r1, lsl r0
    1e48:	0195022d 	orrseq	r0, r5, sp, lsr #4
    1e4c:	0d920000 	ldceq	0, cr0, [r2]
    1e50:	d4140000 	ldrle	r0, [r4], #-0
    1e54:	01000011 	tsteq	r0, r1, lsl r0
    1e58:	027f022f 	rsbseq	r0, pc, #-268435454	; 0xf0000002
    1e5c:	0dc90000 	stcleq	0, cr0, [r9]
    1e60:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
    1e64:	01000011 	tsteq	r0, r1, lsl r0
    1e68:	08ac0230 	stmiaeq	ip!, {r4, r5, r9}
    1e6c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1e70:	a41c0000 	ldrge	r0, [ip], #-0
    1e74:	4808000b 	stmdami	r8, {r0, r1, r3}
    1e78:	0f00000a 	svceq	0x0000000a
    1e7c:	08000bc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, fp}
    1e80:	00000a8e 	andeq	r0, r0, lr, lsl #21
    1e84:	00000885 	andeq	r0, r0, r5, lsl #17
    1e88:	03510110 	cmpeq	r1, #16, 2
    1e8c:	00244540 	eoreq	r4, r4, r0, asr #10
    1e90:	000bce0f 	andeq	ip, fp, pc, lsl #28
    1e94:	000aa908 	andeq	sl, sl, r8, lsl #18
    1e98:	00089900 	andeq	r9, r8, r0, lsl #18
    1e9c:	50011000 	andpl	r1, r1, r0
    1ea0:	00007402 	andeq	r7, r0, r2, lsl #8
    1ea4:	000bd623 	andeq	sp, fp, r3, lsr #12
    1ea8:	000a5008 	andeq	r5, sl, r8
    1eac:	0bda1c00 	bleq	ff688eb4 <_estack+0xdf658eb4>
    1eb0:	0a310800 	beq	c43eb8 <_Min_Stack_Size+0xc43ab8>
    1eb4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1eb8:	0008b204 	andeq	fp, r8, r4, lsl #4
    1ebc:	018a0c00 	orreq	r0, sl, r0, lsl #24
    1ec0:	73220000 	teqvc	r2, #0
    1ec4:	01000012 	tsteq	r0, r2, lsl r0
    1ec8:	0bdc0246 	bleq	ff7027e8 <_estack+0xdf6d27e8>
    1ecc:	007a0800 	rsbseq	r0, sl, r0, lsl #16
    1ed0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ed4:	00000995 	muleq	r0, r5, r9
    1ed8:	00129e13 	andseq	r9, r2, r3, lsl lr
    1edc:	02460100 	subeq	r0, r6, #0, 2
    1ee0:	00000088 	andeq	r0, r0, r8, lsl #1
    1ee4:	00000e3f 	andeq	r0, r0, pc, lsr lr
    1ee8:	00115513 	andseq	r5, r1, r3, lsl r5
    1eec:	02460100 	subeq	r0, r6, #0, 2
    1ef0:	00000995 	muleq	r0, r5, r9
    1ef4:	00000e9a 	muleq	r0, sl, lr
    1ef8:	00057a24 	andeq	r7, r5, r4, lsr #20
    1efc:	000bde00 	andeq	sp, fp, r0, lsl #28
    1f00:	0001a008 	andeq	sl, r1, r8
    1f04:	02480100 	subeq	r0, r8, #0, 2
    1f08:	00059718 	andeq	r9, r5, r8, lsl r7
    1f0c:	000edc00 	andeq	sp, lr, r0, lsl #24
    1f10:	058b1800 	streq	r1, [fp, #2048]	; 0x800
    1f14:	0f1e0000 	svceq	0x001e0000
    1f18:	a0190000 	andsge	r0, r9, r0
    1f1c:	1a000001 	bne	1f28 <_Min_Stack_Size+0x1b28>
    1f20:	000005a3 	andeq	r0, r0, r3, lsr #11
    1f24:	00000f79 	andeq	r0, r0, r9, ror pc
    1f28:	0005af1a 	andeq	sl, r5, sl, lsl pc
    1f2c:	000fb800 	andeq	fp, pc, r0, lsl #16
    1f30:	05bb1a00 	ldreq	r1, [fp, #2560]!	; 0xa00
    1f34:	0fd60000 	svceq	0x00d60000
    1f38:	c71a0000 	ldrgt	r0, [sl, -r0]
    1f3c:	14000005 	strne	r0, [r0], #-5
    1f40:	1a000010 	bne	1f88 <_Min_Stack_Size+0x1b88>
    1f44:	000005d3 	ldrdeq	r0, [r0], -r3
    1f48:	00001063 	andeq	r1, r0, r3, rrx
    1f4c:	0005df1a 	andeq	sp, r5, sl, lsl pc
    1f50:	00109c00 	andseq	r9, r0, r0, lsl #24
    1f54:	05eb1a00 	strbeq	r1, [fp, #2560]!	; 0xa00
    1f58:	10c50000 	sbcne	r0, r5, r0
    1f5c:	f71a0000 			; <UNDEFINED> instruction: 0xf71a0000
    1f60:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1f64:	1a00000f 	bne	1fa8 <_Min_Stack_Size+0x1ba8>
    1f68:	00000603 	andeq	r0, r0, r3, lsl #12
    1f6c:	00001104 	andeq	r1, r0, r4, lsl #2
    1f70:	000bec1c 	andeq	lr, fp, ip, lsl ip
    1f74:	000a3108 	andeq	r3, sl, r8, lsl #2
    1f78:	0bf21c00 	bleq	ffc88f80 <_estack+0xdfc58f80>
    1f7c:	0a480800 	beq	1203f84 <_Min_Stack_Size+0x1203b84>
    1f80:	161c0000 	ldrne	r0, [ip], -r0
    1f84:	8e08000c 	cdphi	0, 0, cr0, cr8, cr12, {0}
    1f88:	2300000a 	movwcs	r0, #10
    1f8c:	08000c46 	stmdaeq	r0, {r1, r2, r6, sl, fp}
    1f90:	00000a50 	andeq	r0, r0, r0, asr sl
    1f94:	000c5623 	andeq	r5, ip, r3, lsr #12
    1f98:	000a5008 	andeq	r5, sl, r8
    1f9c:	00000000 	andeq	r0, r0, r0
    1fa0:	0000910c 	andeq	r9, r0, ip, lsl #2
    1fa4:	11231200 	teqne	r3, r0, lsl #4
    1fa8:	7d010000 	stcvc	0, cr0, [r1, #-0]
    1fac:	0000a702 	andeq	sl, r0, r2, lsl #14
    1fb0:	000c5800 	andeq	r5, ip, r0, lsl #16
    1fb4:	00000608 	andeq	r0, r0, r8, lsl #12
    1fb8:	e39c0100 	orrs	r0, ip, #0, 2
    1fbc:	13000009 	movwne	r0, #9
    1fc0:	00001117 	andeq	r1, r0, r7, lsl r1
    1fc4:	88027d01 	stmdahi	r2, {r0, r8, sl, fp, ip, sp, lr}
    1fc8:	3c000000 	stccc	0, cr0, [r0], {-0}
    1fcc:	1d000011 	stcne	0, cr0, [r0, #-68]	; 0xffffffbc
    1fd0:	00001251 	andeq	r1, r0, r1, asr r2
    1fd4:	a7027f01 	strge	r7, [r2, -r1, lsl #30]
    1fd8:	01000000 	mrseq	r0, (UNDEF: 0)
    1fdc:	11d41450 	bicsne	r1, r4, r0, asr r4
    1fe0:	80010000 	andhi	r0, r1, r0
    1fe4:	00027f02 	andeq	r7, r2, r2, lsl #30
    1fe8:	00113c00 	andseq	r3, r1, r0, lsl #24
    1fec:	d0250000 	eorle	r0, r5, r0
    1ff0:	08000010 	stmdaeq	r0, {r4}
    1ff4:	00880171 	addeq	r0, r8, r1, ror r1
    1ff8:	09f90000 	ldmibeq	r9!, {}^	; <UNPREDICTABLE>
    1ffc:	25260000 	strcs	r0, [r6, #-0]!
    2000:	00000000 	andeq	r0, r0, r0
    2004:	000da327 	andeq	sl, sp, r7, lsr #6
    2008:	01500600 	cmpeq	r0, r0, lsl #12
    200c:	00000a0b 	andeq	r0, r0, fp, lsl #20
    2010:	000a0b26 	andeq	r0, sl, r6, lsr #22
    2014:	1b0c0000 	blne	30201c <_Min_Stack_Size+0x301c1c>
    2018:	27000006 	strcs	r0, [r0, -r6]
    201c:	00001231 	andeq	r1, r0, r1, lsr r2
    2020:	2c058609 	stccs	6, cr8, [r5], {9}
    2024:	2600000a 	strcs	r0, [r0], -sl
    2028:	0000061b 	andeq	r0, r0, fp, lsl r6
    202c:	000a2c26 	andeq	r2, sl, r6, lsr #24
    2030:	0a2c2600 	beq	b0b838 <_Min_Stack_Size+0xb0b438>
    2034:	0c000000 	stceq	0, cr0, [r0], {-0}
    2038:	000000b2 	strheq	r0, [r0], -r2
    203c:	000d8c28 	andeq	r8, sp, r8, lsr #24
    2040:	917d0500 	cmnls	sp, r0, lsl #10
    2044:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    2048:	00001342 	andeq	r1, r0, r2, asr #6
    204c:	9c05da09 	stcls	10, cr13, [r5], {9}
    2050:	2a000000 	bcs	2058 <_Min_Stack_Size+0x1c58>
    2054:	000013dd 	ldrdeq	r1, [r0], -sp
    2058:	2903cf09 	stmdbcs	r3, {r0, r3, r8, r9, sl, fp, lr, pc}
    205c:	00001325 	andeq	r1, r0, r5, lsr #6
    2060:	9c040509 	cfstr32ls	mvfx0, [r4], {9}
    2064:	2b000000 	blcs	206c <_Min_Stack_Size+0x1c6c>
    2068:	000013d2 	ldrdeq	r1, [r0], -r2
    206c:	fd297205 	stc2	2, cr7, [r9, #-20]!	; 0xffffffec
    2070:	09000010 	stmdbeq	r0, {r4}
    2074:	00b205be 	ldrhteq	r0, [r2], lr
    2078:	b32b0000 	teqlt	fp, #0
    207c:	05000013 	streq	r0, [r0, #-19]
    2080:	13832b7b 	orrne	r2, r3, #125952	; 0x1ec00
    2084:	7c050000 	stcvc	0, cr0, [r5], {-0}
    2088:	000e492c 	andeq	r4, lr, ip, lsr #18
    208c:	8e7e0500 	cdphi	5, 7, cr0, cr14, cr0, {0}
    2090:	2600000a 	strcs	r0, [r0], -sl
    2094:	00000091 	muleq	r0, r1, r0
    2098:	143e2500 	ldrtne	r2, [lr], #-1280	; 0x500
    209c:	ae090000 	cdpge	0, 0, cr0, cr9, cr0, {0}
    20a0:	00009c05 	andeq	r9, r0, r5, lsl #24
    20a4:	000aa900 	andeq	sl, sl, r0, lsl #18
    20a8:	01842600 	orreq	r2, r4, r0, lsl #12
    20ac:	2c260000 	stccs	0, cr0, [r6], #-0
    20b0:	0000000a 	andeq	r0, r0, sl
    20b4:	0012592d 	andseq	r5, r2, sp, lsr #18
    20b8:	01720800 	cmneq	r2, r0, lsl #16
    20bc:	00008826 	andeq	r8, r0, r6, lsr #16
    20c0:	94000000 	strls	r0, [r0], #-0
    20c4:	04000002 	streq	r0, [r0], #-2
    20c8:	00086e00 	andeq	r6, r8, r0, lsl #28
    20cc:	84010400 	strhi	r0, [r1], #-1024	; 0x400
    20d0:	01000002 	tsteq	r0, r2
    20d4:	00001493 	muleq	r0, r3, r4
    20d8:	00000101 	andeq	r0, r0, r1, lsl #2
    20dc:	00000218 	andeq	r0, r0, r8, lsl r2
    20e0:	00000000 	andeq	r0, r0, r0
    20e4:	000009e7 	andeq	r0, r0, r7, ror #19
    20e8:	7d070402 	cfstrsvc	mvf0, [r7, #-8]
    20ec:	03000001 	movweq	r0, #1
    20f0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    20f4:	01020074 	tsteq	r2, r4, ror r0
    20f8:	00015006 	andeq	r5, r1, r6
    20fc:	08010200 	stmdaeq	r1, {r9}
    2100:	0000014e 	andeq	r0, r0, lr, asr #2
    2104:	df050202 	svcle	0x00050202
    2108:	02000000 	andeq	r0, r0, #0
    210c:	01e50702 	mvneq	r0, r2, lsl #14
    2110:	04020000 	streq	r0, [r2], #-0
    2114:	0000c505 	andeq	ip, r0, r5, lsl #10
    2118:	00510400 	subseq	r0, r1, r0, lsl #8
    211c:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    2120:	00000061 	andeq	r0, r0, r1, rrx
    2124:	78070402 	stmdavc	r7, {r1, sl}
    2128:	02000001 	andeq	r0, r0, #1
    212c:	00c00508 	sbceq	r0, r0, r8, lsl #10
    2130:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2134:	00017307 	andeq	r7, r1, r7, lsl #6
    2138:	07040200 	streq	r0, [r4, -r0, lsl #4]
    213c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2140:	01020405 	tsteq	r2, r5, lsl #8
    2144:	00015708 	andeq	r5, r1, r8, lsl #14
    2148:	00530400 	subseq	r0, r3, r0, lsl #8
    214c:	42030000 	andmi	r0, r3, #0
    2150:	00000056 	andeq	r0, r0, r6, asr r0
    2154:	000fde04 	andeq	sp, pc, r4, lsl #28
    2158:	615f0400 	cmpvs	pc, r0, lsl #8
    215c:	04000000 	streq	r0, [r0], #-0
    2160:	00000e70 	andeq	r0, r0, r0, ror lr
    2164:	00866504 	addeq	r6, r6, r4, lsl #10
    2168:	b1060000 	mrslt	r0, (UNDEF: 6)
    216c:	1400000e 	strne	r0, [r0], #-14
    2170:	00f08805 	rscseq	r8, r0, r5, lsl #16
    2174:	8d070000 	stchi	0, cr0, [r7, #-0]
    2178:	0500000e 	streq	r0, [r0, #-14]
    217c:	00009c8a 	andeq	r9, r0, sl, lsl #25
    2180:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
    2184:	0500000f 	streq	r0, [r0, #-15]
    2188:	0000f08b 	andeq	pc, r0, fp, lsl #1
    218c:	c6070400 	strgt	r0, [r7], -r0, lsl #8
    2190:	0500000d 	streq	r0, [r0, #-13]
    2194:	0000f08c 	andeq	pc, r0, ip, lsl #1
    2198:	2c070800 	stccs	8, cr0, [r7], {-0}
    219c:	0500000e 	streq	r0, [r0, #-14]
    21a0:	00007d8d 	andeq	r7, r0, sp, lsl #27
    21a4:	22070c00 	andcs	r0, r7, #0, 24
    21a8:	0500000f 	streq	r0, [r0, #-15]
    21ac:	00007d8e 	andeq	r7, r0, lr, lsl #27
    21b0:	08001000 	stmdaeq	r0, {ip}
    21b4:	0000a704 	andeq	sl, r0, r4, lsl #14
    21b8:	0e650400 	cdpeq	4, 6, cr0, cr5, cr0, {0}
    21bc:	90050000 	andls	r0, r5, r0
    21c0:	000000a7 	andeq	r0, r0, r7, lsr #1
    21c4:	0010c006 	andseq	ip, r0, r6
    21c8:	92050c00 	andls	r0, r5, #0, 24
    21cc:	00000132 	andeq	r0, r0, r2, lsr r1
    21d0:	000e8d07 	andeq	r8, lr, r7, lsl #26
    21d4:	9c940500 	cfldr32ls	mvfx0, [r4], {0}
    21d8:	00000000 	andeq	r0, r0, r0
    21dc:	000f8907 	andeq	r8, pc, r7, lsl #18
    21e0:	f0950500 			; <UNDEFINED> instruction: 0xf0950500
    21e4:	04000000 	streq	r0, [r0], #-0
    21e8:	000dc607 	andeq	ip, sp, r7, lsl #12
    21ec:	f0960500 			; <UNDEFINED> instruction: 0xf0960500
    21f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    21f4:	0e610400 	cdpeq	4, 6, cr0, cr1, cr0, {0}
    21f8:	98050000 	stmdals	r5, {}	; <UNPREDICTABLE>
    21fc:	00000101 	andeq	r0, r0, r1, lsl #2
    2200:	000e8706 	andeq	r8, lr, r6, lsl #14
    2204:	9d051400 	cfstrsls	mvf1, [r5, #-0]
    2208:	0000016e 	andeq	r0, r0, lr, ror #2
    220c:	00101807 	andseq	r1, r0, r7, lsl #16
    2210:	919f0500 	orrsls	r0, pc, r0, lsl #10
    2214:	00000000 	andeq	r0, r0, r0
    2218:	0010b807 	andseq	fp, r0, r7, lsl #16
    221c:	6ea00500 	cdpvs	5, 10, cr0, cr0, cr0, {0}
    2220:	04000001 	streq	r0, [r0], #-1
    2224:	00142307 	andseq	r2, r4, r7, lsl #6
    2228:	32a10500 	adccc	r0, r1, #0, 10
    222c:	08000001 	stmdaeq	r0, {r0}
    2230:	f6040800 			; <UNDEFINED> instruction: 0xf6040800
    2234:	04000000 	streq	r0, [r0], #-0
    2238:	00000f75 	andeq	r0, r0, r5, ror pc
    223c:	013da205 	teqeq	sp, r5, lsl #4
    2240:	a3090000 	movwge	r0, #36864	; 0x9000
    2244:	0100000d 	tsteq	r0, sp
    2248:	000c604b 	andeq	r6, ip, fp, asr #32
    224c:	00001608 	andeq	r1, r0, r8, lsl #12
    2250:	a29c0100 	addsge	r0, ip, #0, 2
    2254:	0a000001 	beq	2260 <_Min_Stack_Size+0x1e60>
    2258:	0000137c 	andeq	r1, r0, ip, ror r3
    225c:	01a24b01 			; <UNDEFINED> instruction: 0x01a24b01
    2260:	50010000 	andpl	r0, r1, r0
    2264:	01a70b00 			; <UNDEFINED> instruction: 0x01a70b00
    2268:	04080000 	streq	r0, [r8], #-0
    226c:	00000174 	andeq	r0, r0, r4, ror r1
    2270:	0010e909 	andseq	lr, r0, r9, lsl #18
    2274:	785f0100 	ldmdavc	pc, {r8}^	; <UNPREDICTABLE>
    2278:	0608000c 	streq	r0, [r8], -ip
    227c:	01000000 	mrseq	r0, (UNDEF: 0)
    2280:	0001d09c 	muleq	r1, ip, r0
    2284:	14810a00 	strne	r0, [r1], #2560	; 0xa00
    2288:	5f010000 	svcpl	0x00010000
    228c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2290:	0b005001 	bleq	1629c <_Min_Stack_Size+0x15e9c>
    2294:	0000016e 	andeq	r0, r0, lr, ror #2
    2298:	000fb609 	andeq	fp, pc, r9, lsl #12
    229c:	80660100 	rsbhi	r0, r6, r0, lsl #2
    22a0:	1e08000c 	cdpne	0, 0, cr0, cr8, cr12, {0}
    22a4:	01000000 	mrseq	r0, (UNDEF: 0)
    22a8:	0002129c 	muleq	r2, ip, r2
    22ac:	137c0a00 	cmnne	ip, #0, 20
    22b0:	66010000 	strvs	r0, [r1], -r0
    22b4:	000001a2 	andeq	r0, r0, r2, lsr #3
    22b8:	a30a5001 	movwge	r5, #40961	; 0xa001
    22bc:	01000014 	tsteq	r0, r4, lsl r0
    22c0:	0001d066 	andeq	sp, r1, r6, rrx
    22c4:	0c510100 	ldfeqe	f0, [r1], {-0}
    22c8:	000010b8 	strheq	r1, [r0], -r8
    22cc:	01d06801 	bicseq	r6, r0, r1, lsl #16
    22d0:	53010000 	movwpl	r0, #4096	; 0x1000
    22d4:	0db30900 	ldceq	9, cr0, [r3]
    22d8:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    22dc:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
    22e0:	00000034 	andeq	r0, r0, r4, lsr r0
    22e4:	02609c01 	rsbeq	r9, r0, #256	; 0x100
    22e8:	7c0a0000 	stcvc	0, cr0, [sl], {-0}
    22ec:	01000013 	tsteq	r0, r3, lsl r0
    22f0:	0001a279 	andeq	sl, r1, r9, ror r2
    22f4:	0a500100 	beq	14026fc <_Min_Stack_Size+0x14022fc>
    22f8:	000014a3 	andeq	r1, r0, r3, lsr #9
    22fc:	01d07901 	bicseq	r7, r0, r1, lsl #18
    2300:	51010000 	mrspl	r0, (UNDEF: 1)
    2304:	0014880d 	andseq	r8, r4, sp, lsl #16
    2308:	6e7b0100 	rpwvse	f0, f3, f0
    230c:	5d000001 	stcpl	0, cr0, [r0, #-4]
    2310:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    2314:	0000146f 	andeq	r1, r0, pc, ror #8
    2318:	02607c01 	rsbeq	r7, r0, #256	; 0x100
    231c:	117b0000 	cmnne	fp, r0
    2320:	0b000000 	bleq	2328 <_Min_Stack_Size+0x1f28>
    2324:	0000009c 	muleq	r0, ip, r0
    2328:	000f7c0e 	andeq	r7, pc, lr, lsl #24
    232c:	91b30100 			; <UNDEFINED> instruction: 0x91b30100
    2330:	d4000000 	strle	r0, [r0], #-0
    2334:	2808000c 	stmdacs	r8, {r2, r3}
    2338:	01000000 	mrseq	r0, (UNDEF: 0)
    233c:	14600f9c 	strbtne	r0, [r0], #-3996	; 0xf9c
    2340:	b3010000 	movwlt	r0, #4096	; 0x1000
    2344:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2348:	000011a5 	andeq	r1, r0, r5, lsr #3
    234c:	00137c0c 	andseq	r7, r3, ip, lsl #24
    2350:	a2b70100 	adcsge	r0, r7, #0, 2
    2354:	01000001 	tsteq	r0, r1
    2358:	ae000053 	mcrge	0, 0, r0, cr0, cr3, {2}
    235c:	04000019 	streq	r0, [r0], #-25
    2360:	00094a00 	andeq	r4, r9, r0, lsl #20
    2364:	84010400 	strhi	r0, [r1], #-1024	; 0x400
    2368:	01000002 	tsteq	r0, r2
    236c:	00001728 	andeq	r1, r0, r8, lsr #14
    2370:	00000101 	andeq	r0, r0, r1, lsl #2
    2374:	00000360 	andeq	r0, r0, r0, ror #6
    2378:	00000000 	andeq	r0, r0, r0
    237c:	00000b57 	andeq	r0, r0, r7, asr fp
    2380:	000dbf02 	andeq	fp, sp, r2, lsl #30
    2384:	30d40200 	sbcscc	r0, r4, r0, lsl #4
    2388:	03000000 	movweq	r0, #0
    238c:	017d0704 	cmneq	sp, r4, lsl #14
    2390:	04040000 	streq	r0, [r4], #-0
    2394:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2398:	15b70200 	ldrne	r0, [r7, #512]!	; 0x200
    239c:	1b030000 	blne	c23a4 <_Min_Stack_Size+0xc1fa4>
    23a0:	00000049 	andeq	r0, r0, r9, asr #32
    23a4:	50060103 	andpl	r0, r6, r3, lsl #2
    23a8:	02000001 	andeq	r0, r0, #1
    23ac:	000000f2 	strdeq	r0, [r0], -r2
    23b0:	005b1c03 	subseq	r1, fp, r3, lsl #24
    23b4:	01030000 	mrseq	r0, (UNDEF: 3)
    23b8:	00014e08 	andeq	r4, r1, r8, lsl #28
    23bc:	05020300 	streq	r0, [r2, #-768]	; 0x300
    23c0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    23c4:	e5070203 	str	r0, [r7, #-515]	; 0x203
    23c8:	03000001 	movweq	r0, #1
    23cc:	00c50504 	sbceq	r0, r5, r4, lsl #10
    23d0:	51020000 	mrspl	r0, (UNDEF: 2)
    23d4:	03000000 	movweq	r0, #0
    23d8:	00008238 	andeq	r8, r0, r8, lsr r2
    23dc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    23e0:	00000178 	andeq	r0, r0, r8, ror r1
    23e4:	c0050803 	andgt	r0, r5, r3, lsl #16
    23e8:	03000000 	movweq	r0, #0
    23ec:	01730708 	cmneq	r3, r8, lsl #14
    23f0:	04030000 	streq	r0, [r3], #-0
    23f4:	00002c07 	andeq	r2, r0, r7, lsl #24
    23f8:	03040500 	movweq	r0, #17664	; 0x4500
    23fc:	01570801 	cmpeq	r7, r1, lsl #16
    2400:	04060000 	streq	r0, [r6], #-0
    2404:	000000ad 	andeq	r0, r0, sp, lsr #1
    2408:	0000a007 	andeq	sl, r0, r7
    240c:	b8040600 	stmdalt	r4, {r9, sl}
    2410:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2414:	0015b902 	andseq	fp, r5, r2, lsl #18
    2418:	3e290400 	cdpcc	4, 2, cr0, cr9, cr0, {0}
    241c:	02000000 	andeq	r0, r0, #0
    2420:	000000f4 	strdeq	r0, [r0], -r4
    2424:	00502a04 	subseq	r2, r0, r4, lsl #20
    2428:	53020000 	movwpl	r0, #8192	; 0x2000
    242c:	04000000 	streq	r0, [r0], #-0
    2430:	00007742 	andeq	r7, r0, r2, asr #14
    2434:	0fdf0200 	svceq	0x00df0200
    2438:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    243c:	00000070 	andeq	r0, r0, r0, ror r0
    2440:	000fde02 	andeq	sp, pc, r2, lsl #28
    2444:	825f0500 	subshi	r0, pc, #0, 10
    2448:	02000000 	andeq	r0, r0, #0
    244c:	00000e70 	andeq	r0, r0, r0, ror lr
    2450:	00cf6505 	sbceq	r6, pc, r5, lsl #10
    2454:	b1090000 	mrslt	r0, (UNDEF: 9)
    2458:	1400000e 	strne	r0, [r0], #-14
    245c:	01448806 	cmpeq	r4, r6, lsl #16
    2460:	8d0a0000 	stchi	0, cr0, [sl, #-0]
    2464:	0600000e 	streq	r0, [r0], -lr
    2468:	0000f08a 	andeq	pc, r0, sl, lsl #1
    246c:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
    2470:	0600000f 	streq	r0, [r0], -pc
    2474:	0001448b 	andeq	r4, r1, fp, lsl #9
    2478:	c60a0400 	strgt	r0, [sl], -r0, lsl #8
    247c:	0600000d 	streq	r0, [r0], -sp
    2480:	0001448c 	andeq	r4, r1, ip, lsl #9
    2484:	2c0a0800 	stccs	8, cr0, [sl], {-0}
    2488:	0600000e 	streq	r0, [r0], -lr
    248c:	00009e8d 	andeq	r9, r0, sp, lsl #29
    2490:	220a0c00 	andcs	r0, sl, #0, 24
    2494:	0600000f 	streq	r0, [r0], -pc
    2498:	00009e8e 	andeq	r9, r0, lr, lsl #29
    249c:	06001000 	streq	r1, [r0], -r0
    24a0:	0000fb04 	andeq	pc, r0, r4, lsl #22
    24a4:	0e650200 	cdpeq	2, 6, cr0, cr5, cr0, {0}
    24a8:	90060000 	andls	r0, r6, r0
    24ac:	000000fb 	strdeq	r0, [r0], -fp
    24b0:	0010c009 	andseq	ip, r0, r9
    24b4:	92060c00 	andls	r0, r6, #0, 24
    24b8:	00000186 	andeq	r0, r0, r6, lsl #3
    24bc:	000e8d0a 	andeq	r8, lr, sl, lsl #26
    24c0:	f0940600 			; <UNDEFINED> instruction: 0xf0940600
    24c4:	00000000 	andeq	r0, r0, r0
    24c8:	000f890a 	andeq	r8, pc, sl, lsl #18
    24cc:	44950600 	ldrmi	r0, [r5], #1536	; 0x600
    24d0:	04000001 	streq	r0, [r0], #-1
    24d4:	000dc60a 	andeq	ip, sp, sl, lsl #12
    24d8:	44960600 	ldrmi	r0, [r6], #1536	; 0x600
    24dc:	08000001 	stmdaeq	r0, {r0}
    24e0:	0e610200 	cdpeq	2, 6, cr0, cr1, cr0, {0}
    24e4:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
    24e8:	00000155 	andeq	r0, r0, r5, asr r1
    24ec:	000e8709 	andeq	r8, lr, r9, lsl #14
    24f0:	9d061400 	cfstrsls	mvf1, [r6, #-0]
    24f4:	000001c2 	andeq	r0, r0, r2, asr #3
    24f8:	0010180a 	andseq	r1, r0, sl, lsl #16
    24fc:	e59f0600 	ldr	r0, [pc, #1536]	; 2b04 <_Min_Stack_Size+0x2704>
    2500:	00000000 	andeq	r0, r0, r0
    2504:	0010b80a 	andseq	fp, r0, sl, lsl #16
    2508:	c2a00600 	adcgt	r0, r0, #0, 12
    250c:	04000001 	streq	r0, [r0], #-1
    2510:	0014230a 	andseq	r2, r4, sl, lsl #6
    2514:	86a10600 	strthi	r0, [r1], r0, lsl #12
    2518:	08000001 	stmdaeq	r0, {r0}
    251c:	4a040600 	bmi	103d24 <_Min_Stack_Size+0x103924>
    2520:	02000001 	andeq	r0, r0, #1
    2524:	00000f75 	andeq	r0, r0, r5, ror pc
    2528:	0191a206 	orrseq	sl, r1, r6, lsl #4
    252c:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    2530:	07000016 	smladeq	r0, r6, r0, r0
    2534:	00009e63 	andeq	r9, r0, r3, ror #28
    2538:	15c00900 	strbne	r0, [r0, #2304]	; 0x900
    253c:	07080000 	streq	r0, [r8, -r0]
    2540:	00020378 	andeq	r0, r2, r8, ror r3
    2544:	164b0a00 	strbne	r0, [fp], -r0, lsl #20
    2548:	7a070000 	bvc	1c2550 <_Min_Stack_Size+0x1c2150>
    254c:	000000da 	ldrdeq	r0, [r0], -sl
    2550:	16a60a00 	strtne	r0, [r6], r0, lsl #20
    2554:	7b070000 	blvc	1c255c <_Min_Stack_Size+0x1c215c>
    2558:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    255c:	01020004 	tsteq	r2, r4
    2560:	07000015 	smladeq	r0, r5, r0, r0
    2564:	0001de7c 	andeq	sp, r1, ip, ror lr
    2568:	18a40200 	stmiane	r4!, {r9}
    256c:	54080000 	strpl	r0, [r8], #-0
    2570:	0000009e 	muleq	r0, lr, r0
    2574:	8301040b 	movwhi	r0, #5131	; 0x140b
    2578:	00000238 	andeq	r0, r0, r8, lsr r2
    257c:	0016400c 	andseq	r4, r6, ip
    2580:	38850100 	stmcc	r5, {r8}
    2584:	0c000002 	stceq	0, cr0, [r0], {2}
    2588:	000017f4 	strdeq	r1, [r0], -r4
    258c:	00e58601 	rsceq	r8, r5, r1, lsl #12
    2590:	06000000 	streq	r0, [r0], -r0
    2594:	0000b904 	andeq	fp, r0, r4, lsl #18
    2598:	17e40900 	strbne	r0, [r4, r0, lsl #18]!
    259c:	01540000 	cmpeq	r4, r0
    25a0:	0002e57d 	andeq	lr, r2, sp, ror r5
    25a4:	16860a00 	strne	r0, [r6], r0, lsl #20
    25a8:	7f010000 	svcvc	0x00010000
    25ac:	00000238 	andeq	r0, r0, r8, lsr r2
    25b0:	19200a00 	stmdbne	r0!, {r9, fp}
    25b4:	80010000 	andhi	r0, r1, r0
    25b8:	00000238 	andeq	r0, r0, r8, lsr r2
    25bc:	19c30a04 	stmibne	r3, {r2, r9, fp}^
    25c0:	81010000 	mrshi	r0, (UNDEF: 1)
    25c4:	00000238 	andeq	r0, r0, r8, lsr r2
    25c8:	00750d08 	rsbseq	r0, r5, r8, lsl #26
    25cc:	02198701 	andseq	r8, r9, #262144	; 0x40000
    25d0:	0a0c0000 	beq	3025d8 <_Min_Stack_Size+0x3021d8>
    25d4:	00001995 	muleq	r0, r5, r9
    25d8:	01c88901 	biceq	r8, r8, r1, lsl #18
    25dc:	0a100000 	beq	4025e4 <_Min_Stack_Size+0x4021e4>
    25e0:	0000178c 	andeq	r1, r0, ip, lsl #15
    25e4:	01c88a01 	biceq	r8, r8, r1, lsl #20
    25e8:	0a240000 	beq	9025f0 <_Min_Stack_Size+0x9021f0>
    25ec:	000018b2 			; <UNDEFINED> instruction: 0x000018b2
    25f0:	02e58c01 	rsceq	r8, r5, #256	; 0x100
    25f4:	0a380000 	beq	e025fc <_Min_Stack_Size+0xe021fc>
    25f8:	00001667 	andeq	r1, r0, r7, ror #12
    25fc:	00e58d01 	rsceq	r8, r5, r1, lsl #26
    2600:	0a3c0000 	beq	f02608 <_Min_Stack_Size+0xf02208>
    2604:	000019cd 	andeq	r1, r0, sp, asr #19
    2608:	00e58e01 	rsceq	r8, r5, r1, lsl #28
    260c:	0a400000 	beq	1002614 <_Min_Stack_Size+0x1002214>
    2610:	00001909 	andeq	r1, r0, r9, lsl #18
    2614:	02ea9001 	rsceq	r9, sl, #1
    2618:	0a440000 	beq	1102620 <_Min_Stack_Size+0x1102220>
    261c:	00001836 	andeq	r1, r0, r6, lsr r8
    2620:	02ea9101 	rsceq	r9, sl, #1073741824	; 0x40000000
    2624:	0a480000 	beq	120262c <_Min_Stack_Size+0x120222c>
    2628:	00001632 	andeq	r1, r0, r2, lsr r6
    262c:	00e59401 	rsceq	r9, r5, r1, lsl #8
    2630:	0a4c0000 	beq	1302638 <_Min_Stack_Size+0x1302238>
    2634:	000014b1 			; <UNDEFINED> instruction: 0x000014b1
    2638:	00c49501 	sbceq	r9, r4, r1, lsl #10
    263c:	00500000 	subseq	r0, r0, r0
    2640:	0000e50e 	andeq	lr, r0, lr, lsl #10
    2644:	00da0e00 	sbcseq	r0, sl, r0, lsl #28
    2648:	cf020000 	svcgt	0x00020000
    264c:	01000017 	tsteq	r0, r7, lsl r0
    2650:	00023e9c 	muleq	r2, ip, lr
    2654:	176b0200 	strbne	r0, [fp, -r0, lsl #4]!
    2658:	a0010000 	andge	r0, r1, r0
    265c:	000002ef 	andeq	r0, r0, pc, ror #5
    2660:	00182209 	andseq	r2, r8, r9, lsl #4
    2664:	ad010800 	stcge	8, cr0, [r1, #-0]
    2668:	0000032a 	andeq	r0, r0, sl, lsr #6
    266c:	0018ee0a 	andseq	lr, r8, sl, lsl #28
    2670:	a7af0100 	strge	r0, [pc, r0, lsl #2]!
    2674:	00000000 	andeq	r0, r0, r0
    2678:	00219d0a 	eoreq	r9, r1, sl, lsl #26
    267c:	0eb00100 	frdeqs	f0, f0, f0
    2680:	04000002 	streq	r0, [r0], #-2
    2684:	15f40200 	ldrbne	r0, [r4, #512]!	; 0x200
    2688:	b1010000 	mrslt	r0, (UNDEF: 1)
    268c:	00000305 	andeq	r0, r0, r5, lsl #6
    2690:	00198102 	andseq	r8, r9, r2, lsl #2
    2694:	2ab60100 	bcs	fed82a9c <_estack+0xded52a9c>
    2698:	0f000003 	svceq	0x00000003
    269c:	00001895 	muleq	r0, r5, r8
    26a0:	da073001 	ble	1ce6ac <_Min_Stack_Size+0x1ce2ac>
    26a4:	01000000 	mrseq	r0, (UNDEF: 0)
    26a8:	0000036a 	andeq	r0, r0, sl, ror #6
    26ac:	0019bb10 	andseq	fp, r9, r0, lsl fp
    26b0:	07300100 	ldreq	r0, [r0, -r0, lsl #2]!
    26b4:	0000036a 	andeq	r0, r0, sl, ror #6
    26b8:	00125111 	andseq	r5, r2, r1, lsl r1
    26bc:	07320100 	ldreq	r0, [r2, -r0, lsl #2]!
    26c0:	000000da 	ldrdeq	r0, [r0], -sl
    26c4:	70040600 	andvc	r0, r4, r0, lsl #12
    26c8:	07000003 	streq	r0, [r0, -r3]
    26cc:	000002fa 	strdeq	r0, [r0], -sl
    26d0:	0016c30f 	andseq	ip, r6, pc, lsl #6
    26d4:	07090100 	streq	r0, [r9, -r0, lsl #2]
    26d8:	000000da 	ldrdeq	r0, [r0], -sl
    26dc:	00039f01 	andeq	r9, r3, r1, lsl #30
    26e0:	19bb1000 	ldmibne	fp!, {ip}
    26e4:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    26e8:	00036a07 	andeq	r6, r3, r7, lsl #20
    26ec:	12511100 	subsne	r1, r1, #0, 2
    26f0:	0b010000 	bleq	426f8 <_Min_Stack_Size+0x422f8>
    26f4:	0000da07 	andeq	sp, r0, r7, lsl #20
    26f8:	3c120000 	ldccc	0, cr0, [r2], {-0}
    26fc:	01000019 	tsteq	r0, r9, lsl r0
    2700:	c4010889 	strgt	r0, [r1], #-2185	; 0x889
    2704:	10000003 	andne	r0, r0, r3
    2708:	000019bc 			; <UNDEFINED> instruction: 0x000019bc
    270c:	0e088901 	cdpeq	9, 0, cr8, cr8, cr1, {0}
    2710:	13000002 	movwne	r0, #2
    2714:	01007875 	tsteq	r0, r5, ror r8
    2718:	00e5088b 	rsceq	r0, r5, fp, lsl #17
    271c:	14000000 	strne	r0, [r0], #-0
    2720:	00001584 	andeq	r1, r0, r4, lsl #11
    2724:	fc068001 	stc2	0, cr8, [r6], {1}
    2728:	2608000c 	strcs	r0, [r8], -ip
    272c:	01000000 	mrseq	r0, (UNDEF: 0)
    2730:	00040c9c 	muleq	r4, ip, ip
    2734:	19bb1500 	ldmibne	fp!, {r8, sl, ip}
    2738:	80010000 	andhi	r0, r1, r0
    273c:	00040c06 	andeq	r0, r4, r6, lsl #24
    2740:	0011c600 	andseq	ip, r1, r0, lsl #12
    2744:	18c41500 	stmiane	r4, {r8, sl, ip}^
    2748:	80010000 	andhi	r0, r1, r0
    274c:	00041706 	andeq	r1, r4, r6, lsl #14
    2750:	0011fd00 	andseq	pc, r1, r0, lsl #26
    2754:	0d1e1600 	ldceq	6, cr1, [lr, #-0]
    2758:	18220800 	stmdane	r2!, {fp}
    275c:	01170000 	tsteq	r7, r0
    2760:	01f30350 	mvnseq	r0, r0, asr r3
    2764:	07000051 	smlsdeq	r0, r1, r0, r0
    2768:	00000411 	andeq	r0, r0, r1, lsl r4
    276c:	02fa0406 	rscseq	r0, sl, #100663296	; 0x6000000
    2770:	9e070000 	cdpls	0, 0, cr0, cr7, cr0, {0}
    2774:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2778:	000018fa 	strdeq	r1, [r0], -sl
    277c:	01069601 	tsteq	r6, r1, lsl #12
    2780:	00000436 	andeq	r0, r0, r6, lsr r4
    2784:	0019bb10 	andseq	fp, r9, r0, lsl fp
    2788:	06960100 	ldreq	r0, [r6], r0, lsl #2
    278c:	0000040c 	andeq	r0, r0, ip, lsl #8
    2790:	041c1900 	ldreq	r1, [ip], #-2304	; 0x900
    2794:	0d240000 	stceq	0, cr0, [r4, #-0]
    2798:	00840800 	addeq	r0, r4, r0, lsl #16
    279c:	9c010000 	stcls	0, cr0, [r1], {-0}
    27a0:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    27a4:	0004291a 	andeq	r2, r4, sl, lsl r9
    27a8:	00123400 	andseq	r3, r2, r0, lsl #8
    27ac:	0d2c1b00 	vstmdbeq	ip!, {d1-d0}
    27b0:	183f0800 	ldmdane	pc!, {fp}	; <UNPREDICTABLE>
    27b4:	521c0000 	andspl	r0, ip, #0
    27b8:	4608000d 	strmi	r0, [r8], -sp
    27bc:	6f000018 	svcvs	0x00000018
    27c0:	17000004 	strne	r0, [r0, -r4]
    27c4:	75025001 	strvc	r5, [r2, #-1]
    27c8:	5a1b0000 	bpl	6c27d0 <_Min_Stack_Size+0x6c23d0>
    27cc:	6c08000d 	stcvs	0, cr0, [r8], {13}
    27d0:	1b000018 	blne	2838 <_Min_Stack_Size+0x2438>
    27d4:	08000d66 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, fp}
    27d8:	00001874 	andeq	r1, r0, r4, ror r8
    27dc:	000d6a1b 	andeq	r6, sp, fp, lsl sl
    27e0:	00183f08 	andseq	r3, r8, r8, lsl #30
    27e4:	0d901c00 	ldceq	12, cr1, [r0]
    27e8:	18460800 	stmdane	r6, {fp}^
    27ec:	049e0000 	ldreq	r0, [lr], #0
    27f0:	01170000 	tsteq	r7, r0
    27f4:	00750250 	rsbseq	r0, r5, r0, asr r2
    27f8:	0d981b00 	vldreq	d1, [r8]
    27fc:	186c0800 	stmdane	ip!, {fp}^
    2800:	a81d0000 	ldmdage	sp, {}	; <UNPREDICTABLE>
    2804:	7408000d 	strvc	r0, [r8], #-13
    2808:	00000018 	andeq	r0, r0, r8, lsl r0
    280c:	0018cd1e 	andseq	ip, r8, lr, lsl sp
    2810:	daff0100 	ble	fffc2c18 <_estack+0xdff92c18>
    2814:	01000000 	mrseq	r0, (UNDEF: 0)
    2818:	000004e4 	andeq	r0, r0, r4, ror #9
    281c:	0019bc1f 	andseq	fp, r9, pc, lsl ip
    2820:	0eff0100 	cdpeq	1, 15, cr0, cr15, cr0, {0}
    2824:	1f000002 	svcne	0x00000002
    2828:	0000159a 	muleq	r0, sl, r5
    282c:	00daff01 	sbcseq	pc, sl, r1, lsl #30
    2830:	bb110000 	bllt	442838 <_Min_Stack_Size+0x442438>
    2834:	01000019 	tsteq	r0, r9, lsl r0
    2838:	040c0101 	streq	r0, [ip], #-257	; 0x101
    283c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2840:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    2844:	08000da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp}
    2848:	00000072 	andeq	r0, r0, r2, ror r0
    284c:	05859c01 	streq	r9, [r5, #3073]	; 0xc01
    2850:	c11a0000 	tstgt	sl, r0
    2854:	60000004 	andvs	r0, r0, r4
    2858:	1a000012 	bne	28a8 <_Min_Stack_Size+0x24a8>
    285c:	000004cc 	andeq	r0, r0, ip, asr #9
    2860:	00001294 	muleq	r0, r4, r2
    2864:	0004d720 	andeq	sp, r4, r0, lsr #14
    2868:	00126000 	andseq	r6, r2, r0
    286c:	0db41b00 	ldceq	11, cr1, [r4]
    2870:	183f0800 	ldmdane	pc!, {fp}	; <UNPREDICTABLE>
    2874:	e01b0000 	ands	r0, fp, r0
    2878:	7408000d 	strvc	r0, [r8], #-13
    287c:	1c000018 	stcne	0, cr0, [r0], {24}
    2880:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
    2884:	00001846 	andeq	r1, r0, r6, asr #16
    2888:	00000538 	andeq	r0, r0, r8, lsr r5
    288c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2890:	1b001074 	blne	6a68 <_Min_Stack_Size+0x6668>
    2894:	08000df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp}
    2898:	0000187b 	andeq	r1, r0, fp, ror r8
    289c:	000df81b 	andeq	pc, sp, fp, lsl r8	; <UNPREDICTABLE>
    28a0:	00187408 	andseq	r7, r8, r8, lsl #8
    28a4:	0e041c00 	cdpeq	12, 0, cr1, cr4, cr0, {0}
    28a8:	18820800 	stmne	r2, {fp}
    28ac:	055e0000 	ldrbeq	r0, [lr, #-0]
    28b0:	01170000 	tsteq	r7, r0
    28b4:	10740250 	rsbsne	r0, r4, r0, asr r2
    28b8:	0e0c1c00 	cdpeq	12, 0, cr1, cr12, cr0, {0}
    28bc:	18820800 	stmne	r2, {fp}
    28c0:	05720000 	ldrbeq	r0, [r2, #-0]!
    28c4:	01170000 	tsteq	r7, r0
    28c8:	24740250 	ldrbtcs	r0, [r4], #-592	; 0x250
    28cc:	0e101b00 	vnmlseq.f64	d1, d0, d0
    28d0:	18740800 	ldmdane	r4!, {fp}^
    28d4:	181b0000 	ldmdane	fp, {}	; <UNPREDICTABLE>
    28d8:	9f08000e 	svcls	0x0008000e
    28dc:	00000018 	andeq	r0, r0, r8, lsl r0
    28e0:	00183e21 	andseq	r3, r8, r1, lsr #28
    28e4:	01340100 	teqeq	r4, r0, lsl #2
    28e8:	0000020e 	andeq	r0, r0, lr, lsl #4
    28ec:	0005df01 	andeq	sp, r5, r1, lsl #30
    28f0:	177e1000 	ldrbne	r1, [lr, -r0]!
    28f4:	34010000 	strcc	r0, [r1], #-0
    28f8:	0005df01 	andeq	sp, r5, r1, lsl #30
    28fc:	19cd1000 	stmibne	sp, {ip}^
    2900:	34010000 	strcc	r0, [r1], #-0
    2904:	0005df01 	andeq	sp, r5, r1, lsl #30
    2908:	14b11000 	ldrtne	r1, [r1], #0
    290c:	34010000 	strcc	r0, [r1], #-0
    2910:	0005e401 	andeq	lr, r5, r1, lsl #8
    2914:	15991100 	ldrne	r1, [r9, #256]	; 0x100
    2918:	36010000 	strcc	r0, [r1], -r0
    291c:	00041101 	andeq	r1, r4, r1, lsl #2
    2920:	19a91100 	stmibne	r9!, {r8, ip}
    2924:	37010000 	strcc	r0, [r1, -r0]
    2928:	00002501 	andeq	r2, r0, r1, lsl #10
    292c:	12511100 	subsne	r1, r1, #0, 2
    2930:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    2934:	00020e01 	andeq	r0, r2, r1, lsl #28
    2938:	e5070000 	str	r0, [r7, #-0]
    293c:	07000000 	streq	r0, [r0, -r0]
    2940:	000000c4 	andeq	r0, r0, r4, asr #1
    2944:	00058519 	andeq	r8, r5, r9, lsl r5
    2948:	000e1c00 	andeq	r1, lr, r0, lsl #24
    294c:	00007608 	andeq	r7, r0, r8, lsl #12
    2950:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    2954:	1a000006 	bne	2974 <_Min_Stack_Size+0x2574>
    2958:	00000596 	muleq	r0, r6, r5
    295c:	000012c8 	andeq	r1, r0, r8, asr #5
    2960:	0005a21a 	andeq	sl, r5, sl, lsl r2
    2964:	0012ff00 	andseq	pc, r2, r0, lsl #30
    2968:	05ae1a00 	streq	r1, [lr, #2560]!	; 0xa00
    296c:	131d0000 	tstne	sp, #0
    2970:	ba200000 	blt	802978 <_Min_Stack_Size+0x802578>
    2974:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
    2978:	20000013 	andcs	r0, r0, r3, lsl r0
    297c:	000005c6 	andeq	r0, r0, r6, asr #11
    2980:	0000135c 	andeq	r1, r0, ip, asr r3
    2984:	0005d220 	andeq	sp, r5, r0, lsr #4
    2988:	0013b800 	andseq	fp, r3, r0, lsl #16
    298c:	04b12200 	ldrteq	r2, [r1], #512	; 0x200
    2990:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    2994:	003a0800 	eorseq	r0, sl, r0, lsl #16
    2998:	4f010000 	svcmi	0x00010000
    299c:	0006a601 	andeq	sl, r6, r1, lsl #12
    29a0:	04cc1a00 	strbeq	r1, [ip], #2560	; 0xa00
    29a4:	13e30000 	mvnne	r0, #0
    29a8:	c11a0000 	tstgt	sl, r0
    29ac:	f7000004 			; <UNDEFINED> instruction: 0xf7000004
    29b0:	23000013 	movwcs	r0, #19
    29b4:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
    29b8:	0000003a 	andeq	r0, r0, sl, lsr r0
    29bc:	0004d720 	andeq	sp, r4, r0, lsr #14
    29c0:	0013f700 	andseq	pc, r3, r0, lsl #14
    29c4:	0e481b00 	vmlaeq.f64	d17, d8, d0
    29c8:	183f0800 	ldmdane	pc!, {fp}	; <UNPREDICTABLE>
    29cc:	721c0000 	andsvc	r0, ip, #0
    29d0:	8208000e 	andhi	r0, r8, #14
    29d4:	87000018 	smladhi	r0, r8, r0, r0
    29d8:	17000006 	strne	r0, [r0, -r6]
    29dc:	74025001 	strvc	r5, [r2], #-1
    29e0:	7a1c0010 	bvc	702a28 <_Min_Stack_Size+0x702628>
    29e4:	8208000e 	andhi	r0, r8, #14
    29e8:	9b000018 	blls	2a50 <_Min_Stack_Size+0x2650>
    29ec:	17000006 	strne	r0, [r0, -r6]
    29f0:	74025001 	strvc	r5, [r2], #-1
    29f4:	7e1b0024 	cdpvc	0, 1, cr0, cr11, cr4, {1}
    29f8:	7408000e 	strvc	r0, [r8], #-14
    29fc:	00000018 	andeq	r0, r0, r8, lsl r0
    2a00:	0e2e1c00 	cdpeq	12, 2, cr1, cr14, cr0, {0}
    2a04:	18aa0800 	stmiane	sl!, {fp}
    2a08:	06ba0000 	ldrteq	r0, [sl], r0
    2a0c:	01170000 	tsteq	r7, r0
    2a10:	54080250 	strpl	r0, [r8], #-592	; 0x250
    2a14:	0e3c1c00 	cdpeq	12, 3, cr1, cr12, cr0, {0}
    2a18:	18aa0800 	stmiane	sl!, {fp}
    2a1c:	06d30000 	ldrbeq	r0, [r3], r0
    2a20:	01170000 	tsteq	r7, r0
    2a24:	00750750 	rsbseq	r0, r5, r0, asr r7
    2a28:	231e0076 	tstcs	lr, #118	; 0x76
    2a2c:	8c1c0001 	ldchi	0, cr0, [ip], {1}
    2a30:	c008000e 	andgt	r0, r8, lr
    2a34:	e7000018 	smlad	r0, r8, r0, r0
    2a38:	17000006 	strne	r0, [r0, -r6]
    2a3c:	74025001 	strvc	r5, [r2], #-1
    2a40:	901b0000 	andsls	r0, fp, r0
    2a44:	9f08000e 	svcls	0x0008000e
    2a48:	00000018 	andeq	r0, r0, r8, lsl r0
    2a4c:	00150b24 	andseq	r0, r5, r4, lsr #22
    2a50:	02360100 	eorseq	r0, r6, #0, 2
    2a54:	0000020e 	andeq	r0, r0, lr, lsl #4
    2a58:	08000e94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp}
    2a5c:	00000084 	andeq	r0, r0, r4, lsl #1
    2a60:	08559c01 	ldmdaeq	r5, {r0, sl, fp, ip, pc}^
    2a64:	73150000 	tstvc	r5, #0
    2a68:	01000017 	tsteq	r0, r7, lsl r0
    2a6c:	05df0236 	ldrbeq	r0, [pc, #566]	; 2caa <_Min_Stack_Size+0x28aa>
    2a70:	140a0000 	strne	r0, [sl], #-0
    2a74:	72150000 	andsvc	r0, r5, #0
    2a78:	01000019 	tsteq	r0, r9, lsl r0
    2a7c:	05df0236 	ldrbeq	r0, [pc, #566]	; 2cba <_Min_Stack_Size+0x28ba>
    2a80:	14540000 	ldrbne	r0, [r4], #-0
    2a84:	9d250000 	stcls	0, cr0, [r5, #-0]
    2a88:	01000021 	tsteq	r0, r1, lsr #32
    2a8c:	020e0238 	andeq	r0, lr, #56, 4	; 0x80000003
    2a90:	54010000 	strpl	r0, [r1], #-0
    2a94:	00058526 	andeq	r8, r5, r6, lsr #10
    2a98:	000ea800 	andeq	sl, lr, r0, lsl #16
    2a9c:	00024808 	andeq	r4, r2, r8, lsl #16
    2aa0:	023d0100 	eorseq	r0, sp, #0, 2
    2aa4:	00000842 	andeq	r0, r0, r2, asr #16
    2aa8:	0005ae1a 	andeq	sl, r5, sl, lsl lr
    2aac:	00149e00 	andseq	r9, r4, r0, lsl #28
    2ab0:	05a21a00 	streq	r1, [r2, #2560]!	; 0xa00
    2ab4:	14be0000 	ldrtne	r0, [lr], #0
    2ab8:	961a0000 	ldrls	r0, [sl], -r0
    2abc:	de000005 	cdple	0, 0, cr0, cr0, cr5, {0}
    2ac0:	27000014 	smladcs	r0, r4, r0, r0
    2ac4:	00000248 	andeq	r0, r0, r8, asr #4
    2ac8:	0005ba20 	andeq	fp, r5, r0, lsr #20
    2acc:	00150700 	andseq	r0, r5, r0, lsl #14
    2ad0:	05c62000 	strbeq	r2, [r6]
    2ad4:	15300000 	ldrne	r0, [r0, #-0]!
    2ad8:	d2200000 	eorle	r0, r0, #0
    2adc:	50000005 	andpl	r0, r0, r5
    2ae0:	22000015 	andcs	r0, r0, #21
    2ae4:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    2ae8:	08000ec2 	stmdaeq	r0, {r1, r6, r7, r9, sl, fp}
    2aec:	00000038 	andeq	r0, r0, r8, lsr r0
    2af0:	fc014f01 	stc2	15, cr4, [r1], {1}
    2af4:	1a000007 	bne	2b18 <_Min_Stack_Size+0x2718>
    2af8:	000004cc 	andeq	r0, r0, ip, asr #9
    2afc:	0000157b 	andeq	r1, r0, fp, ror r5
    2b00:	0004c11a 	andeq	ip, r4, sl, lsl r1
    2b04:	00158f00 	andseq	r8, r5, r0, lsl #30
    2b08:	0ec22300 	cdpeq	3, 12, cr2, cr2, cr0, {0}
    2b0c:	00380800 	eorseq	r0, r8, r0, lsl #16
    2b10:	d7200000 	strle	r0, [r0, -r0]!
    2b14:	8f000004 	svchi	0x00000004
    2b18:	1b000015 	blne	2b74 <_Min_Stack_Size+0x2774>
    2b1c:	08000ec6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, fp}
    2b20:	0000183f 	andeq	r1, r0, pc, lsr r8
    2b24:	000eee1c 	andeq	lr, lr, ip, lsl lr
    2b28:	00188208 	andseq	r8, r8, r8, lsl #4
    2b2c:	0007dd00 	andeq	sp, r7, r0, lsl #26
    2b30:	50011700 	andpl	r1, r1, r0, lsl #14
    2b34:	00107402 	andseq	r7, r0, r2, lsl #8
    2b38:	000ef61c 	andeq	pc, lr, ip, lsl r6	; <UNPREDICTABLE>
    2b3c:	00188208 	andseq	r8, r8, r8, lsl #4
    2b40:	0007f100 	andeq	pc, r7, r0, lsl #2
    2b44:	50011700 	andpl	r1, r1, r0, lsl #14
    2b48:	00247402 	eoreq	r7, r4, r2, lsl #8
    2b4c:	000efa1b 	andeq	pc, lr, fp, lsl sl	; <UNPREDICTABLE>
    2b50:	00187408 	andseq	r7, r8, r8, lsl #8
    2b54:	1c000000 	stcne	0, cr0, [r0], {-0}
    2b58:	08000eae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, fp}
    2b5c:	000018aa 	andeq	r1, r0, sl, lsr #17
    2b60:	00000810 	andeq	r0, r0, r0, lsl r8
    2b64:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2b68:	1c005408 	cfstrsne	mvf5, [r0], {8}
    2b6c:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
    2b70:	000018aa 	andeq	r1, r0, sl, lsr #17
    2b74:	00000823 	andeq	r0, r0, r3, lsr #16
    2b78:	01500117 	cmpeq	r0, r7, lsl r1
    2b7c:	121c0031 	andsne	r0, ip, #49	; 0x31
    2b80:	c008000f 	andgt	r0, r8, pc
    2b84:	37000018 	smladcc	r0, r8, r0, r0
    2b88:	17000008 	strne	r0, [r0, -r8]
    2b8c:	74025001 	strvc	r5, [r2], #-1
    2b90:	161b0000 	ldrne	r0, [fp], -r0
    2b94:	9f08000f 	svcls	0x0008000f
    2b98:	00000018 	andeq	r0, r0, r8, lsl r0
    2b9c:	0ea61b00 	vfmaeq.f64	d1, d6, d0
    2ba0:	189f0800 	ldmne	pc, {fp}	; <UNPREDICTABLE>
    2ba4:	0a1b0000 	beq	6c2bac <_Min_Stack_Size+0x6c27ac>
    2ba8:	9f08000f 	svcls	0x0008000f
    2bac:	00000018 	andeq	r0, r0, r8, lsl r0
    2bb0:	0015a418 	andseq	sl, r5, r8, lsl r4
    2bb4:	063a0100 	ldrteq	r0, [sl], -r0, lsl #2
    2bb8:	00088701 	andeq	r8, r8, r1, lsl #14
    2bbc:	19bb1000 	ldmibne	fp!, {ip}
    2bc0:	3a010000 	bcc	42bc8 <_Min_Stack_Size+0x427c8>
    2bc4:	00040c06 	andeq	r0, r4, r6, lsl #24
    2bc8:	17c11000 	strbne	r1, [r1, r0]
    2bcc:	3a010000 	bcc	42bd4 <_Min_Stack_Size+0x427d4>
    2bd0:	0000b206 	andeq	fp, r0, r6, lsl #4
    2bd4:	19681000 	stmdbne	r8!, {ip}^
    2bd8:	3a010000 	bcc	42be0 <_Min_Stack_Size+0x427e0>
    2bdc:	00088706 	andeq	r8, r8, r6, lsl #14
    2be0:	da070000 	ble	1c2be8 <_Min_Stack_Size+0x1c27e8>
    2be4:	24000000 	strcs	r0, [r0], #-0
    2be8:	000016e7 	andeq	r1, r0, r7, ror #13
    2bec:	da025101 	ble	96ff8 <_Min_Stack_Size+0x96bf8>
    2bf0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2bf4:	8008000f 	andhi	r0, r8, pc
    2bf8:	01000002 	tsteq	r0, r2
    2bfc:	000bbf9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    2c00:	19bc1500 	ldmibne	ip!, {r8, sl, ip}
    2c04:	51010000 	mrspl	r0, (UNDEF: 1)
    2c08:	00020e02 	andeq	r0, r2, r2, lsl #28
    2c0c:	0015a200 	andseq	sl, r5, r0, lsl #4
    2c10:	17c11500 	strbne	r1, [r1, r0, lsl #10]
    2c14:	51010000 	mrspl	r0, (UNDEF: 1)
    2c18:	000bbf02 	andeq	fp, fp, r2, lsl #30
    2c1c:	00160200 	andseq	r0, r6, r0, lsl #4
    2c20:	1c471500 	cfstr64ne	mvdx1, [r7], {-0}
    2c24:	51010000 	mrspl	r0, (UNDEF: 1)
    2c28:	0000f002 	andeq	pc, r0, r2
    2c2c:	00166200 	andseq	r6, r6, r0, lsl #4
    2c30:	18e01500 	stmiane	r0!, {r8, sl, ip}^
    2c34:	51010000 	mrspl	r0, (UNDEF: 1)
    2c38:	00088702 	andeq	r8, r8, r2, lsl #14
    2c3c:	0016de00 	andseq	sp, r6, r0, lsl #28
    2c40:	17d62800 	ldrbne	r2, [r6, r0, lsl #16]
    2c44:	53010000 	movwpl	r0, #4096	; 0x1000
    2c48:	0000da02 	andeq	sp, r0, r2, lsl #20
    2c4c:	00172800 	andseq	r2, r7, r0, lsl #16
    2c50:	1dde2500 	cfldr64ne	mvdx2, [lr]
    2c54:	54010000 	strpl	r0, [r1], #-0
    2c58:	00020302 	andeq	r0, r2, r2, lsl #6
    2c5c:	50910200 	addspl	r0, r1, r0, lsl #4
    2c60:	0019bb28 	andseq	fp, r9, r8, lsr #22
    2c64:	02550100 	subseq	r0, r5, #0, 2
    2c68:	0000040c 	andeq	r0, r0, ip, lsl #8
    2c6c:	000015a2 	andeq	r1, r0, r2, lsr #11
    2c70:	00041c26 	andeq	r1, r4, r6, lsr #24
    2c74:	000f5c00 	andeq	r5, pc, r0, lsl #24
    2c78:	00026008 	andeq	r6, r2, r8
    2c7c:	02ea0100 	rsceq	r0, sl, #0, 2
    2c80:	00000991 	muleq	r0, r1, r9
    2c84:	0004291a 	andeq	r2, r4, sl, lsl r9
    2c88:	0017de00 	andseq	sp, r7, r0, lsl #28
    2c8c:	107c1b00 	rsbsne	r1, ip, r0, lsl #22
    2c90:	183f0800 	ldmdane	pc!, {fp}	; <UNPREDICTABLE>
    2c94:	9a1c0000 	bls	702c9c <_Min_Stack_Size+0x70289c>
    2c98:	46080010 			; <UNDEFINED> instruction: 0x46080010
    2c9c:	4f000018 	svcmi	0x00000018
    2ca0:	17000009 	strne	r0, [r0, -r9]
    2ca4:	76025001 	strvc	r5, [r2], -r1
    2ca8:	a21b0000 	andsge	r0, fp, #0
    2cac:	6c080010 	stcvs	0, cr0, [r8], {16}
    2cb0:	1b000018 	blne	2d18 <_Min_Stack_Size+0x2918>
    2cb4:	080010ac 	stmdaeq	r0, {r2, r3, r5, r7, ip}
    2cb8:	00001874 	andeq	r1, r0, r4, ror r8
    2cbc:	0010b01b 	andseq	fp, r0, fp, lsl r0
    2cc0:	00183f08 	andseq	r3, r8, r8, lsl #30
    2cc4:	10ce1c00 	sbcne	r1, lr, r0, lsl #24
    2cc8:	18460800 	stmdane	r6, {fp}^
    2ccc:	097e0000 	ldmdbeq	lr!, {}^	; <UNPREDICTABLE>
    2cd0:	01170000 	tsteq	r7, r0
    2cd4:	00750250 	rsbseq	r0, r5, r0, asr r2
    2cd8:	10d61b00 	sbcsne	r1, r6, r0, lsl #22
    2cdc:	186c0800 	stmdane	ip!, {fp}^
    2ce0:	e01b0000 	ands	r0, fp, r0
    2ce4:	74080010 	strvc	r0, [r8], #-16
    2ce8:	00000018 	andeq	r0, r0, r8, lsl r0
    2cec:	00034026 	andeq	r4, r3, r6, lsr #32
    2cf0:	000faa00 	andeq	sl, pc, r0, lsl #20
    2cf4:	00027808 	andeq	r7, r2, r8, lsl #16
    2cf8:	02e00100 	rsceq	r0, r0, #0, 2
    2cfc:	000009d9 	ldrdeq	r0, [r0], -r9
    2d00:	0003511a 	andeq	r5, r3, sl, lsl r1
    2d04:	0017f100 	andseq	pc, r7, r0, lsl #2
    2d08:	02782700 	rsbseq	r2, r8, #0, 14
    2d0c:	5d200000 	stcpl	0, cr0, [r0, #-0]
    2d10:	1a000003 	bne	2d24 <_Min_Stack_Size+0x2924>
    2d14:	1b000018 	blne	2d7c <_Min_Stack_Size+0x297c>
    2d18:	08000fae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, fp}
    2d1c:	0000183f 	andeq	r1, r0, pc, lsr r8
    2d20:	000fba1b 	andeq	fp, pc, fp, lsl sl	; <UNPREDICTABLE>
    2d24:	00187408 	andseq	r7, r8, r8, lsl #8
    2d28:	10701b00 	rsbsne	r1, r0, r0, lsl #22
    2d2c:	18740800 	ldmdane	r4!, {fp}^
    2d30:	00000000 	andeq	r0, r0, r0
    2d34:	00041c26 	andeq	r1, r4, r6, lsr #24
    2d38:	000fba00 	andeq	fp, pc, r0, lsl #20
    2d3c:	00029008 	andeq	r9, r2, r8
    2d40:	02f90100 	rscseq	r0, r9, #0, 2
    2d44:	00000a55 	andeq	r0, r0, r5, asr sl
    2d48:	0004291a 	andeq	r2, r4, sl, lsl r9
    2d4c:	00184600 	andseq	r4, r8, r0, lsl #12
    2d50:	0fbe1b00 	svceq	0x00be1b00
    2d54:	183f0800 	ldmdane	pc!, {fp}	; <UNPREDICTABLE>
    2d58:	dc1c0000 	ldcle	0, cr0, [ip], {-0}
    2d5c:	4608000f 	strmi	r0, [r8], -pc
    2d60:	13000018 	movwne	r0, #24
    2d64:	1700000a 	strne	r0, [r0, -sl]
    2d68:	76025001 	strvc	r5, [r2], -r1
    2d6c:	e41b0000 	ldr	r0, [fp], #-0
    2d70:	6c08000f 	stcvs	0, cr0, [r8], {15}
    2d74:	1b000018 	blne	2ddc <_Min_Stack_Size+0x29dc>
    2d78:	08000ffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    2d7c:	00001874 	andeq	r1, r0, r4, ror r8
    2d80:	000ffe1b 	andeq	pc, pc, fp, lsl lr	; <UNPREDICTABLE>
    2d84:	00183f08 	andseq	r3, r8, r8, lsl #30
    2d88:	10201c00 	eorne	r1, r0, r0, lsl #24
    2d8c:	18460800 	stmdane	r6, {fp}^
    2d90:	0a420000 	beq	1082d98 <_Min_Stack_Size+0x1082998>
    2d94:	01170000 	tsteq	r7, r0
    2d98:	00750250 	rsbseq	r0, r5, r0, asr r2
    2d9c:	10281b00 	eorne	r1, r8, r0, lsl #22
    2da0:	186c0800 	stmdane	ip!, {fp}^
    2da4:	321b0000 	andscc	r0, fp, #0
    2da8:	74080010 	strvc	r0, [r8], #-16
    2dac:	00000018 	andeq	r0, r0, r8, lsl r0
    2db0:	00085526 	andeq	r5, r8, r6, lsr #10
    2db4:	00104600 	andseq	r4, r0, r0, lsl #12
    2db8:	0002a808 	andeq	sl, r2, r8, lsl #16
    2dbc:	026f0100 	rsbeq	r0, pc, #0, 2
    2dc0:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
    2dc4:	00087a1a 	andeq	r7, r8, sl, lsl sl
    2dc8:	00186400 	andseq	r6, r8, r0, lsl #8
    2dcc:	086e1a00 	stmdaeq	lr!, {r9, fp, ip}^
    2dd0:	18830000 	stmne	r3, {}	; <UNPREDICTABLE>
    2dd4:	621a0000 	andsvs	r0, sl, #0
    2dd8:	ac000008 	stcge	0, cr0, [r0], {8}
    2ddc:	1c000018 	stcne	0, cr0, [r0], {24}
    2de0:	08001058 	stmdaeq	r0, {r3, r4, r6, ip}
    2de4:	00001822 	andeq	r1, r0, r2, lsr #16
    2de8:	00000a98 	muleq	r0, r8, sl
    2dec:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    2df0:	1b000079 	blne	2fdc <_Min_Stack_Size+0x2bdc>
    2df4:	0800112a 	stmdaeq	r0, {r1, r3, r5, r8, ip}
    2df8:	000018d2 	ldrdeq	r1, [r0], -r2
    2dfc:	00114a29 	andseq	r4, r1, r9, lsr #20
    2e00:	00182208 	andseq	r2, r8, r8, lsl #4
    2e04:	51011700 	tstpl	r1, r0, lsl #14
    2e08:	00007902 	andeq	r7, r0, r2, lsl #18
    2e0c:	0f3a1b00 	svceq	0x003a1b00
    2e10:	18e90800 	stmiane	r9!, {fp}^
    2e14:	481b0000 	ldmdami	fp, {}	; <UNPREDICTABLE>
    2e18:	3f08000f 	svccc	0x0008000f
    2e1c:	1b000018 	blne	2e84 <_Min_Stack_Size+0x2a84>
    2e20:	08000f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp}
    2e24:	00001874 	andeq	r1, r0, r4, ror r8
    2e28:	000f801b 	andeq	r8, pc, fp, lsl r0	; <UNPREDICTABLE>
    2e2c:	0018f508 	andseq	pc, r8, r8, lsl #10
    2e30:	0f841b00 	svceq	0x00841b00
    2e34:	183f0800 	ldmdane	pc!, {fp}	; <UNPREDICTABLE>
    2e38:	9c1b0000 	ldcls	0, cr0, [fp], {-0}
    2e3c:	7408000f 	strvc	r0, [r8], #-15
    2e40:	1c000018 	stcne	0, cr0, [r0], {24}
    2e44:	08000fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp}
    2e48:	000018fd 	strdeq	r1, [r0], -sp
    2e4c:	00000b02 	andeq	r0, r0, r2, lsl #22
    2e50:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    2e54:	01174c91 			; <UNDEFINED> instruction: 0x01174c91
    2e58:	50910250 	addspl	r0, r1, r0, asr r2
    2e5c:	0ff01b00 	svceq	0x00f01b00
    2e60:	189f0800 	ldmne	pc, {fp}	; <UNPREDICTABLE>
    2e64:	361b0000 	ldrcc	r0, [fp], -r0
    2e68:	2e080010 	mcrcs	0, 0, r0, cr8, cr0, {0}
    2e6c:	1b000019 	blne	2ed8 <_Min_Stack_Size+0x2ad8>
    2e70:	0800103a 	stmdaeq	r0, {r1, r3, r4, r5, ip}
    2e74:	0000183f 	andeq	r1, r0, pc, lsr r8
    2e78:	0010781c 	andseq	r7, r0, ip, lsl r8
    2e7c:	00193a08 	andseq	r3, r9, r8, lsl #20
    2e80:	000b3100 	andeq	r3, fp, r0, lsl #2
    2e84:	50011700 	andpl	r1, r1, r0, lsl #14
    2e88:	00007502 	andeq	r7, r0, r2, lsl #10
    2e8c:	0010e41b 	andseq	lr, r0, fp, lsl r4
    2e90:	00192e08 	andseq	r2, r9, r8, lsl #28
    2e94:	10ec1b00 	rscne	r1, ip, r0, lsl #22
    2e98:	187b0800 	ldmdane	fp!, {fp}^
    2e9c:	f41c0000 			; <UNDEFINED> instruction: 0xf41c0000
    2ea0:	56080010 			; <UNDEFINED> instruction: 0x56080010
    2ea4:	57000019 	smladpl	r0, r9, r0, r0
    2ea8:	1700000b 	strne	r0, [r0, -fp]
    2eac:	91025001 	tstls	r2, r1
    2eb0:	fa1b0050 	blx	6c2ff8 <_Min_Stack_Size+0x6c2bf8>
    2eb4:	9f080010 	svcls	0x00080010
    2eb8:	1c000018 	stcne	0, cr0, [r0], {24}
    2ebc:	08001102 	stmdaeq	r0, {r1, r8, ip}
    2ec0:	0000041c 	andeq	r0, r0, ip, lsl r4
    2ec4:	00000b74 	andeq	r0, r0, r4, ror fp
    2ec8:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2ecc:	1b000074 	blne	30a4 <_Min_Stack_Size+0x2ca4>
    2ed0:	08001106 	stmdaeq	r0, {r1, r2, r8, ip}
    2ed4:	0000192e 	andeq	r1, r0, lr, lsr #18
    2ed8:	0011141b 	andseq	r1, r1, fp, lsl r4
    2edc:	00187408 	andseq	r7, r8, r8, lsl #8
    2ee0:	113a1b00 	teqne	sl, r0, lsl #22
    2ee4:	18740800 	ldmdane	r4!, {fp}^
    2ee8:	761b0000 	ldrvc	r0, [fp], -r0
    2eec:	9f080011 	svcls	0x00080011
    2ef0:	1b000018 	blne	2f58 <_Min_Stack_Size+0x2b58>
    2ef4:	08001184 	stmdaeq	r0, {r2, r7, r8, ip}
    2ef8:	0000189f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    2efc:	00118e1c 	andseq	r8, r1, ip, lsl lr
    2f00:	00184608 	andseq	r4, r8, r8, lsl #12
    2f04:	000bb500 	andeq	fp, fp, r0, lsl #10
    2f08:	50011700 	andpl	r1, r1, r0, lsl #14
    2f0c:	00247402 	eoreq	r7, r4, r2, lsl #8
    2f10:	0011961b 	andseq	r9, r1, fp, lsl r6
    2f14:	00187b08 	andseq	r7, r8, r8, lsl #22
    2f18:	b2070000 	andlt	r0, r7, #0
    2f1c:	24000000 	strcs	r0, [r0], #-0
    2f20:	000016f9 	strdeq	r1, [r0], -r9
    2f24:	0e017801 	cdpeq	8, 0, cr7, cr1, cr1, {0}
    2f28:	98000002 	stmdals	r0, {r1}
    2f2c:	50080011 	andpl	r0, r8, r1, lsl r0
    2f30:	01000000 	mrseq	r0, (UNDEF: 0)
    2f34:	000c6a9c 	muleq	ip, ip, sl
    2f38:	14b11500 	ldrtne	r1, [r1], #1280	; 0x500
    2f3c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2f40:	0005e401 	andeq	lr, r5, r1, lsl #8
    2f44:	0018d500 	andseq	sp, r8, r0, lsl #10
    2f48:	15992800 	ldrne	r2, [r9, #2048]	; 0x800
    2f4c:	7a010000 	bvc	42f54 <_Min_Stack_Size+0x42b54>
    2f50:	00041101 	andeq	r1, r4, r1, lsl #2
    2f54:	0018f600 	andseq	pc, r8, r0, lsl #12
    2f58:	11a21c00 			; <UNDEFINED> instruction: 0x11a21c00
    2f5c:	18aa0800 	stmiane	sl!, {fp}
    2f60:	0c120000 	ldceq	0, cr0, [r2], {-0}
    2f64:	01170000 	tsteq	r7, r0
    2f68:	54080250 	strpl	r0, [r8], #-592	; 0x250
    2f6c:	11ca1c00 	bicne	r1, sl, r0, lsl #24
    2f70:	18820800 	stmne	r2, {fp}
    2f74:	0c260000 	stceq	0, cr0, [r6], #-0
    2f78:	01170000 	tsteq	r7, r0
    2f7c:	10740250 	rsbsne	r0, r4, r0, asr r2
    2f80:	11d21c00 	bicsne	r1, r2, r0, lsl #24
    2f84:	18820800 	stmne	r2, {fp}
    2f88:	0c3a0000 	ldceq	0, cr0, [sl], #-0
    2f8c:	01170000 	tsteq	r7, r0
    2f90:	24740250 	ldrbtcs	r0, [r4], #-592	; 0x250
    2f94:	11de1c00 	bicsne	r1, lr, r0, lsl #24
    2f98:	088c0800 	stmeq	ip, {fp}
    2f9c:	0c600000 	stcleq	0, cr0, [r0], #-0
    2fa0:	01170000 	tsteq	r7, r0
    2fa4:	00750253 	rsbseq	r0, r5, r3, asr r2
    2fa8:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    2fac:	01170075 	tsteq	r7, r5, ror r0
    2fb0:	00750251 	rsbseq	r0, r5, r1, asr r2
    2fb4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2fb8:	1b000074 	blne	3190 <_Min_Stack_Size+0x2d90>
    2fbc:	080011e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, ip}
    2fc0:	0000189f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    2fc4:	18522400 	ldmdane	r2, {sl, sp}^
    2fc8:	d7010000 	strle	r0, [r1, -r0]
    2fcc:	0000da01 	andeq	sp, r0, r1, lsl #20
    2fd0:	0011e800 	andseq	lr, r1, r0, lsl #16
    2fd4:	00003408 	andeq	r3, r0, r8, lsl #8
    2fd8:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    2fdc:	1500000c 	strne	r0, [r0, #-12]
    2fe0:	00001721 	andeq	r1, r0, r1, lsr #14
    2fe4:	0e01d701 	cdpeq	7, 0, cr13, cr1, cr1, {0}
    2fe8:	2a000002 	bcs	2ff8 <_Min_Stack_Size+0x2bf8>
    2fec:	28000019 	stmdacs	r0, {r0, r3, r4}
    2ff0:	00001251 	andeq	r1, r0, r1, asr r2
    2ff4:	da01d901 	ble	79400 <_Min_Stack_Size+0x79000>
    2ff8:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    2ffc:	28000019 	stmdacs	r0, {r0, r3, r4}
    3000:	00001720 	andeq	r1, r0, r0, lsr #14
    3004:	0c01da01 	stceq	10, cr13, [r1], {1}
    3008:	2a000004 	bcs	3020 <_Min_Stack_Size+0x2c20>
    300c:	1b000019 	blne	3078 <_Min_Stack_Size+0x2c78>
    3010:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
    3014:	00001968 	andeq	r1, r0, r8, ror #18
    3018:	0012001b 	andseq	r0, r2, fp, lsl r0
    301c:	00189f08 	andseq	r9, r8, r8, lsl #30
    3020:	12182900 	andsne	r2, r8, #0, 18
    3024:	088c0800 	stmeq	ip, {fp}
    3028:	01170000 	tsteq	r7, r0
    302c:	00740250 	rsbseq	r0, r4, r0, asr r2
    3030:	bd240000 	stclt	0, cr0, [r4, #-0]
    3034:	01000014 	tsteq	r0, r4, lsl r0
    3038:	00da0401 	sbcseq	r0, sl, r1, lsl #8
    303c:	121c0000 	andsne	r0, ip, #0
    3040:	01240800 	teqeq	r4, r0, lsl #16
    3044:	9c010000 	stcls	0, cr0, [r1], {-0}
    3048:	00000e62 	andeq	r0, r0, r2, ror #28
    304c:	0019bc15 	andseq	fp, r9, r5, lsl ip
    3050:	04010100 	streq	r0, [r1], #-256	; 0x100
    3054:	0000020e 	andeq	r0, r0, lr, lsl #4
    3058:	00001971 	andeq	r1, r0, r1, ror r9
    305c:	0017c115 	andseq	ip, r7, r5, lsl r1
    3060:	04010100 	streq	r0, [r1], #-256	; 0x100
    3064:	00000bbf 			; <UNDEFINED> instruction: 0x00000bbf
    3068:	00001a2d 	andeq	r1, r0, sp, lsr #20
    306c:	00152915 	andseq	r2, r5, r5, lsl r9
    3070:	04010100 	streq	r0, [r1], #-256	; 0x100
    3074:	00000e62 	andeq	r0, r0, r2, ror #28
    3078:	00001aa3 	andeq	r1, r0, r3, lsr #21
    307c:	0018e015 	andseq	lr, r8, r5, lsl r0
    3080:	04010100 	streq	r0, [r1], #-256	; 0x100
    3084:	00000887 	andeq	r0, r0, r7, lsl #17
    3088:	00001b19 	andeq	r1, r0, r9, lsl fp
    308c:	00125128 	andseq	r5, r2, r8, lsr #2
    3090:	04030100 	streq	r0, [r3], #-256	; 0x100
    3094:	000000da 	ldrdeq	r0, [r0], -sl
    3098:	00001bbf 			; <UNDEFINED> instruction: 0x00001bbf
    309c:	00135928 	andseq	r5, r3, r8, lsr #18
    30a0:	04040100 	streq	r0, [r4], #-256	; 0x100
    30a4:	000000e5 	andeq	r0, r0, r5, ror #1
    30a8:	00001bf3 	strdeq	r1, [r0], -r3
    30ac:	0019bb28 	andseq	fp, r9, r8, lsr #22
    30b0:	04050100 	streq	r0, [r5], #-256	; 0x100
    30b4:	0000040c 	andeq	r0, r0, ip, lsl #8
    30b8:	00001971 	andeq	r1, r0, r1, ror r9
    30bc:	00085526 	andeq	r5, r8, r6, lsr #10
    30c0:	00126200 	andseq	r6, r2, r0, lsl #4
    30c4:	0002d008 	andeq	sp, r2, r8
    30c8:	04260100 	strteq	r0, [r6], #-256	; 0x100
    30cc:	00000dc2 	andeq	r0, r0, r2, asr #27
    30d0:	00087a1a 	andeq	r7, r8, sl, lsl sl
    30d4:	001c7400 	andseq	r7, ip, r0, lsl #8
    30d8:	086e1a00 	stmdaeq	lr!, {r9, fp, ip}^
    30dc:	1cd50000 	ldclne	0, cr0, [r5], {0}
    30e0:	621a0000 	andsvs	r0, sl, #0
    30e4:	09000008 	stmdbeq	r0, {r3}
    30e8:	1c00001d 	stcne	0, cr0, [r0], {29}
    30ec:	0800129c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip}
    30f0:	00001822 	andeq	r1, r0, r2, lsr #16
    30f4:	00000da4 	andeq	r0, r0, r4, lsr #27
    30f8:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    30fc:	1c000076 	stcne	0, cr0, [r0], {118}	; 0x76
    3100:	080012de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, ip}
    3104:	00001822 	andeq	r1, r0, r2, lsr #16
    3108:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    310c:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    3110:	1b000076 	blne	32f0 <_Min_Stack_Size+0x2ef0>
    3114:	0800130c 	stmdaeq	r0, {r2, r3, r8, r9, ip}
    3118:	000018d2 	ldrdeq	r1, [r0], -r2
    311c:	12381b00 	eorsne	r1, r8, #0, 22
    3120:	19740800 	ldmdbne	r4!, {fp}^
    3124:	3c1b0000 	ldccc	0, cr0, [fp], {-0}
    3128:	9f080012 	svcls	0x00080012
    312c:	1c000018 	stcne	0, cr0, [r0], {24}
    3130:	08001250 	stmdaeq	r0, {r4, r6, r9, ip}
    3134:	0000197b 	andeq	r1, r0, fp, ror r9
    3138:	00000de8 	andeq	r0, r0, r8, ror #27
    313c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    3140:	1b000077 	blne	3324 <_Min_Stack_Size+0x2f24>
    3144:	08001260 	stmdaeq	r0, {r5, r6, r9, ip}
    3148:	0000189f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    314c:	0012861c 	andseq	r8, r2, ip, lsl r6
    3150:	00197b08 	andseq	r7, r9, r8, lsl #22
    3154:	000e0500 	andeq	r0, lr, r0, lsl #10
    3158:	50011700 	andpl	r1, r1, r0, lsl #14
    315c:	00007702 	andeq	r7, r0, r2, lsl #14
    3160:	0012901b 	andseq	r9, r2, fp, lsl r0
    3164:	00189f08 	andseq	r9, r8, r8, lsl #30
    3168:	12be1c00 	adcsne	r1, lr, #0, 24
    316c:	197b0800 	ldmdbne	fp!, {fp}^
    3170:	0e220000 	cdpeq	0, 2, cr0, cr2, cr0, {0}
    3174:	01170000 	tsteq	r7, r0
    3178:	00770250 	rsbseq	r0, r7, r0, asr r2
    317c:	12c81b00 	sbcne	r1, r8, #0, 22
    3180:	19740800 	ldmdbne	r4!, {fp}^
    3184:	cc1b0000 	ldcgt	0, cr0, [fp], {-0}
    3188:	9f080012 	svcls	0x00080012
    318c:	1b000018 	blne	31f4 <_Min_Stack_Size+0x2df4>
    3190:	0800131a 	stmdaeq	r0, {r1, r3, r4, r8, r9, ip}
    3194:	0000189f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    3198:	0013241c 	andseq	r2, r3, ip, lsl r4
    319c:	00184608 	andseq	r4, r8, r8, lsl #12
    31a0:	000e5100 	andeq	r5, lr, r0, lsl #2
    31a4:	50011700 	andpl	r1, r1, r0, lsl #14
    31a8:	00247402 	eoreq	r7, r4, r2, lsl #8
    31ac:	00133a29 	andseq	r3, r3, r9, lsr #20
    31b0:	00197b08 	andseq	r7, r9, r8, lsl #22
    31b4:	50011700 	andpl	r1, r1, r0, lsl #14
    31b8:	00007702 	andeq	r7, r0, r2, lsl #14
    31bc:	0e670700 	cdpeq	7, 6, cr0, cr7, cr0, {0}
    31c0:	04060000 	streq	r0, [r6], #-0
    31c4:	000000da 	ldrdeq	r0, [r0], -sl
    31c8:	0015ca24 	andseq	ip, r5, r4, lsr #20
    31cc:	04910100 	ldreq	r0, [r1], #256	; 0x100
    31d0:	000000da 	ldrdeq	r0, [r0], -sl
    31d4:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
    31d8:	0000023e 	andeq	r0, r0, lr, lsr r2
    31dc:	119c9c01 	orrsne	r9, ip, r1, lsl #24
    31e0:	bc150000 	ldclt	0, cr0, [r5], {-0}
    31e4:	01000019 	tsteq	r0, r9, lsl r0
    31e8:	020e0491 	andeq	r0, lr, #-1862270976	; 0x91000000
    31ec:	1d3d0000 	ldcne	0, cr0, [sp, #-0]
    31f0:	c4150000 	ldrgt	r0, [r5], #-0
    31f4:	01000018 	tsteq	r0, r8, lsl r0
    31f8:	04170491 	ldreq	r0, [r7], #-1169	; 0x491
    31fc:	1d870000 	stcne	0, cr0, [r7]
    3200:	47150000 	ldrmi	r0, [r5, -r0]
    3204:	0100001c 	tsteq	r0, ip, lsl r0
    3208:	00f00491 	smlalseq	r0, r0, r1, r4	; <UNPREDICTABLE>
    320c:	1dd10000 	ldclne	0, cr0, [r1]
    3210:	b6150000 	ldrlt	r0, [r5], -r0
    3214:	01000016 	tsteq	r0, r6, lsl r0
    3218:	08870491 	stmeq	r7, {r0, r4, r7, sl}
    321c:	1e360000 	cdpne	0, 3, cr0, cr6, cr0, {0}
    3220:	d6280000 	strtle	r0, [r8], -r0
    3224:	01000017 	tsteq	r0, r7, lsl r0
    3228:	00da0493 	smullseq	r0, sl, r3, r4
    322c:	1e800000 	cdpne	0, 8, cr0, cr0, cr0, {0}
    3230:	de250000 	cdple	0, 2, cr0, cr5, cr0, {0}
    3234:	0100001d 	tsteq	r0, sp, lsl r0
    3238:	02030494 	andeq	r0, r3, #148, 8	; 0x94000000
    323c:	91020000 	mrsls	r0, (UNDEF: 2)
    3240:	16072850 			; <UNDEFINED> instruction: 0x16072850
    3244:	95010000 	strls	r0, [r1, #-0]
    3248:	00023804 	andeq	r3, r2, r4, lsl #16
    324c:	001f0800 	andseq	r0, pc, r0, lsl #16
    3250:	19bb2800 	ldmibne	fp!, {fp, sp}
    3254:	96010000 	strls	r0, [r1], -r0
    3258:	00040c04 	andeq	r0, r4, r4, lsl #24
    325c:	001d3d00 	andseq	r3, sp, r0, lsl #26
    3260:	041c2600 	ldreq	r2, [ip], #-1536	; 0x600
    3264:	13780000 	cmnne	r8, #0
    3268:	02f80800 	rscseq	r0, r8, #0, 16
    326c:	32010000 	andcc	r0, r1, #0
    3270:	000f8205 	andeq	r8, pc, r5, lsl #4
    3274:	04291a00 	strteq	r1, [r9], #-2560	; 0xa00
    3278:	1f260000 	svcne	0x00260000
    327c:	e81b0000 	ldmda	fp, {}	; <UNPREDICTABLE>
    3280:	3f080013 	svccc	0x00080013
    3284:	1c000018 	stcne	0, cr0, [r0], {24}
    3288:	08001406 	stmdaeq	r0, {r1, r2, sl, ip}
    328c:	00001846 	andeq	r1, r0, r6, asr #16
    3290:	00000f40 	andeq	r0, r0, r0, asr #30
    3294:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    3298:	1b000075 	blne	3474 <_Min_Stack_Size+0x3074>
    329c:	0800140e 	stmdaeq	r0, {r1, r2, r3, sl, ip}
    32a0:	0000186c 	andeq	r1, r0, ip, ror #16
    32a4:	0014161b 	andseq	r1, r4, fp, lsl r6
    32a8:	00187408 	andseq	r7, r8, r8, lsl #8
    32ac:	141a1b00 	ldrne	r1, [sl], #-2816	; 0xb00
    32b0:	183f0800 	ldmdane	pc!, {fp}	; <UNPREDICTABLE>
    32b4:	3c1c0000 	ldccc	0, cr0, [ip], {-0}
    32b8:	46080014 			; <UNDEFINED> instruction: 0x46080014
    32bc:	6f000018 	svcvs	0x00000018
    32c0:	1700000f 	strne	r0, [r0, -pc]
    32c4:	76025001 	strvc	r5, [r2], -r1
    32c8:	441b0000 	ldrmi	r0, [fp], #-0
    32cc:	6c080014 	stcvs	0, cr0, [r8], {20}
    32d0:	1b000018 	blne	3338 <_Min_Stack_Size+0x2f38>
    32d4:	0800144c 	stmdaeq	r0, {r2, r3, r6, sl, ip}
    32d8:	00001874 	andeq	r1, r0, r4, ror r8
    32dc:	03752600 	cmneq	r5, #0, 12
    32e0:	13c60000 	bicne	r0, r6, #0
    32e4:	03100800 	tsteq	r0, #0, 16
    32e8:	1c010000 	stcne	0, cr0, [r1], {-0}
    32ec:	000fca05 	andeq	ip, pc, r5, lsl #20
    32f0:	03861a00 	orreq	r1, r6, #0, 20
    32f4:	1f390000 	svcne	0x00390000
    32f8:	10270000 	eorne	r0, r7, r0
    32fc:	20000003 	andcs	r0, r0, r3
    3300:	00000392 	muleq	r0, r2, r3
    3304:	00001f62 	andeq	r1, r0, r2, ror #30
    3308:	0013ca1b 	andseq	ip, r3, fp, lsl sl
    330c:	00183f08 	andseq	r3, r8, r8, lsl #30
    3310:	13d41b00 	bicsne	r1, r4, #0, 22
    3314:	18740800 	ldmdane	r4!, {fp}^
    3318:	9a1b0000 	bls	6c3320 <_Min_Stack_Size+0x6c2f20>
    331c:	74080014 	strvc	r0, [r8], #-20
    3320:	00000018 	andeq	r0, r0, r8, lsl r0
    3324:	041c2200 	ldreq	r2, [ip], #-512	; 0x200
    3328:	149a0000 	ldrne	r0, [sl], #0
    332c:	00640800 	rsbeq	r0, r4, r0, lsl #16
    3330:	3f010000 	svccc	0x00010000
    3334:	00104605 	andseq	r4, r0, r5, lsl #12
    3338:	04291a00 	strteq	r1, [r9], #-2560	; 0xa00
    333c:	1f8e0000 	svcne	0x008e0000
    3340:	9e1b0000 	cdpls	0, 1, cr0, cr11, cr0, {0}
    3344:	3f080014 	svccc	0x00080014
    3348:	1c000018 	stcne	0, cr0, [r0], {24}
    334c:	080014bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, ip}
    3350:	00001846 	andeq	r1, r0, r6, asr #16
    3354:	00001004 	andeq	r1, r0, r4
    3358:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    335c:	1b000075 	blne	3538 <_Min_Stack_Size+0x3138>
    3360:	080014c4 	stmdaeq	r0, {r2, r6, r7, sl, ip}
    3364:	0000186c 	andeq	r1, r0, ip, ror #16
    3368:	0014cc1b 	andseq	ip, r4, fp, lsl ip
    336c:	00187408 	andseq	r7, r8, r8, lsl #8
    3370:	14d01b00 	ldrbne	r1, [r0], #2816	; 0xb00
    3374:	183f0800 	ldmdane	pc!, {fp}	; <UNPREDICTABLE>
    3378:	ee1c0000 	cdp	0, 1, cr0, cr12, cr0, {0}
    337c:	46080014 			; <UNDEFINED> instruction: 0x46080014
    3380:	33000018 	movwcc	r0, #24
    3384:	17000010 	smladne	r0, r0, r0, r0
    3388:	76025001 	strvc	r5, [r2], -r1
    338c:	f61b0000 			; <UNDEFINED> instruction: 0xf61b0000
    3390:	6c080014 	stcvs	0, cr0, [r8], {20}
    3394:	1b000018 	blne	33fc <_Min_Stack_Size+0x2ffc>
    3398:	080014fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, ip}
    339c:	00001874 	andeq	r1, r0, r4, ror r8
    33a0:	135e1b00 	cmpne	lr, #0, 22
    33a4:	18e90800 	stmiane	r9!, {fp}^
    33a8:	6c1b0000 	ldcvs	0, cr0, [fp], {-0}
    33ac:	3f080013 	svccc	0x00080013
    33b0:	1b000018 	blne	3418 <_Min_Stack_Size+0x3018>
    33b4:	08001398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip}
    33b8:	00001874 	andeq	r1, r0, r4, ror r8
    33bc:	00139c1b 	andseq	r9, r3, fp, lsl ip
    33c0:	0018f508 	andseq	pc, r8, r8, lsl #10
    33c4:	13a01b00 	movne	r1, #0, 22
    33c8:	183f0800 	ldmdane	pc!, {fp}	; <UNPREDICTABLE>
    33cc:	b81b0000 	ldmdalt	fp, {}	; <UNPREDICTABLE>
    33d0:	74080013 	strvc	r0, [r8], #-19
    33d4:	1c000018 	stcne	0, cr0, [r0], {24}
    33d8:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
    33dc:	000018fd 	strdeq	r1, [r0], -sp
    33e0:	00001096 	muleq	r0, r6, r0
    33e4:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    33e8:	01174c91 			; <UNDEFINED> instruction: 0x01174c91
    33ec:	50910250 	addspl	r0, r1, r0, asr r2
    33f0:	13e41c00 	mvnne	r1, #0, 24
    33f4:	193a0800 	ldmdbne	sl!, {fp}
    33f8:	10aa0000 	adcne	r0, sl, r0
    33fc:	01170000 	tsteq	r7, r0
    3400:	00750250 	rsbseq	r0, r5, r0, asr r2
    3404:	14501b00 	ldrbne	r1, [r0], #-2816	; 0xb00
    3408:	192e0800 	stmdbne	lr!, {fp}
    340c:	561b0000 	ldrpl	r0, [fp], -r0
    3410:	7b080014 	blvc	203468 <_Min_Stack_Size+0x203068>
    3414:	1b000018 	blne	347c <_Min_Stack_Size+0x307c>
    3418:	0800145a 	stmdaeq	r0, {r1, r3, r4, r6, sl, ip}
    341c:	0000183f 	andeq	r1, r0, pc, lsr r8
    3420:	00146e1c 	andseq	r6, r4, ip, lsl lr
    3424:	0003c408 	andeq	ip, r3, r8, lsl #8
    3428:	0010df00 	andseq	sp, r0, r0, lsl #30
    342c:	51011700 	tstpl	r1, r0, lsl #14
    3430:	17007802 	strne	r7, [r0, -r2, lsl #16]
    3434:	74025001 	strvc	r5, [r2], #-1
    3438:	821b0000 	andshi	r0, fp, #0
    343c:	68080014 	stmdavs	r8, {r2, r4}
    3440:	1b000019 	blne	34ac <_Min_Stack_Size+0x30ac>
    3444:	0800148e 	stmdaeq	r0, {r1, r2, r3, r7, sl, ip}
    3448:	00001874 	andeq	r1, r0, r4, ror r8
    344c:	0015021b 	andseq	r0, r5, fp, lsl r2
    3450:	00192e08 	andseq	r2, r9, r8, lsl #28
    3454:	150a1c00 	strne	r1, [sl, #-3072]	; 0xc00
    3458:	19560800 	ldmdbne	r6, {fp}^
    345c:	110e0000 	mrsne	r0, (UNDEF: 14)
    3460:	01170000 	tsteq	r7, r0
    3464:	50910250 	addspl	r0, r1, r0, asr r2
    3468:	15101b00 	ldrne	r1, [r0, #-2816]	; 0xb00
    346c:	189f0800 	ldmne	pc, {fp}	; <UNPREDICTABLE>
    3470:	161b0000 	ldrne	r0, [fp], -r0
    3474:	3f080015 	svccc	0x00080015
    3478:	1b000018 	blne	34e0 <_Min_Stack_Size+0x30e0>
    347c:	0800151c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip}
    3480:	0000198c 	andeq	r1, r0, ip, lsl #19
    3484:	0015201b 	andseq	r2, r5, fp, lsl r0
    3488:	00187408 	andseq	r7, r8, r8, lsl #8
    348c:	15281c00 	strne	r1, [r8, #-3072]!	; 0xc00
    3490:	041c0800 	ldreq	r0, [ip], #-2048	; 0x800
    3494:	11460000 	mrsne	r0, (UNDEF: 70)
    3498:	01170000 	tsteq	r7, r0
    349c:	00740250 	rsbseq	r0, r4, r0, asr r2
    34a0:	152c1b00 	strne	r1, [ip, #-2816]!	; 0xb00
    34a4:	192e0800 	stmdbne	lr!, {fp}
    34a8:	3a1b0000 	bcc	6c34b0 <_Min_Stack_Size+0x6c30b0>
    34ac:	74080015 	strvc	r0, [r8], #-21
    34b0:	1c000018 	stcne	0, cr0, [r0], {24}
    34b4:	08001552 	stmdaeq	r0, {r1, r4, r6, r8, sl, ip}
    34b8:	00001846 	andeq	r1, r0, r6, asr #16
    34bc:	0000116c 	andeq	r1, r0, ip, ror #2
    34c0:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    34c4:	1b002474 	blne	c69c <_Min_Stack_Size+0xc29c>
    34c8:	0800155a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, ip}
    34cc:	0000187b 	andeq	r1, r0, fp, ror r8
    34d0:	0015641c 	andseq	r6, r5, ip, lsl r4
    34d4:	00184608 	andseq	r4, r8, r8, lsl #12
    34d8:	00118900 	andseq	r8, r1, r0, lsl #18
    34dc:	50011700 	andpl	r1, r1, r0, lsl #14
    34e0:	00107402 	andseq	r7, r0, r2, lsl #8
    34e4:	00156e1b 	andseq	r6, r5, fp, lsl lr
    34e8:	00189f08 	andseq	r9, r8, r8, lsl #30
    34ec:	157c1b00 	ldrbne	r1, [ip, #-2816]!	; 0xb00
    34f0:	189f0800 	ldmne	pc, {fp}	; <UNPREDICTABLE>
    34f4:	24000000 	strcs	r0, [r0], #-0
    34f8:	0000168d 	andeq	r1, r0, sp, lsl #13
    34fc:	da020d01 	ble	86908 <_Min_Stack_Size+0x86508>
    3500:	80000000 	andhi	r0, r0, r0
    3504:	3a080015 	bcc	203560 <_Min_Stack_Size+0x203160>
    3508:	01000000 	mrseq	r0, (UNDEF: 0)
    350c:	00122d9c 	mulseq	r2, ip, sp
    3510:	17211500 	strne	r1, [r1, -r0, lsl #10]!
    3514:	0d010000 	stceq	0, cr0, [r1, #-0]
    3518:	00020e02 	andeq	r0, r2, r2, lsl #28
    351c:	001fa100 	andseq	sl, pc, r0, lsl #2
    3520:	1c471500 	cfstr64ne	mvdx1, [r7], {-0}
    3524:	0d010000 	stceq	0, cr0, [r1, #-0]
    3528:	0000f002 	andeq	pc, r0, r2
    352c:	001fd500 	andseq	sp, pc, r0, lsl #10
    3530:	12512800 	subsne	r2, r1, #0, 16
    3534:	0f010000 	svceq	0x00010000
    3538:	0000da02 	andeq	sp, r0, r2, lsl #20
    353c:	00200900 	eoreq	r0, r0, r0, lsl #18
    3540:	17202800 	strne	r2, [r0, -r0, lsl #16]!
    3544:	10010000 	andne	r0, r1, r0
    3548:	00040c02 	andeq	r0, r4, r2, lsl #24
    354c:	001fa100 	andseq	sl, pc, r0, lsl #2
    3550:	158e1b00 	strne	r1, [lr, #2816]	; 0xb00
    3554:	19680800 	stmdbne	r8!, {fp}^
    3558:	9e1c0000 	cdpls	0, 1, cr0, cr12, cr0, {0}
    355c:	6d080015 	stcvs	0, cr0, [r8, #-84]	; 0xffffffac
    3560:	2300000e 	movwcs	r0, #14
    3564:	17000012 	smladne	r0, r2, r0, r0
    3568:	30015301 	andcc	r5, r1, r1, lsl #6
    356c:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    3570:	01170075 	tsteq	r7, r5, ror r0
    3574:	17300151 			; <UNDEFINED> instruction: 0x17300151
    3578:	74025001 	strvc	r5, [r2], #-1
    357c:	ae1b0000 	cdpge	0, 1, cr0, cr11, cr0, {0}
    3580:	9f080015 	svcls	0x00080015
    3584:	00000018 	andeq	r0, r0, r8, lsl r0
    3588:	00170b24 	andseq	r0, r7, r4, lsr #22
    358c:	054e0100 	strbeq	r0, [lr, #-256]	; 0x100
    3590:	000000da 	ldrdeq	r0, [r0], -sl
    3594:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
    3598:	00000082 	andeq	r0, r0, r2, lsl #1
    359c:	13329c01 	teqne	r2, #256	; 0x100
    35a0:	bc150000 	ldclt	0, cr0, [r5], {-0}
    35a4:	01000019 	tsteq	r0, r9, lsl r0
    35a8:	020e054e 	andeq	r0, lr, #327155712	; 0x13800000
    35ac:	20280000 	eorcs	r0, r8, r0
    35b0:	c4150000 	ldrgt	r0, [r5], #-0
    35b4:	01000018 	tsteq	r0, r8, lsl r0
    35b8:	0417054e 	ldreq	r0, [r7], #-1358	; 0x54e
    35bc:	209c0000 	addscs	r0, ip, r0
    35c0:	29150000 	ldmdbcs	r5, {}	; <UNPREDICTABLE>
    35c4:	01000015 	tsteq	r0, r5, lsl r0
    35c8:	0e62054e 	cdpeq	5, 6, cr0, cr2, cr14, {2}
    35cc:	20e60000 	rsccs	r0, r6, r0
    35d0:	51280000 	teqpl	r8, r0
    35d4:	01000012 	tsteq	r0, r2, lsl r0
    35d8:	00da0550 	sbcseq	r0, sl, r0, asr r5
    35dc:	21300000 	teqcs	r0, r0
    35e0:	59280000 	stmdbpl	r8!, {}	; <UNPREDICTABLE>
    35e4:	01000013 	tsteq	r0, r3, lsl r0
    35e8:	00e50551 	rsceq	r0, r5, r1, asr r5
    35ec:	21640000 	cmncs	r4, r0
    35f0:	bb280000 	bllt	a035f8 <_Min_Stack_Size+0xa031f8>
    35f4:	01000019 	tsteq	r0, r9, lsl r0
    35f8:	040c0552 	streq	r0, [ip], #-1362	; 0x552
    35fc:	20280000 	eorcs	r0, r8, r0
    3600:	cc1b0000 	ldcgt	0, cr0, [fp], {-0}
    3604:	74080015 	strvc	r0, [r8], #-21
    3608:	1b000019 	blne	3674 <_Min_Stack_Size+0x3274>
    360c:	080015d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip}
    3610:	0000189f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    3614:	0015de1c 	andseq	sp, r5, ip, lsl lr
    3618:	00197b08 	andseq	r7, r9, r8, lsl #22
    361c:	0012cd00 	andseq	ip, r2, r0, lsl #26
    3620:	50011700 	andpl	r1, r1, r0, lsl #14
    3624:	00007702 	andeq	r7, r0, r2, lsl #14
    3628:	0015e61b 	andseq	lr, r5, fp, lsl r6
    362c:	00189f08 	andseq	r9, r8, r8, lsl #30
    3630:	15f01c00 	ldrbne	r1, [r0, #3072]!	; 0xc00
    3634:	03c40800 	biceq	r0, r4, #0, 16
    3638:	12f00000 	rscsne	r0, r0, #0
    363c:	01170000 	tsteq	r7, r0
    3640:	00760251 	rsbseq	r0, r6, r1, asr r2
    3644:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    3648:	1c000074 	stcne	0, cr0, [r0], {116}	; 0x74
    364c:	0800160a 	stmdaeq	r0, {r1, r3, r9, sl, ip}
    3650:	0000197b 	andeq	r1, r0, fp, ror r9
    3654:	00001304 	andeq	r1, r0, r4, lsl #6
    3658:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    365c:	1b000077 	blne	3840 <_Min_Stack_Size+0x3440>
    3660:	08001618 	stmdaeq	r0, {r3, r4, r9, sl, ip}
    3664:	0000189f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    3668:	0016281c 	andseq	r2, r6, ip, lsl r8
    366c:	00184608 	andseq	r4, r8, r8, lsl #12
    3670:	00132100 	andseq	r2, r3, r0, lsl #2
    3674:	50011700 	andpl	r1, r1, r0, lsl #14
    3678:	00107402 	andseq	r7, r0, r2, lsl #8
    367c:	00163a29 	andseq	r3, r6, r9, lsr #20
    3680:	00197b08 	andseq	r7, r9, r8, lsl #22
    3684:	50011700 	andpl	r1, r1, r0, lsl #14
    3688:	00007702 	andeq	r7, r0, r2, lsl #14
    368c:	15722400 	ldrbne	r2, [r2, #-1024]!	; 0x400
    3690:	a5010000 	strge	r0, [r1, #-0]
    3694:	0000da05 	andeq	sp, r0, r5, lsl #20
    3698:	00164000 	andseq	r4, r6, r0
    369c:	00005208 	andeq	r5, r0, r8, lsl #4
    36a0:	139c0100 	orrsne	r0, ip, #0, 2
    36a4:	15000014 	strne	r0, [r0, #-20]
    36a8:	000019bc 			; <UNDEFINED> instruction: 0x000019bc
    36ac:	0e05a501 	cfsh32eq	mvfx10, mvfx5, #1
    36b0:	a3000002 	movwge	r0, #2
    36b4:	15000021 	strne	r0, [r0, #-33]	; 0x21
    36b8:	000018c4 	andeq	r1, r0, r4, asr #17
    36bc:	1705a501 	strne	sl, [r5, -r1, lsl #10]
    36c0:	ed000004 	stc	0, cr0, [r0, #-16]
    36c4:	28000021 	stmdacs	r0, {r0, r5}
    36c8:	00001251 	andeq	r1, r0, r1, asr r2
    36cc:	da05a701 	ble	16d2d8 <_Min_Stack_Size+0x16ced8>
    36d0:	37000000 	strcc	r0, [r0, -r0]
    36d4:	28000022 	stmdacs	r0, {r1, r5}
    36d8:	00001359 	andeq	r1, r0, r9, asr r3
    36dc:	e505a801 	str	sl, [r5, #-2049]	; 0x801
    36e0:	55000000 	strpl	r0, [r0, #-0]
    36e4:	28000022 	stmdacs	r0, {r1, r5}
    36e8:	00001607 	andeq	r1, r0, r7, lsl #12
    36ec:	3805a901 	stmdacc	r5, {r0, r8, fp, sp, pc}
    36f0:	89000002 	stmdbhi	r0, {r1}
    36f4:	28000022 	stmdacs	r0, {r1, r5}
    36f8:	000019bb 			; <UNDEFINED> instruction: 0x000019bb
    36fc:	0c05aa01 	stceq	10, cr10, [r5], {1}
    3700:	a3000004 	movwge	r0, #4
    3704:	1b000021 	blne	3790 <_Min_Stack_Size+0x3390>
    3708:	08001650 	stmdaeq	r0, {r4, r6, r9, sl, ip}
    370c:	00001974 	andeq	r1, r0, r4, ror r9
    3710:	0016541b 	andseq	r5, r6, fp, lsl r4
    3714:	00189f08 	andseq	r9, r8, r8, lsl #30
    3718:	16601c00 	strbtne	r1, [r0], -r0, lsl #24
    371c:	197b0800 	ldmdbne	fp!, {fp}^
    3720:	13d20000 	bicsne	r0, r2, #0
    3724:	01170000 	tsteq	r7, r0
    3728:	00780250 	rsbseq	r0, r8, r0, asr r2
    372c:	166a1b00 	strbtne	r1, [sl], -r0, lsl #22
    3730:	189f0800 	ldmne	pc, {fp}	; <UNPREDICTABLE>
    3734:	761c0000 	ldrvc	r0, [ip], -r0
    3738:	c4080016 	strgt	r0, [r8], #-22
    373c:	f5000003 			; <UNDEFINED> instruction: 0xf5000003
    3740:	17000013 	smladne	r0, r3, r0, r0
    3744:	76025101 	strvc	r5, [r2], -r1, lsl #2
    3748:	50011700 	andpl	r1, r1, r0, lsl #14
    374c:	00007402 	andeq	r7, r0, r2, lsl #8
    3750:	0016801c 	andseq	r8, r6, ip, lsl r0
    3754:	00197b08 	andseq	r7, r9, r8, lsl #22
    3758:	00140900 	andseq	r0, r4, r0, lsl #18
    375c:	50011700 	andpl	r1, r1, r0, lsl #14
    3760:	00007802 	andeq	r7, r0, r2, lsl #16
    3764:	0016901b 	andseq	r9, r6, fp, lsl r0
    3768:	00189f08 	andseq	r9, r8, r8, lsl #30
    376c:	ea240000 	b	903774 <_Min_Stack_Size+0x903374>
    3770:	01000014 	tsteq	r0, r4, lsl r0
    3774:	00e505da 	ldrdeq	r0, [r5], #90	; 0x5a	; <UNPREDICTABLE>
    3778:	16940000 	ldrne	r0, [r4], r0
    377c:	001a0800 	andseq	r0, sl, r0, lsl #16
    3780:	9c010000 	stcls	0, cr0, [r1], {-0}
    3784:	00001469 	andeq	r1, r0, r9, ror #8
    3788:	0019bc15 	andseq	fp, r9, r5, lsl ip
    378c:	05da0100 	ldrbeq	r0, [sl, #256]	; 0x100
    3790:	00001469 	andeq	r1, r0, r9, ror #8
    3794:	0000229c 	muleq	r0, ip, r2
    3798:	00125028 	andseq	r5, r2, r8, lsr #32
    379c:	05dc0100 	ldrbeq	r0, [ip, #256]	; 0x100
    37a0:	000000e5 	andeq	r0, r0, r5, ror #1
    37a4:	000022de 	ldrdeq	r2, [r0], -lr
    37a8:	00169e1b 	andseq	r9, r6, fp, lsl lr
    37ac:	00183f08 	andseq	r3, r8, r8, lsl #30
    37b0:	16a41b00 	strtne	r1, [r4], r0, lsl #22
    37b4:	18740800 	ldmdane	r4!, {fp}^
    37b8:	ac1b0000 	ldcge	0, cr0, [fp], {-0}
    37bc:	9f080016 	svcls	0x00080016
    37c0:	00000018 	andeq	r0, r0, r8, lsl r0
    37c4:	00020e07 	andeq	r0, r2, r7, lsl #28
    37c8:	1a172400 	bne	5cc7d0 <_Min_Stack_Size+0x5cc3d0>
    37cc:	ea010000 	b	437d4 <_Min_Stack_Size+0x433d4>
    37d0:	0000e505 	andeq	lr, r0, r5, lsl #10
    37d4:	0016b000 	andseq	fp, r6, r0
    37d8:	00001e08 	andeq	r1, r0, r8, lsl #28
    37dc:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    37e0:	15000014 	strne	r0, [r0, #-20]
    37e4:	000019bc 			; <UNDEFINED> instruction: 0x000019bc
    37e8:	6905ea01 	stmdbvs	r5, {r0, r9, fp, sp, lr, pc}
    37ec:	f1000014 	cps	#20
    37f0:	28000022 	stmdacs	r0, {r1, r5}
    37f4:	00001250 	andeq	r1, r0, r0, asr r2
    37f8:	e505ec01 	str	lr, [r5, #-3073]	; 0xc01
    37fc:	33000000 	movwcc	r0, #0
    3800:	28000023 	stmdacs	r0, {r0, r1, r5}
    3804:	000019bb 			; <UNDEFINED> instruction: 0x000019bb
    3808:	1105ed01 	tstne	r5, r1, lsl #26
    380c:	f1000004 	cps	#4
    3810:	1b000022 	blne	38a0 <_Min_Stack_Size+0x34a0>
    3814:	080016ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, ip}
    3818:	0000183f 	andeq	r1, r0, pc, lsr r8
    381c:	0016c41b 	andseq	ip, r6, fp, lsl r4
    3820:	00187408 	andseq	r7, r8, r8, lsl #8
    3824:	16cc1b00 	strbne	r1, [ip], r0, lsl #22
    3828:	189f0800 	ldmne	pc, {fp}	; <UNPREDICTABLE>
    382c:	24000000 	strcs	r0, [r0], #-0
    3830:	000017a3 	andeq	r1, r0, r3, lsr #15
    3834:	e505fc01 	str	pc, [r5, #-3073]	; 0xc01
    3838:	d0000000 	andle	r0, r0, r0
    383c:	0e080016 	mcreq	0, 0, r0, cr8, cr6, {0}
    3840:	01000000 	mrseq	r0, (UNDEF: 0)
    3844:	0015189c 	mulseq	r5, ip, r8
    3848:	19bc1500 	ldmibne	ip!, {r8, sl, ip}
    384c:	fc010000 	stc2	0, cr0, [r1], {-0}
    3850:	00146905 	andseq	r6, r4, r5, lsl #18
    3854:	00234600 	eoreq	r4, r3, r0, lsl #12
    3858:	12502800 	subsne	r2, r0, #0, 16
    385c:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    3860:	0000e505 	andeq	lr, r0, r5, lsl #10
    3864:	00238000 	eoreq	r8, r3, r0
    3868:	16dc1b00 	ldrbne	r1, [ip], r0, lsl #22
    386c:	189f0800 	ldmne	pc, {fp}	; <UNPREDICTABLE>
    3870:	2a000000 	bcs	3878 <_Min_Stack_Size+0x3478>
    3874:	0000165a 	andeq	r1, r0, sl, asr r6
    3878:	e0060801 	and	r0, r6, r1, lsl #16
    387c:	94080016 	strls	r0, [r8], #-22
    3880:	01000000 	mrseq	r0, (UNDEF: 0)
    3884:	00159f9c 	mulseq	r5, ip, pc	; <UNPREDICTABLE>
    3888:	19bc1500 	ldmibne	ip!, {r8, sl, ip}
    388c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3890:	00020e06 	andeq	r0, r2, r6, lsl #28
    3894:	00239300 	eoreq	r9, r3, r0, lsl #6
    3898:	19bb2800 	ldmibne	fp!, {fp, sp}
    389c:	0a010000 	beq	438a4 <_Min_Stack_Size+0x434a4>
    38a0:	00040c06 	andeq	r0, r4, r6, lsl #24
    38a4:	00239300 	eoreq	r9, r3, r0, lsl #6
    38a8:	039f2600 	orrseq	r2, pc, #0, 12
    38ac:	16e60000 	strbtne	r0, [r6], r0
    38b0:	03280800 	teqeq	r8, #0, 16
    38b4:	11010000 	mrsne	r0, (UNDEF: 1)
    38b8:	00157706 	andseq	r7, r5, r6, lsl #14
    38bc:	03ac2b00 			; <UNDEFINED> instruction: 0x03ac2b00
    38c0:	28270000 	stmdacs	r7!, {}	; <UNPREDICTABLE>
    38c4:	20000003 	andcs	r0, r0, r3
    38c8:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
    38cc:	000023eb 	andeq	r2, r0, fp, ror #7
    38d0:	2a1b0000 	bcs	6c38d8 <_Min_Stack_Size+0x6c34d8>
    38d4:	c0080017 	andgt	r0, r8, r7, lsl r0
    38d8:	2c000018 	stccs	0, cr0, [r0], {24}
    38dc:	08001734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, ip}
    38e0:	000018c0 	andeq	r1, r0, r0, asr #17
    38e4:	00001595 	muleq	r0, r5, r5
    38e8:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    38ec:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    38f0:	00174c1b 	andseq	r4, r7, fp, lsl ip
    38f4:	00189f08 	andseq	r9, r8, r8, lsl #30
    38f8:	52240000 	eorpl	r0, r4, #0
    38fc:	01000019 	tsteq	r0, r9, lsl r0
    3900:	00e5061e 	rsceq	r0, r5, lr, lsl r6
    3904:	17740000 	ldrbne	r0, [r4, -r0]!
    3908:	00040800 	andeq	r0, r4, r0, lsl #16
    390c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3910:	000015ca 	andeq	r1, r0, sl, asr #11
    3914:	0019bc15 	andseq	fp, r9, r5, lsl ip
    3918:	061e0100 	ldreq	r0, [lr], -r0, lsl #2
    391c:	0000020e 	andeq	r0, r0, lr, lsl #4
    3920:	000024a7 	andeq	r2, r0, r7, lsr #9
    3924:	155d2a00 	ldrbne	r2, [sp, #-2560]	; 0xa00
    3928:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    392c:	00177806 	andseq	r7, r7, r6, lsl #16
    3930:	00000408 	andeq	r0, r0, r8, lsl #8
    3934:	fd9c0100 	ldc2	1, cr0, [ip]
    3938:	2d000015 	stccs	0, cr0, [r0, #-84]	; 0xffffffac
    393c:	000019bc 			; <UNDEFINED> instruction: 0x000019bc
    3940:	0e062801 	cdpeq	8, 0, cr2, cr6, cr1, {0}
    3944:	01000002 	tsteq	r0, r2
    3948:	16322d50 			; <UNDEFINED> instruction: 0x16322d50
    394c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    3950:	0000e506 	andeq	lr, r0, r6, lsl #10
    3954:	00510100 	subseq	r0, r1, r0, lsl #2
    3958:	0014d624 	andseq	sp, r4, r4, lsr #12
    395c:	06320100 	ldrteq	r0, [r2], -r0, lsl #2
    3960:	000000c4 	andeq	r0, r0, r4, asr #1
    3964:	0800177c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip}
    3968:	00000006 	andeq	r0, r0, r6
    396c:	16289c01 	strtne	r9, [r8], -r1, lsl #24
    3970:	bc150000 	ldclt	0, cr0, [r5], {-0}
    3974:	01000019 	tsteq	r0, r9, lsl r0
    3978:	020e0632 	andeq	r0, lr, #52428800	; 0x3200000
    397c:	24c80000 	strbcs	r0, [r8], #0
    3980:	24000000 	strcs	r0, [r0], #-0
    3984:	00001543 	andeq	r1, r0, r3, asr #10
    3988:	da071e01 	ble	1cb194 <_Min_Stack_Size+0x1cad94>
    398c:	84000000 	strhi	r0, [r0], #-0
    3990:	16080017 			; <UNDEFINED> instruction: 0x16080017
    3994:	01000000 	mrseq	r0, (UNDEF: 0)
    3998:	00166c9c 	mulseq	r6, ip, ip
    399c:	19bc1500 	ldmibne	ip!, {r8, sl, ip}
    39a0:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    39a4:	00146907 	andseq	r6, r4, r7, lsl #18
    39a8:	0024e900 	eoreq	lr, r4, r0, lsl #18
    39ac:	12512800 	subsne	r2, r1, #0, 16
    39b0:	20010000 	andcs	r0, r1, r0
    39b4:	0000da07 	andeq	sp, r0, r7, lsl #20
    39b8:	00252300 	eoreq	r2, r5, r0, lsl #6
    39bc:	17981b00 	ldrne	r1, [r8, r0, lsl #22]
    39c0:	189f0800 	ldmne	pc, {fp}	; <UNPREDICTABLE>
    39c4:	24000000 	strcs	r0, [r0], #-0
    39c8:	00001809 	andeq	r1, r0, r9, lsl #16
    39cc:	da074501 	ble	1d4dd8 <_Min_Stack_Size+0x1d49d8>
    39d0:	9c000000 	stcls	0, cr0, [r0], {-0}
    39d4:	16080017 			; <UNDEFINED> instruction: 0x16080017
    39d8:	01000000 	mrseq	r0, (UNDEF: 0)
    39dc:	0016b09c 	mulseq	r6, ip, r0
    39e0:	19bc1500 	ldmibne	ip!, {r8, sl, ip}
    39e4:	45010000 	strmi	r0, [r1, #-0]
    39e8:	00146907 	andseq	r6, r4, r7, lsl #18
    39ec:	00253d00 	eoreq	r3, r5, r0, lsl #26
    39f0:	12512800 	subsne	r2, r1, #0, 16
    39f4:	47010000 	strmi	r0, [r1, -r0]
    39f8:	0000da07 	andeq	sp, r0, r7, lsl #20
    39fc:	00257700 	eoreq	r7, r5, r0, lsl #14
    3a00:	17b01b00 	ldrne	r1, [r0, r0, lsl #22]!
    3a04:	189f0800 	ldmne	pc, {fp}	; <UNPREDICTABLE>
    3a08:	2a000000 	bcs	3a10 <_Min_Stack_Size+0x3610>
    3a0c:	000016d3 	ldrdeq	r1, [r0], -r3
    3a10:	b4086c01 	strlt	r6, [r8], #-3073	; 0xc01
    3a14:	5a080017 	bpl	203a78 <_Min_Stack_Size+0x203678>
    3a18:	01000000 	mrseq	r0, (UNDEF: 0)
    3a1c:	0016f29c 	mulseq	r6, ip, r2
    3a20:	19bc2d00 	ldmibne	ip!, {r8, sl, fp, sp}
    3a24:	6c010000 	stcvs	0, cr0, [r1], {-0}
    3a28:	00020e08 	andeq	r0, r2, r8, lsl #28
    3a2c:	2d500100 	ldfcse	f0, [r0, #-0]
    3a30:	000018ee 	andeq	r1, r0, lr, ror #17
    3a34:	a7086c01 	strge	r6, [r8, -r1, lsl #24]
    3a38:	01000000 	mrseq	r0, (UNDEF: 0)
    3a3c:	78752e51 	ldmdavc	r5!, {r0, r4, r6, r9, sl, fp, sp}^
    3a40:	086e0100 	stmdaeq	lr!, {r8}^
    3a44:	000000e5 	andeq	r0, r0, r5, ror #1
    3a48:	000025bd 			; <UNDEFINED> instruction: 0x000025bd
    3a4c:	039f1900 	orrseq	r1, pc, #0, 18
    3a50:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    3a54:	00600800 	rsbeq	r0, r0, r0, lsl #16
    3a58:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a5c:	00001716 	andeq	r1, r0, r6, lsl r7
    3a60:	0003ac2f 	andeq	sl, r3, pc, lsr #24
    3a64:	20500100 	subscs	r0, r0, r0, lsl #2
    3a68:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
    3a6c:	00002679 	andeq	r2, r0, r9, ror r6
    3a70:	19f82a00 	ldmibne	r8!, {r9, fp, sp}^
    3a74:	a4010000 	strge	r0, [r1], #-0
    3a78:	00187008 	andseq	r7, r8, r8
    3a7c:	0000b008 	andeq	fp, r0, r8
    3a80:	019c0100 	orrseq	r0, ip, r0, lsl #2
    3a84:	15000018 	strne	r0, [r0, #-24]
    3a88:	000019bc 			; <UNDEFINED> instruction: 0x000019bc
    3a8c:	0e08a401 	cdpeq	4, 0, cr10, cr8, cr1, {0}
    3a90:	35000002 	strcc	r0, [r0, #-2]
    3a94:	15000027 	strne	r0, [r0, #-39]	; 0x27
    3a98:	00001c47 	andeq	r1, r0, r7, asr #24
    3a9c:	f008a401 			; <UNDEFINED> instruction: 0xf008a401
    3aa0:	61000000 	mrsvs	r0, (UNDEF: 0)
    3aa4:	28000027 	stmdacs	r0, {r0, r1, r2, r5}
    3aa8:	000019bb 			; <UNDEFINED> instruction: 0x000019bb
    3aac:	0c08a601 	stceq	6, cr10, [r8], {1}
    3ab0:	8d000004 	stchi	0, cr0, [r0, #-16]
    3ab4:	26000027 	strcs	r0, [r0], -r7, lsr #32
    3ab8:	0000041c 	andeq	r0, r0, ip, lsl r4
    3abc:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
    3ac0:	00000348 	andeq	r0, r0, r8, asr #6
    3ac4:	d808c001 	stmdale	r8, {r0, lr, pc}
    3ac8:	1a000017 	bne	3b2c <_Min_Stack_Size+0x372c>
    3acc:	00000429 	andeq	r0, r0, r9, lsr #8
    3ad0:	000027b9 			; <UNDEFINED> instruction: 0x000027b9
    3ad4:	0018a41b 	andseq	sl, r8, fp, lsl r4
    3ad8:	00183f08 	andseq	r3, r8, r8, lsl #30
    3adc:	18ca1c00 	stmiane	sl, {sl, fp, ip}^
    3ae0:	18460800 	stmdane	r6, {fp}^
    3ae4:	17960000 	ldrne	r0, [r6, r0]
    3ae8:	01170000 	tsteq	r7, r0
    3aec:	00750250 	rsbseq	r0, r5, r0, asr r2
    3af0:	18d21b00 	ldmne	r2, {r8, r9, fp, ip}^
    3af4:	186c0800 	stmdane	ip!, {fp}^
    3af8:	de1b0000 	cdple	0, 1, cr0, cr11, cr0, {0}
    3afc:	74080018 	strvc	r0, [r8], #-24
    3b00:	1b000018 	blne	3b68 <_Min_Stack_Size+0x3768>
    3b04:	080018e2 	stmdaeq	r0, {r1, r5, r6, r7, fp, ip}
    3b08:	0000183f 	andeq	r1, r0, pc, lsr r8
    3b0c:	0019081c 	andseq	r0, r9, ip, lsl r8
    3b10:	00184608 	andseq	r4, r8, r8, lsl #12
    3b14:	0017c500 	andseq	ip, r7, r0, lsl #10
    3b18:	50011700 	andpl	r1, r1, r0, lsl #14
    3b1c:	00007502 	andeq	r7, r0, r2, lsl #10
    3b20:	0019101b 	andseq	r1, r9, fp, lsl r0
    3b24:	00186c08 	andseq	r6, r8, r8, lsl #24
    3b28:	19201d00 	stmdbne	r0!, {r8, sl, fp, ip}
    3b2c:	18740800 	ldmdane	r4!, {fp}^
    3b30:	1b000000 	blne	3b38 <_Min_Stack_Size+0x3738>
    3b34:	0800187a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, ip}
    3b38:	0000183f 	andeq	r1, r0, pc, lsr r8
    3b3c:	0018921b 	andseq	r9, r8, fp, lsl r2
    3b40:	00187408 	andseq	r7, r8, r8, lsl #8
    3b44:	18a02900 	stmiane	r0!, {r8, fp, sp}
    3b48:	199e0800 	ldmibne	lr, {fp}
    3b4c:	01170000 	tsteq	r7, r0
    3b50:	00750251 	rsbseq	r0, r5, r1, asr r2
    3b54:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    3b58:	00002474 	andeq	r2, r0, r4, ror r4
    3b5c:	00033530 	andeq	r3, r3, r0, lsr r5
    3b60:	00181100 	andseq	r1, r8, r0, lsl #2
    3b64:	00973100 	addseq	r3, r7, r0, lsl #2
    3b68:	00070000 	andeq	r0, r7, r0
    3b6c:	00191132 	andseq	r1, r9, r2, lsr r1
    3b70:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
    3b74:	05000018 	streq	r0, [r0, #-24]
    3b78:	0000b003 	andeq	fp, r0, r3
    3b7c:	162b3320 	strtne	r3, [fp], -r0, lsr #6
    3b80:	009e0000 	addseq	r0, lr, r0
    3b84:	183f0000 	ldmdane	pc!, {}	; <UNPREDICTABLE>
    3b88:	9e340000 	cdpls	0, 3, cr0, cr4, cr0, {0}
    3b8c:	34000000 	strcc	r0, [r0], #-0
    3b90:	000000b2 	strheq	r0, [r0], -r2
    3b94:	00009734 	andeq	r9, r0, r4, lsr r7
    3b98:	b3350000 	teqlt	r5, #0
    3b9c:	05000013 	streq	r0, [r0, #-19]
    3ba0:	187c367b 	ldmdane	ip!, {r0, r1, r3, r4, r5, r6, r9, sl, ip, sp}^
    3ba4:	ad070000 	stcge	0, cr0, [r7, #-0]
    3ba8:	0000da05 	andeq	sp, r0, r5, lsl #20
    3bac:	00185c00 	andseq	r5, r8, r0, lsl #24
    3bb0:	185c3400 	ldmdane	ip, {sl, ip, sp}^
    3bb4:	07000000 	streq	r0, [r0, -r0]
    3bb8:	00001861 	andeq	r1, r0, r1, ror #16
    3bbc:	18670406 	stmdane	r7!, {r1, r2, sl}^
    3bc0:	c8070000 	stmdagt	r7, {}	; <UNPREDICTABLE>
    3bc4:	37000001 	strcc	r0, [r0, -r1]
    3bc8:	0000186b 	andeq	r1, r0, fp, ror #16
    3bcc:	3505d407 	strcc	sp, [r5, #-1031]	; 0x407
    3bd0:	00001383 	andeq	r1, r0, r3, lsl #7
    3bd4:	d2357c05 	eorsle	r7, r5, #1280	; 0x500
    3bd8:	05000013 	streq	r0, [r0, #-19]
    3bdc:	0da33872 	stceq	8, cr3, [r3, #456]!	; 0x1c8
    3be0:	50060000 	andpl	r0, r6, r0
    3be4:	00189401 	andseq	r9, r8, r1, lsl #8
    3be8:	18943400 	ldmne	r4, {sl, ip, sp}
    3bec:	07000000 	streq	r0, [r0, -r0]
    3bf0:	00001899 	muleq	r0, r9, r8
    3bf4:	01c80406 	biceq	r0, r8, r6, lsl #8
    3bf8:	8c390000 	ldchi	0, cr0, [r9], #-0
    3bfc:	0500000d 	streq	r0, [r0, #-13]
    3c00:	0000cf7d 	andeq	ip, r0, sp, ror pc
    3c04:	10d03600 	sbcsne	r3, r0, r0, lsl #12
    3c08:	71090000 	mrsvc	r0, (UNDEF: 9)
    3c0c:	00009e01 	andeq	r9, r0, r1, lsl #28
    3c10:	0018c000 	andseq	ip, r8, r0
    3c14:	00253400 	eoreq	r3, r5, r0, lsl #8
    3c18:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3c1c:	00001259 	andeq	r1, r0, r9, asr r2
    3c20:	d2017209 	andle	r7, r1, #-1879048192	; 0x90000000
    3c24:	34000018 	strcc	r0, [r0], #-24
    3c28:	0000009e 	muleq	r0, lr, r0
    3c2c:	17393800 	ldrne	r3, [r9, -r0, lsl #16]!
    3c30:	e6070000 	str	r0, [r7], -r0
    3c34:	0018e405 	andseq	lr, r8, r5, lsl #8
    3c38:	18e43400 	stmiane	r4!, {sl, ip, sp}^
    3c3c:	07000000 	streq	r0, [r0, -r0]
    3c40:	000001d3 	ldrdeq	r0, [r0], -r3
    3c44:	0013423a 	andseq	r4, r3, sl, lsr r2
    3c48:	05da0700 	ldrbeq	r0, [sl, #1792]	; 0x700
    3c4c:	000000da 	ldrdeq	r0, [r0], -sl
    3c50:	0013dd37 	andseq	sp, r3, r7, lsr sp
    3c54:	03cf0700 	biceq	r0, pc, #0, 14
    3c58:	00192736 	andseq	r2, r9, r6, lsr r7
    3c5c:	05ce0700 	strbeq	r0, [lr, #1792]	; 0x700
    3c60:	000000da 	ldrdeq	r0, [r0], -sl
    3c64:	00001918 	andeq	r1, r0, r8, lsl r9
    3c68:	00191834 	andseq	r1, r9, r4, lsr r8
    3c6c:	19233400 	stmdbne	r3!, {sl, ip, sp}
    3c70:	07000000 	streq	r0, [r0, -r0]
    3c74:	0000191d 	andeq	r1, r0, sp, lsl r9
    3c78:	02030406 	andeq	r0, r3, #100663296	; 0x6000000
    3c7c:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    3c80:	06000019 			; <UNDEFINED> instruction: 0x06000019
    3c84:	0000f004 	andeq	pc, r0, r4
    3c88:	13253a00 	teqne	r5, #0, 20
    3c8c:	05070000 	streq	r0, [r7, #-0]
    3c90:	0000da04 	andeq	sp, r0, r4, lsl #20
    3c94:	16703800 	ldrbtne	r3, [r0], -r0, lsl #16
    3c98:	85070000 	strhi	r0, [r7, #-0]
    3c9c:	00195105 	andseq	r5, r9, r5, lsl #2
    3ca0:	18943400 	ldmne	r4, {sl, ip, sp}
    3ca4:	51340000 	teqpl	r4, r0
    3ca8:	00000019 	andeq	r0, r0, r9, lsl r0
    3cac:	0000f007 	andeq	pc, r0, r7
    3cb0:	1a2e3800 	bne	b91cb8 <_Min_Stack_Size+0xb918b8>
    3cb4:	c8070000 	stmdagt	r7, {}	; <UNPREDICTABLE>
    3cb8:	00196805 	andseq	r6, r9, r5, lsl #16
    3cbc:	19183400 	ldmdbne	r8, {sl, ip, sp}
    3cc0:	3a000000 	bcc	3cc8 <_Min_Stack_Size+0x38c8>
    3cc4:	00001751 	andeq	r1, r0, r1, asr r7
    3cc8:	d305c307 	movwle	ip, #21255	; 0x5307
    3ccc:	35000001 	strcc	r0, [r0, #-1]
    3cd0:	00001a43 	andeq	r1, r0, r3, asr #20
    3cd4:	493bb405 	ldmdbmi	fp!, {r0, r2, sl, ip, sp, pc}
    3cd8:	0500000e 	streq	r0, [r0, #-14]
    3cdc:	00198c7e 	andseq	r8, r9, lr, ror ip
    3ce0:	00cf3400 	sbceq	r3, pc, r0, lsl #8
    3ce4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3ce8:	000015df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    3cec:	9e05e007 	cdpls	0, 0, cr14, cr5, cr7, {0}
    3cf0:	34000019 	strcc	r0, [r0], #-25
    3cf4:	000018e4 	andeq	r1, r0, r4, ror #17
    3cf8:	19d83c00 	ldmibne	r8, {sl, fp, ip, sp}^
    3cfc:	93070000 	movwls	r0, #28672	; 0x7000
    3d00:	18943405 	ldmne	r4, {r0, r2, sl, ip, sp}
    3d04:	51340000 	teqpl	r4, r0
    3d08:	00000019 	andeq	r0, r0, r9, lsl r0
    3d0c:	0023f700 	eoreq	pc, r3, r0, lsl #14
    3d10:	ab000400 	blge	4d18 <_Min_Stack_Size+0x4918>
    3d14:	0400000c 	streq	r0, [r0], #-12
    3d18:	00028401 	andeq	r8, r2, r1, lsl #8
    3d1c:	1e9d0100 	fmlnee	f0, f5, f0
    3d20:	01010000 	mrseq	r0, (UNDEF: 1)
    3d24:	0a000000 	beq	3d2c <_Min_Stack_Size+0x392c>
    3d28:	00000000 	andeq	r0, r0, r0
    3d2c:	12df0000 	sbcsne	r0, pc, #0
    3d30:	bf020000 	svclt	0x00020000
    3d34:	0200000d 	andeq	r0, r0, #13
    3d38:	000030d4 	ldrdeq	r3, [r0], -r4
    3d3c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    3d40:	0000017d 	andeq	r0, r0, sp, ror r1
    3d44:	69050404 	stmdbvs	r5, {r2, sl}
    3d48:	0300746e 	movweq	r7, #1134	; 0x46e
    3d4c:	01500601 	cmpeq	r0, r1, lsl #12
    3d50:	f2020000 	vhadd.s8	d0, d2, d0
    3d54:	03000000 	movweq	r0, #0
    3d58:	0000501c 	andeq	r5, r0, ip, lsl r0
    3d5c:	08010300 	stmdaeq	r1, {r8, r9}
    3d60:	0000014e 	andeq	r0, r0, lr, asr #2
    3d64:	df050203 	svcle	0x00050203
    3d68:	02000000 	andeq	r0, r0, #0
    3d6c:	0000005c 	andeq	r0, r0, ip, asr r0
    3d70:	00692603 	rsbeq	r2, r9, r3, lsl #12
    3d74:	02030000 	andeq	r0, r3, #0
    3d78:	0001e507 	andeq	lr, r1, r7, lsl #10
    3d7c:	05040300 	streq	r0, [r4, #-768]	; 0x300
    3d80:	000000c5 	andeq	r0, r0, r5, asr #1
    3d84:	00005102 	andeq	r5, r0, r2, lsl #2
    3d88:	82380300 	eorshi	r0, r8, #0, 6
    3d8c:	03000000 	movweq	r0, #0
    3d90:	01780704 	cmneq	r8, r4, lsl #14
    3d94:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    3d98:	0000c005 	andeq	ip, r0, r5
    3d9c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    3da0:	00000173 	andeq	r0, r0, r3, ror r1
    3da4:	2c070403 	cfstrscs	mvf0, [r7], {3}
    3da8:	05000000 	streq	r0, [r0, #-0]
    3dac:	08010304 	stmdaeq	r1, {r2, r8, r9}
    3db0:	00000157 	andeq	r0, r0, r7, asr r1
    3db4:	00ad0406 	adceq	r0, sp, r6, lsl #8
    3db8:	a0070000 	andge	r0, r7, r0
    3dbc:	02000000 	andeq	r0, r0, #0
    3dc0:	000000f4 	strdeq	r0, [r0], -r4
    3dc4:	00452a04 	subeq	r2, r5, r4, lsl #20
    3dc8:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    3dcc:	04000000 	streq	r0, [r0], #-0
    3dd0:	00005e36 	andeq	r5, r0, r6, lsr lr
    3dd4:	00530200 	subseq	r0, r3, r0, lsl #4
    3dd8:	42040000 	andmi	r0, r4, #0
    3ddc:	00000077 	andeq	r0, r0, r7, ror r0
    3de0:	001dc702 	andseq	ip, sp, r2, lsl #14
    3de4:	de490500 	cdple	5, 4, cr0, cr9, cr0, {0}
    3de8:	06000000 	streq	r0, [r0], -r0
    3dec:	0000e404 	andeq	lr, r0, r4, lsl #8
    3df0:	00ef0800 	rsceq	r0, pc, r0, lsl #16
    3df4:	9e090000 	cdpls	0, 0, cr0, cr9, cr0, {0}
    3df8:	00000000 	andeq	r0, r0, r0
    3dfc:	001ae302 	andseq	lr, sl, r2, lsl #6
    3e00:	c85d0600 	ldmdagt	sp, {r9, sl}^
    3e04:	02000000 	andeq	r0, r0, #0
    3e08:	00000fdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3e0c:	00705e06 	rsbseq	r5, r0, r6, lsl #28
    3e10:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    3e14:	0600000f 	streq	r0, [r0], -pc
    3e18:	0000825f 	andeq	r8, r0, pc, asr r2
    3e1c:	0e700200 	cdpeq	2, 7, cr0, cr0, cr0, {0}
    3e20:	65060000 	strvs	r0, [r6, #-0]
    3e24:	000000c8 	andeq	r0, r0, r8, asr #1
    3e28:	000eb10a 	andeq	fp, lr, sl, lsl #2
    3e2c:	88071400 	stmdahi	r7, {sl, ip}
    3e30:	00000164 	andeq	r0, r0, r4, ror #2
    3e34:	000e8d0b 	andeq	r8, lr, fp, lsl #26
    3e38:	108a0700 	addne	r0, sl, r0, lsl #14
    3e3c:	00000001 	andeq	r0, r0, r1
    3e40:	000f890b 	andeq	r8, pc, fp, lsl #18
    3e44:	648b0700 	strvs	r0, [fp], #1792	; 0x700
    3e48:	04000001 	streq	r0, [r0], #-1
    3e4c:	000dc60b 	andeq	ip, sp, fp, lsl #12
    3e50:	648c0700 	strvs	r0, [ip], #1792	; 0x700
    3e54:	08000001 	stmdaeq	r0, {r0}
    3e58:	000e2c0b 	andeq	r2, lr, fp, lsl #24
    3e5c:	9e8d0700 	cdpls	7, 8, cr0, cr13, cr0, {0}
    3e60:	0c000000 	stceq	0, cr0, [r0], {-0}
    3e64:	000f220b 	andeq	r2, pc, fp, lsl #4
    3e68:	9e8e0700 	cdpls	7, 8, cr0, cr14, cr0, {0}
    3e6c:	10000000 	andne	r0, r0, r0
    3e70:	1b040600 	blne	105678 <_Min_Stack_Size+0x105278>
    3e74:	02000001 	andeq	r0, r0, #1
    3e78:	00000e65 	andeq	r0, r0, r5, ror #28
    3e7c:	011b9007 	tsteq	fp, r7
    3e80:	c00a0000 	andgt	r0, sl, r0
    3e84:	0c000010 	stceq	0, cr0, [r0], {16}
    3e88:	01a69207 			; <UNDEFINED> instruction: 0x01a69207
    3e8c:	8d0b0000 	stchi	0, cr0, [fp, #-0]
    3e90:	0700000e 	streq	r0, [r0, -lr]
    3e94:	00011094 	muleq	r1, r4, r0
    3e98:	890b0000 	stmdbhi	fp, {}	; <UNPREDICTABLE>
    3e9c:	0700000f 	streq	r0, [r0, -pc]
    3ea0:	00016495 	muleq	r1, r5, r4
    3ea4:	c60b0400 	strgt	r0, [fp], -r0, lsl #8
    3ea8:	0700000d 	streq	r0, [r0, -sp]
    3eac:	00016496 	muleq	r1, r6, r4
    3eb0:	02000800 	andeq	r0, r0, #0, 16
    3eb4:	00000e61 	andeq	r0, r0, r1, ror #28
    3eb8:	01759807 	cmneq	r5, r7, lsl #16
    3ebc:	870a0000 	strhi	r0, [sl, -r0]
    3ec0:	1400000e 	strne	r0, [r0], #-14
    3ec4:	01e29d07 	mvneq	r9, r7, lsl #26
    3ec8:	180b0000 	stmdane	fp, {}	; <UNPREDICTABLE>
    3ecc:	07000010 	smladeq	r0, r0, r0, r0
    3ed0:	0001059f 	muleq	r1, pc, r5	; <UNPREDICTABLE>
    3ed4:	b80b0000 	stmdalt	fp, {}	; <UNPREDICTABLE>
    3ed8:	07000010 	smladeq	r0, r0, r0, r0
    3edc:	0001e2a0 	andeq	lr, r1, r0, lsr #5
    3ee0:	230b0400 	movwcs	r0, #46080	; 0xb400
    3ee4:	07000014 	smladeq	r0, r4, r0, r0
    3ee8:	0001a6a1 	andeq	sl, r1, r1, lsr #13
    3eec:	06000800 	streq	r0, [r0], -r0, lsl #16
    3ef0:	00016a04 	andeq	r6, r1, r4, lsl #20
    3ef4:	0f750200 	svceq	0x00750200
    3ef8:	a2070000 	andge	r0, r7, #0
    3efc:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    3f00:	00161e02 	andseq	r1, r6, r2, lsl #28
    3f04:	9e630800 	cdpls	8, 6, cr0, cr3, cr0, {0}
    3f08:	0c000000 	stceq	0, cr0, [r0], {-0}
    3f0c:	256d0801 	strbcs	r0, [sp, #-2049]!	; 0x801
    3f10:	0d000002 	stceq	0, cr0, [r0, #-8]
    3f14:	00001fc8 	andeq	r1, r0, r8, asr #31
    3f18:	1d120d00 	ldcne	13, cr0, [r2, #-0]
    3f1c:	0d010000 	stceq	0, cr0, [r1, #-0]
    3f20:	00002038 	andeq	r2, r0, r8, lsr r0
    3f24:	1a810d02 	bne	fe047334 <_estack+0xde017334>
    3f28:	0d030000 	stceq	0, cr0, [r3, #-0]
    3f2c:	00001d6f 	andeq	r1, r0, pc, ror #26
    3f30:	0d020004 	stceq	0, cr0, [r2, #-16]
    3f34:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    3f38:	0001fe73 	andeq	pc, r1, r3, ror lr	; <UNPREDICTABLE>
    3f3c:	15c00a00 	strbne	r0, [r0, #2560]	; 0xa00
    3f40:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    3f44:	00025578 	andeq	r5, r2, r8, ror r5
    3f48:	164b0b00 	strbne	r0, [fp], -r0, lsl #22
    3f4c:	7a080000 	bvc	203f54 <_Min_Stack_Size+0x203b54>
    3f50:	000000fa 	strdeq	r0, [r0], -sl
    3f54:	16a60b00 	strtne	r0, [r6], r0, lsl #22
    3f58:	7b080000 	blvc	203f60 <_Min_Stack_Size+0x203b60>
    3f5c:	00000110 	andeq	r0, r0, r0, lsl r1
    3f60:	01020004 	tsteq	r2, r4
    3f64:	08000015 	stmdaeq	r0, {r0, r2, r4}
    3f68:	0002307c 	andeq	r3, r2, ip, ror r0
    3f6c:	1e3f0a00 	vaddne.f32	s0, s30, s0
    3f70:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    3f74:	00029181 	andeq	r9, r2, r1, lsl #3
    3f78:	1fe20b00 	svcne	0x00e20b00
    3f7c:	83080000 	movwhi	r0, #32768	; 0x8000
    3f80:	0000009e 	muleq	r0, lr, r0
    3f84:	1d8d0b00 	vstrne	d0, [sp]
    3f88:	84080000 	strhi	r0, [r8], #-0
    3f8c:	000000c8 	andeq	r0, r0, r8, asr #1
    3f90:	1b4e0b04 	blne	1386ba8 <_Min_Stack_Size+0x13867a8>
    3f94:	85080000 	strhi	r0, [r8, #-0]
    3f98:	000000c8 	andeq	r0, r0, r8, asr #1
    3f9c:	35020008 	strcc	r0, [r2, #-8]
    3fa0:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    3fa4:	00026086 	andeq	r6, r2, r6, lsl #1
    3fa8:	00a70700 	adceq	r0, r7, r0, lsl #14
    3fac:	04060000 	streq	r0, [r6], #-0
    3fb0:	000000ef 	andeq	r0, r0, pc, ror #1
    3fb4:	001ec90a 	andseq	ip, lr, sl, lsl #18
    3fb8:	98082000 	stmdals	r8, {sp}
    3fbc:	00000314 	andeq	r0, r0, r4, lsl r3
    3fc0:	00219d0b 	eoreq	r9, r1, fp, lsl #26
    3fc4:	f39a0800 	vmlal.u16	q0, d10, d0
    3fc8:	00000001 	andeq	r0, r0, r1
    3fcc:	001a620b 	andseq	r6, sl, fp, lsl #4
    3fd0:	a79b0800 	ldrge	r0, [fp, r0, lsl #16]
    3fd4:	04000000 	streq	r0, [r0], #-0
    3fd8:	001df00b 	andseq	pc, sp, fp
    3fdc:	059c0800 	ldreq	r0, [ip, #2048]	; 0x800
    3fe0:	08000001 	stmdaeq	r0, {r0}
    3fe4:	001eae0b 	andseq	sl, lr, fp, lsl #28
    3fe8:	259d0800 	ldrcs	r0, [sp, #2048]	; 0x800
    3fec:	0c000002 	stceq	0, cr0, [r0], {2}
    3ff0:	001cce0b 	andseq	ip, ip, fp, lsl #28
    3ff4:	059e0800 	ldreq	r0, [lr, #2048]	; 0x800
    3ff8:	10000001 	andne	r0, r0, r1
    3ffc:	001ff00b 	andseq	pc, pc, fp
    4000:	059f0800 	ldreq	r0, [pc, #2048]	; 4808 <_Min_Stack_Size+0x4408>
    4004:	14000001 	strne	r0, [r0], #-1
    4008:	001fd10b 	andseq	sp, pc, fp, lsl #2
    400c:	c8a00800 	stmiagt	r0!, {fp}
    4010:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4014:	0020b00b 	eoreq	fp, r0, fp
    4018:	bda10800 	stclt	8, cr0, [r1]
    401c:	1c000000 	stcne	0, cr0, [r0], {-0}
    4020:	1c390200 	lfmne	f0, 4, [r9], #-0
    4024:	a2080000 	andge	r0, r8, #0
    4028:	000002a7 	andeq	r0, r0, r7, lsr #5
    402c:	001a8c0a 	andseq	r8, sl, sl, lsl #24
    4030:	78014c00 	stmdavc	r1, {sl, fp, lr}
    4034:	00000398 	muleq	r0, r8, r3
    4038:	00212e0b 	eoreq	r2, r1, fp, lsl #28
    403c:	987a0100 	ldmdals	sl!, {r8}^
    4040:	00000003 	andeq	r0, r0, r3
    4044:	000e1b0b 	andeq	r1, lr, fp, lsl #22
    4048:	6a800100 	bvs	fe004450 <_estack+0xddfd4450>
    404c:	04000001 	streq	r0, [r0], #-1
    4050:	00215f0b 	eoreq	r5, r1, fp, lsl #30
    4054:	6a810100 	bvs	fe04445c <_estack+0xde01445c>
    4058:	18000001 	stmdane	r0, {r0}
    405c:	0010ad0b 	andseq	sl, r0, fp, lsl #26
    4060:	05820100 	streq	r0, [r2, #256]	; 0x100
    4064:	2c000001 	stccs	0, cr0, [r0], {1}
    4068:	001f300b 	andseq	r3, pc, fp
    406c:	a1830100 	orrge	r0, r3, r0, lsl #2
    4070:	30000002 	andcc	r0, r0, r2
    4074:	001a620b 	andseq	r6, sl, fp, lsl #4
    4078:	a3840100 	orrge	r0, r4, #0, 2
    407c:	34000003 	strcc	r0, [r0], #-3
    4080:	001b420b 	andseq	r4, fp, fp, lsl #4
    4084:	058f0100 	streq	r0, [pc, #256]	; 418c <_Min_Stack_Size+0x3d8c>
    4088:	40000001 	andmi	r0, r0, r1
    408c:	001def0b 	andseq	lr, sp, fp, lsl #30
    4090:	05900100 	ldreq	r0, [r0, #256]	; 0x100
    4094:	44000001 	strmi	r0, [r0], #-1
    4098:	001ff00b 	andseq	pc, pc, fp
    409c:	05940100 	ldreq	r0, [r4, #256]	; 0x100
    40a0:	48000001 	stmdami	r0, {r0}
    40a4:	9e040600 	cfmadd32ls	mvax0, mvfx0, mvfx4, mvfx0
    40a8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    40ac:	000000ef 	andeq	r0, r0, pc, ror #1
    40b0:	0000a00f 	andeq	sl, r0, pc
    40b4:	0003b300 	andeq	fp, r3, r0, lsl #6
    40b8:	00971000 	addseq	r1, r7, r0
    40bc:	00090000 	andeq	r0, r9, r0
    40c0:	001b9602 	andseq	r9, fp, r2, lsl #12
    40c4:	1faa0100 	svcne	0x00aa0100
    40c8:	02000003 	andeq	r0, r0, #3
    40cc:	00002025 	andeq	r2, r0, r5, lsr #32
    40d0:	03b3ae01 			; <UNDEFINED> instruction: 0x03b3ae01
    40d4:	59110000 	ldmdbpl	r1, {}	; <UNPREDICTABLE>
    40d8:	01000020 	tsteq	r0, r0, lsr #32
    40dc:	00bd0bd2 	ldrsbteq	r0, [sp], r2
    40e0:	f3010000 	vhadd.u8	d0, d1, d0
    40e4:	12000003 	andne	r0, r0, #3
    40e8:	00001b11 	andeq	r1, r0, r1, lsl fp
    40ec:	f30bd201 	vhsub.u8	d13, d11, d1
    40f0:	13000003 	movwne	r0, #3
    40f4:	00001de7 	andeq	r1, r0, r7, ror #27
    40f8:	c80bd401 	stmdagt	fp, {r0, sl, ip, lr, pc}
    40fc:	00000000 	andeq	r0, r0, r0
    4100:	03f90406 	mvnseq	r0, #100663296	; 0x6000000
    4104:	b2070000 	andlt	r0, r7, #0
    4108:	11000000 	mrsne	r0, (UNDEF: 0)
    410c:	00001bdb 	ldrdeq	r1, [r0], -fp
    4110:	050b7d01 	streq	r7, [fp, #-3329]	; 0xd01
    4114:	01000001 	tsteq	r0, r1
    4118:	00000478 	andeq	r0, r0, r8, ror r4
    411c:	001f8f12 	andseq	r8, pc, r2, lsl pc	; <UNPREDICTABLE>
    4120:	0b7d0100 	bleq	1f44528 <_Min_Stack_Size+0x1f44128>
    4124:	00000478 	andeq	r0, r0, r8, ror r4
    4128:	00137c12 	andseq	r7, r3, r2, lsl ip
    412c:	0b7d0100 	bleq	1f44534 <_Min_Stack_Size+0x1f44134>
    4130:	0000047e 	andeq	r0, r0, lr, ror r4
    4134:	001f8812 	andseq	r8, pc, r2, lsl r8	; <UNPREDICTABLE>
    4138:	0b7d0100 	bleq	1f44540 <_Min_Stack_Size+0x1f44140>
    413c:	00000225 	andeq	r0, r0, r5, lsr #4
    4140:	001c1c13 	andseq	r1, ip, r3, lsl ip
    4144:	0b7f0100 	bleq	1fc454c <_Min_Stack_Size+0x1fc414c>
    4148:	00000484 	andeq	r0, r0, r4, lsl #9
    414c:	00204e13 	eoreq	r4, r0, r3, lsl lr
    4150:	0b7f0100 	bleq	1fc4558 <_Min_Stack_Size+0x1fc4158>
    4154:	00000484 	andeq	r0, r0, r4, lsl #9
    4158:	001aa013 	andseq	sl, sl, r3, lsl r0
    415c:	0b800100 	bleq	fe004564 <_estack+0xddfd4564>
    4160:	00000105 	andeq	r0, r0, r5, lsl #2
    4164:	00046914 	andeq	r6, r4, r4, lsl r9
    4168:	0e7b1300 	cdpeq	3, 7, cr1, cr11, cr0, {0}
    416c:	84010000 	strhi	r0, [r1], #-0
    4170:	00048f0b 	andeq	r8, r4, fp, lsl #30
    4174:	13150000 	tstne	r5, #0
    4178:	00000e7b 	andeq	r0, r0, fp, ror lr
    417c:	8f0b8c01 	svchi	0x000b8c01
    4180:	00000004 	andeq	r0, r0, r4
    4184:	14040600 	strne	r0, [r4], #-1536	; 0x600
    4188:	06000003 	streq	r0, [r0], -r3
    418c:	0001e804 	andeq	lr, r1, r4, lsl #16
    4190:	8a040600 	bhi	105998 <_Min_Stack_Size+0x105598>
    4194:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    4198:	000003be 			; <UNDEFINED> instruction: 0x000003be
    419c:	00047e07 	andeq	r7, r4, r7, lsl #28
    41a0:	1d9d1600 	ldcne	6, cr1, [sp]
    41a4:	12010000 	andne	r0, r1, #0
    41a8:	04ae010c 	strteq	r0, [lr], #268	; 0x10c
    41ac:	eb130000 	bl	4c41b4 <_Min_Stack_Size+0x4c3db4>
    41b0:	01000020 	tsteq	r0, r0, lsr #32
    41b4:	04ae0c14 	strteq	r0, [lr], #3092	; 0xc14
    41b8:	06000000 	streq	r0, [r0], -r0
    41bc:	0003be04 	andeq	fp, r3, r4, lsl #28
    41c0:	1ee81100 	cdpne	1, 14, cr1, cr8, cr0, {0}
    41c4:	fc010000 	stc2	0, cr0, [r1], {-0}
    41c8:	0000fa04 	andeq	pc, r0, r4, lsl #20
    41cc:	04ea0100 	strbteq	r0, [sl], #256	; 0x100
    41d0:	a1120000 	tstge	r2, r0
    41d4:	0100001a 	tsteq	r0, sl, lsl r0
    41d8:	04ea04fc 	strbteq	r0, [sl], #1276	; 0x4fc
    41dc:	51130000 	tstpl	r3, r0
    41e0:	01000012 	tsteq	r0, r2, lsl r0
    41e4:	00fa04fe 	ldrshteq	r0, [sl], #78	; 0x4e
    41e8:	eb130000 	bl	4c41f0 <_Min_Stack_Size+0x4c3df0>
    41ec:	01000020 	tsteq	r0, r0, lsr #32
    41f0:	04ef04ff 	strbteq	r0, [pc], #1279	; 41f8 <_Min_Stack_Size+0x3df8>
    41f4:	07000000 	streq	r0, [r0, -r0]
    41f8:	000001f3 	strdeq	r0, [r0], -r3
    41fc:	0004f407 	andeq	pc, r4, r7, lsl #8
    4200:	fa040600 	blx	105a08 <_Min_Stack_Size+0x105608>
    4204:	07000004 	streq	r0, [r0, -r4]
    4208:	000003be 			; <UNDEFINED> instruction: 0x000003be
    420c:	001e2516 	andseq	r2, lr, r6, lsl r5
    4210:	0a830100 	beq	fe0c4618 <_estack+0xde094618>
    4214:	00055301 	andeq	r5, r5, r1, lsl #6
    4218:	20eb1200 	rsccs	r1, fp, r0, lsl #4
    421c:	83010000 	movwhi	r0, #4096	; 0x1000
    4220:	0005530a 	andeq	r5, r5, sl, lsl #6
    4224:	1ca21200 	sfmne	f1, 4, [r2]
    4228:	83010000 	movwhi	r0, #4096	; 0x1000
    422c:	00029c0a 	andeq	r9, r2, sl, lsl #24
    4230:	10ad1200 	adcne	r1, sp, r0, lsl #4
    4234:	83010000 	movwhi	r0, #4096	; 0x1000
    4238:	0001050a 	andeq	r0, r1, sl, lsl #10
    423c:	20881200 	addcs	r1, r8, r0, lsl #4
    4240:	83010000 	movwhi	r0, #4096	; 0x1000
    4244:	0005580a 	andeq	r5, r5, sl, lsl #16
    4248:	1bbb1200 	blne	feec8a50 <_estack+0xdee98a50>
    424c:	83010000 	movwhi	r0, #4096	; 0x1000
    4250:	0005680a 	andeq	r6, r5, sl, lsl #16
    4254:	00781700 	rsbseq	r1, r8, r0, lsl #14
    4258:	050a8501 	streq	r8, [sl, #-1281]	; 0x501
    425c:	00000001 	andeq	r0, r0, r1
    4260:	0004ae07 	andeq	sl, r4, r7, lsl #28
    4264:	055d0700 	ldrbeq	r0, [sp, #-1792]	; 0x700
    4268:	04060000 	streq	r0, [r6], #-0
    426c:	00000563 	andeq	r0, r0, r3, ror #10
    4270:	00029107 	andeq	r9, r2, r7, lsl #2
    4274:	00bd0700 	adcseq	r0, sp, r0, lsl #14
    4278:	91160000 	tstls	r6, r0
    427c:	01000020 	tsteq	r0, r0, lsr #32
    4280:	87010b38 	smladxhi	r1, r8, fp, r0
    4284:	12000005 	andne	r0, r0, #5
    4288:	000010dd 	ldrdeq	r1, [r0], -sp
    428c:	870b3801 	strhi	r3, [fp, -r1, lsl #16]
    4290:	00000005 	andeq	r0, r0, r5
    4294:	00011007 	andeq	r1, r1, r7
    4298:	13dd1800 	bicsne	r1, sp, #0, 16
    429c:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    42a0:	2b160105 	blcs	5846bc <_Min_Stack_Size+0x5842bc>
    42a4:	01000020 	tsteq	r0, r0, lsr #32
    42a8:	af010c02 	svcge	0x00010c02
    42ac:	12000005 	andne	r0, r0, #5
    42b0:	000020eb 	andeq	r2, r0, fp, ror #1
    42b4:	ae0c0201 	cdpge	2, 0, cr0, cr12, cr1, {0}
    42b8:	00000004 	andeq	r0, r0, r4
    42bc:	001a2e19 	andseq	r2, sl, r9, lsl lr
    42c0:	09800100 	stmibeq	r0, {r8}
    42c4:	0005c901 	andeq	ip, r5, r1, lsl #18
    42c8:	1ddd1200 	lfmne	f1, 2, [sp]
    42cc:	80010000 	andhi	r0, r1, r0
    42d0:	0005c909 	andeq	ip, r5, r9, lsl #18
    42d4:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
    42d8:	06000005 	streq	r0, [r0], -r5
    42dc:	00025504 	andeq	r5, r2, r4, lsl #10
    42e0:	21471a00 	cmpcs	r7, r0, lsl #20
    42e4:	ef010000 	svc	0x00010000
    42e8:	0019200a 	andseq	r2, r9, sl
    42ec:	00006e08 	andeq	r6, r0, r8, lsl #28
    42f0:	7d9c0100 	ldfvcs	f0, [ip]
    42f4:	1b000006 	blne	4314 <_Min_Stack_Size+0x3f14>
    42f8:	000010ad 	andeq	r1, r0, sp, lsr #1
    42fc:	050af101 	streq	pc, [sl, #-257]	; 0x101
    4300:	da000001 	ble	430c <_Min_Stack_Size+0x3f0c>
    4304:	1c000027 	stcne	0, cr0, [r0], {39}	; 0x27
    4308:	08001934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip}
    430c:	000022d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    4310:	00000613 	andeq	r0, r0, r3, lsl r6
    4314:	0750011d 	smmlaeq	r0, sp, r1, r0
    4318:	00740075 	rsbseq	r0, r4, r5, ror r0
    431c:	001c4422 	andseq	r4, ip, r2, lsr #8
    4320:	00194e1c 	andseq	r4, r9, ip, lsl lr
    4324:	0022d208 	eoreq	sp, r2, r8, lsl #4
    4328:	00062700 	andeq	r2, r6, r0, lsl #14
    432c:	50011d00 	andpl	r1, r1, r0, lsl #26
    4330:	00007502 	andeq	r7, r0, r2, lsl #10
    4334:	0019541c 	andseq	r5, r9, ip, lsl r4
    4338:	0022d208 	eoreq	sp, r2, r8, lsl #4
    433c:	00063b00 	andeq	r3, r6, r0, lsl #22
    4340:	50011d00 	andpl	r1, r1, r0, lsl #26
    4344:	00007402 	andeq	r7, r0, r2, lsl #8
    4348:	0019601c 	andseq	r6, r9, ip, lsl r0
    434c:	0022d208 	eoreq	sp, r2, r8, lsl #4
    4350:	00065200 	andeq	r5, r6, r0, lsl #4
    4354:	50011d00 	andpl	r1, r1, r0, lsl #26
    4358:	01800305 	orreq	r0, r0, r5, lsl #6
    435c:	1c002000 	stcne	0, cr2, [r0], {-0}
    4360:	0800196c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, ip}
    4364:	000022d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    4368:	00000669 	andeq	r0, r0, r9, ror #12
    436c:	0550011d 	ldrbeq	r0, [r0, #-285]	; 0x11d
    4370:	0000fc03 	andeq	pc, r0, r3, lsl #24
    4374:	781e0020 	ldmdavc	lr, {r5}
    4378:	d2080019 	andle	r0, r8, #25
    437c:	1d000022 	stcne	0, cr0, [r0, #-136]	; 0xffffff78
    4380:	03055001 	movweq	r5, #20481	; 0x5001
    4384:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    4388:	5a1f0000 	bpl	7c4390 <_Min_Stack_Size+0x7c3f90>
    438c:	0100001e 	tsteq	r0, lr, lsl r0
    4390:	00fa0203 	rscseq	r0, sl, r3, lsl #4
    4394:	15010000 	strne	r0, [r1, #-0]
    4398:	12000007 	andne	r0, r0, #7
    439c:	00001d2a 	andeq	r1, r0, sl, lsr #26
    43a0:	d3020301 	movwle	r0, #8961	; 0x2301
    43a4:	12000000 	andne	r0, r0, #0
    43a8:	00001ca2 	andeq	r1, r0, r2, lsr #25
    43ac:	9c020301 	stcls	3, cr0, [r2], {1}
    43b0:	12000002 	andne	r0, r0, #2
    43b4:	00001bbb 			; <UNDEFINED> instruction: 0x00001bbb
    43b8:	68020301 	stmdavs	r2, {r0, r8, r9}
    43bc:	12000005 	andne	r0, r0, #5
    43c0:	00001ebc 			; <UNDEFINED> instruction: 0x00001ebc
    43c4:	15020301 	strne	r0, [r2, #-769]	; 0x301
    43c8:	12000007 	andne	r0, r0, #7
    43cc:	000010ad 	andeq	r1, r0, sp, lsr #1
    43d0:	05020301 	streq	r0, [r2, #-769]	; 0x301
    43d4:	12000001 	andne	r0, r0, #1
    43d8:	0000216e 	andeq	r2, r0, lr, ror #2
    43dc:	1a020301 	bne	84fe8 <_Min_Stack_Size+0x84be8>
    43e0:	12000007 	andne	r0, r0, #7
    43e4:	00002106 	andeq	r2, r0, r6, lsl #2
    43e8:	25020301 	strcs	r0, [r2, #-769]	; 0x301
    43ec:	12000007 	andne	r0, r0, #7
    43f0:	00002088 	andeq	r2, r0, r8, lsl #1
    43f4:	58020301 	stmdapl	r2, {r0, r8, r9}
    43f8:	13000005 	movwne	r0, #5
    43fc:	00001251 	andeq	r1, r0, r1, asr r2
    4400:	fa020501 	blx	8580c <_Min_Stack_Size+0x8540c>
    4404:	13000000 	movwne	r0, #0
    4408:	00001d19 	andeq	r1, r0, r9, lsl sp
    440c:	ae020601 	cfmadd32ge	mvax0, mvfx0, mvfx2, mvfx1
    4410:	15000004 	strne	r0, [r0, #-4]
    4414:	00212e13 	eoreq	r2, r1, r3, lsl lr
    4418:	02110100 	andseq	r0, r1, #0, 2
    441c:	000002a1 	andeq	r0, r0, r1, lsr #5
    4420:	9e070000 	cdpls	0, 0, cr0, cr7, cr0, {0}
    4424:	07000000 	streq	r0, [r0, -r0]
    4428:	0000071f 	andeq	r0, r0, pc, lsl r7
    442c:	01f30406 	mvnseq	r0, r6, lsl #8
    4430:	a1070000 	mrsge	r0, (UNDEF: 7)
    4434:	11000002 	tstne	r0, r2
    4438:	00001b5b 	andeq	r1, r0, fp, asr fp
    443c:	ae0b5601 	cfmadd32ge	mvax0, mvfx5, mvfx11, mvfx1
    4440:	01000004 	tsteq	r0, r4
    4444:	00000760 	andeq	r0, r0, r0, ror #14
    4448:	001bbb12 	andseq	fp, fp, r2, lsl fp
    444c:	0b560100 	bleq	1584854 <_Min_Stack_Size+0x1584454>
    4450:	00000568 	andeq	r0, r0, r8, ror #10
    4454:	00210612 	eoreq	r0, r1, r2, lsl r6
    4458:	0b560100 	bleq	1584860 <_Min_Stack_Size+0x1584460>
    445c:	00000725 	andeq	r0, r0, r5, lsr #14
    4460:	001d1913 	andseq	r1, sp, r3, lsl r9
    4464:	0b580100 	bleq	160486c <_Min_Stack_Size+0x160446c>
    4468:	000004ae 	andeq	r0, r0, lr, lsr #9
    446c:	067d2000 	ldrbteq	r2, [sp], -r0
    4470:	19900000 	ldmibne	r0, {}	; <UNPREDICTABLE>
    4474:	01ba0800 			; <UNDEFINED> instruction: 0x01ba0800
    4478:	9c010000 	stcls	0, cr0, [r1], {-0}
    447c:	00000946 	andeq	r0, r0, r6, asr #18
    4480:	00068e21 	andeq	r8, r6, r1, lsr #28
    4484:	0027ee00 	eoreq	lr, r7, r0, lsl #28
    4488:	069a2100 	ldreq	r2, [sl], r0, lsl #2
    448c:	285f0000 	ldmdacs	pc, {}^	; <UNPREDICTABLE>
    4490:	a6210000 	strtge	r0, [r1], -r0
    4494:	e9000006 	stmdb	r0, {r1, r2}
    4498:	21000028 	tstcs	r0, r8, lsr #32
    449c:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
    44a0:	0000293c 	andeq	r2, r0, ip, lsr r9
    44a4:	0006be21 	andeq	fp, r6, r1, lsr #28
    44a8:	00298600 	eoreq	r8, r9, r0, lsl #12
    44ac:	06ca2100 	strbeq	r2, [sl], r0, lsl #2
    44b0:	29b20000 	ldmibcs	r2!, {}	; <UNPREDICTABLE>
    44b4:	d6210000 	strtle	r0, [r1], -r0
    44b8:	de000006 	cdple	0, 0, cr0, cr0, cr6, {0}
    44bc:	21000029 	tstcs	r0, r9, lsr #32
    44c0:	000006e2 	andeq	r0, r0, r2, ror #13
    44c4:	00002a0a 	andeq	r2, r0, sl, lsl #20
    44c8:	0006ee22 	andeq	lr, r6, r2, lsr #28
    44cc:	002a3600 	eoreq	r3, sl, r0, lsl #12
    44d0:	06fa2300 	ldrbteq	r2, [sl], r0, lsl #6
    44d4:	54010000 	strpl	r0, [r1], #-0
    44d8:	00072a24 	andeq	r2, r7, r4, lsr #20
    44dc:	0019b200 	andseq	fp, r9, r0, lsl #4
    44e0:	00043008 	andeq	r3, r4, r8
    44e4:	020d0100 	andeq	r0, sp, #0, 2
    44e8:	00000853 	andeq	r0, r0, r3, asr r8
    44ec:	00074721 	andeq	r4, r7, r1, lsr #14
    44f0:	002a6300 	eoreq	r6, sl, r0, lsl #6
    44f4:	073b2100 	ldreq	r2, [fp, -r0, lsl #2]!
    44f8:	2aa50000 	bcs	fe944500 <_estack+0xde914500>
    44fc:	30250000 	eorcc	r0, r5, r0
    4500:	22000004 	andcs	r0, r0, #4
    4504:	00000753 	andeq	r0, r0, r3, asr r7
    4508:	00002adb 	ldrdeq	r2, [r0], -fp
    450c:	0019b81c 	andseq	fp, r9, ip, lsl r8
    4510:	0022e408 	eoreq	lr, r2, r8, lsl #8
    4514:	00081300 	andeq	r1, r8, r0, lsl #6
    4518:	50011d00 	andpl	r1, r1, r0, lsl #26
    451c:	004c0802 	subeq	r0, ip, r2, lsl #16
    4520:	0019da1c 	andseq	sp, r9, ip, lsl sl
    4524:	0022fa08 	eoreq	pc, r2, r8, lsl #20
    4528:	00082d00 	andeq	r2, r8, r0, lsl #26
    452c:	52011d00 	andpl	r1, r1, #0, 26
    4530:	1d007b02 	vstrne	d7, [r0, #-8]
    4534:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    4538:	341c00a5 	ldrcc	r0, [ip], #-165	; 0xa5
    453c:	e408001b 	str	r0, [r8], #-27
    4540:	41000022 	tstmi	r0, r2, lsr #32
    4544:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    4548:	7b025001 	blvc	98554 <_Min_Stack_Size+0x98154>
    454c:	421e0000 	andsmi	r0, lr, #0
    4550:	1908001b 	stmdbne	r8, {r0, r1, r3, r4}
    4554:	1d000023 	stcne	0, cr0, [r0, #-140]	; 0xffffff74
    4558:	74025001 	strvc	r5, [r2], #-1
    455c:	00000000 	andeq	r0, r0, r0
    4560:	00044826 	andeq	r4, r4, r6, lsr #16
    4564:	00092a00 	andeq	r2, r9, r0, lsl #20
    4568:	07072200 	streq	r2, [r7, -r0, lsl #4]
    456c:	2b260000 	blcs	984574 <_Min_Stack_Size+0x984174>
    4570:	ff240000 			; <UNDEFINED> instruction: 0xff240000
    4574:	da000004 	ble	458c <_Min_Stack_Size+0x418c>
    4578:	70080019 	andvc	r0, r8, r9, lsl r0
    457c:	01000004 	tsteq	r0, r4
    4580:	08da023c 	ldmeq	sl, {r2, r3, r4, r5, r9}^
    4584:	30210000 	eorcc	r0, r1, r0
    4588:	81000005 	tsthi	r0, r5
    458c:	2100002b 	tstcs	r0, fp, lsr #32
    4590:	0000053c 	andeq	r0, r0, ip, lsr r5
    4594:	00002ba1 	andeq	r2, r0, r1, lsr #23
    4598:	00052421 	andeq	r2, r5, r1, lsr #8
    459c:	002bc500 	eoreq	ip, fp, r0, lsl #10
    45a0:	05182100 	ldreq	r2, [r8, #-256]	; 0x100
    45a4:	2be30000 	blcs	ff8c45ac <_estack+0xdf8945ac>
    45a8:	0c210000 	stceq	0, cr0, [r1], #-0
    45ac:	2b000005 	blcs	45c8 <_Min_Stack_Size+0x41c8>
    45b0:	2500002c 	strcs	r0, [r0, #-44]	; 0x2c
    45b4:	00000470 	andeq	r0, r0, r0, ror r4
    45b8:	00054822 	andeq	r4, r5, r2, lsr #16
    45bc:	002c4900 	eoreq	r4, ip, r0, lsl #18
    45c0:	1a561c00 	bne	158b5c8 <_Min_Stack_Size+0x158b1c8>
    45c4:	232b0800 	teqcs	fp, #0, 16
    45c8:	08c80000 	stmiaeq	r8, {}^	; <UNPREDICTABLE>
    45cc:	011d0000 	tsteq	sp, r0
    45d0:	00780250 	rsbseq	r0, r8, r0, asr r2
    45d4:	1a5e1e00 	bne	178bddc <_Min_Stack_Size+0x178b9dc>
    45d8:	232b0800 	teqcs	fp, #0, 16
    45dc:	011d0000 	tsteq	sp, r0
    45e0:	18740250 	ldmdane	r4!, {r4, r6, r9}^
    45e4:	1c000000 	stcne	0, cr0, [r0], {-0}
    45e8:	08001a72 	stmdaeq	r0, {r1, r4, r5, r6, r9, fp, ip}
    45ec:	00002342 	andeq	r2, r0, r2, asr #6
    45f0:	000008fa 	strdeq	r0, [r0], -sl
    45f4:	0252011d 	subseq	r0, r2, #1073741831	; 0x40000007
    45f8:	011d007a 	tsteq	sp, sl, ror r0
    45fc:	00760251 	rsbseq	r0, r6, r1, asr r2
    4600:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    4604:	2700007b 	smlsdxcs	r0, fp, r0, r0
    4608:	08001a82 	stmdaeq	r0, {r1, r7, r9, fp, ip}
    460c:	00002362 	andeq	r2, r0, r2, ror #6
    4610:	001aee1c 	andseq	lr, sl, ip, lsl lr
    4614:	00236908 	eoreq	r6, r3, r8, lsl #18
    4618:	00091700 	andeq	r1, r9, r0, lsl #14
    461c:	51011d00 	tstpl	r1, r0, lsl #26
    4620:	00007802 	andeq	r7, r0, r2, lsl #16
    4624:	001af227 	andseq	pc, sl, r7, lsr #4
    4628:	00238008 	eoreq	r8, r3, r8
    462c:	1b242700 	blne	90e234 <_Min_Stack_Size+0x90de34>
    4630:	05d40800 	ldrbeq	r0, [r4, #2048]	; 0x800
    4634:	27000000 	strcs	r0, [r0, -r0]
    4638:	080019b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, ip}
    463c:	00002387 	andeq	r2, r0, r7, lsl #7
    4640:	001b0827 	andseq	r0, fp, r7, lsr #16
    4644:	00238708 	eoreq	r8, r3, r8, lsl #14
    4648:	1b0e2700 	blne	38e250 <_Min_Stack_Size+0x38de50>
    464c:	23920800 	orrscs	r0, r2, #0, 16
    4650:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4654:	00001e4e 	andeq	r1, r0, lr, asr #28
    4658:	4c02b701 	stcmi	7, cr11, [r2], {1}
    465c:	c008001b 	andgt	r0, r8, fp, lsl r0
    4660:	01000000 	mrseq	r0, (UNDEF: 0)
    4664:	000a1d9c 	muleq	sl, ip, sp
    4668:	1f382900 	svcne	0x00382900
    466c:	b7010000 	strlt	r0, [r1, -r0]
    4670:	0001f302 	andeq	pc, r1, r2, lsl #6
    4674:	002cbd00 	eoreq	fp, ip, r0, lsl #26
    4678:	20eb1b00 	rsccs	r1, fp, r0, lsl #22
    467c:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    4680:	0004ae02 	andeq	sl, r4, r2, lsl #28
    4684:	002ce600 	eoreq	lr, ip, r0, lsl #12
    4688:	04942a00 	ldreq	r2, [r4], #2560	; 0xa00
    468c:	1bb40000 	blne	fed04694 <_estack+0xdecd4694>
    4690:	00320800 	eorseq	r0, r2, r0, lsl #16
    4694:	fb010000 	blx	4469e <_Min_Stack_Size+0x4429e>
    4698:	0009b302 	andeq	fp, r9, r2, lsl #6
    469c:	1bb42b00 	blne	fed0f2a4 <_estack+0xdecdf2a4>
    46a0:	00320800 	eorseq	r0, r2, r0, lsl #16
    46a4:	a12c0000 	teqge	ip, r0
    46a8:	2b000004 	blcs	46c0 <_Min_Stack_Size+0x42c0>
    46ac:	08001bd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, fp, ip}
    46b0:	00000014 	andeq	r0, r0, r4, lsl r0
    46b4:	0004a122 	andeq	sl, r4, r2, lsr #2
    46b8:	002cf900 	eoreq	pc, ip, r0, lsl #18
    46bc:	00000000 	andeq	r0, r0, r0
    46c0:	001b5427 	andseq	r5, fp, r7, lsr #8
    46c4:	00236208 	eoreq	r6, r3, r8, lsl #4
    46c8:	1b601c00 	blne	180b6d0 <_Min_Stack_Size+0x180b2d0>
    46cc:	23990800 	orrscs	r0, r9, #0, 16
    46d0:	09d00000 	ldmibeq	r0, {}^	; <UNPREDICTABLE>
    46d4:	011d0000 	tsteq	sp, r0
    46d8:	00750250 	rsbseq	r0, r5, r0, asr r2
    46dc:	1b6c1c00 	blne	1b0b6e4 <_Min_Stack_Size+0x1b0b2e4>
    46e0:	23990800 	orrscs	r0, r9, #0, 16
    46e4:	09e40000 	stmibeq	r4!, {}^	; <UNPREDICTABLE>
    46e8:	011d0000 	tsteq	sp, r0
    46ec:	18740250 	ldmdane	r4!, {r4, r6, r9}^
    46f0:	1b7a1c00 	blne	1e8b6f8 <_Min_Stack_Size+0x1e8b2f8>
    46f4:	23690800 	cmncs	r9, #0, 16
    46f8:	0a010000 	beq	44700 <_Min_Stack_Size+0x44300>
    46fc:	011d0000 	tsteq	sp, r0
    4700:	00750251 	rsbseq	r0, r5, r1, asr r2
    4704:	0550011d 	ldrbeq	r0, [r0, #-285]	; 0x11d
    4708:	0000fc03 	andeq	pc, r0, r3, lsl #24
    470c:	9a270020 	bls	9c4794 <_Min_Stack_Size+0x9c4394>
    4710:	8008001b 	andhi	r0, r8, fp, lsl r0
    4714:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    4718:	08001bf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, fp, ip}
    471c:	00002387 	andeq	r2, r0, r7, lsl #7
    4720:	001c002d 	andseq	r0, ip, sp, lsr #32
    4724:	00239208 	eoreq	r9, r3, r8, lsl #4
    4728:	802e0000 	eorhi	r0, lr, r0
    472c:	0100001c 	tsteq	r0, ip, lsl r0
    4730:	010503ed 	smlatteq	r5, sp, r3, r0
    4734:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    4738:	00280800 	eoreq	r0, r8, r0, lsl #16
    473c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4740:	00000a83 	andeq	r0, r0, r3, lsl #21
    4744:	001aa129 	andseq	sl, sl, r9, lsr #2
    4748:	03ed0100 	mvneq	r0, #0, 2
    474c:	000001f3 	strdeq	r0, [r0], -r3
    4750:	00002d27 	andeq	r2, r0, r7, lsr #26
    4754:	0020eb1b 	eoreq	lr, r0, fp, lsl fp
    4758:	03ef0100 	mvneq	r0, #0, 2
    475c:	000004ae 	andeq	r0, r0, lr, lsr #9
    4760:	00002d5e 	andeq	r2, r0, lr, asr sp
    4764:	0012501b 	andseq	r5, r2, fp, lsl r0
    4768:	03f00100 	mvnseq	r0, #0, 2
    476c:	00000105 	andeq	r0, r0, r5, lsl #2
    4770:	00002d8a 	andeq	r2, r0, sl, lsl #27
    4774:	001c1427 	andseq	r1, ip, r7, lsr #8
    4778:	00236208 	eoreq	r6, r3, r8, lsl #4
    477c:	1c1c2700 	ldcne	7, cr2, [ip], {-0}
    4780:	23800800 	orrcs	r0, r0, #0, 16
    4784:	30270000 	eorcc	r0, r7, r0
    4788:	8008001c 	andhi	r0, r8, ip, lsl r0
    478c:	00000023 	andeq	r0, r0, r3, lsr #32
    4790:	001dfc28 	andseq	pc, sp, r8, lsr #24
    4794:	04030100 	streq	r0, [r3], #-256	; 0x100
    4798:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
    479c:	000000c0 	andeq	r0, r0, r0, asr #1
    47a0:	0b4b9c01 	bleq	12eb7ac <_Min_Stack_Size+0x12eb3ac>
    47a4:	a1290000 	teqge	r9, r0
    47a8:	0100001a 	tsteq	r0, sl, lsl r0
    47ac:	01f30403 	mvnseq	r0, r3, lsl #8
    47b0:	2da80000 	stccs	0, cr0, [r8]
    47b4:	b9290000 	stmdblt	r9!, {}	; <UNPREDICTABLE>
    47b8:	0100001d 	tsteq	r0, sp, lsl r0
    47bc:	01050403 	tsteq	r5, r3, lsl #8
    47c0:	2ddc0000 	ldclcs	0, cr0, [ip]
    47c4:	eb1b0000 	bl	6c47cc <_Min_Stack_Size+0x6c43cc>
    47c8:	01000020 	tsteq	r0, r0, lsr #32
    47cc:	04ae0405 	strteq	r0, [lr], #1029	; 0x405
    47d0:	2e5f0000 	cdpcs	0, 5, cr0, cr15, cr0, {0}
    47d4:	a51b0000 	ldrge	r0, [fp, #-0]
    47d8:	01000021 	tsteq	r0, r1, lsr #32
    47dc:	01050406 	tsteq	r5, r6, lsl #8
    47e0:	2e930000 	cdpcs	0, 9, cr0, cr3, cr0, {0}
    47e4:	0f1b0000 	svceq	0x001b0000
    47e8:	01000020 	tsteq	r0, r0, lsr #32
    47ec:	01050406 	tsteq	r5, r6, lsl #8
    47f0:	2eb10000 	cdpcs	0, 11, cr0, cr1, cr0, {0}
    47f4:	9d1b0000 	ldcls	0, cr0, [fp, #-0]
    47f8:	0100001b 	tsteq	r0, fp, lsl r0
    47fc:	00fa0407 	rscseq	r0, sl, r7, lsl #8
    4800:	2ec40000 	cdpcs	0, 12, cr0, cr4, cr0, {0}
    4804:	42270000 	eormi	r0, r7, #0
    4808:	6208001c 	andvs	r0, r8, #28
    480c:	2d000023 	stccs	0, cr0, [r0, #-140]	; 0xffffff74
    4810:	08001ca2 	stmdaeq	r0, {r1, r5, r7, sl, fp, ip}
    4814:	00002380 	andeq	r2, r0, r0, lsl #7
    4818:	001cb027 	andseq	fp, ip, r7, lsr #32
    481c:	00238708 	eoreq	r8, r3, r8, lsl #14
    4820:	1cc22700 	stclne	7, cr2, [r2], {0}
    4824:	23920800 	orrscs	r0, r2, #0, 16
    4828:	ca2d0000 	bgt	b44830 <_Min_Stack_Size+0xb44430>
    482c:	8008001c 	andhi	r0, r8, ip, lsl r0
    4830:	1c000023 	stcne	0, cr0, [r0], {35}	; 0x23
    4834:	08001cd2 	stmdaeq	r0, {r1, r4, r6, r7, sl, fp, ip}
    4838:	00002399 	muleq	r0, r9, r3
    483c:	00000b3a 	andeq	r0, r0, sl, lsr fp
    4840:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    4844:	1e000077 	mcrne	0, 0, r0, cr0, cr7, {3}
    4848:	08001cf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, fp, ip}
    484c:	00002369 	andeq	r2, r0, r9, ror #6
    4850:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    4854:	00000077 	andeq	r0, r0, r7, ror r0
    4858:	001e6d19 	andseq	r6, lr, r9, lsl sp
    485c:	08390100 	ldmdaeq	r9!, {r8}
    4860:	000b6701 	andeq	r6, fp, r1, lsl #14
    4864:	7b131500 	blvc	4c9c6c <_Min_Stack_Size+0x4c986c>
    4868:	0100000e 	tsteq	r0, lr
    486c:	048f0864 	streq	r0, [pc], #2148	; 4874 <_Min_Stack_Size+0x4474>
    4870:	00000000 	andeq	r0, r0, r0
    4874:	00204128 	eoreq	r4, r0, r8, lsr #2
    4878:	04a70100 	strteq	r0, [r7], #256	; 0x100
    487c:	08001cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip}
    4880:	00000152 	andeq	r0, r0, r2, asr r1
    4884:	0c709c01 	ldcleq	12, cr9, [r0], #-4
    4888:	46290000 	strtmi	r0, [r9], -r0
    488c:	0100001f 	tsteq	r0, pc, lsl r0
    4890:	01f304a7 	mvnseq	r0, r7, lsr #9
    4894:	2f050000 	svccs	0x00050000
    4898:	eb1b0000 	bl	6c48a0 <_Min_Stack_Size+0x6c44a0>
    489c:	01000020 	tsteq	r0, r0, lsr #32
    48a0:	04ae04a9 	strteq	r0, [lr], #1193	; 0x4a9
    48a4:	2f2e0000 	svccs	0x002e0000
    48a8:	942a0000 	strtls	r0, [sl], #-0
    48ac:	4c000004 	stcmi	0, cr0, [r0], {4}
    48b0:	3208001d 	andcc	r0, r8, #29
    48b4:	01000000 	mrseq	r0, (UNDEF: 0)
    48b8:	0bd404ee 	bleq	ff505c78 <_estack+0xdf4d5c78>
    48bc:	4c2b0000 	stcmi	0, cr0, [fp], #-0
    48c0:	3208001d 	andcc	r0, r8, #29
    48c4:	2c000000 	stccs	0, cr0, [r0], {-0}
    48c8:	000004a1 	andeq	r0, r0, r1, lsr #9
    48cc:	001d6a2b 	andseq	r6, sp, fp, lsr #20
    48d0:	00001408 	andeq	r1, r0, r8, lsl #8
    48d4:	04a12200 	strteq	r2, [r1], #512	; 0x200
    48d8:	2f570000 	svccs	0x00570000
    48dc:	00000000 	andeq	r0, r0, r0
    48e0:	0b4b2a00 	bleq	12cf0e8 <_Min_Stack_Size+0x12cece8>
    48e4:	1dbc0000 	ldcne	0, cr0, [ip]
    48e8:	008a0800 	addeq	r0, sl, r0, lsl #16
    48ec:	e3010000 	movw	r0, #4096	; 0x1000
    48f0:	000c0904 	andeq	r0, ip, r4, lsl #18
    48f4:	1e102f00 	cdpne	15, 1, cr2, cr0, cr0, {0}
    48f8:	00220800 	eoreq	r0, r2, r0, lsl #16
    48fc:	0bff0000 	bleq	fffc4904 <_estack+0xdff94904>
    4900:	59220000 	stmdbpl	r2!, {}	; <UNPREDICTABLE>
    4904:	8500000b 	strhi	r0, [r0, #-11]
    4908:	0000002f 	andeq	r0, r0, pc, lsr #32
    490c:	001e4427 	andseq	r4, lr, r7, lsr #8
    4910:	00238708 	eoreq	r8, r3, r8, lsl #14
    4914:	00270000 	eoreq	r0, r7, r0
    4918:	6208001d 	andvs	r0, r8, #29
    491c:	1c000023 	stcne	0, cr0, [r0], {35}	; 0x23
    4920:	08001d10 	stmdaeq	r0, {r4, r8, sl, fp, ip}
    4924:	00002399 	muleq	r0, r9, r3
    4928:	00000c26 	andeq	r0, r0, r6, lsr #24
    492c:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    4930:	1c000077 	stcne	0, cr0, [r0], {119}	; 0x77
    4934:	08001d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp, ip}
    4938:	00002399 	muleq	r0, r9, r3
    493c:	00000c3a 	andeq	r0, r0, sl, lsr ip
    4940:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    4944:	1c001874 	stcne	8, cr1, [r0], {116}	; 0x74
    4948:	08001d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, ip}
    494c:	00002369 	andeq	r2, r0, r9, ror #6
    4950:	00000c54 	andeq	r0, r0, r4, asr ip
    4954:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    4958:	011d0077 	tsteq	sp, r7, ror r0
    495c:	00760250 	rsbseq	r0, r6, r0, asr r2
    4960:	1d302700 	ldcne	7, cr2, [r0, #-0]
    4964:	23800800 	orrcs	r0, r0, #0, 16
    4968:	9a270000 	bls	9c4970 <_Min_Stack_Size+0x9c4570>
    496c:	8708001d 	smladhi	r8, sp, r0, r0
    4970:	2d000023 	stccs	0, cr0, [r0, #-140]	; 0xffffff74
    4974:	08001dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, ip}
    4978:	00002392 	muleq	r0, r2, r3
    497c:	213b2800 	teqcs	fp, r0, lsl #16
    4980:	2a010000 	bcs	44988 <_Min_Stack_Size+0x44588>
    4984:	001e4805 	andseq	r4, lr, r5, lsl #16
    4988:	00008808 	andeq	r8, r0, r8, lsl #16
    498c:	529c0100 	addspl	r0, ip, #0, 2
    4990:	2900000d 	stmdbcs	r0, {r0, r2, r3}
    4994:	00001b72 	andeq	r1, r0, r2, ror fp
    4998:	f3052a01 	vpmax.u8	d2, d5, d1
    499c:	98000001 	stmdals	r0, {r0}
    49a0:	1b00002f 	blne	4a64 <_Min_Stack_Size+0x4664>
    49a4:	000020eb 	andeq	r2, r0, fp, ror #1
    49a8:	53052c01 	movwpl	r2, #23553	; 0x5c01
    49ac:	98000005 	stmdals	r0, {r0, r2}
    49b0:	2400002f 	strcs	r0, [r0], #-47	; 0x2f
    49b4:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    49b8:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
    49bc:	000004a0 	andeq	r0, r0, r0, lsr #9
    49c0:	05053701 	streq	r3, [r5, #-1793]	; 0x701
    49c4:	2100000d 	tstcs	r0, sp
    49c8:	000004c5 	andeq	r0, r0, r5, asr #9
    49cc:	00002fda 	ldrdeq	r2, [r0], -sl
    49d0:	0004a025 	andeq	sl, r4, r5, lsr #32
    49d4:	04d12200 	ldrbeq	r2, [r1], #512	; 0x200
    49d8:	30060000 	andcc	r0, r6, r0
    49dc:	dd220000 	stcle	0, cr0, [r2, #-0]
    49e0:	da000004 	ble	49f8 <_Min_Stack_Size+0x45f8>
    49e4:	2b00002f 	blcs	4aa8 <_Min_Stack_Size+0x46a8>
    49e8:	08001e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip}
    49ec:	0000000e 	andeq	r0, r0, lr
    49f0:	0004c530 	andeq	ip, r4, r0, lsr r5
    49f4:	2b540100 	blcs	1504dfc <_Min_Stack_Size+0x15049fc>
    49f8:	08001e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip}
    49fc:	0000000e 	andeq	r0, r0, lr
    4a00:	0004d122 	andeq	sp, r4, r2, lsr #2
    4a04:	00303800 	eorseq	r3, r0, r0, lsl #16
    4a08:	04dd2c00 	ldrbeq	r2, [sp], #3072	; 0xc00
    4a0c:	00000000 	andeq	r0, r0, r0
    4a10:	60270000 	eorvs	r0, r7, r0
    4a14:	6208001e 	andvs	r0, r8, #30
    4a18:	2d000023 	stccs	0, cr0, [r0, #-140]	; 0xffffff74
    4a1c:	08001e76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, sl, fp, ip}
    4a20:	00002380 	andeq	r2, r0, r0, lsl #7
    4a24:	001e7c27 	andseq	r7, lr, r7, lsr #24
    4a28:	00238708 	eoreq	r8, r3, r8, lsl #14
    4a2c:	1e981c00 	cdpne	12, 9, cr1, cr8, cr0, {0}
    4a30:	23990800 	orrscs	r0, r9, #0, 16
    4a34:	0d340000 	ldceq	0, cr0, [r4, #-0]
    4a38:	011d0000 	tsteq	sp, r0
    4a3c:	00760250 	rsbseq	r0, r6, r0, asr r2
    4a40:	1ec01c00 	cdpne	12, 12, cr1, cr0, cr0, {0}
    4a44:	23690800 	cmncs	r9, #0, 16
    4a48:	0d480000 	stcleq	0, cr0, [r8, #-0]
    4a4c:	011d0000 	tsteq	sp, r0
    4a50:	00760251 	rsbseq	r0, r6, r1, asr r2
    4a54:	1ece2700 	cdpne	7, 12, cr2, cr14, cr0, {0}
    4a58:	23920800 	orrscs	r0, r2, #0, 16
    4a5c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4a60:	00001c09 	andeq	r1, r0, r9, lsl #24
    4a64:	fa056001 	blx	15ca70 <_Min_Stack_Size+0x15c670>
    4a68:	d0000000 	andle	r0, r0, r0
    4a6c:	b008001e 	andlt	r0, r8, lr, lsl r0
    4a70:	01000000 	mrseq	r0, (UNDEF: 0)
    4a74:	000e9b9c 	muleq	lr, ip, fp
    4a78:	1b722900 	blne	1c8ee80 <_Min_Stack_Size+0x1c8ea80>
    4a7c:	60010000 	andvs	r0, r1, r0
    4a80:	0001f305 	andeq	pc, r1, r5, lsl #6
    4a84:	00305200 	eorseq	r5, r0, r0, lsl #4
    4a88:	1b9d1b00 	blne	fe74b690 <_estack+0xde71b690>
    4a8c:	62010000 	andvs	r0, r1, #0
    4a90:	0000fa05 	andeq	pc, r0, r5, lsl #20
    4a94:	00308600 	eorseq	r8, r0, r0, lsl #12
    4a98:	20eb1b00 	rsccs	r1, fp, r0, lsl #22
    4a9c:	63010000 	movwvs	r0, #4096	; 0x1000
    4aa0:	00055305 	andeq	r5, r5, r5, lsl #6
    4aa4:	00305200 	eorseq	r5, r0, r0, lsl #4
    4aa8:	13591b00 	cmpne	r9, #0, 22
    4aac:	64010000 	strvs	r0, [r1], #-0
    4ab0:	00010505 	andeq	r0, r1, r5, lsl #10
    4ab4:	0030d300 	eorseq	sp, r0, r0, lsl #6
    4ab8:	04b42400 	ldrteq	r2, [r4], #1024	; 0x400
    4abc:	1ede0000 	cdpne	0, 13, cr0, cr14, cr0, {0}
    4ac0:	04b80800 	ldrteq	r0, [r8], #2048	; 0x800
    4ac4:	7c010000 	stcvc	0, cr0, [r1], {-0}
    4ac8:	000e0b05 	andeq	r0, lr, r5, lsl #22
    4acc:	04c52100 	strbeq	r2, [r5], #256	; 0x100
    4ad0:	31070000 	mrscc	r0, (UNDEF: 7)
    4ad4:	b8250000 	stmdalt	r5!, {}	; <UNPREDICTABLE>
    4ad8:	22000004 	andcs	r0, r0, #4
    4adc:	000004d1 	ldrdeq	r0, [r0], -r1
    4ae0:	00003125 	andeq	r3, r0, r5, lsr #2
    4ae4:	0004dd22 	andeq	sp, r4, r2, lsr #26
    4ae8:	00310700 	eorseq	r0, r1, r0, lsl #14
    4aec:	1f002b00 	svcne	0x00002b00
    4af0:	000e0800 	andeq	r0, lr, r0, lsl #16
    4af4:	c5300000 	ldrgt	r0, [r0, #-0]!
    4af8:	01000004 	tsteq	r0, r4
    4afc:	1f002b54 	svcne	0x00002b54
    4b00:	000e0800 	andeq	r0, lr, r0, lsl #16
    4b04:	d1220000 	teqle	r2, r0
    4b08:	7c000004 	stcvc	0, cr0, [r0], {4}
    4b0c:	2c000031 	stccs	0, cr0, [r0], {49}	; 0x31
    4b10:	000004dd 	ldrdeq	r0, [r0], -sp
    4b14:	00000000 	andeq	r0, r0, r0
    4b18:	001eda27 	andseq	sp, lr, r7, lsr #20
    4b1c:	0023af08 	eoreq	sl, r3, r8, lsl #30
    4b20:	1ede2700 	cdpne	7, 13, cr2, cr14, cr0, {0}
    4b24:	23870800 	orrcs	r0, r7, #0, 16
    4b28:	f61c0000 			; <UNDEFINED> instruction: 0xf61c0000
    4b2c:	b608001e 			; <UNDEFINED> instruction: 0xb608001e
    4b30:	31000023 	tstcc	r0, r3, lsr #32
    4b34:	1d00000e 	stcne	0, cr0, [r0, #-56]	; 0xffffffc8
    4b38:	76025001 	strvc	r5, [r2], -r1
    4b3c:	fe270000 	cdp2	0, 2, cr0, cr7, cr0, {0}
    4b40:	8708001e 	smladhi	r8, lr, r0, r0
    4b44:	1c000023 	stcne	0, cr0, [r0], {35}	; 0x23
    4b48:	08001f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, ip}
    4b4c:	00002399 	muleq	r0, r9, r3
    4b50:	00000e4e 	andeq	r0, r0, lr, asr #28
    4b54:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    4b58:	1c000077 	stcne	0, cr0, [r0], {119}	; 0x77
    4b5c:	08001f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, ip}
    4b60:	00002369 	andeq	r2, r0, r9, ror #6
    4b64:	00000e62 	andeq	r0, r0, r2, ror #28
    4b68:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    4b6c:	1c000077 	stcne	0, cr0, [r0], {119}	; 0x77
    4b70:	08001f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, ip}
    4b74:	000023b6 			; <UNDEFINED> instruction: 0x000023b6
    4b78:	00000e76 	andeq	r0, r0, r6, ror lr
    4b7c:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    4b80:	1c000076 	stcne	0, cr0, [r0], {118}	; 0x76
    4b84:	08001f76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip}
    4b88:	00002369 	andeq	r2, r0, r9, ror #6
    4b8c:	00000e8a 	andeq	r0, r0, sl, lsl #29
    4b90:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    4b94:	1e001874 	mcrne	8, 0, r1, cr0, cr4, {3}
    4b98:	08001f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip}
    4b9c:	000023b6 			; <UNDEFINED> instruction: 0x000023b6
    4ba0:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    4ba4:	00000076 	andeq	r0, r0, r6, ror r0
    4ba8:	001fa828 	andseq	sl, pc, r8, lsr #16
    4bac:	05a60100 	streq	r0, [r6, #256]!	; 0x100
    4bb0:	08001f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip}
    4bb4:	0000014a 	andeq	r0, r0, sl, asr #2
    4bb8:	108d9c01 	addne	r9, sp, r1, lsl #24
    4bbc:	511b0000 	tstpl	fp, r0
    4bc0:	01000012 	tsteq	r0, r2, lsl r0
    4bc4:	00fa05a8 	rscseq	r0, sl, r8, lsr #11
    4bc8:	31bb0000 			; <UNDEFINED> instruction: 0x31bb0000
    4bcc:	7d240000 	stcvc	0, cr0, [r4, #-0]
    4bd0:	82000006 	andhi	r0, r0, #6
    4bd4:	d808001f 	stmdale	r8, {r0, r1, r2, r3, r4}
    4bd8:	01000004 	tsteq	r0, r4
    4bdc:	106805b4 	strhtne	r0, [r8], #-84	; 0xffffffac
    4be0:	e2310000 	eors	r0, r1, #0
    4be4:	00000006 	andeq	r0, r0, r6
    4be8:	0006d631 	andeq	sp, r6, r1, lsr r6
    4bec:	ca310000 	bgt	c44bf4 <_Min_Stack_Size+0xc447f4>
    4bf0:	00000006 	andeq	r0, r0, r6
    4bf4:	0006be31 	andeq	fp, r6, r1, lsr lr
    4bf8:	b2310000 	eorslt	r0, r1, #0
    4bfc:	00000006 	andeq	r0, r0, r6
    4c00:	0006a631 	andeq	sl, r6, r1, lsr r6
    4c04:	9a328200 	bls	ca540c <_Min_Stack_Size+0xca500c>
    4c08:	30000006 	andcc	r0, r0, r6
    4c0c:	0000068e 	andeq	r0, r0, lr, lsl #13
    4c10:	24ed0306 	strbtcs	r0, [sp], #774	; 0x306
    4c14:	259f0800 	ldrcs	r0, [pc, #2048]	; 541c <_Min_Stack_Size+0x501c>
    4c18:	000004d8 	ldrdeq	r0, [r0], -r8
    4c1c:	0006ee22 	andeq	lr, r6, r2, lsr #28
    4c20:	0031fa00 	eorseq	pc, r1, r0, lsl #20
    4c24:	06fa2300 	ldrbteq	r2, [sl], r0, lsl #6
    4c28:	54010000 	strpl	r0, [r1], #-0
    4c2c:	00072a24 	andeq	r2, r7, r4, lsr #20
    4c30:	001f8200 	andseq	r8, pc, r0, lsl #4
    4c34:	0004f808 	andeq	pc, r4, r8, lsl #16
    4c38:	020d0100 	andeq	r0, sp, #0, 2
    4c3c:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    4c40:	00074731 	andeq	r4, r7, r1, lsr r7
    4c44:	3b310000 	blcc	c44c4c <_Min_Stack_Size+0xc4484c>
    4c48:	82000007 	andhi	r0, r0, #7
    4c4c:	0004f825 	andeq	pc, r4, r5, lsr #16
    4c50:	07532200 	ldrbeq	r2, [r3, -r0, lsl #4]
    4c54:	321a0000 	andscc	r0, sl, #0
    4c58:	881c0000 	ldmdahi	ip, {}	; <UNPREDICTABLE>
    4c5c:	e408001f 	str	r0, [r8], #-31
    4c60:	61000022 	tstvs	r0, r2, lsr #32
    4c64:	1d00000f 	stcne	0, cr0, [r0, #-60]	; 0xffffffc4
    4c68:	08025001 	stmdaeq	r2, {r0, ip, lr}
    4c6c:	981c004c 	ldmdals	ip, {r2, r3, r6}
    4c70:	e408001f 	str	r0, [r8], #-31
    4c74:	76000022 	strvc	r0, [r0], -r2, lsr #32
    4c78:	1d00000f 	stcne	0, cr0, [r0, #-60]	; 0xffffffc4
    4c7c:	0a035001 	beq	d8c88 <_Min_Stack_Size+0xd8888>
    4c80:	1c000208 	sfmne	f0, 4, [r0], {8}
    4c84:	08001faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp, ip}
    4c88:	000022fa 	strdeq	r2, [r0], -sl
    4c8c:	00000f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    4c90:	0352011d 	cmpeq	r2, #1073741831	; 0x40000007
    4c94:	1d02080a 	stcne	8, cr0, [r2, #-40]	; 0xffffffd8
    4c98:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    4c9c:	b42d00a5 	strtlt	r0, [sp], #-165	; 0xa5
    4ca0:	19080020 	stmdbne	r8, {r5}
    4ca4:	00000023 	andeq	r0, r0, r3, lsr #32
    4ca8:	05182500 	ldreq	r2, [r8, #-1280]	; 0x500
    4cac:	07220000 	streq	r0, [r2, -r0]!
    4cb0:	80000007 	andhi	r0, r0, r7
    4cb4:	24000032 	strcs	r0, [r0], #-50	; 0x32
    4cb8:	000004ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4cbc:	08001fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip}
    4cc0:	00000530 	andeq	r0, r0, r0, lsr r5
    4cc4:	13023c01 	movwne	r3, #11265	; 0x2c01
    4cc8:	32000010 	andcc	r0, r0, #16
    4ccc:	00000530 	andeq	r0, r0, r0, lsr r5
    4cd0:	00053c32 	andeq	r3, r5, r2, lsr ip
    4cd4:	05242100 	streq	r2, [r4, #-256]!	; 0x100
    4cd8:	32af0000 	adccc	r0, pc, #0
    4cdc:	18320000 	ldmdane	r2!, {}	; <UNPREDICTABLE>
    4ce0:	21000005 	tstcs	r0, r5
    4ce4:	0000050c 	andeq	r0, r0, ip, lsl #10
    4ce8:	000032db 	ldrdeq	r3, [r0], -fp
    4cec:	00053025 	andeq	r3, r5, r5, lsr #32
    4cf0:	05482200 	strbeq	r2, [r8, #-512]	; 0x200
    4cf4:	33200000 	teqcc	r0, #0
    4cf8:	e21c0000 	ands	r0, ip, #0
    4cfc:	2b08001f 	blcs	204d80 <_Min_Stack_Size+0x204980>
    4d00:	01000023 	tsteq	r0, r3, lsr #32
    4d04:	1d000010 	stcne	0, cr0, [r0, #-64]	; 0xffffffc0
    4d08:	77025001 	strvc	r5, [r2, -r1]
    4d0c:	ea1e0000 	b	784d14 <_Min_Stack_Size+0x784914>
    4d10:	2b08001f 	blcs	204d94 <_Min_Stack_Size+0x204994>
    4d14:	1d000023 	stcne	0, cr0, [r0, #-140]	; 0xffffff74
    4d18:	74025001 	strvc	r5, [r2], #-1
    4d1c:	00000018 	andeq	r0, r0, r8, lsl r0
    4d20:	0020021c 	eoreq	r0, r0, ip, lsl r2
    4d24:	00234208 	eoreq	r4, r3, r8, lsl #4
    4d28:	00103600 	andseq	r3, r0, r0, lsl #12
    4d2c:	52011d00 	andpl	r1, r1, #0, 26
    4d30:	1d007502 	cfstr32ne	mvfx7, [r0, #-8]
    4d34:	03055101 	movweq	r5, #20737	; 0x5101
    4d38:	080024ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, sp}
    4d3c:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    4d40:	27000076 	smlsdxcs	r0, r6, r0, r0
    4d44:	08002008 	stmdaeq	r0, {r3, sp}
    4d48:	00002362 	andeq	r2, r0, r2, ror #6
    4d4c:	0020721c 	eoreq	r7, r0, ip, lsl r2
    4d50:	00236908 	eoreq	r6, r3, r8, lsl #18
    4d54:	00105300 	andseq	r5, r0, r0, lsl #6
    4d58:	51011d00 	tstpl	r1, r0, lsl #26
    4d5c:	00007702 	andeq	r7, r0, r2, lsl #14
    4d60:	00207627 	eoreq	r7, r0, r7, lsr #12
    4d64:	00238008 	eoreq	r8, r3, r8
    4d68:	20c42700 	sbccs	r2, r4, r0, lsl #14
    4d6c:	05d40800 	ldrbeq	r0, [r4, #2048]	; 0x800
    4d70:	00000000 	andeq	r0, r0, r0
    4d74:	20802700 	addcs	r2, r0, r0, lsl #14
    4d78:	23c70800 	biccs	r0, r7, #0, 16
    4d7c:	8a270000 	bhi	9c4d84 <_Min_Stack_Size+0x9c4984>
    4d80:	87080020 	strhi	r0, [r8, -r0, lsr #32]
    4d84:	2d000023 	stccs	0, cr0, [r0, #-140]	; 0xffffff74
    4d88:	080020a0 	stmdaeq	r0, {r5, r7, sp}
    4d8c:	000023d3 	ldrdeq	r2, [r0], -r3
    4d90:	0020a827 	eoreq	sl, r0, r7, lsr #16
    4d94:	00238708 	eoreq	r8, r3, r8, lsl #14
    4d98:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    4d9c:	0100001c 	tsteq	r0, ip, lsl r0
    4da0:	20cc05f4 	strdcs	r0, [ip], #84	; 0x54
    4da4:	001a0800 	andseq	r0, sl, r0, lsl #16
    4da8:	9c010000 	stcls	0, cr0, [r1], {-0}
    4dac:	000010b6 	strheq	r1, [r0], -r6
    4db0:	0020d227 	eoreq	sp, r0, r7, lsr #4
    4db4:	00238708 	eoreq	r8, r3, r8, lsl #14
    4db8:	20e62d00 	rsccs	r2, r6, r0, lsl #26
    4dbc:	23df0800 	bicscs	r0, pc, #0, 16
    4dc0:	33000000 	movwcc	r0, #0
    4dc4:	0000058c 	andeq	r0, r0, ip, lsl #11
    4dc8:	080020e8 	stmdaeq	r0, {r3, r5, r6, r7, sp}
    4dcc:	00000010 	andeq	r0, r0, r0, lsl r0
    4dd0:	9f2e9c01 	svcls	0x002e9c01
    4dd4:	0100000e 	tsteq	r0, lr
    4dd8:	01100682 	tsteq	r0, r2, lsl #13
    4ddc:	20f80000 	rscscs	r0, r8, r0
    4de0:	00180800 	andseq	r0, r8, r0, lsl #16
    4de4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4de8:	00001100 	andeq	r1, r0, r0, lsl #2
    4dec:	001fa134 	andseq	sl, pc, r4, lsr r1	; <UNPREDICTABLE>
    4df0:	06840100 	streq	r0, [r4], r0, lsl #2
    4df4:	00000110 	andeq	r0, r0, r0, lsl r1
    4df8:	fe275401 	cdp2	4, 2, cr5, cr7, cr1, {0}
    4dfc:	62080020 	andvs	r0, r8, #32
    4e00:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    4e04:	0800210c 	stmdaeq	r0, {r2, r3, r8, sp}
    4e08:	00002380 	andeq	r2, r0, r0, lsl #7
    4e0c:	21152e00 	tstcs	r5, r0, lsl #28
    4e10:	91010000 	mrsls	r0, (UNDEF: 1)
    4e14:	00011006 	andeq	r1, r1, r6
    4e18:	00211000 	eoreq	r1, r1, r0
    4e1c:	00001c08 	andeq	r1, r0, r8, lsl #24
    4e20:	549c0100 	ldrpl	r0, [ip], #256	; 0x100
    4e24:	34000011 	strcc	r0, [r0], #-17
    4e28:	00001251 	andeq	r1, r0, r1, asr r2
    4e2c:	10069301 	andne	r9, r6, r1, lsl #6
    4e30:	01000001 	tsteq	r0, r1
    4e34:	13591b54 	cmpne	r9, #84, 22	; 0x15000
    4e38:	94010000 	strls	r0, [r1], #-0
    4e3c:	00010506 	andeq	r0, r1, r6, lsl #10
    4e40:	00334c00 	eorseq	r4, r3, r0, lsl #24
    4e44:	21162700 	tstcs	r6, r0, lsl #14
    4e48:	23af0800 			; <UNDEFINED> instruction: 0x23af0800
    4e4c:	1a270000 	bne	9c4e54 <_Min_Stack_Size+0x9c4a54>
    4e50:	87080021 	strhi	r0, [r8, -r1, lsr #32]
    4e54:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    4e58:	08002128 	stmdaeq	r0, {r3, r5, r8, sp}
    4e5c:	000023b6 			; <UNDEFINED> instruction: 0x000023b6
    4e60:	1aa73500 	bne	fe9d2268 <_estack+0xde9a2268>
    4e64:	b0010000 	andlt	r0, r1, r0
    4e68:	00010506 	andeq	r0, r1, r6, lsl #10
    4e6c:	00212c00 	eoreq	r2, r1, r0, lsl #24
    4e70:	00000c08 	andeq	r0, r0, r8, lsl #24
    4e74:	2e9c0100 	fmlcse	f0, f4, f0
    4e78:	00001c26 	andeq	r1, r0, r6, lsr #24
    4e7c:	fa073101 	blx	1d1288 <_Min_Stack_Size+0x1d0e88>
    4e80:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4e84:	7c080021 	stcvc	0, cr0, [r8], {33}	; 0x21
    4e88:	01000001 	tsteq	r0, r1
    4e8c:	00125b9c 	mulseq	r2, ip, fp
    4e90:	20eb1b00 	rsccs	r1, fp, r0, lsl #22
    4e94:	33010000 	movwcc	r0, #4096	; 0x1000
    4e98:	0004ae07 	andeq	sl, r4, r7, lsl #28
    4e9c:	00335f00 	eorseq	r5, r3, r0, lsl #30
    4ea0:	0e8d1b00 	vdiveq.f64	d1, d13, d0
    4ea4:	34010000 	strcc	r0, [r1], #-0
    4ea8:	00011007 	andeq	r1, r1, r7
    4eac:	00337d00 	eorseq	r7, r3, r0, lsl #26
    4eb0:	1f121b00 	svcne	0x00121b00
    4eb4:	35010000 	strcc	r0, [r1, #-0]
    4eb8:	0000fa07 	andeq	pc, r0, r7, lsl #20
    4ebc:	00339b00 	eorseq	r9, r3, r0, lsl #22
    4ec0:	05602500 	strbeq	r2, [r0, #-1280]!	; 0x500
    4ec4:	921b0000 	andsls	r0, fp, #0
    4ec8:	0100001c 	tsteq	r0, ip, lsl r0
    4ecc:	05870744 	streq	r0, [r7, #1860]	; 0x744
    4ed0:	33f40000 	mvnscc	r0, #0
    4ed4:	80260000 	eorhi	r0, r6, r0
    4ed8:	1f000005 	svcne	0x00000005
    4edc:	1b000012 	blne	4f2c <_Min_Stack_Size+0x4b2c>
    4ee0:	00000e42 	andeq	r0, r0, r2, asr #28
    4ee4:	7e074801 	cdpvc	8, 0, cr4, cr7, cr1, {0}
    4ee8:	12000004 	andne	r0, r0, #4
    4eec:	24000034 	strcs	r0, [r0], #-52	; 0x34
    4ef0:	00000494 	muleq	r0, r4, r4
    4ef4:	08002286 	stmdaeq	r0, {r1, r2, r7, r9, sp}
    4ef8:	000005a0 	andeq	r0, r0, r0, lsr #11
    4efc:	15074801 	strne	r4, [r7, #-2049]	; 0x801
    4f00:	25000012 	strcs	r0, [r0, #-18]
    4f04:	000005a0 	andeq	r0, r0, r0, lsr #11
    4f08:	0004a12c 	andeq	sl, r4, ip, lsr #2
    4f0c:	228c2b00 	addcs	r2, ip, #0, 22
    4f10:	00140800 	andseq	r0, r4, r0, lsl #16
    4f14:	a1220000 	teqge	r2, r0
    4f18:	30000004 	andcc	r0, r0, r4
    4f1c:	00000034 	andeq	r0, r0, r4, lsr r0
    4f20:	52270000 	eorpl	r0, r7, #0
    4f24:	87080022 	strhi	r0, [r8, -r2, lsr #32]
    4f28:	00000023 	andeq	r0, r0, r3, lsr #32
    4f2c:	0021ba1c 	eoreq	fp, r1, ip, lsl sl
    4f30:	00239908 	eoreq	r9, r3, r8, lsl #18
    4f34:	00123400 	andseq	r3, r2, r0, lsl #8
    4f38:	50011d00 	andpl	r1, r1, r0, lsl #26
    4f3c:	06549103 	ldrbeq	r9, [r4], -r3, lsl #2
    4f40:	21c81c00 	biccs	r1, r8, r0, lsl #24
    4f44:	23990800 	orrscs	r0, r9, #0, 16
    4f48:	12480000 	subne	r0, r8, #0
    4f4c:	011d0000 	tsteq	sp, r0
    4f50:	187a0250 	ldmdane	sl!, {r4, r6, r9}^
    4f54:	21e21e00 	mvncs	r1, r0, lsl #28
    4f58:	23690800 	cmncs	r9, #0, 16
    4f5c:	011d0000 	tsteq	sp, r0
    4f60:	54910351 	ldrpl	r0, [r1], #849	; 0x351
    4f64:	00000006 	andeq	r0, r0, r6
    4f68:	0013252e 	andseq	r2, r3, lr, lsr #10
    4f6c:	06250100 	strteq	r0, [r5], -r0, lsl #2
    4f70:	000000fa 	strdeq	r0, [r0], -sl
    4f74:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
    4f78:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4f7c:	13089c01 	movwne	r9, #35841	; 0x8c01
    4f80:	eb1b0000 	bl	6c4f88 <_Min_Stack_Size+0x6c4b88>
    4f84:	01000020 	tsteq	r0, r0, lsr #32
    4f88:	04ae0627 	strteq	r0, [lr], #1575	; 0x627
    4f8c:	345e0000 	ldrbcc	r0, [lr], #-0
    4f90:	451b0000 	ldrmi	r0, [fp, #-0]
    4f94:	01000011 	tsteq	r0, r1, lsl r0
    4f98:	00fa0628 	rscseq	r0, sl, r8, lsr #12
    4f9c:	34710000 	ldrbtcc	r0, [r1], #-0
    4fa0:	c8270000 	stmdagt	r7!, {}	; <UNPREDICTABLE>
    4fa4:	87080022 	strhi	r0, [r8, -r2, lsr #32]
    4fa8:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    4fac:	080022ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sp}
    4fb0:	00002362 	andeq	r2, r0, r2, ror #6
    4fb4:	0023261c 	eoreq	r2, r3, ip, lsl r6
    4fb8:	00239908 	eoreq	r9, r3, r8, lsl #18
    4fbc:	0012bb00 	andseq	fp, r2, r0, lsl #22
    4fc0:	50011d00 	andpl	r1, r1, r0, lsl #26
    4fc4:	00187702 	andseq	r7, r8, r2, lsl #14
    4fc8:	00232c1c 	eoreq	r2, r3, ip, lsl ip
    4fcc:	00239908 	eoreq	r9, r3, r8, lsl #18
    4fd0:	0012cf00 	andseq	ip, r2, r0, lsl #30
    4fd4:	50011d00 	andpl	r1, r1, r0, lsl #26
    4fd8:	00007b02 	andeq	r7, r0, r2, lsl #22
    4fdc:	0023441c 	eoreq	r4, r3, ip, lsl r4
    4fe0:	00236908 	eoreq	r6, r3, r8, lsl #18
    4fe4:	0012e300 	andseq	lr, r2, r0, lsl #6
    4fe8:	51011d00 	tstpl	r1, r0, lsl #26
    4fec:	00007b02 	andeq	r7, r0, r2, lsl #22
    4ff0:	00237227 	eoreq	r7, r3, r7, lsr #4
    4ff4:	00238008 	eoreq	r8, r3, r8
    4ff8:	23842700 	orrcs	r2, r4, #0, 14
    4ffc:	116a0800 	cmnne	sl, r0, lsl #16
    5000:	9a270000 	bls	9c5008 <_Min_Stack_Size+0x9c4c08>
    5004:	92080023 	andls	r0, r8, #35	; 0x23
    5008:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    500c:	0800239e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sp}
    5010:	00002380 	andeq	r2, r0, r0, lsl #7
    5014:	1fff2800 	svcne	0x00ff2800
    5018:	05010000 	streq	r0, [r1, #-0]
    501c:	0023a403 	eoreq	sl, r3, r3, lsl #8
    5020:	0000bc08 	andeq	fp, r0, r8, lsl #24
    5024:	1d9c0100 	ldfnes	f0, [ip]
    5028:	29000014 	stmdbcs	r0, {r2, r4}
    502c:	00001f67 	andeq	r1, r0, r7, ror #30
    5030:	1d030501 	cfstr32ne	mvfx0, [r3, #-4]
    5034:	b3000014 	movwlt	r0, #20
    5038:	29000034 	stmdbcs	r0, {r2, r4, r5}
    503c:	000020dc 	ldrdeq	r2, [r0], -ip
    5040:	87030501 	strhi	r0, [r3, -r1, lsl #10]
    5044:	38000005 	stmdacc	r0, {r0, r2}
    5048:	1b000035 	blne	5124 <_Min_Stack_Size+0x4d24>
    504c:	000010dd 	ldrdeq	r1, [r0], -sp
    5050:	10030701 	andne	r0, r3, r1, lsl #14
    5054:	bd000001 	stclt	0, cr0, [r0, #-4]
    5058:	1b000035 	blne	5134 <_Min_Stack_Size+0x4d34>
    505c:	00001145 	andeq	r1, r0, r5, asr #2
    5060:	fa030801 	blx	c706c <_Min_Stack_Size+0xc6c6c>
    5064:	db000000 	blle	506c <_Min_Stack_Size+0x4c6c>
    5068:	1b000035 	blne	5144 <_Min_Stack_Size+0x4d44>
    506c:	00001e18 	andeq	r1, r0, r8, lsl lr
    5070:	fa030801 	blx	c707c <_Min_Stack_Size+0xc6c7c>
    5074:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    5078:	36000035 			; <UNDEFINED> instruction: 0x36000035
    507c:	0000058c 	andeq	r0, r0, ip, lsl #11
    5080:	080023bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sp}
    5084:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    5088:	26030e01 	strcs	r0, [r3], -r1, lsl #28
    508c:	000005d8 	ldrdeq	r0, [r0], -r8
    5090:	000013e6 	andeq	r1, r0, r6, ror #7
    5094:	001c921b 	andseq	r9, ip, fp, lsl r2
    5098:	03120100 	tsteq	r2, #0, 2
    509c:	00000587 	andeq	r0, r0, r7, lsl #11
    50a0:	0000363d 	andeq	r3, r0, sp, lsr r6
    50a4:	00056d24 	andeq	r6, r5, r4, lsr #26
    50a8:	0023f000 	eoreq	pc, r3, r0
    50ac:	00060808 	andeq	r0, r6, r8, lsl #16
    50b0:	034b0100 	movteq	r0, #45312	; 0xb100
    50b4:	000013dc 	ldrdeq	r1, [r0], -ip
    50b8:	00057a21 	andeq	r7, r5, r1, lsr #20
    50bc:	00365b00 	eorseq	r5, r6, r0, lsl #22
    50c0:	244c2f00 	strbcs	r2, [ip], #-3840	; 0xf00
    50c4:	00140800 	andseq	r0, r4, r0, lsl #16
    50c8:	13d20000 	bicsne	r0, r2, #0
    50cc:	7a300000 	bvc	c050d4 <_Min_Stack_Size+0xc04cd4>
    50d0:	01000005 	tsteq	r0, r5
    50d4:	245e2754 	ldrbcs	r2, [lr], #-1876	; 0x754
    50d8:	23e70800 	mvncs	r0, #0, 16
    50dc:	27000000 	strcs	r0, [r0, -r0]
    50e0:	0800240c 	stmdaeq	r0, {r2, r3, sl, sp}
    50e4:	000023e7 	andeq	r2, r0, r7, ror #7
    50e8:	23f02700 	mvnscs	r2, #0, 14
    50ec:	23990800 	orrscs	r0, r9, #0, 16
    50f0:	27000000 	strcs	r0, [r0, -r0]
    50f4:	08002420 	stmdaeq	r0, {r5, sl, sp}
    50f8:	0000125b 	andeq	r1, r0, fp, asr r2
    50fc:	00242e27 	eoreq	r2, r4, r7, lsr #28
    5100:	00125b08 	andseq	r5, r2, r8, lsl #22
    5104:	243a2d00 	ldrtcs	r2, [sl], #-3328	; 0xd00
    5108:	23920800 	orrscs	r0, r2, #0, 16
    510c:	3e270000 	cdpcc	0, 2, cr0, cr7, cr0, {0}
    5110:	87080024 	strhi	r0, [r8, -r4, lsr #32]
    5114:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    5118:	08002444 	stmdaeq	r0, {r2, r6, sl, sp}
    511c:	00002387 	andeq	r2, r0, r7, lsl #7
    5120:	00244a27 	eoreq	r4, r4, r7, lsr #20
    5124:	00238708 	eoreq	r8, r3, r8, lsl #14
    5128:	22070000 	andcs	r0, r7, #0
    512c:	06000014 			; <UNDEFINED> instruction: 0x06000014
    5130:	00011004 	andeq	r1, r1, r4
    5134:	1cc32800 	stclne	8, cr2, [r3], {0}
    5138:	65010000 	strvs	r0, [r1, #-0]
    513c:	00246003 	eoreq	r6, r4, r3
    5140:	00008c08 	andeq	r8, r0, r8, lsl #24
    5144:	e89c0100 	ldm	ip, {r8}
    5148:	29000014 	stmdbcs	r0, {r2, r4}
    514c:	00000e34 	andeq	r0, r0, r4, lsr lr
    5150:	87036501 	strhi	r6, [r3, -r1, lsl #10]
    5154:	79000005 	stmdbvc	r0, {r0, r2}
    5158:	1b000036 	blne	5238 <_Min_Stack_Size+0x4e38>
    515c:	000010dd 	ldrdeq	r1, [r0], -sp
    5160:	10036701 	andne	r6, r3, r1, lsl #14
    5164:	d7000001 	strle	r0, [r0, -r1]
    5168:	1b000036 	blne	5248 <_Min_Stack_Size+0x4e48>
    516c:	00001145 	andeq	r1, r0, r5, asr #2
    5170:	fa036801 	blx	df17c <_Min_Stack_Size+0xded7c>
    5174:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    5178:	36000036 			; <UNDEFINED> instruction: 0x36000036
    517c:	0000058c 	andeq	r0, r0, ip, lsl #11
    5180:	0800247a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, sp}
    5184:	00000620 	andeq	r0, r0, r0, lsr #12
    5188:	24036f01 	strcs	r6, [r3], #-3841	; 0xf01
    518c:	0000056d 	andeq	r0, r0, sp, ror #10
    5190:	0800249c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp}
    5194:	00000640 	andeq	r0, r0, r0, asr #12
    5198:	c3038d01 	movwgt	r8, #15617	; 0x3d01
    519c:	21000014 	tstcs	r0, r4, lsl r0
    51a0:	0000057a 	andeq	r0, r0, sl, ror r5
    51a4:	0000372c 	andeq	r3, r0, ip, lsr #14
    51a8:	0024d82f 	eoreq	sp, r4, pc, lsr #16
    51ac:	00001408 	andeq	r1, r0, r8, lsl #8
    51b0:	0014b900 	andseq	fp, r4, r0, lsl #18
    51b4:	057a3000 	ldrbeq	r3, [sl, #-0]!
    51b8:	55010000 	strpl	r0, [r1, #-0]
    51bc:	0024ea27 	eoreq	lr, r4, r7, lsr #20
    51c0:	0023e708 	eoreq	lr, r3, r8, lsl #14
    51c4:	b8270000 	stmdalt	r7!, {}	; <UNPREDICTABLE>
    51c8:	e7080024 	str	r0, [r8, -r4, lsr #32]
    51cc:	00000023 	andeq	r0, r0, r3, lsr #32
    51d0:	00246e2d 	eoreq	r6, r4, sp, lsr #28
    51d4:	00239208 	eoreq	r9, r3, r8, lsl #4
    51d8:	249c2700 	ldrcs	r2, [ip], #1792	; 0x700
    51dc:	23990800 	orrscs	r0, r9, #0, 16
    51e0:	cc270000 	stcgt	0, cr0, [r7], #-0
    51e4:	5b080024 	blpl	20527c <_Min_Stack_Size+0x204e7c>
    51e8:	27000012 	smladcs	r0, r2, r0, r0
    51ec:	080024d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, sp}
    51f0:	00002387 	andeq	r2, r0, r7, lsl #7
    51f4:	217c1600 	cmncs	ip, r0, lsl #12
    51f8:	0f010000 	svceq	0x00010000
    51fc:	1512010b 	ldrne	r0, [r2, #-267]	; 0x10b
    5200:	13150000 	tstne	r5, #0
    5204:	00001d05 	andeq	r1, r0, r5, lsl #26
    5208:	fa0b1301 	blx	2c9e14 <_Min_Stack_Size+0x2c9a14>
    520c:	15000000 	strne	r0, [r0, #-0]
    5210:	0020eb13 	eoreq	lr, r0, r3, lsl fp
    5214:	0b210100 	bleq	84561c <_Min_Stack_Size+0x84521c>
    5218:	000004ae 	andeq	r0, r0, lr, lsr #9
    521c:	1a000000 	bne	5224 <_Min_Stack_Size+0x4e24>
    5220:	00001cf9 	strdeq	r1, [r0], -r9
    5224:	ec09f001 	stc	0, cr15, [r9], {1}
    5228:	92080024 	andls	r0, r8, #36	; 0x24
    522c:	01000000 	mrseq	r0, (UNDEF: 0)
    5230:	0015ef9c 	mulseq	r5, ip, pc	; <UNPREDICTABLE>
    5234:	1ebc2900 	cdpne	9, 11, cr2, cr12, cr0, {0}
    5238:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    523c:	00009e09 	andeq	r9, r0, r9, lsl #28
    5240:	00374a00 	eorseq	r4, r7, r0, lsl #20
    5244:	14e82400 	strbtne	r2, [r8], #1024	; 0x400
    5248:	25120000 	ldrcs	r0, [r2, #-0]
    524c:	06580800 	ldrbeq	r0, [r8], -r0, lsl #16
    5250:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    5254:	0015e509 	andseq	lr, r5, r9, lsl #10
    5258:	06582500 	ldrbeq	r2, [r8], -r0, lsl #10
    525c:	f6220000 			; <UNDEFINED> instruction: 0xf6220000
    5260:	6b000014 	blvs	52b8 <_Min_Stack_Size+0x4eb8>
    5264:	36000037 			; <UNDEFINED> instruction: 0x36000037
    5268:	0000058c 	andeq	r0, r0, ip, lsl #11
    526c:	08002522 	stmdaeq	r0, {r1, r5, r8, sl, sp}
    5270:	00000670 	andeq	r0, r0, r0, ror r6
    5274:	2f0b1901 	svccs	0x000b1901
    5278:	08002544 	stmdaeq	r0, {r2, r6, r8, sl, sp}
    527c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5280:	000015da 	ldrdeq	r1, [r0], -sl
    5284:	00150323 	andseq	r0, r5, r3, lsr #6
    5288:	2a5b0100 	bcs	16c5690 <_Min_Stack_Size+0x16c5290>
    528c:	00000595 	muleq	r0, r5, r5
    5290:	0800256e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, sp}
    5294:	00000010 	andeq	r0, r0, r0, lsl r0
    5298:	b30b2c01 	movwlt	r2, #48129	; 0xbc01
    529c:	30000015 	andcc	r0, r0, r5, lsl r0
    52a0:	000005a2 	andeq	r0, r0, r2, lsr #11
    52a4:	76275b01 	strtvc	r5, [r7], -r1, lsl #22
    52a8:	19080025 	stmdbne	r8, {r0, r2, r5}
    52ac:	1e000023 	cdpne	0, 0, cr0, cr0, cr3, {1}
    52b0:	0800257c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, sp}
    52b4:	00002319 	andeq	r2, r0, r9, lsl r3
    52b8:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    52bc:	0000007b 	andeq	r0, r0, fp, ror r0
    52c0:	00254827 	eoreq	r4, r5, r7, lsr #16
    52c4:	00236208 	eoreq	r6, r3, r8, lsl #4
    52c8:	25581c00 	ldrbcs	r1, [r8, #-3072]	; 0xc00
    52cc:	23990800 	orrscs	r0, r9, #0, 16
    52d0:	15d00000 	ldrbne	r0, [r0]
    52d4:	011d0000 	tsteq	sp, r0
    52d8:	047b0250 	ldrbteq	r0, [fp], #-592	; 0x250
    52dc:	256e2700 	strbcs	r2, [lr, #-1792]!	; 0x700
    52e0:	23800800 	orrcs	r0, r0, #0, 16
    52e4:	27000000 	strcs	r0, [r0, -r0]
    52e8:	0800252e 	stmdaeq	r0, {r1, r2, r3, r5, r8, sl, sp}
    52ec:	0000125b 	andeq	r1, r0, fp, asr r2
    52f0:	42270000 	eormi	r0, r7, #0
    52f4:	92080025 	andls	r0, r8, #37	; 0x25
    52f8:	00000023 	andeq	r0, r0, r3, lsr #32
    52fc:	001d782e 	andseq	r7, sp, lr, lsr #16
    5300:	06c90100 	strbeq	r0, [r9], r0, lsl #2
    5304:	00000105 	andeq	r0, r0, r5, lsl #2
    5308:	08002580 	stmdaeq	r0, {r7, r8, sl, sp}
    530c:	0000037c 	andeq	r0, r0, ip, ror r3
    5310:	1ab19c01 	bne	fec6c31c <_estack+0xdec3c31c>
    5314:	8f290000 	svchi	0x00290000
    5318:	0100001f 	tsteq	r0, pc, lsl r0
    531c:	1ab106c9 	bne	fec46e48 <_estack+0xdec16e48>
    5320:	37970000 	ldrcc	r0, [r7, r0]
    5324:	bc290000 	stclt	0, cr0, [r9], #-0
    5328:	0100001f 	tsteq	r0, pc, lsl r0
    532c:	1ab606c9 	bne	fed86e58 <_estack+0xded56e58>
    5330:	37ce0000 	strbcc	r0, [lr, r0]
    5334:	01290000 	teqeq	r9, r0
    5338:	0100001b 	tsteq	r0, fp, lsl r0
    533c:	1abb06c9 	bne	feec6e68 <_estack+0xdee96e68>
    5340:	37ef0000 	strbcc	r0, [pc, r0]!
    5344:	a01b0000 	andsge	r0, fp, r0
    5348:	0100001a 	tsteq	r0, sl, lsl r0
    534c:	010506cb 	smlabteq	r5, fp, r6, r0
    5350:	380e0000 	stmdacc	lr, {}	; <UNPREDICTABLE>
    5354:	221b0000 	andscs	r0, fp, #0
    5358:	0100001d 	tsteq	r0, sp, lsl r0
    535c:	010506cb 	smlabteq	r5, fp, r6, r0
    5360:	38640000 	stmdacc	r4!, {}^	; <UNPREDICTABLE>
    5364:	8c360000 	ldchi	0, cr0, [r6], #-0
    5368:	80000005 	andhi	r0, r0, r5
    536c:	88080025 	stmdahi	r8, {r0, r2, r5}
    5370:	01000006 	tsteq	r0, r6
    5374:	fe2406cd 	cdp2	6, 2, cr0, cr4, cr13, {6}
    5378:	be000003 	cdplt	0, 0, cr0, cr0, cr3, {0}
    537c:	a8080025 	stmdage	r8, {r0, r2, r5}
    5380:	01000006 	tsteq	r0, r6
    5384:	173b06d7 			; <UNDEFINED> instruction: 0x173b06d7
    5388:	27210000 	strcs	r0, [r1, -r0]!
    538c:	78000004 	stmdavc	r0, {r2}
    5390:	21000038 	tstcs	r0, r8, lsr r0
    5394:	0000041b 	andeq	r0, r0, fp, lsl r4
    5398:	00003898 	muleq	r0, r8, r8
    539c:	00040f32 	andeq	r0, r4, r2, lsr pc
    53a0:	06a82500 	strteq	r2, [r8], r0, lsl #10
    53a4:	332c0000 	teqcc	ip, #0
    53a8:	2c000004 	stccs	0, cr0, [r0], {4}
    53ac:	0000043f 	andeq	r0, r0, pc, lsr r4
    53b0:	00044b22 	andeq	r4, r4, r2, lsr #22
    53b4:	0038d400 	eorseq	sp, r8, r0, lsl #8
    53b8:	06d02500 	ldrbeq	r2, [r0], r0, lsl #10
    53bc:	27210000 	strcs	r0, [r1, -r0]!
    53c0:	0a000004 	beq	53d8 <_Min_Stack_Size+0x4fd8>
    53c4:	21000039 	tstcs	r0, r9, lsr r0
    53c8:	0000041b 	andeq	r0, r0, fp, lsl r4
    53cc:	0000391e 	andeq	r3, r0, lr, lsl r9
    53d0:	00040f32 	andeq	r0, r4, r2, lsr pc
    53d4:	06d02500 	ldrbeq	r2, [r0], r0, lsl #10
    53d8:	33220000 	teqcc	r2, #0
    53dc:	33000004 	movwcc	r0, #4
    53e0:	22000039 	andcs	r0, r0, #57	; 0x39
    53e4:	0000043f 	andeq	r0, r0, pc, lsr r4
    53e8:	00003946 	andeq	r3, r0, r6, asr #18
    53ec:	00044b22 	andeq	r4, r4, r2, lsr #22
    53f0:	00395900 	eorseq	r5, r9, r0, lsl #18
    53f4:	06f82600 	ldrbteq	r2, [r8], r0, lsl #12
    53f8:	16fb0000 	ldrbtne	r0, [fp], r0
    53fc:	5c220000 	stcpl	0, cr0, [r2], #-0
    5400:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    5404:	00000039 	andeq	r0, r0, r9, lsr r0
    5408:	0026682f 	eoreq	r6, r6, pc, lsr #16
    540c:	00001608 	andeq	r1, r0, r8, lsl #12
    5410:	00171200 	andseq	r1, r7, r0, lsl #4
    5414:	046a2200 	strbteq	r2, [sl], #-512	; 0x200
    5418:	396c0000 	stmdbcc	ip!, {}^	; <UNPREDICTABLE>
    541c:	37000000 	strcc	r0, [r0, -r0]
    5420:	000003c9 	andeq	r0, r0, r9, asr #7
    5424:	0800269c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, sp}
    5428:	00000710 	andeq	r0, r0, r0, lsl r7
    542c:	320bbd01 	andcc	fp, fp, #1, 26	; 0x40
    5430:	000003da 	ldrdeq	r0, [r0], -sl
    5434:	00071025 	andeq	r1, r7, r5, lsr #32
    5438:	03e62200 	mvneq	r2, #0, 4
    543c:	39810000 	stmibcc	r1, {}	; <UNPREDICTABLE>
	...
    5448:	0003fe24 	andeq	pc, r3, r4, lsr #28
    544c:	0025de00 	eoreq	sp, r5, r0, lsl #28
    5450:	00072808 	andeq	r2, r7, r8, lsl #16
    5454:	06dd0100 	ldrbeq	r0, [sp], r0, lsl #2
    5458:	00001819 	andeq	r1, r0, r9, lsl r8
    545c:	00042721 	andeq	r2, r4, r1, lsr #14
    5460:	0039ac00 	eorseq	sl, r9, r0, lsl #24
    5464:	041b2100 	ldreq	r2, [fp], #-256	; 0x100
    5468:	39cc0000 	stmibcc	ip, {}^	; <UNPREDICTABLE>
    546c:	0f210000 	svceq	0x00210000
    5470:	ea000004 	b	5488 <_Min_Stack_Size+0x5088>
    5474:	25000039 	strcs	r0, [r0, #-57]	; 0x39
    5478:	00000728 	andeq	r0, r0, r8, lsr #14
    547c:	0004332c 	andeq	r3, r4, ip, lsr #6
    5480:	043f2c00 	ldrteq	r2, [pc], #-3072	; 5488 <_Min_Stack_Size+0x5088>
    5484:	4b220000 	blmi	88548c <_Min_Stack_Size+0x88508c>
    5488:	18000004 	stmdane	r0, {r2}
    548c:	2500003a 	strcs	r0, [r0, #-58]	; 0x3a
    5490:	00000730 	andeq	r0, r0, r0, lsr r7
    5494:	00042721 	andeq	r2, r4, r1, lsr #14
    5498:	003a4300 	eorseq	r4, sl, r0, lsl #6
    549c:	041b2100 	ldreq	r2, [fp], #-256	; 0x100
    54a0:	3a570000 	bcc	15c54a8 <_Min_Stack_Size+0x15c50a8>
    54a4:	0f210000 	svceq	0x00210000
    54a8:	6a000004 	bvs	54c0 <_Min_Stack_Size+0x50c0>
    54ac:	2500003a 	strcs	r0, [r0, #-58]	; 0x3a
    54b0:	00000730 	andeq	r0, r0, r0, lsr r7
    54b4:	00043322 	andeq	r3, r4, r2, lsr #6
    54b8:	003a8500 	eorseq	r8, sl, r0, lsl #10
    54bc:	043f2200 	ldrteq	r2, [pc], #-512	; 54c4 <_Min_Stack_Size+0x50c4>
    54c0:	3a980000 	bcc	fe6054c8 <_estack+0xde5d54c8>
    54c4:	4b220000 	blmi	8854cc <_Min_Stack_Size+0x8850cc>
    54c8:	ab000004 	blge	54e0 <_Min_Stack_Size+0x50e0>
    54cc:	2600003a 			; <UNDEFINED> instruction: 0x2600003a
    54d0:	00000750 	andeq	r0, r0, r0, asr r7
    54d4:	000017d5 	ldrdeq	r1, [r0], -r5
    54d8:	00045c22 	andeq	r5, r4, r2, lsr #24
    54dc:	003a5700 	eorseq	r5, sl, r0, lsl #14
    54e0:	8e2f0000 	cdphi	0, 2, cr0, cr15, cr0, {0}
    54e4:	10080027 	andne	r0, r8, r7, lsr #32
    54e8:	ec000000 	stc	0, cr0, [r0], {-0}
    54ec:	22000017 	andcs	r0, r0, #23
    54f0:	0000046a 	andeq	r0, r0, sl, ror #8
    54f4:	00003abe 			; <UNDEFINED> instruction: 0x00003abe
    54f8:	03c93800 	biceq	r3, r9, #0, 16
    54fc:	27bc0000 	ldrcs	r0, [ip, r0]!
    5500:	001a0800 	andseq	r0, sl, r0, lsl #16
    5504:	bd010000 	stclt	0, cr0, [r1, #-0]
    5508:	03da320b 	bicseq	r3, sl, #-1342177280	; 0xb0000000
    550c:	bc2b0000 	stclt	0, cr0, [fp], #-0
    5510:	1a080027 	bne	2055b4 <_Min_Stack_Size+0x2051b4>
    5514:	22000000 	andcs	r0, r0, #0
    5518:	000003e6 	andeq	r0, r0, r6, ror #7
    551c:	00003ad1 	ldrdeq	r3, [r0], -r1
    5520:	00000000 	andeq	r0, r0, r0
    5524:	fe240000 	cdp2	0, 2, cr0, cr4, cr0, {0}
    5528:	f2000003 	vhadd.s8	d0, d0, d3
    552c:	70080025 	andvc	r0, r8, r5, lsr #32
    5530:	01000007 	tsteq	r0, r7
    5534:	18f706de 	ldmne	r7!, {r1, r2, r3, r4, r6, r7, r9, sl}^
    5538:	27210000 	strcs	r0, [r1, -r0]!
    553c:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    5540:	2100003a 	tstcs	r0, sl, lsr r0
    5544:	0000041b 	andeq	r0, r0, fp, lsl r4
    5548:	00003b1c 	andeq	r3, r0, ip, lsl fp
    554c:	00040f21 	andeq	r0, r4, r1, lsr #30
    5550:	003b4700 	eorseq	r4, fp, r0, lsl #14
    5554:	07702500 	ldrbeq	r2, [r0, -r0, lsl #10]!
    5558:	332c0000 	teqcc	ip, #0
    555c:	2c000004 	stccs	0, cr0, [r0], {4}
    5560:	0000043f 	andeq	r0, r0, pc, lsr r4
    5564:	00044b22 	andeq	r4, r4, r2, lsr #22
    5568:	003b7500 	eorseq	r7, fp, r0, lsl #10
    556c:	07782500 	ldrbeq	r2, [r8, -r0, lsl #10]!
    5570:	27210000 	strcs	r0, [r1, -r0]!
    5574:	ab000004 	blge	558c <_Min_Stack_Size+0x518c>
    5578:	2100003b 	tstcs	r0, fp, lsr r0
    557c:	0000041b 	andeq	r0, r0, fp, lsl r4
    5580:	00003bbf 			; <UNDEFINED> instruction: 0x00003bbf
    5584:	00040f21 	andeq	r0, r4, r1, lsr #30
    5588:	003bdf00 	eorseq	sp, fp, r0, lsl #30
    558c:	07782500 	ldrbeq	r2, [r8, -r0, lsl #10]!
    5590:	33220000 	teqcc	r2, #0
    5594:	fa000004 	blx	55ac <_Min_Stack_Size+0x51ac>
    5598:	2200003b 	andcs	r0, r0, #59	; 0x3b
    559c:	0000043f 	andeq	r0, r0, pc, lsr r4
    55a0:	00003c0d 	andeq	r3, r0, sp, lsl #24
    55a4:	00044b22 	andeq	r4, r4, r2, lsr #22
    55a8:	003c2000 	eorseq	r2, ip, r0
    55ac:	07982600 	ldreq	r2, [r8, r0, lsl #12]
    55b0:	18b30000 	ldmne	r3!, {}	; <UNPREDICTABLE>
    55b4:	5c220000 	stcpl	0, cr0, [r2], #-0
    55b8:	bf000004 	svclt	0x00000004
    55bc:	0000003b 	andeq	r0, r0, fp, lsr r0
    55c0:	00280a2f 	eoreq	r0, r8, pc, lsr #20
    55c4:	00001008 	andeq	r1, r0, r8
    55c8:	0018ca00 	andseq	ip, r8, r0, lsl #20
    55cc:	046a2200 	strbteq	r2, [sl], #-512	; 0x200
    55d0:	3c330000 	ldccc	0, cr0, [r3], #-0
    55d4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    55d8:	000003c9 	andeq	r0, r0, r9, asr #7
    55dc:	08002838 	stmdaeq	r0, {r3, r4, r5, fp, sp}
    55e0:	0000001a 	andeq	r0, r0, sl, lsl r0
    55e4:	320bbd01 	andcc	fp, fp, #1, 26	; 0x40
    55e8:	000003da 	ldrdeq	r0, [r0], -sl
    55ec:	0028382b 	eoreq	r3, r8, fp, lsr #16
    55f0:	00001a08 	andeq	r1, r0, r8, lsl #20
    55f4:	03e62200 	mvneq	r2, #0, 4
    55f8:	3c530000 	mracc	r0, r3, acc0
	...
    5604:	0003fe24 	andeq	pc, r3, r4, lsr #28
    5608:	0025fa00 	eoreq	pc, r5, r0, lsl #20
    560c:	0007b808 	andeq	fp, r7, r8, lsl #16
    5610:	06e40100 	strbteq	r0, [r4], r0, lsl #2
    5614:	000019cd 	andeq	r1, r0, sp, asr #19
    5618:	00042721 	andeq	r2, r4, r1, lsr #14
    561c:	003c7200 	eorseq	r7, ip, r0, lsl #4
    5620:	041b2100 	ldreq	r2, [fp], #-256	; 0x100
    5624:	3c9e0000 	ldccc	0, cr0, [lr], {0}
    5628:	0f210000 	svceq	0x00210000
    562c:	d6000004 	strle	r0, [r0], -r4
    5630:	2500003c 	strcs	r0, [r0, #-60]	; 0x3c
    5634:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    5638:	0004332c 	andeq	r3, r4, ip, lsr #6
    563c:	043f2c00 	ldrteq	r2, [pc], #-3072	; 5644 <_Min_Stack_Size+0x5244>
    5640:	4b220000 	blmi	885648 <_Min_Stack_Size+0x885248>
    5644:	04000004 	streq	r0, [r0], #-4
    5648:	2500003d 	strcs	r0, [r0, #-61]	; 0x3d
    564c:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5650:	00042731 	andeq	r2, r4, r1, lsr r7
    5654:	1b300400 	blne	c0665c <_Min_Stack_Size+0xc0625c>
    5658:	06000004 	streq	r0, [r0], -r4
    565c:	0000fc03 	andeq	pc, r0, r3, lsl #24
    5660:	0f329f20 	svceq	0x00329f20
    5664:	25000004 	strcs	r0, [r0, #-4]
    5668:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    566c:	00043323 	andeq	r3, r4, r3, lsr #6
    5670:	23530100 	cmpcs	r3, #0, 2
    5674:	0000043f 	andeq	r0, r0, pc, lsr r4
    5678:	4b235a01 	blmi	8dbe84 <_Min_Stack_Size+0x8dba84>
    567c:	01000004 	tsteq	r0, r4
    5680:	08102656 	ldmdaeq	r0, {r1, r2, r4, r6, r9, sl, sp}
    5684:	198a0000 	stmibne	sl, {}	; <UNPREDICTABLE>
    5688:	5c230000 	stcpl	0, cr0, [r3], #-0
    568c:	06000004 	streq	r0, [r0], -r4
    5690:	0000fc03 	andeq	pc, r0, r3, lsl #24
    5694:	26009f20 	strcs	r9, [r0], -r0, lsr #30
    5698:	00000838 	andeq	r0, r0, r8, lsr r8
    569c:	000019a0 	andeq	r1, r0, r0, lsr #19
    56a0:	00046a23 	andeq	r6, r4, r3, lsr #20
    56a4:	fc030600 	stc2	6, cr0, [r3], {-0}
    56a8:	9f200000 	svcls	0x00200000
    56ac:	03c93800 	biceq	r3, r9, #0, 16
    56b0:	28d20000 	ldmcs	r2, {}^	; <UNPREDICTABLE>
    56b4:	001a0800 	andseq	r0, sl, r0, lsl #16
    56b8:	bd010000 	stclt	0, cr0, [r1, #-0]
    56bc:	03da320b 	bicseq	r3, sl, #-1342177280	; 0xb0000000
    56c0:	d22b0000 	eorle	r0, fp, #0
    56c4:	1a080028 	bne	20576c <_Min_Stack_Size+0x20536c>
    56c8:	22000000 	andcs	r0, r0, #0
    56cc:	000003e6 	andeq	r0, r0, r6, ror #7
    56d0:	00003d2f 	andeq	r3, r0, pc, lsr #26
    56d4:	00000000 	andeq	r0, r0, r0
    56d8:	fe240000 	cdp2	0, 2, cr0, cr4, cr0, {0}
    56dc:	0c000003 	stceq	0, cr0, [r0], {3}
    56e0:	68080026 	stmdavs	r8, {r1, r2, r5}
    56e4:	01000008 	tsteq	r0, r8
    56e8:	1aa706ec 	bne	fe9c72a0 <_estack+0xde9972a0>
    56ec:	27210000 	strcs	r0, [r1, -r0]!
    56f0:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    56f4:	2100003d 	tstcs	r0, sp, lsr r0
    56f8:	0000041b 	andeq	r0, r0, fp, lsl r4
    56fc:	00003d6e 	andeq	r3, r0, lr, ror #26
    5700:	00040f21 	andeq	r0, r4, r1, lsr #30
    5704:	003d9600 	eorseq	r9, sp, r0, lsl #12
    5708:	08682500 	stmdaeq	r8!, {r8, sl, sp}^
    570c:	332c0000 	teqcc	ip, #0
    5710:	2c000004 	stccs	0, cr0, [r0], {4}
    5714:	0000043f 	andeq	r0, r0, pc, lsr r4
    5718:	00044b22 	andeq	r4, r4, r2, lsr #22
    571c:	003dc400 	eorseq	ip, sp, r0, lsl #8
    5720:	08782500 	ldmdaeq	r8!, {r8, sl, sp}^
    5724:	27210000 	strcs	r0, [r1, -r0]!
    5728:	ef000004 	svc	0x00000004
    572c:	2100003d 	tstcs	r0, sp, lsr r0
    5730:	0000041b 	andeq	r0, r0, fp, lsl r4
    5734:	00003e03 	andeq	r3, r0, r3, lsl #28
    5738:	00040f21 	andeq	r0, r4, r1, lsr #30
    573c:	003e1b00 	eorseq	r1, lr, r0, lsl #22
    5740:	08782500 	ldmdaeq	r8!, {r8, sl, sp}^
    5744:	33220000 	teqcc	r2, #0
    5748:	36000004 	strcc	r0, [r0], -r4
    574c:	2200003e 	andcs	r0, r0, #62	; 0x3e
    5750:	0000043f 	andeq	r0, r0, pc, lsr r4
    5754:	00003e49 	andeq	r3, r0, r9, asr #28
    5758:	00044b22 	andeq	r4, r4, r2, lsr #22
    575c:	003e5c00 	eorseq	r5, lr, r0, lsl #24
    5760:	08982600 	ldmeq	r8, {r9, sl, sp}
    5764:	1a670000 	bne	19c576c <_Min_Stack_Size+0x19c536c>
    5768:	5c220000 	stcpl	0, cr0, [r2], #-0
    576c:	03000004 	movweq	r0, #4
    5770:	0000003e 	andeq	r0, r0, lr, lsr r0
    5774:	0008c026 	andeq	ip, r8, r6, lsr #32
    5778:	001a7a00 	andseq	r7, sl, r0, lsl #20
    577c:	046a2200 	strbteq	r2, [sl], #-512	; 0x200
    5780:	3e6f0000 	cdpcc	0, 6, cr0, cr15, cr0, {0}
    5784:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5788:	000003c9 	andeq	r0, r0, r9, asr #7
    578c:	08002740 	stmdaeq	r0, {r6, r8, r9, sl, sp}
    5790:	0000001a 	andeq	r0, r0, sl, lsl r0
    5794:	320bbd01 	andcc	fp, fp, #1, 26	; 0x40
    5798:	000003da 	ldrdeq	r0, [r0], -sl
    579c:	0027402b 	eoreq	r4, r7, fp, lsr #32
    57a0:	00001a08 	andeq	r1, r0, r8, lsl #20
    57a4:	03e62200 	mvneq	r2, #0, 4
    57a8:	3e870000 	cdpcc	0, 8, cr0, cr7, cr0, {0}
	...
    57b4:	00262e27 	eoreq	r2, r6, r7, lsr #28
    57b8:	00125b08 	andseq	r5, r2, r8, lsl #22
    57bc:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    57c0:	07000004 	streq	r0, [r0, -r4]
    57c4:	00000105 	andeq	r0, r0, r5, lsl #2
    57c8:	001ac007 	andseq	ip, sl, r7
    57cc:	c8040600 	stmdagt	r4, {r9, sl}
    57d0:	20000000 	andcs	r0, r0, r0
    57d4:	00000b4b 	andeq	r0, r0, fp, asr #22
    57d8:	080028fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp}
    57dc:	00000096 	muleq	r0, r6, r0
    57e0:	1af69c01 	bne	ffdac7ec <_estack+0xdfd7c7ec>
    57e4:	f8260000 			; <UNDEFINED> instruction: 0xf8260000
    57e8:	ec000008 	stc	0, cr0, [r0], {8}
    57ec:	2200001a 	andcs	r0, r0, #26
    57f0:	00000b59 	andeq	r0, r0, r9, asr fp
    57f4:	00003ea6 	andeq	r3, r0, r6, lsr #29
    57f8:	298a2700 	stmibcs	sl, {r8, r9, sl, sp}
    57fc:	23870800 	orrcs	r0, r7, #0, 16
    5800:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5804:	00001670 	andeq	r1, r0, r0, ror r6
    5808:	94087301 	strls	r7, [r8], #-769	; 0x301
    580c:	8e080029 	cdphi	0, 0, cr0, cr8, cr9, {1}
    5810:	01000000 	mrseq	r0, (UNDEF: 0)
    5814:	001bbe9c 	mulseq	fp, ip, lr
    5818:	0d282900 	stceq	9, cr2, [r8, #-0]
    581c:	73010000 	movwvc	r0, #4096	; 0x1000
    5820:	00048f08 	andeq	r8, r4, r8, lsl #30
    5824:	003ed100 	eorseq	sp, lr, r0, lsl #2
    5828:	1c472900 	mcrrne	9, 0, r2, r7, cr0
    582c:	73010000 	movwvc	r0, #4096	; 0x1000
    5830:	00058708 	andeq	r8, r5, r8, lsl #14
    5834:	003f0b00 	eorseq	r0, pc, r0, lsl #22
    5838:	10dd1b00 	sbcsne	r1, sp, r0, lsl #22
    583c:	75010000 	strvc	r0, [r1, #-0]
    5840:	00011008 	andeq	r1, r1, r8
    5844:	003f7300 	eorseq	r7, pc, r0, lsl #6
    5848:	056d2400 	strbeq	r2, [sp, #-1024]!	; 0x400
    584c:	29c20000 	stmibcs	r2, {}^	; <UNPREDICTABLE>
    5850:	09100800 	ldmdbeq	r0, {fp}
    5854:	9f010000 	svcls	0x00010000
    5858:	001b7f08 	andseq	r7, fp, r8, lsl #30
    585c:	057a2100 	ldrbeq	r2, [sl, #-256]!	; 0x100
    5860:	3f730000 	svccc	0x00730000
    5864:	30260000 	eorcc	r0, r6, r0
    5868:	75000009 	strvc	r0, [r0, #-9]
    586c:	2100001b 	tstcs	r0, fp, lsl r0
    5870:	0000057a 	andeq	r0, r0, sl, ror r5
    5874:	00003f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    5878:	002a082d 	eoreq	r0, sl, sp, lsr #16
    587c:	0023e708 	eoreq	lr, r3, r8, lsl #14
    5880:	e0270000 	eor	r0, r7, r0
    5884:	e7080029 	str	r0, [r8, -r9, lsr #32]
    5888:	00000023 	andeq	r0, r0, r3, lsr #32
    588c:	0029ac1c 	eoreq	sl, r9, ip, lsl ip
    5890:	0023e708 	eoreq	lr, r3, r8, lsl #14
    5894:	001b9400 	andseq	r9, fp, r0, lsl #8
    5898:	50011d00 	andpl	r1, r1, r0, lsl #26
    589c:	5001f303 	andpl	pc, r1, r3, lsl #6
    58a0:	29b42700 	ldmibcs	r4!, {r8, r9, sl, sp}
    58a4:	23990800 	orrscs	r0, r9, #0, 16
    58a8:	1c390000 	ldcne	0, cr0, [r9], #-0
    58ac:	6908002a 	stmdbvs	r8, {r1, r3, r5}
    58b0:	b4000023 	strlt	r0, [r0], #-35	; 0x23
    58b4:	1d00001b 	stcne	0, cr0, [r0, #-108]	; 0xffffff94
    58b8:	03055001 	movweq	r5, #20481	; 0x5001
    58bc:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    58c0:	2a202700 	bcs	80f4c8 <_Min_Stack_Size+0x80f0c8>
    58c4:	23870800 	orrcs	r0, r7, #0, 16
    58c8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    58cc:	00001231 	andeq	r1, r0, r1, lsr r2
    58d0:	2408ae01 	strcs	sl, [r8], #-3585	; 0xe01
    58d4:	aa08002a 	bge	205984 <_Min_Stack_Size+0x205584>
    58d8:	01000000 	mrseq	r0, (UNDEF: 0)
    58dc:	001c8f9c 	mulseq	ip, ip, pc	; <UNPREDICTABLE>
    58e0:	0d282900 	stceq	9, cr2, [r8, #-0]
    58e4:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    58e8:	00047e08 	andeq	r7, r4, r8, lsl #28
    58ec:	003fb100 	eorseq	fp, pc, r0, lsl #2
    58f0:	0e8d2900 	cdpeq	9, 8, cr2, cr13, cr0, {0}
    58f4:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    58f8:	00058708 	andeq	r8, r5, r8, lsl #14
    58fc:	00400400 	subeq	r0, r0, r0, lsl #8
    5900:	1c472900 	mcrrne	9, 0, r2, r7, cr0
    5904:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    5908:	00058708 	andeq	r8, r5, r8, lsl #14
    590c:	00405700 	subeq	r5, r0, r0, lsl #14
    5910:	10dd1b00 	sbcsne	r1, sp, r0, lsl #22
    5914:	b0010000 	andlt	r0, r1, r0
    5918:	00011008 	andeq	r1, r1, r8
    591c:	0040d600 	subeq	sp, r0, r0, lsl #12
    5920:	056d2400 	strbeq	r2, [sp, #-1024]!	; 0x400
    5924:	2a6e0000 	bcs	1b8592c <_Min_Stack_Size+0x1b8552c>
    5928:	09480800 	stmdbeq	r8, {fp}^
    592c:	e1010000 	mrs	r0, (UNDEF: 1)
    5930:	001c5708 	andseq	r5, ip, r8, lsl #14
    5934:	057a2100 	ldrbeq	r2, [sl, #-256]!	; 0x100
    5938:	40d60000 	sbcsmi	r0, r6, r0
    593c:	70260000 	eorvc	r0, r6, r0
    5940:	4d000009 	stcmi	0, cr0, [r0, #-36]	; 0xffffffdc
    5944:	2100001c 	tstcs	r0, ip, lsl r0
    5948:	0000057a 	andeq	r0, r0, sl, ror r5
    594c:	00004100 	andeq	r4, r0, r0, lsl #2
    5950:	002aba2d 	eoreq	fp, sl, sp, lsr #20
    5954:	0023e708 	eoreq	lr, r3, r8, lsl #14
    5958:	8c270000 	stchi	0, cr0, [r7], #-0
    595c:	e708002a 	str	r0, [r8, -sl, lsr #32]
    5960:	00000023 	andeq	r0, r0, r3, lsr #32
    5964:	002a3c27 	eoreq	r3, sl, r7, lsr #24
    5968:	00238708 	eoreq	r8, r3, r8, lsl #14
    596c:	2a582700 	bcs	160f574 <_Min_Stack_Size+0x160f174>
    5970:	23690800 	cmncs	r9, #0, 16
    5974:	60270000 	eorvs	r0, r7, r0
    5978:	9908002a 	stmdbls	r8, {r1, r3, r5}
    597c:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    5980:	08002aa2 	stmdaeq	r0, {r1, r5, r7, r9, fp, sp}
    5984:	00002387 	andeq	r2, r0, r7, lsl #7
    5988:	002ace3a 	eoreq	ip, sl, sl, lsr lr
    598c:	00236908 	eoreq	r6, r3, r8, lsl #18
    5990:	50011d00 	andpl	r1, r1, r0, lsl #26
    5994:	01d00305 	bicseq	r0, r0, r5, lsl #6
    5998:	00002000 	andeq	r2, r0, r0
    599c:	0019d828 	andseq	sp, r9, r8, lsr #16
    59a0:	08f20100 	ldmeq	r2!, {r8}^
    59a4:	08002ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, sp}
    59a8:	00000074 	andeq	r0, r0, r4, ror r0
    59ac:	1d409c01 	stclne	12, cr9, [r0, #-4]
    59b0:	28290000 	stmdacs	r9!, {}	; <UNPREDICTABLE>
    59b4:	0100000d 	tsteq	r0, sp
    59b8:	048f08f2 	streq	r0, [pc], #2290	; 59c0 <_Min_Stack_Size+0x55c0>
    59bc:	411f0000 	tstmi	pc, r0
    59c0:	47290000 	strmi	r0, [r9, -r0]!
    59c4:	0100001c 	tsteq	r0, ip, lsl r0
    59c8:	058708f2 	streq	r0, [r7, #2290]	; 0x8f2
    59cc:	41590000 	cmpmi	r9, r0
    59d0:	dd1b0000 	ldcle	0, cr0, [fp, #-0]
    59d4:	01000010 	tsteq	r0, r0, lsl r0
    59d8:	011008f4 			; <UNDEFINED> instruction: 0x011008f4
    59dc:	41a90000 			; <UNDEFINED> instruction: 0x41a90000
    59e0:	6d240000 	stcvs	0, cr0, [r4, #-0]
    59e4:	f8000005 			; <UNDEFINED> instruction: 0xf8000005
    59e8:	8808002a 	stmdahi	r8, {r1, r3, r5}
    59ec:	01000009 	tsteq	r0, r9
    59f0:	1d180917 	ldcne	9, cr0, [r8, #-92]	; 0xffffffa4
    59f4:	7a210000 	bvc	8459fc <_Min_Stack_Size+0x8455fc>
    59f8:	a9000005 	stmdbge	r0, {r0, r2}
    59fc:	26000041 	strcs	r0, [r0], -r1, asr #32
    5a00:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    5a04:	00001d0e 	andeq	r1, r0, lr, lsl #26
    5a08:	00057a21 	andeq	r7, r5, r1, lsr #20
    5a0c:	0041d300 	subeq	sp, r1, r0, lsl #6
    5a10:	2b442d00 	blcs	1110e18 <_Min_Stack_Size+0x1110a18>
    5a14:	23e70800 	mvncs	r0, #0, 16
    5a18:	27000000 	strcs	r0, [r0, -r0]
    5a1c:	08002b16 	stmdaeq	r0, {r1, r2, r4, r8, r9, fp, sp}
    5a20:	000023e7 	andeq	r2, r0, r7, ror #7
    5a24:	2ae61c00 	bcs	ff98ca2c <_estack+0xdf95ca2c>
    5a28:	23690800 	cmncs	r9, #0, 16
    5a2c:	1d2d0000 	stcne	0, cr0, [sp, #-0]
    5a30:	011d0000 	tsteq	sp, r0
    5a34:	01f30350 	mvnseq	r0, r0, asr r3
    5a38:	ee270050 	mcr	0, 1, r0, cr7, cr0, {2}
    5a3c:	9908002a 	stmdbls	r8, {r1, r3, r5}
    5a40:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    5a44:	08002b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, sp}
    5a48:	00002387 	andeq	r2, r0, r7, lsl #7
    5a4c:	187c2e00 	ldmdane	ip!, {r9, sl, fp, sp}^
    5a50:	1d010000 	stcne	0, cr0, [r1, #-0]
    5a54:	0000fa09 	andeq	pc, r0, r9, lsl #20
    5a58:	002b4400 	eoreq	r4, fp, r0, lsl #8
    5a5c:	00008a08 	andeq	r8, r0, r8, lsl #20
    5a60:	eb9c0100 	bl	fe705e68 <_estack+0xde6d5e68>
    5a64:	2900001d 	stmdbcs	r0, {r0, r2, r3, r4}
    5a68:	00000d28 	andeq	r0, r0, r8, lsr #26
    5a6c:	eb091d01 	bl	24ce78 <_Min_Stack_Size+0x24ca78>
    5a70:	f200001d 	vqadd.s8	d0, d0, d13
    5a74:	34000041 	strcc	r0, [r0], #-65	; 0x41
    5a78:	00001bac 	andeq	r1, r0, ip, lsr #23
    5a7c:	ae091f01 	cdpge	15, 0, cr1, cr9, cr1, {0}
    5a80:	01000004 	tsteq	r0, r4
    5a84:	12511b54 	subsne	r1, r1, #84, 22	; 0x15000
    5a88:	20010000 	andcs	r0, r1, r0
    5a8c:	0000fa09 	andeq	pc, r0, r9, lsl #20
    5a90:	00422c00 	subeq	r2, r2, r0, lsl #24
    5a94:	2b581c00 	blcs	160ca9c <_Min_Stack_Size+0x160c69c>
    5a98:	23990800 	orrscs	r0, r9, #0, 16
    5a9c:	1d9c0000 	ldcne	0, cr0, [ip]
    5aa0:	011d0000 	tsteq	sp, r0
    5aa4:	00750250 	rsbseq	r0, r5, r0, asr r2
    5aa8:	2b6c1c00 	blcs	1b0cab0 <_Min_Stack_Size+0x1b0c6b0>
    5aac:	23990800 	orrscs	r0, r9, #0, 16
    5ab0:	1db00000 	ldcne	0, cr0, [r0]
    5ab4:	011d0000 	tsteq	sp, r0
    5ab8:	00750250 	rsbseq	r0, r5, r0, asr r2
    5abc:	2b941c00 	blcs	fe50cac4 <_estack+0xde4dcac4>
    5ac0:	23690800 	cmncs	r9, #0, 16
    5ac4:	1dc40000 	stclne	0, cr0, [r4]
    5ac8:	011d0000 	tsteq	sp, r0
    5acc:	00750251 	rsbseq	r0, r5, r1, asr r2
    5ad0:	2bc61c00 	blcs	ff18cad8 <_estack+0xdf15cad8>
    5ad4:	23690800 	cmncs	r9, #0, 16
    5ad8:	1de10000 	stclne	0, cr0, [r1]
    5adc:	011d0000 	tsteq	sp, r0
    5ae0:	00750251 	rsbseq	r0, r5, r1, asr r2
    5ae4:	0550011d 	ldrbeq	r0, [r0, #-285]	; 0x11d
    5ae8:	00018003 	andeq	r8, r1, r3
    5aec:	cc270020 	stcgt	0, cr0, [r7], #-128	; 0xffffff80
    5af0:	8708002b 	strhi	r0, [r8, -fp, lsr #32]
    5af4:	00000023 	andeq	r0, r0, r3, lsr #32
    5af8:	001df007 	andseq	pc, sp, r7
    5afc:	f6040600 			; <UNDEFINED> instruction: 0xf6040600
    5b00:	0700001d 	smladeq	r0, sp, r0, r0
    5b04:	000001e8 	andeq	r0, r0, r8, ror #3
    5b08:	00143e2e 	andseq	r3, r4, lr, lsr #28
    5b0c:	09530100 	ldmdbeq	r3, {r8}^
    5b10:	000000fa 	strdeq	r0, [r0], -sl
    5b14:	08002bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, sp}
    5b18:	0000007e 	andeq	r0, r0, lr, ror r0
    5b1c:	1ea59c01 	cdpne	12, 10, cr9, cr5, cr1, {0}
    5b20:	5e290000 	cdppl	0, 2, cr0, cr9, cr0, {0}
    5b24:	01000021 	tsteq	r0, r1, lsr #32
    5b28:	01e20953 	mvneq	r0, r3, asr r9
    5b2c:	424b0000 	submi	r0, fp, #0
    5b30:	8d290000 	stchi	0, cr0, [r9, #-0]
    5b34:	0100000e 	tsteq	r0, lr
    5b38:	05870953 	streq	r0, [r7, #2387]	; 0x953
    5b3c:	429e0000 	addsmi	r0, lr, #0
    5b40:	ac1b0000 	ldcge	0, cr0, [fp], {-0}
    5b44:	0100001b 	tsteq	r0, fp, lsl r0
    5b48:	04ae0955 	strteq	r0, [lr], #2389	; 0x955
    5b4c:	42f10000 	rscsmi	r0, r1, #0
    5b50:	511b0000 	tstpl	fp, r0
    5b54:	01000012 	tsteq	r0, r2, lsl r0
    5b58:	00fa0956 	rscseq	r0, sl, r6, asr r9
    5b5c:	430f0000 	movwmi	r0, #61440	; 0xf000
    5b60:	f01c0000 			; <UNDEFINED> instruction: 0xf01c0000
    5b64:	9908002b 	stmdbls	r8, {r0, r1, r3, r5}
    5b68:	6a000023 	bvs	5bfc <_Min_Stack_Size+0x57fc>
    5b6c:	1d00001e 	stcne	0, cr0, [r0, #-120]	; 0xffffff88
    5b70:	f3035001 	vhadd.u8	d5, d3, d1
    5b74:	1c005001 	stcne	0, cr5, [r0], {1}
    5b78:	08002bf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, fp, sp}
    5b7c:	00002399 	muleq	r0, r9, r3
    5b80:	00001e7e 	andeq	r1, r0, lr, ror lr
    5b84:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    5b88:	1c000075 	stcne	0, cr0, [r0], {117}	; 0x75
    5b8c:	08002c1e 	stmdaeq	r0, {r1, r2, r3, r4, sl, fp, sp}
    5b90:	00002369 	andeq	r2, r0, r9, ror #6
    5b94:	00001e92 	muleq	r0, r2, lr
    5b98:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    5b9c:	27000075 	smlsdxcs	r0, r5, r0, r0
    5ba0:	08002c46 	stmdaeq	r0, {r1, r2, r6, sl, fp, sp}
    5ba4:	00002387 	andeq	r2, r0, r7, lsl #7
    5ba8:	002c4c27 	eoreq	r4, ip, r7, lsr #24
    5bac:	00238708 	eoreq	r8, r3, r8, lsl #14
    5bb0:	af200000 	svcge	0x00200000
    5bb4:	50000005 	andpl	r0, r0, r5
    5bb8:	2408002c 	strcs	r0, [r8], #-44	; 0x2c
    5bbc:	01000000 	mrseq	r0, (UNDEF: 0)
    5bc0:	001ecb9c 	mulseq	lr, ip, fp
    5bc4:	05bc2100 	ldreq	r2, [ip, #256]!	; 0x100
    5bc8:	432e0000 	teqmi	lr, #0
    5bcc:	72270000 	eorvc	r0, r7, #0
    5bd0:	8708002c 	strhi	r0, [r8, -ip, lsr #32]
    5bd4:	00000023 	andeq	r0, r0, r3, lsr #32
    5bd8:	0019272e 	andseq	r2, r9, lr, lsr #14
    5bdc:	09880100 	stmibeq	r8, {r8}
    5be0:	000000fa 	strdeq	r0, [r0], -sl
    5be4:	08002c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, sp}
    5be8:	00000074 	andeq	r0, r0, r4, ror r0
    5bec:	1f809c01 	svcne	0x00809c01
    5bf0:	dd290000 	stcle	0, cr0, [r9, #-0]
    5bf4:	0100001d 	tsteq	r0, sp, lsl r0
    5bf8:	05c90988 	strbeq	r0, [r9, #2440]	; 0x988
    5bfc:	434f0000 	movtmi	r0, #61440	; 0xf000
    5c00:	46290000 	strtmi	r0, [r9], -r0
    5c04:	0100001c 	tsteq	r0, ip, lsl r0
    5c08:	141d0988 	ldrne	r0, [sp], #-2440	; 0x988
    5c0c:	43990000 	orrsmi	r0, r9, #0
    5c10:	511b0000 	tstpl	fp, r0
    5c14:	01000012 	tsteq	r0, r2, lsl r0
    5c18:	00fa098a 	rscseq	r0, sl, sl, lsl #19
    5c1c:	44230000 	strtmi	r0, [r3], #-0
    5c20:	c8260000 	stmdagt	r6!, {}	; <UNPREDICTABLE>
    5c24:	49000009 	stmdbmi	r0, {r0, r3}
    5c28:	1b00001f 	blne	5cac <_Min_Stack_Size+0x58ac>
    5c2c:	00001c92 	muleq	r0, r2, ip
    5c30:	87099201 	strhi	r9, [r9, -r1, lsl #4]
    5c34:	4c000005 	stcmi	0, cr0, [r0], {5}
    5c38:	37000044 	strcc	r0, [r0, -r4, asr #32]
    5c3c:	000005af 	andeq	r0, r0, pc, lsr #11
    5c40:	08002cb2 	stmdaeq	r0, {r1, r4, r5, r7, sl, fp, sp}
    5c44:	000009e8 	andeq	r0, r0, r8, ror #19
    5c48:	2109ab01 	tstcs	r9, r1, lsl #22
    5c4c:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    5c50:	00004475 	andeq	r4, r0, r5, ror r4
    5c54:	84270000 	strthi	r0, [r7], #-0
    5c58:	6208002c 	andvs	r0, r8, #44	; 0x2c
    5c5c:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    5c60:	08002cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, sp}
    5c64:	00002380 	andeq	r2, r0, r0, lsl #7
    5c68:	002cce27 	eoreq	ip, ip, r7, lsr #28
    5c6c:	00238008 	eoreq	r8, r3, r8
    5c70:	2cd82700 	ldclcs	7, cr2, [r8], {0}
    5c74:	23800800 	orrcs	r0, r0, #0, 16
    5c78:	e0270000 	eor	r0, r7, r0
    5c7c:	8708002c 	strhi	r0, [r8, -ip, lsr #32]
    5c80:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    5c84:	08002ce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp, sp}
    5c88:	00002387 	andeq	r2, r0, r7, lsl #7
    5c8c:	186b3b00 	stmdane	fp!, {r8, r9, fp, ip, sp}^
    5c90:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    5c94:	002ce809 	eoreq	lr, ip, r9, lsl #16
    5c98:	00000e08 	andeq	r0, r0, r8, lsl #28
    5c9c:	2e9c0100 	fmlcse	f0, f4, f0
    5ca0:	00002074 	andeq	r2, r0, r4, ror r0
    5ca4:	0509c101 	streq	ip, [r9, #-257]	; 0x101
    5ca8:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
    5cac:	0608002c 	streq	r0, [r8], -ip, lsr #32
    5cb0:	01000000 	mrseq	r0, (UNDEF: 0)
    5cb4:	001fdb9c 	mulseq	pc, ip, fp	; <UNPREDICTABLE>
    5cb8:	1aa12900 	bne	fe8500c0 <_estack+0xde8200c0>
    5cbc:	c1010000 	mrsgt	r0, (UNDEF: 1)
    5cc0:	0001f309 	andeq	pc, r1, r9, lsl #6
    5cc4:	00448800 	subeq	r8, r4, r0, lsl #16
    5cc8:	12503400 	subsne	r3, r0, #0, 8
    5ccc:	c3010000 	movwgt	r0, #4096	; 0x1000
    5cd0:	00010509 	andeq	r0, r1, r9, lsl #10
    5cd4:	1b500100 	blne	14060dc <_Min_Stack_Size+0x1405cdc>
    5cd8:	000020eb 	andeq	r2, r0, fp, ror #1
    5cdc:	ae09c401 	cdpge	4, 0, cr12, cr9, cr1, {0}
    5ce0:	a9000004 	stmdbge	r0, {r2}
    5ce4:	00000044 	andeq	r0, r0, r4, asr #32
    5ce8:	001eff28 	andseq	pc, lr, r8, lsr #30
    5cec:	09d80100 	ldmibeq	r8, {r8}^
    5cf0:	08002d00 	stmdaeq	r0, {r8, sl, fp, sp}
    5cf4:	00000006 	andeq	r0, r0, r6
    5cf8:	201e9c01 	andscs	r9, lr, r1, lsl #24
    5cfc:	a13c0000 	teqge	ip, r0
    5d00:	0100001a 	tsteq	r0, sl, lsl r0
    5d04:	01f309d8 	ldrsbeq	r0, [r3, #152]!	; 0x98
    5d08:	50010000 	andpl	r0, r1, r0
    5d0c:	00219c3c 	eoreq	r9, r1, ip, lsr ip
    5d10:	09d80100 	ldmibeq	r8, {r8}^
    5d14:	00001ab6 			; <UNDEFINED> instruction: 0x00001ab6
    5d18:	eb1b5101 	bl	6da124 <_Min_Stack_Size+0x6d9d24>
    5d1c:	01000020 	tsteq	r0, r0, lsr #32
    5d20:	04ae09da 	strteq	r0, [lr], #2522	; 0x9da
    5d24:	44bc0000 	ldrtmi	r0, [ip], #0
    5d28:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    5d2c:	00001751 	andeq	r1, r0, r1, asr r7
    5d30:	f30c2d01 	vpadd.f32	d2, d12, d1
    5d34:	08000001 	stmdaeq	r0, {r0}
    5d38:	0c08002d 	stceq	0, cr0, [r8], {45}	; 0x2d
    5d3c:	01000000 	mrseq	r0, (UNDEF: 0)
    5d40:	0020479c 	mlaeq	r0, ip, r7, r4
    5d44:	12513400 	subsne	r3, r1, #0, 8
    5d48:	2f010000 	svccs	0x00010000
    5d4c:	0001f30c 	andeq	pc, r1, ip, lsl #6
    5d50:	00500100 	subseq	r0, r0, r0, lsl #2
    5d54:	0013422e 	andseq	r4, r3, lr, lsr #4
    5d58:	0c3e0100 	ldfeqs	f0, [lr], #-0
    5d5c:	000000fa 	strdeq	r0, [r0], -sl
    5d60:	08002d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, sp}
    5d64:	00000024 	andeq	r0, r0, r4, lsr #32
    5d68:	20709c01 	rsbscs	r9, r0, r1, lsl #24
    5d6c:	51340000 	teqpl	r4, r0
    5d70:	01000012 	tsteq	r0, r2, lsl r0
    5d74:	00fa0c40 	rscseq	r0, sl, r0, asr #24
    5d78:	50010000 	andpl	r0, r1, r0
    5d7c:	15df2800 	ldrbne	r2, [pc, #2048]	; 6584 <_Min_Stack_Size+0x6184>
    5d80:	5a010000 	bpl	45d88 <_Min_Stack_Size+0x45988>
    5d84:	002d380c 	eoreq	r3, sp, ip, lsl #16
    5d88:	00007808 	andeq	r7, r0, r8, lsl #16
    5d8c:	ce9c0100 	fmlgte	f0, f4, f0
    5d90:	29000020 	stmdbcs	r0, {r5}
    5d94:	00001f22 	andeq	r1, r0, r2, lsr #30
    5d98:	ea0c5a01 	b	31c5a4 <_Min_Stack_Size+0x31c1a4>
    5d9c:	cf000004 	svcgt	0x00000004
    5da0:	1b000044 	blne	5eb8 <_Min_Stack_Size+0x5ab8>
    5da4:	000020eb 	andeq	r2, r0, fp, ror #1
    5da8:	530c5c01 	movwpl	r5, #52225	; 0xcc01
    5dac:	cf000005 	svcgt	0x00000005
    5db0:	1c000044 	stcne	0, cr0, [r0], {68}	; 0x44
    5db4:	08002d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, sp}
    5db8:	00002399 	muleq	r0, r9, r3
    5dbc:	000020ba 	strheq	r2, [r0], -sl
    5dc0:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    5dc4:	3a000077 	bcc	5fa8 <_Min_Stack_Size+0x5ba8>
    5dc8:	08002db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, sp}
    5dcc:	00002369 	andeq	r2, r0, r9, ror #6
    5dd0:	0551011d 	ldrbeq	r0, [r1, #-285]	; 0x11d
    5dd4:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
    5dd8:	28000004 	stmdacs	r0, {r2}
    5ddc:	00001739 	andeq	r1, r0, r9, lsr r7
    5de0:	b00c9901 	andlt	r9, ip, r1, lsl #18
    5de4:	5208002d 	andpl	r0, r8, #45	; 0x2d
    5de8:	01000000 	mrseq	r0, (UNDEF: 0)
    5dec:	00212c9c 	mlaeq	r1, ip, ip, r2
    5df0:	1f222900 	svcne	0x00222900
    5df4:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    5df8:	0004ea0c 	andeq	lr, r4, ip, lsl #20
    5dfc:	00450800 	subeq	r0, r5, r0, lsl #16
    5e00:	20eb1b00 	rsccs	r1, fp, r0, lsl #22
    5e04:	9b010000 	blls	45e0c <_Min_Stack_Size+0x45a0c>
    5e08:	0005530c 	andeq	r5, r5, ip, lsl #6
    5e0c:	00450800 	subeq	r0, r5, r0, lsl #16
    5e10:	2dc61c00 	stclcs	12, cr1, [r6]
    5e14:	23990800 	orrscs	r0, r9, #0, 16
    5e18:	21180000 	tstcs	r8, r0
    5e1c:	011d0000 	tsteq	sp, r0
    5e20:	00750250 	rsbseq	r0, r5, r0, asr r2
    5e24:	2e003a00 	vmlacs.f32	s6, s0, s0
    5e28:	23690800 	cmncs	r9, #0, 16
    5e2c:	011d0000 	tsteq	sp, r0
    5e30:	01f30551 	mvnseq	r0, r1, asr r5
    5e34:	00042350 	andeq	r2, r4, r0, asr r3
    5e38:	10fd2e00 	rscsne	r2, sp, r0, lsl #28
    5e3c:	cd010000 	stcgt	0, cr0, [r1, #-0]
    5e40:	0001100d 	andeq	r1, r1, sp
    5e44:	002e0400 	eoreq	r0, lr, r0, lsl #8
    5e48:	00001a08 	andeq	r1, r0, r8, lsl #20
    5e4c:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    5e50:	34000021 	strcc	r0, [r0], #-33	; 0x21
    5e54:	00001250 	andeq	r1, r0, r0, asr r2
    5e58:	100dcf01 	andne	ip, sp, r1, lsl #30
    5e5c:	01000001 	tsteq	r0, r1
    5e60:	e80f0050 	stmda	pc, {r4, r6}	; <UNPREDICTABLE>
    5e64:	65000001 	strvs	r0, [r0, #-1]
    5e68:	10000021 	andne	r0, r0, r1, lsr #32
    5e6c:	00000097 	muleq	r0, r7, r0
    5e70:	ef3d0004 	svc	0x003d0004
    5e74:	0100001a 	tsteq	r0, sl, lsl r0
    5e78:	002155be 	strhteq	r5, [r1], -lr
    5e7c:	10030500 	andne	r0, r3, r0, lsl #10
    5e80:	3d200001 	stccc	0, cr0, [r0, #-4]!
    5e84:	00001b1e 	andeq	r1, r0, lr, lsl fp
    5e88:	01e8bf01 	mvneq	fp, r1, lsl #30
    5e8c:	03050000 	movweq	r0, #20480	; 0x5000
    5e90:	200001a4 	andcs	r0, r0, r4, lsr #3
    5e94:	001b303d 	andseq	r3, fp, sp, lsr r0
    5e98:	e8c00100 	stmia	r0, {r8}^
    5e9c:	05000001 	streq	r0, [r0, #-1]
    5ea0:	0001b803 	andeq	fp, r1, r3, lsl #16
    5ea4:	1ed63d20 	cdpne	13, 13, cr3, cr6, cr0, {1}
    5ea8:	c1010000 	mrsgt	r0, (UNDEF: 1)
    5eac:	000021a9 	andeq	r2, r0, r9, lsr #3
    5eb0:	00f00305 	rscseq	r0, r0, r5, lsl #6
    5eb4:	7e0e2000 	cdpvc	0, 0, cr2, cr14, cr0, {0}
    5eb8:	3d000004 	stccc	0, cr0, [r0, #-16]
    5ebc:	00001ca9 	andeq	r1, r0, r9, lsr #25
    5ec0:	21a9c201 			; <UNDEFINED> instruction: 0x21a9c201
    5ec4:	03050000 	movweq	r0, #20480	; 0x5000
    5ec8:	2000019c 	mulcs	r0, ip, r1
    5ecc:	001bf73d 	andseq	pc, fp, sp, lsr r7	; <UNPREDICTABLE>
    5ed0:	e8c30100 	stmia	r3, {r8}^
    5ed4:	05000001 	streq	r0, [r0, #-1]
    5ed8:	00018003 	andeq	r8, r1, r3
    5edc:	1ce03d20 	stclne	13, cr3, [r0], #128	; 0x80
    5ee0:	c7010000 	strgt	r0, [r1, -r0]
    5ee4:	000001e8 	andeq	r0, r0, r8, ror #3
    5ee8:	00fc0305 	rscseq	r0, ip, r5, lsl #6
    5eec:	543d2000 	ldrtpl	r2, [sp], #-0
    5ef0:	0100001c 	tsteq	r0, ip, lsl r0
    5ef4:	0021f2c8 	eoreq	pc, r1, r8, asr #5
    5ef8:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    5efc:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    5f00:	00000105 	andeq	r0, r0, r5, lsl #2
    5f04:	001bc83d 	andseq	ip, fp, sp, lsr r8
    5f08:	e8ce0100 	stmia	lr, {r8}^
    5f0c:	05000001 	streq	r0, [r0, #-1]
    5f10:	0001d003 	andeq	sp, r1, r3
    5f14:	20c53d20 	sbccs	r3, r5, r0, lsr #26
    5f18:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    5f1c:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    5f20:	01780305 	cmneq	r8, r5, lsl #6
    5f24:	633d2000 	teqvs	sp, #0
    5f28:	0100001c 	tsteq	r0, ip, lsl r0
    5f2c:	00222ada 	ldrdeq	r2, [r2], -sl	; <UNPREDICTABLE>
    5f30:	98030500 	stmdals	r3, {r8, sl}
    5f34:	0e200001 	cdpeq	0, 2, cr0, cr0, cr1, {0}
    5f38:	00000110 	andeq	r0, r0, r0, lsl r1
    5f3c:	001abe3d 	andseq	fp, sl, sp, lsr lr
    5f40:	f2db0100 	vaddw.s16	q8, <illegal reg q5.5>, d0
    5f44:	05000021 	streq	r0, [r0, #-33]	; 0x21
    5f48:	0001e403 	andeq	lr, r1, r3, lsl #8
    5f4c:	1ad13d20 	bne	ff4553d4 <_estack+0xdf4253d4>
    5f50:	dc010000 	stcle	0, cr0, [r1], {-0}
    5f54:	00002251 	andeq	r2, r0, r1, asr r2
    5f58:	00f40305 	rscseq	r0, r4, r5, lsl #6
    5f5c:	fa0e2000 	blx	38df64 <_Min_Stack_Size+0x38db64>
    5f60:	3d000000 	stccc	0, cr0, [r0, #-0]
    5f64:	00001f7a 	andeq	r1, r0, sl, ror pc
    5f68:	21f2dd01 	mvnscs	sp, r1, lsl #26
    5f6c:	03050000 	movweq	r0, #20480	; 0x5000
    5f70:	200001cc 	andcs	r0, r0, ip, asr #3
    5f74:	0021bb3d 	eoreq	fp, r1, sp, lsr fp
    5f78:	51de0100 	bicspl	r0, lr, r0, lsl #2
    5f7c:	05000022 	streq	r0, [r0, #-34]	; 0x22
    5f80:	0001e803 	andeq	lr, r1, r3, lsl #16
    5f84:	1e803d20 	cdpne	13, 8, cr3, cr0, cr0, {1}
    5f88:	df010000 	svcle	0x00010000
    5f8c:	00002251 	andeq	r2, r0, r1, asr r2
    5f90:	01940305 	orrseq	r0, r4, r5, lsl #6
    5f94:	ef3d2000 	svc	0x003d2000
    5f98:	0100001d 	tsteq	r0, sp, lsl r0
    5f9c:	000105e0 	andeq	r0, r1, r0, ror #11
    5fa0:	a0030500 	andge	r0, r3, r0, lsl #10
    5fa4:	3d200001 	stccc	0, cr0, [r0, #-4]!
    5fa8:	00001d44 	andeq	r1, r0, r4, asr #26
    5fac:	222ae101 	eorcs	lr, sl, #1073741824	; 0x40000000
    5fb0:	03050000 	movweq	r0, #20480	; 0x5000
    5fb4:	20000014 	andcs	r0, r0, r4, lsl r0
    5fb8:	0020f13d 	eoreq	pc, r0, sp, lsr r1	; <UNPREDICTABLE>
    5fbc:	f2eb0100 	vaddw.s32	q8, <illegal reg q5.5>, d0
    5fc0:	05000021 	streq	r0, [r0, #-33]	; 0x21
    5fc4:	00017403 	andeq	r7, r1, r3, lsl #8
    5fc8:	1e903e20 	cdpne	14, 9, cr3, cr0, cr0, {1}
    5fcc:	bb010000 	bllt	45fd4 <_Min_Stack_Size+0x45bd4>
    5fd0:	000022cd 	andeq	r2, r0, sp, asr #5
    5fd4:	017c0305 	cmneq	ip, r5, lsl #6
    5fd8:	ae0e2000 	cdpge	0, 0, cr2, cr14, cr0, {0}
    5fdc:	3f000004 	svccc	0x00000004
    5fe0:	00000da3 	andeq	r0, r0, r3, lsr #27
    5fe4:	e4015007 	str	r5, [r1], #-7
    5fe8:	09000022 	stmdbeq	r0, {r1, r5}
    5fec:	0000048f 	andeq	r0, r0, pc, lsl #9
    5ff0:	10d04000 	sbcsne	r4, r0, r0
    5ff4:	71090000 	mrsvc	r0, (UNDEF: 9)
    5ff8:	00009e01 	andeq	r9, r0, r1, lsl #28
    5ffc:	0022fa00 	eoreq	pc, r2, r0, lsl #20
    6000:	00250900 	eoreq	r0, r5, r0, lsl #18
    6004:	41000000 	mrsmi	r0, (UNDEF: 0)
    6008:	00001dd6 	ldrdeq	r1, [r0], -r6
    600c:	009e190a 	addseq	r1, lr, sl, lsl #18
    6010:	23190000 	tstcs	r9, #0
    6014:	9e090000 	cdpls	0, 0, cr0, cr9, cr0, {0}
    6018:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    601c:	00000037 	andeq	r0, r0, r7, lsr r0
    6020:	00002509 	andeq	r2, r0, r9, lsl #10
    6024:	593f0000 	ldmdbpl	pc!, {}	; <UNPREDICTABLE>
    6028:	09000012 	stmdbeq	r0, {r1, r4}
    602c:	232b0172 	teqcs	fp, #-2147483620	; 0x8000001c
    6030:	9e090000 	cdpls	0, 0, cr0, cr9, cr0, {0}
    6034:	00000000 	andeq	r0, r0, r0
    6038:	0010e93f 	andseq	lr, r0, pc, lsr r9
    603c:	015b0700 	cmpeq	fp, r0, lsl #14
    6040:	0000233d 	andeq	r2, r0, sp, lsr r3
    6044:	00233d09 	eoreq	r3, r3, r9, lsl #26
    6048:	e2070000 	and	r0, r7, #0
    604c:	40000001 	andmi	r0, r0, r1
    6050:	00001d59 	andeq	r1, r0, r9, asr sp
    6054:	a1016b09 	tstge	r1, r9, lsl #22
    6058:	62000002 	andvs	r0, r0, #2
    605c:	09000023 	stmdbeq	r0, {r0, r1, r5}
    6060:	000002a1 	andeq	r0, r0, r1, lsr #5
    6064:	0000d309 	andeq	sp, r0, r9, lsl #6
    6068:	009e0900 	addseq	r0, lr, r0, lsl #18
    606c:	42000000 	andmi	r0, r0, #0
    6070:	000013b3 			; <UNDEFINED> instruction: 0x000013b3
    6074:	b63f7b06 	ldrtlt	r7, [pc], -r6, lsl #22
    6078:	0700000f 	streq	r0, [r0, -pc]
    607c:	2380017d 	orrcs	r0, r0, #1073741855	; 0x4000001f
    6080:	8f090000 	svchi	0x00090000
    6084:	09000004 	stmdbeq	r0, {r2}
    6088:	0000233d 	andeq	r2, r0, sp, lsr r3
    608c:	13834200 	orrne	r4, r3, #0, 4
    6090:	7c060000 	stcvc	0, cr0, [r6], {-0}
    6094:	000d8c43 	andeq	r8, sp, r3, asr #24
    6098:	c87d0600 	ldmdagt	sp!, {r9, sl}^
    609c:	42000000 	andmi	r0, r0, #0
    60a0:	000013d2 	ldrdeq	r1, [r0], -r2
    60a4:	7c407206 	sfmvc	f7, 2, [r0], {6}
    60a8:	0700000f 	streq	r0, [r0, -pc]
    60ac:	0105018c 	smlabbeq	r5, ip, r1, r0
    60b0:	23af0000 			; <UNDEFINED> instruction: 0x23af0000
    60b4:	3d090000 	stccc	0, cr0, [r9, #-0]
    60b8:	00000023 	andeq	r0, r0, r3, lsr #32
    60bc:	001a4342 	andseq	r4, sl, r2, asr #6
    60c0:	44b40600 	ldrtmi	r0, [r4], #1536	; 0x600
    60c4:	00000e49 	andeq	r0, r0, r9, asr #28
    60c8:	23c77e06 	biccs	r7, r7, #6, 28	; 0x60
    60cc:	c8090000 	stmdagt	r9, {}	; <UNPREDICTABLE>
    60d0:	00000000 	andeq	r0, r0, r0
    60d4:	001b8045 	andseq	r8, fp, r5, asr #32
    60d8:	044d0b00 	strbeq	r0, [sp], #-2816	; 0xb00
    60dc:	000000fa 	strdeq	r0, [r0], -sl
    60e0:	001a6d45 	andseq	r6, sl, r5, asr #26
    60e4:	017b0900 	cmneq	fp, r0, lsl #18
    60e8:	000000fa 	strdeq	r0, [r0], -sl
    60ec:	001f5546 	andseq	r5, pc, r6, asr #10
    60f0:	01820900 	orreq	r0, r2, r0, lsl #18
    60f4:	000db347 	andeq	fp, sp, r7, asr #6
    60f8:	01680700 	cmneq	r8, r0, lsl #14
    60fc:	00048f09 	andeq	r8, r4, r9, lsl #30
    6100:	233d0900 	teqcs	sp, #0, 18
    6104:	00000000 	andeq	r0, r0, r0
    6108:	00001263 	andeq	r1, r0, r3, ror #4
    610c:	10960004 	addsne	r0, r6, r4
    6110:	01040000 	mrseq	r0, (UNDEF: 4)
    6114:	00000284 	andeq	r0, r0, r4, lsl #5
    6118:	00238901 	eoreq	r8, r3, r1, lsl #18
    611c:	00010100 	andeq	r0, r1, r0, lsl #2
    6120:	000cd800 	andeq	sp, ip, r0, lsl #16
    6124:	00000000 	andeq	r0, r0, r0
    6128:	001e5000 	andseq	r5, lr, r0
    612c:	0dbf0200 	lfmeq	f0, 4, [pc]	; 6134 <_Min_Stack_Size+0x5d34>
    6130:	d4020000 	strle	r0, [r2], #-0
    6134:	00000030 	andeq	r0, r0, r0, lsr r0
    6138:	7d070403 	cfstrsvc	mvf0, [r7, #-12]
    613c:	04000001 	streq	r0, [r0], #-1
    6140:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6144:	01030074 	tsteq	r3, r4, ror r0
    6148:	00015006 	andeq	r5, r1, r6
    614c:	00f20200 	rscseq	r0, r2, r0, lsl #4
    6150:	1c030000 	stcne	0, cr0, [r3], {-0}
    6154:	00000050 	andeq	r0, r0, r0, asr r0
    6158:	4e080103 	adfmie	f0, f0, f3
    615c:	03000001 	movweq	r0, #1
    6160:	00df0502 	sbcseq	r0, pc, r2, lsl #10
    6164:	5c020000 	stcpl	0, cr0, [r2], {-0}
    6168:	03000000 	movweq	r0, #0
    616c:	00006926 	andeq	r6, r0, r6, lsr #18
    6170:	07020300 	streq	r0, [r2, -r0, lsl #6]
    6174:	000001e5 	andeq	r0, r0, r5, ror #3
    6178:	c5050403 	strgt	r0, [r5, #-1027]	; 0x403
    617c:	02000000 	andeq	r0, r0, #0
    6180:	00000051 	andeq	r0, r0, r1, asr r0
    6184:	00823803 	addeq	r3, r2, r3, lsl #16
    6188:	04030000 	streq	r0, [r3], #-0
    618c:	00017807 	andeq	r7, r1, r7, lsl #16
    6190:	05080300 	streq	r0, [r8, #-768]	; 0x300
    6194:	000000c0 	andeq	r0, r0, r0, asr #1
    6198:	73070803 	movwvc	r0, #30723	; 0x7803
    619c:	03000001 	movweq	r0, #1
    61a0:	002c0704 	eoreq	r0, ip, r4, lsl #14
    61a4:	04050000 	streq	r0, [r5], #-0
    61a8:	57080103 	strpl	r0, [r8, -r3, lsl #2]
    61ac:	06000001 	streq	r0, [r0], -r1
    61b0:	0000ad04 	andeq	sl, r0, r4, lsl #26
    61b4:	00a00700 	adceq	r0, r0, r0, lsl #14
    61b8:	04060000 	streq	r0, [r6], #-0
    61bc:	000000b8 	strheq	r0, [r0], -r8
    61c0:	00f40208 	rscseq	r0, r4, r8, lsl #4
    61c4:	2a040000 	bcs	1061cc <_Min_Stack_Size+0x105dcc>
    61c8:	00000045 	andeq	r0, r0, r5, asr #32
    61cc:	00005e02 	andeq	r5, r0, r2, lsl #28
    61d0:	5e360400 	cfabsspl	mvf0, mvf6
    61d4:	02000000 	andeq	r0, r0, #0
    61d8:	00000053 	andeq	r0, r0, r3, asr r0
    61dc:	00774204 	rsbseq	r4, r7, r4, lsl #4
    61e0:	c7020000 	strgt	r0, [r2, -r0]
    61e4:	0500001d 	streq	r0, [r0, #-29]
    61e8:	0000e549 	andeq	lr, r0, r9, asr #10
    61ec:	eb040600 	bl	1079f4 <_Min_Stack_Size+0x1075f4>
    61f0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    61f4:	000000f6 	strdeq	r0, [r0], -r6
    61f8:	00009e0a 	andeq	r9, r0, sl, lsl #28
    61fc:	e3020000 	movw	r0, #8192	; 0x2000
    6200:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    6204:	0000cf5d 	andeq	ip, r0, sp, asr pc
    6208:	0fdf0200 	svceq	0x00df0200
    620c:	5e060000 	cdppl	0, 0, cr0, cr6, cr0, {0}
    6210:	00000070 	andeq	r0, r0, r0, ror r0
    6214:	000fde02 	andeq	sp, pc, r2, lsl #28
    6218:	825f0600 	subshi	r0, pc, #0, 12
    621c:	02000000 	andeq	r0, r0, #0
    6220:	00000e70 	andeq	r0, r0, r0, ror lr
    6224:	00cf6506 	sbceq	r6, pc, r6, lsl #10
    6228:	b10b0000 	mrslt	r0, (UNDEF: 11)
    622c:	1400000e 	strne	r0, [r0], #-14
    6230:	016b8807 	cmneq	fp, r7, lsl #16
    6234:	8d0c0000 	stchi	0, cr0, [ip, #-0]
    6238:	0700000e 	streq	r0, [r0, -lr]
    623c:	0001178a 	andeq	r1, r1, sl, lsl #15
    6240:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
    6244:	0700000f 	streq	r0, [r0, -pc]
    6248:	00016b8b 	andeq	r6, r1, fp, lsl #23
    624c:	c60c0400 	strgt	r0, [ip], -r0, lsl #8
    6250:	0700000d 	streq	r0, [r0, -sp]
    6254:	00016b8c 	andeq	r6, r1, ip, lsl #23
    6258:	2c0c0800 	stccs	8, cr0, [ip], {-0}
    625c:	0700000e 	streq	r0, [r0, -lr]
    6260:	00009e8d 	andeq	r9, r0, sp, lsl #29
    6264:	220c0c00 	andcs	r0, ip, #0, 24
    6268:	0700000f 	streq	r0, [r0, -pc]
    626c:	00009e8e 	andeq	r9, r0, lr, lsl #29
    6270:	06001000 	streq	r1, [r0], -r0
    6274:	00012204 	andeq	r2, r1, r4, lsl #4
    6278:	0e650200 	cdpeq	2, 6, cr0, cr5, cr0, {0}
    627c:	90070000 	andls	r0, r7, r0
    6280:	00000122 	andeq	r0, r0, r2, lsr #2
    6284:	0010c00b 	andseq	ip, r0, fp
    6288:	92070c00 	andls	r0, r7, #0, 24
    628c:	000001ad 	andeq	r0, r0, sp, lsr #3
    6290:	000e8d0c 	andeq	r8, lr, ip, lsl #26
    6294:	17940700 	ldrne	r0, [r4, r0, lsl #14]
    6298:	00000001 	andeq	r0, r0, r1
    629c:	000f890c 	andeq	r8, pc, ip, lsl #18
    62a0:	6b950700 	blvs	fe547ea8 <_estack+0xde517ea8>
    62a4:	04000001 	streq	r0, [r0], #-1
    62a8:	000dc60c 	andeq	ip, sp, ip, lsl #12
    62ac:	6b960700 	blvs	fe587eb4 <_estack+0xde557eb4>
    62b0:	08000001 	stmdaeq	r0, {r0}
    62b4:	0e610200 	cdpeq	2, 6, cr0, cr1, cr0, {0}
    62b8:	98070000 	stmdals	r7, {}	; <UNPREDICTABLE>
    62bc:	0000017c 	andeq	r0, r0, ip, ror r1
    62c0:	000e870b 	andeq	r8, lr, fp, lsl #14
    62c4:	9d071400 	cfstrsls	mvf1, [r7, #-0]
    62c8:	000001e9 	andeq	r0, r0, r9, ror #3
    62cc:	0010180c 	andseq	r1, r0, ip, lsl #16
    62d0:	0c9f0700 	ldceq	7, cr0, [pc], {0}
    62d4:	00000001 	andeq	r0, r0, r1
    62d8:	0010b80c 	andseq	fp, r0, ip, lsl #16
    62dc:	e9a00700 	stmib	r0!, {r8, r9, sl}
    62e0:	04000001 	streq	r0, [r0], #-1
    62e4:	0014230c 	andseq	r2, r4, ip, lsl #6
    62e8:	ada10700 	stcge	7, cr0, [r1]
    62ec:	08000001 	stmdaeq	r0, {r0}
    62f0:	71040600 	tstvc	r4, r0, lsl #12
    62f4:	02000001 	andeq	r0, r0, #1
    62f8:	00000f75 	andeq	r0, r0, r5, ror pc
    62fc:	01b8a207 			; <UNDEFINED> instruction: 0x01b8a207
    6300:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    6304:	08000016 	stmdaeq	r0, {r1, r2, r4}
    6308:	00009e63 	andeq	r9, r0, r3, ror #28
    630c:	1e3f0b00 	vaddne.f64	d0, d15, d0
    6310:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    6314:	00023681 	andeq	r3, r2, r1, lsl #13
    6318:	1fe20c00 	svcne	0x00e20c00
    631c:	83080000 	movwhi	r0, #32768	; 0x8000
    6320:	0000009e 	muleq	r0, lr, r0
    6324:	1d8d0c00 	stcne	12, cr0, [sp]
    6328:	84080000 	strhi	r0, [r8], #-0
    632c:	000000cf 	andeq	r0, r0, pc, asr #1
    6330:	1b4e0c04 	blne	1389348 <_Min_Stack_Size+0x1388f48>
    6334:	85080000 	strhi	r0, [r8, #-0]
    6338:	000000cf 	andeq	r0, r0, pc, asr #1
    633c:	35020008 	strcc	r0, [r2, #-8]
    6340:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    6344:	00020586 	andeq	r0, r2, r6, lsl #11
    6348:	00a70700 	adceq	r0, r7, r0, lsl #14
    634c:	04060000 	streq	r0, [r6], #-0
    6350:	000000f6 	strdeq	r0, [r0], -r6
    6354:	0018a402 	andseq	sl, r8, r2, lsl #8
    6358:	9e540900 	cdpls	9, 5, cr0, cr4, cr0, {0}
    635c:	02000000 	andeq	r0, r0, #0
    6360:	00002342 	andeq	r2, r0, r2, asr #6
    6364:	009e720a 	addseq	r7, lr, sl, lsl #4
    6368:	82020000 	andhi	r0, r2, #0
    636c:	0a000024 	beq	6404 <_Min_Stack_Size+0x6004>
    6370:	00026d77 	andeq	r6, r2, r7, ror sp
    6374:	73040600 	movwvc	r0, #17920	; 0x4600
    6378:	09000002 	stmdbeq	r0, {r1}
    637c:	0000027e 	andeq	r0, r0, lr, ror r2
    6380:	0002570a 	andeq	r5, r2, sl, lsl #14
    6384:	340b0000 	strcc	r0, [fp], #-0
    6388:	2c000022 	stccs	0, cr0, [r0], {34}	; 0x22
    638c:	02df6401 	sbcseq	r6, pc, #16777216	; 0x1000000
    6390:	5c0c0000 	stcpl	0, cr0, [ip], {-0}
    6394:	01000023 	tsteq	r0, r3, lsr #32
    6398:	0000a766 	andeq	sl, r0, r6, ror #14
    639c:	060c0000 	streq	r0, [ip], -r0
    63a0:	01000024 	tsteq	r0, r4, lsr #32
    63a4:	00017167 	andeq	r7, r1, r7, ror #2
    63a8:	200c0400 	andcs	r0, ip, r0, lsl #8
    63ac:	01000023 	tsteq	r0, r3, lsr #32
    63b0:	00011768 	andeq	r1, r1, r8, ror #14
    63b4:	d50c1800 	strle	r1, [ip, #-2048]	; 0x800
    63b8:	01000021 	tsteq	r0, r1, lsr #32
    63bc:	00010c69 	andeq	r0, r1, r9, ror #24
    63c0:	b30c1c00 	movwlt	r1, #52224	; 0xcc00
    63c4:	01000023 	tsteq	r0, r3, lsr #32
    63c8:	00009e6a 	andeq	r9, r0, sl, ror #28
    63cc:	f10c2000 			; <UNDEFINED> instruction: 0xf10c2000
    63d0:	01000024 	tsteq	r0, r4, lsr #32
    63d4:	0002626b 	andeq	r6, r2, fp, ror #4
    63d8:	d20c2400 	andle	r2, ip, #0, 8
    63dc:	01000023 	tsteq	r0, r3, lsr #32
    63e0:	00010c6d 	andeq	r0, r1, sp, ror #24
    63e4:	02002800 	andeq	r2, r0, #0, 16
    63e8:	00002306 	andeq	r2, r0, r6, lsl #6
    63ec:	027e6f01 	rsbseq	r6, lr, #1, 30
    63f0:	dc020000 	stcle	0, cr0, [r2], {-0}
    63f4:	01000024 	tsteq	r0, r4, lsr #32
    63f8:	0002df73 	andeq	sp, r2, r3, ror pc
    63fc:	230d0b00 	movwcs	r0, #56064	; 0xdb00
    6400:	01080000 	mrseq	r0, (UNDEF: 8)
    6404:	00031a7a 	andeq	r1, r3, sl, ror sl
    6408:	23340c00 	teqcs	r4, #0, 24
    640c:	7c010000 	stcvc	0, cr0, [r1], {-0}
    6410:	00000117 	andeq	r0, r0, r7, lsl r1
    6414:	239b0c00 	orrscs	r0, fp, #0, 24
    6418:	7d010000 	stcvc	0, cr0, [r1, #-0]
    641c:	0000031a 	andeq	r0, r0, sl, lsl r3
    6420:	04060004 	streq	r0, [r6], #-4
    6424:	000002ea 	andeq	r0, r0, sl, ror #5
    6428:	00220a02 	eoreq	r0, r2, r2, lsl #20
    642c:	f57e0100 			; <UNDEFINED> instruction: 0xf57e0100
    6430:	0d000002 	stceq	0, cr0, [r0, #-8]
    6434:	3f8d0108 	svccc	0x008d0108
    6438:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    643c:	000022e1 	andeq	r2, r0, r1, ror #5
    6440:	03208f01 	teqeq	r0, #1, 30
    6444:	0b000000 	bleq	644c <_Min_Stack_Size+0x604c>
    6448:	000022cc 	andeq	r2, r0, ip, asr #5
    644c:	628a010c 	addvs	r0, sl, #12, 2
    6450:	0c000003 	stceq	0, cr0, [r0], {3}
    6454:	000024af 	andeq	r2, r0, pc, lsr #9
    6458:	01018c01 	tsteq	r1, r1, lsl #24
    645c:	0f000000 	svceq	0x00000000
    6460:	96010075 			; <UNDEFINED> instruction: 0x96010075
    6464:	0000032b 	andeq	r0, r0, fp, lsr #6
    6468:	f2020004 	vhadd.s8	d0, d2, d4
    646c:	01000022 	tsteq	r0, r2, lsr #32
    6470:	00033f97 	muleq	r3, r7, pc	; <UNPREDICTABLE>
    6474:	22561000 	subscs	r1, r6, #0
    6478:	14010000 	strne	r0, [r1], #-0
    647c:	00010102 	andeq	r0, r1, r2, lsl #2
    6480:	03bb0100 			; <UNDEFINED> instruction: 0x03bb0100
    6484:	9b110000 	blls	44648c <_Min_Stack_Size+0x44608c>
    6488:	01000023 	tsteq	r0, r3, lsr #32
    648c:	03bb0214 			; <UNDEFINED> instruction: 0x03bb0214
    6490:	a3110000 	tstge	r1, #0
    6494:	01000023 	tsteq	r0, r3, lsr #32
    6498:	03c00214 	biceq	r0, r0, #20, 4	; 0x40000001
    649c:	15110000 	ldrne	r0, [r1, #-0]
    64a0:	01000024 	tsteq	r0, r4, lsr #32
    64a4:	03c00214 	biceq	r0, r0, #20, 4	; 0x40000001
    64a8:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    64ac:	01000023 	tsteq	r0, r3, lsr #32
    64b0:	03c00214 	biceq	r0, r0, #20, 4	; 0x40000001
    64b4:	98120000 	ldmdals	r2, {}	; <UNPREDICTABLE>
    64b8:	01000022 	tsteq	r0, r2, lsr #32
    64bc:	01010216 	tsteq	r1, r6, lsl r2
    64c0:	07000000 	streq	r0, [r0, -r0]
    64c4:	0000031a 	andeq	r0, r0, sl, lsl r3
    64c8:	00011707 	andeq	r1, r1, r7, lsl #14
    64cc:	23bd1000 			; <UNDEFINED> instruction: 0x23bd1000
    64d0:	e3010000 	movw	r0, #4096	; 0x1000
    64d4:	00011701 	andeq	r1, r1, r1, lsl #14
    64d8:	03ef0100 	mvneq	r0, #0, 2
    64dc:	38110000 	ldmdacc	r1, {}	; <UNPREDICTABLE>
    64e0:	01000024 	tsteq	r0, r4, lsr #32
    64e4:	03ef01e3 	mvneq	r0, #-1073741768	; 0xc0000038
    64e8:	1d120000 	ldcne	0, cr0, [r2, #-0]
    64ec:	01000025 	tsteq	r0, r5, lsr #32
    64f0:	011701e5 	tsteq	r7, r5, ror #3
    64f4:	07000000 	streq	r0, [r0, -r0]
    64f8:	000003f4 	strdeq	r0, [r0], -r4
    64fc:	01010406 	tsteq	r1, r6, lsl #8
    6500:	e2130000 	ands	r0, r3, #0
    6504:	01000021 	tsteq	r0, r1, lsr #32
    6508:	140102f6 	strne	r0, [r1], #-758	; 0x2f6
    650c:	00001b80 	andeq	r1, r0, r0, lsl #23
    6510:	0101ec01 	tsteq	r1, r1, lsl #24
    6514:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    6518:	00b20800 	adcseq	r0, r2, r0, lsl #16
    651c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6520:	0000050e 	andeq	r0, r0, lr, lsl #10
    6524:	00125115 	andseq	r5, r2, r5, lsl r1
    6528:	01ee0100 	mvneq	r0, r0, lsl #2
    652c:	4c000001 	stcmi	0, cr0, [r0], {1}
    6530:	16000045 	strne	r0, [r0], -r5, asr #32
    6534:	000003fa 	strdeq	r0, [r0], -sl
    6538:	08002e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, sp}
    653c:	00000b28 	andeq	r0, r0, r8, lsr #22
    6540:	04c0f401 	strbeq	pc, [r0], #1025	; 0x401	; <UNPREDICTABLE>
    6544:	32170000 	andscc	r0, r7, #0
    6548:	7608002e 	strvc	r0, [r8], -lr, lsr #32
    654c:	17000010 	smladne	r0, r0, r0, r0
    6550:	08002e40 	stmdaeq	r0, {r6, r9, sl, fp, sp}
    6554:	0000107d 	andeq	r1, r0, sp, ror r0
    6558:	002e8818 	eoreq	r8, lr, r8, lsl r8
    655c:	00108408 	andseq	r8, r0, r8, lsl #8
    6560:	00046400 	andeq	r6, r4, r0, lsl #8
    6564:	50011900 	andpl	r1, r1, r0, lsl #18
    6568:	00007602 	andeq	r7, r0, r2, lsl #12
    656c:	002e8e18 	eoreq	r8, lr, r8, lsl lr
    6570:	00108408 	andseq	r8, r0, r8, lsl #8
    6574:	00047800 	andeq	r7, r4, r0, lsl #16
    6578:	50011900 	andpl	r1, r1, r0, lsl #18
    657c:	00007502 	andeq	r7, r0, r2, lsl #10
    6580:	002eac18 	eoreq	sl, lr, r8, lsl ip
    6584:	00109b08 	andseq	r9, r0, r8, lsl #22
    6588:	00049600 	andeq	r9, r4, r0, lsl #12
    658c:	52011900 	andpl	r1, r1, #0, 18
    6590:	19007802 	stmdbne	r0, {r1, fp, ip, sp, lr}
    6594:	3c015101 	stfccs	f5, [r1], {1}
    6598:	01500119 	cmpeq	r0, r9, lsl r1
    659c:	bc18003a 	ldclt	0, cr0, [r8], {58}	; 0x3a
    65a0:	c008002e 	andgt	r0, r8, lr, lsr #32
    65a4:	ad000010 	stcge	0, cr0, [r0, #-64]	; 0xffffffc0
    65a8:	19000004 	stmdbne	r0, {r2}
    65ac:	03055101 	movweq	r5, #20737	; 0x5101
    65b0:	08006424 	stmdaeq	r0, {r2, r5, sl, sp, lr}
    65b4:	2ec01700 	cdpcs	7, 12, cr1, cr0, cr0, {0}
    65b8:	107d0800 	rsbsne	r0, sp, r0, lsl #16
    65bc:	d0170000 	andsle	r0, r7, r0
    65c0:	d708002e 	strle	r0, [r8, -lr, lsr #32]
    65c4:	00000010 	andeq	r0, r0, r0, lsl r0
    65c8:	002e6a18 	eoreq	r6, lr, r8, lsl sl
    65cc:	0010e208 	andseq	lr, r0, r8, lsl #4
    65d0:	00050400 	andeq	r0, r5, r0, lsl #8
    65d4:	53011900 	movwpl	r1, #6400	; 0x1900
    65d8:	01193001 	tsteq	r9, r1
    65dc:	040a0352 	streq	r0, [sl], #-850	; 0x352
    65e0:	51011901 	tstpl	r1, r1, lsl #18
    65e4:	642c0305 	strtvs	r0, [ip], #-773	; 0x305
    65e8:	01190800 	tsteq	r9, r0, lsl #16
    65ec:	d5030550 	strle	r0, [r3, #-1360]	; 0x550
    65f0:	1908002f 	stmdbne	r8, {r0, r1, r2, r3, r5}
    65f4:	010c7d02 	tsteq	ip, r2, lsl #26
    65f8:	7d021930 	stcvc	9, cr1, [r2, #-192]	; 0xffffff40
    65fc:	19300108 	ldmdbne	r0!, {r3, r8}
    6600:	01047d02 	tsteq	r4, r2, lsl #26
    6604:	7d021930 	stcvc	9, cr1, [r2, #-192]	; 0xffffff40
    6608:	00320100 	eorseq	r0, r2, r0, lsl #2
    660c:	002eca17 	eoreq	ip, lr, r7, lsl sl
    6610:	0010d708 	andseq	sp, r0, r8, lsl #14
    6614:	ba1a0000 	blt	68661c <_Min_Stack_Size+0x68621c>
    6618:	01000024 	tsteq	r0, r4, lsr #32
    661c:	0257010f 	subseq	r0, r7, #-1073741821	; 0xc0000003
    6620:	2ed40000 	cdpcs	0, 13, cr0, cr4, cr0, {0}
    6624:	00ac0800 	adceq	r0, ip, r0, lsl #16
    6628:	9c010000 	stcls	0, cr0, [r1], {-0}
    662c:	00000641 	andeq	r0, r0, r1, asr #12
    6630:	00235c1b 	eoreq	r5, r3, fp, lsl ip
    6634:	010f0100 	mrseq	r0, (UNDEF: 31)
    6638:	00000241 	andeq	r0, r0, r1, asr #4
    663c:	00004583 	andeq	r4, r0, r3, lsl #11
    6640:	0023201b 	eoreq	r2, r3, fp, lsl r0
    6644:	010f0100 	mrseq	r0, (UNDEF: 31)
    6648:	000003c0 	andeq	r0, r0, r0, asr #7
    664c:	000045b7 			; <UNDEFINED> instruction: 0x000045b7
    6650:	0021d51b 	eoreq	sp, r1, fp, lsl r5
    6654:	010f0100 	mrseq	r0, (UNDEF: 31)
    6658:	00000641 	andeq	r0, r0, r1, asr #12
    665c:	000045eb 	andeq	r4, r0, fp, ror #11
    6660:	0023b31b 	eoreq	fp, r3, fp, lsl r3
    6664:	010f0100 	mrseq	r0, (UNDEF: 31)
    6668:	00000646 	andeq	r0, r0, r6, asr #12
    666c:	0000461f 	andeq	r4, r0, pc, lsl r6
    6670:	0024f11b 	eoreq	pc, r4, fp, lsl r1	; <UNPREDICTABLE>
    6674:	010f0100 	mrseq	r0, (UNDEF: 31)
    6678:	00000262 	andeq	r0, r0, r2, ror #4
    667c:	00004653 	andeq	r4, r0, r3, asr r6
    6680:	0021ff1c 	eoreq	pc, r1, ip, lsl pc	; <UNPREDICTABLE>
    6684:	01110100 	tsteq	r1, r0, lsl #2
    6688:	0000031a 	andeq	r0, r0, sl, lsl r3
    668c:	00004673 	andeq	r4, r0, r3, ror r6
    6690:	0003fa1d 	andeq	pc, r3, sp, lsl sl	; <UNPREDICTABLE>
    6694:	002eee00 	eoreq	lr, lr, r0, lsl #28
    6698:	000b5008 	andeq	r5, fp, r8
    669c:	011f0100 	tsteq	pc, r0, lsl #2
    66a0:	0000060f 	andeq	r0, r0, pc, lsl #12
    66a4:	002efa17 	eoreq	pc, lr, r7, lsl sl	; <UNPREDICTABLE>
    66a8:	00107608 	andseq	r7, r0, r8, lsl #12
    66ac:	2f021700 	svccs	0x00021700
    66b0:	107d0800 	rsbsne	r0, sp, r0, lsl #16
    66b4:	40180000 	andsmi	r0, r8, r0
    66b8:	8408002f 	strhi	r0, [r8], #-47	; 0x2f
    66bc:	c2000010 	andgt	r0, r0, #16
    66c0:	19000005 	stmdbne	r0, {r0, r2}
    66c4:	79025001 	stmdbvc	r2, {r0, ip, lr}
    66c8:	46180000 	ldrmi	r0, [r8], -r0
    66cc:	8408002f 	strhi	r0, [r8], #-47	; 0x2f
    66d0:	d6000010 			; <UNDEFINED> instruction: 0xd6000010
    66d4:	19000005 	stmdbne	r0, {r0, r2}
    66d8:	76025001 	strvc	r5, [r2], -r1
    66dc:	68180000 	ldmdavs	r8, {}	; <UNPREDICTABLE>
    66e0:	9b08002f 	blls	2067a4 <_Min_Stack_Size+0x2063a4>
    66e4:	ee000010 	mcr	0, 0, r0, cr0, cr0, {0}
    66e8:	19000005 	stmdbne	r0, {r0, r2}
    66ec:	3c015101 	stfccs	f5, [r1], {1}
    66f0:	01500119 	cmpeq	r0, r9, lsl r1
    66f4:	7818003a 	ldmdavc	r8, {r1, r3, r4, r5}
    66f8:	c008002f 	andgt	r0, r8, pc, lsr #32
    66fc:	05000010 	streq	r0, [r0, #-16]
    6700:	19000006 	stmdbne	r0, {r1, r2}
    6704:	03055101 	movweq	r5, #20737	; 0x5101
    6708:	08006424 	stmdaeq	r0, {r2, r5, sl, sp, lr}
    670c:	2f7e1700 	svccs	0x007e1700
    6710:	10d70800 	sbcsne	r0, r7, r0, lsl #16
    6714:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6718:	08002eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp, sp}
    671c:	00001140 	andeq	r1, r0, r0, asr #2
    6720:	00000623 	andeq	r0, r0, r3, lsr #12
    6724:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    6728:	18002c08 	stmdane	r0, {r3, sl, fp, sp}
    672c:	08002f1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp, sp}
    6730:	00001156 	andeq	r1, r0, r6, asr r1
    6734:	00000637 	andeq	r0, r0, r7, lsr r6
    6738:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    673c:	17000474 	smlsdxne	r0, r4, r4, r0
    6740:	08002f26 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, fp, sp}
    6744:	000010d7 	ldrdeq	r1, [r0], -r7
    6748:	010c0700 	tsteq	ip, r0, lsl #14
    674c:	9e070000 	cdpls	0, 0, cr0, cr7, cr0, {0}
    6750:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    6754:	000024c7 	andeq	r2, r0, r7, asr #9
    6758:	01013801 	tsteq	r1, r1, lsl #16
    675c:	01000001 	tsteq	r0, r1
    6760:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
    6764:	00239c11 	eoreq	r9, r3, r1, lsl ip
    6768:	01380100 	teqeq	r8, r0, lsl #2
    676c:	00000257 	andeq	r0, r0, r7, asr r2
    6770:	0023fb11 	eoreq	pc, r3, r1, lsl fp	; <UNPREDICTABLE>
    6774:	01380100 	teqeq	r8, r0, lsl #2
    6778:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
    677c:	00250411 	eoreq	r0, r5, r1, lsl r4
    6780:	01380100 	teqeq	r8, r0, lsl #2
    6784:	000003c0 	andeq	r0, r0, r0, asr #7
    6788:	00152911 	andseq	r2, r5, r1, lsl r9
    678c:	01380100 	teqeq	r8, r0, lsl #2
    6790:	000003ef 	andeq	r0, r0, pc, ror #7
    6794:	001c4711 	andseq	r4, ip, r1, lsl r7
    6798:	01380100 	teqeq	r8, r0, lsl #2
    679c:	000003c0 	andeq	r0, r0, r0, asr #7
    67a0:	00125112 	andseq	r5, r2, r2, lsl r1
    67a4:	013a0100 	teqeq	sl, r0, lsl #2
    67a8:	00000101 	andeq	r0, r0, r1, lsl #2
    67ac:	00247912 	eoreq	r7, r4, r2, lsl r9
    67b0:	013b0100 	teqeq	fp, r0, lsl #2
    67b4:	00000362 	andeq	r0, r0, r2, ror #6
    67b8:	01010700 	tsteq	r1, r0, lsl #14
    67bc:	4b1f0000 	blmi	7c67c4 <_Min_Stack_Size+0x7c63c4>
    67c0:	80000006 	andhi	r0, r0, r6
    67c4:	5208002f 	andpl	r0, r8, #47	; 0x2f
    67c8:	01000000 	mrseq	r0, (UNDEF: 0)
    67cc:	0007409c 	muleq	r7, ip, r0
    67d0:	065c2000 	ldrbeq	r2, [ip], -r0
    67d4:	46a80000 	strtmi	r0, [r8], r0
    67d8:	68200000 	stmdavs	r0!, {}	; <UNPREDICTABLE>
    67dc:	07000006 	streq	r0, [r0, -r6]
    67e0:	20000047 	andcs	r0, r0, r7, asr #32
    67e4:	00000674 	andeq	r0, r0, r4, ror r6
    67e8:	00004758 	andeq	r4, r0, r8, asr r7
    67ec:	00068020 	andeq	r8, r6, r0, lsr #32
    67f0:	0047a900 	subeq	sl, r7, r0, lsl #18
    67f4:	068c2000 	streq	r2, [ip], r0
    67f8:	47f90000 	ldrbmi	r0, [r9, r0]!
    67fc:	98210000 	stmdals	r1!, {}	; <UNPREDICTABLE>
    6800:	19000006 	stmdbne	r0, {r1, r2}
    6804:	22000048 	andcs	r0, r0, #72	; 0x48
    6808:	000006a4 	andeq	r0, r0, r4, lsr #13
    680c:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    6810:	08002fa6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, fp, sp}
    6814:	0000116d 	andeq	r1, r0, sp, ror #2
    6818:	0000072d 	andeq	r0, r0, sp, lsr #14
    681c:	01530119 	cmpeq	r3, r9, lsl r1
    6820:	52011930 	andpl	r1, r1, #48, 18	; 0xc0000
    6824:	5301f303 	movwpl	pc, #4867	; 0x1303	; <UNPREDICTABLE>
    6828:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    682c:	01196491 			; <UNDEFINED> instruction: 0x01196491
    6830:	00750250 	rsbseq	r0, r5, r0, asr r2
    6834:	2fae1700 	svccs	0x00ae1700
    6838:	11970800 	orrsne	r0, r7, r0, lsl #16
    683c:	c8170000 	ldmdagt	r7, {}	; <UNPREDICTABLE>
    6840:	a308002f 	movwge	r0, #32815	; 0x802f
    6844:	00000011 	andeq	r0, r0, r1, lsl r0
    6848:	00244723 	eoreq	r4, r4, r3, lsr #14
    684c:	01ae0100 			; <UNDEFINED> instruction: 0x01ae0100
    6850:	00077e01 	andeq	r7, r7, r1, lsl #28
    6854:	251d1100 	ldrcs	r1, [sp, #-256]	; 0x100
    6858:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    685c:	0003c001 	andeq	ip, r3, r1
    6860:	24391100 	ldrtcs	r1, [r9], #-256	; 0x100
    6864:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    6868:	0006b101 	andeq	fp, r6, r1, lsl #2
    686c:	24151200 	ldrcs	r1, [r5], #-512	; 0x200
    6870:	b0010000 	andlt	r0, r1, r0
    6874:	00011701 	andeq	r1, r1, r1, lsl #14
    6878:	221c1200 	andscs	r1, ip, #0, 4
    687c:	b1010000 	mrslt	r0, (UNDEF: 1)
    6880:	00010101 	andeq	r0, r1, r1, lsl #2
    6884:	a9100000 	ldmdbge	r0, {}	; <UNPREDICTABLE>
    6888:	01000022 	tsteq	r0, r2, lsr #32
    688c:	011701fd 			; <UNDEFINED> instruction: 0x011701fd
    6890:	b4010000 	strlt	r0, [r1], #-0
    6894:	11000007 	tstne	r0, r7
    6898:	0000221b 	andeq	r2, r0, fp, lsl r2
    689c:	ef01fd01 	svc	0x0001fd01
    68a0:	12000003 	andne	r0, r0, #3
    68a4:	00002415 	andeq	r2, r0, r5, lsl r4
    68a8:	1701ff01 	strne	pc, [r1, -r1, lsl #30]
    68ac:	12000001 	andne	r0, r0, #1
    68b0:	00002513 	andeq	r2, r0, r3, lsl r5
    68b4:	17020001 	strne	r0, [r2, -r1]
    68b8:	00000001 	andeq	r0, r0, r1
    68bc:	00228423 	eoreq	r8, r2, r3, lsr #8
    68c0:	02bb0100 	adcseq	r0, fp, #0, 2
    68c4:	0007fe01 	andeq	pc, r7, r1, lsl #28
    68c8:	251d1200 	ldrcs	r1, [sp, #-512]	; 0x200
    68cc:	bd010000 	stclt	0, cr0, [r1, #-0]
    68d0:	00011702 	andeq	r1, r1, r2, lsl #14
    68d4:	23501200 	cmpcs	r0, #0, 4
    68d8:	bd010000 	stclt	0, cr0, [r1, #-0]
    68dc:	00011702 	andeq	r1, r1, r2, lsl #14
    68e0:	0e421200 	cdpeq	2, 4, cr1, cr2, cr0, {0}
    68e4:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    68e8:	0007fe02 	andeq	pc, r7, r2, lsl #28
    68ec:	239b1200 	orrscs	r1, fp, #0, 4
    68f0:	bf010000 	svclt	0x00010000
    68f4:	00031a02 	andeq	r1, r3, r2, lsl #20
    68f8:	24301200 	ldrtcs	r1, [r0], #-512	; 0x200
    68fc:	c0010000 	andgt	r0, r1, r0
    6900:	00010102 	andeq	r0, r1, r2, lsl #2
    6904:	04060000 	streq	r0, [r6], #-0
    6908:	000001ef 	andeq	r0, r0, pc, ror #3
    690c:	00246223 	eoreq	r6, r4, r3, lsr #4
    6910:	016e0100 	cmneq	lr, r0, lsl #2
    6914:	00084201 	andeq	r4, r8, r1, lsl #4
    6918:	251d1100 	ldrcs	r1, [sp, #-256]	; 0x100
    691c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    6920:	0003c001 	andeq	ip, r3, r1
    6924:	24151100 	ldrcs	r1, [r5], #-256	; 0x100
    6928:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    692c:	0003c001 	andeq	ip, r3, r1
    6930:	24301200 	ldrtcs	r1, [r0], #-512	; 0x200
    6934:	70010000 	andvc	r0, r1, r0
    6938:	00010101 	andeq	r0, r1, r1, lsl #2
    693c:	239b1200 	orrscs	r1, fp, #0, 4
    6940:	71010000 	mrsvc	r0, (UNDEF: 1)
    6944:	0003bb01 	andeq	fp, r3, r1, lsl #22
    6948:	e0230000 	eor	r0, r3, r0
    694c:	01000023 	tsteq	r0, r3, lsr #32
    6950:	8c01023d 	sfmhi	f0, 4, [r1], {61}	; 0x3d
    6954:	12000008 	andne	r0, r0, #8
    6958:	00002479 	andeq	r2, r0, r9, ror r4
    695c:	62023f01 	andvs	r3, r2, #1, 30
    6960:	12000003 	andne	r0, r0, #3
    6964:	0000239b 	muleq	r0, fp, r3
    6968:	1a024001 	bne	96974 <_Min_Stack_Size+0x96574>
    696c:	12000003 	andne	r0, r0, #3
    6970:	0000221c 	andeq	r2, r0, ip, lsl r2
    6974:	01024101 	tsteq	r2, r1, lsl #2
    6978:	12000001 	andne	r0, r0, #1
    697c:	00002430 	andeq	r2, r0, r0, lsr r4
    6980:	01024101 	tsteq	r2, r1, lsl #2
    6984:	12000001 	andne	r0, r0, #1
    6988:	00002415 	andeq	r2, r0, r5, lsl r4
    698c:	17024201 	strne	r4, [r2, -r1, lsl #4]
    6990:	00000001 	andeq	r0, r0, r1
    6994:	0024e424 	eoreq	lr, r4, r4, lsr #8
    6998:	01960100 	orrseq	r0, r6, r0, lsl #2
    699c:	08002fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, sp}
    69a0:	0000031c 	andeq	r0, r0, ip, lsl r3
    69a4:	0f869c01 	svceq	0x00869c01
    69a8:	bc1b0000 	ldclt	0, cr0, [fp], {-0}
    69ac:	0100001e 	tsteq	r0, lr, lsl r0
    69b0:	009e0196 	umullseq	r0, lr, r6, r1
    69b4:	48660000 	stmdami	r6!, {}^	; <UNPREDICTABLE>
    69b8:	1d250000 	stcne	0, cr0, [r5, #-0]
    69bc:	01000025 	tsteq	r0, r5, lsr #32
    69c0:	01170198 			; <UNDEFINED> instruction: 0x01170198
    69c4:	57010000 	strpl	r0, [r1, -r0]
    69c8:	0024391c 	eoreq	r3, r4, ip, lsl r9
    69cc:	01990100 	orrseq	r0, r9, r0, lsl #2
    69d0:	00000101 	andeq	r0, r0, r1, lsl #2
    69d4:	00004887 	andeq	r4, r0, r7, lsl #17
    69d8:	0003c526 	andeq	ip, r3, r6, lsr #10
    69dc:	002ffc00 	eoreq	pc, pc, r0, lsl #24
    69e0:	00001408 	andeq	r1, r0, r8, lsl #8
    69e4:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    69e8:	00000900 	andeq	r0, r0, r0, lsl #18
    69ec:	0003d627 	andeq	sp, r3, r7, lsr #12
    69f0:	c8f20600 	ldmgt	r2!, {r9, sl}^
    69f4:	00000069 	andeq	r0, r0, r9, rrx
    69f8:	002ffc28 	eoreq	pc, pc, r8, lsr #24
    69fc:	00001408 	andeq	r1, r0, r8, lsl #8
    6a00:	03e22900 	mvneq	r2, #0, 18
    6a04:	00000000 	andeq	r0, r0, r0
    6a08:	0007401d 	andeq	r4, r7, sp, lsl r0
    6a0c:	00301000 	eorseq	r1, r0, r0
    6a10:	000b6808 	andeq	r6, fp, r8, lsl #16
    6a14:	01a60100 			; <UNDEFINED> instruction: 0x01a60100
    6a18:	00000c3f 	andeq	r0, r0, pc, lsr ip
    6a1c:	00075920 	andeq	r5, r7, r0, lsr #18
    6a20:	0048bf00 	subeq	fp, r8, r0, lsl #30
    6a24:	074d2a00 	strbeq	r2, [sp, -r0, lsl #20]
    6a28:	682b0000 	stmdavs	fp!, {}	; <UNPREDICTABLE>
    6a2c:	2200000b 	andcs	r0, r0, #11
    6a30:	00000765 	andeq	r0, r0, r5, ror #14
    6a34:	71215a01 	teqvc	r1, r1, lsl #20
    6a38:	f7000007 			; <UNDEFINED> instruction: 0xf7000007
    6a3c:	1d000048 	stcne	0, cr0, [r0, #-288]	; 0xfffffee0
    6a40:	0000077e 	andeq	r0, r0, lr, ror r7
    6a44:	08003014 	stmdaeq	r0, {r2, r4, ip, sp}
    6a48:	00000b98 	muleq	r0, r8, fp
    6a4c:	8001ba01 	andhi	fp, r1, r1, lsl #20
    6a50:	2700000a 	strcs	r0, [r0, -sl]
    6a54:	0000078f 	andeq	r0, r0, pc, lsl #15
    6a58:	6a36f206 	bvs	dc3278 <_Min_Stack_Size+0xdc2e78>
    6a5c:	2b000000 	blcs	6a64 <_Min_Stack_Size+0x6664>
    6a60:	00000b98 	muleq	r0, r8, fp
    6a64:	00079b21 	andeq	r9, r7, r1, lsr #22
    6a68:	00493b00 	subeq	r3, r9, r0, lsl #22
    6a6c:	07a72200 	streq	r2, [r7, r0, lsl #4]!
    6a70:	03050000 	movweq	r0, #20480	; 0x5000
    6a74:	20000218 	andcs	r0, r0, r8, lsl r2
    6a78:	0007b41d 	andeq	fp, r7, sp, lsl r4
    6a7c:	0030b800 	eorseq	fp, r0, r0, lsl #16
    6a80:	000bc808 	andeq	ip, fp, r8, lsl #16
    6a84:	02060100 	andeq	r0, r6, #0, 2
    6a88:	00000a75 	andeq	r0, r0, r5, ror sl
    6a8c:	000bc82b 	andeq	ip, fp, fp, lsr #16
    6a90:	07c12100 	strbeq	r2, [r1, r0, lsl #2]
    6a94:	499b0000 	ldmibmi	fp, {}	; <UNPREDICTABLE>
    6a98:	cd210000 	stcgt	0, cr0, [r1, #-0]
    6a9c:	c4000007 	strgt	r0, [r0], #-7
    6aa0:	21000049 	tstcs	r0, r9, asr #32
    6aa4:	000007d9 	ldrdeq	r0, [r0], -r9
    6aa8:	000049f3 	strdeq	r4, [r0], -r3
    6aac:	0007e521 	andeq	lr, r7, r1, lsr #10
    6ab0:	004a0600 	subeq	r0, sl, r0, lsl #12
    6ab4:	07f12900 	ldrbeq	r2, [r1, r0, lsl #18]!
    6ab8:	4b260000 	blmi	986ac0 <_Min_Stack_Size+0x9866c0>
    6abc:	c6000006 	strgt	r0, [r0], -r6
    6ac0:	26080031 			; <UNDEFINED> instruction: 0x26080031
    6ac4:	01000000 	mrseq	r0, (UNDEF: 0)
    6ac8:	0a3202e5 	beq	c87664 <_Min_Stack_Size+0xc87264>
    6acc:	8c200000 	stchi	0, cr0, [r0], #-0
    6ad0:	2f000006 	svccs	0x00000006
    6ad4:	2000004a 	andcs	r0, r0, sl, asr #32
    6ad8:	00000680 	andeq	r0, r0, r0, lsl #13
    6adc:	00004a2f 	andeq	r4, r0, pc, lsr #20
    6ae0:	00067420 	andeq	r7, r6, r0, lsr #8
    6ae4:	004a4f00 	subeq	r4, sl, r0, lsl #30
    6ae8:	06682000 	strbteq	r2, [r8], -r0
    6aec:	4a2f0000 	bmi	bc6af4 <_Min_Stack_Size+0xbc66f4>
    6af0:	5c200000 	stcpl	0, cr0, [r0], #-0
    6af4:	6d000006 	stcvs	0, cr0, [r0, #-24]	; 0xffffffe8
    6af8:	2800004a 	stmdacs	r0, {r1, r3, r6}
    6afc:	080031c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip, sp}
    6b00:	00000026 	andeq	r0, r0, r6, lsr #32
    6b04:	00069821 	andeq	r9, r6, r1, lsr #16
    6b08:	004a8b00 	subeq	r8, sl, r0, lsl #22
    6b0c:	06a42200 	strteq	r2, [r4], r0, lsl #4
    6b10:	91020000 	mrsls	r0, (UNDEF: 2)
    6b14:	31d8174c 	bicscc	r1, r8, ip, asr #14
    6b18:	11970800 	orrsne	r0, r7, r0, lsl #16
    6b1c:	ec2c0000 	stc	0, cr0, [ip], #-0
    6b20:	a3080031 	movwge	r0, #32817	; 0x8031
    6b24:	19000011 	stmdbne	r0, {r0, r4}
    6b28:	30015301 	andcc	r5, r1, r1, lsl #6
    6b2c:	01520119 	cmpeq	r2, r9, lsl r1
    6b30:	51011930 	tstpl	r1, r0, lsr r9
    6b34:	004c9102 	subeq	r9, ip, r2, lsl #2
    6b38:	ca180000 	bgt	606b40 <_Min_Stack_Size+0x606740>
    6b3c:	c8080030 	stmdagt	r8, {r4, r5}
    6b40:	46000011 			; <UNDEFINED> instruction: 0x46000011
    6b44:	1900000a 	stmdbne	r0, {r1, r3}
    6b48:	7b025001 	blvc	9ab54 <_Min_Stack_Size+0x9a754>
    6b4c:	d02d0000 	eorle	r0, sp, r0
    6b50:	56080030 			; <UNDEFINED> instruction: 0x56080030
    6b54:	1900000a 	stmdbne	r0, {r1, r3}
    6b58:	76025001 	strvc	r5, [r2], -r1
    6b5c:	66180000 	ldrvs	r0, [r8], -r0
    6b60:	de080031 	mcrle	0, 0, r0, cr8, cr1, {1}
    6b64:	6a000011 	bvs	6bb0 <_Min_Stack_Size+0x67b0>
    6b68:	1900000a 	stmdbne	r0, {r1, r3}
    6b6c:	7b025101 	blvc	9af78 <_Min_Stack_Size+0x9ab78>
    6b70:	f6170000 			; <UNDEFINED> instruction: 0xf6170000
    6b74:	d7080031 	smladxle	r8, r1, r0, r0
    6b78:	00000010 	andeq	r0, r0, r0, lsl r0
    6b7c:	30181700 	andscc	r1, r8, r0, lsl #14
    6b80:	11f50800 	mvnsne	r0, r0, lsl #16
    6b84:	00000000 	andeq	r0, r0, r0
    6b88:	0008041d 	andeq	r0, r8, sp, lsl r4
    6b8c:	00313400 	eorseq	r3, r1, r0, lsl #8
    6b90:	000bf008 	andeq	pc, fp, r8
    6b94:	01c10100 	biceq	r0, r1, r0, lsl #2
    6b98:	00000bf9 	strdeq	r0, [r0], -r9
    6b9c:	00081d20 	andeq	r1, r8, r0, lsr #26
    6ba0:	004ab600 	subeq	fp, sl, r0, lsl #12
    6ba4:	08112a00 	ldmdaeq	r1, {r9, fp, sp}
    6ba8:	f02b0000 			; <UNDEFINED> instruction: 0xf02b0000
    6bac:	2900000b 	stmdbcs	r0, {r0, r1, r3}
    6bb0:	00000829 	andeq	r0, r0, r9, lsr #16
    6bb4:	00083521 	andeq	r3, r8, r1, lsr #10
    6bb8:	004adf00 	subeq	sp, sl, r0, lsl #30
    6bbc:	036d1d00 	cmneq	sp, #0, 26
    6bc0:	31860000 	orrcc	r0, r6, r0
    6bc4:	0c100800 	ldceq	8, cr0, [r0], {-0}
    6bc8:	7f010000 	svcvc	0x00010000
    6bcc:	000b4e01 	andeq	r4, fp, r1, lsl #28
    6bd0:	03a22a00 			; <UNDEFINED> instruction: 0x03a22a00
    6bd4:	96200000 	strtls	r0, [r0], -r0
    6bd8:	08000003 	stmdaeq	r0, {r0, r1}
    6bdc:	2a00004b 	bcs	6d10 <_Min_Stack_Size+0x6910>
    6be0:	0000038a 	andeq	r0, r0, sl, lsl #7
    6be4:	00037e20 	andeq	r7, r3, r0, lsr #28
    6be8:	004b2600 	subeq	r2, fp, r0, lsl #12
    6bec:	0c102b00 	ldceq	11, cr2, [r0], {-0}
    6bf0:	ae210000 	cdpge	0, 2, cr0, cr1, cr0, {0}
    6bf4:	44000003 	strmi	r0, [r0], #-3
    6bf8:	2e00004b 	cdpcs	0, 0, cr0, cr0, cr11, {2}
    6bfc:	0800323c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, sp}
    6c00:	0000000c 	andeq	r0, r0, ip
    6c04:	00000b3c 	andeq	r0, r0, ip, lsr fp
    6c08:	00038a2a 	andeq	r8, r3, sl, lsr #20
    6c0c:	03962a00 	orrseq	r2, r6, #0, 20
    6c10:	a22a0000 	eorge	r0, sl, #0
    6c14:	20000003 	andcs	r0, r0, r3
    6c18:	0000037e 	andeq	r0, r0, lr, ror r3
    6c1c:	00004b70 	andeq	r4, r0, r0, ror fp
    6c20:	00323c28 	eorseq	r3, r2, r8, lsr #24
    6c24:	00000c08 	andeq	r0, r0, r8, lsl #24
    6c28:	03ae2100 			; <UNDEFINED> instruction: 0x03ae2100
    6c2c:	4b830000 	blmi	fe0c6c34 <_estack+0xde096c34>
    6c30:	462c0000 	strtmi	r0, [ip], -r0
    6c34:	de080032 	mcrle	0, 0, r0, cr8, cr2, {1}
    6c38:	19000011 	stmdbne	r0, {r0, r4}
    6c3c:	7b025101 	blvc	9b048 <_Min_Stack_Size+0x9ac48>
    6c40:	00000000 	andeq	r0, r0, r0
    6c44:	00323a2c 	eorseq	r3, r2, ip, lsr #20
    6c48:	0011de08 	andseq	sp, r1, r8, lsl #28
    6c4c:	51011900 	tstpl	r1, r0, lsl #18
    6c50:	00007b02 	andeq	r7, r0, r2, lsl #22
    6c54:	4b260000 	blmi	986c5c <_Min_Stack_Size+0x98685c>
    6c58:	98000006 	stmdals	r0, {r1, r2}
    6c5c:	24080031 	strcs	r0, [r8], #-49	; 0x31
    6c60:	01000000 	mrseq	r0, (UNDEF: 0)
    6c64:	0bca0183 	bleq	ff287278 <_estack+0xdf257278>
    6c68:	8c200000 	stchi	0, cr0, [r0], #-0
    6c6c:	97000006 	strls	r0, [r0, -r6]
    6c70:	2000004b 	andcs	r0, r0, fp, asr #32
    6c74:	00000680 	andeq	r0, r0, r0, lsl #13
    6c78:	00004b97 	muleq	r0, r7, fp
    6c7c:	0006742a 	andeq	r7, r6, sl, lsr #8
    6c80:	06682000 	strbteq	r2, [r8], -r0
    6c84:	4b970000 	blmi	fe5c6c8c <_estack+0xde596c8c>
    6c88:	5c200000 	stcpl	0, cr0, [r0], #-0
    6c8c:	ab000006 	blge	6cac <_Min_Stack_Size+0x68ac>
    6c90:	2800004b 	stmdacs	r0, {r0, r1, r3, r6}
    6c94:	08003198 	stmdaeq	r0, {r3, r4, r7, r8, ip, sp}
    6c98:	00000024 	andeq	r0, r0, r4, lsr #32
    6c9c:	00069821 	andeq	r9, r6, r1, lsr #16
    6ca0:	004bbe00 	subeq	fp, fp, r0, lsl #28
    6ca4:	06a42200 	strteq	r2, [r4], r0, lsl #4
    6ca8:	91020000 	mrsls	r0, (UNDEF: 2)
    6cac:	31a8174c 			; <UNDEFINED> instruction: 0x31a8174c
    6cb0:	11970800 	orrsne	r0, r7, r0, lsl #16
    6cb4:	bc2c0000 	stclt	0, cr0, [ip], #-0
    6cb8:	a3080031 	movwge	r0, #32817	; 0x8031
    6cbc:	19000011 	stmdbne	r0, {r0, r4}
    6cc0:	30015301 	andcc	r5, r1, r1, lsl #6
    6cc4:	01520119 	cmpeq	r2, r9, lsl r1
    6cc8:	51011930 	tstpl	r1, r0, lsr r9
    6ccc:	004c9102 	subeq	r9, ip, r2, lsl #2
    6cd0:	44180000 	ldrmi	r0, [r8], #-0
    6cd4:	c8080031 	stmdagt	r8, {r0, r4, r5}
    6cd8:	de000011 	mcrle	0, 0, r0, cr0, cr1, {0}
    6cdc:	1900000b 	stmdbne	r0, {r0, r1, r3}
    6ce0:	7b025001 	blvc	9acec <_Min_Stack_Size+0x9a8ec>
    6ce4:	502d0000 	eorpl	r0, sp, r0
    6ce8:	ee080031 	mcr	0, 0, r0, cr8, cr1, {1}
    6cec:	1900000b 	stmdbne	r0, {r0, r1, r3}
    6cf0:	76025001 	strvc	r5, [r2], -r1
    6cf4:	c4170000 	ldrgt	r0, [r7], #-0
    6cf8:	d7080031 	smladxle	r8, r1, r0, r0
    6cfc:	00000010 	andeq	r0, r0, r0, lsl r0
    6d00:	30141700 	andscc	r1, r4, r0, lsl #14
    6d04:	12010800 	andne	r0, r1, #0, 16
    6d08:	4a180000 	bmi	606d10 <_Min_Stack_Size+0x606910>
    6d0c:	09080030 	stmdbeq	r8, {r4, r5}
    6d10:	19000012 	stmdbne	r0, {r1, r4}
    6d14:	1900000c 	stmdbne	r0, {r2, r3}
    6d18:	77055101 	strvc	r5, [r5, -r1, lsl #2]
    6d1c:	1c007a00 	stcne	10, cr7, [r0], {-0}
    6d20:	304e1700 	subcc	r1, lr, r0, lsl #14
    6d24:	12200800 	eorne	r0, r0, #0, 16
    6d28:	f6170000 			; <UNDEFINED> instruction: 0xf6170000
    6d2c:	20080030 	andcs	r0, r8, r0, lsr r0
    6d30:	17000012 	smladne	r0, r2, r0, r0
    6d34:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
    6d38:	00001220 	andeq	r1, r0, r0, lsr #4
    6d3c:	00318217 	eorseq	r8, r1, r7, lsl r2
    6d40:	00122c08 	andseq	r2, r2, r8, lsl #24
    6d44:	2f000000 	svccs	0x00000000
    6d48:	00000842 	andeq	r0, r0, r2, asr #16
    6d4c:	08003054 	stmdaeq	r0, {r2, r4, r6, ip, sp}
    6d50:	00000c30 	andeq	r0, r0, r0, lsr ip
    6d54:	2b01a901 	blcs	71160 <_Min_Stack_Size+0x70d60>
    6d58:	00000c30 	andeq	r0, r0, r0, lsr ip
    6d5c:	00084f22 	andeq	r4, r8, r2, lsr #30
    6d60:	40910200 	addsmi	r0, r1, r0, lsl #4
    6d64:	00085b21 	andeq	r5, r8, r1, lsr #22
    6d68:	004bdd00 	subeq	sp, fp, r0, lsl #26
    6d6c:	08672100 	stmdaeq	r7!, {r8, sp}^
    6d70:	4c1c0000 	ldcmi	0, cr0, [ip], {-0}
    6d74:	73210000 	teqvc	r1, #0
    6d78:	30000008 	andcc	r0, r0, r8
    6d7c:	2200004c 	andcs	r0, r0, #76	; 0x4c
    6d80:	0000087f 	andeq	r0, r0, pc, ror r8
    6d84:	1d087d02 	stcne	13, cr7, [r8, #-8]
    6d88:	0000077e 	andeq	r0, r0, lr, ror r7
    6d8c:	0800307c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip, sp}
    6d90:	00000c60 	andeq	r0, r0, r0, ror #24
    6d94:	c5027601 	strgt	r7, [r2, #-1537]	; 0x601
    6d98:	2000000d 	andcs	r0, r0, sp
    6d9c:	0000078f 	andeq	r0, r0, pc, lsl #15
    6da0:	00004c43 	andeq	r4, r0, r3, asr #24
    6da4:	000c602b 	andeq	r6, ip, fp, lsr #32
    6da8:	079b2100 	ldreq	r2, [fp, r0, lsl #2]
    6dac:	4c9b0000 	ldcmi	0, cr0, [fp], {0}
    6db0:	a7220000 	strge	r0, [r2, -r0]!
    6db4:	05000007 	streq	r0, [r0, #-7]
    6db8:	00021803 	andeq	r1, r2, r3, lsl #16
    6dbc:	07b41d20 	ldreq	r1, [r4, r0, lsr #26]!
    6dc0:	30f80000 	rscscc	r0, r8, r0
    6dc4:	0c680800 	stcleq	8, cr0, [r8], #-0
    6dc8:	06010000 	streq	r0, [r1], -r0
    6dcc:	000dba02 	andeq	fp, sp, r2, lsl #20
    6dd0:	0c682b00 	stcleq	11, cr2, [r8], #-0
    6dd4:	c1210000 	teqgt	r1, r0
    6dd8:	ef000007 	svc	0x00000007
    6ddc:	2100004c 	tstcs	r0, ip, asr #32
    6de0:	000007cd 	andeq	r0, r0, sp, asr #15
    6de4:	00004d18 	andeq	r4, r0, r8, lsl sp
    6de8:	0007d921 	andeq	sp, r7, r1, lsr #18
    6dec:	004d4700 	subeq	r4, sp, r0, lsl #14
    6df0:	07e52100 	strbeq	r2, [r5, r0, lsl #2]!
    6df4:	4d5a0000 	ldclmi	0, cr0, [sl, #-0]
    6df8:	f1290000 			; <UNDEFINED> instruction: 0xf1290000
    6dfc:	26000007 	strcs	r0, [r0], -r7
    6e00:	0000064b 	andeq	r0, r0, fp, asr #12
    6e04:	080031f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip, sp}
    6e08:	00000026 	andeq	r0, r0, r6, lsr #32
    6e0c:	7702e501 	strvc	lr, [r2, -r1, lsl #10]
    6e10:	2000000d 	andcs	r0, r0, sp
    6e14:	0000068c 	andeq	r0, r0, ip, lsl #13
    6e18:	00004d83 	andeq	r4, r0, r3, lsl #27
    6e1c:	00068020 	andeq	r8, r6, r0, lsr #32
    6e20:	004d8300 	subeq	r8, sp, r0, lsl #6
    6e24:	06742000 	ldrbteq	r2, [r4], -r0
    6e28:	4da30000 	stcmi	0, cr0, [r3]
    6e2c:	68200000 	stmdavs	r0!, {}	; <UNPREDICTABLE>
    6e30:	83000006 	movwhi	r0, #6
    6e34:	2000004d 	andcs	r0, r0, sp, asr #32
    6e38:	0000065c 	andeq	r0, r0, ip, asr r6
    6e3c:	00004dc1 	andeq	r4, r0, r1, asr #27
    6e40:	0031f828 	eorseq	pc, r1, r8, lsr #16
    6e44:	00002608 	andeq	r2, r0, r8, lsl #12
    6e48:	06982100 	ldreq	r2, [r8], r0, lsl #2
    6e4c:	4ddf0000 	ldclmi	0, cr0, [pc]	; 6e54 <_Min_Stack_Size+0x6a54>
    6e50:	a4220000 	strtge	r0, [r2], #-0
    6e54:	02000006 	andeq	r0, r0, #6
    6e58:	0a174c91 	beq	5da0a4 <_Min_Stack_Size+0x5d9ca4>
    6e5c:	97080032 	smladxls	r8, r2, r0, r0
    6e60:	2c000011 	stccs	0, cr0, [r0], {17}
    6e64:	0800321e 	stmdaeq	r0, {r1, r2, r3, r4, r9, ip, sp}
    6e68:	000011a3 	andeq	r1, r0, r3, lsr #3
    6e6c:	01530119 	cmpeq	r3, r9, lsl r1
    6e70:	52011930 	andpl	r1, r1, #48, 18	; 0xc0000
    6e74:	01193001 	tsteq	r9, r1
    6e78:	4c910251 	lfmmi	f0, 4, [r1], {81}	; 0x51
    6e7c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6e80:	0800310a 	stmdaeq	r0, {r1, r3, r8, ip, sp}
    6e84:	000011c8 	andeq	r1, r0, r8, asr #3
    6e88:	00000d8b 	andeq	r0, r0, fp, lsl #27
    6e8c:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    6e90:	2d00007b 	stccs	0, cr0, [r0, #-492]	; 0xfffffe14
    6e94:	08003110 	stmdaeq	r0, {r4, r8, ip, sp}
    6e98:	00000d9b 	muleq	r0, fp, sp
    6e9c:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    6ea0:	18000076 	stmdane	r0, {r1, r2, r4, r5, r6}
    6ea4:	0800317c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, sp}
    6ea8:	000011de 	ldrdeq	r1, [r0], -lr
    6eac:	00000daf 	andeq	r0, r0, pc, lsr #27
    6eb0:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    6eb4:	1700007b 	smlsdxne	r0, fp, r0, r0
    6eb8:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
    6ebc:	000010d7 	ldrdeq	r1, [r0], -r7
    6ec0:	80170000 	andshi	r0, r7, r0
    6ec4:	f5080030 			; <UNDEFINED> instruction: 0xf5080030
    6ec8:	00000011 	andeq	r0, r0, r1, lsl r0
    6ecc:	036d1d00 	cmneq	sp, #0, 26
    6ed0:	324e0000 	subcc	r0, lr, #0
    6ed4:	0c880800 	stceq	8, cr0, [r8], {0}
    6ed8:	80010000 	andhi	r0, r1, r0
    6edc:	000e6a02 	andeq	r6, lr, r2, lsl #20
    6ee0:	03a22000 			; <UNDEFINED> instruction: 0x03a22000
    6ee4:	4e0a0000 	cdpmi	0, 0, cr0, cr10, cr0, {0}
    6ee8:	96200000 	strtls	r0, [r0], -r0
    6eec:	28000003 	stmdacs	r0, {r0, r1}
    6ef0:	2000004e 	andcs	r0, r0, lr, asr #32
    6ef4:	0000038a 	andeq	r0, r0, sl, lsl #7
    6ef8:	00004e4a 	andeq	r4, r0, sl, asr #28
    6efc:	00037e20 	andeq	r7, r3, r0, lsr #28
    6f00:	004e8300 	subeq	r8, lr, r0, lsl #6
    6f04:	0c882b00 	vstmiaeq	r8, {d2-d1}
    6f08:	ae210000 	cdpge	0, 2, cr0, cr1, cr0, {0}
    6f0c:	a1000003 	tstge	r0, r3
    6f10:	2e00004e 	cdpcs	0, 0, cr0, cr0, cr14, {2}
    6f14:	080032dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip, sp}
    6f18:	0000000e 	andeq	r0, r0, lr
    6f1c:	00000e58 	andeq	r0, r0, r8, asr lr
    6f20:	00038a2a 	andeq	r8, r3, sl, lsr #20
    6f24:	03962000 	orrseq	r2, r6, #0
    6f28:	4ecd0000 	cdpmi	0, 12, cr0, cr13, cr0, {0}
    6f2c:	a22a0000 	eorge	r0, sl, #0
    6f30:	20000003 	andcs	r0, r0, r3
    6f34:	0000037e 	andeq	r0, r0, lr, ror r3
    6f38:	00004ee2 	andeq	r4, r0, r2, ror #29
    6f3c:	0032dc28 	eorseq	sp, r2, r8, lsr #24
    6f40:	00000e08 	andeq	r0, r0, r8, lsl #28
    6f44:	03ae2100 			; <UNDEFINED> instruction: 0x03ae2100
    6f48:	4ef50000 	cdpmi	0, 15, cr0, cr5, cr0, {0}
    6f4c:	e82c0000 	stmda	ip!, {}	; <UNPREDICTABLE>
    6f50:	de080032 	mcrle	0, 0, r0, cr8, cr2, {1}
    6f54:	19000011 	stmdbne	r0, {r0, r4}
    6f58:	79025101 	stmdbvc	r2, {r0, r8, ip, lr}
    6f5c:	00000004 	andeq	r0, r0, r4
    6f60:	0032da2c 	eorseq	sp, r2, ip, lsr #20
    6f64:	0011de08 	andseq	sp, r1, r8, lsl #28
    6f68:	51011900 	tstpl	r1, r0, lsl #18
    6f6c:	00047902 	andeq	r7, r4, r2, lsl #18
    6f70:	6d1d0000 	ldcvs	0, cr0, [sp, #-0]
    6f74:	a0000003 	andge	r0, r0, r3
    6f78:	a8080032 	stmdage	r8, {r1, r4, r5}
    6f7c:	0100000c 	tsteq	r0, ip
    6f80:	0ef702a9 	cdpeq	2, 15, cr0, cr7, cr9, {5}
    6f84:	a2200000 	eorge	r0, r0, #0
    6f88:	09000003 	stmdbeq	r0, {r0, r1}
    6f8c:	2000004f 	andcs	r0, r0, pc, asr #32
    6f90:	00000396 	muleq	r0, r6, r3
    6f94:	00004f09 	andeq	r4, r0, r9, lsl #30
    6f98:	00038a20 	andeq	r8, r3, r0, lsr #20
    6f9c:	004f1e00 	subeq	r1, pc, r0, lsl #28
    6fa0:	037e2000 	cmneq	lr, #0
    6fa4:	4f490000 	svcmi	0x00490000
    6fa8:	a82b0000 	stmdage	fp!, {}	; <UNPREDICTABLE>
    6fac:	2100000c 	tstcs	r0, ip
    6fb0:	000003ae 	andeq	r0, r0, lr, lsr #7
    6fb4:	00004f5c 	andeq	r4, r0, ip, asr pc
    6fb8:	000cc030 	andeq	ip, ip, r0, lsr r0
    6fbc:	000ee500 	andeq	lr, lr, r0, lsl #10
    6fc0:	038a2000 	orreq	r2, sl, #0
    6fc4:	4f1e0000 	svcmi	0x001e0000
    6fc8:	96200000 	strtls	r0, [r0], -r0
    6fcc:	09000003 	stmdbeq	r0, {r0, r1}
    6fd0:	2000004f 	andcs	r0, r0, pc, asr #32
    6fd4:	000003a2 	andeq	r0, r0, r2, lsr #7
    6fd8:	00004f09 	andeq	r4, r0, r9, lsl #30
    6fdc:	00037e2a 	andeq	r7, r3, sl, lsr #28
    6fe0:	0cc02b00 	vstmiaeq	r0, {d18-d17}
    6fe4:	ae290000 	cdpge	0, 2, cr0, cr9, cr0, {0}
    6fe8:	00000003 	andeq	r0, r0, r3
    6fec:	32bc2c00 	adcscc	r2, ip, #0, 24
    6ff0:	11de0800 	bicsne	r0, lr, r0, lsl #16
    6ff4:	01190000 	tsteq	r9, r0
    6ff8:	04790251 	ldrbteq	r0, [r9], #-593	; 0x251
    6ffc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7000:	08003060 	stmdaeq	r0, {r5, r6, ip, sp}
    7004:	00001233 	andeq	r1, r0, r3, lsr r2
    7008:	00000f15 	andeq	r0, r0, r5, lsl pc
    700c:	01530119 	cmpeq	r3, r9, lsl r1
    7010:	52011930 	andpl	r1, r1, #48, 18	; 0xc0000
    7014:	01193001 	tsteq	r9, r1
    7018:	40910251 	addsmi	r0, r1, r1, asr r2
    701c:	307c1800 	rsbscc	r1, ip, r0, lsl #16
    7020:	11c80800 	bicne	r0, r8, r0, lsl #16
    7024:	0f290000 	svceq	0x00290000
    7028:	01190000 	tsteq	r9, r0
    702c:	04790250 	ldrbteq	r0, [r9], #-592	; 0x250
    7030:	30b61800 	adcscc	r1, r6, r0, lsl #16
    7034:	12580800 	subsne	r0, r8, #0, 16
    7038:	0f3d0000 	svceq	0x003d0000
    703c:	01190000 	tsteq	r9, r0
    7040:	00790250 	rsbseq	r0, r9, r0, asr r2
    7044:	326c2d00 	rsbcc	r2, ip, #0, 26
    7048:	0f4d0800 	svceq	0x004d0800
    704c:	01190000 	tsteq	r9, r0
    7050:	00790250 	rsbseq	r0, r9, r0, asr r2
    7054:	328a1800 	addcc	r1, sl, #0, 16
    7058:	064b0800 	strbeq	r0, [fp], -r0, lsl #16
    705c:	0f710000 	svceq	0x00710000
    7060:	01190000 	tsteq	r9, r0
    7064:	19300153 	ldmdbne	r0!, {r0, r1, r4, r6, r8}
    7068:	30015101 	andcc	r5, r1, r1, lsl #2
    706c:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    7070:	02190079 	andseq	r0, r9, #121	; 0x79
    7074:	3001007d 	andcc	r0, r1, sp, ror r0
    7078:	32941700 	addscc	r1, r4, #0, 14
    707c:	10d70800 	sbcsne	r0, r7, r0, lsl #16
    7080:	ee170000 	cdp	0, 1, cr0, cr7, cr0, {0}
    7084:	d7080032 	smladxle	r8, r2, r0, r0
    7088:	00000010 	andeq	r0, r0, r0, lsl r0
    708c:	2d1a0000 	ldccs	0, cr0, [sl, #-0]
    7090:	01000025 	tsteq	r0, r5, lsr #32
    7094:	0101031c 	tsteq	r1, ip, lsl r3
    7098:	32f00000 	rscscc	r0, r0, #0
    709c:	00180800 	andseq	r0, r8, r0, lsl #16
    70a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    70a4:	00000fe1 	andeq	r0, r0, r1, ror #31
    70a8:	00239c1b 	eoreq	r9, r3, fp, lsl ip
    70ac:	031c0100 	tsteq	ip, #0, 2
    70b0:	00000257 	andeq	r0, r0, r7, asr r2
    70b4:	00004f70 	andeq	r4, r0, r0, ror pc
    70b8:	00249a25 	eoreq	r9, r4, r5, lsr #20
    70bc:	031e0100 	tsteq	lr, #0, 2
    70c0:	00000101 	andeq	r0, r0, r1, lsl #2
    70c4:	9b1c5401 	blls	71c0d0 <_Min_Stack_Size+0x71bcd0>
    70c8:	01000023 	tsteq	r0, r3, lsr #32
    70cc:	031a031f 	tsteq	sl, #2080374784	; 0x7c000000
    70d0:	4f9c0000 	svcmi	0x009c0000
    70d4:	f8170000 			; <UNDEFINED> instruction: 0xf8170000
    70d8:	76080032 			; <UNDEFINED> instruction: 0x76080032
    70dc:	17000010 	smladne	r0, r0, r0, r0
    70e0:	08003304 	stmdaeq	r0, {r2, r8, r9, ip, sp}
    70e4:	0000107d 	andeq	r1, r0, sp, ror r0
    70e8:	241e1a00 	ldrcs	r1, [lr], #-2560	; 0xa00
    70ec:	2f010000 	svccs	0x00010000
    70f0:	00009e03 	andeq	r9, r0, r3, lsl #28
    70f4:	00330800 	eorseq	r0, r3, r0, lsl #16
    70f8:	00000408 	andeq	r0, r0, r8, lsl #8
    70fc:	1c9c0100 	ldfnes	f0, [ip], {0}
    7100:	1b000010 	blne	7148 <_Min_Stack_Size+0x6d48>
    7104:	0000239c 	muleq	r0, ip, r3
    7108:	1c032f01 	stcne	15, cr2, [r3], {1}
    710c:	c8000010 	stmdagt	r0, {r4}
    7110:	1c00004f 	stcne	0, cr0, [r0], {79}	; 0x4f
    7114:	0000239b 	muleq	r0, fp, r3
    7118:	bb033101 	bllt	d3524 <_Min_Stack_Size+0xd3124>
    711c:	c8000003 	stmdagt	r0, {r0, r1}
    7120:	0000004f 	andeq	r0, r0, pc, asr #32
    7124:	00025707 	andeq	r5, r2, r7, lsl #14
    7128:	22ba3100 	adcscs	r3, sl, #0, 2
    712c:	9f010000 	svcls	0x00010000
    7130:	000001ef 	andeq	r0, r0, pc, ror #3
    7134:	01f00305 	mvnseq	r0, r5, lsl #6
    7138:	44312000 	ldrtmi	r2, [r1], #-0
    713c:	01000022 	tsteq	r0, r2, lsr #32
    7140:	0001efa0 	andeq	lr, r1, r0, lsr #31
    7144:	04030500 	streq	r0, [r3], #-1280	; 0x500
    7148:	31200002 	teqcc	r0, r2
    714c:	00002271 	andeq	r2, r0, r1, ror r2
    7150:	07fea101 	ldrbeq	sl, [lr, r1, lsl #2]!
    7154:	03050000 	movweq	r0, #20480	; 0x5000
    7158:	200001ec 	andcs	r0, r0, ip, ror #3
    715c:	00236831 	eoreq	r6, r3, r1, lsr r8
    7160:	fea20100 	cdp2	1, 10, cr0, cr2, cr0, {0}
    7164:	05000007 	streq	r0, [r0, #-7]
    7168:	00022003 	andeq	r2, r2, r3
    716c:	21c93120 	biccs	r3, r9, r0, lsr #2
    7170:	a5010000 	strge	r0, [r1, #-0]
    7174:	0000024c 	andeq	r0, r0, ip, asr #4
    7178:	021c0305 	andseq	r0, ip, #335544320	; 0x14000000
    717c:	b3322000 	teqlt	r2, #0
    7180:	06000013 			; <UNDEFINED> instruction: 0x06000013
    7184:	1383327b 	orrne	r3, r3, #-1342177273	; 0xb0000007
    7188:	7c060000 	stcvc	0, cr0, [r6], {-0}
    718c:	000da333 	andeq	sl, sp, r3, lsr r3
    7190:	01500700 	cmpeq	r0, r0, lsl #14
    7194:	00001096 	muleq	r0, r6, r0
    7198:	0010960a 	andseq	r9, r0, sl, lsl #12
    719c:	fe070000 	cdp2	0, 0, cr0, cr7, cr0, {0}
    71a0:	34000007 	strcc	r0, [r0], #-7
    71a4:	0000183e 	andeq	r1, r0, lr, lsr r8
    71a8:	4c060209 	sfmmi	f0, 4, [r6], {9}
    71ac:	bb000002 	bllt	71bc <_Min_Stack_Size+0x6dbc>
    71b0:	0a000010 	beq	71f8 <_Min_Stack_Size+0x6df8>
    71b4:	00000641 	andeq	r0, r0, r1, asr #12
    71b8:	0006410a 	andeq	r4, r6, sl, lsl #2
    71bc:	10bb0a00 	adcsne	r0, fp, r0, lsl #20
    71c0:	07000000 	streq	r0, [r0, -r0]
    71c4:	000000b9 	strheq	r0, [r0], -r9
    71c8:	0016d333 	andseq	sp, r6, r3, lsr r3
    71cc:	05ed0900 	strbeq	r0, [sp, #2304]!	; 0x900
    71d0:	000010d7 	ldrdeq	r1, [r0], -r7
    71d4:	00024c0a 	andeq	r4, r2, sl, lsl #24
    71d8:	00a70a00 	adceq	r0, r7, r0, lsl #20
    71dc:	35000000 	strcc	r0, [r0, #-0]
    71e0:	00000d8c 	andeq	r0, r0, ip, lsl #27
    71e4:	00cf7d06 	sbceq	r7, pc, r6, lsl #26
    71e8:	5a340000 	bpl	d071f0 <_Min_Stack_Size+0xd06df0>
    71ec:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    71f0:	010105ec 	smlatteq	r1, ip, r5, r0
    71f4:	111b0000 	tstne	fp, r0
    71f8:	da0a0000 	ble	287200 <_Min_Stack_Size+0x286e00>
    71fc:	0a000000 	beq	7204 <_Min_Stack_Size+0x6e04>
    7200:	00000241 	andeq	r0, r0, r1, asr #4
    7204:	00111b0a 	andseq	r1, r1, sl, lsl #22
    7208:	06460a00 	strbeq	r0, [r6], -r0, lsl #20
    720c:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    7210:	0a000001 	beq	721c <_Min_Stack_Size+0x6e1c>
    7214:	00001120 	andeq	r1, r0, r0, lsr #2
    7218:	00112b0a 	andseq	r2, r1, sl, lsl #22
    721c:	11300a00 	teqne	r0, r0, lsl #20
    7220:	07000000 	streq	r0, [r0, -r0]
    7224:	000000c4 	andeq	r0, r0, r4, asr #1
    7228:	00112507 	andseq	r2, r1, r7, lsl #10
    722c:	fa040600 	blx	108a34 <_Min_Stack_Size+0x108634>
    7230:	07000001 	streq	r0, [r0, -r1]
    7234:	00000246 	andeq	r0, r0, r6, asr #4
    7238:	00113507 	andseq	r3, r1, r7, lsl #10
    723c:	3b040600 	blcc	108a44 <_Min_Stack_Size+0x108644>
    7240:	07000011 	smladeq	r0, r1, r0, r0
    7244:	00000236 	andeq	r0, r0, r6, lsr r2
    7248:	0010d034 	andseq	sp, r0, r4, lsr r0
    724c:	01710b00 	cmneq	r1, r0, lsl #22
    7250:	0000009e 	muleq	r0, lr, r0
    7254:	00001156 	andeq	r1, r0, r6, asr r1
    7258:	0000250a 	andeq	r2, r0, sl, lsl #10
    725c:	e9330000 	ldmdb	r3!, {}	; <UNPREDICTABLE>
    7260:	07000010 	smladeq	r0, r0, r0, r0
    7264:	1168015b 	cmnne	r8, fp, asr r1
    7268:	680a0000 	stmdavs	sl, {}	; <UNPREDICTABLE>
    726c:	00000011 	andeq	r0, r0, r1, lsl r0
    7270:	0001e907 	andeq	lr, r1, r7, lsl #18
    7274:	14bd3400 	ldrtne	r3, [sp], #1024	; 0x400
    7278:	37090000 	strcc	r0, [r9, -r0]
    727c:	00010105 	andeq	r0, r1, r5, lsl #2
    7280:	00119200 	andseq	r9, r1, r0, lsl #4
    7284:	024c0a00 	subeq	r0, ip, #0, 20
    7288:	920a0000 	andls	r0, sl, #0
    728c:	0a000011 	beq	72d8 <_Min_Stack_Size+0x6ed8>
    7290:	000003ef 	andeq	r0, r0, pc, ror #7
    7294:	0006b10a 	andeq	fp, r6, sl, lsl #2
    7298:	b2070000 	andlt	r0, r7, #0
    729c:	36000000 	strcc	r0, [r0], -r0
    72a0:	00001342 	andeq	r1, r0, r2, asr #6
    72a4:	0105da08 	tsteq	r5, r8, lsl #20
    72a8:	34000001 	strcc	r0, [r0], #-1
    72ac:	000016e7 	andeq	r1, r0, r7, ror #13
    72b0:	01024c09 	tsteq	r2, r9, lsl #24
    72b4:	c8000001 	stmdagt	r0, {r0}
    72b8:	0a000011 	beq	7304 <_Min_Stack_Size+0x6f04>
    72bc:	0000024c 	andeq	r0, r0, ip, asr #4
    72c0:	0011920a 	andseq	r9, r1, sl, lsl #4
    72c4:	01170a00 	tsteq	r7, r0, lsl #20
    72c8:	b10a0000 	mrslt	r0, (UNDEF: 10)
    72cc:	00000006 	andeq	r0, r0, r6
    72d0:	000f7c34 	andeq	r7, pc, r4, lsr ip	; <UNPREDICTABLE>
    72d4:	018c0700 	orreq	r0, ip, r0, lsl #14
    72d8:	0000010c 	andeq	r0, r0, ip, lsl #2
    72dc:	000011de 	ldrdeq	r1, [r0], -lr
    72e0:	0011680a 	andseq	r6, r1, sl, lsl #16
    72e4:	b3330000 	teqlt	r3, #0
    72e8:	0700000d 	streq	r0, [r0, -sp]
    72ec:	11f50168 	mvnsne	r0, r8, ror #2
    72f0:	960a0000 	strls	r0, [sl], -r0
    72f4:	0a000010 	beq	733c <_Min_Stack_Size+0x6f3c>
    72f8:	00001168 	andeq	r1, r0, r8, ror #2
    72fc:	0e9f3600 	cdpeq	6, 9, cr3, cr15, cr0, {0}
    7300:	14080000 	strne	r0, [r8], #-0
    7304:	00011704 	andeq	r1, r1, r4, lsl #14
    7308:	13dd3700 	bicsne	r3, sp, #0, 14
    730c:	cf080000 	svcgt	0x00080000
    7310:	19f83303 	ldmibne	r8!, {r0, r1, r8, r9, ip, sp}^
    7314:	8b090000 	blhi	24731c <_Min_Stack_Size+0x246f1c>
    7318:	00122006 	andseq	r2, r2, r6
    731c:	024c0a00 	subeq	r0, ip, #0, 20
    7320:	170a0000 	strne	r0, [sl, -r0]
    7324:	00000001 	andeq	r0, r0, r1
    7328:	00132536 	andseq	r2, r3, r6, lsr r5
    732c:	04050800 	streq	r0, [r5], #-2048	; 0x800
    7330:	00000101 	andeq	r0, r0, r1, lsl #2
    7334:	0013d232 	andseq	sp, r3, r2, lsr r2
    7338:	34720600 	ldrbtcc	r0, [r2], #-1536	; 0x600
    733c:	000015ca 	andeq	r1, r0, sl, asr #11
    7340:	01038d09 	tsteq	r3, r9, lsl #26
    7344:	58000001 	stmdapl	r0, {r0}
    7348:	0a000012 	beq	7398 <_Min_Stack_Size+0x6f98>
    734c:	0000024c 	andeq	r0, r0, ip, asr #4
    7350:	0006460a 	andeq	r4, r6, sl, lsl #12
    7354:	01170a00 	tsteq	r7, r0, lsl #20
    7358:	b10a0000 	mrslt	r0, (UNDEF: 10)
    735c:	00000006 	andeq	r0, r0, r6
    7360:	00125938 	andseq	r5, r2, r8, lsr r9
    7364:	01720b00 	cmneq	r2, r0, lsl #22
    7368:	00009e0a 	andeq	r9, r0, sl, lsl #28
    736c:	e7000000 	str	r0, [r0, -r0]
    7370:	04000003 	streq	r0, [r0], #-3
    7374:	0013a200 	andseq	sl, r3, r0, lsl #4
    7378:	84010400 	strhi	r0, [r1], #-1024	; 0x400
    737c:	01000002 	tsteq	r0, r2
    7380:	000025d9 	ldrdeq	r2, [r0], -r9
    7384:	00000101 	andeq	r0, r0, r1, lsl #2
    7388:	00000d30 	andeq	r0, r0, r0, lsr sp
    738c:	00000000 	andeq	r0, r0, r0
    7390:	0000219e 	muleq	r0, lr, r1
    7394:	69050402 	stmdbvs	r5, {r1, sl}
    7398:	0300746e 	movweq	r7, #1134	; 0x46e
    739c:	017d0704 	cmneq	sp, r4, lsl #14
    73a0:	01030000 	mrseq	r0, (UNDEF: 3)
    73a4:	00015006 	andeq	r5, r1, r6
    73a8:	00f20400 	rscseq	r0, r2, r0, lsl #8
    73ac:	1c020000 	stcne	0, cr0, [r2], {-0}
    73b0:	00000045 	andeq	r0, r0, r5, asr #32
    73b4:	4e080103 	adfmie	f0, f0, f3
    73b8:	03000001 	movweq	r0, #1
    73bc:	00df0502 	sbcseq	r0, pc, r2, lsl #10
    73c0:	02030000 	andeq	r0, r3, #0
    73c4:	0001e507 	andeq	lr, r1, r7, lsl #10
    73c8:	05040300 	streq	r0, [r4, #-768]	; 0x300
    73cc:	000000c5 	andeq	r0, r0, r5, asr #1
    73d0:	00005104 	andeq	r5, r0, r4, lsl #2
    73d4:	6c380200 	lfmvs	f0, 4, [r8], #-0
    73d8:	03000000 	movweq	r0, #0
    73dc:	01780704 	cmneq	r8, r4, lsl #14
    73e0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    73e4:	0000c005 	andeq	ip, r0, r5
    73e8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    73ec:	00000173 	andeq	r0, r0, r3, ror r1
    73f0:	0000f404 	andeq	pc, r0, r4, lsl #8
    73f4:	3a2a0300 	bcc	a87ffc <_Min_Stack_Size+0xa87bfc>
    73f8:	04000000 	streq	r0, [r0], #-0
    73fc:	00000053 	andeq	r0, r0, r3, asr r0
    7400:	00614203 	rsbeq	r4, r1, r3, lsl #4
    7404:	c7040000 	strgt	r0, [r4, -r0]
    7408:	0400001d 	streq	r0, [r0], #-29
    740c:	0000a249 	andeq	sl, r0, r9, asr #4
    7410:	a8040500 	stmdage	r4, {r8, sl}
    7414:	06000000 	streq	r0, [r0], -r0
    7418:	000000b3 	strheq	r0, [r0], -r3
    741c:	0000b307 	andeq	fp, r0, r7, lsl #6
    7420:	04080000 	streq	r0, [r8], #-0
    7424:	001ae304 	andseq	lr, sl, r4, lsl #6
    7428:	8c5d0500 	cfldr64hi	mvdx0, [sp], {-0}
    742c:	04000000 	streq	r0, [r0], #-0
    7430:	00000fdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7434:	005a5e05 	subseq	r5, sl, r5, lsl #28
    7438:	de040000 	cdple	0, 0, cr0, cr4, cr0, {0}
    743c:	0500000f 	streq	r0, [r0, #-15]
    7440:	00006c5f 	andeq	r6, r0, pc, asr ip
    7444:	0e700400 	cdpeq	4, 7, cr0, cr0, cr0, {0}
    7448:	65050000 	strvs	r0, [r5, #-0]
    744c:	0000008c 	andeq	r0, r0, ip, lsl #1
    7450:	57080103 	strpl	r0, [r8, -r3, lsl #2]
    7454:	05000001 	streq	r0, [r0, #-1]
    7458:	0000b504 	andeq	fp, r0, r4, lsl #10
    745c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    7460:	0000002c 	andeq	r0, r0, ip, lsr #32
    7464:	00254109 	eoreq	r4, r5, r9, lsl #2
    7468:	01170100 	tsteq	r7, r0, lsl #2
    746c:	0800330c 	stmdaeq	r0, {r2, r3, r8, r9, ip, sp}
    7470:	00000018 	andeq	r0, r0, r8, lsl r0
    7474:	a7099c01 	strge	r9, [r9, -r1, lsl #24]
    7478:	01000026 	tsteq	r0, r6, lsr #32
    747c:	332802bc 	teqcc	r8, #188, 4	; 0xc000000b
    7480:	000e0800 	andeq	r0, lr, r0, lsl #16
    7484:	9c010000 	stcls	0, cr0, [r1], {-0}
    7488:	001d590a 	andseq	r5, sp, sl, lsl #18
    748c:	e8d80100 	ldm	r8, {r8}^
    7490:	3c000000 	stccc	0, cr0, [r0], {-0}
    7494:	2c080033 	stccs	0, cr0, [r8], {51}	; 0x33
    7498:	01000000 	mrseq	r0, (UNDEF: 0)
    749c:	00015c9c 	muleq	r1, ip, ip
    74a0:	212e0b00 	teqcs	lr, r0, lsl #22
    74a4:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    74a8:	000000e8 	andeq	r0, r0, r8, ror #1
    74ac:	00004fe9 	andeq	r4, r0, r9, ror #31
    74b0:	00257b0c 	eoreq	r7, r5, ip, lsl #22
    74b4:	97d80100 	ldrbls	r0, [r8, r0, lsl #2]
    74b8:	01000000 	mrseq	r0, (UNDEF: 0)
    74bc:	1ebc0c51 	mrcne	12, 5, r0, cr12, cr1, {2}
    74c0:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    74c4:	000000b3 	strheq	r0, [r0], -r3
    74c8:	0d005201 	sfmeq	f5, 4, [r0, #-4]
    74cc:	00002611 	andeq	r2, r0, r1, lsl r6
    74d0:	68010401 	stmdavs	r1, {r0, sl}
    74d4:	20080033 	andcs	r0, r8, r3, lsr r0
    74d8:	01000000 	mrseq	r0, (UNDEF: 0)
    74dc:	13d20d9c 	bicsne	r0, r2, #156, 26	; 0x2700
    74e0:	83010000 	movwhi	r0, #4096	; 0x1000
    74e4:	00338801 	eorseq	r8, r3, r1, lsl #16
    74e8:	00001808 	andeq	r1, r0, r8, lsl #16
    74ec:	0e9c0100 	fmleqe	f0, f4, f0
    74f0:	00000d8c 	andeq	r0, r0, ip, lsl #27
    74f4:	8c01a301 	stchi	3, cr10, [r1], {1}
    74f8:	a0000000 	andge	r0, r0, r0
    74fc:	10080033 	andne	r0, r8, r3, lsr r0
    7500:	01000000 	mrseq	r0, (UNDEF: 0)
    7504:	25570f9c 	ldrbcs	r0, [r7, #-3996]	; 0xf9c
    7508:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    750c:	080033b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, sp}
    7510:	0000001c 	andeq	r0, r0, ip, lsl r0
    7514:	01be9c01 			; <UNDEFINED> instruction: 0x01be9c01
    7518:	c4100000 	ldrgt	r0, [r0], #-0
    751c:	80080033 	andhi	r0, r8, r3, lsr r0
    7520:	10000001 	andne	r0, r0, r1
    7524:	080033ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, ip, sp}
    7528:	00000180 	andeq	r0, r0, r0, lsl #3
    752c:	1f551100 	svcne	0x00551100
    7530:	7b010000 	blvc	47538 <_Min_Stack_Size+0x47138>
    7534:	0033cc01 	eorseq	ip, r3, r1, lsl #24
    7538:	00001a08 	andeq	r1, r0, r8, lsl #20
    753c:	de9c0100 	fmllee	f0, f4, f0
    7540:	10000001 	andne	r0, r0, r1
    7544:	080033e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, ip, sp}
    7548:	00000180 	andeq	r0, r0, r0, lsl #3
    754c:	13b31100 			; <UNDEFINED> instruction: 0x13b31100
    7550:	8f010000 	svchi	0x00010000
    7554:	0033e801 	eorseq	lr, r3, r1, lsl #16
    7558:	00001e08 	andeq	r1, r0, r8, lsl #28
    755c:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    7560:	10000001 	andne	r0, r0, r1
    7564:	080033ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, ip, sp}
    7568:	00000180 	andeq	r0, r0, r0, lsl #3
    756c:	0e491100 	dvfeqe	f1, f1, f0
    7570:	b4010000 	strlt	r0, [r1], #-0
    7574:	00340801 	eorseq	r0, r4, r1, lsl #16
    7578:	00000608 	andeq	r0, r0, r8, lsl #12
    757c:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    7580:	12000002 	andne	r0, r0, #2
    7584:	00002649 	andeq	r2, r0, r9, asr #12
    7588:	8c01b401 	cfstrshi	mvf11, [r1], {1}
    758c:	2f000000 	svccs	0x00000000
    7590:	00000050 	andeq	r0, r0, r0, asr r0
    7594:	00138311 	andseq	r8, r3, r1, lsl r3
    7598:	01980100 	orrseq	r0, r8, r0, lsl #2
    759c:	08003410 	stmdaeq	r0, {r4, sl, ip, sp}
    75a0:	00000024 	andeq	r0, r0, r4, lsr #32
    75a4:	024e9c01 	subeq	r9, lr, #256	; 0x100
    75a8:	2a100000 	bcs	4075b0 <_Min_Stack_Size+0x4071b0>
    75ac:	80080034 	andhi	r0, r8, r4, lsr r0
    75b0:	13000001 	movwne	r0, #1
    75b4:	08003434 	stmdaeq	r0, {r2, r4, r5, sl, ip, sp}
    75b8:	000001fe 	strdeq	r0, [r0], -lr
    75bc:	26850d00 	strcs	r0, [r5], r0, lsl #26
    75c0:	c2010000 	andgt	r0, r1, #0
    75c4:	00343401 	eorseq	r3, r4, r1, lsl #8
    75c8:	00005808 	andeq	r5, r0, r8, lsl #16
    75cc:	119c0100 	orrsne	r0, ip, r0, lsl #2
    75d0:	00002675 	andeq	r2, r0, r5, ror r6
    75d4:	8c01fa01 	stchi	10, cr15, [r1], {1}
    75d8:	24080034 	strcs	r0, [r8], #-52	; 0x34
    75dc:	01000000 	mrseq	r0, (UNDEF: 0)
    75e0:	0002989c 	muleq	r2, ip, r8
    75e4:	34921000 	ldrcc	r1, [r2], #0
    75e8:	01800800 	orreq	r0, r0, r0, lsl #16
    75ec:	96100000 	ldrls	r0, [r0], -r0
    75f0:	de080034 	mcrle	0, 0, r0, cr8, cr4, {1}
    75f4:	14000003 	strne	r0, [r0], #-3
    75f8:	080034b0 	stmdaeq	r0, {r4, r5, r7, sl, ip, sp}
    75fc:	000001fe 	strdeq	r0, [r0], -lr
    7600:	01500115 	cmpeq	r0, r5, lsl r1
    7604:	0d000030 	stceq	0, cr0, [r0, #-192]	; 0xffffff40
    7608:	0000261d 	andeq	r2, r0, sp, lsl r6
    760c:	b002aa01 	andlt	sl, r2, r1, lsl #20
    7610:	32080034 	andcc	r0, r8, #52	; 0x34
    7614:	01000000 	mrseq	r0, (UNDEF: 0)
    7618:	1a6d169c 	bne	1b4d090 <_Min_Stack_Size+0x1b4cc90>
    761c:	2a010000 	bcs	47624 <_Min_Stack_Size+0x47224>
    7620:	0000c001 	andeq	ip, r0, r1
    7624:	0034e400 	eorseq	lr, r4, r0, lsl #8
    7628:	0000bc08 	andeq	fp, r0, r8, lsl #24
    762c:	229c0100 	addscs	r0, ip, #0, 2
    7630:	17000003 	strne	r0, [r0, -r3]
    7634:	00000d10 	andeq	r0, r0, r0, lsl sp
    7638:	000002fd 	strdeq	r0, [r0], -sp
    763c:	00256818 	eoreq	r6, r5, r8, lsl r8
    7640:	01320100 	teqeq	r2, r0, lsl #2
    7644:	00000322 	andeq	r0, r0, r2, lsr #6
    7648:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    764c:	00002582 	andeq	r2, r0, r2, lsl #11
    7650:	27013301 	strcs	r3, [r1, -r1, lsl #6]
    7654:	80000003 	andhi	r0, r0, r3
    7658:	7e8083c8 	cdpvc	3, 8, cr8, cr0, cr8, {6}
    765c:	00269418 	eoreq	r9, r6, r8, lsl r4
    7660:	01340100 	teqeq	r4, r0, lsl #2
    7664:	00000332 	andeq	r0, r0, r2, lsr r3
    7668:	00739102 	rsbseq	r9, r3, r2, lsl #2
    766c:	00357810 	eorseq	r7, r5, r0, lsl r8
    7670:	00029808 	andeq	r9, r2, r8, lsl #16
    7674:	35881000 	strcc	r1, [r8]
    7678:	01070800 	tsteq	r7, r0, lsl #16
    767c:	9c100000 	ldcls	0, cr0, [r0], {-0}
    7680:	f5080035 			; <UNDEFINED> instruction: 0xf5080035
    7684:	10000000 	andne	r0, r0, r0
    7688:	080035a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp}
    768c:	00000196 	muleq	r0, r6, r1
    7690:	008c1a00 	addeq	r1, ip, r0, lsl #20
    7694:	2c1b0000 	ldccs	0, cr0, [fp], {-0}
    7698:	05000003 	streq	r0, [r0, #-3]
    769c:	00033204 	andeq	r3, r3, r4, lsl #4
    76a0:	00811a00 	addeq	r1, r1, r0, lsl #20
    76a4:	43110000 	tstmi	r1, #0
    76a8:	0100001a 	tsteq	r0, sl, lsl r0
    76ac:	35a002cc 	strcc	r0, [r0, #716]!	; 0x2cc
    76b0:	004c0800 	subeq	r0, ip, r0, lsl #16
    76b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    76b8:	00000380 	andeq	r0, r0, r0, lsl #7
    76bc:	0025c61c 	eoreq	ip, r5, ip, lsl r6
    76c0:	02ce0100 	sbceq	r0, lr, #0, 2
    76c4:	0000008c 	andeq	r0, r0, ip, lsl #1
    76c8:	00005050 	andeq	r5, r0, r0, asr r0
    76cc:	0025ff1c 	eoreq	pc, r5, ip, lsl pc	; <UNPREDICTABLE>
    76d0:	02cf0100 	sbceq	r0, pc, #0, 2
    76d4:	00000081 	andeq	r0, r0, r1, lsl #1
    76d8:	0000506e 	andeq	r5, r0, lr, rrx
    76dc:	0035e410 	eorseq	lr, r5, r0, lsl r4
    76e0:	00018008 	andeq	r8, r1, r8
    76e4:	35ea1000 	strbcc	r1, [sl, #0]!
    76e8:	01800800 	orreq	r0, r0, r0, lsl #16
    76ec:	1d000000 	stcne	0, cr0, [r0, #-0]
    76f0:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    76f4:	00cb9001 	sbceq	r9, fp, r1
    76f8:	03050000 	movweq	r0, #20480	; 0x5000
    76fc:	20000018 	andcs	r0, r0, r8, lsl r0
    7700:	0025b11d 	eoreq	fp, r5, sp, lsl r1
    7704:	81ce0100 	bichi	r0, lr, r0, lsl #2
    7708:	05000000 	streq	r0, [r0, #-0]
    770c:	00022403 	andeq	r2, r2, r3, lsl #8
    7710:	26361d20 	ldrtcs	r1, [r6], -r0, lsr #26
    7714:	cf010000 	svcgt	0x00010000
    7718:	0000008c 	andeq	r0, r0, ip, lsl #1
    771c:	02280305 	eoreq	r0, r8, #335544320	; 0x14000000
    7720:	581e2000 	ldmdapl	lr, {sp}
    7724:	01000026 	tsteq	r0, r6, lsr #32
    7728:	0003c3d0 	ldrdeq	ip, [r3], -r0
    772c:	83c7f000 	bichi	pc, r7, #0
    7730:	c81b7e80 	ldmdagt	fp, {r7, r9, sl, fp, ip, sp, lr}
    7734:	05000003 	streq	r0, [r0, #-3]
    7738:	0003ce04 	andeq	ip, r3, r4, lsl #28
    773c:	03321b00 	teqeq	r2, #0, 22
    7740:	181f0000 	ldmdane	pc, {}	; <UNPREDICTABLE>
    7744:	01000002 	tsteq	r0, r2
    7748:	00008c8c 	andeq	r8, r0, ip, lsl #25
    774c:	1c262000 	stcne	0, cr2, [r6], #-0
    7750:	64060000 	strvs	r0, [r6], #-0
    7754:	0000c005 	andeq	ip, r0, r5
    7758:	01cb0000 	biceq	r0, fp, r0
    775c:	00040000 	andeq	r0, r4, r0
    7760:	00001591 	muleq	r0, r1, r5
    7764:	02840104 	addeq	r0, r4, #4, 2
    7768:	0c010000 	stceq	0, cr0, [r1], {-0}
    776c:	01000027 	tsteq	r0, r7, lsr #32
    7770:	b8000001 	stmdalt	r0, {r0}
    7774:	0000000d 	andeq	r0, r0, sp
    7778:	1f000000 	svcne	0x00000000
    777c:	02000024 	andeq	r0, r0, #36	; 0x24
    7780:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    7784:	0030d402 	eorseq	sp, r0, r2, lsl #8
    7788:	04030000 	streq	r0, [r3], #-0
    778c:	00017d07 	andeq	r7, r1, r7, lsl #26
    7790:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    7794:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7798:	50060103 	andpl	r0, r6, r3, lsl #2
    779c:	02000001 	andeq	r0, r0, #1
    77a0:	000000f2 	strdeq	r0, [r0], -r2
    77a4:	00501c03 	subseq	r1, r0, r3, lsl #24
    77a8:	01030000 	mrseq	r0, (UNDEF: 3)
    77ac:	00014e08 	andeq	r4, r1, r8, lsl #28
    77b0:	05020300 	streq	r0, [r2, #-768]	; 0x300
    77b4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    77b8:	e5070203 	str	r0, [r7, #-515]	; 0x203
    77bc:	03000001 	movweq	r0, #1
    77c0:	00c50504 	sbceq	r0, r5, r4, lsl #10
    77c4:	51020000 	mrspl	r0, (UNDEF: 2)
    77c8:	03000000 	movweq	r0, #0
    77cc:	00007738 	andeq	r7, r0, r8, lsr r7
    77d0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    77d4:	00000178 	andeq	r0, r0, r8, ror r1
    77d8:	c0050803 	andgt	r0, r5, r3, lsl #16
    77dc:	03000000 	movweq	r0, #0
    77e0:	01730708 	cmneq	r3, r8, lsl #14
    77e4:	04030000 	streq	r0, [r3], #-0
    77e8:	00002c07 	andeq	r2, r0, r7, lsl #24
    77ec:	03040500 	movweq	r0, #17664	; 0x4500
    77f0:	01570801 	cmpeq	r7, r1, lsl #16
    77f4:	f4020000 	vst4.8	{d0-d3}, [r2], r0
    77f8:	04000000 	streq	r0, [r0], #-0
    77fc:	0000452a 	andeq	r4, r0, sl, lsr #10
    7800:	00530200 	subseq	r0, r3, r0, lsl #4
    7804:	42040000 	andmi	r0, r4, #0
    7808:	0000006c 	andeq	r0, r0, ip, rrx
    780c:	000fdf02 	andeq	sp, pc, r2, lsl #30
    7810:	655e0500 	ldrbvs	r0, [lr, #-1280]	; 0x500
    7814:	06000000 	streq	r0, [r0], -r0
    7818:	000010d0 	ldrdeq	r1, [r0], -r0
    781c:	00935f01 	addseq	r5, r3, r1, lsl #30
    7820:	35ec0000 	strbcc	r0, [ip, #0]!
    7824:	00600800 	rsbeq	r0, r0, r0, lsl #16
    7828:	9c010000 	stcls	0, cr0, [r1], {-0}
    782c:	00000121 	andeq	r0, r0, r1, lsr #2
    7830:	0026f107 	eoreq	pc, r6, r7, lsl #2
    7834:	255f0100 	ldrbcs	r0, [pc, #-256]	; 773c <_Min_Stack_Size+0x733c>
    7838:	8c000000 	stchi	0, cr0, [r0], {-0}
    783c:	08000050 	stmdaeq	r0, {r4, r6}
    7840:	000026cb 	andeq	r2, r0, fp, asr #13
    7844:	00936101 	addseq	r6, r3, r1, lsl #2
    7848:	50f80000 	rscspl	r0, r8, r0
    784c:	fd090000 	stc2	0, cr0, [r9, #-0]
    7850:	01000026 	tsteq	r0, r6, lsr #32
    7854:	00012162 	andeq	r2, r1, r2, ror #2
    7858:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    785c:	0a200002 	beq	80786c <_Min_Stack_Size+0x80746c>
    7860:	080035fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, ip, sp}
    7864:	000001af 	andeq	r0, r0, pc, lsr #3
    7868:	0036300a 	eorseq	r3, r6, sl
    786c:	0001b708 	andeq	fp, r1, r8, lsl #14
    7870:	363a0a00 	ldrtcc	r0, [sl], -r0, lsl #20
    7874:	01b70800 			; <UNDEFINED> instruction: 0x01b70800
    7878:	0b000000 	bleq	7880 <_Min_Stack_Size+0x7480>
    787c:	00009c04 	andeq	r9, r0, r4, lsl #24
    7880:	12590c00 	subsne	r0, r9, #0, 24
    7884:	91010000 	mrsls	r0, (UNDEF: 1)
    7888:	0800364c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp}
    788c:	0000000c 	andeq	r0, r0, ip
    7890:	01549c01 	cmpeq	r4, r1, lsl #24
    7894:	700d0000 	andvc	r0, sp, r0
    7898:	91010076 	tstls	r1, r6, ror r0
    789c:	00000093 	muleq	r0, r3, r0
    78a0:	0000513a 	andeq	r5, r0, sl, lsr r1
    78a4:	0036540a 	eorseq	r5, r6, sl, lsl #8
    78a8:	0001c308 	andeq	ip, r1, r8, lsl #6
    78ac:	db0e0000 	blle	3878b4 <_Min_Stack_Size+0x3874b4>
    78b0:	01000026 	tsteq	r0, r6, lsr #32
    78b4:	0036589d 	mlaseq	r6, sp, r8, r5
    78b8:	00000e08 	andeq	r0, r0, r8, lsl #28
    78bc:	0f9c0100 	svceq	0x009c0100
    78c0:	000026b6 			; <UNDEFINED> instruction: 0x000026b6
    78c4:	0025a401 	eoreq	sl, r5, r1, lsl #8
    78c8:	36680000 	strbtcc	r0, [r8], -r0
    78cc:	00140800 	andseq	r0, r4, r0, lsl #16
    78d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    78d4:	00009c10 	andeq	r9, r0, r0, lsl ip
    78d8:	00018d00 	andeq	r8, r1, r0, lsl #26
    78dc:	008c1100 	addeq	r1, ip, r0, lsl #2
    78e0:	2bff0000 	blcs	fffc78e8 <_estack+0xdff978e8>
    78e4:	09000001 	stmdbeq	r0, {r0}
    78e8:	000026d4 	ldrdeq	r2, [r0], -r4
    78ec:	017a5a01 	cmneq	sl, r1, lsl #20
    78f0:	03050000 	movweq	r0, #20480	; 0x5000
    78f4:	20000234 	andcs	r0, r0, r4, lsr r2
    78f8:	00272f09 	eoreq	r2, r7, r9, lsl #30
    78fc:	255b0100 	ldrbcs	r0, [fp, #-256]	; 0x100
    7900:	05000000 	streq	r0, [r0, #-0]
    7904:	00023003 	andeq	r3, r2, r3
    7908:	13dd1220 	bicsne	r1, sp, #32, 4
    790c:	cf060000 	svcgt	0x00060000
    7910:	13251303 	teqne	r5, #201326592	; 0xc000000
    7914:	05060000 	streq	r0, [r6, #-0]
    7918:	0000b204 	andeq	fp, r0, r4, lsl #4
    791c:	0d8c1400 	cfstrseq	mvf1, [ip]
    7920:	7d050000 	stcvc	0, cr0, [r5, #-0]
    7924:	000000a7 	andeq	r0, r0, r7, lsr #1
    7928:	00054300 	andeq	r4, r5, r0, lsl #6
    792c:	d0000400 	andle	r0, r0, r0, lsl #8
    7930:	04000016 	streq	r0, [r0], #-22
    7934:	00028401 	andeq	r8, r2, r1, lsl #8
    7938:	281e0100 	ldmdacs	lr, {r8}
    793c:	01010000 	mrseq	r0, (UNDEF: 1)
    7940:	0de00000 	stcleq	0, cr0, [r0]
    7944:	00000000 	andeq	r0, r0, r0
    7948:	259d0000 	ldrcs	r0, [sp]
    794c:	01020000 	mrseq	r0, (UNDEF: 2)
    7950:	00015006 	andeq	r5, r1, r6
    7954:	00f20300 	rscseq	r0, r2, r0, lsl #6
    7958:	1c020000 	stcne	0, cr0, [r2], {-0}
    795c:	00000037 	andeq	r0, r0, r7, lsr r0
    7960:	4e080102 	adfmie	f0, f0, f2
    7964:	02000001 	andeq	r0, r0, #1
    7968:	00df0502 	sbcseq	r0, pc, r2, lsl #10
    796c:	02020000 	andeq	r0, r2, #0
    7970:	0001e507 	andeq	lr, r1, r7, lsl #10
    7974:	03770300 	cmneq	r7, #0, 6
    7978:	37020000 	strcc	r0, [r2, -r0]
    797c:	00000057 	andeq	r0, r0, r7, asr r0
    7980:	c5050402 	strgt	r0, [r5, #-1026]	; 0x402
    7984:	03000000 	movweq	r0, #0
    7988:	00000051 	andeq	r0, r0, r1, asr r0
    798c:	00693802 	rsbeq	r3, r9, r2, lsl #16
    7990:	04020000 	streq	r0, [r2], #-0
    7994:	00017807 	andeq	r7, r1, r7, lsl #16
    7998:	05080200 	streq	r0, [r8, #-512]	; 0x200
    799c:	000000c0 	andeq	r0, r0, r0, asr #1
    79a0:	73070802 	movwvc	r0, #30722	; 0x7802
    79a4:	04000001 	streq	r0, [r0], #-1
    79a8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    79ac:	04020074 	streq	r0, [r2], #-116	; 0x74
    79b0:	00017d07 	andeq	r7, r1, r7, lsl #26
    79b4:	00f40300 	rscseq	r0, r4, r0, lsl #6
    79b8:	2a030000 	bcs	c79c0 <_Min_Stack_Size+0xc75c0>
    79bc:	0000002c 	andeq	r0, r0, ip, lsr #32
    79c0:	00037903 	andeq	r7, r3, r3, lsl #18
    79c4:	4c410300 	mcrrmi	3, 0, r0, r1, cr0
    79c8:	03000000 	movweq	r0, #0
    79cc:	00000053 	andeq	r0, r0, r3, asr r0
    79d0:	005e4203 	subseq	r4, lr, r3, lsl #4
    79d4:	04050000 	streq	r0, [r5], #-0
    79d8:	0150040e 	cmpeq	r0, lr, lsl #8
    79dc:	00000169 	andeq	r0, r0, r9, ror #2
    79e0:	00277e06 	eoreq	r7, r7, r6, lsl #28
    79e4:	01520400 	cmpeq	r2, r0, lsl #8
    79e8:	00000180 	andeq	r0, r0, r0, lsl #3
    79ec:	023c0600 	eorseq	r0, ip, #0, 12
    79f0:	53040000 	movwpl	r0, #16384	; 0x4000
    79f4:	00018501 	andeq	r8, r1, r1, lsl #10
    79f8:	be062000 	cdplt	0, 0, cr2, cr6, cr0, {0}
    79fc:	04000027 	streq	r0, [r0], #-39	; 0x27
    7a00:	01950154 	orrseq	r0, r5, r4, asr r1
    7a04:	06800000 	streq	r0, [r0], r0
    7a08:	00002791 	muleq	r0, r1, r7
    7a0c:	85015504 	strhi	r5, [r1, #-1284]	; 0x504
    7a10:	a0000001 	andge	r0, r0, r1
    7a14:	00280f07 	eoreq	r0, r8, r7, lsl #30
    7a18:	01560400 	cmpeq	r6, r0, lsl #8
    7a1c:	0000019a 	muleq	r0, sl, r1
    7a20:	50070100 	andpl	r0, r7, r0, lsl #2
    7a24:	04000002 	streq	r0, [r0], #-2
    7a28:	01850157 	orreq	r0, r5, r7, asr r1
    7a2c:	01200000 	teqeq	r0, r0
    7a30:	0027b307 	eoreq	fp, r7, r7, lsl #6
    7a34:	01580400 	cmpeq	r8, r0, lsl #8
    7a38:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    7a3c:	90070180 	andls	r0, r7, r0, lsl #3
    7a40:	04000000 	streq	r0, [r0], #-0
    7a44:	01850159 	orreq	r0, r5, r9, asr r1
    7a48:	01a00000 	moveq	r0, r0
    7a4c:	00273d07 	eoreq	r3, r7, r7, lsl #26
    7a50:	015a0400 	cmpeq	sl, r0, lsl #8
    7a54:	000001a4 	andeq	r0, r0, r4, lsr #3
    7a58:	66070200 	strvs	r0, [r7], -r0, lsl #4
    7a5c:	04000002 	streq	r0, [r0], #-2
    7a60:	01a9015b 			; <UNDEFINED> instruction: 0x01a9015b
    7a64:	02200000 	eoreq	r0, r0, #0
    7a68:	00504908 	subseq	r4, r0, r8, lsl #18
    7a6c:	c9015c04 	stmdbgt	r1, {r2, sl, fp, ip, lr}
    7a70:	00000001 	andeq	r0, r0, r1
    7a74:	02700703 	rsbseq	r0, r0, #786432	; 0xc0000
    7a78:	5d040000 	stcpl	0, cr0, [r4, #-0]
    7a7c:	0001ce01 	andeq	ip, r1, r1, lsl #28
    7a80:	0703f000 	streq	pc, [r3, -r0]
    7a84:	0000278c 	andeq	r2, r0, ip, lsl #15
    7a88:	df015e04 	svcle	0x00015e04
    7a8c:	00000001 	andeq	r0, r0, r1
    7a90:	a209000e 	andge	r0, r9, #14
    7a94:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    7a98:	0a000001 	beq	7aa4 <_Min_Stack_Size+0x76a4>
    7a9c:	00000179 	andeq	r0, r0, r9, ror r1
    7aa0:	04020007 	streq	r0, [r2], #-7
    7aa4:	00002c07 	andeq	r2, r0, r7, lsl #24
    7aa8:	01690b00 	cmneq	r9, r0, lsl #22
    7aac:	a2090000 	andge	r0, r9, #0
    7ab0:	95000000 	strls	r0, [r0, #-0]
    7ab4:	0a000001 	beq	7ac0 <_Min_Stack_Size+0x76c0>
    7ab8:	00000179 	andeq	r0, r0, r9, ror r1
    7abc:	690b0017 	stmdbvs	fp, {r0, r1, r2, r4}
    7ac0:	0b000001 	bleq	7acc <_Min_Stack_Size+0x76cc>
    7ac4:	00000169 	andeq	r0, r0, r9, ror #2
    7ac8:	0001690b 	andeq	r6, r1, fp, lsl #18
    7acc:	01690b00 	cmneq	r9, r0, lsl #22
    7ad0:	a2090000 	andge	r0, r9, #0
    7ad4:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
    7ad8:	0a000001 	beq	7ae4 <_Min_Stack_Size+0x76e4>
    7adc:	00000179 	andeq	r0, r0, r9, ror r1
    7ae0:	8c090037 	stchi	0, cr0, [r9], {55}	; 0x37
    7ae4:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    7ae8:	0a000001 	beq	7af4 <_Min_Stack_Size+0x76f4>
    7aec:	00000179 	andeq	r0, r0, r9, ror r1
    7af0:	b90b00ef 	stmdblt	fp, {r0, r1, r2, r3, r5, r6, r7}
    7af4:	09000001 	stmdbeq	r0, {r0}
    7af8:	000000a2 	andeq	r0, r0, r2, lsr #1
    7afc:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7b00:	0001790c 	andeq	r7, r1, ip, lsl #18
    7b04:	00028300 	andeq	r8, r2, r0, lsl #6
    7b08:	0000a20b 	andeq	sl, r0, fp, lsl #4
    7b0c:	28140d00 	ldmdacs	r4, {r8, sl, fp}
    7b10:	5f040000 	svcpl	0x00040000
    7b14:	0000ad01 	andeq	sl, r0, r1, lsl #26
    7b18:	048c0e00 	streq	r0, [ip], #3584	; 0xe00
    7b1c:	030b0170 	movweq	r0, #45424	; 0xb170
    7b20:	77060000 	strvc	r0, [r6, -r0]
    7b24:	04000000 	streq	r0, [r0], #-0
    7b28:	030b0172 	movweq	r0, #45426	; 0xb172
    7b2c:	06000000 	streq	r0, [r0], -r0
    7b30:	000000b3 	strheq	r0, [r0], -r3
    7b34:	df017304 	svcle	0x00017304
    7b38:	04000001 	streq	r0, [r0], #-1
    7b3c:	00020906 	andeq	r0, r2, r6, lsl #18
    7b40:	01740400 	cmneq	r4, r0, lsl #8
    7b44:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7b48:	01480608 	cmpeq	r8, r8, lsl #12
    7b4c:	75040000 	strvc	r0, [r4, #-0]
    7b50:	0001df01 	andeq	sp, r1, r1, lsl #30
    7b54:	530f0c00 	movwpl	r0, #64512	; 0xfc00
    7b58:	04005243 	streq	r5, [r0], #-579	; 0x243
    7b5c:	01df0176 	bicseq	r0, pc, r6, ror r1	; <UNPREDICTABLE>
    7b60:	0f100000 	svceq	0x00100000
    7b64:	00524343 	subseq	r4, r2, r3, asr #6
    7b68:	df017704 	svcle	0x00017704
    7b6c:	14000001 	strne	r0, [r0], #-1
    7b70:	5048530f 	subpl	r5, r8, pc, lsl #6
    7b74:	01780400 	cmneq	r8, r0, lsl #8
    7b78:	00000320 	andeq	r0, r0, r0, lsr #6
    7b7c:	01b80618 			; <UNDEFINED> instruction: 0x01b80618
    7b80:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
    7b84:	0001df01 	andeq	sp, r1, r1, lsl #30
    7b88:	fc062400 	stc2	4, cr2, [r6], {-0}
    7b8c:	04000000 	streq	r0, [r0], #-0
    7b90:	01df017a 	bicseq	r0, pc, sl, ror r1	; <UNPREDICTABLE>
    7b94:	06280000 	strteq	r0, [r8], -r0
    7b98:	00000228 	andeq	r0, r0, r8, lsr #4
    7b9c:	df017b04 	svcle	0x00017b04
    7ba0:	2c000001 	stccs	0, cr0, [r0], {1}
    7ba4:	00021306 	andeq	r1, r2, r6, lsl #6
    7ba8:	017c0400 	cmneq	ip, r0, lsl #8
    7bac:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7bb0:	01d40630 	bicseq	r0, r4, r0, lsr r6
    7bb4:	7d040000 	stcvc	0, cr0, [r4, #-0]
    7bb8:	0001df01 	andeq	sp, r1, r1, lsl #30
    7bbc:	ce063400 	cfcpysgt	mvf3, mvf6
    7bc0:	04000000 	streq	r0, [r0], #-0
    7bc4:	01df017e 	bicseq	r0, pc, lr, ror r1	; <UNPREDICTABLE>
    7bc8:	06380000 	ldrteq	r0, [r8], -r0
    7bcc:	00000381 	andeq	r0, r0, r1, lsl #7
    7bd0:	df017f04 	svcle	0x00017f04
    7bd4:	3c000001 	stccc	0, cr0, [r0], {1}
    7bd8:	5246500f 	subpl	r5, r6, #15
    7bdc:	01800400 	orreq	r0, r0, r0, lsl #8
    7be0:	00000335 	andeq	r0, r0, r5, lsr r3
    7be4:	46440f40 	strbmi	r0, [r4], -r0, asr #30
    7be8:	81040052 	qaddhi	r0, r2, r4
    7bec:	00030b01 	andeq	r0, r3, r1, lsl #22
    7bf0:	410f4800 	tstmi	pc, r0, lsl #16
    7bf4:	04005244 	streq	r5, [r0], #-580	; 0x244
    7bf8:	030b0182 	movweq	r0, #45442	; 0xb182
    7bfc:	064c0000 	strbeq	r0, [ip], -r0
    7c00:	00000237 	andeq	r0, r0, r7, lsr r2
    7c04:	4f018304 	svcmi	0x00018304
    7c08:	50000003 	andpl	r0, r0, r3
    7c0c:	00020e06 	andeq	r0, r2, r6, lsl #28
    7c10:	01840400 	orreq	r0, r4, r0, lsl #8
    7c14:	00000369 	andeq	r0, r0, r9, ror #6
    7c18:	023c0660 	eorseq	r0, ip, #96, 12	; 0x6000000
    7c1c:	85040000 	strhi	r0, [r4, #-0]
    7c20:	00035901 	andeq	r5, r3, r1, lsl #18
    7c24:	b5067400 	strlt	r7, [r6, #-1024]	; 0x400
    7c28:	04000003 	streq	r0, [r0], #-3
    7c2c:	01df0186 	bicseq	r0, pc, r6, lsl #3
    7c30:	00880000 	addeq	r0, r8, r0
    7c34:	0001df10 	andeq	sp, r1, r0, lsl pc
    7c38:	008c0900 	addeq	r0, ip, r0, lsl #18
    7c3c:	03200000 	teqeq	r0, #0
    7c40:	790a0000 	stmdbvc	sl, {}	; <UNPREDICTABLE>
    7c44:	0b000001 	bleq	7c50 <_Min_Stack_Size+0x7850>
    7c48:	03100b00 	tsteq	r0, #0, 22
    7c4c:	a2090000 	andge	r0, r9, #0
    7c50:	35000000 	strcc	r0, [r0, #-0]
    7c54:	0a000003 	beq	7c68 <_Min_Stack_Size+0x7868>
    7c58:	00000179 	andeq	r0, r0, r9, ror r1
    7c5c:	3a100001 	bcc	407c68 <_Min_Stack_Size+0x407868>
    7c60:	0b000003 	bleq	7c74 <_Min_Stack_Size+0x7874>
    7c64:	00000325 	andeq	r0, r0, r5, lsr #6
    7c68:	0000a209 	andeq	sl, r0, r9, lsl #4
    7c6c:	00034f00 	andeq	r4, r3, r0, lsl #30
    7c70:	01790a00 	cmneq	r9, r0, lsl #20
    7c74:	00030000 	andeq	r0, r3, r0
    7c78:	00035410 	andeq	r5, r3, r0, lsl r4
    7c7c:	033f0b00 	teqeq	pc, #0, 22
    7c80:	a2090000 	andge	r0, r9, #0
    7c84:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    7c88:	0a000003 	beq	7c9c <_Min_Stack_Size+0x789c>
    7c8c:	00000179 	andeq	r0, r0, r9, ror r1
    7c90:	6e100004 	cdpvs	0, 1, cr0, cr0, cr4, {0}
    7c94:	0b000003 	bleq	7ca8 <_Min_Stack_Size+0x78a8>
    7c98:	00000359 	andeq	r0, r0, r9, asr r3
    7c9c:	00009a0d 	andeq	r9, r0, sp, lsl #20
    7ca0:	01870400 	orreq	r0, r7, r0, lsl #8
    7ca4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7ca8:	6f04100e 	svcvs	0x0004100e
    7cac:	0003bd02 	andeq	fp, r3, r2, lsl #26
    7cb0:	279a0600 	ldrcs	r0, [sl, r0, lsl #12]
    7cb4:	71040000 	mrsvc	r0, (UNDEF: 4)
    7cb8:	0001df02 	andeq	sp, r1, r2, lsl #30
    7cbc:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    7cc0:	04000028 	streq	r0, [r0], #-40	; 0x28
    7cc4:	01df0272 	bicseq	r0, pc, r2, ror r2	; <UNPREDICTABLE>
    7cc8:	0f040000 	svceq	0x00040000
    7ccc:	004c4156 	subeq	r4, ip, r6, asr r1
    7cd0:	df027304 	svcle	0x00027304
    7cd4:	08000001 	stmdaeq	r0, {r0}
    7cd8:	0027b806 	eoreq	fp, r7, r6, lsl #16
    7cdc:	02740400 	rsbseq	r0, r4, #0, 8
    7ce0:	0000030b 	andeq	r0, r0, fp, lsl #6
    7ce4:	f60d000c 			; <UNDEFINED> instruction: 0xf60d000c
    7ce8:	04000027 	streq	r0, [r0], #-39	; 0x27
    7cec:	037f0275 	cmneq	pc, #1342177287	; 0x50000007
    7cf0:	970b0000 	strls	r0, [fp, -r0]
    7cf4:	11000000 	mrsne	r0, (UNDEF: 0)
    7cf8:	01f90501 	mvnseq	r0, r1, lsl #10
    7cfc:	000003e4 	andeq	r0, r0, r4, ror #7
    7d00:	00048812 	andeq	r8, r4, r2, lsl r8
    7d04:	c0120000 	andsgt	r0, r2, r0
    7d08:	01000005 	tsteq	r0, r5
    7d0c:	092a0d00 	stmdbeq	sl!, {r8, sl, fp}
    7d10:	f9050000 			; <UNDEFINED> instruction: 0xf9050000
    7d14:	0003ce01 	andeq	ip, r3, r1, lsl #28
    7d18:	06041300 	streq	r1, [r4], -r0, lsl #6
    7d1c:	00042936 	andeq	r2, r4, r6, lsr r9
    7d20:	07c11400 	strbeq	r1, [r1, r0, lsl #8]
    7d24:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
    7d28:	0000008c 	andeq	r0, r0, ip, lsl #1
    7d2c:	07e51400 	strbeq	r1, [r5, r0, lsl #8]!
    7d30:	3d060000 	stccc	0, cr0, [r6, #-0]
    7d34:	0000008c 	andeq	r0, r0, ip, lsl #1
    7d38:	0a9b1401 	beq	fe6ccd44 <_estack+0xde69cd44>
    7d3c:	42060000 	andmi	r0, r6, #0
    7d40:	0000008c 	andeq	r0, r0, ip, lsl #1
    7d44:	03de1402 	bicseq	r1, lr, #33554432	; 0x2000000
    7d48:	47060000 	strmi	r0, [r6, -r0]
    7d4c:	000003e4 	andeq	r0, r0, r4, ror #7
    7d50:	a2030003 	andge	r0, r3, #3
    7d54:	06000008 	streq	r0, [r0], -r8
    7d58:	0003f04a 	andeq	pc, r3, sl, asr #32
    7d5c:	28801500 	stmcs	r0, {r8, sl, ip}
    7d60:	76010000 	strvc	r0, [r1], -r0
    7d64:	0800367c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip, sp}
    7d68:	00000014 	andeq	r0, r0, r4, lsl r0
    7d6c:	04599c01 	ldrbeq	r9, [r9], #-3073	; 0xc01
    7d70:	64160000 	ldrvs	r0, [r6], #-0
    7d74:	01000027 	tsteq	r0, r7, lsr #32
    7d78:	0000a276 	andeq	sl, r0, r6, ror r2
    7d7c:	00516600 	subseq	r6, r1, r0, lsl #12
    7d80:	b1150000 	tstlt	r5, r0
    7d84:	0100000c 	tsteq	r0, ip
    7d88:	00369088 	eorseq	r9, r6, r8, lsl #1
    7d8c:	00008008 	andeq	r8, r0, r8
    7d90:	ab9c0100 	blge	fe708198 <_estack+0xde6d8198>
    7d94:	16000004 	strne	r0, [r0], -r4
    7d98:	00002754 	andeq	r2, r0, r4, asr r7
    7d9c:	04ab8801 	strteq	r8, [fp], #2049	; 0x801
    7da0:	51870000 	orrpl	r0, r7, r0
    7da4:	03170000 	tsteq	r7, #0
    7da8:	01000028 	tsteq	r0, r8, lsr #32
    7dac:	00008c8a 	andeq	r8, r0, sl, lsl #25
    7db0:	0051c100 	subseq	ip, r1, r0, lsl #2
    7db4:	27771700 	ldrbcs	r1, [r7, -r0, lsl #14]!
    7db8:	8a010000 	bhi	47dc0 <_Min_Stack_Size+0x479c0>
    7dbc:	0000008c 	andeq	r0, r0, ip, lsl #1
    7dc0:	00005201 	andeq	r5, r0, r1, lsl #4
    7dc4:	0027c317 	eoreq	ip, r7, r7, lsl r3
    7dc8:	8c8a0100 	stfhis	f0, [sl], {0}
    7dcc:	24000000 	strcs	r0, [r0], #-0
    7dd0:	00000052 	andeq	r0, r0, r2, asr r0
    7dd4:	04290418 	strteq	r0, [r9], #-1048	; 0x418
    7dd8:	9f150000 	svcls	0x00150000
    7ddc:	01000027 	tsteq	r0, r7, lsr #32
    7de0:	003710b4 	ldrhteq	r1, [r7], -r4
    7de4:	00001608 	andeq	r1, r0, r8, lsl #12
    7de8:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    7dec:	16000004 	strne	r0, [r0], -r4
    7df0:	00002861 	andeq	r2, r0, r1, ror #16
    7df4:	00a2b401 	adceq	fp, r2, r1, lsl #8
    7df8:	52470000 	subpl	r0, r7, #0
    7dfc:	c0160000 	andsgt	r0, r6, r0
    7e00:	01000047 	tsteq	r0, r7, asr #32
    7e04:	0000a2b4 			; <UNDEFINED> instruction: 0x0000a2b4
    7e08:	00526800 	subseq	r6, r2, r0, lsl #16
    7e0c:	ca150000 	bgt	547e14 <_Min_Stack_Size+0x547a14>
    7e10:	01000027 	tsteq	r0, r7, lsr #32
    7e14:	003728c7 	eorseq	r2, r7, r7, asr #17
    7e18:	00001a08 	andeq	r1, r0, r8, lsl #20
    7e1c:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    7e20:	16000005 	strne	r0, [r0], -r5
    7e24:	00002873 	andeq	r2, r0, r3, ror r8
    7e28:	008cc701 	addeq	ip, ip, r1, lsl #14
    7e2c:	52890000 	addpl	r0, r9, #0
    7e30:	83190000 	tsthi	r9, #0
    7e34:	01000027 	tsteq	r0, r7, lsr #32
    7e38:	0003e4c7 	andeq	lr, r3, r7, asr #9
    7e3c:	00510100 	subseq	r0, r1, r0, lsl #2
    7e40:	0027de15 	eoreq	sp, r7, r5, lsl lr
    7e44:	44df0100 	ldrbmi	r0, [pc], #256	; 7e4c <_Min_Stack_Size+0x7a4c>
    7e48:	1a080037 	bne	207f2c <_Min_Stack_Size+0x207b2c>
    7e4c:	01000000 	mrseq	r0, (UNDEF: 0)
    7e50:	00053a9c 	muleq	r5, ip, sl
    7e54:	27421900 	strbcs	r1, [r2, -r0, lsl #18]
    7e58:	df010000 	svcle	0x00010000
    7e5c:	000000a2 	andeq	r0, r0, r2, lsr #1
    7e60:	1a005001 	bne	1be6c <_Min_Stack_Size+0x1ba6c>
    7e64:	0000039d 	muleq	r0, sp, r3
    7e68:	c906a704 	stmdbgt	r6, {r2, r8, r9, sl, sp, pc}
    7e6c:	00000003 	andeq	r0, r0, r3
    7e70:	00000841 	andeq	r0, r0, r1, asr #16
    7e74:	18260004 	stmdane	r6!, {r2}
    7e78:	01040000 	mrseq	r0, (UNDEF: 4)
    7e7c:	00000284 	andeq	r0, r0, r4, lsl #5
    7e80:	00293601 	eoreq	r3, r9, r1, lsl #12
    7e84:	00010100 	andeq	r0, r1, r0, lsl #2
    7e88:	000e1000 	andeq	r1, lr, r0
    7e8c:	00000000 	andeq	r0, r0, r0
    7e90:	0027a100 	eoreq	sl, r7, r0, lsl #2
    7e94:	06010200 	streq	r0, [r1], -r0, lsl #4
    7e98:	00000150 	andeq	r0, r0, r0, asr r1
    7e9c:	0000f203 	andeq	pc, r0, r3, lsl #4
    7ea0:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
    7ea4:	02000000 	andeq	r0, r0, #0
    7ea8:	014e0801 	cmpeq	lr, r1, lsl #16
    7eac:	02020000 	andeq	r0, r2, #0
    7eb0:	0000df05 	andeq	sp, r0, r5, lsl #30
    7eb4:	005c0300 	subseq	r0, ip, r0, lsl #6
    7eb8:	26020000 	strcs	r0, [r2], -r0
    7ebc:	00000050 	andeq	r0, r0, r0, asr r0
    7ec0:	e5070202 	str	r0, [r7, #-514]	; 0x202
    7ec4:	03000001 	movweq	r0, #1
    7ec8:	00000377 	andeq	r0, r0, r7, ror r3
    7ecc:	00623702 	rsbeq	r3, r2, r2, lsl #14
    7ed0:	04020000 	streq	r0, [r2], #-0
    7ed4:	0000c505 	andeq	ip, r0, r5, lsl #10
    7ed8:	00510300 	subseq	r0, r1, r0, lsl #6
    7edc:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    7ee0:	00000074 	andeq	r0, r0, r4, ror r0
    7ee4:	78070402 	stmdavc	r7, {r1, sl}
    7ee8:	02000001 	andeq	r0, r0, #1
    7eec:	00c00508 	sbceq	r0, r0, r8, lsl #10
    7ef0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7ef4:	00017307 	andeq	r7, r1, r7, lsl #6
    7ef8:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    7efc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7f00:	7d070402 	cfstrsvc	mvf0, [r7, #-8]
    7f04:	03000001 	movweq	r0, #1
    7f08:	000000f4 	strdeq	r0, [r0], -r4
    7f0c:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    7f10:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
    7f14:	03000000 	movweq	r0, #0
    7f18:	00004536 	andeq	r4, r0, r6, lsr r5
    7f1c:	03790300 	cmneq	r9, #0, 6
    7f20:	41030000 	mrsmi	r0, (UNDEF: 3)
    7f24:	00000057 	andeq	r0, r0, r7, asr r0
    7f28:	00005303 	andeq	r5, r0, r3, lsl #6
    7f2c:	69420300 	stmdbvs	r2, {r8, r9}^
    7f30:	02000000 	andeq	r0, r0, #0
    7f34:	002c0704 	eoreq	r0, ip, r4, lsl #14
    7f38:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    7f3c:	06000000 	streq	r0, [r0], -r0
    7f40:	000000b8 	strheq	r0, [r0], -r8
    7f44:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7f48:	0000c307 	andeq	ip, r0, r7, lsl #6
    7f4c:	05000100 	streq	r0, [r0, #-256]	; 0x100
    7f50:	000000a2 	andeq	r0, r0, r2, lsr #1
    7f54:	0000ad05 	andeq	sl, r0, r5, lsl #26
    7f58:	04010800 	streq	r0, [r1], #-2048	; 0x800
    7f5c:	00ff01f9 	ldrshteq	r0, [pc], #25
    7f60:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    7f64:	00000004 	andeq	r0, r0, r4
    7f68:	0005c009 	andeq	ip, r5, r9
    7f6c:	0a000100 	beq	8374 <_Min_Stack_Size+0x7f74>
    7f70:	0000092a 	andeq	r0, r0, sl, lsr #18
    7f74:	e901f904 	stmdb	r1, {r2, r8, fp, ip, sp, lr, pc}
    7f78:	0b000000 	bleq	7f80 <_Min_Stack_Size+0x7b80>
    7f7c:	03d40428 	bicseq	r0, r4, #40, 8	; 0x28000000
    7f80:	00000197 	muleq	r0, r7, r1
    7f84:	00093a0c 	andeq	r3, r9, ip, lsl #20
    7f88:	03d60400 	bicseq	r0, r6, #0, 8
    7f8c:	000000ca 	andeq	r0, r0, sl, asr #1
    7f90:	04530c00 	ldrbeq	r0, [r3], #-3072	; 0xc00
    7f94:	d7040000 	strle	r0, [r4, -r0]
    7f98:	0000ca03 	andeq	ip, r0, r3, lsl #20
    7f9c:	4b0c0400 	blmi	308fa4 <_Min_Stack_Size+0x308ba4>
    7fa0:	04000006 	streq	r0, [r0], #-6
    7fa4:	00ca03d8 	ldrdeq	r0, [sl], #56	; 0x38
    7fa8:	0c080000 	stceq	0, cr0, [r8], {-0}
    7fac:	000003d8 	ldrdeq	r0, [r0], -r8
    7fb0:	ca03d904 	bgt	fe3c8 <_Min_Stack_Size+0xfdfc8>
    7fb4:	0c000000 	stceq	0, cr0, [r0], {-0}
    7fb8:	5244490d 	subpl	r4, r4, #212992	; 0x34000
    7fbc:	03da0400 	bicseq	r0, sl, #0, 8
    7fc0:	000000ca 	andeq	r0, r0, sl, asr #1
    7fc4:	444f0d10 	strbmi	r0, [pc], #-3344	; 7fcc <_Min_Stack_Size+0x7bcc>
    7fc8:	db040052 	blle	108118 <_Min_Stack_Size+0x107d18>
    7fcc:	0000ca03 	andeq	ip, r0, r3, lsl #20
    7fd0:	b80c1400 	stmdalt	ip, {sl, ip}
    7fd4:	0400000b 	streq	r0, [r0], #-11
    7fd8:	00df03dc 	ldrsbeq	r0, [pc], #60	; <UNPREDICTABLE>
    7fdc:	0c180000 	ldceq	0, cr0, [r8], {-0}
    7fe0:	00000bed 	andeq	r0, r0, sp, ror #23
    7fe4:	df03dd04 	svcle	0x0003dd04
    7fe8:	1a000000 	bne	7ff0 <_Min_Stack_Size+0x7bf0>
    7fec:	0007370c 	andeq	r3, r7, ip, lsl #14
    7ff0:	03de0400 	bicseq	r0, lr, #0, 8
    7ff4:	000000ca 	andeq	r0, r0, sl, asr #1
    7ff8:	46410d1c 			; <UNDEFINED> instruction: 0x46410d1c
    7ffc:	df040052 	svcle	0x00040052
    8000:	00019703 	andeq	r9, r1, r3, lsl #14
    8004:	05002000 	streq	r2, [r0, #-0]
    8008:	000000cf 	andeq	r0, r0, pc, asr #1
    800c:	00062b0a 	andeq	r2, r6, sl, lsl #22
    8010:	03e00400 	mvneq	r0, #0, 8
    8014:	0000010b 	andeq	r0, r0, fp, lsl #2
    8018:	4205010e 	andmi	r0, r5, #-2147483645	; 0x80000003
    801c:	000001c9 	andeq	r0, r0, r9, asr #3
    8020:	00054709 	andeq	r4, r5, r9, lsl #14
    8024:	ee090000 	cdp	0, 0, cr0, cr9, cr0, {0}
    8028:	0100000a 	tsteq	r0, sl
    802c:	0004a809 	andeq	sl, r4, r9, lsl #16
    8030:	dc090200 	sfmle	f0, 4, [r9], {-0}
    8034:	03000004 	movweq	r0, #4
    8038:	0c500300 	mrrceq	3, 0, r0, r0, cr0	; <UNPREDICTABLE>
    803c:	47050000 	strmi	r0, [r5, -r0]
    8040:	000001a8 	andeq	r0, r0, r8, lsr #3
    8044:	4f05010e 	svcmi	0x0005010e
    8048:	000001e9 	andeq	r0, r0, r9, ror #3
    804c:	00049009 	andeq	r9, r4, r9
    8050:	ca090000 	bgt	248058 <_Min_Stack_Size+0x247c58>
    8054:	0100000b 	tsteq	r0, fp
    8058:	051a0300 	ldreq	r0, [sl, #-768]	; 0x300
    805c:	52050000 	andpl	r0, r5, #0
    8060:	000001d4 	ldrdeq	r0, [r0], -r4
    8064:	5a05010e 	bpl	1484a4 <_Min_Stack_Size+0x1480a4>
    8068:	00000215 	andeq	r0, r0, r5, lsl r2
    806c:	0004e909 	andeq	lr, r4, r9, lsl #18
    8070:	61090000 	mrsvs	r0, (UNDEF: 9)
    8074:	01000006 	tsteq	r0, r6
    8078:	0009fb09 	andeq	pc, r9, r9, lsl #22
    807c:	bb090200 	bllt	248884 <_Min_Stack_Size+0x248484>
    8080:	0300000c 	movweq	r0, #12
    8084:	06910300 	ldreq	r0, [r1], r0, lsl #6
    8088:	5f050000 	svcpl	0x00050000
    808c:	000001f4 	strdeq	r0, [r0], -r4
    8090:	6e05010e 	adfvss	f0, f5, #0.5
    8094:	0000023b 	andeq	r0, r0, fp, lsr r2
    8098:	00082109 	andeq	r2, r8, r9, lsl #2
    809c:	27090000 	strcs	r0, [r9, -r0]
    80a0:	0100000c 	tsteq	r0, ip
    80a4:	000bf309 	andeq	pc, fp, r9, lsl #6
    80a8:	03000200 	movweq	r0, #512	; 0x200
    80ac:	00000794 	muleq	r0, r4, r7
    80b0:	02207205 	eoreq	r7, r0, #1342177280	; 0x50000000
    80b4:	010e0000 	mrseq	r0, (UNDEF: 14)
    80b8:	025b7a05 	subseq	r7, fp, #20480	; 0x5000
    80bc:	e0090000 	and	r0, r9, r0
    80c0:	00000028 	andeq	r0, r0, r8, lsr #32
    80c4:	0028a009 	eoreq	sl, r8, r9
    80c8:	03000100 	movweq	r0, #256	; 0x100
    80cc:	000029f1 	strdeq	r2, [r0], -r1
    80d0:	02467d05 	subeq	r7, r6, #320	; 0x140
    80d4:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    80d8:	02ab8405 	adceq	r8, fp, #83886080	; 0x5000000
    80dc:	a3100000 	tstge	r0, #0
    80e0:	05000006 	streq	r0, [r0, #-6]
    80e4:	0000b886 	andeq	fp, r0, r6, lsl #17
    80e8:	55100000 	ldrpl	r0, [r0, #-0]
    80ec:	0500000b 	streq	r0, [r0, #-11]
    80f0:	0001c989 	andeq	ip, r1, r9, lsl #19
    80f4:	c4100400 	ldrgt	r0, [r0], #-1024	; 0x400
    80f8:	05000004 	streq	r0, [r0, #-4]
    80fc:	0002158c 	andeq	r1, r2, ip, lsl #11
    8100:	66100500 	ldrvs	r0, [r0], -r0, lsl #10
    8104:	05000008 	streq	r0, [r0, #-8]
    8108:	0001e98f 	andeq	lr, r1, pc, lsl #19
    810c:	fc100600 	ldc2	6, cr0, [r0], {-0}
    8110:	0500000a 	streq	r0, [r0, #-10]
    8114:	00023b92 	muleq	r2, r2, fp
    8118:	03000700 	movweq	r0, #1792	; 0x700
    811c:	00000919 	andeq	r0, r0, r9, lsl r9
    8120:	02669405 	rsbeq	r9, r6, #83886080	; 0x5000000
    8124:	14110000 	ldrne	r0, [r1], #-0
    8128:	01000029 	tsteq	r0, r9, lsr #32
    812c:	0037607f 	eorseq	r6, r7, pc, ror r0
    8130:	00016e08 	andeq	r6, r1, r8, lsl #28
    8134:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    8138:	12000004 	andne	r0, r0, #4
    813c:	00003646 	andeq	r3, r0, r6, asr #12
    8140:	04f97f01 	ldrbteq	r7, [r9], #3841	; 0xf01
    8144:	52c30000 	sbcpl	r0, r3, #0
    8148:	f0130000 			; <UNDEFINED> instruction: 0xf0130000
    814c:	31080037 	tstcc	r8, r7, lsr r0
    8150:	f4000008 	vst4.8	{d0-d3}, [r0], r8
    8154:	14000002 	strne	r0, [r0], #-2
    8158:	31015101 	tstcc	r1, r1, lsl #2
    815c:	03500114 	cmpeq	r0, #20, 2
    8160:	0004000a 	andeq	r0, r4, sl
    8164:	0037fe15 	eorseq	pc, r7, r5, lsl lr	; <UNPREDICTABLE>
    8168:	00083108 	andeq	r3, r8, r8, lsl #2
    816c:	00030e00 	andeq	r0, r3, r0, lsl #28
    8170:	51011400 	tstpl	r1, r0, lsl #8
    8174:	01143001 	tsteq	r4, r1
    8178:	000a0350 	andeq	r0, sl, r0, asr r3
    817c:	06130004 	ldreq	r0, [r3], -r4
    8180:	31080038 	tstcc	r8, r8, lsr r0
    8184:	26000008 	strcs	r0, [r0], -r8
    8188:	14000003 	strne	r0, [r0], #-3
    818c:	31015101 	tstcc	r1, r1, lsl #2
    8190:	01500114 	cmpeq	r0, r4, lsl r1
    8194:	12150031 	andsne	r0, r5, #49	; 0x31
    8198:	31080038 	tstcc	r8, r8, lsr r0
    819c:	3e000008 	cdpcc	0, 0, cr0, cr0, cr8, {0}
    81a0:	14000003 	strne	r0, [r0], #-3
    81a4:	30015101 	andcc	r5, r1, r1, lsl #2
    81a8:	01500114 	cmpeq	r0, r4, lsl r1
    81ac:	1a130031 	bne	4c8278 <_Min_Stack_Size+0x4c7e78>
    81b0:	31080038 	tstcc	r8, r8, lsr r0
    81b4:	56000008 	strpl	r0, [r0], -r8
    81b8:	14000003 	strne	r0, [r0], #-3
    81bc:	31015101 	tstcc	r1, r1, lsl #2
    81c0:	01500114 	cmpeq	r0, r4, lsl r1
    81c4:	26150032 			; <UNDEFINED> instruction: 0x26150032
    81c8:	31080038 	tstcc	r8, r8, lsr r0
    81cc:	6e000008 	cdpvs	0, 0, cr0, cr0, cr8, {0}
    81d0:	14000003 	strne	r0, [r0], #-3
    81d4:	30015101 	andcc	r5, r1, r1, lsl #2
    81d8:	01500114 	cmpeq	r0, r4, lsl r1
    81dc:	2e130032 	mrccs	0, 0, r0, cr3, cr2, {1}
    81e0:	31080038 	tstcc	r8, r8, lsr r0
    81e4:	86000008 	strhi	r0, [r0], -r8
    81e8:	14000003 	strne	r0, [r0], #-3
    81ec:	31015101 	tstcc	r1, r1, lsl #2
    81f0:	01500114 	cmpeq	r0, r4, lsl r1
    81f4:	3a150034 	bcc	5482cc <_Min_Stack_Size+0x547ecc>
    81f8:	31080038 	tstcc	r8, r8, lsr r0
    81fc:	9e000008 	cdpls	0, 0, cr0, cr0, cr8, {0}
    8200:	14000003 	strne	r0, [r0], #-3
    8204:	30015101 	andcc	r5, r1, r1, lsl #2
    8208:	01500114 	cmpeq	r0, r4, lsl r1
    820c:	42130034 	andsmi	r0, r3, #52	; 0x34
    8210:	31080038 	tstcc	r8, r8, lsr r0
    8214:	b6000008 	strlt	r0, [r0], -r8
    8218:	14000003 	strne	r0, [r0], #-3
    821c:	31015101 	tstcc	r1, r1, lsl #2
    8220:	01500114 	cmpeq	r0, r4, lsl r1
    8224:	4e150038 	mrcmi	0, 0, r0, cr5, cr8, {1}
    8228:	31080038 	tstcc	r8, r8, lsr r0
    822c:	ce000008 	cdpgt	0, 0, cr0, cr0, cr8, {0}
    8230:	14000003 	strne	r0, [r0], #-3
    8234:	30015101 	andcc	r5, r1, r1, lsl #2
    8238:	01500114 	cmpeq	r0, r4, lsl r1
    823c:	56130038 			; <UNDEFINED> instruction: 0x56130038
    8240:	31080038 	tstcc	r8, r8, lsr r0
    8244:	e6000008 	str	r0, [r0], -r8
    8248:	14000003 	strne	r0, [r0], #-3
    824c:	31015101 	tstcc	r1, r1, lsl #2
    8250:	01500114 	cmpeq	r0, r4, lsl r1
    8254:	62150040 	andsvs	r0, r5, #64	; 0x40
    8258:	31080038 	tstcc	r8, r8, lsr r0
    825c:	fe000008 	cdp2	0, 0, cr0, cr0, cr8, {0}
    8260:	14000003 	strne	r0, [r0], #-3
    8264:	30015101 	andcc	r5, r1, r1, lsl #2
    8268:	01500114 	cmpeq	r0, r4, lsl r1
    826c:	6a130040 	bvs	4c8374 <_Min_Stack_Size+0x4c7f74>
    8270:	31080038 	tstcc	r8, r8, lsr r0
    8274:	17000008 	strne	r0, [r0, -r8]
    8278:	14000004 	strne	r0, [r0], #-4
    827c:	31015101 	tstcc	r1, r1, lsl #2
    8280:	02500114 	subseq	r0, r0, #20, 2
    8284:	15002008 	strne	r2, [r0, #-8]
    8288:	08003876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, ip, sp}
    828c:	00000831 	andeq	r0, r0, r1, lsr r8
    8290:	00000430 	andeq	r0, r0, r0, lsr r4
    8294:	01510114 	cmpeq	r1, r4, lsl r1
    8298:	50011430 	andpl	r1, r1, r0, lsr r4
    829c:	00200802 	eoreq	r0, r0, r2, lsl #16
    82a0:	00387e13 	eorseq	r7, r8, r3, lsl lr
    82a4:	00083108 	andeq	r3, r8, r8, lsl #2
    82a8:	00044900 	andeq	r4, r4, r0, lsl #18
    82ac:	51011400 	tstpl	r1, r0, lsl #8
    82b0:	01143101 	tsteq	r4, r1, lsl #2
    82b4:	40080250 	andmi	r0, r8, r0, asr r2
    82b8:	388a1500 	stmcc	sl, {r8, sl, ip}
    82bc:	08310800 	ldmdaeq	r1!, {fp}
    82c0:	04620000 	strbteq	r0, [r2], #-0
    82c4:	01140000 	tsteq	r4, r0
    82c8:	14300151 	ldrtne	r0, [r0], #-337	; 0x151
    82cc:	08025001 	stmdaeq	r2, {r0, ip, lr}
    82d0:	92130040 	andsls	r0, r3, #64	; 0x40
    82d4:	31080038 	tstcc	r8, r8, lsr r0
    82d8:	7b000008 	blvc	8300 <_Min_Stack_Size+0x7f00>
    82dc:	14000004 	strne	r0, [r0], #-4
    82e0:	31015101 	tstcc	r1, r1, lsl #2
    82e4:	02500114 	subseq	r0, r0, #20, 2
    82e8:	15008008 	strne	r8, [r0, #-8]
    82ec:	0800389e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, ip, sp}
    82f0:	00000831 	andeq	r0, r0, r1, lsr r8
    82f4:	00000494 	muleq	r0, r4, r4
    82f8:	01510114 	cmpeq	r1, r4, lsl r1
    82fc:	50011430 	andpl	r1, r1, r0, lsr r4
    8300:	00800802 	addeq	r0, r0, r2, lsl #16
    8304:	0038a813 	eorseq	sl, r8, r3, lsl r8
    8308:	00083108 	andeq	r3, r8, r8, lsl #2
    830c:	0004ae00 	andeq	sl, r4, r0, lsl #28
    8310:	51011400 	tstpl	r1, r0, lsl #8
    8314:	01143101 	tsteq	r4, r1, lsl #2
    8318:	000a0350 	andeq	r0, sl, r0, asr r3
    831c:	b6150001 	ldrlt	r0, [r5], -r1
    8320:	31080038 	tstcc	r8, r8, lsr r0
    8324:	c8000008 	stmdagt	r0, {r3}
    8328:	14000004 	strne	r0, [r0], #-4
    832c:	30015101 	andcc	r5, r1, r1, lsl #2
    8330:	03500114 	cmpeq	r0, #20, 2
    8334:	0001000a 	andeq	r0, r1, sl
    8338:	0038c013 	eorseq	ip, r8, r3, lsl r0
    833c:	00083108 	andeq	r3, r8, r8, lsl #2
    8340:	0004e200 	andeq	lr, r4, r0, lsl #4
    8344:	51011400 	tstpl	r1, r0, lsl #8
    8348:	01143101 	tsteq	r4, r1, lsl #2
    834c:	000a0350 	andeq	r0, sl, r0, asr r3
    8350:	ce160002 	cdpgt	0, 1, cr0, cr6, cr2, {0}
    8354:	31080038 	tstcc	r8, r8, lsr r0
    8358:	14000008 	strne	r0, [r0], #-8
    835c:	30015101 	andcc	r5, r1, r1, lsl #2
    8360:	03500114 	cmpeq	r0, #20, 2
    8364:	0002000a 	andeq	r0, r2, sl
    8368:	9c041700 	stcls	7, cr1, [r4], {-0}
    836c:	11000001 	tstne	r0, r1
    8370:	0000087a 	andeq	r0, r0, sl, ror r8
    8374:	38d0ca01 	ldmcc	r0, {r0, r9, fp, lr, pc}^
    8378:	00c00800 	sbceq	r0, r0, r0, lsl #16
    837c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8380:	0000055c 	andeq	r0, r0, ip, asr r5
    8384:	00364618 	eorseq	r4, r6, r8, lsl r6
    8388:	f9ca0100 			; <UNDEFINED> instruction: 0xf9ca0100
    838c:	01000004 	tsteq	r0, r4
    8390:	29a41850 	stmibcs	r4!, {r4, r6, fp, ip}
    8394:	ca010000 	bgt	4839c <_Min_Stack_Size+0x47f9c>
    8398:	0000055c 	andeq	r0, r0, ip, asr r5
    839c:	99195101 	ldmdbls	r9, {r0, r8, ip, lr}
    83a0:	01000028 	tsteq	r0, r8, lsr #32
    83a4:	0000b8cc 	andeq	fp, r0, ip, asr #17
    83a8:	0053de00 	subseq	sp, r3, r0, lsl #28
    83ac:	6f701a00 	svcvs	0x00701a00
    83b0:	cc010073 	stcgt	0, cr0, [r1], {115}	; 0x73
    83b4:	000000b8 	strheq	r0, [r0], -r8
    83b8:	000053fd 	strdeq	r5, [r0], -sp
    83bc:	0029fb19 	eoreq	pc, r9, r9, lsl fp	; <UNPREDICTABLE>
    83c0:	b8cc0100 	stmialt	ip, {r8}^
    83c4:	57000000 	strpl	r0, [r0, -r0]
    83c8:	00000054 	andeq	r0, r0, r4, asr r0
    83cc:	02ab0417 	adceq	r0, fp, #385875968	; 0x17000000
    83d0:	c9110000 	ldmdbgt	r1, {}	; <UNPREDICTABLE>
    83d4:	01000028 	tsteq	r0, r8, lsr #32
    83d8:	003990fe 	ldrshteq	r9, [r9], -lr
    83dc:	00001208 	andeq	r1, r0, r8, lsl #4
    83e0:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    83e4:	18000005 	stmdane	r0, {r0, r2}
    83e8:	000029a4 	andeq	r2, r0, r4, lsr #19
    83ec:	055cfe01 	ldrbeq	pc, [ip, #-3585]	; 0xe01	; <UNPREDICTABLE>
    83f0:	50010000 	andpl	r0, r1, r0
    83f4:	29de1b00 	ldmibcs	lr, {r8, r9, fp, ip}^
    83f8:	15010000 	strne	r0, [r1, #-0]
    83fc:	0039a401 	eorseq	sl, r9, r1, lsl #8
    8400:	00002408 	andeq	r2, r0, r8, lsl #8
    8404:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    8408:	1c000005 	stcne	0, cr0, [r0], {5}
    840c:	00003646 	andeq	r3, r0, r6, asr #12
    8410:	f9011501 			; <UNDEFINED> instruction: 0xf9011501
    8414:	01000004 	tsteq	r0, r4
    8418:	06a31c50 	ssateq	r1, #4, r0, asr #24
    841c:	15010000 	strne	r0, [r1, #-0]
    8420:	0000a201 	andeq	sl, r0, r1, lsl #4
    8424:	1d510100 	ldfnee	f0, [r1, #-0]
    8428:	00706d74 	rsbseq	r6, r0, r4, ror sp
    842c:	ca011701 	bgt	4e038 <_Min_Stack_Size+0x4dc38>
    8430:	02000000 	andeq	r0, r0, #0
    8434:	1e007c91 	mcrne	12, 0, r7, cr0, cr1, {4}
    8438:	00002920 	andeq	r2, r0, r0, lsr #18
    843c:	97014301 	strls	r4, [r1, -r1, lsl #6]
    8440:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    8444:	0c080039 	stceq	0, cr0, [r8], {57}	; 0x39
    8448:	01000000 	mrseq	r0, (UNDEF: 0)
    844c:	0006109c 	muleq	r6, ip, r0
    8450:	36461f00 	strbcc	r1, [r6], -r0, lsl #30
    8454:	43010000 	movwmi	r0, #4096	; 0x1000
    8458:	0004f901 	andeq	pc, r4, r1, lsl #18
    845c:	0054c500 	subseq	ip, r4, r0, lsl #10
    8460:	06a31c00 	strteq	r1, [r3], r0, lsl #24
    8464:	43010000 	movwmi	r0, #4096	; 0x1000
    8468:	0000a201 	andeq	sl, r0, r1, lsl #4
    846c:	20510100 	subscs	r0, r1, r0, lsl #2
    8470:	00002983 	andeq	r2, r0, r3, lsl #19
    8474:	97014501 	strls	r4, [r1, -r1, lsl #10]
    8478:	e6000000 	str	r0, [r0], -r0
    847c:	00000054 	andeq	r0, r0, r4, asr r0
    8480:	0029cb1e 	eoreq	ip, r9, lr, lsl fp
    8484:	015d0100 	cmpeq	sp, r0, lsl #2
    8488:	000000a2 	andeq	r0, r0, r2, lsr #1
    848c:	080039d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp}
    8490:	00000006 	andeq	r0, r0, r6
    8494:	063b9c01 	ldrteq	r9, [fp], -r1, lsl #24
    8498:	461f0000 	ldrmi	r0, [pc], -r0
    849c:	01000036 	tsteq	r0, r6, lsr r0
    84a0:	04f9015d 	ldrbteq	r0, [r9], #349	; 0x15d
    84a4:	55100000 	ldrpl	r0, [r0, #-0]
    84a8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    84ac:	00002a39 	andeq	r2, r0, r9, lsr sl
    84b0:	97016e01 	strls	r6, [r1, -r1, lsl #28]
    84b4:	dc000000 	stcle	0, cr0, [r0], {-0}
    84b8:	0c080039 	stceq	0, cr0, [r8], {57}	; 0x39
    84bc:	01000000 	mrseq	r0, (UNDEF: 0)
    84c0:	0006849c 	muleq	r6, ip, r4
    84c4:	36461f00 	strbcc	r1, [r6], -r0, lsl #30
    84c8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    84cc:	0004f901 	andeq	pc, r4, r1, lsl #18
    84d0:	00553100 	subseq	r3, r5, r0, lsl #2
    84d4:	06a31c00 	strteq	r1, [r3], r0, lsl #24
    84d8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    84dc:	0000a201 	andeq	sl, r0, r1, lsl #4
    84e0:	20510100 	subscs	r0, r1, r0, lsl #2
    84e4:	00002983 	andeq	r2, r0, r3, lsl #19
    84e8:	97017001 	strls	r7, [r1, -r1]
    84ec:	52000000 	andpl	r0, r0, #0
    84f0:	00000055 	andeq	r0, r0, r5, asr r0
    84f4:	0028a81e 	eoreq	sl, r8, lr, lsl r8
    84f8:	01880100 	orreq	r0, r8, r0, lsl #2
    84fc:	000000a2 	andeq	r0, r0, r2, lsr #1
    8500:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
    8504:	00000006 	andeq	r0, r0, r6
    8508:	06af9c01 	strteq	r9, [pc], r1, lsl #24
    850c:	461f0000 	ldrmi	r0, [pc], -r0
    8510:	01000036 	tsteq	r0, r6, lsr r0
    8514:	04f90188 	ldrbteq	r0, [r9], #392	; 0x188
    8518:	557c0000 	ldrbpl	r0, [ip, #-0]!
    851c:	1b000000 	blne	8524 <_Min_Stack_Size+0x8124>
    8520:	000028f8 	strdeq	r2, [r0], -r8
    8524:	f0019c01 			; <UNDEFINED> instruction: 0xf0019c01
    8528:	04080039 	streq	r0, [r8], #-57	; 0x39
    852c:	01000000 	mrseq	r0, (UNDEF: 0)
    8530:	0006e29c 	muleq	r6, ip, r2
    8534:	36461c00 	strbcc	r1, [r6], -r0, lsl #24
    8538:	9c010000 	stcls	0, cr0, [r1], {-0}
    853c:	0004f901 	andeq	pc, r4, r1, lsl #18
    8540:	1c500100 	ldfnee	f0, [r0], {-0}
    8544:	000006a3 	andeq	r0, r0, r3, lsr #13
    8548:	a2019c01 	andge	r9, r1, #256	; 0x100
    854c:	01000000 	mrseq	r0, (UNDEF: 0)
    8550:	051b0051 	ldreq	r0, [fp, #-81]	; 0x51
    8554:	01000029 	tsteq	r0, r9, lsr #32
    8558:	39f401b1 	ldmibcc	r4!, {r0, r4, r5, r7, r8}^
    855c:	00040800 	andeq	r0, r4, r0, lsl #16
    8560:	9c010000 	stcls	0, cr0, [r1], {-0}
    8564:	00000715 	andeq	r0, r0, r5, lsl r7
    8568:	0036461c 	eorseq	r4, r6, ip, lsl r6
    856c:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    8570:	000004f9 	strdeq	r0, [r0], -r9
    8574:	a31c5001 	tstge	ip, #1
    8578:	01000006 	tsteq	r0, r6
    857c:	00a201b1 	strhteq	r0, [r2], r1
    8580:	51010000 	mrspl	r0, (UNDEF: 1)
    8584:	28ea1b00 	stmiacs	sl!, {r8, r9, fp, ip}^
    8588:	c7010000 	strgt	r0, [r1, -r0]
    858c:	0039f801 	eorseq	pc, r9, r1, lsl #16
    8590:	00000a08 	andeq	r0, r0, r8, lsl #20
    8594:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    8598:	1c000007 	stcne	0, cr0, [r0], {7}
    859c:	00003646 	andeq	r3, r0, r6, asr #12
    85a0:	f901c701 			; <UNDEFINED> instruction: 0xf901c701
    85a4:	01000004 	tsteq	r0, r4
    85a8:	06a31c50 	ssateq	r1, #4, r0, asr #24
    85ac:	c7010000 	strgt	r0, [r1, -r0]
    85b0:	0000a201 	andeq	sl, r0, r1, lsl #4
    85b4:	1c510100 	ldfnee	f0, [r1], {-0}
    85b8:	000028d9 	ldrdeq	r2, [r0], -r9
    85bc:	5b01c701 	blpl	7a1c8 <_Min_Stack_Size+0x79dc8>
    85c0:	01000002 	tsteq	r0, r2
    85c4:	061b0052 			; <UNDEFINED> instruction: 0x061b0052
    85c8:	0100002a 	tsteq	r0, sl, lsr #32
    85cc:	3a0401e0 	bcc	108d54 <_Min_Stack_Size+0x108954>
    85d0:	00040800 	andeq	r0, r4, r0, lsl #16
    85d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    85d8:	00000789 	andeq	r0, r0, r9, lsl #15
    85dc:	0036461c 	eorseq	r4, r6, ip, lsl r6
    85e0:	01e00100 	mvneq	r0, r0, lsl #2
    85e4:	000004f9 	strdeq	r0, [r0], -r9
    85e8:	b41c5001 	ldrlt	r5, [ip], #-1
    85ec:	01000029 	tsteq	r0, r9, lsr #32
    85f0:	00a201e0 	adceq	r0, r2, r0, ror #3
    85f4:	51010000 	mrspl	r0, (UNDEF: 1)
    85f8:	2a111b00 	bcs	44f200 <_Min_Stack_Size+0x44ee00>
    85fc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    8600:	003a0801 	eorseq	r0, sl, r1, lsl #16
    8604:	00000808 	andeq	r0, r0, r8, lsl #16
    8608:	be9c0100 	fmllte	f0, f4, f0
    860c:	1c000007 	stcne	0, cr0, [r0], {7}
    8610:	00003646 	andeq	r3, r0, r6, asr #12
    8614:	f901f001 			; <UNDEFINED> instruction: 0xf901f001
    8618:	01000004 	tsteq	r0, r4
    861c:	06a31f50 	ssateq	r1, #4, r0, asr #30
    8620:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    8624:	0000a201 	andeq	sl, r0, r1, lsl #4
    8628:	00559d00 	subseq	r9, r5, r0, lsl #26
    862c:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
    8630:	0100002a 	tsteq	r0, sl, lsr #32
    8634:	3a100243 	bcc	408f48 <_Min_Stack_Size+0x408b48>
    8638:	00280800 	eoreq	r0, r8, r0, lsl #16
    863c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8640:	00000825 	andeq	r0, r0, r5, lsr #16
    8644:	0036461f 	eorseq	r4, r6, pc, lsl r6
    8648:	02430100 	subeq	r0, r3, #0, 2
    864c:	000004f9 	strdeq	r0, [r0], -r9
    8650:	000055be 			; <UNDEFINED> instruction: 0x000055be
    8654:	0029bc1f 	eoreq	fp, r9, pc, lsl ip
    8658:	02430100 	subeq	r0, r3, #0, 2
    865c:	000000a2 	andeq	r0, r0, r2, lsr #1
    8660:	000055df 	ldrdeq	r5, [r0], -pc	; <UNPREDICTABLE>
    8664:	0028bc1f 	eoreq	fp, r8, pc, lsl ip
    8668:	02430100 	subeq	r0, r3, #0, 2
    866c:	00000097 	muleq	r0, r7, r0
    8670:	00005600 	andeq	r5, r0, r0, lsl #12
    8674:	0028c420 	eoreq	ip, r8, r0, lsr #8
    8678:	02450100 	subeq	r0, r5, #0, 2
    867c:	000000b8 	strheq	r0, [r0], -r8
    8680:	00005621 	andeq	r5, r0, r1, lsr #12
    8684:	002a2120 	eoreq	r2, sl, r0, lsr #2
    8688:	02460100 	subeq	r0, r6, #0, 2
    868c:	000000b8 	strheq	r0, [r0], -r8
    8690:	0000565c 	andeq	r5, r0, ip, asr r6
    8694:	039d2100 	orrseq	r2, sp, #0, 2
    8698:	a7060000 	strge	r0, [r6, -r0]
    869c:	0000e406 	andeq	lr, r0, r6, lsl #8
    86a0:	298d2200 	stmibcs	sp, {r9, sp}
    86a4:	46070000 	strmi	r0, [r7], -r0
    86a8:	00b82302 	adcseq	r2, r8, r2, lsl #6
    86ac:	ff230000 			; <UNDEFINED> instruction: 0xff230000
    86b0:	00000000 	andeq	r0, r0, r0
    86b4:	000ed200 	andeq	sp, lr, r0, lsl #4
    86b8:	1e000400 	cfcpysne	mvf0, mvf0
    86bc:	0400001a 	streq	r0, [r0], #-26
    86c0:	00028401 	andeq	r8, r2, r1, lsl #8
    86c4:	30270100 	eorcc	r0, r7, r0, lsl #2
    86c8:	01010000 	mrseq	r0, (UNDEF: 1)
    86cc:	0ea00000 	cdpeq	0, 10, cr0, cr0, cr0, {0}
    86d0:	00000000 	andeq	r0, r0, r0
    86d4:	2af10000 	bcs	ffc486dc <_estack+0xdfc186dc>
    86d8:	01020000 	mrseq	r0, (UNDEF: 2)
    86dc:	00015006 	andeq	r5, r1, r6
    86e0:	00f20300 	rscseq	r0, r2, r0, lsl #6
    86e4:	1c020000 	stcne	0, cr0, [r2], {-0}
    86e8:	00000037 	andeq	r0, r0, r7, lsr r0
    86ec:	4e080102 	adfmie	f0, f0, f2
    86f0:	02000001 	andeq	r0, r0, #1
    86f4:	00df0502 	sbcseq	r0, pc, r2, lsl #10
    86f8:	5c030000 	stcpl	0, cr0, [r3], {-0}
    86fc:	02000000 	andeq	r0, r0, #0
    8700:	00005026 	andeq	r5, r0, r6, lsr #32
    8704:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8708:	000001e5 	andeq	r0, r0, r5, ror #3
    870c:	00037703 	andeq	r7, r3, r3, lsl #14
    8710:	62370200 	eorsvs	r0, r7, #0, 4
    8714:	02000000 	andeq	r0, r0, #0
    8718:	00c50504 	sbceq	r0, r5, r4, lsl #10
    871c:	51030000 	mrspl	r0, (UNDEF: 3)
    8720:	02000000 	andeq	r0, r0, #0
    8724:	00007438 	andeq	r7, r0, r8, lsr r4
    8728:	07040200 	streq	r0, [r4, -r0, lsl #4]
    872c:	00000178 	andeq	r0, r0, r8, ror r1
    8730:	c0050802 	andgt	r0, r5, r2, lsl #16
    8734:	02000000 	andeq	r0, r0, #0
    8738:	01730708 	cmneq	r3, r8, lsl #14
    873c:	04040000 	streq	r0, [r4], #-0
    8740:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    8744:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8748:	0000017d 	andeq	r0, r0, sp, ror r1
    874c:	0000f403 	andeq	pc, r0, r3, lsl #8
    8750:	2c2a0300 	stccs	3, cr0, [sl], #-0
    8754:	03000000 	movweq	r0, #0
    8758:	0000005e 	andeq	r0, r0, lr, asr r0
    875c:	00453603 	subeq	r3, r5, r3, lsl #12
    8760:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    8764:	03000003 	movweq	r0, #3
    8768:	00005741 	andeq	r5, r0, r1, asr #14
    876c:	00530300 	subseq	r0, r3, r0, lsl #6
    8770:	42030000 	andmi	r0, r3, #0
    8774:	00000069 	andeq	r0, r0, r9, rrx
    8778:	2c070402 	cfstrscs	mvf0, [r7], {2}
    877c:	05000000 	streq	r0, [r0, #-0]
    8780:	000000b8 	strheq	r0, [r0], -r8
    8784:	0000b806 	andeq	fp, r0, r6, lsl #16
    8788:	0000df00 	andeq	sp, r0, r0, lsl #30
    878c:	00c30700 	sbceq	r0, r3, r0, lsl #14
    8790:	00010000 	andeq	r0, r1, r0
    8794:	0000ad05 	andeq	sl, r0, r5, lsl #26
    8798:	04010800 	streq	r0, [r1], #-2048	; 0x800
    879c:	00fa01f7 	ldrshteq	r0, [sl], #23
    87a0:	e4090000 	str	r0, [r9], #-0
    87a4:	00000028 	andeq	r0, r0, r8, lsr #32
    87a8:	5445530a 	strbpl	r5, [r5], #-778	; 0x30a
    87ac:	0b000100 	bleq	8bb4 <_Min_Stack_Size+0x87b4>
    87b0:	00003d29 	andeq	r3, r0, r9, lsr #26
    87b4:	e401f704 	str	pc, [r1], #-1796	; 0x704
    87b8:	0b000000 	bleq	87c0 <_Min_Stack_Size+0x83c0>
    87bc:	00003ca0 	andeq	r3, r0, r0, lsr #25
    87c0:	e401f704 	str	pc, [r1], #-1796	; 0x704
    87c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    87c8:	01f90401 	mvnseq	r0, r1, lsl #8
    87cc:	00000128 	andeq	r0, r0, r8, lsr #2
    87d0:	00048809 	andeq	r8, r4, r9, lsl #16
    87d4:	c0090000 	andgt	r0, r9, r0
    87d8:	01000005 	tsteq	r0, r5
    87dc:	092a0b00 	stmdbeq	sl!, {r8, r9, fp}
    87e0:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    87e4:	00011201 	andeq	r1, r1, r1, lsl #4
    87e8:	04010800 	streq	r0, [r1], #-2048	; 0x800
    87ec:	014a01fc 	strdeq	r0, [sl, #-28]	; 0xffffffe4
    87f0:	94090000 	strls	r0, [r9], #-0
    87f4:	0000002d 	andeq	r0, r0, sp, lsr #32
    87f8:	00307309 	eorseq	r7, r0, r9, lsl #6
    87fc:	0b000100 	bleq	8c04 <_Min_Stack_Size+0x8804>
    8800:	00002c14 	andeq	r2, r0, r4, lsl ip
    8804:	3401fc04 	strcc	pc, [r1], #-3076	; 0xc04
    8808:	0c000001 	stceq	0, cr0, [r0], {1}
    880c:	04550490 	ldrbeq	r0, [r5], #-1168	; 0x490
    8810:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8814:	0052430d 	subseq	r4, r2, sp, lsl #6
    8818:	ca045704 	bgt	11e430 <_Min_Stack_Size+0x11e030>
    881c:	00000000 	andeq	r0, r0, r0
    8820:	00000a0e 	andeq	r0, r0, lr, lsl #20
    8824:	04580400 	ldrbeq	r0, [r8], #-1024	; 0x400
    8828:	000000ca 	andeq	r0, r0, sl, asr #1
    882c:	03b00e04 	movseq	r0, #4, 28	; 0x40
    8830:	59040000 	stmdbpl	r4, {}	; <UNPREDICTABLE>
    8834:	0000ca04 	andeq	ip, r0, r4, lsl #20
    8838:	430d0800 	movwmi	r0, #55296	; 0xd800
    883c:	04005249 	streq	r5, [r0], #-585	; 0x249
    8840:	00ca045a 	sbceq	r0, sl, sl, asr r4
    8844:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    8848:	0000007d 	andeq	r0, r0, sp, ror r0
    884c:	ca045b04 	bgt	11f464 <_Min_Stack_Size+0x11f064>
    8850:	10000000 	andne	r0, r0, r0
    8854:	0000230e 	andeq	r2, r0, lr, lsl #6
    8858:	045c0400 	ldrbeq	r0, [ip], #-1024	; 0x400
    885c:	000000ca 	andeq	r0, r0, sl, asr #1
    8860:	03860e14 	orreq	r0, r6, #20, 28	; 0x140
    8864:	5d040000 	stcpl	0, cr0, [r4, #-0]
    8868:	0000ca04 	andeq	ip, r0, r4, lsl #20
    886c:	3c0e1800 	stccc	8, cr1, [lr], {-0}
    8870:	04000002 	streq	r0, [r0], #-2
    8874:	00b8045e 	adcseq	r0, r8, lr, asr r4
    8878:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    887c:	00000012 	andeq	r0, r0, r2, lsl r0
    8880:	ca045f04 	bgt	120498 <_Min_Stack_Size+0x120098>
    8884:	20000000 	andcs	r0, r0, r0
    8888:	0000e90e 	andeq	lr, r0, lr, lsl #18
    888c:	04600400 	strbteq	r0, [r0], #-1024	; 0x400
    8890:	000000ca 	andeq	r0, r0, sl, asr #1
    8894:	02460e24 	subeq	r0, r6, #36, 28	; 0x240
    8898:	61040000 	mrsvs	r0, (UNDEF: 4)
    889c:	0000cf04 	andeq	ip, r0, r4, lsl #30
    88a0:	6f0e2800 	svcvs	0x000e2800
    88a4:	04000003 	streq	r0, [r0], #-3
    88a8:	00ca0462 	sbceq	r0, sl, r2, ror #8
    88ac:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    88b0:	0000001b 	andeq	r0, r0, fp, lsl r0
    88b4:	ca046304 	bgt	1214cc <_Min_Stack_Size+0x1210cc>
    88b8:	34000000 	strcc	r0, [r0], #-0
    88bc:	0001360e 	andeq	r3, r1, lr, lsl #12
    88c0:	04640400 	strbteq	r0, [r4], #-1024	; 0x400
    88c4:	000000ca 	andeq	r0, r0, sl, asr #1
    88c8:	02500e38 	subseq	r0, r0, #56, 28	; 0x380
    88cc:	65040000 	strvs	r0, [r4, #-0]
    88d0:	0000b804 	andeq	fp, r0, r4, lsl #16
    88d4:	a30e3c00 	movwge	r3, #60416	; 0xec00
    88d8:	04000000 	streq	r0, [r0], #-0
    88dc:	00ca0466 	sbceq	r0, sl, r6, ror #8
    88e0:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    88e4:	0000015c 	andeq	r0, r0, ip, asr r1
    88e8:	ca046704 	bgt	122500 <_Min_Stack_Size+0x122100>
    88ec:	44000000 	strmi	r0, [r0], #-0
    88f0:	0000900e 	andeq	r9, r0, lr
    88f4:	04680400 	strbteq	r0, [r8], #-1024	; 0x400
    88f8:	000000cf 	andeq	r0, r0, pc, asr #1
    88fc:	00000e48 	andeq	r0, r0, r8, asr #28
    8900:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    8904:	0000ca04 	andeq	ip, r0, r4, lsl #20
    8908:	2d0e5000 	stccs	0, cr5, [lr, #-0]
    890c:	04000002 	streq	r0, [r0], #-2
    8910:	00ca046a 	sbceq	r0, sl, sl, ror #8
    8914:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
    8918:	00000086 	andeq	r0, r0, r6, lsl #1
    891c:	ca046b04 	bgt	123534 <_Min_Stack_Size+0x123134>
    8920:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    8924:	0002660e 	andeq	r6, r2, lr, lsl #12
    8928:	046c0400 	strbteq	r0, [ip], #-1024	; 0x400
    892c:	000000b8 	strheq	r0, [r0], -r8
    8930:	01f80e5c 	mvnseq	r0, ip, asr lr
    8934:	6d040000 	stcvs	0, cr0, [r4, #-0]
    8938:	0000ca04 	andeq	ip, r0, r4, lsl #20
    893c:	bb0e6000 	bllt	3a0944 <_Min_Stack_Size+0x3a0544>
    8940:	04000003 	streq	r0, [r0], #-3
    8944:	00ca046e 	sbceq	r0, sl, lr, ror #8
    8948:	0e640000 	cdpeq	0, 6, cr0, cr4, cr0, {0}
    894c:	00000270 	andeq	r0, r0, r0, ror r2
    8950:	cf046f04 	svcgt	0x00046f04
    8954:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    8958:	0000350e 	andeq	r3, r0, lr, lsl #10
    895c:	04700400 	ldrbteq	r0, [r0], #-1024	; 0x400
    8960:	000000ca 	andeq	r0, r0, sl, asr #1
    8964:	53430d70 	movtpl	r0, #15728	; 0x3d70
    8968:	71040052 	qaddvc	r0, r2, r4
    896c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    8970:	7a0e7400 	bvc	3a5978 <_Min_Stack_Size+0x3a5578>
    8974:	04000002 	streq	r0, [r0], #-2
    8978:	00cf0472 	sbceq	r0, pc, r2, ror r4	; <UNPREDICTABLE>
    897c:	0e780000 	cdpeq	0, 7, cr0, cr8, cr0, {0}
    8980:	00000067 	andeq	r0, r0, r7, rrx
    8984:	ca047304 	bgt	12559c <_Min_Stack_Size+0x12519c>
    8988:	80000000 	andhi	r0, r0, r0
    898c:	00003a0e 	andeq	r3, r0, lr, lsl #20
    8990:	04740400 	ldrbteq	r0, [r4], #-1024	; 0x400
    8994:	000000ca 	andeq	r0, r0, sl, asr #1
    8998:	03aa0e84 			; <UNDEFINED> instruction: 0x03aa0e84
    899c:	75040000 	strvc	r0, [r4, #-0]
    89a0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    89a4:	ab0e8800 	blge	3aa9ac <_Min_Stack_Size+0x3aa5ac>
    89a8:	04000000 	streq	r0, [r0], #-0
    89ac:	00ca0476 	sbceq	r0, sl, r6, ror r4
    89b0:	008c0000 	addeq	r0, ip, r0
    89b4:	0000d30b 	andeq	sp, r0, fp, lsl #6
    89b8:	04780400 	ldrbteq	r0, [r8], #-1024	; 0x400
    89bc:	00000156 	andeq	r0, r0, r6, asr r1
    89c0:	3005100f 	andcc	r1, r5, pc
    89c4:	00000344 	andeq	r0, r0, r4, asr #6
    89c8:	002a9710 	eoreq	r9, sl, r0, lsl r7
    89cc:	b8320500 	ldmdalt	r2!, {r8, sl}
    89d0:	00000000 	andeq	r0, r0, r0
    89d4:	002c5810 	eoreq	r5, ip, r0, lsl r8
    89d8:	b8330500 	ldmdalt	r3!, {r8, sl}
    89dc:	04000000 	streq	r0, [r0], #-0
    89e0:	002ee310 	eoreq	lr, lr, r0, lsl r3
    89e4:	b8340500 	ldmdalt	r4!, {r8, sl}
    89e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    89ec:	002b6510 	eoreq	r6, fp, r0, lsl r5
    89f0:	b8350500 	ldmdalt	r5!, {r8, sl}
    89f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    89f8:	30890300 	addcc	r0, r9, r0, lsl #6
    89fc:	36050000 	strcc	r0, [r5], -r0
    8a00:	0000030b 	andeq	r0, r0, fp, lsl #6
    8a04:	002e1811 	eoreq	r1, lr, r1, lsl r8
    8a08:	082c0100 	stmdaeq	ip!, {r8}
    8a0c:	000000fa 	strdeq	r0, [r0], -sl
    8a10:	00039101 	andeq	r9, r3, r1, lsl #2
    8a14:	2bf81200 	blcs	ffe0d21c <_estack+0xdfddd21c>
    8a18:	2c010000 	stccs	0, cr0, [r1], {-0}
    8a1c:	00009708 	andeq	r9, r0, r8, lsl #14
    8a20:	6d741300 	ldclvs	3, cr1, [r4, #-0]
    8a24:	2e010070 	mcrcs	0, 0, r0, cr1, cr0, {3}
    8a28:	0000b808 	andeq	fp, r0, r8, lsl #16
    8a2c:	2a8d1400 	bcs	fe34da34 <_estack+0xde31da34>
    8a30:	2f010000 	svccs	0x00010000
    8a34:	0000b808 	andeq	fp, r0, r8, lsl #16
    8a38:	29831400 	stmibcs	r3, {sl, ip}
    8a3c:	30010000 	andcc	r0, r1, r0
    8a40:	0000fa08 	andeq	pc, r0, r8, lsl #20
    8a44:	5d150000 	ldcpl	0, cr0, [r5, #-0]
    8a48:	0100002f 	tsteq	r0, pc, lsr #32
    8a4c:	003a38d5 	ldrsbteq	r3, [sl], -r5
    8a50:	00005408 	andeq	r5, r0, r8, lsl #8
    8a54:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    8a58:	00002e2a 	andeq	r2, r0, sl, lsr #28
    8a5c:	8c010801 	stchi	8, cr0, [r1], {1}
    8a60:	1008003a 	andne	r0, r8, sl, lsr r0
    8a64:	01000000 	mrseq	r0, (UNDEF: 0)
    8a68:	0003c79c 	muleq	r3, ip, r7
    8a6c:	2edb1700 	cdpcs	7, 13, cr1, cr11, cr0, {0}
    8a70:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    8a74:	00009701 	andeq	r9, r0, r1, lsl #14
    8a78:	00500100 	subseq	r0, r0, r0, lsl #2
    8a7c:	002c4218 	eoreq	r4, ip, r8, lsl r2
    8a80:	01200100 	teqeq	r0, r0, lsl #2
    8a84:	0000014a 	andeq	r0, r0, sl, asr #2
    8a88:	08003a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip, sp}
    8a8c:	0000003e 	andeq	r0, r0, lr, lsr r0
    8a90:	048c9c01 	streq	r9, [ip], #3073	; 0xc01
    8a94:	a5190000 	ldrge	r0, [r9, #-0]
    8a98:	0100002f 	tsteq	r0, pc, lsr #32
    8a9c:	00ca0122 	sbceq	r0, sl, r2, lsr #2
    8aa0:	91020000 	mrsls	r0, (UNDEF: 2)
    8aa4:	39df1a7c 	ldmibcc	pc, {r2, r3, r4, r5, r6, r9, fp, ip}^	; <UNPREDICTABLE>
    8aa8:	23010000 	movwcs	r0, #4096	; 0x1000
    8aac:	00014a01 	andeq	r4, r1, r1, lsl #20
    8ab0:	00567b00 	subseq	r7, r6, r0, lsl #22
    8ab4:	2f221a00 	svccs	0x00221a00
    8ab8:	24010000 	strcs	r0, [r1], #-0
    8abc:	0000fa01 	andeq	pc, r0, r1, lsl #20
    8ac0:	0056ac00 	subseq	sl, r6, r0, lsl #24
    8ac4:	034f1b00 	movteq	r1, #64256	; 0xfb00
    8ac8:	3aa00000 	bcc	fe808ad0 <_estack+0xde7d8ad0>
    8acc:	0e880800 	cdpeq	8, 8, cr0, cr8, cr0, {0}
    8ad0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    8ad4:	00044c01 	andeq	r4, r4, r1, lsl #24
    8ad8:	03601c00 	cmneq	r0, #0, 24
    8adc:	1d310000 	ldcne	0, cr0, [r1, #-0]
    8ae0:	00000e88 	andeq	r0, r0, r8, lsl #29
    8ae4:	00036c1e 	andeq	r6, r3, lr, lsl ip
    8ae8:	0056c000 	subseq	ip, r6, r0
    8aec:	03781e00 	cmneq	r8, #0, 28
    8af0:	56e00000 	strbtpl	r0, [r0], r0
    8af4:	841e0000 	ldrhi	r0, [lr], #-0
    8af8:	ff000003 			; <UNDEFINED> instruction: 0xff000003
    8afc:	00000056 	andeq	r0, r0, r6, asr r0
    8b00:	034f1f00 	movteq	r1, #65280	; 0xff00
    8b04:	3abe0000 	bcc	fef88b0c <_estack+0xdef58b0c>
    8b08:	000a0800 	andeq	r0, sl, r0, lsl #16
    8b0c:	2c010000 	stccs	0, cr0, [r1], {-0}
    8b10:	03602001 	cmneq	r0, #1
    8b14:	571f0000 	ldrpl	r0, [pc, -r0]
    8b18:	be210000 	cdplt	0, 2, cr0, cr1, cr0, {0}
    8b1c:	0a08003a 	beq	208c0c <_Min_Stack_Size+0x20880c>
    8b20:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    8b24:	0000036c 	andeq	r0, r0, ip, ror #6
    8b28:	00005734 	andeq	r5, r0, r4, lsr r7
    8b2c:	0003781e 	andeq	r7, r3, lr, lsl r8
    8b30:	00575400 	subseq	r5, r7, r0, lsl #8
    8b34:	03841e00 	orreq	r1, r4, #0, 28
    8b38:	57730000 	ldrbpl	r0, [r3, -r0]!
    8b3c:	00000000 	andeq	r0, r0, r0
    8b40:	2f041600 	svccs	0x00041600
    8b44:	3f010000 	svccc	0x00010000
    8b48:	003adc01 	eorseq	sp, sl, r1, lsl #24
    8b4c:	00001608 	andeq	r1, r0, r8, lsl #12
    8b50:	c39c0100 	orrsgt	r0, ip, #0, 2
    8b54:	22000004 	andcs	r0, r0, #4
    8b58:	00002f0e 	andeq	r2, r0, lr, lsl #30
    8b5c:	97013f01 	strls	r3, [r1, -r1, lsl #30]
    8b60:	87000000 	strhi	r0, [r0, -r0]
    8b64:	1a000057 	bne	8cc8 <_Min_Stack_Size+0x88c8>
    8b68:	00002b5e 	andeq	r2, r0, lr, asr fp
    8b6c:	b8014101 	stmdalt	r1, {r0, r8, lr}
    8b70:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    8b74:	00000057 	andeq	r0, r0, r7, asr r0
    8b78:	002d3716 	eoreq	r3, sp, r6, lsl r7
    8b7c:	01630100 	cmneq	r3, r0, lsl #2
    8b80:	08003af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, sp}
    8b84:	0000000a 	andeq	r0, r0, sl
    8b88:	04e89c01 	strbteq	r9, [r8], #3073	; 0xc01
    8b8c:	83170000 	tsthi	r7, #0
    8b90:	01000027 	tsteq	r0, r7, lsr #32
    8b94:	01280163 	teqeq	r8, r3, ror #2
    8b98:	50010000 	andpl	r0, r1, r0
    8b9c:	2bea1600 	blcs	ffa8e3a4 <_estack+0xdfa5e3a4>
    8ba0:	7c010000 	stcvc	0, cr0, [r1], {-0}
    8ba4:	003b0001 	eorseq	r0, fp, r1
    8ba8:	00002208 	andeq	r2, r0, r8, lsl #4
    8bac:	0d9c0100 	ldfeqs	f0, [ip]
    8bb0:	17000005 	strne	r0, [r0, -r5]
    8bb4:	00002a59 	andeq	r2, r0, r9, asr sl
    8bb8:	97017c01 	strls	r7, [r1, -r1, lsl #24]
    8bbc:	01000000 	mrseq	r0, (UNDEF: 0)
    8bc0:	f8160050 			; <UNDEFINED> instruction: 0xf8160050
    8bc4:	0100002f 	tsteq	r0, pc, lsr #32
    8bc8:	3b2401a4 	blcc	909260 <_Min_Stack_Size+0x908e60>
    8bcc:	000c0800 	andeq	r0, ip, r0, lsl #16
    8bd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    8bd4:	00000532 	andeq	r0, r0, r2, lsr r5
    8bd8:	00278317 	eoreq	r8, r7, r7, lsl r3
    8bdc:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    8be0:	00000128 	andeq	r0, r0, r8, lsr #2
    8be4:	16005001 	strne	r5, [r0], -r1
    8be8:	0000307b 	andeq	r3, r0, fp, ror r0
    8bec:	3001cf01 	andcc	ip, r1, r1, lsl #30
    8bf0:	2608003b 			; <UNDEFINED> instruction: 0x2608003b
    8bf4:	01000000 	mrseq	r0, (UNDEF: 0)
    8bf8:	0005999c 	muleq	r5, ip, r9
    8bfc:	2c202200 	sfmcs	f2, 4, [r0], #-0
    8c00:	cf010000 	svcgt	0x00010000
    8c04:	0000b801 	andeq	fp, r0, r1, lsl #16
    8c08:	0057d200 	subseq	sp, r7, r0, lsl #4
    8c0c:	2b0d2200 	blcs	351414 <_Min_Stack_Size+0x351014>
    8c10:	cf010000 	svcgt	0x00010000
    8c14:	0000b801 	andeq	fp, r0, r1, lsl #16
    8c18:	0057f300 	subseq	pc, r7, r0, lsl #6
    8c1c:	2ace2200 	bcs	ff391424 <_estack+0xdf361424>
    8c20:	cf010000 	svcgt	0x00010000
    8c24:	0000b801 	andeq	fp, r0, r1, lsl #16
    8c28:	00581400 	subseq	r1, r8, r0, lsl #8
    8c2c:	2aed2200 	bcs	ffb51434 <_estack+0xdfb21434>
    8c30:	cf010000 	svcgt	0x00010000
    8c34:	0000b801 	andeq	fp, r0, r1, lsl #16
    8c38:	00583500 	subseq	r3, r8, r0, lsl #10
    8c3c:	2af22200 	bcs	ffc91444 <_estack+0xdfc61444>
    8c40:	cf010000 	svcgt	0x00010000
    8c44:	0000b801 	andeq	fp, r0, r1, lsl #16
    8c48:	00585600 	subseq	r5, r8, r0, lsl #12
    8c4c:	7b160000 	blvc	588c54 <_Min_Stack_Size+0x588854>
    8c50:	0100002e 	tsteq	r0, lr, lsr #32
    8c54:	3b5801e6 	blcc	16093f4 <_Min_Stack_Size+0x1608ff4>
    8c58:	000a0800 	andeq	r0, sl, r0, lsl #16
    8c5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8c60:	000005be 			; <UNDEFINED> instruction: 0x000005be
    8c64:	00278317 	eoreq	r8, r7, r7, lsl r3
    8c68:	01e60100 	mvneq	r0, r0, lsl #2
    8c6c:	00000128 	andeq	r0, r0, r8, lsr #2
    8c70:	16005001 	strne	r5, [r0], -r1
    8c74:	00002d26 	andeq	r2, r0, r6, lsr #26
    8c78:	64022801 	strvs	r2, [r2], #-2049	; 0x801
    8c7c:	1808003b 	stmdane	r8, {r0, r1, r3, r4, r5}
    8c80:	01000000 	mrseq	r0, (UNDEF: 0)
    8c84:	0006059c 	muleq	r6, ip, r5
    8c88:	2f2c2200 	svccs	0x002c2200
    8c8c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    8c90:	0000b802 	andeq	fp, r0, r2, lsl #16
    8c94:	00586a00 	subseq	r6, r8, r0, lsl #20
    8c98:	2f682200 	svccs	0x00682200
    8c9c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    8ca0:	0000b802 	andeq	fp, r0, r2, lsl #16
    8ca4:	00588b00 	subseq	r8, r8, r0, lsl #22
    8ca8:	2f702200 	svccs	0x00702200
    8cac:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    8cb0:	0000b802 	andeq	fp, r0, r2, lsl #16
    8cb4:	0058ac00 	subseq	sl, r8, r0, lsl #24
    8cb8:	a1160000 	tstge	r6, r0
    8cbc:	0100002c 	tsteq	r0, ip, lsr #32
    8cc0:	3b7c0239 	blcc	1f095ac <_Min_Stack_Size+0x1f091ac>
    8cc4:	000a0800 	andeq	r0, sl, r0, lsl #16
    8cc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    8ccc:	0000062a 	andeq	r0, r0, sl, lsr #12
    8cd0:	00278317 	eoreq	r8, r7, r7, lsl r3
    8cd4:	02390100 	eorseq	r0, r9, #0, 2
    8cd8:	00000128 	andeq	r0, r0, r8, lsr #2
    8cdc:	16005001 	strne	r5, [r0], -r1
    8ce0:	00002dc4 	andeq	r2, r0, r4, asr #27
    8ce4:	88025601 	stmdahi	r2, {r0, r9, sl, ip, lr}
    8ce8:	1808003b 	stmdane	r8, {r0, r1, r3, r4, r5}
    8cec:	01000000 	mrseq	r0, (UNDEF: 0)
    8cf0:	0006719c 	muleq	r6, ip, r1
    8cf4:	2e4f2200 	cdpcs	2, 4, cr2, cr15, cr0, {0}
    8cf8:	56010000 	strpl	r0, [r1], -r0
    8cfc:	0000b802 	andeq	fp, r0, r2, lsl #16
    8d00:	0058cd00 	subseq	ip, r8, r0, lsl #26
    8d04:	2e572200 	cdpcs	2, 5, cr2, cr7, cr0, {0}
    8d08:	56010000 	strpl	r0, [r1], -r0
    8d0c:	0000b802 	andeq	fp, r0, r2, lsl #16
    8d10:	0058ee00 	subseq	lr, r8, r0, lsl #28
    8d14:	2e5f2200 	cdpcs	2, 5, cr2, cr15, cr0, {0}
    8d18:	56010000 	strpl	r0, [r1], -r0
    8d1c:	0000b802 	andeq	fp, r0, r2, lsl #16
    8d20:	00590f00 	subseq	r0, r9, r0, lsl #30
    8d24:	61160000 	tstvs	r6, r0
    8d28:	0100002a 	tsteq	r0, sl, lsr #32
    8d2c:	3ba00268 	blcc	fe8096d4 <_estack+0xde7d96d4>
    8d30:	000a0800 	andeq	r0, sl, r0, lsl #16
    8d34:	9c010000 	stcls	0, cr0, [r1], {-0}
    8d38:	00000696 	muleq	r0, r6, r6
    8d3c:	00278317 	eoreq	r8, r7, r7, lsl r3
    8d40:	02680100 	rsbeq	r0, r8, #0, 2
    8d44:	00000128 	andeq	r0, r0, r8, lsr #2
    8d48:	16005001 	strne	r5, [r0], -r1
    8d4c:	00002d9a 	muleq	r0, sl, sp
    8d50:	ac027a01 	stcge	10, cr7, [r2], {1}
    8d54:	0a08003b 	beq	208e48 <_Min_Stack_Size+0x208a48>
    8d58:	01000000 	mrseq	r0, (UNDEF: 0)
    8d5c:	0006bb9c 	muleq	r6, ip, fp
    8d60:	27831700 	strcs	r1, [r3, r0, lsl #14]
    8d64:	7a010000 	bvc	48d6c <_Min_Stack_Size+0x4896c>
    8d68:	00012802 	andeq	r2, r1, r2, lsl #16
    8d6c:	00500100 	subseq	r0, r0, r0, lsl #2
    8d70:	002c8716 	eoreq	r8, ip, r6, lsl r7
    8d74:	02930100 	addseq	r0, r3, #0, 2
    8d78:	08003bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip, sp}
    8d7c:	00000016 	andeq	r0, r0, r6, lsl r0
    8d80:	07029c01 	streq	r9, [r2, -r1, lsl #24]
    8d84:	a8220000 	stmdage	r2!, {}	; <UNPREDICTABLE>
    8d88:	0100002a 	tsteq	r0, sl, lsr #32
    8d8c:	00b80293 	umlalseq	r0, r8, r3, r2
    8d90:	59300000 	ldmdbpl	r0!, {}	; <UNPREDICTABLE>
    8d94:	d5220000 	strle	r0, [r2, #-0]!
    8d98:	0100002d 	tsteq	r0, sp, lsr #32
    8d9c:	00b80293 	umlalseq	r0, r8, r3, r2
    8da0:	59510000 	ldmdbpl	r1, {}^	; <UNPREDICTABLE>
    8da4:	5e1a0000 	cdppl	0, 1, cr0, cr10, cr0, {0}
    8da8:	0100002b 	tsteq	r0, fp, lsr #32
    8dac:	00b80295 	umlalseq	r0, r8, r5, r2
    8db0:	59720000 	ldmdbpl	r2!, {}^	; <UNPREDICTABLE>
    8db4:	16000000 	strne	r0, [r0], -r0
    8db8:	00002fe9 	andeq	r2, r0, r9, ror #31
    8dbc:	d002b901 	andle	fp, r2, r1, lsl #18
    8dc0:	1608003b 			; <UNDEFINED> instruction: 0x1608003b
    8dc4:	01000000 	mrseq	r0, (UNDEF: 0)
    8dc8:	0007499c 	muleq	r7, ip, r9
    8dcc:	2df82200 	lfmcs	f2, 2, [r8]
    8dd0:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    8dd4:	0000b802 	andeq	fp, r0, r2, lsl #16
    8dd8:	0059af00 	subseq	sl, r9, r0, lsl #30
    8ddc:	2d602200 	sfmcs	f2, 2, [r0, #-0]
    8de0:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    8de4:	0000b802 	andeq	fp, r0, r2, lsl #16
    8de8:	0059d000 	subseq	sp, r9, r0
    8dec:	2b5e1a00 	blcs	178f5f4 <_Min_Stack_Size+0x178f1f4>
    8df0:	bb010000 	bllt	48df8 <_Min_Stack_Size+0x489f8>
    8df4:	0000b802 	andeq	fp, r0, r2, lsl #16
    8df8:	0059f100 	subseq	pc, r9, r0, lsl #2
    8dfc:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    8e00:	0100002b 	tsteq	r0, fp, lsr #32
    8e04:	3be8035f 	blcc	ffa09b88 <_estack+0xdf9d9b88>
    8e08:	00140800 	andseq	r0, r4, r0, lsl #16
    8e0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8e10:	00000780 	andeq	r0, r0, r0, lsl #15
    8e14:	002eca22 	eoreq	ip, lr, r2, lsr #20
    8e18:	035f0100 	cmpeq	pc, #0, 2
    8e1c:	000000b8 	strheq	r0, [r0], -r8
    8e20:	00005a2e 	andeq	r5, r0, lr, lsr #20
    8e24:	002b5e1a 	eoreq	r5, fp, sl, lsl lr
    8e28:	03610100 	cmneq	r1, #0, 2
    8e2c:	000000b8 	strheq	r0, [r0], -r8
    8e30:	00005a4f 	andeq	r5, r0, pc, asr #20
    8e34:	2c2e2300 	stccs	3, cr2, [lr], #-0
    8e38:	7b010000 	blvc	48e40 <_Min_Stack_Size+0x48a40>
    8e3c:	00009703 	andeq	r9, r0, r3, lsl #14
    8e40:	003bfc00 	eorseq	pc, fp, r0, lsl #24
    8e44:	00001008 	andeq	r1, r0, r8
    8e48:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    8e4c:	00002bca 	andeq	r2, r0, sl, asr #23
    8e50:	0c039401 	cfstrseq	mvf9, [r3], {1}
    8e54:	1408003c 	strne	r0, [r8], #-60	; 0x3c
    8e58:	01000000 	mrseq	r0, (UNDEF: 0)
    8e5c:	0007cd9c 	muleq	r7, ip, sp
    8e60:	2c962200 	lfmcs	f2, 4, [r6], {0}
    8e64:	94010000 	strls	r0, [r1], #-0
    8e68:	0000b803 	andeq	fp, r0, r3, lsl #16
    8e6c:	005a7900 	subseq	r7, sl, r0, lsl #18
    8e70:	2b5e1a00 	blcs	178f678 <_Min_Stack_Size+0x178f278>
    8e74:	96010000 	strls	r0, [r1], -r0
    8e78:	0000b803 	andeq	fp, r0, r3, lsl #16
    8e7c:	005a9a00 	subseq	r9, sl, r0, lsl #20
    8e80:	8c160000 	ldchi	0, cr0, [r6], {-0}
    8e84:	0100002b 	tsteq	r0, fp, lsr #32
    8e88:	3c2003b4 	stccc	3, cr0, [r0], #-720	; 0xfffffd30
    8e8c:	00140800 	andseq	r0, r4, r0, lsl #16
    8e90:	9c010000 	stcls	0, cr0, [r1], {-0}
    8e94:	00000804 	andeq	r0, r0, r4, lsl #16
    8e98:	002a5022 	eoreq	r5, sl, r2, lsr #32
    8e9c:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    8ea0:	000000b8 	strheq	r0, [r0], -r8
    8ea4:	00005ac4 	andeq	r5, r0, r4, asr #21
    8ea8:	002b5e1a 	eoreq	r5, fp, sl, lsl lr
    8eac:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    8eb0:	000000b8 	strheq	r0, [r0], -r8
    8eb4:	00005ae5 	andeq	r5, r0, r5, ror #21
    8eb8:	2eba1600 	cdpcs	6, 11, cr1, cr10, cr0, {0}
    8ebc:	d3010000 	movwle	r0, #4096	; 0x1000
    8ec0:	003c3403 	eorseq	r3, ip, r3, lsl #8
    8ec4:	00001608 	andeq	r1, r0, r8, lsl #12
    8ec8:	3b9c0100 	blcc	fe7092d0 <_estack+0xde6d92d0>
    8ecc:	22000008 	andcs	r0, r0, #8
    8ed0:	00002a50 	andeq	r2, r0, r0, asr sl
    8ed4:	b803d301 	stmdalt	r3, {r0, r8, r9, ip, lr, pc}
    8ed8:	0f000000 	svceq	0x00000000
    8edc:	1a00005b 	bne	9050 <_Min_Stack_Size+0x8c50>
    8ee0:	00002b5e 	andeq	r2, r0, lr, asr fp
    8ee4:	b803d501 	stmdalt	r3, {r0, r8, sl, ip, lr, pc}
    8ee8:	30000000 	andcc	r0, r0, r0
    8eec:	0000005b 	andeq	r0, r0, fp, asr r0
    8ef0:	002f3416 	eoreq	r3, pc, r6, lsl r4	; <UNPREDICTABLE>
    8ef4:	04070100 	streq	r0, [r7], #-256	; 0x100
    8ef8:	08003c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, sp}
    8efc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    8f00:	08c09c01 	stmiaeq	r0, {r0, sl, fp, ip, pc}^
    8f04:	21170000 	tstcs	r7, r0
    8f08:	0100002b 	tsteq	r0, fp, lsr #32
    8f0c:	08c00407 	stmiaeq	r0, {r0, r1, r2, sl}^
    8f10:	50010000 	andpl	r0, r1, r0
    8f14:	706d7424 	rsbvc	r7, sp, r4, lsr #8
    8f18:	04090100 	streq	r0, [r9], #-256	; 0x100
    8f1c:	000000b8 	strheq	r0, [r0], -r8
    8f20:	00005b5a 	andeq	r5, r0, sl, asr fp
    8f24:	002caf1a 	eoreq	sl, ip, sl, lsl pc
    8f28:	04090100 	streq	r0, [r9], #-256	; 0x100
    8f2c:	000000b8 	strheq	r0, [r0], -r8
    8f30:	00005bdb 	ldrdeq	r5, [r0], -fp
    8f34:	0002021a 	andeq	r0, r2, sl, lsl r2
    8f38:	04090100 	streq	r0, [r9], #-256	; 0x100
    8f3c:	000000b8 	strheq	r0, [r0], -r8
    8f40:	00005c2b 	andeq	r5, r0, fp, lsr #24
    8f44:	0001431a 	andeq	r4, r1, sl, lsl r3
    8f48:	04090100 	streq	r0, [r9], #-256	; 0x100
    8f4c:	000000b8 	strheq	r0, [r0], -r8
    8f50:	00005c56 	andeq	r5, r0, r6, asr ip
    8f54:	00012c1a 	andeq	r2, r1, sl, lsl ip
    8f58:	04090100 	streq	r0, [r9], #-256	; 0x100
    8f5c:	000000b8 	strheq	r0, [r0], -r8
    8f60:	00005c76 	andeq	r5, r0, r6, ror ip
    8f64:	00013e1a 	andeq	r3, r1, sl, lsl lr
    8f68:	04090100 	streq	r0, [r9], #-256	; 0x100
    8f6c:	000000b8 	strheq	r0, [r0], -r8
    8f70:	00005ca9 	andeq	r5, r0, r9, lsr #25
    8f74:	44042500 	strmi	r2, [r4], #-1280	; 0x500
    8f78:	16000003 	strne	r0, [r0], -r3
    8f7c:	00002c76 	andeq	r2, r0, r6, ror ip
    8f80:	fc048401 	stc2	4, cr8, [r4], {1}
    8f84:	3808003c 	stmdacc	r8, {r2, r3, r4, r5}
    8f88:	01000000 	mrseq	r0, (UNDEF: 0)
    8f8c:	0008fd9c 	muleq	r8, ip, sp
    8f90:	2cb52200 	lfmcs	f2, 4, [r5]
    8f94:	84010000 	strhi	r0, [r1], #-0
    8f98:	0000b804 	andeq	fp, r0, r4, lsl #16
    8f9c:	005cd400 	subseq	sp, ip, r0, lsl #8
    8fa0:	2b5e1a00 	blcs	178f7a8 <_Min_Stack_Size+0x178f3a8>
    8fa4:	86010000 	strhi	r0, [r1], -r0
    8fa8:	0000b804 	andeq	fp, r0, r4, lsl #16
    8fac:	005cf500 	subseq	pc, ip, r0, lsl #10
    8fb0:	86160000 	ldrhi	r0, [r6], -r0
    8fb4:	0100002d 	tsteq	r0, sp, lsr #32
    8fb8:	3d3404a4 	cfldrscc	mvf0, [r4, #-656]!	; 0xfffffd70
    8fbc:	000c0800 	andeq	r0, ip, r0, lsl #16
    8fc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    8fc4:	00000922 	andeq	r0, r0, r2, lsr #18
    8fc8:	00278317 	eoreq	r8, r7, r7, lsl r3
    8fcc:	04a40100 	strteq	r0, [r4], #256	; 0x100
    8fd0:	00000128 	andeq	r0, r0, r8, lsr #2
    8fd4:	16005001 	strne	r5, [r0], -r1
    8fd8:	00002c01 	andeq	r2, r0, r1, lsl #24
    8fdc:	4004b501 	andmi	fp, r4, r1, lsl #10
    8fe0:	0c08003d 	stceq	0, cr0, [r8], {61}	; 0x3d
    8fe4:	01000000 	mrseq	r0, (UNDEF: 0)
    8fe8:	0009479c 	muleq	r9, ip, r7
    8fec:	27831700 	strcs	r1, [r3, r0, lsl #14]
    8ff0:	b5010000 	strlt	r0, [r1, #-0]
    8ff4:	00012804 	andeq	r2, r1, r4, lsl #16
    8ff8:	00500100 	subseq	r0, r0, r0, lsl #2
    8ffc:	002fd816 	eoreq	sp, pc, r6, lsl r8	; <UNPREDICTABLE>
    9000:	04c60100 	strbeq	r0, [r6], #256	; 0x100
    9004:	08003d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip, sp}
    9008:	0000000c 	andeq	r0, r0, ip
    900c:	096c9c01 	stmdbeq	ip!, {r0, sl, fp, ip, pc}^
    9010:	07170000 	ldreq	r0, [r7, -r0]
    9014:	0100002e 	tsteq	r0, lr, lsr #32
    9018:	00b804c6 	adcseq	r0, r8, r6, asr #9
    901c:	50010000 	andpl	r0, r1, r0
    9020:	2d6c1600 	stclcs	6, cr1, [ip, #-0]
    9024:	db010000 	blle	4902c <_Min_Stack_Size+0x48c2c>
    9028:	003d5804 	eorseq	r5, sp, r4, lsl #16
    902c:	00001a08 	andeq	r1, r0, r8, lsl #20
    9030:	a39c0100 	orrsge	r0, ip, #0, 2
    9034:	22000009 	andcs	r0, r0, #9
    9038:	00002db5 			; <UNDEFINED> instruction: 0x00002db5
    903c:	b804db01 	stmdalt	r4, {r0, r8, r9, fp, ip, lr, pc}
    9040:	14000000 	strne	r0, [r0], #-0
    9044:	1a00005d 	bne	91c0 <_Min_Stack_Size+0x8dc0>
    9048:	00002b5e 	andeq	r2, r0, lr, asr fp
    904c:	b804dd01 	stmdalt	r4, {r0, r8, sl, fp, ip, lr, pc}
    9050:	42000000 	andmi	r0, r0, #0
    9054:	0000005d 	andeq	r0, r0, sp, asr r0
    9058:	002ad316 	eoreq	sp, sl, r6, lsl r3
    905c:	04fb0100 	ldrbteq	r0, [fp], #256	; 0x100
    9060:	08003d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip, sp}
    9064:	0000001c 	andeq	r0, r0, ip, lsl r0
    9068:	09da9c01 	ldmibeq	sl, {r0, sl, fp, ip, pc}^
    906c:	6f220000 	svcvs	0x00220000
    9070:	0100002a 	tsteq	r0, sl, lsr #32
    9074:	00b804fb 	ldrshteq	r0, [r8], fp
    9078:	5d6c0000 	stclpl	0, cr0, [ip, #-0]
    907c:	5e1a0000 	cdppl	0, 1, cr0, cr10, cr0, {0}
    9080:	0100002b 	tsteq	r0, fp, lsr #32
    9084:	00b804fd 	ldrshteq	r0, [r8], sp
    9088:	5d9a0000 	ldcpl	0, cr0, [sl]
    908c:	16000000 	strne	r0, [r0], -r0
    9090:	00002bb3 			; <UNDEFINED> instruction: 0x00002bb3
    9094:	90051f01 	andls	r1, r5, r1, lsl #30
    9098:	1808003d 	stmdane	r8, {r0, r2, r3, r4, r5}
    909c:	01000000 	mrseq	r0, (UNDEF: 0)
    90a0:	000a119c 	muleq	sl, ip, r1
    90a4:	2cc62200 	sfmcs	f2, 2, [r6], {0}
    90a8:	1f010000 	svcne	0x00010000
    90ac:	0000b805 	andeq	fp, r0, r5, lsl #16
    90b0:	005dc400 	subseq	ip, sp, r0, lsl #8
    90b4:	2b5e1a00 	blcs	178f8bc <_Min_Stack_Size+0x178f4bc>
    90b8:	21010000 	mrscs	r0, (UNDEF: 1)
    90bc:	0000b805 	andeq	fp, r0, r5, lsl #16
    90c0:	005de500 	subseq	lr, sp, r0, lsl #10
    90c4:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    90c8:	0100002e 	tsteq	r0, lr, lsr #32
    90cc:	3da80543 	cfstr32cc	mvfx0, [r8, #268]!	; 0x10c
    90d0:	00180800 	andseq	r0, r8, r0, lsl #16
    90d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    90d8:	00000a48 	andeq	r0, r0, r8, asr #20
    90dc:	002cdd22 	eoreq	sp, ip, r2, lsr #26
    90e0:	05430100 	strbeq	r0, [r3, #-256]	; 0x100
    90e4:	000000b8 	strheq	r0, [r0], -r8
    90e8:	00005e0f 	andeq	r5, r0, pc, lsl #28
    90ec:	002b5e1a 	eoreq	r5, fp, sl, lsl lr
    90f0:	05450100 	strbeq	r0, [r5, #-256]	; 0x100
    90f4:	000000b8 	strheq	r0, [r0], -r8
    90f8:	00005e30 	andeq	r5, r0, r0, lsr lr
    90fc:	2cf41600 	ldclcs	6, cr1, [r4]
    9100:	64010000 	strvs	r0, [r1], #-0
    9104:	003dc005 	eorseq	ip, sp, r5
    9108:	00001808 	andeq	r1, r0, r8, lsl #16
    910c:	7f9c0100 	svcvc	0x009c0100
    9110:	2200000a 	andcs	r0, r0, #10
    9114:	00002a7e 	andeq	r2, r0, lr, ror sl
    9118:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    911c:	5a000000 	bpl	9124 <_Min_Stack_Size+0x8d24>
    9120:	1a00005e 	bne	92a0 <_Min_Stack_Size+0x8ea0>
    9124:	00002b5e 	andeq	r2, r0, lr, asr fp
    9128:	b8056601 	stmdalt	r5, {r0, r9, sl, sp, lr}
    912c:	7b000000 	blvc	9134 <_Min_Stack_Size+0x8d34>
    9130:	0000005e 	andeq	r0, r0, lr, asr r0
    9134:	002fc316 	eoreq	ip, pc, r6, lsl r3	; <UNPREDICTABLE>
    9138:	05890100 	streq	r0, [r9, #256]	; 0x100
    913c:	08003dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, sp}
    9140:	0000000c 	andeq	r0, r0, ip
    9144:	0aa49c01 	beq	fe930150 <_estack+0xde900150>
    9148:	67170000 	ldrvs	r0, [r7, -r0]
    914c:	0100002e 	tsteq	r0, lr, lsr #32
    9150:	00b80589 	adcseq	r0, r8, r9, lsl #11
    9154:	50010000 	andpl	r0, r1, r0
    9158:	0a371600 	beq	dce960 <_Min_Stack_Size+0xdce560>
    915c:	b4010000 	strlt	r0, [r1], #-0
    9160:	003de405 	eorseq	lr, sp, r5, lsl #8
    9164:	00001a08 	andeq	r1, r0, r8, lsl #20
    9168:	d99c0100 	ldmible	ip, {r8}
    916c:	2200000a 	andcs	r0, r0, #10
    9170:	00002b12 	andeq	r2, r0, r2, lsl fp
    9174:	b805b401 	stmdalt	r5, {r0, sl, ip, sp, pc}
    9178:	a5000000 	strge	r0, [r0, #-0]
    917c:	1700005e 	smlsdne	r0, lr, r0, r0
    9180:	00002783 	andeq	r2, r0, r3, lsl #15
    9184:	2805b401 	stmdacs	r5, {r0, sl, ip, sp, pc}
    9188:	01000001 	tsteq	r0, r1
    918c:	75160051 	ldrvc	r0, [r6, #-81]	; 0x51
    9190:	0100002b 	tsteq	r0, fp, lsr #32
    9194:	3e0005d4 	mcrcc	5, 0, r0, cr0, cr4, {6}
    9198:	001a0800 	andseq	r0, sl, r0, lsl #16
    919c:	9c010000 	stcls	0, cr0, [r1], {-0}
    91a0:	00000b0e 	andeq	r0, r0, lr, lsl #22
    91a4:	002d4222 	eoreq	r4, sp, r2, lsr #4
    91a8:	05d40100 	ldrbeq	r0, [r4, #256]	; 0x100
    91ac:	000000b8 	strheq	r0, [r0], -r8
    91b0:	00005edf 	ldrdeq	r5, [r0], -pc	; <UNPREDICTABLE>
    91b4:	00278317 	eoreq	r8, r7, r7, lsl r3
    91b8:	05d40100 	ldrbeq	r0, [r4, #256]	; 0x100
    91bc:	00000128 	andeq	r0, r0, r8, lsr #2
    91c0:	16005101 	strne	r5, [r0], -r1, lsl #2
    91c4:	000030b8 	strheq	r3, [r0], -r8
    91c8:	1c05f001 	stcne	0, cr15, [r5], {1}
    91cc:	1a08003e 	bne	2092cc <_Min_Stack_Size+0x208ecc>
    91d0:	01000000 	mrseq	r0, (UNDEF: 0)
    91d4:	000b439c 	muleq	fp, ip, r3
    91d8:	2d512200 	lfmcs	f2, 2, [r1, #-0]
    91dc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    91e0:	0000b805 	andeq	fp, r0, r5, lsl #16
    91e4:	005f1900 	subseq	r1, pc, r0, lsl #18
    91e8:	27831700 	strcs	r1, [r3, r0, lsl #14]
    91ec:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    91f0:	00012805 	andeq	r2, r1, r5, lsl #16
    91f4:	00510100 	subseq	r0, r1, r0, lsl #2
    91f8:	00300316 	eorseq	r0, r0, r6, lsl r3
    91fc:	06240100 	strteq	r0, [r4], -r0, lsl #2
    9200:	08003e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip, sp}
    9204:	0000001a 	andeq	r0, r0, sl, lsl r0
    9208:	0b789c01 	bleq	1e30214 <_Min_Stack_Size+0x1e2fe14>
    920c:	67220000 	strvs	r0, [r2, -r0]!
    9210:	0100002c 	tsteq	r0, ip, lsr #32
    9214:	00b80624 	adcseq	r0, r8, r4, lsr #12
    9218:	5f530000 	svcpl	0x00530000
    921c:	83170000 	tsthi	r7, #0
    9220:	01000027 	tsteq	r0, r7, lsr #32
    9224:	01280624 	teqeq	r8, r4, lsr #12
    9228:	51010000 	mrspl	r0, (UNDEF: 1)
    922c:	2f461600 	svccs	0x00461600
    9230:	51010000 	mrspl	r0, (UNDEF: 1)
    9234:	003e5406 	eorseq	r5, lr, r6, lsl #8
    9238:	00001a08 	andeq	r1, r0, r8, lsl #20
    923c:	ad9c0100 	ldfges	f0, [ip]
    9240:	2200000b 	andcs	r0, r0, #11
    9244:	00002fb4 			; <UNDEFINED> instruction: 0x00002fb4
    9248:	b8065101 	stmdalt	r6, {r0, r8, ip, lr}
    924c:	8d000000 	stchi	0, cr0, [r0, #-0]
    9250:	1700005f 	smlsdne	r0, pc, r0, r0	; <UNPREDICTABLE>
    9254:	00002783 	andeq	r2, r0, r3, lsl #15
    9258:	28065101 	stmdacs	r6, {r0, r8, ip, lr}
    925c:	01000001 	tsteq	r0, r1
    9260:	8d160051 	ldchi	0, cr0, [r6, #-324]	; 0xfffffebc
    9264:	01000029 	tsteq	r0, r9, lsr #32
    9268:	3e70067b 	mrccc	6, 3, r0, cr0, cr11, {3}
    926c:	001a0800 	andseq	r0, sl, r0, lsl #16
    9270:	9c010000 	stcls	0, cr0, [r1], {-0}
    9274:	00000be2 	andeq	r0, r0, r2, ror #23
    9278:	002b1222 	eoreq	r1, fp, r2, lsr #4
    927c:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    9280:	000000b8 	strheq	r0, [r0], -r8
    9284:	00005fc7 	andeq	r5, r0, r7, asr #31
    9288:	00278317 	eoreq	r8, r7, r7, lsl r3
    928c:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    9290:	00000128 	andeq	r0, r0, r8, lsr #2
    9294:	16005101 	strne	r5, [r0], -r1, lsl #2
    9298:	00002e86 	andeq	r2, r0, r6, lsl #29
    929c:	8c069801 	stchi	8, cr9, [r6], {1}
    92a0:	1a08003e 	bne	2093a0 <_Min_Stack_Size+0x208fa0>
    92a4:	01000000 	mrseq	r0, (UNDEF: 0)
    92a8:	000c179c 	muleq	ip, ip, r7
    92ac:	2d422200 	sfmcs	f2, 2, [r2, #-0]
    92b0:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    92b4:	0000b806 	andeq	fp, r0, r6, lsl #16
    92b8:	00600100 	rsbeq	r0, r0, r0, lsl #2
    92bc:	27831700 	strcs	r1, [r3, r0, lsl #14]
    92c0:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    92c4:	00012806 	andeq	r2, r1, r6, lsl #16
    92c8:	00510100 	subseq	r0, r1, r0, lsl #2
    92cc:	002b9c16 	eoreq	r9, fp, r6, lsl ip
    92d0:	06b10100 	ldrteq	r0, [r1], r0, lsl #2
    92d4:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
    92d8:	0000001a 	andeq	r0, r0, sl, lsl r0
    92dc:	0c4c9c01 	mcrreq	12, 0, r9, ip, cr1
    92e0:	51220000 	teqpl	r2, r0
    92e4:	0100002d 	tsteq	r0, sp, lsr #32
    92e8:	00b806b1 	ldrhteq	r0, [r8], r1
    92ec:	603b0000 	eorsvs	r0, fp, r0
    92f0:	83170000 	tsthi	r7, #0
    92f4:	01000027 	tsteq	r0, r7, lsr #32
    92f8:	012806b1 			; <UNDEFINED> instruction: 0x012806b1
    92fc:	51010000 	mrspl	r0, (UNDEF: 1)
    9300:	2ab71600 	bcs	fedceb08 <_estack+0xded9eb08>
    9304:	e2010000 	and	r0, r1, #0
    9308:	003ec406 	eorseq	ip, lr, r6, lsl #8
    930c:	00001a08 	andeq	r1, r0, r8, lsl #20
    9310:	819c0100 	orrshi	r0, ip, r0, lsl #2
    9314:	2200000c 	andcs	r0, r0, #12
    9318:	00002c67 	andeq	r2, r0, r7, ror #24
    931c:	b806e201 	stmdalt	r6, {r0, r9, sp, lr, pc}
    9320:	75000000 	strvc	r0, [r0, #-0]
    9324:	17000060 	strne	r0, [r0, -r0, rrx]
    9328:	00002783 	andeq	r2, r0, r3, lsl #15
    932c:	2806e201 	stmdacs	r6, {r0, r9, sp, lr, pc}
    9330:	01000001 	tsteq	r0, r1
    9334:	e1160051 	tst	r6, r1, asr r0
    9338:	0100002d 	tsteq	r0, sp, lsr #32
    933c:	3ee0070b 	cdpcc	7, 14, cr0, cr0, cr11, {0}
    9340:	001a0800 	andseq	r0, sl, r0, lsl #16
    9344:	9c010000 	stcls	0, cr0, [r1], {-0}
    9348:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
    934c:	002fb422 	eoreq	fp, pc, r2, lsr #8
    9350:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    9354:	000000b8 	strheq	r0, [r0], -r8
    9358:	000060af 	andeq	r6, r0, pc, lsr #1
    935c:	00278317 	eoreq	r8, r7, r7, lsl r3
    9360:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    9364:	00000128 	andeq	r0, r0, r8, lsr #2
    9368:	16005101 	strne	r5, [r0], -r1, lsl #2
    936c:	0000309b 	muleq	r0, fp, r0
    9370:	fc073c01 	stc2	12, cr3, [r7], {1}
    9374:	1a08003e 	bne	209474 <_Min_Stack_Size+0x209074>
    9378:	01000000 	mrseq	r0, (UNDEF: 0)
    937c:	000ceb9c 	muleq	ip, ip, fp
    9380:	2b122200 	blcs	491b88 <_Min_Stack_Size+0x491788>
    9384:	3c010000 	stccc	0, cr0, [r1], {-0}
    9388:	0000b807 	andeq	fp, r0, r7, lsl #16
    938c:	0060e900 	rsbeq	lr, r0, r0, lsl #18
    9390:	27831700 	strcs	r1, [r3, r0, lsl #14]
    9394:	3c010000 	stccc	0, cr0, [r1], {-0}
    9398:	00012807 	andeq	r2, r1, r7, lsl #16
    939c:	00510100 	subseq	r0, r1, r0, lsl #2
    93a0:	002d0916 	eoreq	r0, sp, r6, lsl r9
    93a4:	075c0100 	ldrbeq	r0, [ip, -r0, lsl #2]
    93a8:	08003f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, sp}
    93ac:	0000001a 	andeq	r0, r0, sl, lsl r0
    93b0:	0d209c01 	stceq	12, cr9, [r0, #-4]!
    93b4:	42220000 	eormi	r0, r2, #0
    93b8:	0100002d 	tsteq	r0, sp, lsr #32
    93bc:	00b8075c 	adcseq	r0, r8, ip, asr r7
    93c0:	61230000 	teqvs	r3, r0
    93c4:	83170000 	tsthi	r7, #0
    93c8:	01000027 	tsteq	r0, r7, lsr #32
    93cc:	0128075c 	teqeq	r8, ip, asr r7
    93d0:	51010000 	mrspl	r0, (UNDEF: 1)
    93d4:	2f881600 	svccs	0x00881600
    93d8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    93dc:	003f3407 	eorseq	r3, pc, r7, lsl #8
    93e0:	00001a08 	andeq	r1, r0, r8, lsl #20
    93e4:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    93e8:	2200000d 	andcs	r0, r0, #13
    93ec:	00002d51 	andeq	r2, r0, r1, asr sp
    93f0:	b8077801 	stmdalt	r7, {r0, fp, ip, sp, lr}
    93f4:	5d000000 	stcpl	0, cr0, [r0, #-0]
    93f8:	17000061 	strne	r0, [r0, -r1, rrx]
    93fc:	00002783 	andeq	r2, r0, r3, lsl #15
    9400:	28077801 	stmdacs	r7, {r0, fp, ip, sp, lr}
    9404:	01000001 	tsteq	r0, r1
    9408:	9d160051 	ldcls	0, cr0, [r6, #-324]	; 0xfffffebc
    940c:	0100002e 	tsteq	r0, lr, lsr #32
    9410:	3f5007ac 	svccc	0x005007ac
    9414:	001a0800 	andseq	r0, sl, r0, lsl #16
    9418:	9c010000 	stcls	0, cr0, [r1], {-0}
    941c:	00000d8a 	andeq	r0, r0, sl, lsl #27
    9420:	002c6722 	eoreq	r6, ip, r2, lsr #14
    9424:	07ac0100 	streq	r0, [ip, r0, lsl #2]!
    9428:	000000b8 	strheq	r0, [r0], -r8
    942c:	00006197 	muleq	r0, r7, r1
    9430:	00278317 	eoreq	r8, r7, r7, lsl r3
    9434:	07ac0100 	streq	r0, [ip, r0, lsl #2]!
    9438:	00000128 	andeq	r0, r0, r8, lsr #2
    943c:	16005101 	strne	r5, [r0], -r1, lsl #2
    9440:	00002b2c 	andeq	r2, r0, ip, lsr #22
    9444:	6c07d901 	stcvs	9, cr13, [r7], {1}
    9448:	1a08003f 	bne	20954c <_Min_Stack_Size+0x20914c>
    944c:	01000000 	mrseq	r0, (UNDEF: 0)
    9450:	000dbf9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    9454:	2fb42200 	svccs	0x00b42200
    9458:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    945c:	0000b807 	andeq	fp, r0, r7, lsl #16
    9460:	0061d100 	rsbeq	sp, r1, r0, lsl #2
    9464:	27831700 	strcs	r1, [r3, r0, lsl #14]
    9468:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    946c:	00012807 	andeq	r2, r1, r7, lsl #16
    9470:	00510100 	subseq	r0, r1, r0, lsl #2
    9474:	00301a16 	eorseq	r1, r0, r6, lsl sl
    9478:	08070100 	stmdaeq	r7, {r8}
    947c:	08003f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip, sp}
    9480:	0000001a 	andeq	r0, r0, sl, lsl r0
    9484:	0df49c01 	ldcleq	12, cr9, [r4, #4]!
    9488:	57220000 	strpl	r0, [r2, -r0]!
    948c:	0100002b 	tsteq	r0, fp, lsr #32
    9490:	00970807 	addseq	r0, r7, r7, lsl #16
    9494:	620b0000 	andvs	r0, fp, #0
    9498:	83170000 	tsthi	r7, #0
    949c:	01000027 	tsteq	r0, r7, lsr #32
    94a0:	01280807 	teqeq	r8, r7, lsl #16
    94a4:	51010000 	mrspl	r0, (UNDEF: 1)
    94a8:	034f2600 	movteq	r2, #62976	; 0xf600
    94ac:	3fa40000 	svccc	0x00a40000
    94b0:	003c0800 	eorseq	r0, ip, r0, lsl #16
    94b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    94b8:	00000e2c 	andeq	r0, r0, ip, lsr #28
    94bc:	00036020 	andeq	r6, r3, r0, lsr #32
    94c0:	00624500 	rsbeq	r4, r2, r0, lsl #10
    94c4:	036c1e00 	cmneq	ip, #0, 28
    94c8:	627f0000 	rsbsvs	r0, pc, #0
    94cc:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
    94d0:	c7000003 	strgt	r0, [r0, -r3]
    94d4:	1e000062 	cdpne	0, 0, cr0, cr0, cr2, {3}
    94d8:	00000384 	andeq	r0, r0, r4, lsl #7
    94dc:	000062fd 	strdeq	r6, [r0], -sp
    94e0:	2b492700 	blcs	12530e8 <_Min_Stack_Size+0x1252ce8>
    94e4:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    94e8:	003fe008 	eorseq	lr, pc, r8
    94ec:	00001208 	andeq	r1, r0, r8, lsl #4
    94f0:	189c0100 	ldmne	ip, {r8}
    94f4:	00002f78 	andeq	r2, r0, r8, ror pc
    94f8:	06086d01 	streq	r6, [r8], -r1, lsl #26
    94fc:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    9500:	1408003f 	strne	r0, [r8], #-63	; 0x3f
    9504:	01000000 	mrseq	r0, (UNDEF: 0)
    9508:	000e799c 	muleq	lr, ip, r9
    950c:	2b572200 	blcs	15d1d14 <_Min_Stack_Size+0x15d1914>
    9510:	6d010000 	stcvs	0, cr0, [r1, #-0]
    9514:	00009708 	andeq	r9, r0, r8, lsl #14
    9518:	00631d00 	rsbeq	r1, r3, r0, lsl #26
    951c:	29831a00 	stmibcs	r3, {r9, fp, ip}
    9520:	6f010000 	svcvs	0x00010000
    9524:	00010608 	andeq	r0, r1, r8, lsl #12
    9528:	00633e00 	rsbeq	r3, r3, r0, lsl #28
    952c:	f7160000 			; <UNDEFINED> instruction: 0xf7160000
    9530:	0100002a 	tsteq	r0, sl, lsr #32
    9534:	4008088f 	andmi	r0, r8, pc, lsl #17
    9538:	000c0800 	andeq	r0, ip, r0, lsl #16
    953c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9540:	00000e9e 	muleq	r0, lr, lr
    9544:	002b5717 	eoreq	r5, fp, r7, lsl r7
    9548:	088f0100 	stmeq	pc, {r8}	; <UNPREDICTABLE>
    954c:	00000097 	muleq	r0, r7, r0
    9550:	06005001 	streq	r5, [r0], -r1
    9554:	00000097 	muleq	r0, r7, r0
    9558:	00000eae 	andeq	r0, r0, lr, lsr #29
    955c:	0000c307 	andeq	ip, r0, r7, lsl #6
    9560:	28000f00 	stmdacs	r0, {r8, r9, sl, fp}
    9564:	00002ef3 	strdeq	r2, [r0], -r3
    9568:	0ebf8d01 	cdpeq	13, 11, cr8, cr15, cr1, {0}
    956c:	03050000 	movweq	r0, #20480	; 0x5000
    9570:	2000001c 	andcs	r0, r0, ip, lsl r0
    9574:	000ec429 	andeq	ip, lr, r9, lsr #8
    9578:	0e9e0500 	cdpeq	5, 9, cr0, cr14, cr0, {0}
    957c:	9d2a0000 	stcls	0, cr0, [sl, #-0]
    9580:	06000003 	streq	r0, [r0], -r3
    9584:	00df06a7 	sbcseq	r0, pc, r7, lsr #13
    9588:	ad000000 	stcge	0, cr0, [r0, #-0]
    958c:	0400000b 	streq	r0, [r0], #-11
    9590:	001c7500 	andseq	r7, ip, r0, lsl #10
    9594:	84010400 	strhi	r0, [r1], #-1024	; 0x400
    9598:	01000002 	tsteq	r0, r2
    959c:	000030de 	ldrdeq	r3, [r0], -lr
    95a0:	00000101 	andeq	r0, r0, r1, lsl #2
    95a4:	00001048 	andeq	r1, r0, r8, asr #32
    95a8:	00000000 	andeq	r0, r0, r0
    95ac:	00003101 	andeq	r3, r0, r1, lsl #2
    95b0:	50060102 	andpl	r0, r6, r2, lsl #2
    95b4:	03000001 	movweq	r0, #1
    95b8:	000000f2 	strdeq	r0, [r0], -r2
    95bc:	00371c02 	eorseq	r1, r7, r2, lsl #24
    95c0:	01020000 	mrseq	r0, (UNDEF: 2)
    95c4:	00014e08 	andeq	r4, r1, r8, lsl #28
    95c8:	05020200 	streq	r0, [r2, #-512]	; 0x200
    95cc:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    95d0:	00005c03 	andeq	r5, r0, r3, lsl #24
    95d4:	50260200 	eorpl	r0, r6, r0, lsl #4
    95d8:	02000000 	andeq	r0, r0, #0
    95dc:	01e50702 	mvneq	r0, r2, lsl #14
    95e0:	77030000 	strvc	r0, [r3, -r0]
    95e4:	02000003 	andeq	r0, r0, #3
    95e8:	00006237 	andeq	r6, r0, r7, lsr r2
    95ec:	05040200 	streq	r0, [r4, #-512]	; 0x200
    95f0:	000000c5 	andeq	r0, r0, r5, asr #1
    95f4:	00005103 	andeq	r5, r0, r3, lsl #2
    95f8:	74380200 	ldrtvc	r0, [r8], #-512	; 0x200
    95fc:	02000000 	andeq	r0, r0, #0
    9600:	01780704 	cmneq	r8, r4, lsl #14
    9604:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    9608:	0000c005 	andeq	ip, r0, r5
    960c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    9610:	00000173 	andeq	r0, r0, r3, ror r1
    9614:	69050404 	stmdbvs	r5, {r2, sl}
    9618:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    961c:	017d0704 	cmneq	sp, r4, lsl #14
    9620:	f4030000 	vst4.8	{d0-d3}, [r3], r0
    9624:	03000000 	movweq	r0, #0
    9628:	00002c2a 	andeq	r2, r0, sl, lsr #24
    962c:	005e0300 	subseq	r0, lr, r0, lsl #6
    9630:	36030000 	strcc	r0, [r3], -r0
    9634:	00000045 	andeq	r0, r0, r5, asr #32
    9638:	00037903 	andeq	r7, r3, r3, lsl #18
    963c:	57410300 	strbpl	r0, [r1, -r0, lsl #6]
    9640:	03000000 	movweq	r0, #0
    9644:	00000053 	andeq	r0, r0, r3, asr r0
    9648:	00694203 	rsbeq	r4, r9, r3, lsl #4
    964c:	04020000 	streq	r0, [r2], #-0
    9650:	00002c07 	andeq	r2, r0, r7, lsl #24
    9654:	00a20500 	adceq	r0, r2, r0, lsl #10
    9658:	ad050000 	stcge	0, cr0, [r5, #-0]
    965c:	06000000 	streq	r0, [r0], -r0
    9660:	01f70401 	mvnseq	r0, r1, lsl #8
    9664:	000000ea 	andeq	r0, r0, sl, ror #1
    9668:	0028e407 	eoreq	lr, r8, r7, lsl #8
    966c:	53080000 	movwpl	r0, #32768	; 0x8000
    9670:	01005445 	tsteq	r0, r5, asr #8
    9674:	3d290900 	stccc	9, cr0, [r9, #-0]
    9678:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    967c:	0000d401 	andeq	sp, r0, r1, lsl #8
    9680:	3ca00900 	stccc	9, cr0, [r0]
    9684:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    9688:	0000d401 	andeq	sp, r0, r1, lsl #8
    968c:	04010600 	streq	r0, [r1], #-1536	; 0x600
    9690:	011801f9 			; <UNDEFINED> instruction: 0x011801f9
    9694:	88070000 	stmdahi	r7, {}	; <UNPREDICTABLE>
    9698:	00000004 	andeq	r0, r0, r4
    969c:	0005c007 	andeq	ip, r5, r7
    96a0:	09000100 	stmdbeq	r0, {r8}
    96a4:	0000092a 	andeq	r0, r0, sl, lsr #18
    96a8:	0201f904 	andeq	pc, r1, #4, 18	; 0x10000
    96ac:	0a000001 	beq	96b8 <_Min_Stack_Size+0x92b8>
    96b0:	0526041c 	streq	r0, [r6, #-1052]!	; 0x41c
    96b4:	000001e2 	andeq	r0, r0, r2, ror #3
    96b8:	0052530b 	subseq	r5, r2, fp, lsl #6
    96bc:	ca052804 	bgt	1536d4 <_Min_Stack_Size+0x1532d4>
    96c0:	00000000 	andeq	r0, r0, r0
    96c4:	00023c0c 	andeq	r3, r2, ip, lsl #24
    96c8:	05290400 	streq	r0, [r9, #-1024]!	; 0x400
    96cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    96d0:	52440b02 	subpl	r0, r4, #2048	; 0x800
    96d4:	052a0400 	streq	r0, [sl, #-1024]!	; 0x400
    96d8:	000000ca 	andeq	r0, r0, sl, asr #1
    96dc:	02460c04 	subeq	r0, r6, #4, 24	; 0x400
    96e0:	2b040000 	blcs	1096e8 <_Min_Stack_Size+0x1092e8>
    96e4:	0000a205 	andeq	sl, r0, r5, lsl #4
    96e8:	420b0600 	andmi	r0, fp, #0, 12
    96ec:	04005252 	streq	r5, [r0], #-594	; 0x252
    96f0:	00ca052c 	sbceq	r0, sl, ip, lsr #10
    96f4:	0c080000 	stceq	0, cr0, [r8], {-0}
    96f8:	00000250 	andeq	r0, r0, r0, asr r2
    96fc:	a2052d04 	andge	r2, r5, #4, 26	; 0x100
    9700:	0a000000 	beq	9708 <_Min_Stack_Size+0x9308>
    9704:	3152430b 	cmpcc	r2, fp, lsl #6
    9708:	052e0400 	streq	r0, [lr, #-1024]!	; 0x400
    970c:	000000ca 	andeq	r0, r0, sl, asr #1
    9710:	00900c0c 	addseq	r0, r0, ip, lsl #24
    9714:	2f040000 	svccs	0x00040000
    9718:	0000a205 	andeq	sl, r0, r5, lsl #4
    971c:	430b0e00 	movwmi	r0, #48640	; 0xbe00
    9720:	04003252 	streq	r3, [r0], #-594	; 0x252
    9724:	00ca0530 	sbceq	r0, sl, r0, lsr r5
    9728:	0c100000 	ldceq	0, cr0, [r0], {-0}
    972c:	00000266 	andeq	r0, r0, r6, ror #4
    9730:	a2053104 	andge	r3, r5, #4, 2
    9734:	12000000 	andne	r0, r0, #0
    9738:	3352430b 	cmpcc	r2, #738197504	; 0x2c000000
    973c:	05320400 	ldreq	r0, [r2, #-1024]!	; 0x400
    9740:	000000ca 	andeq	r0, r0, sl, asr #1
    9744:	02700c14 	rsbseq	r0, r0, #20, 24	; 0x1400
    9748:	33040000 	movwcc	r0, #16384	; 0x4000
    974c:	0000a205 	andeq	sl, r0, r5, lsl #4
    9750:	370c1600 	strcc	r1, [ip, -r0, lsl #12]
    9754:	04000031 	streq	r0, [r0], #-49	; 0x31
    9758:	00ca0534 	sbceq	r0, sl, r4, lsr r5
    975c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    9760:	0000027a 	andeq	r0, r0, sl, ror r2
    9764:	a2053504 	andge	r3, r5, #4, 10	; 0x1000000
    9768:	1a000000 	bne	9770 <_Min_Stack_Size+0x9370>
    976c:	318d0900 	orrcc	r0, sp, r0, lsl #18
    9770:	36040000 	strcc	r0, [r4], -r0
    9774:	00012405 	andeq	r2, r1, r5, lsl #8
    9778:	05100d00 	ldreq	r0, [r0, #-3328]	; 0xd00
    977c:	00022730 	andeq	r2, r2, r0, lsr r7
    9780:	2a970e00 	bcs	fe5ccf88 <_estack+0xde59cf88>
    9784:	32050000 	andcc	r0, r5, #0
    9788:	000000b8 	strheq	r0, [r0], -r8
    978c:	2c580e00 	mrrccs	14, 0, r0, r8, cr0
    9790:	33050000 	movwcc	r0, #20480	; 0x5000
    9794:	000000b8 	strheq	r0, [r0], -r8
    9798:	2ee30e04 	cdpcs	14, 14, cr0, cr3, cr4, {0}
    979c:	34050000 	strcc	r0, [r5], #-0
    97a0:	000000b8 	strheq	r0, [r0], -r8
    97a4:	2b650e08 	blcs	194cfcc <_Min_Stack_Size+0x194cbcc>
    97a8:	35050000 	strcc	r0, [r5, #-0]
    97ac:	000000b8 	strheq	r0, [r0], -r8
    97b0:	8903000c 	stmdbhi	r3, {r2, r3}
    97b4:	05000030 	streq	r0, [r0, #-48]	; 0x30
    97b8:	0001ee36 	andeq	lr, r1, r6, lsr lr
    97bc:	06100d00 	ldreq	r0, [r0], -r0, lsl #26
    97c0:	00028336 	andeq	r8, r2, r6, lsr r3
    97c4:	321c0e00 	andscc	r0, ip, #0, 28
    97c8:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
    97cc:	000000b8 	strheq	r0, [r0], -r8
    97d0:	31f00e00 	mvnscc	r0, r0, lsl #28
    97d4:	3e060000 	cdpcc	0, 0, cr0, cr6, cr0, {0}
    97d8:	000000a2 	andeq	r0, r0, r2, lsr #1
    97dc:	319b0e04 	orrscc	r0, fp, r4, lsl #28
    97e0:	41060000 	mrsmi	r0, (UNDEF: 6)
    97e4:	000000a2 	andeq	r0, r0, r2, lsr #1
    97e8:	32ba0e06 	adcscc	r0, sl, #6, 28	; 0x60
    97ec:	44060000 	strmi	r0, [r6], #-0
    97f0:	000000a2 	andeq	r0, r0, r2, lsr #1
    97f4:	33a40e08 			; <UNDEFINED> instruction: 0x33a40e08
    97f8:	4b060000 	blmi	189800 <_Min_Stack_Size+0x189400>
    97fc:	000000a2 	andeq	r0, r0, r2, lsr #1
    9800:	33770e0a 	cmncc	r7, #10, 28	; 0xa0
    9804:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
    9808:	000000a2 	andeq	r0, r0, r2, lsr #1
    980c:	2c03000c 	stccs	0, cr0, [r3], {12}
    9810:	06000033 			; <UNDEFINED> instruction: 0x06000033
    9814:	00023251 	andeq	r3, r2, r1, asr r2
    9818:	06080d00 	streq	r0, [r8], -r0, lsl #26
    981c:	0002c757 	andeq	ip, r2, r7, asr r7
    9820:	340b0e00 	strcc	r0, [fp], #-3584	; 0xe00
    9824:	5a060000 	bpl	18982c <_Min_Stack_Size+0x18942c>
    9828:	000000a2 	andeq	r0, r0, r2, lsr #1
    982c:	34dc0e00 	ldrbcc	r0, [ip], #3584	; 0xe00
    9830:	5d060000 	stcpl	0, cr0, [r6, #-0]
    9834:	000000a2 	andeq	r0, r0, r2, lsr #1
    9838:	312c0e02 	teqcc	ip, r2, lsl #28
    983c:	60060000 	andvs	r0, r6, r0
    9840:	000000a2 	andeq	r0, r0, r2, lsr #1
    9844:	320e0e04 	andcc	r0, lr, #4, 28	; 0x40
    9848:	63060000 	movwvs	r0, #24576	; 0x6000
    984c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9850:	aa030006 	bge	c9870 <_Min_Stack_Size+0xc9470>
    9854:	06000031 			; <UNDEFINED> instruction: 0x06000031
    9858:	00028e66 	andeq	r8, r2, r6, ror #28
    985c:	32970f00 	addscc	r0, r7, #0, 30
    9860:	bb010000 	bllt	49868 <_Min_Stack_Size+0x49468>
    9864:	08004014 	stmdaeq	r0, {r2, r4, lr}
    9868:	0000011c 	andeq	r0, r0, ip, lsl r1
    986c:	048f9c01 	streq	r9, [pc], #3073	; 9874 <_Min_Stack_Size+0x9474>
    9870:	5a100000 	bpl	409878 <_Min_Stack_Size+0x409478>
    9874:	01000033 	tsteq	r0, r3, lsr r0
    9878:	00048fbb 			; <UNDEFINED> instruction: 0x00048fbb
    987c:	00637d00 	rsbeq	r7, r3, r0, lsl #26
    9880:	40821100 	addmi	r1, r2, r0, lsl #2
    9884:	0b6a0800 	bleq	1a8b88c <_Min_Stack_Size+0x1a8b48c>
    9888:	03110000 	tsteq	r1, #0
    988c:	01120000 	tsteq	r2, r0
    9890:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    9894:	40045001 	andmi	r5, r4, r1
    9898:	001f244b 	andseq	r2, pc, fp, asr #8
    989c:	00409013 	subeq	r9, r0, r3, lsl r0
    98a0:	000b6a08 	andeq	r6, fp, r8, lsl #20
    98a4:	00032c00 	andeq	r2, r3, r0, lsl #24
    98a8:	51011200 	mrspl	r1, R9_usr
    98ac:	01123001 	tsteq	r2, r1
    98b0:	4b400450 	blmi	100a9f8 <_Min_Stack_Size+0x100a5f8>
    98b4:	11001f24 	tstne	r0, r4, lsr #30
    98b8:	08004098 	stmdaeq	r0, {r3, r4, r7, lr}
    98bc:	00000b81 	andeq	r0, r0, r1, lsl #23
    98c0:	00000344 	andeq	r0, r0, r4, asr #6
    98c4:	01510112 	cmpeq	r1, r2, lsl r1
    98c8:	50011231 	andpl	r1, r1, r1, lsr r2
    98cc:	13004001 	movwne	r4, #1
    98d0:	080040a4 	stmdaeq	r0, {r2, r5, r7, lr}
    98d4:	00000b81 	andeq	r0, r0, r1, lsl #23
    98d8:	0000035c 	andeq	r0, r0, ip, asr r3
    98dc:	01510112 	cmpeq	r1, r2, lsl r1
    98e0:	50011230 	andpl	r1, r1, r0, lsr r2
    98e4:	11004001 	tstne	r0, r1
    98e8:	080040ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, lr}
    98ec:	00000b6a 	andeq	r0, r0, sl, ror #22
    98f0:	00000376 	andeq	r0, r0, r6, ror r3
    98f4:	01510112 	cmpeq	r1, r2, lsl r1
    98f8:	50011231 	andpl	r1, r1, r1, lsr r2
    98fc:	243d4003 	ldrtcs	r4, [sp], #-3
    9900:	40bc1300 	adcsmi	r1, ip, r0, lsl #6
    9904:	0b6a0800 	bleq	1a8b90c <_Min_Stack_Size+0x1a8b50c>
    9908:	03900000 	orrseq	r0, r0, #0
    990c:	01120000 	tsteq	r2, r0
    9910:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    9914:	40035001 	andmi	r5, r3, r1
    9918:	1100243d 	tstne	r0, sp, lsr r4
    991c:	080040c6 	stmdaeq	r0, {r1, r2, r6, r7, lr}
    9920:	00000b6a 	andeq	r0, r0, sl, ror #22
    9924:	000003aa 	andeq	r0, r0, sl, lsr #7
    9928:	01510112 	cmpeq	r1, r2, lsl r1
    992c:	50011231 	andpl	r1, r1, r1, lsr r2
    9930:	243e4003 	ldrtcs	r4, [lr], #-3
    9934:	40d41300 	sbcsmi	r1, r4, r0, lsl #6
    9938:	0b6a0800 	bleq	1a8b940 <_Min_Stack_Size+0x1a8b540>
    993c:	03c40000 	biceq	r0, r4, #0
    9940:	01120000 	tsteq	r2, r0
    9944:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    9948:	40035001 	andmi	r5, r3, r1
    994c:	1100243e 	tstne	r0, lr, lsr r4
    9950:	080040de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, lr}
    9954:	00000b6a 	andeq	r0, r0, sl, ror #22
    9958:	000003de 	ldrdeq	r0, [r0], -lr
    995c:	01510112 	cmpeq	r1, r2, lsl r1
    9960:	50011231 	andpl	r1, r1, r1, lsr r2
    9964:	243f4003 	ldrtcs	r4, [pc], #-3	; 996c <_Min_Stack_Size+0x956c>
    9968:	40ec1300 	rscmi	r1, ip, r0, lsl #6
    996c:	0b6a0800 	bleq	1a8b974 <_Min_Stack_Size+0x1a8b574>
    9970:	03f80000 	mvnseq	r0, #0
    9974:	01120000 	tsteq	r2, r0
    9978:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    997c:	40035001 	andmi	r5, r3, r1
    9980:	1100243f 	tstne	r0, pc, lsr r4
    9984:	080040f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, lr}
    9988:	00000b6a 	andeq	r0, r0, sl, ror #22
    998c:	00000412 	andeq	r0, r0, r2, lsl r4
    9990:	01510112 	cmpeq	r1, r2, lsl r1
    9994:	50011231 	andpl	r1, r1, r1, lsr r2
    9998:	24404003 	strbcs	r4, [r0], #-3
    999c:	41041300 	mrsmi	r1, LR_abt
    99a0:	0b6a0800 	bleq	1a8b9a8 <_Min_Stack_Size+0x1a8b5a8>
    99a4:	042c0000 	strteq	r0, [ip], #-0
    99a8:	01120000 	tsteq	r2, r0
    99ac:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    99b0:	40035001 	andmi	r5, r3, r1
    99b4:	11002440 	tstne	r0, r0, asr #8
    99b8:	0800410c 	stmdaeq	r0, {r2, r3, r8, lr}
    99bc:	00000b81 	andeq	r0, r0, r1, lsl #23
    99c0:	00000445 	andeq	r0, r0, r5, asr #8
    99c4:	01510112 	cmpeq	r1, r2, lsl r1
    99c8:	50011231 	andpl	r1, r1, r1, lsr r2
    99cc:	00200802 	eoreq	r0, r0, r2, lsl #16
    99d0:	00411813 	subeq	r1, r1, r3, lsl r8
    99d4:	000b8108 	andeq	r8, fp, r8, lsl #2
    99d8:	00045e00 	andeq	r5, r4, r0, lsl #28
    99dc:	51011200 	mrspl	r1, R9_usr
    99e0:	01123001 	tsteq	r2, r1
    99e4:	20080250 	andcs	r0, r8, r0, asr r2
    99e8:	41221100 	teqmi	r2, r0, lsl #2
    99ec:	0b6a0800 	bleq	1a8b9f4 <_Min_Stack_Size+0x1a8b5f4>
    99f0:	04780000 	ldrbteq	r0, [r8], #-0
    99f4:	01120000 	tsteq	r2, r0
    99f8:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    99fc:	40035001 	andmi	r5, r3, r1
    9a00:	1400244a 	strne	r2, [r0], #-1098	; 0x44a
    9a04:	08004130 	stmdaeq	r0, {r4, r5, r8, lr}
    9a08:	00000b6a 	andeq	r0, r0, sl, ror #22
    9a0c:	01510112 	cmpeq	r1, r2, lsl r1
    9a10:	50011230 	andpl	r1, r1, r0, lsr r2
    9a14:	244a4003 	strbcs	r4, [sl], #-3
    9a18:	04150000 	ldreq	r0, [r5], #-0
    9a1c:	000001e2 	andeq	r0, r0, r2, ror #3
    9a20:	0031670f 	eorseq	r6, r1, pc, lsl #14
    9a24:	30f60100 	rscscc	r0, r6, r0, lsl #2
    9a28:	c8080041 	stmdagt	r8, {r0, r6}
    9a2c:	01000000 	mrseq	r0, (UNDEF: 0)
    9a30:	0005239c 	muleq	r5, ip, r3
    9a34:	335a1000 	cmpcc	sl, #0
    9a38:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    9a3c:	0000048f 	andeq	r0, r0, pc, lsl #9
    9a40:	0000644d 	andeq	r6, r0, sp, asr #8
    9a44:	00346210 	eorseq	r6, r4, r0, lsl r2
    9a48:	23f60100 	mvnscs	r0, #0, 2
    9a4c:	6b000005 	blvs	9a68 <_Min_Stack_Size+0x9668>
    9a50:	16000064 	strne	r0, [r0], -r4, rrx
    9a54:	00002b5e 	andeq	r2, r0, lr, asr fp
    9a58:	00b8f801 	adcseq	pc, r8, r1, lsl #16
    9a5c:	64970000 	ldrvs	r0, [r7], #0
    9a60:	3a160000 	bcc	589a68 <_Min_Stack_Size+0x589668>
    9a64:	01000032 	tsteq	r0, r2, lsr r0
    9a68:	0000b8f8 	strdeq	fp, [r0], -r8
    9a6c:	00653900 	rsbeq	r3, r5, r0, lsl #18
    9a70:	30cf1600 	sbccc	r1, pc, r0, lsl #12
    9a74:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    9a78:	000000b8 	strheq	r0, [r0], -r8
    9a7c:	00006558 	andeq	r6, r0, r8, asr r5
    9a80:	00342516 	eorseq	r2, r4, r6, lsl r5
    9a84:	b8fa0100 	ldmlt	sl!, {r8}^
    9a88:	77000000 	strvc	r0, [r0, -r0]
    9a8c:	17000065 	strne	r0, [r0, -r5, rrx]
    9a90:	00003473 	andeq	r3, r0, r3, ror r4
    9a94:	0227fb01 	eoreq	pc, r7, #1024	; 0x400
    9a98:	91020000 	mrsls	r0, (UNDEF: 2)
    9a9c:	417e1858 	cmnmi	lr, r8, asr r8
    9aa0:	0b980800 	bleq	fe60baa8 <_estack+0xde5dbaa8>
    9aa4:	01120000 	tsteq	r2, r0
    9aa8:	007d0250 	rsbseq	r0, sp, r0, asr r2
    9aac:	04150000 	ldreq	r0, [r5], #-0
    9ab0:	00000283 	andeq	r0, r0, r3, lsl #5
    9ab4:	0034bb19 	eorseq	fp, r4, r9, lsl fp
    9ab8:	01670100 	cmneq	r7, r0, lsl #2
    9abc:	080041f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, lr}
    9ac0:	00000016 	andeq	r0, r0, r6, lsl r0
    9ac4:	054e9c01 	strbeq	r9, [lr, #-3073]	; 0xc01
    9ac8:	621a0000 	andsvs	r0, sl, #0
    9acc:	01000034 	tsteq	r0, r4, lsr r0
    9ad0:	05230167 	streq	r0, [r3, #-359]!	; 0x167
    9ad4:	50010000 	andpl	r0, r1, r0
    9ad8:	34841900 	strcc	r1, [r4], #2304	; 0x900
    9adc:	7b010000 	blvc	49ae4 <_Min_Stack_Size+0x496e4>
    9ae0:	00421001 	subeq	r1, r2, r1
    9ae4:	00002408 	andeq	r2, r0, r8, lsl #8
    9ae8:	939c0100 	orrsls	r0, ip, #0, 2
    9aec:	1a000005 	bne	9b08 <_Min_Stack_Size+0x9708>
    9af0:	0000335a 	andeq	r3, r0, sl, asr r3
    9af4:	8f017b01 	svchi	0x00017b01
    9af8:	01000004 	tsteq	r0, r4
    9afc:	32a41b50 	adccc	r1, r4, #80, 22	; 0x14000
    9b00:	7b010000 	blvc	49b08 <_Min_Stack_Size+0x49708>
    9b04:	00059301 	andeq	r9, r5, r1, lsl #6
    9b08:	00659600 	rsbeq	r9, r5, r0, lsl #12
    9b0c:	2b5e1c00 	blcs	1790b14 <_Min_Stack_Size+0x1790714>
    9b10:	7d010000 	stcvc	0, cr0, [r1, #-0]
    9b14:	0000b801 	andeq	fp, r0, r1, lsl #16
    9b18:	0065b700 	rsbeq	fp, r5, r0, lsl #14
    9b1c:	04150000 	ldreq	r0, [r5], #-0
    9b20:	000002c7 	andeq	r0, r0, r7, asr #5
    9b24:	0032c719 	eorseq	ip, r2, r9, lsl r7
    9b28:	019a0100 	orrseq	r0, sl, r0, lsl #2
    9b2c:	08004234 	stmdaeq	r0, {r2, r4, r5, r9, lr}
    9b30:	0000000c 	andeq	r0, r0, ip
    9b34:	05be9c01 	ldreq	r9, [lr, #3073]!	; 0xc01
    9b38:	a41a0000 	ldrge	r0, [sl], #-0
    9b3c:	01000032 	tsteq	r0, r2, lsr r0
    9b40:	0593019a 	ldreq	r0, [r3, #410]	; 0x19a
    9b44:	50010000 	andpl	r0, r1, r0
    9b48:	31c11900 	biccc	r1, r1, r0, lsl #18
    9b4c:	ab010000 	blge	49b54 <_Min_Stack_Size+0x49754>
    9b50:	00424001 	subeq	r4, r2, r1
    9b54:	00001a08 	andeq	r1, r0, r8, lsl #20
    9b58:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    9b5c:	1a000005 	bne	9b78 <_Min_Stack_Size+0x9778>
    9b60:	0000335a 	andeq	r3, r0, sl, asr r3
    9b64:	8f01ab01 	svchi	0x0001ab01
    9b68:	01000004 	tsteq	r0, r4
    9b6c:	27831a50 			; <UNDEFINED> instruction: 0x27831a50
    9b70:	ab010000 	blge	49b78 <_Min_Stack_Size+0x49778>
    9b74:	00011801 	andeq	r1, r1, r1, lsl #16
    9b78:	00510100 	subseq	r0, r1, r0, lsl #2
    9b7c:	00315419 	eorseq	r5, r1, r9, lsl r4
    9b80:	01c50100 	biceq	r0, r5, r0, lsl #2
    9b84:	0800425c 	stmdaeq	r0, {r2, r3, r4, r6, r9, lr}
    9b88:	00000012 	andeq	r0, r0, r2, lsl r0
    9b8c:	06269c01 	strteq	r9, [r6], -r1, lsl #24
    9b90:	5a1a0000 	bpl	689b98 <_Min_Stack_Size+0x689798>
    9b94:	01000033 	tsteq	r0, r3, lsr r0
    9b98:	048f01c5 	streq	r0, [pc], #453	; 9ba0 <_Min_Stack_Size+0x97a0>
    9b9c:	50010000 	andpl	r0, r1, r0
    9ba0:	0034cc1b 	eorseq	ip, r4, fp, lsl ip
    9ba4:	01c50100 	biceq	r0, r5, r0, lsl #2
    9ba8:	00000097 	muleq	r0, r7, r0
    9bac:	0000660b 	andeq	r6, r0, fp, lsl #12
    9bb0:	33c41900 	biccc	r1, r4, #0, 18
    9bb4:	da010000 	ble	49bbc <_Min_Stack_Size+0x497bc>
    9bb8:	00427001 	subeq	r7, r2, r1
    9bbc:	00001a08 	andeq	r1, r0, r8, lsl #20
    9bc0:	599c0100 	ldmibpl	ip, {r8}
    9bc4:	1a000006 	bne	9be4 <_Min_Stack_Size+0x97e4>
    9bc8:	0000335a 	andeq	r3, r0, sl, asr r3
    9bcc:	8f01da01 	svchi	0x0001da01
    9bd0:	01000004 	tsteq	r0, r4
    9bd4:	27831a50 			; <UNDEFINED> instruction: 0x27831a50
    9bd8:	da010000 	ble	49be0 <_Min_Stack_Size+0x497e0>
    9bdc:	00011801 	andeq	r1, r1, r1, lsl #16
    9be0:	00510100 	subseq	r0, r1, r0, lsl #2
    9be4:	00336119 	eorseq	r6, r3, r9, lsl r1
    9be8:	01f40100 	mvnseq	r0, r0, lsl #2
    9bec:	0800428c 	stmdaeq	r0, {r2, r3, r7, r9, lr}
    9bf0:	0000001a 	andeq	r0, r0, sl, lsl r0
    9bf4:	068c9c01 	streq	r9, [ip], r1, lsl #24
    9bf8:	5a1a0000 	bpl	689c00 <_Min_Stack_Size+0x689800>
    9bfc:	01000033 	tsteq	r0, r3, lsr r0
    9c00:	048f01f4 	streq	r0, [pc], #500	; 9c08 <_Min_Stack_Size+0x9808>
    9c04:	50010000 	andpl	r0, r1, r0
    9c08:	0027831a 	eoreq	r8, r7, sl, lsl r3
    9c0c:	01f40100 	mvnseq	r0, r0, lsl #2
    9c10:	00000118 	andeq	r0, r0, r8, lsl r1
    9c14:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    9c18:	000031cb 	andeq	r3, r0, fp, asr #3
    9c1c:	a8022d01 	stmdage	r2, {r0, r8, sl, fp, sp}
    9c20:	08080042 	stmdaeq	r8, {r1, r6}
    9c24:	01000000 	mrseq	r0, (UNDEF: 0)
    9c28:	0006c19c 	muleq	r6, ip, r1
    9c2c:	335a1a00 	cmpcc	sl, #0, 20
    9c30:	2d010000 	stccs	0, cr0, [r1, #-0]
    9c34:	00048f02 	andeq	r8, r4, r2, lsl #30
    9c38:	1b500100 	blne	140a040 <_Min_Stack_Size+0x1409c40>
    9c3c:	00003728 	andeq	r3, r0, r8, lsr #14
    9c40:	a2022d01 	andge	r2, r2, #1, 26	; 0x40
    9c44:	2c000000 	stccs	0, cr0, [r0], {-0}
    9c48:	00000066 	andeq	r0, r0, r6, rrx
    9c4c:	0034ee1d 	eorseq	lr, r4, sp, lsl lr
    9c50:	023d0100 	eorseq	r0, sp, #0, 2
    9c54:	000000a2 	andeq	r0, r0, r2, lsr #1
    9c58:	080042b0 	stmdaeq	r0, {r4, r5, r7, r9, lr}
    9c5c:	00000008 	andeq	r0, r0, r8
    9c60:	06ec9c01 	strbteq	r9, [ip], r1, lsl #24
    9c64:	5a1b0000 	bpl	6c9c6c <_Min_Stack_Size+0x6c986c>
    9c68:	01000033 	tsteq	r0, r3, lsr r0
    9c6c:	048f023d 	streq	r0, [pc], #573	; 9c74 <_Min_Stack_Size+0x9874>
    9c70:	664d0000 	strbvs	r0, [sp], -r0
    9c74:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    9c78:	000032f8 	strdeq	r3, [r0], -r8
    9c7c:	b8027101 	stmdalt	r2, {r0, r8, ip, sp, lr}
    9c80:	16080042 	strne	r0, [r8], -r2, asr #32
    9c84:	01000000 	mrseq	r0, (UNDEF: 0)
    9c88:	0007219c 	muleq	r7, ip, r1
    9c8c:	335a1a00 	cmpcc	sl, #0, 20
    9c90:	71010000 	mrsvc	r0, (UNDEF: 1)
    9c94:	00048f02 	andeq	r8, r4, r2, lsl #30
    9c98:	1b500100 	blne	140a0a0 <_Min_Stack_Size+0x1409ca0>
    9c9c:	000033af 	andeq	r3, r0, pc, lsr #7
    9ca0:	97027101 	strls	r7, [r2, -r1, lsl #2]
    9ca4:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    9ca8:	00000066 	andeq	r0, r0, r6, rrx
    9cac:	00313c19 	eorseq	r3, r1, r9, lsl ip
    9cb0:	02850100 	addeq	r0, r5, #0, 2
    9cb4:	080042d0 	stmdaeq	r0, {r4, r6, r7, r9, lr}
    9cb8:	0000001a 	andeq	r0, r0, sl, lsl r0
    9cbc:	07549c01 	ldrbeq	r9, [r4, -r1, lsl #24]
    9cc0:	5a1a0000 	bpl	689cc8 <_Min_Stack_Size+0x6898c8>
    9cc4:	01000033 	tsteq	r0, r3, lsr r0
    9cc8:	048f0285 	streq	r0, [pc], #645	; 9cd0 <_Min_Stack_Size+0x98d0>
    9ccc:	50010000 	andpl	r0, r1, r0
    9cd0:	0027831a 	eoreq	r8, r7, sl, lsl r3
    9cd4:	02850100 	addeq	r0, r5, #0, 2
    9cd8:	00000118 	andeq	r0, r0, r8, lsl r1
    9cdc:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    9ce0:	00003494 	muleq	r0, r4, r4
    9ce4:	ec02a001 	stc	0, cr10, [r2], {1}
    9ce8:	16080042 	strne	r0, [r8], -r2, asr #32
    9cec:	01000000 	mrseq	r0, (UNDEF: 0)
    9cf0:	0007899c 	muleq	r7, ip, r9
    9cf4:	335a1a00 	cmpcc	sl, #0, 20
    9cf8:	a0010000 	andge	r0, r1, r0
    9cfc:	00048f02 	andeq	r8, r4, r2, lsl #30
    9d00:	1b500100 	blne	140a108 <_Min_Stack_Size+0x1409d08>
    9d04:	000031e3 	andeq	r3, r0, r3, ror #3
    9d08:	a202a001 	andge	sl, r2, #1
    9d0c:	8f000000 	svchi	0x00000000
    9d10:	00000066 	andeq	r0, r0, r6, rrx
    9d14:	00326b19 	eorseq	r6, r2, r9, lsl fp
    9d18:	02e50100 	rsceq	r0, r5, #0, 2
    9d1c:	08004304 	stmdaeq	r0, {r2, r8, r9, lr}
    9d20:	00000016 	andeq	r0, r0, r6, lsl r0
    9d24:	07be9c01 	ldreq	r9, [lr, r1, lsl #24]!
    9d28:	5a1a0000 	bpl	689d30 <_Min_Stack_Size+0x689930>
    9d2c:	01000033 	tsteq	r0, r3, lsr r0
    9d30:	048f02e5 	streq	r0, [pc], #741	; 9d38 <_Min_Stack_Size+0x9938>
    9d34:	50010000 	andpl	r0, r1, r0
    9d38:	0031721b 	eorseq	r7, r1, fp, lsl r2
    9d3c:	02e50100 	rsceq	r0, r5, #0, 2
    9d40:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d44:	000066b0 			; <UNDEFINED> instruction: 0x000066b0
    9d48:	33ed1900 	mvncc	r1, #0, 18
    9d4c:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    9d50:	00431c02 	subeq	r1, r3, r2, lsl #24
    9d54:	00001a08 	andeq	r1, r0, r8, lsl #20
    9d58:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    9d5c:	1a000007 	bne	9d80 <_Min_Stack_Size+0x9980>
    9d60:	0000335a 	andeq	r3, r0, sl, asr r3
    9d64:	8f02f701 	svchi	0x0002f701
    9d68:	01000004 	tsteq	r0, r4
    9d6c:	27831a50 			; <UNDEFINED> instruction: 0x27831a50
    9d70:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    9d74:	00011802 	andeq	r1, r1, r2, lsl #16
    9d78:	00510100 	subseq	r0, r1, r0, lsl #2
    9d7c:	00331c19 	eorseq	r1, r3, r9, lsl ip
    9d80:	030f0100 	movweq	r0, #61696	; 0xf100
    9d84:	08004338 	stmdaeq	r0, {r3, r4, r5, r8, r9, lr}
    9d88:	0000000c 	andeq	r0, r0, ip
    9d8c:	08169c01 	ldmdaeq	r6, {r0, sl, fp, ip, pc}
    9d90:	5a1a0000 	bpl	689d98 <_Min_Stack_Size+0x689998>
    9d94:	01000033 	tsteq	r0, r3, lsr r0
    9d98:	048f030f 	streq	r0, [pc], #783	; 9da0 <_Min_Stack_Size+0x99a0>
    9d9c:	50010000 	andpl	r0, r1, r0
    9da0:	34a71900 	strtcc	r1, [r7], #2304	; 0x900
    9da4:	44010000 	strmi	r0, [r1], #-0
    9da8:	00434403 	subeq	r4, r3, r3, lsl #8
    9dac:	00001a08 	andeq	r1, r0, r8, lsl #20
    9db0:	499c0100 	ldmibmi	ip, {r8}
    9db4:	1a000008 	bne	9ddc <_Min_Stack_Size+0x99dc>
    9db8:	0000335a 	andeq	r3, r0, sl, asr r3
    9dbc:	8f034401 	svchi	0x00034401
    9dc0:	01000004 	tsteq	r0, r4
    9dc4:	27831a50 			; <UNDEFINED> instruction: 0x27831a50
    9dc8:	44010000 	strmi	r0, [r1], #-0
    9dcc:	00011803 	andeq	r1, r1, r3, lsl #16
    9dd0:	00510100 	subseq	r0, r1, r0, lsl #2
    9dd4:	00330919 	eorseq	r0, r3, r9, lsl r9
    9dd8:	03980100 	orrseq	r0, r8, #0, 2
    9ddc:	08004360 	stmdaeq	r0, {r5, r6, r8, r9, lr}
    9de0:	00000012 	andeq	r0, r0, r2, lsl r0
    9de4:	087e9c01 	ldmdaeq	lr!, {r0, sl, fp, ip, pc}^
    9de8:	5a1a0000 	bpl	689df0 <_Min_Stack_Size+0x6899f0>
    9dec:	01000033 	tsteq	r0, r3, lsr r0
    9df0:	048f0398 	streq	r0, [pc], #920	; 9df8 <_Min_Stack_Size+0x99f8>
    9df4:	50010000 	andpl	r0, r1, r0
    9df8:	00325b1b 	eorseq	r5, r2, fp, lsl fp
    9dfc:	03980100 	orrseq	r0, r8, #0, 2
    9e00:	00000097 	muleq	r0, r7, r0
    9e04:	000066d1 	ldrdeq	r6, [r0], -r1
    9e08:	33911900 	orrscc	r1, r1, #0, 18
    9e0c:	ab010000 	blge	49e14 <_Min_Stack_Size+0x49a14>
    9e10:	00437403 	subeq	r7, r3, r3, lsl #8
    9e14:	00001a08 	andeq	r1, r0, r8, lsl #20
    9e18:	b19c0100 	orrslt	r0, ip, r0, lsl #2
    9e1c:	1a000008 	bne	9e44 <_Min_Stack_Size+0x9a44>
    9e20:	0000335a 	andeq	r3, r0, sl, asr r3
    9e24:	8f03ab01 	svchi	0x0003ab01
    9e28:	01000004 	tsteq	r0, r4
    9e2c:	27831a50 			; <UNDEFINED> instruction: 0x27831a50
    9e30:	ab010000 	blge	49e38 <_Min_Stack_Size+0x49a38>
    9e34:	00011803 	andeq	r1, r1, r3, lsl #16
    9e38:	00510100 	subseq	r0, r1, r0, lsl #2
    9e3c:	00343719 	eorseq	r3, r4, r9, lsl r7
    9e40:	03c40100 	biceq	r0, r4, #0, 2
    9e44:	08004390 	stmdaeq	r0, {r4, r7, r8, r9, lr}
    9e48:	0000001a 	andeq	r0, r0, sl, lsl r0
    9e4c:	08e49c01 	stmiaeq	r4!, {r0, sl, fp, ip, pc}^
    9e50:	5a1a0000 	bpl	689e58 <_Min_Stack_Size+0x689a58>
    9e54:	01000033 	tsteq	r0, r3, lsr r0
    9e58:	048f03c4 	streq	r0, [pc], #964	; 9e60 <_Min_Stack_Size+0x9a60>
    9e5c:	50010000 	andpl	r0, r1, r0
    9e60:	0027831a 	eoreq	r8, r7, sl, lsl r3
    9e64:	03c40100 	biceq	r0, r4, #0, 2
    9e68:	00000118 	andeq	r0, r0, r8, lsl r1
    9e6c:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    9e70:	000033fa 	strdeq	r3, [r0], -sl
    9e74:	ac040b01 	stcge	11, cr0, [r4], {1}
    9e78:	16080043 	strne	r0, [r8], -r3, asr #32
    9e7c:	01000000 	mrseq	r0, (UNDEF: 0)
    9e80:	0009199c 	muleq	r9, ip, r9
    9e84:	335a1a00 	cmpcc	sl, #0, 20
    9e88:	0b010000 	bleq	49e90 <_Min_Stack_Size+0x49a90>
    9e8c:	00048f04 	andeq	r8, r4, r4, lsl #30
    9e90:	1b500100 	blne	140a298 <_Min_Stack_Size+0x1409e98>
    9e94:	0000322b 	andeq	r3, r0, fp, lsr #4
    9e98:	a2040b01 	andge	r0, r4, #1024	; 0x400
    9e9c:	f2000000 	vhadd.s8	d0, d0, d0
    9ea0:	00000066 	andeq	r0, r0, r6, rrx
    9ea4:	00341719 	eorseq	r1, r4, r9, lsl r7
    9ea8:	041d0100 	ldreq	r0, [sp], #-256	; 0x100
    9eac:	080043c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, lr}
    9eb0:	0000001a 	andeq	r0, r0, sl, lsl r0
    9eb4:	094c9c01 	stmdbeq	ip, {r0, sl, fp, ip, pc}^
    9eb8:	5a1a0000 	bpl	689ec0 <_Min_Stack_Size+0x689ac0>
    9ebc:	01000033 	tsteq	r0, r3, lsr r0
    9ec0:	048f041d 	streq	r0, [pc], #1053	; 9ec8 <_Min_Stack_Size+0x9ac8>
    9ec4:	50010000 	andpl	r0, r1, r0
    9ec8:	0027831a 	eoreq	r8, r7, sl, lsl r3
    9ecc:	041d0100 	ldreq	r0, [sp], #-256	; 0x100
    9ed0:	00000118 	andeq	r0, r0, r8, lsl r1
    9ed4:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    9ed8:	00003201 	andeq	r3, r0, r1, lsl #4
    9edc:	e0044b01 	and	r4, r4, r1, lsl #22
    9ee0:	14080043 	strne	r0, [r8], #-67	; 0x43
    9ee4:	01000000 	mrseq	r0, (UNDEF: 0)
    9ee8:	00098f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    9eec:	335a1a00 	cmpcc	sl, #0, 20
    9ef0:	4b010000 	blmi	49ef8 <_Min_Stack_Size+0x49af8>
    9ef4:	00048f04 	andeq	r8, r4, r4, lsl #30
    9ef8:	1b500100 	blne	140a300 <_Min_Stack_Size+0x1409f00>
    9efc:	0000334d 	andeq	r3, r0, sp, asr #6
    9f00:	a2044b01 	andge	r4, r4, #1024	; 0x400
    9f04:	13000000 	movwne	r0, #0
    9f08:	1a000067 	bne	a0ac <_Min_Stack_Size+0x9cac>
    9f0c:	00002783 	andeq	r2, r0, r3, lsl #15
    9f10:	18044b01 	stmdane	r4, {r0, r8, r9, fp, lr}
    9f14:	01000001 	tsteq	r0, r1
    9f18:	3e190052 	mrccc	0, 0, r0, cr9, cr2, {2}
    9f1c:	01000033 	tsteq	r0, r3, lsr r0
    9f20:	43f404cf 	mvnsmi	r0, #-822083584	; 0xcf000000
    9f24:	003a0800 	eorseq	r0, sl, r0, lsl #16
    9f28:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f2c:	00000a14 	andeq	r0, r0, r4, lsl sl
    9f30:	00335a1b 	eorseq	r5, r3, fp, lsl sl
    9f34:	04cf0100 	strbeq	r0, [pc], #256	; 9f3c <_Min_Stack_Size+0x9b3c>
    9f38:	0000048f 	andeq	r0, r0, pc, lsl #9
    9f3c:	0000674d 	andeq	r6, r0, sp, asr #14
    9f40:	0031da1b 	eorseq	sp, r1, fp, lsl sl
    9f44:	04cf0100 	strbeq	r0, [pc], #256	; 9f4c <_Min_Stack_Size+0x9b4c>
    9f48:	000000a2 	andeq	r0, r0, r2, lsr #1
    9f4c:	0000676e 	andeq	r6, r0, lr, ror #14
    9f50:	0027831a 	eoreq	r8, r7, sl, lsl r3
    9f54:	04cf0100 	strbeq	r0, [pc], #256	; 9f5c <_Min_Stack_Size+0x9b5c>
    9f58:	00000118 	andeq	r0, r0, r8, lsl r1
    9f5c:	001c5201 	andseq	r5, ip, r1, lsl #4
    9f60:	01000035 	tsteq	r0, r5, lsr r0
    9f64:	00b804d1 	ldrsbteq	r0, [r8], r1
    9f68:	678f0000 	strvs	r0, [pc, r0]
    9f6c:	be1c0000 	cdplt	0, 1, cr0, cr12, cr0, {0}
    9f70:	01000033 	tsteq	r0, r3, lsr r0
    9f74:	00b804d1 	ldrsbteq	r0, [r8], r1
    9f78:	67ae0000 	strvs	r0, [lr, r0]!
    9f7c:	e71c0000 	ldr	r0, [ip, -r0]
    9f80:	01000034 	tsteq	r0, r4, lsr r0
    9f84:	00b804d1 	ldrsbteq	r0, [r8], r1
    9f88:	67c20000 	strbvs	r0, [r2, r0]
    9f8c:	dd1c0000 	ldcle	0, cr0, [ip, #-0]
    9f90:	01000032 	tsteq	r0, r2, lsr r0
    9f94:	00b804d2 	ldrsbteq	r0, [r8], r2
    9f98:	67ec0000 	strbvs	r0, [ip, r0]!
    9f9c:	1d000000 	stcne	0, cr0, [r0, #-0]
    9fa0:	0000344e 	andeq	r3, r0, lr, asr #8
    9fa4:	ea050f01 	b	14dbb0 <_Min_Stack_Size+0x14d7b0>
    9fa8:	30000000 	andcc	r0, r0, r0
    9fac:	0c080044 	stceq	0, cr0, [r8], {68}	; 0x44
    9fb0:	01000000 	mrseq	r0, (UNDEF: 0)
    9fb4:	000a5d9c 	muleq	sl, ip, sp
    9fb8:	335a1b00 	cmpcc	sl, #0, 22
    9fbc:	0f010000 	svceq	0x00010000
    9fc0:	00048f05 	andeq	r8, r4, r5, lsl #30
    9fc4:	00681800 	rsbeq	r1, r8, r0, lsl #16
    9fc8:	328c1a00 	addcc	r1, ip, #0, 20
    9fcc:	0f010000 	svceq	0x00010000
    9fd0:	0000a205 	andeq	sl, r0, r5, lsl #4
    9fd4:	1c510100 	ldfnee	f0, [r1], {-0}
    9fd8:	00002983 	andeq	r2, r0, r3, lsl #19
    9fdc:	ea051101 	b	14e3e8 <_Min_Stack_Size+0x14dfe8>
    9fe0:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    9fe4:	00000068 	andeq	r0, r0, r8, rrx
    9fe8:	0032e819 	eorseq	lr, r2, r9, lsl r8
    9fec:	05400100 	strbeq	r0, [r0, #-256]	; 0x100
    9ff0:	0800443c 	stmdaeq	r0, {r2, r3, r4, r5, sl, lr}
    9ff4:	00000008 	andeq	r0, r0, r8
    9ff8:	0a929c01 	beq	fe4b1004 <_estack+0xde481004>
    9ffc:	5a1a0000 	bpl	68a004 <_Min_Stack_Size+0x689c04>
    a000:	01000033 	tsteq	r0, r3, lsr r0
    a004:	048f0540 	streq	r0, [pc], #1344	; a00c <_Min_Stack_Size+0x9c0c>
    a008:	50010000 	andpl	r0, r1, r0
    a00c:	00328c1b 	eorseq	r8, r2, fp, lsl ip
    a010:	05400100 	strbeq	r0, [r0, #-256]	; 0x100
    a014:	000000a2 	andeq	r0, r0, r2, lsr #1
    a018:	00006861 	andeq	r6, r0, r1, ror #16
    a01c:	33db1d00 	bicscc	r1, fp, #0, 26
    a020:	62010000 	andvs	r0, r1, #0
    a024:	0000f605 	andeq	pc, r0, r5, lsl #12
    a028:	00444400 	subeq	r4, r4, r0, lsl #8
    a02c:	00004a08 	andeq	r4, r0, r8, lsl #20
    a030:	0d9c0100 	ldfeqs	f0, [ip]
    a034:	1b00000b 	blne	a068 <_Min_Stack_Size+0x9c68>
    a038:	0000335a 	andeq	r3, r0, sl, asr r3
    a03c:	8f056201 	svchi	0x00056201
    a040:	82000004 	andhi	r0, r0, #4
    a044:	1b000068 	blne	a1ec <_Min_Stack_Size+0x9dec>
    a048:	000031da 	ldrdeq	r3, [r0], -sl
    a04c:	a2056201 	andge	r6, r5, #268435456	; 0x10000000
    a050:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    a054:	1c000068 	stcne	0, cr0, [r0], {104}	; 0x68
    a058:	000033bd 			; <UNDEFINED> instruction: 0x000033bd
    a05c:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    a060:	da000000 	ble	a068 <_Min_Stack_Size+0x9c68>
    a064:	1c000068 	stcne	0, cr0, [r0], {104}	; 0x68
    a068:	000034e7 	andeq	r3, r0, r7, ror #9
    a06c:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    a070:	21000000 	mrscs	r0, (UNDEF: 0)
    a074:	1c000069 	stcne	0, cr0, [r0], {105}	; 0x69
    a078:	00003500 	andeq	r3, r0, r0, lsl #10
    a07c:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    a080:	74000000 	strvc	r0, [r0], #-0
    a084:	1c000069 	stcne	0, cr0, [r0], {105}	; 0x69
    a088:	00002983 	andeq	r2, r0, r3, lsl #19
    a08c:	f6056501 			; <UNDEFINED> instruction: 0xf6056501
    a090:	b0000000 	andlt	r0, r0, r0
    a094:	00000069 	andeq	r0, r0, r9, rrx
    a098:	00324319 	eorseq	r4, r2, r9, lsl r3
    a09c:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    a0a0:	08004490 	stmdaeq	r0, {r4, r7, sl, lr}
    a0a4:	00000010 	andeq	r0, r0, r0, lsl r0
    a0a8:	0b5e9c01 	bleq	17b10b4 <_Min_Stack_Size+0x17b0cb4>
    a0ac:	5a1a0000 	bpl	68a0b4 <_Min_Stack_Size+0x689cb4>
    a0b0:	01000033 	tsteq	r0, r3, lsr r0
    a0b4:	048f05ac 	streq	r0, [pc], #1452	; a0bc <_Min_Stack_Size+0x9cbc>
    a0b8:	50010000 	andpl	r0, r1, r0
    a0bc:	0031da1b 	eorseq	sp, r1, fp, lsl sl
    a0c0:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    a0c4:	000000a2 	andeq	r0, r0, r2, lsr #1
    a0c8:	000069eb 	andeq	r6, r0, fp, ror #19
    a0cc:	0033bd1c 	eorseq	fp, r3, ip, lsl sp
    a0d0:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
    a0d4:	000000a2 	andeq	r0, r0, r2, lsr #1
    a0d8:	00006a0c 	andeq	r6, r0, ip, lsl #20
    a0dc:	0034e71e 	eorseq	lr, r4, lr, lsl r7
    a0e0:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
    a0e4:	000000a2 	andeq	r0, r0, r2, lsr #1
    a0e8:	039d1f00 	orrseq	r1, sp, #0, 30
    a0ec:	a7070000 	strge	r0, [r7, -r0]
    a0f0:	0000cf06 	andeq	ip, r0, r6, lsl #30
    a0f4:	2ab72000 	bcs	fedd20fc <_estack+0xdeda20fc>
    a0f8:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    a0fc:	000b8102 	andeq	r8, fp, r2, lsl #2
    a100:	00b82100 	adcseq	r2, r8, r0, lsl #2
    a104:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
    a108:	00000001 	andeq	r0, r0, r1
    a10c:	002de120 	eoreq	lr, sp, r0, lsr #2
    a110:	024a0500 	subeq	r0, sl, #0, 10
    a114:	00000b98 	muleq	r0, r8, fp
    a118:	0000b821 	andeq	fp, r0, r1, lsr #16
    a11c:	01182100 	tsteq	r8, r0, lsl #2
    a120:	20000000 	andcs	r0, r0, r0
    a124:	00002f34 	andeq	r2, r0, r4, lsr pc
    a128:	aa023205 	bge	96944 <_Min_Stack_Size+0x96544>
    a12c:	2100000b 	tstcs	r0, fp
    a130:	00000baa 	andeq	r0, r0, sl, lsr #23
    a134:	27041500 	strcs	r1, [r4, -r0, lsl #10]
    a138:	00000002 	andeq	r0, r0, r2
    a13c:	000002d8 	ldrdeq	r0, [r0], -r8
    a140:	1e530004 	cdpne	0, 5, cr0, cr3, cr4, {0}
    a144:	01040000 	mrseq	r0, (UNDEF: 4)
    a148:	00000284 	andeq	r0, r0, r4, lsl #5
    a14c:	00355f01 	eorseq	r5, r5, r1, lsl #30
    a150:	00010100 	andeq	r0, r1, r0, lsl #2
    a154:	00113800 	andseq	r3, r1, r0, lsl #16
    a158:	00000000 	andeq	r0, r0, r0
    a15c:	0035c200 	eorseq	ip, r5, r0, lsl #4
    a160:	06010200 	streq	r0, [r1], -r0, lsl #4
    a164:	00000150 	andeq	r0, r0, r0, asr r1
    a168:	0000f203 	andeq	pc, r0, r3, lsl #4
    a16c:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
    a170:	02000000 	andeq	r0, r0, #0
    a174:	014e0801 	cmpeq	lr, r1, lsl #16
    a178:	02020000 	andeq	r0, r2, #0
    a17c:	0000df05 	andeq	sp, r0, r5, lsl #30
    a180:	07020200 	streq	r0, [r2, -r0, lsl #4]
    a184:	000001e5 	andeq	r0, r0, r5, ror #3
    a188:	00037703 	andeq	r7, r3, r3, lsl #14
    a18c:	57370200 	ldrpl	r0, [r7, -r0, lsl #4]!
    a190:	02000000 	andeq	r0, r0, #0
    a194:	00c50504 	sbceq	r0, r5, r4, lsl #10
    a198:	51030000 	mrspl	r0, (UNDEF: 3)
    a19c:	02000000 	andeq	r0, r0, #0
    a1a0:	00006938 	andeq	r6, r0, r8, lsr r9
    a1a4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a1a8:	00000178 	andeq	r0, r0, r8, ror r1
    a1ac:	c0050802 	andgt	r0, r5, r2, lsl #16
    a1b0:	02000000 	andeq	r0, r0, #0
    a1b4:	01730708 	cmneq	r3, r8, lsl #14
    a1b8:	04040000 	streq	r0, [r4], #-0
    a1bc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    a1c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a1c4:	0000017d 	andeq	r0, r0, sp, ror r1
    a1c8:	0000f403 	andeq	pc, r0, r3, lsl #8
    a1cc:	2c2a0300 	stccs	3, cr0, [sl], #-0
    a1d0:	03000000 	movweq	r0, #0
    a1d4:	00000379 	andeq	r0, r0, r9, ror r3
    a1d8:	004c4103 	subeq	r4, ip, r3, lsl #2
    a1dc:	53030000 	movwpl	r0, #12288	; 0x3000
    a1e0:	03000000 	movweq	r0, #0
    a1e4:	00005e42 	andeq	r5, r0, r2, asr #28
    a1e8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a1ec:	0000002c 	andeq	r0, r0, ip, lsr #32
    a1f0:	0000a205 	andeq	sl, r0, r5, lsl #4
    a1f4:	00a20600 	adceq	r0, r2, r0, lsl #12
    a1f8:	00c90000 	sbceq	r0, r9, r0
    a1fc:	ad070000 	stcge	0, cr0, [r7, #-0]
    a200:	01000000 	mrseq	r0, (UNDEF: 0)
    a204:	00a20600 	adceq	r0, r2, r0, lsl #12
    a208:	00d90000 	sbcseq	r0, r9, r0
    a20c:	ad070000 	stcge	0, cr0, [r7, #-0]
    a210:	03000000 	movweq	r0, #0
    a214:	00970500 	addseq	r0, r7, r0, lsl #10
    a218:	01080000 	mrseq	r0, (UNDEF: 8)
    a21c:	f401f704 	vst1.8	{d15}, [r1], r4
    a220:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    a224:	000028e4 	andeq	r2, r0, r4, ror #17
    a228:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    a22c:	00010054 	andeq	r0, r1, r4, asr r0
    a230:	003d290b 	eorseq	r2, sp, fp, lsl #18
    a234:	01f70400 	mvnseq	r0, r0, lsl #8
    a238:	000000de 	ldrdeq	r0, [r0], -lr
    a23c:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    a240:	00011601 	andeq	r1, r1, r1, lsl #12
    a244:	04880900 	streq	r0, [r8], #2304	; 0x900
    a248:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    a24c:	000005c0 	andeq	r0, r0, r0, asr #11
    a250:	2a0b0001 	bcs	2ca25c <_Min_Stack_Size+0x2c9e5c>
    a254:	04000009 	streq	r0, [r0], #-9
    a258:	010001f9 	strdeq	r0, [r0, -r9]
    a25c:	240c0000 	strcs	r0, [ip], #-0
    a260:	6d03e604 	stcvs	6, cr14, [r3, #-16]
    a264:	0d000001 	stceq	0, cr0, [r0, #-4]
    a268:	000035b4 			; <UNDEFINED> instruction: 0x000035b4
    a26c:	b403e804 	strlt	lr, [r3], #-2052	; 0x804
    a270:	00000000 	andeq	r0, r0, r0
    a274:	434d500e 	movtmi	r5, #53262	; 0xd00e
    a278:	03e90400 	mvneq	r0, #0, 8
    a27c:	000000b4 	strheq	r0, [r0], -r4
    a280:	35de0d04 	ldrbcc	r0, [lr, #3332]	; 0xd04
    a284:	ea040000 	b	10a28c <_Min_Stack_Size+0x109e8c>
    a288:	00016d03 	andeq	r6, r1, r3, lsl #26
    a28c:	d50d0800 	strle	r0, [sp, #-2048]	; 0x800
    a290:	04000035 	streq	r0, [r0], #-53	; 0x35
    a294:	00b903eb 	adcseq	r0, r9, fp, ror #7
    a298:	0d180000 	ldceq	0, cr0, [r8, #-0]
    a29c:	000035ae 	andeq	r3, r0, lr, lsr #11
    a2a0:	b403ec04 	strlt	lr, [r3], #-3076	; 0xc04
    a2a4:	20000000 	andcs	r0, r0, r0
    a2a8:	00c90500 	sbceq	r0, r9, r0, lsl #10
    a2ac:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
    a2b0:	04000036 	streq	r0, [r0], #-54	; 0x36
    a2b4:	012203ed 	smulwteq	r2, sp, r3
    a2b8:	4c0f0000 	stcmi	0, cr0, [pc], {-0}
    a2bc:	01000036 	tsteq	r0, r6, lsr r0
    a2c0:	0044a064 	subeq	sl, r4, r4, rrx
    a2c4:	00001a08 	andeq	r1, r0, r8, lsl #20
    a2c8:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    a2cc:	10000001 	andne	r0, r0, r1
    a2d0:	080044ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, lr}
    a2d4:	000002c8 	andeq	r0, r0, r8, asr #5
    a2d8:	000001ad 	andeq	r0, r0, sp, lsr #3
    a2dc:	01510111 	cmpeq	r1, r1, lsl r1
    a2e0:	50011131 	andpl	r1, r1, r1, lsr r1
    a2e4:	40000a03 	andmi	r0, r0, r3, lsl #20
    a2e8:	44ba1200 	ldrtmi	r1, [sl], #512	; 0x200
    a2ec:	02c80800 	sbceq	r0, r8, #0, 16
    a2f0:	01110000 	tsteq	r1, r0
    a2f4:	11300151 	teqne	r0, r1, asr r1
    a2f8:	0a035001 	beq	de304 <_Min_Stack_Size+0xddf04>
    a2fc:	00004000 	andeq	r4, r0, r0
    a300:	00365a0f 	eorseq	r5, r6, pc, lsl #20
    a304:	bc760100 	ldflte	f0, [r6], #-0
    a308:	0c080044 	stceq	0, cr0, [r8], {68}	; 0x44
    a30c:	01000000 	mrseq	r0, (UNDEF: 0)
    a310:	0001e79c 	muleq	r1, ip, r7
    a314:	36151300 	ldrcc	r1, [r5], -r0, lsl #6
    a318:	76010000 	strvc	r0, [r1], -r0
    a31c:	0000008c 	andeq	r0, r0, ip, lsl #1
    a320:	0f005001 	svceq	0x00005001
    a324:	00003509 	andeq	r3, r0, r9, lsl #10
    a328:	44c88b01 	strbmi	r8, [r8], #2817	; 0xb01
    a32c:	000a0800 	andeq	r0, sl, r0, lsl #16
    a330:	9c010000 	stcls	0, cr0, [r1], {-0}
    a334:	0000020a 	andeq	r0, r0, sl, lsl #4
    a338:	00278313 	eoreq	r8, r7, r3, lsl r3
    a33c:	168b0100 	strne	r0, [fp], r0, lsl #2
    a340:	01000001 	tsteq	r0, r1
    a344:	500f0050 	andpl	r0, pc, r0, asr r0	; <UNPREDICTABLE>
    a348:	01000007 	tsteq	r0, r7
    a34c:	0044d4a2 	subeq	sp, r4, r2, lsr #9
    a350:	00002e08 	andeq	r2, r0, r8, lsl #28
    a354:	4d9c0100 	ldfmis	f0, [ip]
    a358:	14000002 	strne	r0, [r0], #-2
    a35c:	00003637 	andeq	r3, r0, r7, lsr r6
    a360:	008ca201 	addeq	sl, ip, r1, lsl #4
    a364:	6a330000 	bvs	cca36c <_Min_Stack_Size+0xcc9f6c>
    a368:	e5140000 	ldr	r0, [r4, #-0]
    a36c:	01000035 	tsteq	r0, r5, lsr r0
    a370:	00008ca2 	andeq	r8, r0, r2, lsr #25
    a374:	006a5400 	rsbeq	r5, sl, r0, lsl #8
    a378:	6d741500 	cfldr64vs	mvdx1, [r4, #-0]
    a37c:	a4010070 	strge	r0, [r1], #-112	; 0x70
    a380:	000000a2 	andeq	r0, r0, r2, lsr #1
    a384:	00006a75 	andeq	r6, r0, r5, ror sl
    a388:	35f50f00 	ldrbcc	r0, [r5, #3840]!	; 0xf00
    a38c:	b7010000 	strlt	r0, [r1, -r0]
    a390:	08004504 	stmdaeq	r0, {r2, r8, sl, lr}
    a394:	0000000a 	andeq	r0, r0, sl
    a398:	02709c01 	rsbseq	r9, r0, #256	; 0x100
    a39c:	bb130000 	bllt	4ca3a4 <_Min_Stack_Size+0x4c9fa4>
    a3a0:	01000035 	tsteq	r0, r5, lsr r0
    a3a4:	0000a2b7 			; <UNDEFINED> instruction: 0x0000a2b7
    a3a8:	00500100 	subseq	r0, r0, r0, lsl #2
    a3ac:	0035230f 	eorseq	r2, r5, pc, lsl #6
    a3b0:	10c80100 	sbcne	r0, r8, r0, lsl #2
    a3b4:	0c080045 	stceq	0, cr0, [r8], {69}	; 0x45
    a3b8:	01000000 	mrseq	r0, (UNDEF: 0)
    a3bc:	0002939c 	muleq	r2, ip, r3
    a3c0:	27831300 	strcs	r1, [r3, r0, lsl #6]
    a3c4:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    a3c8:	00000116 	andeq	r0, r0, r6, lsl r1
    a3cc:	16005001 	strne	r5, [r0], -r1
    a3d0:	0000353e 	andeq	r3, r0, lr, lsr r5
    a3d4:	00f4d501 	rscseq	sp, r4, r1, lsl #10
    a3d8:	451c0000 	ldrmi	r0, [ip, #-0]
    a3dc:	00100800 	andseq	r0, r0, r0, lsl #16
    a3e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    a3e4:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    a3e8:	00298317 	eoreq	r8, r9, r7, lsl r3
    a3ec:	f4d70100 			; <UNDEFINED> instruction: 0xf4d70100
    a3f0:	b2000000 	andlt	r0, r0, #0
    a3f4:	0000006a 	andeq	r0, r0, sl, rrx
    a3f8:	00039d18 	andeq	r9, r3, r8, lsl sp
    a3fc:	06a70500 	strteq	r0, [r7], r0, lsl #10
    a400:	000000d9 	ldrdeq	r0, [r0], -r9
    a404:	002de119 	eoreq	lr, sp, r9, lsl r1
    a408:	024a0600 	subeq	r0, sl, #0, 12
    a40c:	0000a21a 	andeq	sl, r0, sl, lsl r2
    a410:	01161a00 	tsteq	r6, r0, lsl #20
    a414:	00000000 	andeq	r0, r0, r0
    a418:	00000c53 	andeq	r0, r0, r3, asr ip
    a41c:	1fbc0004 	svcne	0x00bc0004
    a420:	01040000 	mrseq	r0, (UNDEF: 4)
    a424:	00000284 	andeq	r0, r0, r4, lsl #5
    a428:	0038ee01 	eorseq	lr, r8, r1, lsl #28
    a42c:	00010100 	andeq	r0, r1, r0, lsl #2
    a430:	00117800 	andseq	r7, r1, r0, lsl #16
    a434:	00000000 	andeq	r0, r0, r0
    a438:	0037df00 	eorseq	sp, r7, r0, lsl #30
    a43c:	06010200 	streq	r0, [r1], -r0, lsl #4
    a440:	00000150 	andeq	r0, r0, r0, asr r1
    a444:	0000f203 	andeq	pc, r0, r3, lsl #4
    a448:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
    a44c:	02000000 	andeq	r0, r0, #0
    a450:	014e0801 	cmpeq	lr, r1, lsl #16
    a454:	02020000 	andeq	r0, r2, #0
    a458:	0000df05 	andeq	sp, r0, r5, lsl #30
    a45c:	005c0300 	subseq	r0, ip, r0, lsl #6
    a460:	26020000 	strcs	r0, [r2], -r0
    a464:	00000050 	andeq	r0, r0, r0, asr r0
    a468:	e5070202 	str	r0, [r7, #-514]	; 0x202
    a46c:	03000001 	movweq	r0, #1
    a470:	00000377 	andeq	r0, r0, r7, ror r3
    a474:	00623702 	rsbeq	r3, r2, r2, lsl #14
    a478:	04020000 	streq	r0, [r2], #-0
    a47c:	0000c505 	andeq	ip, r0, r5, lsl #10
    a480:	00510300 	subseq	r0, r1, r0, lsl #6
    a484:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    a488:	00000074 	andeq	r0, r0, r4, ror r0
    a48c:	78070402 	stmdavc	r7, {r1, sl}
    a490:	02000001 	andeq	r0, r0, #1
    a494:	00c00508 	sbceq	r0, r0, r8, lsl #10
    a498:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a49c:	00017307 	andeq	r7, r1, r7, lsl #6
    a4a0:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    a4a4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a4a8:	7d070402 	cfstrsvc	mvf0, [r7, #-8]
    a4ac:	03000001 	movweq	r0, #1
    a4b0:	000000f4 	strdeq	r0, [r0], -r4
    a4b4:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    a4b8:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
    a4bc:	03000000 	movweq	r0, #0
    a4c0:	00004536 	andeq	r4, r0, r6, lsr r5
    a4c4:	03790300 	cmneq	r9, #0, 6
    a4c8:	41030000 	mrsmi	r0, (UNDEF: 3)
    a4cc:	00000057 	andeq	r0, r0, r7, asr r0
    a4d0:	00005303 	andeq	r5, r0, r3, lsl #6
    a4d4:	69420300 	stmdbvs	r2, {r8, r9}^
    a4d8:	02000000 	andeq	r0, r0, #0
    a4dc:	002c0704 	eoreq	r0, ip, r4, lsl #14
    a4e0:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    a4e4:	05000000 	streq	r0, [r0, #-0]
    a4e8:	000000a2 	andeq	r0, r0, r2, lsr #1
    a4ec:	0000ad05 	andeq	sl, r0, r5, lsl #26
    a4f0:	04010600 	streq	r0, [r1], #-1536	; 0x600
    a4f4:	00ef01f7 	strdeq	r0, [pc], #23	; <UNPREDICTABLE>
    a4f8:	e4070000 	str	r0, [r7], #-0
    a4fc:	00000028 	andeq	r0, r0, r8, lsr #32
    a500:	54455308 	strbpl	r5, [r5], #-776	; 0x308
    a504:	09000100 	stmdbeq	r0, {r8}
    a508:	00003d29 	andeq	r3, r0, r9, lsr #26
    a50c:	d901f704 	stmdble	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
    a510:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    a514:	00003ca0 	andeq	r3, r0, r0, lsr #25
    a518:	d901f704 	stmdble	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
    a51c:	06000000 	streq	r0, [r0], -r0
    a520:	01f90401 	mvnseq	r0, r1, lsl #8
    a524:	0000011d 	andeq	r0, r0, sp, lsl r1
    a528:	00048807 	andeq	r8, r4, r7, lsl #16
    a52c:	c0070000 	andgt	r0, r7, r0
    a530:	01000005 	tsteq	r0, r5
    a534:	092a0900 	stmdbeq	sl!, {r8, fp}
    a538:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    a53c:	00010701 	andeq	r0, r1, r1, lsl #14
    a540:	04010600 	streq	r0, [r1], #-1536	; 0x600
    a544:	013f01fc 			; <UNDEFINED> instruction: 0x013f01fc
    a548:	94070000 	strls	r0, [r7], #-0
    a54c:	0000002d 	andeq	r0, r0, sp, lsr #32
    a550:	00307307 	eorseq	r7, r0, r7, lsl #6
    a554:	09000100 	stmdbeq	r0, {r8}
    a558:	00002c14 	andeq	r2, r0, r4, lsl ip
    a55c:	2901fc04 	stmdbcs	r1, {r2, sl, fp, ip, sp, lr, pc}
    a560:	0a000001 	beq	a56c <_Min_Stack_Size+0xa16c>
    a564:	03f30428 	mvnseq	r0, #40, 8	; 0x28000000
    a568:	00000258 	andeq	r0, r0, r8, asr r2
    a56c:	3152430b 	cmpcc	r2, fp, lsl #6
    a570:	03f50400 	mvnseq	r0, #0, 8
    a574:	000000cf 	andeq	r0, r0, pc, asr #1
    a578:	023c0c00 	eorseq	r0, ip, #0, 24
    a57c:	f6040000 			; <UNDEFINED> instruction: 0xf6040000
    a580:	0000a203 	andeq	sl, r0, r3, lsl #4
    a584:	430b0200 	movwmi	r0, #45568	; 0xb200
    a588:	04003252 	streq	r3, [r0], #-594	; 0x252
    a58c:	00cf03f7 	strdeq	r0, [pc], #55	; <UNPREDICTABLE>
    a590:	0c040000 	stceq	0, cr0, [r4], {-0}
    a594:	00000246 	andeq	r0, r0, r6, asr #4
    a598:	a203f804 	andge	pc, r3, #4, 16	; 0x40000
    a59c:	06000000 	streq	r0, [r0], -r0
    a5a0:	0037650c 	eorseq	r6, r7, ip, lsl #10
    a5a4:	03f90400 	mvnseq	r0, #0, 8
    a5a8:	000000cf 	andeq	r0, r0, pc, asr #1
    a5ac:	02500c08 	subseq	r0, r0, #8, 24	; 0x800
    a5b0:	fa040000 	blx	10a5b8 <_Min_Stack_Size+0x10a1b8>
    a5b4:	0000a203 	andeq	sl, r0, r3, lsl #4
    a5b8:	5a0c0a00 	bpl	30cdc0 <_Min_Stack_Size+0x30c9c0>
    a5bc:	0400003a 	streq	r0, [r0], #-58	; 0x3a
    a5c0:	00cf03fb 	strdeq	r0, [pc], #59	; <UNPREDICTABLE>
    a5c4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    a5c8:	00000090 	muleq	r0, r0, r0
    a5cc:	a203fc04 	andge	pc, r3, #4, 24	; 0x400
    a5d0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    a5d4:	0052440b 	subseq	r4, r2, fp, lsl #8
    a5d8:	cf03fd04 	svcgt	0x0003fd04
    a5dc:	10000000 	andne	r0, r0, r0
    a5e0:	0002660c 	andeq	r6, r2, ip, lsl #12
    a5e4:	03fe0400 	mvnseq	r0, #0, 8
    a5e8:	000000a2 	andeq	r0, r0, r2, lsr #1
    a5ec:	52530b12 	subspl	r0, r3, #18432	; 0x4800
    a5f0:	ff040031 			; <UNDEFINED> instruction: 0xff040031
    a5f4:	0000cf03 	andeq	ip, r0, r3, lsl #30
    a5f8:	700c1400 	andvc	r1, ip, r0, lsl #8
    a5fc:	04000002 	streq	r0, [r0], #-2
    a600:	00a20400 	adceq	r0, r2, r0, lsl #8
    a604:	0b160000 	bleq	58a60c <_Min_Stack_Size+0x58a20c>
    a608:	00325253 	eorseq	r5, r2, r3, asr r2
    a60c:	cf040104 	svcgt	0x00040104
    a610:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    a614:	00027a0c 	andeq	r7, r2, ip, lsl #20
    a618:	04020400 	streq	r0, [r2], #-1024	; 0x400
    a61c:	000000a2 	andeq	r0, r0, r2, lsr #1
    a620:	43430b1a 	movtmi	r0, #15130	; 0x3b1a
    a624:	03040052 	movweq	r0, #16466	; 0x4052
    a628:	0000cf04 	andeq	ip, r0, r4, lsl #30
    a62c:	c00c1c00 	andgt	r1, ip, r0, lsl #24
    a630:	04000038 	streq	r0, [r0], #-56	; 0x38
    a634:	00a20404 	adceq	r0, r2, r4, lsl #8
    a638:	0c1e0000 	ldceq	0, cr0, [lr], {-0}
    a63c:	000036c7 	andeq	r3, r0, r7, asr #13
    a640:	cf040504 	svcgt	0x00040504
    a644:	20000000 	andcs	r0, r0, r0
    a648:	0038ca0c 	eorseq	ip, r8, ip, lsl #20
    a64c:	04060400 	streq	r0, [r6], #-1024	; 0x400
    a650:	000000a2 	andeq	r0, r0, r2, lsr #1
    a654:	376a0c22 	strbcc	r0, [sl, -r2, lsr #24]!
    a658:	07040000 	streq	r0, [r4, -r0]
    a65c:	0000cf04 	andeq	ip, r0, r4, lsl #30
    a660:	d40c2400 	strle	r2, [ip], #-1024	; 0x400
    a664:	04000038 	streq	r0, [r0], #-56	; 0x38
    a668:	00a20408 	adceq	r0, r2, r8, lsl #8
    a66c:	00260000 	eoreq	r0, r6, r0
    a670:	00379b09 	eorseq	r9, r7, r9, lsl #22
    a674:	04090400 	streq	r0, [r9], #-1024	; 0x400
    a678:	0000014b 	andeq	r0, r0, fp, asr #2
    a67c:	3005100d 	andcc	r1, r5, sp
    a680:	0000029d 	muleq	r0, sp, r2
    a684:	002a970e 	eoreq	r9, sl, lr, lsl #14
    a688:	b8320500 	ldmdalt	r2!, {r8, sl}
    a68c:	00000000 	andeq	r0, r0, r0
    a690:	002c580e 	eoreq	r5, ip, lr, lsl #16
    a694:	b8330500 	ldmdalt	r3!, {r8, sl}
    a698:	04000000 	streq	r0, [r0], #-0
    a69c:	002ee30e 	eoreq	lr, lr, lr, lsl #6
    a6a0:	b8340500 	ldmdalt	r4!, {r8, sl}
    a6a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a6a8:	002b650e 	eoreq	r6, fp, lr, lsl #10
    a6ac:	b8350500 	ldmdalt	r5!, {r8, sl}
    a6b0:	0c000000 	stceq	0, cr0, [r0], {-0}
    a6b4:	30890300 	addcc	r0, r9, r0, lsl #6
    a6b8:	36050000 	strcc	r0, [r5], -r0
    a6bc:	00000264 	andeq	r0, r0, r4, ror #4
    a6c0:	3606100d 	strcc	r1, [r6], -sp
    a6c4:	000002f9 	strdeq	r0, [r0], -r9
    a6c8:	00373e0e 	eorseq	r3, r7, lr, lsl #28
    a6cc:	b8380600 	ldmdalt	r8!, {r9, sl}
    a6d0:	00000000 	andeq	r0, r0, r0
    a6d4:	00374d0e 	eorseq	r4, r7, lr, lsl #26
    a6d8:	a23b0600 	eorsge	r0, fp, #0, 12
    a6dc:	04000000 	streq	r0, [r0], #-0
    a6e0:	0037f10e 	eorseq	pc, r7, lr, lsl #2
    a6e4:	a23e0600 	eorsge	r0, lr, #0, 12
    a6e8:	06000000 	streq	r0, [r0], -r0
    a6ec:	0038de0e 	eorseq	sp, r8, lr, lsl #28
    a6f0:	a2410600 	subge	r0, r1, #0, 12
    a6f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a6f8:	0039450e 	eorseq	r4, r9, lr, lsl #10
    a6fc:	a2440600 	subge	r0, r4, #0, 12
    a700:	0a000000 	beq	a708 <_Min_Stack_Size+0xa308>
    a704:	0039750e 	eorseq	r7, r9, lr, lsl #10
    a708:	a2470600 	subge	r0, r7, #0, 12
    a70c:	0c000000 	stceq	0, cr0, [r0], {-0}
    a710:	389b0300 	ldmcc	fp, {r8, r9}
    a714:	49060000 	stmdbmi	r6, {}	; <UNPREDICTABLE>
    a718:	000002a8 	andeq	r0, r0, r8, lsr #5
    a71c:	0038630f 	eorseq	r6, r8, pc, lsl #6
    a720:	2c890100 	stfcss	f0, [r9], {0}
    a724:	70080045 	andvc	r0, r8, r5, asr #32
    a728:	01000000 	mrseq	r0, (UNDEF: 0)
    a72c:	0003c19c 	muleq	r3, ip, r1
    a730:	38251000 	stmdacc	r5!, {ip}
    a734:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    a738:	000003c1 	andeq	r0, r0, r1, asr #7
    a73c:	00006ad9 	ldrdeq	r6, [r0], -r9
    a740:	00455e11 	subeq	r5, r5, r1, lsl lr
    a744:	000c2708 	andeq	r2, ip, r8, lsl #14
    a748:	00034200 	andeq	r4, r3, r0, lsl #4
    a74c:	51011200 	mrspl	r1, R9_usr
    a750:	01123101 	tsteq	r2, r1, lsl #2
    a754:	43400350 	movtmi	r0, #848	; 0x350
    a758:	6c130024 	ldcvs	0, cr0, [r3], {36}	; 0x24
    a75c:	27080045 	strcs	r0, [r8, -r5, asr #32]
    a760:	5c00000c 	stcpl	0, cr0, [r0], {12}
    a764:	12000003 	andne	r0, r0, #3
    a768:	30015101 	andcc	r5, r1, r1, lsl #2
    a76c:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    a770:	00244340 	eoreq	r4, r4, r0, asr #6
    a774:	00457611 	subeq	r7, r5, r1, lsl r6
    a778:	000c2708 	andeq	r2, ip, r8, lsl #14
    a77c:	00037600 	andeq	r7, r3, r0, lsl #12
    a780:	51011200 	mrspl	r1, R9_usr
    a784:	01123101 	tsteq	r2, r1, lsl #2
    a788:	41400350 	cmpmi	r0, r0, asr r3
    a78c:	84130024 	ldrhi	r0, [r3], #-36	; 0x24
    a790:	27080045 	strcs	r0, [r8, -r5, asr #32]
    a794:	9000000c 	andls	r0, r0, ip
    a798:	12000003 	andne	r0, r0, #3
    a79c:	30015101 	andcc	r5, r1, r1, lsl #2
    a7a0:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    a7a4:	00244140 	eoreq	r4, r4, r0, asr #2
    a7a8:	00458e11 	subeq	r8, r5, r1, lsl lr
    a7ac:	000c2708 	andeq	r2, ip, r8, lsl #14
    a7b0:	0003aa00 	andeq	sl, r3, r0, lsl #20
    a7b4:	51011200 	mrspl	r1, R9_usr
    a7b8:	01123101 	tsteq	r2, r1, lsl #2
    a7bc:	42400350 	submi	r0, r0, #80, 6	; 0x40000001
    a7c0:	9c140024 	ldcls	0, cr0, [r4], {36}	; 0x24
    a7c4:	27080045 	strcs	r0, [r8, -r5, asr #32]
    a7c8:	1200000c 	andne	r0, r0, #12
    a7cc:	30015101 	andcc	r5, r1, r1, lsl #2
    a7d0:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    a7d4:	00244240 	eoreq	r4, r4, r0, asr #4
    a7d8:	58041500 	stmdapl	r4, {r8, sl, ip}
    a7dc:	0f000002 	svceq	0x00000002
    a7e0:	000037dd 	ldrdeq	r3, [r0], -sp
    a7e4:	459cb401 	ldrmi	fp, [ip, #1025]	; 0x401
    a7e8:	00e80800 	rsceq	r0, r8, r0, lsl #16
    a7ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    a7f0:	00000455 	andeq	r0, r0, r5, asr r4
    a7f4:	00382510 	eorseq	r2, r8, r0, lsl r5
    a7f8:	c1b40100 			; <UNDEFINED> instruction: 0xc1b40100
    a7fc:	2c000003 	stccs	0, cr0, [r0], {3}
    a800:	1000006b 	andne	r0, r0, fp, rrx
    a804:	00003707 	andeq	r3, r0, r7, lsl #14
    a808:	0455b401 	ldrbeq	fp, [r5], #-1025	; 0x401
    a80c:	6b4a0000 	blvs	128a814 <_Min_Stack_Size+0x128a414>
    a810:	5e160000 	cdppl	0, 1, cr0, cr6, cr0, {0}
    a814:	0100002b 	tsteq	r0, fp, lsr #32
    a818:	0000a2b6 			; <UNDEFINED> instruction: 0x0000a2b6
    a81c:	006b6800 	rsbeq	r6, fp, r0, lsl #16
    a820:	37161600 	ldrcc	r1, [r6, -r0, lsl #12]
    a824:	b6010000 	strlt	r0, [r1], -r0
    a828:	000000a2 	andeq	r0, r0, r2, lsr #1
    a82c:	00006be1 	andeq	r6, r0, r1, ror #23
    a830:	003aa616 	eorseq	sl, sl, r6, lsl r6
    a834:	a2b70100 	adcsge	r0, r7, #0, 2
    a838:	16000000 	strne	r0, [r0], -r0
    a83c:	1600006c 	strne	r0, [r0], -ip, rrx
    a840:	000038b2 			; <UNDEFINED> instruction: 0x000038b2
    a844:	00b8b801 	adcseq	fp, r8, r1, lsl #16
    a848:	6c4c0000 	marvs	acc0, r0, ip
    a84c:	3a170000 	bcc	5ca854 <_Min_Stack_Size+0x5ca454>
    a850:	01000039 	tsteq	r0, r9, lsr r0
    a854:	00029db9 			; <UNDEFINED> instruction: 0x00029db9
    a858:	58910200 	ldmpl	r1, {r9}
    a85c:	0045ac18 	subeq	sl, r5, r8, lsl ip
    a860:	000c3e08 	andeq	r3, ip, r8, lsl #28
    a864:	50011200 	andpl	r1, r1, r0, lsl #4
    a868:	00007d02 	andeq	r7, r0, r2, lsl #26
    a86c:	f9041500 			; <UNDEFINED> instruction: 0xf9041500
    a870:	19000002 	stmdbne	r0, {r1}
    a874:	00003756 	andeq	r3, r0, r6, asr r7
    a878:	84012101 	strhi	r2, [r1], #-257	; 0x101
    a87c:	22080046 	andcs	r0, r8, #70	; 0x46
    a880:	01000000 	mrseq	r0, (UNDEF: 0)
    a884:	0004809c 	muleq	r4, ip, r0
    a888:	37071a00 	strcc	r1, [r7, -r0, lsl #20]
    a88c:	21010000 	mrscs	r0, (UNDEF: 1)
    a890:	00045501 	andeq	r5, r4, r1, lsl #10
    a894:	00500100 	subseq	r0, r0, r0, lsl #2
    a898:	0038b819 	eorseq	fp, r8, r9, lsl r8
    a89c:	01390100 	teqeq	r9, r0, lsl #2
    a8a0:	080046a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, lr}
    a8a4:	0000001a 	andeq	r0, r0, sl, lsl r0
    a8a8:	04b39c01 	ldrteq	r9, [r3], #3073	; 0xc01
    a8ac:	251a0000 	ldrcs	r0, [sl, #-0]
    a8b0:	01000038 	tsteq	r0, r8, lsr r0
    a8b4:	03c10139 	biceq	r0, r1, #1073741838	; 0x4000000e
    a8b8:	50010000 	andpl	r0, r1, r0
    a8bc:	0027831a 	eoreq	r8, r7, sl, lsl r3
    a8c0:	01390100 	teqeq	r9, r0, lsl #2
    a8c4:	0000011d 	andeq	r0, r0, sp, lsl r1
    a8c8:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    a8cc:	00003a92 	muleq	r0, r2, sl
    a8d0:	c4015601 	strgt	r5, [r1], #-1537	; 0x601
    a8d4:	1a080046 	bne	20a9f4 <_Min_Stack_Size+0x20a5f4>
    a8d8:	01000000 	mrseq	r0, (UNDEF: 0)
    a8dc:	0004e69c 	muleq	r4, ip, r6
    a8e0:	38251a00 	stmdacc	r5!, {r9, fp, ip}
    a8e4:	56010000 	strpl	r0, [r1], -r0
    a8e8:	0003c101 	andeq	ip, r3, r1, lsl #2
    a8ec:	1a500100 	bne	140acf4 <_Min_Stack_Size+0x140a8f4>
    a8f0:	00002783 	andeq	r2, r0, r3, lsl #15
    a8f4:	1d015601 	stcne	6, cr5, [r1, #-4]
    a8f8:	01000001 	tsteq	r0, r1
    a8fc:	a7190051 			; <UNDEFINED> instruction: 0xa7190051
    a900:	01000037 	tsteq	r0, r7, lsr r0
    a904:	46e00173 			; <UNDEFINED> instruction: 0x46e00173
    a908:	00140800 	andseq	r0, r4, r0, lsl #16
    a90c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a910:	0000052b 	andeq	r0, r0, fp, lsr #10
    a914:	0038251a 	eorseq	r2, r8, sl, lsl r5
    a918:	01730100 	cmneq	r3, r0, lsl #2
    a91c:	000003c1 	andeq	r0, r0, r1, asr #7
    a920:	5f1b5001 	svcpl	0x001b5001
    a924:	0100003a 	tsteq	r0, sl, lsr r0
    a928:	00a20173 	adceq	r0, r2, r3, ror r1
    a92c:	6c920000 	ldcvs	0, cr0, [r2], {0}
    a930:	5e1c0000 	cdppl	0, 1, cr0, cr12, cr0, {0}
    a934:	0100002b 	tsteq	r0, fp, lsr #32
    a938:	00a20175 	adceq	r0, r2, r5, ror r1
    a93c:	6cb30000 	ldcvs	0, cr0, [r3]
    a940:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    a944:	00003689 	andeq	r3, r0, r9, lsl #13
    a948:	f4018f01 			; <UNDEFINED> instruction: 0xf4018f01
    a94c:	1a080046 	bne	20aa6c <_Min_Stack_Size+0x20a66c>
    a950:	01000000 	mrseq	r0, (UNDEF: 0)
    a954:	00055e9c 	muleq	r5, ip, lr
    a958:	38251a00 	stmdacc	r5!, {r9, fp, ip}
    a95c:	8f010000 	svchi	0x00010000
    a960:	0003c101 	andeq	ip, r3, r1, lsl #2
    a964:	1a500100 	bne	140ad6c <_Min_Stack_Size+0x140a96c>
    a968:	00002783 	andeq	r2, r0, r3, lsl #15
    a96c:	1d018f01 	stcne	15, cr8, [r1, #-4]
    a970:	01000001 	tsteq	r0, r1
    a974:	71190051 	tstvc	r9, r1, asr r0
    a978:	0100003a 	tsteq	r0, sl, lsr r0
    a97c:	471001a7 	ldrmi	r0, [r0, -r7, lsr #3]
    a980:	001a0800 	andseq	r0, sl, r0, lsl #16
    a984:	9c010000 	stcls	0, cr0, [r1], {-0}
    a988:	00000591 	muleq	r0, r1, r5
    a98c:	0038251a 	eorseq	r2, r8, sl, lsl r5
    a990:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    a994:	000003c1 	andeq	r0, r0, r1, asr #7
    a998:	831a5001 	tsthi	sl, #1
    a99c:	01000027 	tsteq	r0, r7, lsr #32
    a9a0:	011d01a7 	tsteq	sp, r7, lsr #3
    a9a4:	51010000 	mrspl	r0, (UNDEF: 1)
    a9a8:	3a3d1900 	bcc	f50db0 <_Min_Stack_Size+0xf509b0>
    a9ac:	c3010000 	movwgt	r0, #4096	; 0x1000
    a9b0:	00472c01 	subeq	r2, r7, r1, lsl #24
    a9b4:	00001208 	andeq	r1, r0, r8, lsl #4
    a9b8:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    a9bc:	1a000005 	bne	a9d8 <_Min_Stack_Size+0xa5d8>
    a9c0:	00003825 	andeq	r3, r0, r5, lsr #16
    a9c4:	c101c301 	tstgt	r1, r1, lsl #6
    a9c8:	01000003 	tsteq	r0, r3
    a9cc:	33b51b50 			; <UNDEFINED> instruction: 0x33b51b50
    a9d0:	c3010000 	movwgt	r0, #4096	; 0x1000
    a9d4:	00009701 	andeq	r9, r0, r1, lsl #14
    a9d8:	006ce200 	rsbeq	lr, ip, r0, lsl #4
    a9dc:	382a1a00 	stmdacc	sl!, {r9, fp, ip}
    a9e0:	c3010000 	movwgt	r0, #4096	; 0x1000
    a9e4:	00009701 	andeq	r9, r0, r1, lsl #14
    a9e8:	00520100 	subseq	r0, r2, r0, lsl #2
    a9ec:	0039e619 	eorseq	lr, r9, r9, lsl r6
    a9f0:	01de0100 	bicseq	r0, lr, r0, lsl #2
    a9f4:	08004740 	stmdaeq	r0, {r6, r8, r9, sl, lr}
    a9f8:	0000001a 	andeq	r0, r0, sl, lsl r0
    a9fc:	06079c01 	streq	r9, [r7], -r1, lsl #24
    aa00:	251a0000 	ldrcs	r0, [sl, #-0]
    aa04:	01000038 	tsteq	r0, r8, lsr r0
    aa08:	03c101de 	biceq	r0, r1, #-2147483593	; 0x80000037
    aa0c:	50010000 	andpl	r0, r1, r0
    aa10:	0027831a 	eoreq	r8, r7, sl, lsl r3
    aa14:	01de0100 	bicseq	r0, lr, r0, lsl #2
    aa18:	0000011d 	andeq	r0, r0, sp, lsl r1
    aa1c:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    aa20:	000036f1 	strdeq	r3, [r0], -r1
    aa24:	5c01f501 	cfstr32pl	mvfx15, [r1], {1}
    aa28:	14080047 	strne	r0, [r8], #-71	; 0x47
    aa2c:	01000000 	mrseq	r0, (UNDEF: 0)
    aa30:	00064c9c 	muleq	r6, ip, ip
    aa34:	38251a00 	stmdacc	r5!, {r9, fp, ip}
    aa38:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    aa3c:	0003c101 	andeq	ip, r3, r1, lsl #2
    aa40:	1b500100 	blne	140ae48 <_Min_Stack_Size+0x140aa48>
    aa44:	000033b5 			; <UNDEFINED> instruction: 0x000033b5
    aa48:	9701f501 	strls	pc, [r1, -r1, lsl #10]
    aa4c:	00000000 	andeq	r0, r0, r0
    aa50:	1c00006d 	stcne	0, cr0, [r0], {109}	; 0x6d
    aa54:	00002b5e 	andeq	r2, r0, lr, asr fp
    aa58:	a201f701 	andge	pc, r1, #262144	; 0x40000
    aa5c:	21000000 	mrscs	r0, (UNDEF: 0)
    aa60:	0000006d 	andeq	r0, r0, sp, rrx
    aa64:	0039ba19 	eorseq	fp, r9, r9, lsl sl
    aa68:	02100100 	andseq	r0, r0, #0, 2
    aa6c:	08004770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, lr}
    aa70:	0000001a 	andeq	r0, r0, sl, lsl r0
    aa74:	067f9c01 	ldrbteq	r9, [pc], -r1, lsl #24
    aa78:	251a0000 	ldrcs	r0, [sl, #-0]
    aa7c:	01000038 	tsteq	r0, r8, lsr r0
    aa80:	03c10210 	biceq	r0, r1, #16, 4
    aa84:	50010000 	andpl	r0, r1, r0
    aa88:	0027831a 	eoreq	r8, r7, sl, lsl r3
    aa8c:	02100100 	andseq	r0, r0, #0, 2
    aa90:	0000011d 	andeq	r0, r0, sp, lsl r1
    aa94:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    aa98:	0000386e 	andeq	r3, r0, lr, ror #16
    aa9c:	8c022801 	stchi	8, cr2, [r2], {1}
    aaa0:	1a080047 	bne	20abc4 <_Min_Stack_Size+0x20a7c4>
    aaa4:	01000000 	mrseq	r0, (UNDEF: 0)
    aaa8:	0006b29c 	muleq	r6, ip, r2
    aaac:	38251a00 	stmdacc	r5!, {r9, fp, ip}
    aab0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    aab4:	0003c102 	andeq	ip, r3, r2, lsl #2
    aab8:	1a500100 	bne	140aec0 <_Min_Stack_Size+0x140aac0>
    aabc:	00002783 	andeq	r2, r0, r3, lsl #15
    aac0:	1d022801 	stcne	8, cr2, [r2, #-4]
    aac4:	01000001 	tsteq	r0, r1
    aac8:	28190051 	ldmdacs	r9, {r0, r4, r6}
    aacc:	0100003a 	tsteq	r0, sl, lsr r0
    aad0:	47a80242 	strmi	r0, [r8, r2, asr #4]!
    aad4:	001a0800 	andseq	r0, sl, r0, lsl #16
    aad8:	9c010000 	stcls	0, cr0, [r1], {-0}
    aadc:	000006e5 	andeq	r0, r0, r5, ror #13
    aae0:	0038251a 	eorseq	r2, r8, sl, lsl r5
    aae4:	02420100 	subeq	r0, r2, #0, 2
    aae8:	000003c1 	andeq	r0, r0, r1, asr #7
    aaec:	831a5001 	tsthi	sl, #1
    aaf0:	01000027 	tsteq	r0, r7, lsr #32
    aaf4:	011d0242 	tsteq	sp, r2, asr #4
    aaf8:	51010000 	mrspl	r0, (UNDEF: 1)
    aafc:	36a61900 	strtcc	r1, [r6], r0, lsl #18
    ab00:	5a010000 	bpl	4ab08 <_Min_Stack_Size+0x4a708>
    ab04:	0047c402 	subeq	ip, r7, r2, lsl #8
    ab08:	00001a08 	andeq	r1, r0, r8, lsl #20
    ab0c:	189c0100 	ldmne	ip, {r8}
    ab10:	1a000007 	bne	ab34 <_Min_Stack_Size+0xa734>
    ab14:	00003825 	andeq	r3, r0, r5, lsr #16
    ab18:	c1025a01 	tstgt	r2, r1, lsl #20
    ab1c:	01000003 	tsteq	r0, r3
    ab20:	27831a50 			; <UNDEFINED> instruction: 0x27831a50
    ab24:	5a010000 	bpl	4ab2c <_Min_Stack_Size+0x4a72c>
    ab28:	00011d02 	andeq	r1, r1, r2, lsl #26
    ab2c:	00510100 	subseq	r0, r1, r0, lsl #2
    ab30:	00399e19 	eorseq	r9, r9, r9, lsl lr
    ab34:	02740100 	rsbseq	r0, r4, #0, 2
    ab38:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
    ab3c:	0000001c 	andeq	r0, r0, ip, lsl r0
    ab40:	074b9c01 	strbeq	r9, [fp, -r1, lsl #24]
    ab44:	251a0000 	ldrcs	r0, [sl, #-0]
    ab48:	01000038 	tsteq	r0, r8, lsr r0
    ab4c:	03c10274 	biceq	r0, r1, #116, 4	; 0x40000007
    ab50:	50010000 	andpl	r0, r1, r0
    ab54:	0037f11a 	eorseq	pc, r7, sl, lsl r1	; <UNPREDICTABLE>
    ab58:	02740100 	rsbseq	r0, r4, #0, 2
    ab5c:	000000a2 	andeq	r0, r0, r2, lsr #1
    ab60:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    ab64:	000036da 	ldrdeq	r3, [r0], -sl
    ab68:	fc029a01 	stc2	10, cr9, [r2], {1}
    ab6c:	1c080047 	stcne	0, cr0, [r8], {71}	; 0x47
    ab70:	01000000 	mrseq	r0, (UNDEF: 0)
    ab74:	00077e9c 	muleq	r7, ip, lr
    ab78:	38251a00 	stmdacc	r5!, {r9, fp, ip}
    ab7c:	9a010000 	bls	4ab84 <_Min_Stack_Size+0x4a784>
    ab80:	0003c102 	andeq	ip, r3, r2, lsl #2
    ab84:	1a500100 	bne	140af8c <_Min_Stack_Size+0x140ab8c>
    ab88:	00003838 	andeq	r3, r0, r8, lsr r8
    ab8c:	a2029a01 	andge	r9, r2, #4096	; 0x1000
    ab90:	01000000 	mrseq	r0, (UNDEF: 0)
    ab94:	86190051 			; <UNDEFINED> instruction: 0x86190051
    ab98:	01000037 	tsteq	r0, r7, lsr r0
    ab9c:	481802b6 	ldmdami	r8, {r1, r2, r4, r5, r7, r9}
    aba0:	001c0800 	andseq	r0, ip, r0, lsl #16
    aba4:	9c010000 	stcls	0, cr0, [r1], {-0}
    aba8:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
    abac:	0038251a 	eorseq	r2, r8, sl, lsl r5
    abb0:	02b60100 	adcseq	r0, r6, #0, 2
    abb4:	000003c1 	andeq	r0, r0, r1, asr #7
    abb8:	161a5001 	ldrne	r5, [sl], -r1
    abbc:	01000038 	tsteq	r0, r8, lsr r0
    abc0:	00a202b6 	strhteq	r0, [r2], r6
    abc4:	51010000 	mrspl	r0, (UNDEF: 1)
    abc8:	37e61900 	strbcc	r1, [r6, r0, lsl #18]!
    abcc:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    abd0:	00483402 	subeq	r3, r8, r2, lsl #8
    abd4:	00001a08 	andeq	r1, r0, r8, lsl #20
    abd8:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    abdc:	1a000007 	bne	ac00 <_Min_Stack_Size+0xa800>
    abe0:	00003825 	andeq	r3, r0, r5, lsr #16
    abe4:	c102ce01 	tstgt	r2, r1, lsl #28
    abe8:	01000003 	tsteq	r0, r3
    abec:	27831a50 			; <UNDEFINED> instruction: 0x27831a50
    abf0:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    abf4:	00011d02 	andeq	r1, r1, r2, lsl #26
    abf8:	00510100 	subseq	r0, r1, r0, lsl #2
    abfc:	00372019 	eorseq	r2, r7, r9, lsl r0
    ac00:	02f40100 	rscseq	r0, r4, #0, 2
    ac04:	08004850 	stmdaeq	r0, {r4, r6, fp, lr}
    ac08:	00000004 	andeq	r0, r0, r4
    ac0c:	08179c01 	ldmdaeq	r7, {r0, sl, fp, ip, pc}
    ac10:	251a0000 	ldrcs	r0, [sl, #-0]
    ac14:	01000038 	tsteq	r0, r8, lsr r0
    ac18:	03c102f4 	biceq	r0, r1, #244, 4	; 0x4000000f
    ac1c:	50010000 	andpl	r0, r1, r0
    ac20:	0037281a 	eorseq	r2, r7, sl, lsl r8
    ac24:	02f40100 	rscseq	r0, r4, #0, 2
    ac28:	00000097 	muleq	r0, r7, r0
    ac2c:	1d005101 	stfnes	f5, [r0, #-4]
    ac30:	00003957 	andeq	r3, r0, r7, asr r9
    ac34:	97030101 	strls	r0, [r3, -r1, lsl #2]
    ac38:	54000000 	strpl	r0, [r0], #-0
    ac3c:	06080048 	streq	r0, [r8], -r8, asr #32
    ac40:	01000000 	mrseq	r0, (UNDEF: 0)
    ac44:	0008429c 	muleq	r8, ip, r2
    ac48:	38251b00 	stmdacc	r5!, {r8, r9, fp, ip}
    ac4c:	01010000 	mrseq	r0, (UNDEF: 1)
    ac50:	0003c103 	andeq	ip, r3, r3, lsl #2
    ac54:	006d5100 	rsbeq	r5, sp, r0, lsl #2
    ac58:	06190000 	ldreq	r0, [r9], -r0
    ac5c:	01000038 	tsteq	r0, r8, lsr r0
    ac60:	485c0320 	ldmdami	ip, {r5, r8, r9}^
    ac64:	001a0800 	andseq	r0, sl, r0, lsl #16
    ac68:	9c010000 	stcls	0, cr0, [r1], {-0}
    ac6c:	00000875 	andeq	r0, r0, r5, ror r8
    ac70:	0038251a 	eorseq	r2, r8, sl, lsl r5
    ac74:	03200100 	teqeq	r0, #0, 2
    ac78:	000003c1 	andeq	r0, r0, r1, asr #7
    ac7c:	831a5001 	tsthi	sl, #1
    ac80:	01000027 	tsteq	r0, r7, lsr #32
    ac84:	011d0320 	tsteq	sp, r0, lsr #6
    ac88:	51010000 	mrspl	r0, (UNDEF: 1)
    ac8c:	37bf1900 	ldrcc	r1, [pc, r0, lsl #18]!
    ac90:	3f010000 	svccc	0x00010000
    ac94:	00487803 	subeq	r7, r8, r3, lsl #16
    ac98:	00001c08 	andeq	r1, r0, r8, lsl #24
    ac9c:	a89c0100 	ldmge	ip, {r8}
    aca0:	1a000008 	bne	acc8 <_Min_Stack_Size+0xa8c8>
    aca4:	00003825 	andeq	r3, r0, r5, lsr #16
    aca8:	c1033f01 	tstgt	r3, r1, lsl #30
    acac:	01000003 	tsteq	r0, r3
    acb0:	39fc1a50 	ldmibcc	ip!, {r4, r6, r9, fp, ip}^
    acb4:	3f010000 	svccc	0x00010000
    acb8:	0000a203 	andeq	sl, r0, r3, lsl #4
    acbc:	00510100 	subseq	r0, r1, r0, lsl #2
    acc0:	00372d19 	eorseq	r2, r7, r9, lsl sp
    acc4:	03570100 	cmpeq	r7, #0, 2
    acc8:	08004894 	stmdaeq	r0, {r2, r4, r7, fp, lr}
    accc:	0000001a 	andeq	r0, r0, sl, lsl r0
    acd0:	08db9c01 	ldmeq	fp, {r0, sl, fp, ip, pc}^
    acd4:	251a0000 	ldrcs	r0, [sl, #-0]
    acd8:	01000038 	tsteq	r0, r8, lsr r0
    acdc:	03c10357 	biceq	r0, r1, #1543503873	; 0x5c000001
    ace0:	50010000 	andpl	r0, r1, r0
    ace4:	0027831a 	eoreq	r8, r7, sl, lsl r3
    ace8:	03570100 	cmpeq	r7, #0, 2
    acec:	0000011d 	andeq	r0, r0, sp, lsl r1
    acf0:	1d005101 	stfnes	f5, [r0, #-4]
    acf4:	0000369b 	muleq	r0, fp, r6
    acf8:	97036d01 	strls	r6, [r3, -r1, lsl #26]
    acfc:	b0000000 	andlt	r0, r0, r0
    ad00:	08080048 	stmdaeq	r8, {r3, r6}
    ad04:	01000000 	mrseq	r0, (UNDEF: 0)
    ad08:	0009069c 	muleq	r9, ip, r6
    ad0c:	38251b00 	stmdacc	r5!, {r8, r9, fp, ip}
    ad10:	6d010000 	stcvs	0, cr0, [r1, #-0]
    ad14:	0003c103 	andeq	ip, r3, r3, lsl #2
    ad18:	006d7200 	rsbeq	r7, sp, r0, lsl #4
    ad1c:	90190000 	andsls	r0, r9, r0
    ad20:	01000038 	tsteq	r0, r8, lsr r0
    ad24:	48b8038e 	ldmmi	r8!, {r1, r2, r3, r7, r8, r9}
    ad28:	001a0800 	andseq	r0, sl, r0, lsl #16
    ad2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ad30:	00000939 	andeq	r0, r0, r9, lsr r9
    ad34:	0038251a 	eorseq	r2, r8, sl, lsl r5
    ad38:	038e0100 	orreq	r0, lr, #0, 2
    ad3c:	000003c1 	andeq	r0, r0, r1, asr #7
    ad40:	831a5001 	tsthi	sl, #1
    ad44:	01000027 	tsteq	r0, r7, lsr #32
    ad48:	011d038e 	tsteq	sp, lr, lsl #7
    ad4c:	51010000 	mrspl	r0, (UNDEF: 1)
    ad50:	376f1900 	strbcc	r1, [pc, -r0, lsl #18]!
    ad54:	a6010000 	strge	r0, [r1], -r0
    ad58:	0048d403 	subeq	sp, r8, r3, lsl #8
    ad5c:	00001a08 	andeq	r1, r0, r8, lsl #20
    ad60:	6c9c0100 	ldfvss	f0, [ip], {0}
    ad64:	1a000009 	bne	ad90 <_Min_Stack_Size+0xa990>
    ad68:	00003825 	andeq	r3, r0, r5, lsr #16
    ad6c:	c103a601 	tstgt	r3, r1, lsl #12
    ad70:	01000003 	tsteq	r0, r3
    ad74:	27831a50 			; <UNDEFINED> instruction: 0x27831a50
    ad78:	a6010000 	strge	r0, [r1], -r0
    ad7c:	00011d03 	andeq	r1, r1, r3, lsl #26
    ad80:	00510100 	subseq	r0, r1, r0, lsl #2
    ad84:	00398d1d 	eorseq	r8, r9, sp, lsl sp
    ad88:	04300100 	ldrteq	r0, [r0], #-256	; 0x100
    ad8c:	000000a2 	andeq	r0, r0, r2, lsr #1
    ad90:	080048f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, lr}
    ad94:	00000018 	andeq	r0, r0, r8, lsl r0
    ad98:	09b69c01 	ldmibeq	r6!, {r0, sl, fp, ip, pc}
    ad9c:	251b0000 	ldrcs	r0, [fp, #-0]
    ada0:	01000038 	tsteq	r0, r8, lsr r0
    ada4:	03c10430 	biceq	r0, r1, #48, 8	; 0x30000000
    ada8:	6d930000 	ldcvs	0, cr0, [r3]
    adac:	ba1b0000 	blt	6cadb4 <_Min_Stack_Size+0x6ca9b4>
    adb0:	01000036 	tsteq	r0, r6, lsr r0
    adb4:	00970430 	addseq	r0, r7, r0, lsr r4
    adb8:	6db40000 	ldcvs	0, cr0, [r4]
    adbc:	741e0000 	ldrvc	r0, [lr], #-0
    adc0:	0100706d 	tsteq	r0, sp, rrx
    adc4:	00ca0432 	sbceq	r0, sl, r2, lsr r4
    adc8:	91020000 	mrsls	r0, (UNDEF: 2)
    adcc:	cd19007c 	ldcgt	0, cr0, [r9, #-496]	; 0xfffffe10
    add0:	01000036 	tsteq	r0, r6, lsr r0
    add4:	4908044b 	stmdbmi	r8, {r0, r1, r3, r6, sl}
    add8:	00140800 	andseq	r0, r4, r0, lsl #16
    addc:	9c010000 	stcls	0, cr0, [r1], {-0}
    ade0:	000009f9 	strdeq	r0, [r0], -r9
    ade4:	0038251a 	eorseq	r2, r8, sl, lsl r5
    ade8:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    adec:	000003c1 	andeq	r0, r0, r1, asr #7
    adf0:	ab1b5001 	blge	6dedfc <_Min_Stack_Size+0x6de9fc>
    adf4:	01000038 	tsteq	r0, r8, lsr r0
    adf8:	00a2044b 	adceq	r0, r2, fp, asr #8
    adfc:	6dd50000 	ldclvs	0, cr0, [r5]
    ae00:	831a0000 	tsthi	sl, #0
    ae04:	01000027 	tsteq	r0, r7, lsr #32
    ae08:	011d044b 	tsteq	sp, fp, asr #8
    ae0c:	52010000 	andpl	r0, r1, #0
    ae10:	38811d00 	stmcc	r1, {r8, sl, fp, ip}
    ae14:	86010000 	strhi	r0, [r1], -r0
    ae18:	00013f04 	andeq	r3, r1, r4, lsl #30
    ae1c:	00491c00 	subeq	r1, r9, r0, lsl #24
    ae20:	00001808 	andeq	r1, r0, r8, lsl #16
    ae24:	729c0100 	addsvc	r0, ip, #0, 2
    ae28:	1b00000a 	blne	ae58 <_Min_Stack_Size+0xaa58>
    ae2c:	00003825 	andeq	r3, r0, r5, lsr #16
    ae30:	c1048601 	tstgt	r4, r1, lsl #12
    ae34:	0f000003 	svceq	0x00000003
    ae38:	1a00006e 	bne	aff8 <_Min_Stack_Size+0xabf8>
    ae3c:	0000394d 	andeq	r3, r0, sp, asr #18
    ae40:	b8048601 	stmdalt	r4, {r0, r9, sl, pc}
    ae44:	01000000 	mrseq	r0, (UNDEF: 0)
    ae48:	3a1e1c51 	bcc	791f94 <_Min_Stack_Size+0x791b94>
    ae4c:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    ae50:	0000b804 	andeq	fp, r0, r4, lsl #16
    ae54:	006e3000 	rsbeq	r3, lr, r0
    ae58:	39cd1c00 	stmibcc	sp, {sl, fp, ip}^
    ae5c:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    ae60:	0000b804 	andeq	fp, r0, r4, lsl #16
    ae64:	006e8400 	rsbeq	r8, lr, r0, lsl #8
    ae68:	39d31c00 	ldmibcc	r3, {sl, fp, ip}^
    ae6c:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    ae70:	0000b804 	andeq	fp, r0, r4, lsl #16
    ae74:	006eba00 	rsbeq	fp, lr, r0, lsl #20
    ae78:	39df1c00 	ldmibcc	pc, {sl, fp, ip}^	; <UNPREDICTABLE>
    ae7c:	8a010000 	bhi	4ae84 <_Min_Stack_Size+0x4aa84>
    ae80:	00013f04 	andeq	r3, r1, r4, lsl #30
    ae84:	006ee100 	rsbeq	lr, lr, r0, lsl #2
    ae88:	491d0000 	ldmdbmi	sp, {}	; <UNPREDICTABLE>
    ae8c:	01000038 	tsteq	r0, r8, lsr r0
    ae90:	00b804b6 	ldrhteq	r0, [r8], r6
    ae94:	49340000 	ldmdbmi	r4!, {}	; <UNPREDICTABLE>
    ae98:	00100800 	andseq	r0, r0, r0, lsl #16
    ae9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    aea0:	00000acd 	andeq	r0, r0, sp, asr #21
    aea4:	0038251b 	eorseq	r2, r8, fp, lsl r5
    aea8:	04b60100 	ldrteq	r0, [r6], #256	; 0x100
    aeac:	000003c1 	andeq	r0, r0, r1, asr #7
    aeb0:	00006f41 	andeq	r6, r0, r1, asr #30
    aeb4:	003a1e1c 	eorseq	r1, sl, ip, lsl lr
    aeb8:	04b80100 	ldrteq	r0, [r8], #256	; 0x100
    aebc:	000000b8 	strheq	r0, [r0], -r8
    aec0:	00006f62 	andeq	r6, r0, r2, ror #30
    aec4:	0039cd1c 	eorseq	ip, r9, ip, lsl sp
    aec8:	04b90100 	ldrteq	r0, [r9], #256	; 0x100
    aecc:	000000b8 	strheq	r0, [r0], -r8
    aed0:	00006fb6 			; <UNDEFINED> instruction: 0x00006fb6
    aed4:	0039d31c 	eorseq	sp, r9, ip, lsl r3
    aed8:	04b90100 	ldrteq	r0, [r9], #256	; 0x100
    aedc:	000000b8 	strheq	r0, [r0], -r8
    aee0:	00006fec 	andeq	r6, r0, ip, ror #31
    aee4:	3a0c1d00 	bcc	3122ec <_Min_Stack_Size+0x311eec>
    aee8:	ed010000 	stc	0, cr0, [r1, #-0]
    aeec:	0000ef04 	andeq	lr, r0, r4, lsl #30
    aef0:	00494400 	subeq	r4, r9, r0, lsl #8
    aef4:	00003608 	andeq	r3, r0, r8, lsl #12
    aef8:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    aefc:	1b00000b 	blne	af30 <_Min_Stack_Size+0xab30>
    af00:	00003825 	andeq	r3, r0, r5, lsr #16
    af04:	c104ed01 	tstgt	r4, r1, lsl #26
    af08:	13000003 	movwne	r0, #3
    af0c:	1b000070 	blne	b0d4 <_Min_Stack_Size+0xacd4>
    af10:	0000385a 	andeq	r3, r0, sl, asr r8
    af14:	b804ed01 	stmdalt	r4, {r0, r8, sl, fp, sp, lr, pc}
    af18:	3f000000 	svccc	0x00000000
    af1c:	1c000070 	stcne	0, cr0, [r0], {112}	; 0x70
    af20:	00002983 	andeq	r2, r0, r3, lsl #19
    af24:	ef04ef01 	svc	0x0004ef01
    af28:	5d000000 	stcpl	0, cr0, [r0, #-0]
    af2c:	1f000070 	svcne	0x00000070
    af30:	000037ff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    af34:	ca04f001 	bgt	146f40 <_Min_Stack_Size+0x146b40>
    af38:	02000000 	andeq	r0, r0, #0
    af3c:	511f7891 			; <UNDEFINED> instruction: 0x511f7891
    af40:	0100003a 	tsteq	r0, sl, lsr r0
    af44:	00ca04f0 	strdeq	r0, [sl], #64	; 0x40
    af48:	91020000 	mrsls	r0, (UNDEF: 2)
    af4c:	6719007c 			; <UNDEFINED> instruction: 0x6719007c
    af50:	01000039 	tsteq	r0, r9, lsr r0
    af54:	497c053a 	ldmdbmi	ip!, {r1, r3, r4, r5, r8, sl}^
    af58:	00080800 	andeq	r0, r8, r0, lsl #16
    af5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    af60:	00000b7b 	andeq	r0, r0, fp, ror fp
    af64:	0038251a 	eorseq	r2, r8, sl, lsl r5
    af68:	053a0100 	ldreq	r0, [sl, #-256]!	; 0x100
    af6c:	000003c1 	andeq	r0, r0, r1, asr #7
    af70:	5a1b5001 	bpl	6def7c <_Min_Stack_Size+0x6deb7c>
    af74:	01000038 	tsteq	r0, r8, lsr r0
    af78:	00b8053a 	adcseq	r0, r8, sl, lsr r5
    af7c:	708f0000 	addvc	r0, pc, r0
    af80:	d51c0000 	ldrle	r0, [ip, #-0]
    af84:	01000037 	tsteq	r0, r7, lsr r0
    af88:	00b8053c 	adcseq	r0, r8, ip, lsr r5
    af8c:	70be0000 	adcsvc	r0, lr, r0
    af90:	1d000000 	stcne	0, cr0, [r0, #-0]
    af94:	00003a82 	andeq	r3, r0, r2, lsl #21
    af98:	fb055c01 	blx	161fa6 <_Min_Stack_Size+0x161ba6>
    af9c:	84000000 	strhi	r0, [r0], #-0
    afa0:	1c080049 	stcne	0, cr0, [r8], {73}	; 0x49
    afa4:	01000000 	mrseq	r0, (UNDEF: 0)
    afa8:	000bd69c 	muleq	fp, ip, r6
    afac:	38251b00 	stmdacc	r5!, {r8, r9, fp, ip}
    afb0:	5c010000 	stcpl	0, cr0, [r1], {-0}
    afb4:	0003c105 	andeq	ip, r3, r5, lsl #2
    afb8:	00710100 	rsbseq	r0, r1, r0, lsl #2
    afbc:	38ab1b00 	stmiacc	fp!, {r8, r9, fp, ip}
    afc0:	5c010000 	stcpl	0, cr0, [r1], {-0}
    afc4:	0000b805 	andeq	fp, r0, r5, lsl #16
    afc8:	00712200 	rsbseq	r2, r1, r0, lsl #4
    afcc:	29831c00 	stmibcs	r3, {sl, fp, ip}
    afd0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    afd4:	0000fb05 	andeq	pc, r0, r5, lsl #22
    afd8:	00715c00 	rsbseq	r5, r1, r0, lsl #24
    afdc:	39d91c00 	ldmibcc	r9, {sl, fp, ip}^
    afe0:	5f010000 	svcpl	0x00010000
    afe4:	0000b805 	andeq	fp, r0, r5, lsl #16
    afe8:	00717b00 	rsbseq	r7, r1, r0, lsl #22
    afec:	73190000 	tstvc	r9, #0
    aff0:	01000036 	tsteq	r0, r6, lsr r0
    aff4:	49a00598 	stmibmi	r0!, {r3, r4, r7, r8, sl}
    aff8:	00080800 	andeq	r0, r8, r0, lsl #16
    affc:	9c010000 	stcls	0, cr0, [r1], {-0}
    b000:	00000c1b 	andeq	r0, r0, fp, lsl ip
    b004:	0038251a 	eorseq	r2, r8, sl, lsl r5
    b008:	05980100 	ldreq	r0, [r8, #256]	; 0x100
    b00c:	000003c1 	andeq	r0, r0, r1, asr #7
    b010:	ab1b5001 	blge	6df01c <_Min_Stack_Size+0x6dec1c>
    b014:	01000038 	tsteq	r0, r8, lsr r0
    b018:	00b80598 	umlalseq	r0, r8, r8, r5
    b01c:	71da0000 	bicsvc	r0, sl, r0
    b020:	d51c0000 	ldrle	r0, [ip, #-0]
    b024:	01000037 	tsteq	r0, r7, lsr r0
    b028:	00b8059a 	umlalseq	r0, r8, sl, r5
    b02c:	72090000 	andvc	r0, r9, #0
    b030:	20000000 	andcs	r0, r0, r0
    b034:	0000039d 	muleq	r0, sp, r3
    b038:	d406a707 	strle	sl, [r6], #-1799	; 0x707
    b03c:	21000000 	mrscs	r0, (UNDEF: 0)
    b040:	00002ab7 			; <UNDEFINED> instruction: 0x00002ab7
    b044:	3e024905 	cdpcc	9, 0, cr4, cr2, cr5, {0}
    b048:	2200000c 	andcs	r0, r0, #12
    b04c:	000000b8 	strheq	r0, [r0], -r8
    b050:	00011d22 	andeq	r1, r1, r2, lsr #26
    b054:	34210000 	strtcc	r0, [r1], #-0
    b058:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    b05c:	0c500232 	lfmeq	f0, 2, [r0], {50}	; 0x32
    b060:	50220000 	eorpl	r0, r2, r0
    b064:	0000000c 	andeq	r0, r0, ip
    b068:	029d0415 	addseq	r0, sp, #352321536	; 0x15000000
    b06c:	3b000000 	blcc	b074 <_Min_Stack_Size+0xac74>
    b070:	04000007 	streq	r0, [r0], #-7
    b074:	0021ab00 	eoreq	sl, r1, r0, lsl #22
    b078:	84010400 	strhi	r0, [r1], #-1024	; 0x400
    b07c:	01000002 	tsteq	r0, r2
    b080:	00003da7 	andeq	r3, r0, r7, lsr #27
    b084:	00000101 	andeq	r0, r0, r1, lsl #2
    b088:	00001298 	muleq	r0, r8, r2
    b08c:	00000000 	andeq	r0, r0, r0
    b090:	00003cf1 	strdeq	r3, [r0], -r1
    b094:	50060102 	andpl	r0, r6, r2, lsl #2
    b098:	02000001 	andeq	r0, r0, #1
    b09c:	014e0801 	cmpeq	lr, r1, lsl #16
    b0a0:	02020000 	andeq	r0, r2, #0
    b0a4:	0000df05 	andeq	sp, r0, r5, lsl #30
    b0a8:	005c0300 	subseq	r0, ip, r0, lsl #6
    b0ac:	26020000 	strcs	r0, [r2], -r0
    b0b0:	00000045 	andeq	r0, r0, r5, asr #32
    b0b4:	e5070202 	str	r0, [r7, #-514]	; 0x202
    b0b8:	03000001 	movweq	r0, #1
    b0bc:	00000377 	andeq	r0, r0, r7, ror r3
    b0c0:	00573702 	subseq	r3, r7, r2, lsl #14
    b0c4:	04020000 	streq	r0, [r2], #-0
    b0c8:	0000c505 	andeq	ip, r0, r5, lsl #10
    b0cc:	00510300 	subseq	r0, r1, r0, lsl #6
    b0d0:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    b0d4:	00000069 	andeq	r0, r0, r9, rrx
    b0d8:	78070402 	stmdavc	r7, {r1, sl}
    b0dc:	02000001 	andeq	r0, r0, #1
    b0e0:	00c00508 	sbceq	r0, r0, r8, lsl #10
    b0e4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b0e8:	00017307 	andeq	r7, r1, r7, lsl #6
    b0ec:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    b0f0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    b0f4:	7d070402 	cfstrsvc	mvf0, [r7, #-8]
    b0f8:	03000001 	movweq	r0, #1
    b0fc:	0000005e 	andeq	r0, r0, lr, asr r0
    b100:	003a3603 	eorseq	r3, sl, r3, lsl #12
    b104:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    b108:	03000003 	movweq	r0, #3
    b10c:	00004c41 	andeq	r4, r0, r1, asr #24
    b110:	00530300 	subseq	r0, r3, r0, lsl #6
    b114:	42030000 	andmi	r0, r3, #0
    b118:	0000005e 	andeq	r0, r0, lr, asr r0
    b11c:	2c070402 	cfstrscs	mvf0, [r7], {2}
    b120:	05000000 	streq	r0, [r0, #-0]
    b124:	000000a2 	andeq	r0, r0, r2, lsr #1
    b128:	00009705 	andeq	r9, r0, r5, lsl #14
    b12c:	04010600 	streq	r0, [r1], #-1536	; 0x600
    b130:	00d401f7 	ldrsheq	r0, [r4], #23
    b134:	e4070000 	str	r0, [r7], #-0
    b138:	00000028 	andeq	r0, r0, r8, lsr #32
    b13c:	54455308 	strbpl	r5, [r5], #-776	; 0x308
    b140:	09000100 	stmdbeq	r0, {r8}
    b144:	00003d29 	andeq	r3, r0, r9, lsr #26
    b148:	be01f704 	cdplt	7, 0, cr15, cr1, cr4, {0}
    b14c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    b150:	00003ca0 	andeq	r3, r0, r0, lsr #25
    b154:	be01f704 	cdplt	7, 0, cr15, cr1, cr4, {0}
    b158:	06000000 	streq	r0, [r0], -r0
    b15c:	01f90401 	mvnseq	r0, r1, lsl #8
    b160:	00000102 	andeq	r0, r0, r2, lsl #2
    b164:	00048807 	andeq	r8, r4, r7, lsl #16
    b168:	c0070000 	andgt	r0, r7, r0
    b16c:	01000005 	tsteq	r0, r5
    b170:	092a0900 	stmdbeq	sl!, {r8, fp}
    b174:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    b178:	0000ec01 	andeq	lr, r0, r1, lsl #24
    b17c:	04180a00 	ldreq	r0, [r8], #-2560	; 0xa00
    b180:	016502b1 	strheq	r0, [r5, #-33]!	; 0xffffffdf
    b184:	430b0000 	movwmi	r0, #45056	; 0xb000
    b188:	b3040052 	movwlt	r0, #16466	; 0x4052
    b18c:	0000b402 	andeq	fp, r0, r2, lsl #8
    b190:	3f0c0000 	svccc	0x000c0000
    b194:	0400003d 	streq	r0, [r0], #-61	; 0x3d
    b198:	00b402b4 	ldrhteq	r0, [r4], r4
    b19c:	0b040000 	bleq	10b1a4 <_Min_Stack_Size+0x10ada4>
    b1a0:	00524150 	subseq	r4, r2, r0, asr r1
    b1a4:	b402b504 	strlt	fp, [r2], #-1284	; 0x504
    b1a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b1ac:	003d3a0c 	eorseq	r3, sp, ip, lsl #20
    b1b0:	02b60400 	adcseq	r0, r6, #0, 8
    b1b4:	000000b4 	strheq	r0, [r0], -r4
    b1b8:	3cc80c0c 	stclcc	12, cr0, [r8], {12}
    b1bc:	b7040000 	strlt	r0, [r4, -r0]
    b1c0:	0000b402 	andeq	fp, r0, r2, lsl #8
    b1c4:	460b1000 	strmi	r1, [fp], -r0
    b1c8:	04005243 	streq	r5, [r0], #-579	; 0x243
    b1cc:	00b402b8 	ldrhteq	r0, [r4], r8
    b1d0:	00140000 	andseq	r0, r4, r0
    b1d4:	003ac709 	eorseq	ip, sl, r9, lsl #14
    b1d8:	02b90400 	adcseq	r0, r9, #0, 8
    b1dc:	0000010e 	andeq	r0, r0, lr, lsl #2
    b1e0:	bb04100a 	bllt	10f210 <_Min_Stack_Size+0x10ee10>
    b1e4:	0001af02 	andeq	sl, r1, r2, lsl #30
    b1e8:	3c0c0c00 	stccc	12, cr0, [ip], {-0}
    b1ec:	bd040000 	stclt	0, cr0, [r4, #-0]
    b1f0:	0000b402 	andeq	fp, r0, r2, lsl #8
    b1f4:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
    b1f8:	0400003c 	streq	r0, [r0], #-60	; 0x3c
    b1fc:	00b402be 	ldrhteq	r0, [r4], lr
    b200:	0c040000 	stceq	0, cr0, [r4], {-0}
    b204:	00003d34 	andeq	r3, r0, r4, lsr sp
    b208:	b402bf04 	strlt	fp, [r2], #-3844	; 0xf04
    b20c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b210:	003d8d0c 	eorseq	r8, sp, ip, lsl #26
    b214:	02c00400 	sbceq	r0, r0, #0, 8
    b218:	000000b4 	strheq	r0, [r0], -r4
    b21c:	3209000c 	andcc	r0, r9, #12
    b220:	0400003b 	streq	r0, [r0], #-59	; 0x3b
    b224:	017102c1 	cmneq	r1, r1, asr #5
    b228:	3c0d0000 	stccc	0, cr0, [sp], {-0}
    b22c:	02783605 	rsbseq	r3, r8, #5242880	; 0x500000
    b230:	720e0000 	andvc	r0, lr, #0
    b234:	0500003d 	streq	r0, [r0, #-61]	; 0x3d
    b238:	0000a238 	andeq	sl, r0, r8, lsr r2
    b23c:	840e0000 	strhi	r0, [lr], #-0
    b240:	0500003b 	streq	r0, [r0, #-59]	; 0x3b
    b244:	0000a23b 	andeq	sl, r0, fp, lsr r2
    b248:	930e0400 	movwls	r0, #58368	; 0xe400
    b24c:	0500003d 	streq	r0, [r0, #-61]	; 0x3d
    b250:	0000a23d 	andeq	sl, r0, sp, lsr r2
    b254:	7c0e0800 	stcvc	8, cr0, [lr], {-0}
    b258:	0500003b 	streq	r0, [r0, #-59]	; 0x3b
    b25c:	0000a241 	andeq	sl, r0, r1, asr #4
    b260:	5d0e0c00 	stcpl	12, cr0, [lr, #-0]
    b264:	0500003c 	streq	r0, [r0, #-60]	; 0x3c
    b268:	0000a245 	andeq	sl, r0, r5, asr #4
    b26c:	d90e1000 	stmdble	lr, {ip}
    b270:	0500003b 	streq	r0, [r0, #-59]	; 0x3b
    b274:	0000a249 	andeq	sl, r0, r9, asr #4
    b278:	9b0e1400 	blls	390280 <_Min_Stack_Size+0x38fe80>
    b27c:	0500003b 	streq	r0, [r0, #-59]	; 0x3b
    b280:	0000a24c 	andeq	sl, r0, ip, asr #4
    b284:	360e1800 	strcc	r1, [lr], -r0, lsl #16
    b288:	0500003c 	streq	r0, [r0, #-60]	; 0x3c
    b28c:	0000a24f 	andeq	sl, r0, pc, asr #4
    b290:	270e1c00 	strcs	r1, [lr, -r0, lsl #24]
    b294:	0500003e 	streq	r0, [r0, #-62]	; 0x3e
    b298:	0000a252 	andeq	sl, r0, r2, asr r2
    b29c:	f30e2000 	vhadd.u8	d2, d14, d0
    b2a0:	0500003d 	streq	r0, [r0, #-61]	; 0x3d
    b2a4:	0000a255 	andeq	sl, r0, r5, asr r2
    b2a8:	e00e2400 	and	r2, lr, r0, lsl #8
    b2ac:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    b2b0:	0000a25a 	andeq	sl, r0, sl, asr r2
    b2b4:	540e2800 	strpl	r2, [lr], #-2048	; 0x800
    b2b8:	0500003d 	streq	r0, [r0, #-61]	; 0x3d
    b2bc:	0000a25d 	andeq	sl, r0, sp, asr r2
    b2c0:	870e2c00 	strhi	r2, [lr, -r0, lsl #24]
    b2c4:	0500003c 	streq	r0, [r0, #-60]	; 0x3c
    b2c8:	0000a262 	andeq	sl, r0, r2, ror #4
    b2cc:	ed0e3000 	stc	0, cr3, [lr, #-0]
    b2d0:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    b2d4:	0000a265 	andeq	sl, r0, r5, ror #4
    b2d8:	0c0e3400 	cfstrseq	mvf3, [lr], {-0}
    b2dc:	0500003b 	streq	r0, [r0, #-59]	; 0x3b
    b2e0:	0000a26a 	andeq	sl, r0, sl, ror #4
    b2e4:	03003800 	movweq	r3, #2048	; 0x800
    b2e8:	00003c4d 	andeq	r3, r0, sp, asr #24
    b2ec:	01bb6e05 			; <UNDEFINED> instruction: 0x01bb6e05
    b2f0:	170f0000 	strne	r0, [pc, -r0]
    b2f4:	0100003d 	tsteq	r0, sp, lsr r0
    b2f8:	0049a8c4 	subeq	sl, r9, r4, asr #17
    b2fc:	0001f608 	andeq	pc, r1, r8, lsl #12
    b300:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    b304:	10000002 	andne	r0, r0, r2
    b308:	00003b6f 	andeq	r3, r0, pc, ror #22
    b30c:	02a6c401 	adceq	ip, r6, #16777216	; 0x1000000
    b310:	50010000 	andpl	r0, r1, r0
    b314:	65041100 	strvs	r1, [r4, #-256]	; 0x100
    b318:	12000001 	andne	r0, r0, #1
    b31c:	00003c03 	andeq	r3, r0, r3, lsl #24
    b320:	a0013f01 	andge	r3, r1, r1, lsl #30
    b324:	6a08004b 	bvs	20b458 <_Min_Stack_Size+0x20b058>
    b328:	01000000 	mrseq	r0, (UNDEF: 0)
    b32c:	0002f19c 	muleq	r2, ip, r1
    b330:	3b6f1300 	blcc	1bcff38 <_Min_Stack_Size+0x1bcfb38>
    b334:	3f010000 	svccc	0x00010000
    b338:	0002a601 	andeq	sl, r2, r1, lsl #12
    b33c:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    b340:	00003cae 	andeq	r3, r0, lr, lsr #25
    b344:	f1013f01 			; <UNDEFINED> instruction: 0xf1013f01
    b348:	4c000002 	stcmi	0, cr0, [r0], {2}
    b34c:	15000072 	strne	r0, [r0, #-114]	; 0x72
    b350:	00002b5e 	andeq	r2, r0, lr, asr fp
    b354:	a2014101 	andge	r4, r1, #1073741824	; 0x40000000
    b358:	6d000000 	stcvs	0, cr0, [r0, #-0]
    b35c:	00000072 	andeq	r0, r0, r2, ror r0
    b360:	02780411 	rsbseq	r0, r8, #285212672	; 0x11000000
    b364:	fd120000 	ldc2	0, cr0, [r2, #-0]
    b368:	0100003a 	tsteq	r0, sl, lsr r0
    b36c:	4c0c0193 	stfmis	f0, [ip], {147}	; 0x93
    b370:	00220800 	eoreq	r0, r2, r0, lsl #16
    b374:	9c010000 	stcls	0, cr0, [r1], {-0}
    b378:	0000031c 	andeq	r0, r0, ip, lsl r3
    b37c:	003cae13 	eorseq	sl, ip, r3, lsl lr
    b380:	01930100 	orrseq	r0, r3, r0, lsl #2
    b384:	000002f1 	strdeq	r0, [r0], -r1
    b388:	12005001 	andne	r5, r0, #1
    b38c:	00003abf 			; <UNDEFINED> instruction: 0x00003abf
    b390:	3001de01 	andcc	sp, r1, r1, lsl #28
    b394:	1408004c 	strne	r0, [r8], #-76	; 0x4c
    b398:	01000000 	mrseq	r0, (UNDEF: 0)
    b39c:	00034f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
    b3a0:	3b6f1300 	blcc	1bcffa8 <_Min_Stack_Size+0x1bcfba8>
    b3a4:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    b3a8:	0002a601 	andeq	sl, r2, r1, lsl #12
    b3ac:	13500100 	cmpne	r0, #0, 2
    b3b0:	00002783 	andeq	r2, r0, r3, lsl #15
    b3b4:	0201de01 	andeq	sp, r1, #1, 28
    b3b8:	01000001 	tsteq	r0, r1
    b3bc:	f9120051 			; <UNDEFINED> instruction: 0xf9120051
    b3c0:	0100003c 	tsteq	r0, ip, lsr r0
    b3c4:	4c440202 	sfmmi	f0, 2, [r4], {2}
    b3c8:	00140800 	andseq	r0, r4, r0, lsl #16
    b3cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    b3d0:	00000382 	andeq	r0, r0, r2, lsl #7
    b3d4:	003b6f13 	eorseq	r6, fp, r3, lsl pc
    b3d8:	02020100 	andeq	r0, r2, #0, 2
    b3dc:	000002a6 	andeq	r0, r0, r6, lsr #5
    b3e0:	bd135001 	ldclt	0, cr5, [r3, #-4]
    b3e4:	0100003c 	tsteq	r0, ip, lsr r0
    b3e8:	00a20202 	adceq	r0, r2, r2, lsl #4
    b3ec:	51010000 	mrspl	r0, (UNDEF: 1)
    b3f0:	3ba91200 	blcc	fea4fbf8 <_estack+0xdea1fbf8>
    b3f4:	26010000 	strcs	r0, [r1], -r0
    b3f8:	004c5802 	subeq	r5, ip, r2, lsl #16
    b3fc:	00001408 	andeq	r1, r0, r8, lsl #8
    b400:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
    b404:	13000003 	movwne	r0, #3
    b408:	00003b6f 	andeq	r3, r0, pc, ror #22
    b40c:	a6022601 	strge	r2, [r2], -r1, lsl #12
    b410:	01000002 	tsteq	r0, r2
    b414:	3ccd1350 	stclcc	3, cr1, [sp], {80}	; 0x50
    b418:	26010000 	strcs	r0, [r1], -r0
    b41c:	0000a202 	andeq	sl, r0, r2, lsl #4
    b420:	00510100 	subseq	r0, r1, r0, lsl #2
    b424:	003c1f12 	eorseq	r1, ip, r2, lsl pc
    b428:	02780100 	rsbseq	r0, r8, #0, 2
    b42c:	08004c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, lr}
    b430:	00000004 	andeq	r0, r0, r4
    b434:	03e89c01 	mvneq	r9, #256	; 0x100
    b438:	6f130000 	svcvs	0x00130000
    b43c:	0100003b 	tsteq	r0, fp, lsr r0
    b440:	02a60278 	adceq	r0, r6, #120, 4	; 0x80000007
    b444:	50010000 	andpl	r0, r1, r0
    b448:	003e0b13 	eorseq	r0, lr, r3, lsl fp
    b44c:	02780100 	rsbseq	r0, r8, #0, 2
    b450:	0000008c 	andeq	r0, r0, ip, lsl #1
    b454:	16005101 	strne	r5, [r0], -r1, lsl #2
    b458:	00003dfc 	strdeq	r3, [r0], -ip
    b45c:	8c028701 	stchi	7, cr8, [r2], {1}
    b460:	70000000 	andvc	r0, r0, r0
    b464:	0608004c 	streq	r0, [r8], -ip, asr #32
    b468:	01000000 	mrseq	r0, (UNDEF: 0)
    b46c:	0004139c 	muleq	r4, ip, r3
    b470:	3b6f1400 	blcc	1bd0478 <_Min_Stack_Size+0x1bd0078>
    b474:	87010000 	strhi	r0, [r1, -r0]
    b478:	0002a602 	andeq	sl, r2, r2, lsl #12
    b47c:	0072ad00 	rsbseq	sl, r2, r0, lsl #26
    b480:	6c120000 	ldcvs	0, cr0, [r2], {-0}
    b484:	0100003c 	tsteq	r0, ip, lsr r0
    b488:	4c7802da 	lfmmi	f0, 2, [r8], #-872	; 0xfffffc98
    b48c:	00180800 	andseq	r0, r8, r0, lsl #16
    b490:	9c010000 	stcls	0, cr0, [r1], {-0}
    b494:	00000454 	andeq	r0, r0, r4, asr r4
    b498:	003b6f13 	eorseq	r6, fp, r3, lsl pc
    b49c:	02da0100 	sbcseq	r0, sl, #0, 2
    b4a0:	000002a6 	andeq	r0, r0, r6, lsr #5
    b4a4:	44135001 	ldrmi	r5, [r3], #-1
    b4a8:	0100003d 	tsteq	r0, sp, lsr r0
    b4ac:	00a202da 	ldrdeq	r0, [r2], sl	; <UNPREDICTABLE>
    b4b0:	51010000 	mrspl	r0, (UNDEF: 1)
    b4b4:	003aad13 	eorseq	sl, sl, r3, lsl sp
    b4b8:	02db0100 	sbcseq	r0, fp, #0, 2
    b4bc:	000000a2 	andeq	r0, r0, r2, lsr #1
    b4c0:	12005201 	andne	r5, r0, #268435456	; 0x10000000
    b4c4:	00003beb 	andeq	r3, r0, fp, ror #23
    b4c8:	9002f901 	andls	pc, r2, r1, lsl #18
    b4cc:	1408004c 	strne	r0, [r8], #-76	; 0x4c
    b4d0:	01000000 	mrseq	r0, (UNDEF: 0)
    b4d4:	0004879c 	muleq	r4, ip, r7
    b4d8:	3b6f1300 	blcc	1bd00e0 <_Min_Stack_Size+0x1bcfce0>
    b4dc:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    b4e0:	0002a602 	andeq	sl, r2, r2, lsl #12
    b4e4:	13500100 	cmpne	r0, #0, 2
    b4e8:	00002783 	andeq	r2, r0, r3, lsl #15
    b4ec:	0202f901 	andeq	pc, r2, #16384	; 0x4000
    b4f0:	01000001 	tsteq	r0, r1
    b4f4:	c2120051 	andsgt	r0, r2, #81	; 0x51
    b4f8:	0100003b 	tsteq	r0, fp, lsr r0
    b4fc:	4ca40322 	stcmi	3, cr0, [r4], #136	; 0x88
    b500:	000a0800 	andeq	r0, sl, r0, lsl #16
    b504:	9c010000 	stcls	0, cr0, [r1], {-0}
    b508:	000004c8 	andeq	r0, r0, r8, asr #9
    b50c:	003b6f13 	eorseq	r6, fp, r3, lsl pc
    b510:	03220100 	teqeq	r2, #0, 2
    b514:	000002a6 	andeq	r0, r0, r6, lsr #5
    b518:	7e135001 	cdpvc	0, 1, cr5, cr3, cr1, {0}
    b51c:	0100003d 	tsteq	r0, sp, lsr r0
    b520:	00a20322 	adceq	r0, r2, r2, lsr #6
    b524:	51010000 	mrspl	r0, (UNDEF: 1)
    b528:	003b5913 	eorseq	r5, fp, r3, lsl r9
    b52c:	03230100 	teqeq	r3, #0, 2
    b530:	000000a2 	andeq	r0, r0, r2, lsr #1
    b534:	16005201 	strne	r5, [r0], -r1, lsl #4
    b538:	00003b3e 	andeq	r3, r0, lr, lsr fp
    b53c:	a2033c01 	andge	r3, r3, #256	; 0x100
    b540:	b0000000 	andlt	r0, r0, r0
    b544:	0808004c 	stmdaeq	r8, {r2, r3, r6}
    b548:	01000000 	mrseq	r0, (UNDEF: 0)
    b54c:	0005039c 	muleq	r5, ip, r3
    b550:	3b6f1400 	blcc	1bd0558 <_Min_Stack_Size+0x1bd0158>
    b554:	3c010000 	stccc	0, cr0, [r1], {-0}
    b558:	0002a603 	andeq	sl, r2, r3, lsl #12
    b55c:	0072ce00 	rsbseq	ip, r2, r0, lsl #28
    b560:	6d741700 	ldclvs	7, cr1, [r4, #-0]
    b564:	3e010070 	mcrcc	0, 0, r0, cr1, cr0, {3}
    b568:	0000a203 	andeq	sl, r0, r3, lsl #4
    b56c:	0072ef00 	rsbseq	lr, r2, r0, lsl #30
    b570:	61160000 	tstvs	r6, r0
    b574:	0100003d 	tsteq	r0, sp, lsr r0
    b578:	010203af 	smlatbeq	r2, pc, r3, r0	; <UNPREDICTABLE>
    b57c:	4cb80000 	ldcmi	0, cr0, [r8]
    b580:	00080800 	andeq	r0, r8, r0, lsl #16
    b584:	9c010000 	stcls	0, cr0, [r1], {-0}
    b588:	0000053e 	andeq	r0, r0, lr, lsr r5
    b58c:	003b6f14 	eorseq	r6, fp, r4, lsl pc
    b590:	03af0100 			; <UNDEFINED> instruction: 0x03af0100
    b594:	000002a6 	andeq	r0, r0, r6, lsr #5
    b598:	00007319 	andeq	r7, r0, r9, lsl r3
    b59c:	003ada15 	eorseq	sp, sl, r5, lsl sl
    b5a0:	03b10100 			; <UNDEFINED> instruction: 0x03b10100
    b5a4:	00000102 	andeq	r0, r0, r2, lsl #2
    b5a8:	0000733a 	andeq	r7, r0, sl, lsr r3
    b5ac:	3b201600 	blcc	810db4 <_Min_Stack_Size+0x8109b4>
    b5b0:	d1010000 	mrsle	r0, (UNDEF: 1)
    b5b4:	0000a203 	andeq	sl, r0, r3, lsl #4
    b5b8:	004cc000 	subeq	ip, ip, r0
    b5bc:	00000808 	andeq	r0, r0, r8, lsl #16
    b5c0:	799c0100 	ldmibvc	ip, {r8}
    b5c4:	14000005 	strne	r0, [r0], #-5
    b5c8:	00003b6f 	andeq	r3, r0, pc, ror #22
    b5cc:	a603d101 	strge	sp, [r3], -r1, lsl #2
    b5d0:	5d000002 	stcpl	0, cr0, [r0, #-8]
    b5d4:	15000073 	strne	r0, [r0, #-115]	; 0x73
    b5d8:	00002b5e 	andeq	r2, r0, lr, asr fp
    b5dc:	a203d301 	andge	sp, r3, #67108864	; 0x4000000
    b5e0:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    b5e4:	00000073 	andeq	r0, r0, r3, ror r0
    b5e8:	003d2216 	eorseq	r2, sp, r6, lsl r2
    b5ec:	03ec0100 	mvneq	r0, #0, 2
    b5f0:	000000d4 	ldrdeq	r0, [r0], -r4
    b5f4:	08004cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, lr}
    b5f8:	00000040 	andeq	r0, r0, r0, asr #32
    b5fc:	05e49c01 	strbeq	r9, [r4, #3073]!	; 0xc01
    b600:	6f140000 	svcvs	0x00140000
    b604:	0100003b 	tsteq	r0, fp, lsr r0
    b608:	02a603ec 	adceq	r0, r6, #236, 6	; 0xb0000003
    b60c:	73ad0000 			; <UNDEFINED> instruction: 0x73ad0000
    b610:	da140000 	ble	50b618 <_Min_Stack_Size+0x50b218>
    b614:	0100003c 	tsteq	r0, ip, lsr r0
    b618:	00a203ec 	adceq	r0, r2, ip, ror #7
    b61c:	73ce0000 	bicvc	r0, lr, #0
    b620:	83150000 	tsthi	r5, #0
    b624:	01000029 	tsteq	r0, r9, lsr #32
    b628:	00d403ee 	sbcseq	r0, r4, lr, ror #7
    b62c:	73ef0000 	mvnvc	r0, #0
    b630:	6a150000 	bvs	54b638 <_Min_Stack_Size+0x54b238>
    b634:	0100003b 	tsteq	r0, fp, lsr r0
    b638:	05e403ef 	strbeq	r0, [r4, #1007]!	; 0x3ef
    b63c:	74340000 	ldrtvc	r0, [r4], #-0
    b640:	5e150000 	cdppl	0, 1, cr0, cr5, cr0, {0}
    b644:	0100002b 	tsteq	r0, fp, lsr #32
    b648:	00a203f0 	strdeq	r0, [r2], r0	; <UNPREDICTABLE>
    b64c:	74470000 	strbvc	r0, [r7], #-0
    b650:	11000000 	mrsne	r0, (UNDEF: 0)
    b654:	0001af04 	andeq	sl, r1, r4, lsl #30
    b658:	3c111200 	lfmcc	f1, 4, [r1], {-0}
    b65c:	2f010000 	svccs	0x00010000
    b660:	004d0804 	subeq	r0, sp, r4, lsl #16
    b664:	00003a08 	andeq	r3, r0, r8, lsl #20
    b668:	2f9c0100 	svccs	0x009c0100
    b66c:	14000006 	strne	r0, [r0], #-6
    b670:	00003b6f 	andeq	r3, r0, pc, ror #22
    b674:	a6042f01 	strge	r2, [r4], -r1, lsl #30
    b678:	79000002 	stmdbvc	r0, {r1}
    b67c:	14000074 	strne	r0, [r0], #-116	; 0x74
    b680:	00003cda 	ldrdeq	r3, [r0], -sl
    b684:	a2042f01 	andge	r2, r4, #1, 30
    b688:	9a000000 	bls	b690 <_Min_Stack_Size+0xb290>
    b68c:	18000074 	stmdane	r0, {r2, r4, r5, r6}
    b690:	00003b6a 	andeq	r3, r0, sl, ror #22
    b694:	e4043101 	str	r3, [r4], #-257	; 0x101
    b698:	01000005 	tsteq	r0, r5
    b69c:	13120050 	tstne	r2, #80	; 0x50
    b6a0:	0100003e 	tsteq	r0, lr, lsr r0
    b6a4:	4d44045e 	cfstrdmi	mvd0, [r4, #-376]	; 0xfffffe88
    b6a8:	00400800 	subeq	r0, r0, r0, lsl #16
    b6ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    b6b0:	00000672 	andeq	r0, r0, r2, ror r6
    b6b4:	003b6f13 	eorseq	r6, fp, r3, lsl pc
    b6b8:	045e0100 	ldrbeq	r0, [lr], #-256	; 0x100
    b6bc:	000002a6 	andeq	r0, r0, r6, lsr #5
    b6c0:	20145001 	andscs	r5, r4, r1
    b6c4:	0100003e 	tsteq	r0, lr, lsr r0
    b6c8:	00a2045e 	adceq	r0, r2, lr, asr r4
    b6cc:	74bb0000 	ldrtvc	r0, [fp], #0
    b6d0:	83130000 	tsthi	r3, #0
    b6d4:	01000027 	tsteq	r0, r7, lsr #32
    b6d8:	0102045e 	tsteq	r2, lr, asr r4
    b6dc:	52010000 	andpl	r0, r1, #0
    b6e0:	3c991600 	ldccc	6, cr1, [r9], {0}
    b6e4:	92010000 	andls	r0, r1, #0
    b6e8:	0000e004 	andeq	lr, r0, r4
    b6ec:	004d8400 	subeq	r8, sp, r0, lsl #8
    b6f0:	00005808 	andeq	r5, r0, r8, lsl #16
    b6f4:	ed9c0100 	ldfs	f0, [ip]
    b6f8:	14000006 	strne	r0, [r0], #-6
    b6fc:	00003b6f 	andeq	r3, r0, pc, ror #22
    b700:	a6049201 	strge	r9, [r4], -r1, lsl #4
    b704:	00000002 	andeq	r0, r0, r2
    b708:	14000075 	strne	r0, [r0], #-117	; 0x75
    b70c:	00003e20 	andeq	r3, r0, r0, lsr #28
    b710:	a2049201 	andge	r9, r4, #268435456	; 0x10000000
    b714:	2c000000 	stccs	0, cr0, [r0], {-0}
    b718:	15000075 	strne	r0, [r0, #-117]	; 0x75
    b71c:	00002983 	andeq	r2, r0, r3, lsl #19
    b720:	e0049401 	and	r9, r4, r1, lsl #8
    b724:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    b728:	15000075 	strne	r0, [r0, #-117]	; 0x75
    b72c:	00003b6a 	andeq	r3, r0, sl, ror #22
    b730:	e4049501 	str	r9, [r4], #-1281	; 0x501
    b734:	83000005 	movwhi	r0, #5
    b738:	15000075 	strne	r0, [r0, #-117]	; 0x75
    b73c:	00002b5e 	andeq	r2, r0, lr, asr fp
    b740:	a2049601 	andge	r9, r4, #1048576	; 0x100000
    b744:	a1000000 	mrsge	r0, (UNDEF: 0)
    b748:	15000075 	strne	r0, [r0, #-117]	; 0x75
    b74c:	000039d9 	ldrdeq	r3, [r0], -r9
    b750:	a2049601 	andge	r9, r4, #1048576	; 0x100000
    b754:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    b758:	00000075 	andeq	r0, r0, r5, ror r0
    b75c:	003ce312 	eorseq	lr, ip, r2, lsl r3
    b760:	04e40100 	strbteq	r0, [r4], #256	; 0x100
    b764:	08004ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, lr}
    b768:	0000003a 	andeq	r0, r0, sl, lsr r0
    b76c:	07329c01 	ldreq	r9, [r2, -r1, lsl #24]!
    b770:	6f140000 	svcvs	0x00140000
    b774:	0100003b 	tsteq	r0, fp, lsr r0
    b778:	02a604e4 	adceq	r0, r6, #228, 8	; 0xe4000000
    b77c:	76260000 	strtvc	r0, [r6], -r0
    b780:	20140000 	andscs	r0, r4, r0
    b784:	0100003e 	tsteq	r0, lr, lsr r0
    b788:	00a204e4 	adceq	r0, r2, r4, ror #9
    b78c:	76470000 	strbvc	r0, [r7], -r0
    b790:	6a180000 	bvs	60b798 <_Min_Stack_Size+0x60b398>
    b794:	0100003b 	tsteq	r0, fp, lsr r0
    b798:	05e404e6 	strbeq	r0, [r4, #1254]!	; 0x4e6
    b79c:	50010000 	andpl	r0, r1, r0
    b7a0:	039d1900 	orrseq	r1, sp, #0, 18
    b7a4:	a7060000 	strge	r0, [r6, -r0]
    b7a8:	0000b906 	andeq	fp, r0, r6, lsl #18
    b7ac:	0c7c0000 	ldcleq	0, cr0, [ip], #-0
    b7b0:	00040000 	andeq	r0, r4, r0
    b7b4:	00002320 	andeq	r2, r0, r0, lsr #6
    b7b8:	02840104 	addeq	r0, r4, #4, 2
    b7bc:	3a010000 	bcc	4b7c4 <_Min_Stack_Size+0x4b3c4>
    b7c0:	0100003e 	tsteq	r0, lr, lsr r0
    b7c4:	38000001 	stmdacc	r0, {r0}
    b7c8:	00000013 	andeq	r0, r0, r3, lsl r0
    b7cc:	ef000000 	svc	0x00000000
    b7d0:	02000040 	andeq	r0, r0, #64	; 0x40
    b7d4:	01500601 	cmpeq	r0, r1, lsl #12
    b7d8:	f2030000 	vhadd.s8	d0, d3, d0
    b7dc:	02000000 	andeq	r0, r0, #0
    b7e0:	0000371c 	andeq	r3, r0, ip, lsl r7
    b7e4:	08010200 	stmdaeq	r1, {r9}
    b7e8:	0000014e 	andeq	r0, r0, lr, asr #2
    b7ec:	df050202 	svcle	0x00050202
    b7f0:	03000000 	movweq	r0, #0
    b7f4:	0000005c 	andeq	r0, r0, ip, asr r0
    b7f8:	00502602 	subseq	r2, r0, r2, lsl #12
    b7fc:	02020000 	andeq	r0, r2, #0
    b800:	0001e507 	andeq	lr, r1, r7, lsl #10
    b804:	03770300 	cmneq	r7, #0, 6
    b808:	37020000 	strcc	r0, [r2, -r0]
    b80c:	00000062 	andeq	r0, r0, r2, rrx
    b810:	c5050402 	strgt	r0, [r5, #-1026]	; 0x402
    b814:	03000000 	movweq	r0, #0
    b818:	00000051 	andeq	r0, r0, r1, asr r0
    b81c:	00743802 	rsbseq	r3, r4, r2, lsl #16
    b820:	04020000 	streq	r0, [r2], #-0
    b824:	00017807 	andeq	r7, r1, r7, lsl #16
    b828:	05080200 	streq	r0, [r8, #-512]	; 0x200
    b82c:	000000c0 	andeq	r0, r0, r0, asr #1
    b830:	73070802 	movwvc	r0, #30722	; 0x7802
    b834:	04000001 	streq	r0, [r0], #-1
    b838:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    b83c:	04020074 	streq	r0, [r2], #-116	; 0x74
    b840:	00017d07 	andeq	r7, r1, r7, lsl #26
    b844:	00f40300 	rscseq	r0, r4, r0, lsl #6
    b848:	2a030000 	bcs	cb850 <_Min_Stack_Size+0xcb450>
    b84c:	0000002c 	andeq	r0, r0, ip, lsr #32
    b850:	00005e03 	andeq	r5, r0, r3, lsl #28
    b854:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    b858:	03000000 	movweq	r0, #0
    b85c:	00000379 	andeq	r0, r0, r9, ror r3
    b860:	00574103 	subseq	r4, r7, r3, lsl #2
    b864:	53030000 	movwpl	r0, #12288	; 0x3000
    b868:	03000000 	movweq	r0, #0
    b86c:	00006942 	andeq	r6, r0, r2, asr #18
    b870:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b874:	0000002c 	andeq	r0, r0, ip, lsr #32
    b878:	0000b805 	andeq	fp, r0, r5, lsl #16
    b87c:	00b80600 	adcseq	r0, r8, r0, lsl #12
    b880:	00df0000 	sbcseq	r0, pc, r0
    b884:	c3070000 	movwgt	r0, #28672	; 0x7000
    b888:	01000000 	mrseq	r0, (UNDEF: 0)
    b88c:	00a20500 	adceq	r0, r2, r0, lsl #10
    b890:	ad050000 	stcge	0, cr0, [r5, #-0]
    b894:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b898:	01f70401 	mvnseq	r0, r1, lsl #8
    b89c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    b8a0:	0028e409 	eoreq	lr, r8, r9, lsl #8
    b8a4:	530a0000 	movwpl	r0, #40960	; 0xa000
    b8a8:	01005445 	tsteq	r0, r5, asr #8
    b8ac:	3d290b00 	vstmdbcc	r9!, {d0-d-1}
    b8b0:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    b8b4:	0000e901 	andeq	lr, r0, r1, lsl #18
    b8b8:	3ca00b00 	vstmiacc	r0!, {d0-d-1}
    b8bc:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    b8c0:	0000e901 	andeq	lr, r0, r1, lsl #18
    b8c4:	04010800 	streq	r0, [r1], #-2048	; 0x800
    b8c8:	012d01f9 	strdeq	r0, [sp, -r9]!
    b8cc:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    b8d0:	00000004 	andeq	r0, r0, r4
    b8d4:	0005c009 	andeq	ip, r5, r9
    b8d8:	0b000100 	bleq	bce0 <_Min_Stack_Size+0xb8e0>
    b8dc:	0000092a 	andeq	r0, r0, sl, lsr #18
    b8e0:	1701f904 	strne	pc, [r1, -r4, lsl #18]
    b8e4:	0c000001 	stceq	0, cr0, [r0], {1}
    b8e8:	04550490 	ldrbeq	r0, [r5], #-1168	; 0x490
    b8ec:	000002e2 	andeq	r0, r0, r2, ror #5
    b8f0:	0052430d 	subseq	r4, r2, sp, lsl #6
    b8f4:	ca045704 	bgt	12150c <_Min_Stack_Size+0x12110c>
    b8f8:	00000000 	andeq	r0, r0, r0
    b8fc:	00000a0e 	andeq	r0, r0, lr, lsl #20
    b900:	04580400 	ldrbeq	r0, [r8], #-1024	; 0x400
    b904:	000000ca 	andeq	r0, r0, sl, asr #1
    b908:	03b00e04 	movseq	r0, #4, 28	; 0x40
    b90c:	59040000 	stmdbpl	r4, {}	; <UNPREDICTABLE>
    b910:	0000ca04 	andeq	ip, r0, r4, lsl #20
    b914:	430d0800 	movwmi	r0, #55296	; 0xd800
    b918:	04005249 	streq	r5, [r0], #-585	; 0x249
    b91c:	00ca045a 	sbceq	r0, sl, sl, asr r4
    b920:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    b924:	0000007d 	andeq	r0, r0, sp, ror r0
    b928:	ca045b04 	bgt	122540 <_Min_Stack_Size+0x122140>
    b92c:	10000000 	andne	r0, r0, r0
    b930:	0000230e 	andeq	r2, r0, lr, lsl #6
    b934:	045c0400 	ldrbeq	r0, [ip], #-1024	; 0x400
    b938:	000000ca 	andeq	r0, r0, sl, asr #1
    b93c:	03860e14 	orreq	r0, r6, #20, 28	; 0x140
    b940:	5d040000 	stcpl	0, cr0, [r4, #-0]
    b944:	0000ca04 	andeq	ip, r0, r4, lsl #20
    b948:	3c0e1800 	stccc	8, cr1, [lr], {-0}
    b94c:	04000002 	streq	r0, [r0], #-2
    b950:	00b8045e 	adcseq	r0, r8, lr, asr r4
    b954:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    b958:	00000012 	andeq	r0, r0, r2, lsl r0
    b95c:	ca045f04 	bgt	123574 <_Min_Stack_Size+0x123174>
    b960:	20000000 	andcs	r0, r0, r0
    b964:	0000e90e 	andeq	lr, r0, lr, lsl #18
    b968:	04600400 	strbteq	r0, [r0], #-1024	; 0x400
    b96c:	000000ca 	andeq	r0, r0, sl, asr #1
    b970:	02460e24 	subeq	r0, r6, #36, 28	; 0x240
    b974:	61040000 	mrsvs	r0, (UNDEF: 4)
    b978:	0000cf04 	andeq	ip, r0, r4, lsl #30
    b97c:	6f0e2800 	svcvs	0x000e2800
    b980:	04000003 	streq	r0, [r0], #-3
    b984:	00ca0462 	sbceq	r0, sl, r2, ror #8
    b988:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    b98c:	0000001b 	andeq	r0, r0, fp, lsl r0
    b990:	ca046304 	bgt	1245a8 <_Min_Stack_Size+0x1241a8>
    b994:	34000000 	strcc	r0, [r0], #-0
    b998:	0001360e 	andeq	r3, r1, lr, lsl #12
    b99c:	04640400 	strbteq	r0, [r4], #-1024	; 0x400
    b9a0:	000000ca 	andeq	r0, r0, sl, asr #1
    b9a4:	02500e38 	subseq	r0, r0, #56, 28	; 0x380
    b9a8:	65040000 	strvs	r0, [r4, #-0]
    b9ac:	0000b804 	andeq	fp, r0, r4, lsl #16
    b9b0:	a30e3c00 	movwge	r3, #60416	; 0xec00
    b9b4:	04000000 	streq	r0, [r0], #-0
    b9b8:	00ca0466 	sbceq	r0, sl, r6, ror #8
    b9bc:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    b9c0:	0000015c 	andeq	r0, r0, ip, asr r1
    b9c4:	ca046704 	bgt	1255dc <_Min_Stack_Size+0x1251dc>
    b9c8:	44000000 	strmi	r0, [r0], #-0
    b9cc:	0000900e 	andeq	r9, r0, lr
    b9d0:	04680400 	strbteq	r0, [r8], #-1024	; 0x400
    b9d4:	000000cf 	andeq	r0, r0, pc, asr #1
    b9d8:	00000e48 	andeq	r0, r0, r8, asr #28
    b9dc:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    b9e0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    b9e4:	2d0e5000 	stccs	0, cr5, [lr, #-0]
    b9e8:	04000002 	streq	r0, [r0], #-2
    b9ec:	00ca046a 	sbceq	r0, sl, sl, ror #8
    b9f0:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
    b9f4:	00000086 	andeq	r0, r0, r6, lsl #1
    b9f8:	ca046b04 	bgt	126610 <_Min_Stack_Size+0x126210>
    b9fc:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    ba00:	0002660e 	andeq	r6, r2, lr, lsl #12
    ba04:	046c0400 	strbteq	r0, [ip], #-1024	; 0x400
    ba08:	000000b8 	strheq	r0, [r0], -r8
    ba0c:	01f80e5c 	mvnseq	r0, ip, asr lr
    ba10:	6d040000 	stcvs	0, cr0, [r4, #-0]
    ba14:	0000ca04 	andeq	ip, r0, r4, lsl #20
    ba18:	bb0e6000 	bllt	3a3a20 <_Min_Stack_Size+0x3a3620>
    ba1c:	04000003 	streq	r0, [r0], #-3
    ba20:	00ca046e 	sbceq	r0, sl, lr, ror #8
    ba24:	0e640000 	cdpeq	0, 6, cr0, cr4, cr0, {0}
    ba28:	00000270 	andeq	r0, r0, r0, ror r2
    ba2c:	cf046f04 	svcgt	0x00046f04
    ba30:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    ba34:	0000350e 	andeq	r3, r0, lr, lsl #10
    ba38:	04700400 	ldrbteq	r0, [r0], #-1024	; 0x400
    ba3c:	000000ca 	andeq	r0, r0, sl, asr #1
    ba40:	53430d70 	movtpl	r0, #15728	; 0x3d70
    ba44:	71040052 	qaddvc	r0, r2, r4
    ba48:	0000ca04 	andeq	ip, r0, r4, lsl #20
    ba4c:	7a0e7400 	bvc	3a8a54 <_Min_Stack_Size+0x3a8654>
    ba50:	04000002 	streq	r0, [r0], #-2
    ba54:	00cf0472 	sbceq	r0, pc, r2, ror r4	; <UNPREDICTABLE>
    ba58:	0e780000 	cdpeq	0, 7, cr0, cr8, cr0, {0}
    ba5c:	00000067 	andeq	r0, r0, r7, rrx
    ba60:	ca047304 	bgt	128678 <_Min_Stack_Size+0x128278>
    ba64:	80000000 	andhi	r0, r0, r0
    ba68:	00003a0e 	andeq	r3, r0, lr, lsl #20
    ba6c:	04740400 	ldrbteq	r0, [r4], #-1024	; 0x400
    ba70:	000000ca 	andeq	r0, r0, sl, asr #1
    ba74:	03aa0e84 			; <UNDEFINED> instruction: 0x03aa0e84
    ba78:	75040000 	strvc	r0, [r4, #-0]
    ba7c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    ba80:	ab0e8800 	blge	3ada88 <_Min_Stack_Size+0x3ad688>
    ba84:	04000000 	streq	r0, [r0], #-0
    ba88:	00ca0476 	sbceq	r0, sl, r6, ror r4
    ba8c:	008c0000 	addeq	r0, ip, r0
    ba90:	0000d30b 	andeq	sp, r0, fp, lsl #6
    ba94:	04780400 	ldrbteq	r0, [r8], #-1024	; 0x400
    ba98:	00000139 	andeq	r0, r0, r9, lsr r1
    ba9c:	e004240c 	and	r2, r4, ip, lsl #8
    baa0:	0003e004 	andeq	lr, r3, r4
    baa4:	52430d00 	subpl	r0, r3, #0, 26
    baa8:	e2040031 	and	r0, r4, #49	; 0x31
    baac:	0000df04 	andeq	sp, r0, r4, lsl #30
    bab0:	3c0e0000 	stccc	0, cr0, [lr], {-0}
    bab4:	04000002 	streq	r0, [r0], #-2
    bab8:	00a204e3 	adceq	r0, r2, r3, ror #9
    babc:	0d020000 	stceq	0, cr0, [r2, #-0]
    bac0:	00325243 	eorseq	r5, r2, r3, asr #4
    bac4:	df04e404 	svcle	0x0004e404
    bac8:	04000000 	streq	r0, [r0], #-0
    bacc:	0002460e 	andeq	r4, r2, lr, lsl #12
    bad0:	04e50400 	strbteq	r0, [r5], #1024	; 0x400
    bad4:	000000a2 	andeq	r0, r0, r2, lsr #1
    bad8:	52530d06 	subspl	r0, r3, #384	; 0x180
    badc:	04e60400 	strbteq	r0, [r6], #1024	; 0x400
    bae0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    bae4:	02500e08 	subseq	r0, r0, #8, 28	; 0x80
    bae8:	e7040000 	str	r0, [r4, -r0]
    baec:	0000a204 	andeq	sl, r0, r4, lsl #4
    baf0:	440d0a00 	strmi	r0, [sp], #-2560	; 0xa00
    baf4:	e8040052 	stmda	r4, {r1, r4, r6}
    baf8:	0000df04 	andeq	sp, r0, r4, lsl #30
    bafc:	900e0c00 	andls	r0, lr, r0, lsl #24
    bb00:	04000000 	streq	r0, [r0], #-0
    bb04:	00a204e9 	adceq	r0, r2, r9, ror #9
    bb08:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    bb0c:	00003eaf 	andeq	r3, r0, pc, lsr #29
    bb10:	df04ea04 	svcle	0x0004ea04
    bb14:	10000000 	andne	r0, r0, r0
    bb18:	0002660e 	andeq	r6, r2, lr, lsl #12
    bb1c:	04eb0400 	strbteq	r0, [fp], #1024	; 0x400
    bb20:	000000a2 	andeq	r0, r0, r2, lsr #1
    bb24:	3e860e12 	mcrcc	14, 4, r0, cr6, cr2, {0}
    bb28:	ec040000 	stc	0, cr0, [r4], {-0}
    bb2c:	0000df04 	andeq	sp, r0, r4, lsl #30
    bb30:	700e1400 	andvc	r1, lr, r0, lsl #8
    bb34:	04000002 	streq	r0, [r0], #-2
    bb38:	00a204ed 	adceq	r0, r2, sp, ror #9
    bb3c:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    bb40:	00003fa8 	andeq	r3, r0, r8, lsr #31
    bb44:	df04ee04 	svcle	0x0004ee04
    bb48:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    bb4c:	00027a0e 	andeq	r7, r2, lr, lsl #20
    bb50:	04ef0400 	strbteq	r0, [pc], #1024	; bb58 <_Min_Stack_Size+0xb758>
    bb54:	000000a2 	andeq	r0, r0, r2, lsr #1
    bb58:	003d0e1a 	eorseq	r0, sp, sl, lsl lr
    bb5c:	f0040000 			; <UNDEFINED> instruction: 0xf0040000
    bb60:	0000df04 	andeq	sp, r0, r4, lsl #30
    bb64:	c00e1c00 	andgt	r1, lr, r0, lsl #24
    bb68:	04000038 	streq	r0, [r0], #-56	; 0x38
    bb6c:	00a204f1 	strdeq	r0, [r2], r1	; <UNPREDICTABLE>
    bb70:	0e1e0000 	cdpeq	0, 1, cr0, cr14, cr0, {0}
    bb74:	00004089 	andeq	r4, r0, r9, lsl #1
    bb78:	df04f204 	svcle	0x0004f204
    bb7c:	20000000 	andcs	r0, r0, r0
    bb80:	0038ca0e 	eorseq	ip, r8, lr, lsl #20
    bb84:	04f30400 	ldrbteq	r0, [r3], #1024	; 0x400
    bb88:	000000a2 	andeq	r0, r0, r2, lsr #1
    bb8c:	110b0022 	tstne	fp, r2, lsr #32
    bb90:	04000041 	streq	r0, [r0], #-65	; 0x41
    bb94:	02ee04f4 	rsceq	r0, lr, #244, 8	; 0xf4000000
    bb98:	120f0000 	andne	r0, pc, #0
    bb9c:	04613605 	strbteq	r3, [r1], #-1541	; 0x605
    bba0:	af100000 	svcge	0x00100000
    bba4:	0500003f 	streq	r0, [r0, #-63]	; 0x3f
    bba8:	0000a238 	andeq	sl, r0, r8, lsr r2
    bbac:	1d100000 	ldcne	0, cr0, [r0, #-0]
    bbb0:	05000041 	streq	r0, [r0, #-65]	; 0x41
    bbb4:	0000a23b 	andeq	sl, r0, fp, lsr r2
    bbb8:	89100200 	ldmdbhi	r0, {r9}
    bbbc:	05000041 	streq	r0, [r0, #-65]	; 0x41
    bbc0:	0000a23e 	andeq	sl, r0, lr, lsr r2
    bbc4:	cf100400 	svcgt	0x00100400
    bbc8:	05000040 	streq	r0, [r0, #-64]	; 0x40
    bbcc:	0000a241 	andeq	sl, r0, r1, asr #4
    bbd0:	ed100600 	ldc	6, cr0, [r0, #-0]
    bbd4:	05000040 	streq	r0, [r0, #-64]	; 0x40
    bbd8:	0000a244 	andeq	sl, r0, r4, asr #4
    bbdc:	38100800 	ldmdacc	r0, {fp}
    bbe0:	05000041 	streq	r0, [r0, #-65]	; 0x41
    bbe4:	0000a247 	andeq	sl, r0, r7, asr #4
    bbe8:	fb100a00 	blx	40e3f2 <_Min_Stack_Size+0x40dff2>
    bbec:	05000040 	streq	r0, [r0, #-64]	; 0x40
    bbf0:	0000a24b 	andeq	sl, r0, fp, asr #4
    bbf4:	e0100c00 	ands	r0, r0, r0, lsl #24
    bbf8:	05000040 	streq	r0, [r0, #-64]	; 0x40
    bbfc:	0000a251 	andeq	sl, r0, r1, asr r2
    bc00:	23100e00 	tstcs	r0, #0, 28
    bc04:	05000040 	streq	r0, [r0, #-64]	; 0x40
    bc08:	0000a254 	andeq	sl, r0, r4, asr r2
    bc0c:	03001000 	movweq	r1, #0
    bc10:	0000403e 	andeq	r4, r0, lr, lsr r0
    bc14:	03ec5505 	mvneq	r5, #20971520	; 0x1400000
    bc18:	100f0000 	andne	r0, pc, r0
    bc1c:	04bd5b05 	ldrteq	r5, [sp], #2821	; 0xb05
    bc20:	97100000 	ldrls	r0, [r0, -r0]
    bc24:	05000040 	streq	r0, [r0, #-64]	; 0x40
    bc28:	0000a25e 	andeq	sl, r0, lr, asr r2
    bc2c:	e5100000 	ldr	r0, [r0, #-0]
    bc30:	0500003e 	streq	r0, [r0, #-62]	; 0x3e
    bc34:	0000a261 	andeq	sl, r0, r1, ror #4
    bc38:	7a100200 	bvc	40c440 <_Min_Stack_Size+0x40c040>
    bc3c:	05000040 	streq	r0, [r0, #-64]	; 0x40
    bc40:	0000a264 	andeq	sl, r0, r4, ror #4
    bc44:	e9100400 	ldmdb	r0, {sl}
    bc48:	0500003f 	streq	r0, [r0, #-63]	; 0x3f
    bc4c:	0000a267 	andeq	sl, r0, r7, ror #4
    bc50:	c1100600 	tstgt	r0, r0, lsl #12
    bc54:	05000040 	streq	r0, [r0, #-64]	; 0x40
    bc58:	0000b86a 	andeq	fp, r0, sl, ror #16
    bc5c:	35100800 	ldrcc	r0, [r0, #-2048]	; 0x800
    bc60:	05000040 	streq	r0, [r0, #-64]	; 0x40
    bc64:	0000a26d 	andeq	sl, r0, sp, ror #4
    bc68:	03000c00 	movweq	r0, #3072	; 0xc00
    bc6c:	00003ec6 	andeq	r3, r0, r6, asr #29
    bc70:	046c6f05 	strbteq	r6, [ip], #-3845	; 0xf05
    bc74:	d6110000 	ldrle	r0, [r1], -r0
    bc78:	0100003e 	tsteq	r0, lr, lsr r0
    bc7c:	004e18e0 	subeq	r1, lr, r0, ror #17
    bc80:	0000dc08 	andeq	sp, r0, r8, lsl #24
    bc84:	219c0100 	orrscs	r0, ip, r0, lsl #2
    bc88:	12000006 	andne	r0, r0, #6
    bc8c:	000040f6 	strdeq	r4, [r0], -r6
    bc90:	0621e001 	strteq	lr, [r1], -r1
    bc94:	76680000 	strbtvc	r0, [r8], -r0
    bc98:	6e130000 	cdpvs	0, 1, cr0, cr3, cr0, {0}
    bc9c:	5508004e 	strpl	r0, [r8, #-78]	; 0x4e
    bca0:	0600000c 	streq	r0, [r0], -ip
    bca4:	14000005 	strne	r0, [r0], #-5
    bca8:	31015101 	tstcc	r1, r1, lsl #2
    bcac:	03500114 	cmpeq	r0, #20, 2
    bcb0:	00244140 	eoreq	r4, r4, r0, asr #2
    bcb4:	004e7c15 	subeq	r7, lr, r5, lsl ip
    bcb8:	000c5508 	andeq	r5, ip, r8, lsl #10
    bcbc:	00052000 	andeq	r2, r5, r0
    bcc0:	51011400 	tstpl	r1, r0, lsl #8
    bcc4:	01143001 	tsteq	r4, r1
    bcc8:	41400350 	cmpmi	r0, r0, asr r3
    bccc:	86130024 	ldrhi	r0, [r3], -r4, lsr #32
    bcd0:	5508004e 	strpl	r0, [r8, #-78]	; 0x4e
    bcd4:	3a00000c 	bcc	bd0c <_Min_Stack_Size+0xb90c>
    bcd8:	14000005 	strne	r0, [r0], #-5
    bcdc:	31015101 	tstcc	r1, r1, lsl #2
    bce0:	03500114 	cmpeq	r0, #20, 2
    bce4:	0010000a 	andseq	r0, r0, sl
    bce8:	004e9415 	subeq	r9, lr, r5, lsl r4
    bcec:	000c5508 	andeq	r5, ip, r8, lsl #10
    bcf0:	00055400 	andeq	r5, r5, r0, lsl #8
    bcf4:	51011400 	tstpl	r1, r0, lsl #8
    bcf8:	01143001 	tsteq	r4, r1
    bcfc:	000a0350 	andeq	r0, sl, r0, asr r3
    bd00:	9e130010 	mrcls	0, 0, r0, cr3, cr0, {0}
    bd04:	6c08004e 	stcvs	0, cr0, [r8], {78}	; 0x4e
    bd08:	6e00000c 	cdpvs	0, 0, cr0, cr0, cr12, {0}
    bd0c:	14000005 	strne	r0, [r0], #-5
    bd10:	31015101 	tstcc	r1, r1, lsl #2
    bd14:	03500114 	cmpeq	r0, #20, 2
    bd18:	0040000a 	subeq	r0, r0, sl
    bd1c:	004eac15 	subeq	sl, lr, r5, lsl ip
    bd20:	000c6c08 	andeq	r6, ip, r8, lsl #24
    bd24:	00058800 	andeq	r8, r5, r0, lsl #16
    bd28:	51011400 	tstpl	r1, r0, lsl #8
    bd2c:	01143001 	tsteq	r4, r1
    bd30:	000a0350 	andeq	r0, sl, r0, asr r3
    bd34:	b6130040 	ldrlt	r0, [r3], -r0, asr #32
    bd38:	6c08004e 	stcvs	0, cr0, [r8], {78}	; 0x4e
    bd3c:	a200000c 	andge	r0, r0, #12
    bd40:	14000005 	strne	r0, [r0], #-5
    bd44:	31015101 	tstcc	r1, r1, lsl #2
    bd48:	03500114 	cmpeq	r0, #20, 2
    bd4c:	0080000a 	addeq	r0, r0, sl
    bd50:	004ec415 	subeq	ip, lr, r5, lsl r4
    bd54:	000c6c08 	andeq	r6, ip, r8, lsl #24
    bd58:	0005bc00 	andeq	fp, r5, r0, lsl #24
    bd5c:	51011400 	tstpl	r1, r0, lsl #8
    bd60:	01143001 	tsteq	r4, r1
    bd64:	000a0350 	andeq	r0, sl, r0, asr r3
    bd68:	ce130080 	cdpgt	0, 1, cr0, cr3, cr0, {4}
    bd6c:	5508004e 	strpl	r0, [r8, #-78]	; 0x4e
    bd70:	d600000c 	strle	r0, [r0], -ip
    bd74:	14000005 	strne	r0, [r0], #-5
    bd78:	31015101 	tstcc	r1, r1, lsl #2
    bd7c:	03500114 	cmpeq	r0, #20, 2
    bd80:	0020000a 	eoreq	r0, r0, sl
    bd84:	004edc15 	subeq	sp, lr, r5, lsl ip
    bd88:	000c5508 	andeq	r5, ip, r8, lsl #10
    bd8c:	0005f000 	andeq	pc, r5, r0
    bd90:	51011400 	tstpl	r1, r0, lsl #8
    bd94:	01143001 	tsteq	r4, r1
    bd98:	000a0350 	andeq	r0, sl, r0, asr r3
    bd9c:	e6130020 	ldr	r0, [r3], -r0, lsr #32
    bda0:	5508004e 	strpl	r0, [r8, #-78]	; 0x4e
    bda4:	0a00000c 	beq	bddc <_Min_Stack_Size+0xb9dc>
    bda8:	14000006 	strne	r0, [r0], #-6
    bdac:	31015101 	tstcc	r1, r1, lsl #2
    bdb0:	03500114 	cmpeq	r0, #20, 2
    bdb4:	00244040 	eoreq	r4, r4, r0, asr #32
    bdb8:	004ef416 	subeq	pc, lr, r6, lsl r4	; <UNPREDICTABLE>
    bdbc:	000c5508 	andeq	r5, ip, r8, lsl #10
    bdc0:	51011400 	tstpl	r1, r0, lsl #8
    bdc4:	01143001 	tsteq	r4, r1
    bdc8:	40400350 	submi	r0, r0, r0, asr r3
    bdcc:	17000024 	strne	r0, [r0, -r4, lsr #32]
    bdd0:	0003e004 	andeq	lr, r3, r4
    bdd4:	3e921800 	cdpcc	8, 9, cr1, cr2, cr0, {0}
    bdd8:	1c010000 	stcne	0, cr0, [r1], {-0}
    bddc:	004ef401 	subeq	pc, lr, r1, lsl #8
    bde0:	00005208 	andeq	r5, r0, r8, lsl #4
    bde4:	6c9c0100 	ldfvss	f0, [ip], {0}
    bde8:	19000006 	stmdbne	r0, {r1, r2}
    bdec:	000040f6 	strdeq	r4, [r0], -r6
    bdf0:	21011c01 	tstcs	r1, r1, lsl #24
    bdf4:	01000006 	tsteq	r0, r6
    bdf8:	405d1a50 	subsmi	r1, sp, r0, asr sl
    bdfc:	1c010000 	stcne	0, cr0, [r1], {-0}
    be00:	00066c01 	andeq	r6, r6, r1, lsl #24
    be04:	00770600 	rsbseq	r0, r7, r0, lsl #12
    be08:	2b5e1b00 	blcs	1792a10 <_Min_Stack_Size+0x1792610>
    be0c:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    be10:	0000a201 	andeq	sl, r0, r1, lsl #4
    be14:	00772700 	rsbseq	r2, r7, r0, lsl #14
    be18:	04170000 	ldreq	r0, [r7], #-0
    be1c:	00000461 	andeq	r0, r0, r1, ror #8
    be20:	00416b18 	subeq	r6, r1, r8, lsl fp
    be24:	015c0100 	cmpeq	ip, r0, lsl #2
    be28:	08004f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, lr}
    be2c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    be30:	07379c01 	ldreq	r9, [r7, -r1, lsl #24]!
    be34:	f6190000 			; <UNDEFINED> instruction: 0xf6190000
    be38:	01000040 	tsteq	r0, r0, asr #32
    be3c:	0621015c 			; <UNDEFINED> instruction: 0x0621015c
    be40:	50010000 	andpl	r0, r1, r0
    be44:	003ea01a 	eorseq	sl, lr, sl, lsl r0
    be48:	015c0100 	cmpeq	ip, r0, lsl #2
    be4c:	00000737 	andeq	r0, r0, r7, lsr r7
    be50:	00007751 	andeq	r7, r0, r1, asr r7
    be54:	002b5e1b 	eoreq	r5, fp, fp, lsl lr
    be58:	015e0100 	cmpeq	lr, r0, lsl #2
    be5c:	000000a2 	andeq	r0, r0, r2, lsr #1
    be60:	0000777d 	andeq	r7, r0, sp, ror r7
    be64:	0040ba1b 	subeq	fp, r0, fp, lsl sl
    be68:	015e0100 	cmpeq	lr, r0, lsl #2
    be6c:	000000a2 	andeq	r0, r0, r2, lsr #1
    be70:	000077b2 			; <UNDEFINED> instruction: 0x000077b2
    be74:	0041961b 	subeq	r9, r1, fp, lsl r6
    be78:	015e0100 	cmpeq	lr, r0, lsl #2
    be7c:	000000a2 	andeq	r0, r0, r2, lsr #1
    be80:	000077dd 	ldrdeq	r7, [r0], -sp
    be84:	00419d1b 	subeq	r9, r1, fp, lsl sp
    be88:	015e0100 	cmpeq	lr, r0, lsl #2
    be8c:	000000a2 	andeq	r0, r0, r2, lsr #1
    be90:	0000781b 	andeq	r7, r0, fp, lsl r8
    be94:	706d741c 	rsbvc	r7, sp, ip, lsl r4
    be98:	015f0100 	cmpeq	pc, r0, lsl #2
    be9c:	000000b8 	strheq	r0, [r0], -r8
    bea0:	0000783b 	andeq	r7, r0, fp, lsr r8
    bea4:	0041cf1b 	subeq	ip, r1, fp, lsl pc
    bea8:	015f0100 	cmpeq	pc, r0, lsl #2
    beac:	000000b8 	strheq	r0, [r0], -r8
    beb0:	00007871 	andeq	r7, r0, r1, ror r8
    beb4:	00013e1b 	andeq	r3, r1, fp, lsl lr
    beb8:	01610100 	cmneq	r1, r0, lsl #2
    bebc:	000000b8 	strheq	r0, [r0], -r8
    bec0:	0000789c 	muleq	r0, ip, r8
    bec4:	003e8d1b 	eorseq	r8, lr, fp, lsl sp
    bec8:	01610100 	cmneq	r1, r0, lsl #2
    becc:	000000b8 	strheq	r0, [r0], -r8
    bed0:	000078d7 	ldrdeq	r7, [r0], -r7	; <UNPREDICTABLE>
    bed4:	003e9b1b 	eorseq	r9, lr, fp, lsl fp
    bed8:	01610100 	cmneq	r1, r0, lsl #2
    bedc:	000000b8 	strheq	r0, [r0], -r8
    bee0:	0000790a 	andeq	r7, r0, sl, lsl #18
    bee4:	bd041700 	stclt	7, cr1, [r4, #-0]
    bee8:	18000004 	stmdane	r0, {r2}
    beec:	00003f6b 	andeq	r3, r0, fp, ror #30
    bef0:	3801e001 	stmdacc	r1, {r0, sp, lr, pc}
    bef4:	18080050 	stmdane	r8, {r4, r6}
    bef8:	01000000 	mrseq	r0, (UNDEF: 0)
    befc:	0007629c 	muleq	r7, ip, r2
    bf00:	405d1900 	subsmi	r1, sp, r0, lsl #18
    bf04:	e0010000 	and	r0, r1, r0
    bf08:	00066c01 	andeq	r6, r6, r1, lsl #24
    bf0c:	00500100 	subseq	r0, r0, r0, lsl #2
    bf10:	00415c18 	subeq	r5, r1, r8, lsl ip
    bf14:	01fc0100 	mvnseq	r0, r0, lsl #2
    bf18:	08005050 	stmdaeq	r0, {r4, r6, ip, lr}
    bf1c:	0000000e 	andeq	r0, r0, lr
    bf20:	07879c01 	streq	r9, [r7, r1, lsl #24]
    bf24:	a0190000 	andsge	r0, r9, r0
    bf28:	0100003e 	tsteq	r0, lr, lsr r0
    bf2c:	073701fc 			; <UNDEFINED> instruction: 0x073701fc
    bf30:	50010000 	andpl	r0, r1, r0
    bf34:	408f1800 	addmi	r1, pc, r0, lsl #16
    bf38:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    bf3c:	00506002 	subseq	r6, r0, r2
    bf40:	00001a08 	andeq	r1, r0, r8, lsl #20
    bf44:	ba9c0100 	blt	fe70c34c <_estack+0xde6dc34c>
    bf48:	19000007 	stmdbne	r0, {r0, r1, r2}
    bf4c:	000040f6 	strdeq	r4, [r0], -r6
    bf50:	21021901 	tstcs	r2, r1, lsl #18
    bf54:	01000006 	tsteq	r0, r6
    bf58:	27831950 			; <UNDEFINED> instruction: 0x27831950
    bf5c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    bf60:	00012d02 	andeq	r2, r1, r2, lsl #26
    bf64:	00510100 	subseq	r0, r1, r0, lsl #2
    bf68:	0040d818 	subeq	sp, r0, r8, lsl r8
    bf6c:	02320100 	eorseq	r0, r2, #0, 2
    bf70:	0800507c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip, lr}
    bf74:	0000001a 	andeq	r0, r0, sl, lsl r0
    bf78:	07ed9c01 	strbeq	r9, [sp, r1, lsl #24]!
    bf7c:	f6190000 			; <UNDEFINED> instruction: 0xf6190000
    bf80:	01000040 	tsteq	r0, r0, asr #32
    bf84:	06210232 			; <UNDEFINED> instruction: 0x06210232
    bf88:	50010000 	andpl	r0, r1, r0
    bf8c:	00278319 	eoreq	r8, r7, r9, lsl r3
    bf90:	02320100 	eorseq	r0, r2, #0, 2
    bf94:	0000012d 	andeq	r0, r0, sp, lsr #2
    bf98:	18005101 	stmdane	r0, {r0, r8, ip, lr}
    bf9c:	00004010 	andeq	r4, r0, r0, lsl r0
    bfa0:	98024d01 	stmdals	r2, {r0, r8, sl, fp, lr}
    bfa4:	16080050 			; <UNDEFINED> instruction: 0x16080050
    bfa8:	01000000 	mrseq	r0, (UNDEF: 0)
    bfac:	0008229c 	muleq	r8, ip, r2
    bfb0:	40f61900 	rscsmi	r1, r6, r0, lsl #18
    bfb4:	4d010000 	stcmi	0, cr0, [r1, #-0]
    bfb8:	00062102 	andeq	r2, r6, r2, lsl #2
    bfbc:	1a500100 	bne	140c3c4 <_Min_Stack_Size+0x140bfc4>
    bfc0:	00004189 	andeq	r4, r0, r9, lsl #3
    bfc4:	a2024d01 	andge	r4, r2, #1, 26	; 0x40
    bfc8:	3d000000 	stccc	0, cr0, [r0, #-0]
    bfcc:	00000079 	andeq	r0, r0, r9, ror r0
    bfd0:	003ef218 	eorseq	pc, lr, r8, lsl r2	; <UNPREDICTABLE>
    bfd4:	02610100 	rsbeq	r0, r1, #0, 2
    bfd8:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
    bfdc:	0000001c 	andeq	r0, r0, ip, lsl r0
    bfe0:	08559c01 	ldmdaeq	r5, {r0, sl, fp, ip, pc}^
    bfe4:	f6190000 			; <UNDEFINED> instruction: 0xf6190000
    bfe8:	01000040 	tsteq	r0, r0, asr #32
    bfec:	06210261 	strteq	r0, [r1], -r1, ror #4
    bff0:	50010000 	andpl	r0, r1, r0
    bff4:	003faf19 	eorseq	sl, pc, r9, lsl pc	; <UNPREDICTABLE>
    bff8:	02610100 	rsbeq	r0, r1, #0, 2
    bffc:	000000a2 	andeq	r0, r0, r2, lsr #1
    c000:	18005101 	stmdane	r0, {r0, r8, ip, lr}
    c004:	00003f4d 	andeq	r3, r0, sp, asr #30
    c008:	cc027b01 	stcgt	11, cr7, [r2], {1}
    c00c:	1e080050 	mcrne	0, 0, r0, cr8, cr0, {2}
    c010:	01000000 	mrseq	r0, (UNDEF: 0)
    c014:	0008889c 	muleq	r8, ip, r8
    c018:	40f61900 	rscsmi	r1, r6, r0, lsl #18
    c01c:	7b010000 	blvc	4c024 <_Min_Stack_Size+0x4bc24>
    c020:	00062102 	andeq	r2, r6, r2, lsl #2
    c024:	19500100 	ldmdbne	r0, {r8}^
    c028:	00003fc5 	andeq	r3, r0, r5, asr #31
    c02c:	a2027b01 	andge	r7, r2, #1024	; 0x400
    c030:	01000000 	mrseq	r0, (UNDEF: 0)
    c034:	90180051 	andsls	r0, r8, r1, asr r0
    c038:	0100003f 	tsteq	r0, pc, lsr r0
    c03c:	50ec0293 	smlalpl	r0, ip, r3, r2
    c040:	001a0800 	andseq	r0, sl, r0, lsl #16
    c044:	9c010000 	stcls	0, cr0, [r1], {-0}
    c048:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    c04c:	0040f619 	subeq	pc, r0, r9, lsl r6	; <UNPREDICTABLE>
    c050:	02930100 	addseq	r0, r3, #0, 2
    c054:	00000621 	andeq	r0, r0, r1, lsr #12
    c058:	83195001 	tsthi	r9, #1
    c05c:	01000027 	tsteq	r0, r7, lsr #32
    c060:	012d0293 			; <UNDEFINED> instruction: 0x012d0293
    c064:	51010000 	mrspl	r0, (UNDEF: 1)
    c068:	406c1800 	rsbmi	r1, ip, r0, lsl #16
    c06c:	b2010000 	andlt	r0, r1, #0
    c070:	00510802 	subseq	r0, r1, r2, lsl #16
    c074:	00001a08 	andeq	r1, r0, r8, lsl #20
    c078:	ee9c0100 	fmle	f0, f4, f0
    c07c:	19000008 	stmdbne	r0, {r3}
    c080:	000040f6 	strdeq	r4, [r0], -r6
    c084:	2102b201 	tstcs	r2, r1, lsl #4
    c088:	01000006 	tsteq	r0, r6
    c08c:	27831950 			; <UNDEFINED> instruction: 0x27831950
    c090:	b2010000 	andlt	r0, r1, #0
    c094:	00012d02 	andeq	r2, r1, r2, lsl #26
    c098:	00510100 	subseq	r0, r1, r0, lsl #2
    c09c:	00417418 	subeq	r7, r1, r8, lsl r4
    c0a0:	02d70100 	sbcseq	r0, r7, #0, 2
    c0a4:	08005124 	stmdaeq	r0, {r2, r5, r8, ip, lr}
    c0a8:	00000048 	andeq	r0, r0, r8, asr #32
    c0ac:	09439c01 	stmdbeq	r3, {r0, sl, fp, ip, pc}^
    c0b0:	a0190000 	andsge	r0, r9, r0
    c0b4:	0100003f 	tsteq	r0, pc, lsr r0
    c0b8:	062102d7 			; <UNDEFINED> instruction: 0x062102d7
    c0bc:	50010000 	andpl	r0, r1, r0
    c0c0:	003ea01a 	eorseq	sl, lr, sl, lsl r0
    c0c4:	02d70100 	sbcseq	r0, r7, #0, 2
    c0c8:	00000737 	andeq	r0, r0, r7, lsr r7
    c0cc:	0000795e 	andeq	r7, r0, lr, asr r9
    c0d0:	002b5e1b 	eoreq	r5, fp, fp, lsl lr
    c0d4:	02d90100 	sbcseq	r0, r9, #0, 2
    c0d8:	000000a2 	andeq	r0, r0, r2, lsr #1
    c0dc:	0000797f 	andeq	r7, r0, pc, ror r9
    c0e0:	706d741c 	rsbvc	r7, sp, ip, lsl r4
    c0e4:	02d90100 	sbcseq	r0, r9, #0, 2
    c0e8:	000000a2 	andeq	r0, r0, r2, lsr #1
    c0ec:	000079a9 	andeq	r7, r0, r9, lsr #19
    c0f0:	41bb1d00 			; <UNDEFINED> instruction: 0x41bb1d00
    c0f4:	21010000 	mrscs	r0, (UNDEF: 1)
    c0f8:	0000a203 	andeq	sl, r0, r3, lsl #4
    c0fc:	00516c00 	subseq	r6, r1, r0, lsl #24
    c100:	00000608 	andeq	r0, r0, r8, lsl #12
    c104:	6e9c0100 	fmlvse	f0, f4, f0
    c108:	1a000009 	bne	c134 <_Min_Stack_Size+0xbd34>
    c10c:	000040f6 	strdeq	r4, [r0], -r6
    c110:	21032101 	tstcs	r3, r1, lsl #2
    c114:	f1000006 	cps	#6
    c118:	00000079 	andeq	r0, r0, r9, ror r0
    c11c:	0041aa18 	subeq	sl, r1, r8, lsl sl
    c120:	03310100 	teqeq	r1, #0, 2
    c124:	08005174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip, lr}
    c128:	00000004 	andeq	r0, r0, r4
    c12c:	09a19c01 	stmibeq	r1!, {r0, sl, fp, ip, pc}
    c130:	f6190000 			; <UNDEFINED> instruction: 0xf6190000
    c134:	01000040 	tsteq	r0, r0, asr #32
    c138:	06210331 			; <UNDEFINED> instruction: 0x06210331
    c13c:	50010000 	andpl	r0, r1, r0
    c140:	00372819 	eorseq	r2, r7, r9, lsl r8
    c144:	03310100 	teqeq	r1, #0, 2
    c148:	000000a2 	andeq	r0, r0, r2, lsr #1
    c14c:	18005101 	stmdane	r0, {r0, r8, ip, lr}
    c150:	00004140 	andeq	r4, r0, r0, asr #2
    c154:	78038b01 	stmdavc	r3, {r0, r8, r9, fp, pc}
    c158:	1a080051 	bne	20c2a4 <_Min_Stack_Size+0x20bea4>
    c15c:	01000000 	mrseq	r0, (UNDEF: 0)
    c160:	0009d49c 	muleq	r9, ip, r4
    c164:	40f61900 	rscsmi	r1, r6, r0, lsl #18
    c168:	8b010000 	blhi	4c170 <_Min_Stack_Size+0x4bd70>
    c16c:	00062103 	andeq	r2, r6, r3, lsl #2
    c170:	19500100 	ldmdbne	r0, {r8}^
    c174:	00002783 	andeq	r2, r0, r3, lsl #15
    c178:	2d038b01 	vstrcs	d8, [r3, #-4]
    c17c:	01000001 	tsteq	r0, r1
    c180:	d9180051 	ldmdble	r8, {r0, r4, r6}
    c184:	0100003f 	tsteq	r0, pc, lsr r0
    c188:	519403a1 	orrspl	r0, r4, r1, lsr #7
    c18c:	000c0800 	andeq	r0, ip, r0, lsl #16
    c190:	9c010000 	stcls	0, cr0, [r1], {-0}
    c194:	000009f9 	strdeq	r0, [r0], -r9
    c198:	0040f619 	subeq	pc, r0, r9, lsl r6	; <UNPREDICTABLE>
    c19c:	03a10100 			; <UNDEFINED> instruction: 0x03a10100
    c1a0:	00000621 	andeq	r0, r0, r1, lsr #12
    c1a4:	1d005001 	stcne	0, cr5, [r0, #-4]
    c1a8:	00004151 	andeq	r4, r0, r1, asr r1
    c1ac:	a203b301 	andge	fp, r3, #67108864	; 0x4000000
    c1b0:	a0000000 	andge	r0, r0, r0
    c1b4:	0c080051 	stceq	0, cr0, [r8], {81}	; 0x51
    c1b8:	01000000 	mrseq	r0, (UNDEF: 0)
    c1bc:	000a429c 	muleq	sl, ip, r2
    c1c0:	40f61a00 	rscsmi	r1, r6, r0, lsl #20
    c1c4:	b3010000 	movwlt	r0, #4096	; 0x1000
    c1c8:	00062103 	andeq	r2, r6, r3, lsl #2
    c1cc:	007a1200 	rsbseq	r1, sl, r0, lsl #4
    c1d0:	3fbd1900 	svccc	0x00bd1900
    c1d4:	b3010000 	movwlt	r0, #4096	; 0x1000
    c1d8:	00009703 	andeq	r9, r0, r3, lsl #14
    c1dc:	1b510100 	blne	144c5e4 <_Min_Stack_Size+0x144c1e4>
    c1e0:	00003f23 	andeq	r3, r0, r3, lsr #30
    c1e4:	a203b501 	andge	fp, r3, #4194304	; 0x400000
    c1e8:	33000000 	movwcc	r0, #0
    c1ec:	0000007a 	andeq	r0, r0, sl, ror r0
    c1f0:	003f0e1d 	eorseq	r0, pc, sp, lsl lr	; <UNPREDICTABLE>
    c1f4:	03cc0100 	biceq	r0, ip, #0, 2
    c1f8:	000000a2 	andeq	r0, r0, r2, lsr #1
    c1fc:	080051ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, lr}
    c200:	00000006 	andeq	r0, r0, r6
    c204:	0a6d9c01 	beq	1b73210 <_Min_Stack_Size+0x1b72e10>
    c208:	f61a0000 			; <UNDEFINED> instruction: 0xf61a0000
    c20c:	01000040 	tsteq	r0, r0, asr #32
    c210:	062103cc 	strteq	r0, [r1], -ip, asr #7
    c214:	7a520000 	bvc	148c21c <_Min_Stack_Size+0x148be1c>
    c218:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    c21c:	00003f2a 	andeq	r3, r0, sl, lsr #30
    c220:	b403f101 	strlt	pc, [r3], #-257	; 0x101
    c224:	14080051 	strne	r0, [r8], #-81	; 0x51
    c228:	01000000 	mrseq	r0, (UNDEF: 0)
    c22c:	000ab09c 	muleq	sl, ip, r0
    c230:	40f61900 	rscsmi	r1, r6, r0, lsl #18
    c234:	f1010000 	setend	le
    c238:	00062103 	andeq	r2, r6, r3, lsl #2
    c23c:	1a500100 	bne	140c644 <_Min_Stack_Size+0x140c244>
    c240:	0000404e 	andeq	r4, r0, lr, asr #32
    c244:	a203f101 	andge	pc, r3, #1073741824	; 0x40000000
    c248:	73000000 	movwvc	r0, #0
    c24c:	1900007a 	stmdbne	r0, {r1, r3, r4, r5, r6}
    c250:	00002783 	andeq	r2, r0, r3, lsl #15
    c254:	2d03f101 	stfcsd	f7, [r3, #-4]
    c258:	01000001 	tsteq	r0, r1
    c25c:	b5180052 	ldrlt	r0, [r8, #-82]	; 0x52
    c260:	0100003e 	tsteq	r0, lr, lsr r0
    c264:	51c8045d 	bicpl	r0, r8, sp, asr r4
    c268:	001e0800 	andseq	r0, lr, r0, lsl #16
    c26c:	9c010000 	stcls	0, cr0, [r1], {-0}
    c270:	00000b13 	andeq	r0, r0, r3, lsl fp
    c274:	0040f619 	subeq	pc, r0, r9, lsl r6	; <UNPREDICTABLE>
    c278:	045d0100 	ldrbeq	r0, [sp], #-256	; 0x100
    c27c:	00000621 	andeq	r0, r0, r1, lsr #12
    c280:	051a5001 	ldreq	r5, [sl, #-1]
    c284:	01000040 	tsteq	r0, r0, asr #32
    c288:	0097045d 	addseq	r0, r7, sp, asr r4
    c28c:	7aad0000 	bvc	feb4c294 <_estack+0xdeb1c294>
    c290:	83190000 	tsthi	r9, #0
    c294:	01000027 	tsteq	r0, r7, lsr #32
    c298:	012d045d 	teqeq	sp, sp, asr r4
    c29c:	52010000 	andpl	r0, r1, #0
    c2a0:	0033be1b 	eorseq	fp, r3, fp, lsl lr
    c2a4:	045f0100 	ldrbeq	r0, [pc], #-256	; c2ac <_Min_Stack_Size+0xbeac>
    c2a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    c2ac:	00007ace 	andeq	r7, r0, lr, asr #21
    c2b0:	0034e71b 	eorseq	lr, r4, fp, lsl r7
    c2b4:	045f0100 	ldrbeq	r0, [pc], #-256	; c2bc <_Min_Stack_Size+0xbebc>
    c2b8:	000000a2 	andeq	r0, r0, r2, lsr #1
    c2bc:	00007afb 	strdeq	r7, [r0], -fp
    c2c0:	3f7a1d00 	svccc	0x007a1d00
    c2c4:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    c2c8:	0000ff04 	andeq	pc, r0, r4, lsl #30
    c2cc:	0051e800 	subseq	lr, r1, r0, lsl #16
    c2d0:	00000c08 	andeq	r0, r0, r8, lsl #24
    c2d4:	5c9c0100 	ldfpls	f0, [ip], {0}
    c2d8:	1a00000b 	bne	c30c <_Min_Stack_Size+0xbf0c>
    c2dc:	000040f6 	strdeq	r4, [r0], -r6
    c2e0:	21048901 	tstcs	r4, r1, lsl #18
    c2e4:	25000006 	strcs	r0, [r0, #-6]
    c2e8:	1900007b 	stmdbne	r0, {r0, r1, r3, r4, r5, r6}
    c2ec:	00003ff8 	strdeq	r3, [r0], -r8
    c2f0:	a2048901 	andge	r8, r4, #16384	; 0x4000
    c2f4:	01000000 	mrseq	r0, (UNDEF: 0)
    c2f8:	29831b51 	stmibcs	r3, {r0, r4, r6, r8, r9, fp, ip}
    c2fc:	8b010000 	blhi	4c304 <_Min_Stack_Size+0x4bf04>
    c300:	0000ff04 	andeq	pc, r0, r4, lsl #30
    c304:	007b4600 	rsbseq	r4, fp, r0, lsl #12
    c308:	26180000 	ldrcs	r0, [r8], -r0
    c30c:	01000041 	tsteq	r0, r1, asr #32
    c310:	51f404b2 	ldrhpl	r0, [r4, #66]!	; 0x42
    c314:	00080800 	andeq	r0, r8, r0, lsl #16
    c318:	9c010000 	stcls	0, cr0, [r1], {-0}
    c31c:	00000b91 	muleq	r0, r1, fp
    c320:	0040f619 	subeq	pc, r0, r9, lsl r6	; <UNPREDICTABLE>
    c324:	04b20100 	ldrteq	r0, [r2], #256	; 0x100
    c328:	00000621 	andeq	r0, r0, r1, lsr #12
    c32c:	f81a5001 			; <UNDEFINED> instruction: 0xf81a5001
    c330:	0100003f 	tsteq	r0, pc, lsr r0
    c334:	00a204b2 	strhteq	r0, [r2], r2
    c338:	7b6e0000 	blvc	1b8c340 <_Min_Stack_Size+0x1b8bf40>
    c33c:	1d000000 	stcne	0, cr0, [r0, #-0]
    c340:	00003f39 	andeq	r3, r0, r9, lsr pc
    c344:	0b04cb01 	bleq	13ef50 <_Min_Stack_Size+0x13eb50>
    c348:	fc000001 	stc2	0, cr0, [r0], {1}
    c34c:	2a080051 	bcs	20c498 <_Min_Stack_Size+0x20c098>
    c350:	01000000 	mrseq	r0, (UNDEF: 0)
    c354:	000c089c 	muleq	ip, ip, r8
    c358:	40f61a00 	rscsmi	r1, r6, r0, lsl #20
    c35c:	cb010000 	blgt	4c364 <_Min_Stack_Size+0x4bf64>
    c360:	00062104 	andeq	r2, r6, r4, lsl #2
    c364:	007b8f00 	rsbseq	r8, fp, r0, lsl #30
    c368:	40051a00 	andmi	r1, r5, r0, lsl #20
    c36c:	cb010000 	blgt	4c374 <_Min_Stack_Size+0x4bf74>
    c370:	00009704 	andeq	r9, r0, r4, lsl #14
    c374:	007bb000 	rsbseq	fp, fp, r0
    c378:	29831b00 	stmibcs	r3, {r8, r9, fp, ip}
    c37c:	cd010000 	stcgt	0, cr0, [r1, #-0]
    c380:	00010b04 	andeq	r0, r1, r4, lsl #22
    c384:	007bd100 	rsbseq	sp, fp, r0, lsl #2
    c388:	33be1e00 			; <UNDEFINED> instruction: 0x33be1e00
    c38c:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    c390:	0000a204 	andeq	sl, r0, r4, lsl #4
    c394:	34e71b00 	strbtcc	r1, [r7], #2816	; 0xb00
    c398:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    c39c:	0000a204 	andeq	sl, r0, r4, lsl #4
    c3a0:	007bf000 	rsbseq	pc, fp, r0
    c3a4:	39d91b00 	ldmibcc	r9, {r8, r9, fp, ip}^
    c3a8:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    c3ac:	0000a204 	andeq	sl, r0, r4, lsl #4
    c3b0:	007c0c00 	rsbseq	r0, ip, r0, lsl #24
    c3b4:	a0180000 	andsge	r0, r8, r0
    c3b8:	01000040 	tsteq	r0, r0, asr #32
    c3bc:	52280502 	eorpl	r0, r8, #8388608	; 0x800000
    c3c0:	00120800 	andseq	r0, r2, r0, lsl #16
    c3c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    c3c8:	00000c49 	andeq	r0, r0, r9, asr #24
    c3cc:	0040f619 	subeq	pc, r0, r9, lsl r6	; <UNPREDICTABLE>
    c3d0:	05020100 	streq	r0, [r2, #-256]	; 0x100
    c3d4:	00000621 	andeq	r0, r0, r1, lsr #12
    c3d8:	051a5001 	ldreq	r5, [sl, #-1]
    c3dc:	01000040 	tsteq	r0, r0, asr #32
    c3e0:	00970502 	addseq	r0, r7, r2, lsl #10
    c3e4:	7c370000 	ldcvc	0, cr0, [r7], #-0
    c3e8:	be1e0000 	cdplt	0, 1, cr0, cr14, cr0, {0}
    c3ec:	01000033 	tsteq	r0, r3, lsr r0
    c3f0:	00a20504 	adceq	r0, r2, r4, lsl #10
    c3f4:	1f000000 	svcne	0x00000000
    c3f8:	0000039d 	muleq	r0, sp, r3
    c3fc:	e406a706 	str	sl, [r6], #-1798	; 0x706
    c400:	20000000 	andcs	r0, r0, r0
    c404:	00002de1 	andeq	r2, r0, r1, ror #27
    c408:	6c024a07 	stcvs	10, cr4, [r2], {7}
    c40c:	2100000c 	tstcs	r0, ip
    c410:	000000b8 	strheq	r0, [r0], -r8
    c414:	00012d21 	andeq	r2, r1, r1, lsr #26
    c418:	b7220000 	strlt	r0, [r2, -r0]!
    c41c:	0700002a 	streq	r0, [r0, -sl, lsr #32]
    c420:	b8210249 	stmdalt	r1!, {r0, r3, r6, r9}
    c424:	21000000 	mrscs	r0, (UNDEF: 0)
    c428:	0000012d 	andeq	r0, r0, sp, lsr #2
    c42c:	033c0000 	teqeq	ip, #0
    c430:	00040000 	andeq	r0, r4, r0
    c434:	00002507 	andeq	r2, r0, r7, lsl #10
    c438:	02840104 	addeq	r0, r4, #4, 2
    c43c:	30010000 	andcc	r0, r1, r0
    c440:	01000042 	tsteq	r0, r2, asr #32
    c444:	08000001 	stmdaeq	r0, {r0}
    c448:	00000014 	andeq	r0, r0, r4, lsl r0
    c44c:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    c450:	02000045 	andeq	r0, r0, #69	; 0x45
    c454:	01500601 	cmpeq	r0, r1, lsl #12
    c458:	01020000 	mrseq	r0, (UNDEF: 2)
    c45c:	00014e08 	andeq	r4, r1, r8, lsl #28
    c460:	05020200 	streq	r0, [r2, #-512]	; 0x200
    c464:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    c468:	e5070202 	str	r0, [r7, #-514]	; 0x202
    c46c:	03000001 	movweq	r0, #1
    c470:	00000377 	andeq	r0, r0, r7, ror r3
    c474:	004c3702 	subeq	r3, ip, r2, lsl #14
    c478:	04020000 	streq	r0, [r2], #-0
    c47c:	0000c505 	andeq	ip, r0, r5, lsl #10
    c480:	00510300 	subseq	r0, r1, r0, lsl #6
    c484:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    c488:	0000005e 	andeq	r0, r0, lr, asr r0
    c48c:	78070402 	stmdavc	r7, {r1, sl}
    c490:	02000001 	andeq	r0, r0, #1
    c494:	00c00508 	sbceq	r0, r0, r8, lsl #10
    c498:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    c49c:	00017307 	andeq	r7, r1, r7, lsl #6
    c4a0:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    c4a4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    c4a8:	7d070402 	cfstrsvc	mvf0, [r7, #-8]
    c4ac:	03000001 	movweq	r0, #1
    c4b0:	00000379 	andeq	r0, r0, r9, ror r3
    c4b4:	00414103 	subeq	r4, r1, r3, lsl #2
    c4b8:	53030000 	movwpl	r0, #12288	; 0x3000
    c4bc:	03000000 	movweq	r0, #0
    c4c0:	00005342 	andeq	r5, r0, r2, asr #6
    c4c4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c4c8:	0000002c 	andeq	r0, r0, ip, lsr #32
    c4cc:	00008c05 	andeq	r8, r0, r5, lsl #24
    c4d0:	00810500 	addeq	r0, r1, r0, lsl #10
    c4d4:	01060000 	mrseq	r0, (UNDEF: 6)
    c4d8:	be01f704 	cdplt	7, 0, cr15, cr1, cr4, {0}
    c4dc:	07000000 	streq	r0, [r0, -r0]
    c4e0:	000028e4 	andeq	r2, r0, r4, ror #17
    c4e4:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    c4e8:	00010054 	andeq	r0, r1, r4, asr r0
    c4ec:	003d2909 	eorseq	r2, sp, r9, lsl #18
    c4f0:	01f70400 	mvnseq	r0, r0, lsl #8
    c4f4:	000000a8 	andeq	r0, r0, r8, lsr #1
    c4f8:	003ca009 	eorseq	sl, ip, r9
    c4fc:	01f70400 	mvnseq	r0, r0, lsl #8
    c500:	000000a8 	andeq	r0, r0, r8, lsr #1
    c504:	f9040106 			; <UNDEFINED> instruction: 0xf9040106
    c508:	0000ec01 	andeq	lr, r0, r1, lsl #24
    c50c:	04880700 	streq	r0, [r8], #1792	; 0x700
    c510:	07000000 	streq	r0, [r0, -r0]
    c514:	000005c0 	andeq	r0, r0, r0, asr #11
    c518:	2a090001 	bcs	24c524 <_Min_Stack_Size+0x24c124>
    c51c:	04000009 	streq	r0, [r0], #-9
    c520:	00d601f9 	ldrsheq	r0, [r6], #25
    c524:	180a0000 	stmdane	sl, {}	; <UNPREDICTABLE>
    c528:	4f033004 	svcmi	0x00033004
    c52c:	0b000001 	bleq	c538 <_Min_Stack_Size+0xc138>
    c530:	00524d49 	subseq	r4, r2, r9, asr #26
    c534:	9e033204 	cdpls	2, 0, cr3, cr3, cr4, {0}
    c538:	00000000 	andeq	r0, r0, r0
    c53c:	524d450b 	subpl	r4, sp, #46137344	; 0x2c00000
    c540:	03330400 	teqeq	r3, #0, 8
    c544:	0000009e 	muleq	r0, lr, r0
    c548:	421b0c04 	andsmi	r0, fp, #4, 24	; 0x400
    c54c:	34040000 	strcc	r0, [r4], #-0
    c550:	00009e03 	andeq	r9, r0, r3, lsl #28
    c554:	8e0c0800 	cdphi	8, 0, cr0, cr12, cr0, {0}
    c558:	04000042 	streq	r0, [r0], #-66	; 0x42
    c55c:	009e0335 	addseq	r0, lr, r5, lsr r3
    c560:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c564:	00004293 	muleq	r0, r3, r2
    c568:	9e033604 	cfmadd32ls	mvax0, mvfx3, mvfx3, mvfx4
    c56c:	10000000 	andne	r0, r0, r0
    c570:	0052500b 	subseq	r5, r2, fp
    c574:	9e033704 	cdpls	7, 0, cr3, cr3, cr4, {0}
    c578:	14000000 	strne	r0, [r0], #-0
    c57c:	420e0900 	andmi	r0, lr, #0, 18
    c580:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    c584:	0000f803 	andeq	pc, r0, r3, lsl #16
    c588:	05010d00 	streq	r0, [r1, #-3328]	; 0xd00
    c58c:	00017037 	andeq	r7, r1, r7, lsr r0
    c590:	09800700 	stmibeq	r0, {r8, r9, sl}
    c594:	07000000 	streq	r0, [r0, -r0]
    c598:	00000c17 	andeq	r0, r0, r7, lsl ip
    c59c:	86030004 	strhi	r0, [r3], -r4
    c5a0:	05000005 	streq	r0, [r0, #-5]
    c5a4:	00015b3a 	andeq	r5, r1, sl, lsr fp
    c5a8:	05010d00 	streq	r0, [r1, #-3328]	; 0xd00
    c5ac:	00019643 	andeq	r9, r1, r3, asr #12
    c5b0:	0b700700 	bleq	1c0e1b8 <_Min_Stack_Size+0x1c0ddb8>
    c5b4:	07080000 	streq	r0, [r8, -r0]
    c5b8:	000005ec 	andeq	r0, r0, ip, ror #11
    c5bc:	046c070c 	strbteq	r0, [ip], #-1804	; 0x70c
    c5c0:	00100000 	andseq	r0, r0, r0
    c5c4:	000b4103 	andeq	r4, fp, r3, lsl #2
    c5c8:	7b470500 	blvc	11cd9d0 <_Min_Stack_Size+0x11cd5d0>
    c5cc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    c5d0:	da500508 	ble	140d9f8 <_Min_Stack_Size+0x140d5f8>
    c5d4:	0f000001 	svceq	0x00000001
    c5d8:	000008d1 	ldrdeq	r0, [r0], -r1
    c5dc:	008c5205 	addeq	r5, ip, r5, lsl #4
    c5e0:	0f000000 	svceq	0x00000000
    c5e4:	00000976 	andeq	r0, r0, r6, ror r9
    c5e8:	01705505 	cmneq	r0, r5, lsl #10
    c5ec:	0f040000 	svceq	0x00040000
    c5f0:	00000940 	andeq	r0, r0, r0, asr #18
    c5f4:	01965805 	orrseq	r5, r6, r5, lsl #16
    c5f8:	0f050000 	svceq	0x00050000
    c5fc:	00000439 	andeq	r0, r0, r9, lsr r4
    c600:	00ec5b05 	rsceq	r5, ip, r5, lsl #22
    c604:	00060000 	andeq	r0, r6, r0
    c608:	000b5f03 	andeq	r5, fp, r3, lsl #30
    c60c:	a15d0500 	cmpge	sp, r0, lsl #10
    c610:	10000001 	andne	r0, r0, r1
    c614:	00004299 	muleq	r0, r9, r2
    c618:	523c6e01 	eorspl	r6, ip, #1, 28
    c61c:	001e0800 	andseq	r0, lr, r0, lsl #16
    c620:	9c010000 	stcls	0, cr0, [r1], {-0}
    c624:	0006bf11 	andeq	fp, r6, r1, lsl pc
    c628:	5c7e0100 	ldfple	f0, [lr], #-0
    c62c:	80080052 	andhi	r0, r8, r2, asr r0
    c630:	01000000 	mrseq	r0, (UNDEF: 0)
    c634:	00022a9c 	muleq	r2, ip, sl
    c638:	41ef1200 	mvnmi	r1, r0, lsl #4
    c63c:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    c640:	0000022a 	andeq	r0, r0, sl, lsr #4
    c644:	00007c58 	andeq	r7, r0, r8, asr ip
    c648:	706d7413 	rsbvc	r7, sp, r3, lsl r4
    c64c:	8c800100 	stfhis	f0, [r0], {0}
    c650:	92000000 	andls	r0, r0, #0
    c654:	0000007c 	andeq	r0, r0, ip, ror r0
    c658:	01da0414 	bicseq	r0, sl, r4, lsl r4
    c65c:	20110000 	andscs	r0, r1, r0
    c660:	01000042 	tsteq	r0, r2, asr #32
    c664:	0052dcb6 	ldrheq	sp, [r2], #-198	; 0xffffff3a
    c668:	00000e08 	andeq	r0, r0, r8, lsl #28
    c66c:	539c0100 	orrspl	r0, ip, #0, 2
    c670:	15000002 	strne	r0, [r0, #-2]
    c674:	000041ef 	andeq	r4, r0, pc, ror #3
    c678:	022ab601 	eoreq	fp, sl, #1048576	; 0x100000
    c67c:	50010000 	andpl	r0, r1, r0
    c680:	41d61100 	bicsmi	r1, r6, r0, lsl #2
    c684:	c5010000 	strgt	r0, [r1, #-0]
    c688:	080052ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip, lr}
    c68c:	00000010 	andeq	r0, r0, r0, lsl r0
    c690:	02789c01 	rsbseq	r9, r8, #256	; 0x100
    c694:	d1120000 	tstle	r2, r0
    c698:	01000008 	tsteq	r0, r8
    c69c:	00008cc5 	andeq	r8, r0, r5, asr #25
    c6a0:	007d5700 	rsbseq	r5, sp, r0, lsl #14
    c6a4:	1a160000 	bne	58c6ac <_Min_Stack_Size+0x58c2ac>
    c6a8:	01000007 	tsteq	r0, r7
    c6ac:	0000bee3 	andeq	fp, r0, r3, ror #29
    c6b0:	0052fc00 	subseq	pc, r2, r0, lsl #24
    c6b4:	00001408 	andeq	r1, r0, r8, lsl #8
    c6b8:	b09c0100 	addslt	r0, ip, r0, lsl #2
    c6bc:	12000002 	andne	r0, r0, #2
    c6c0:	000008d1 	ldrdeq	r0, [r0], -r1
    c6c4:	008ce301 	addeq	lr, ip, r1, lsl #6
    c6c8:	7d780000 	ldclvc	0, cr0, [r8, #-0]
    c6cc:	83170000 	tsthi	r7, #0
    c6d0:	01000029 	tsteq	r0, r9, lsr #32
    c6d4:	0000bee5 	andeq	fp, r0, r5, ror #29
    c6d8:	007d9900 	rsbseq	r9, sp, r0, lsl #18
    c6dc:	ff110000 			; <UNDEFINED> instruction: 0xff110000
    c6e0:	01000041 	tsteq	r0, r1, asr #32
    c6e4:	005310fa 	ldrsheq	r1, [r3], #-10
    c6e8:	00000c08 	andeq	r0, r0, r8, lsl #24
    c6ec:	d39c0100 	orrsle	r0, ip, #0, 2
    c6f0:	15000002 	strne	r0, [r0, #-2]
    c6f4:	000008d1 	ldrdeq	r0, [r0], -r1
    c6f8:	008cfa01 	addeq	pc, ip, r1, lsl #20
    c6fc:	50010000 	andpl	r0, r1, r0
    c700:	427d1800 	rsbsmi	r1, sp, #0, 16
    c704:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    c708:	0000ca01 	andeq	ip, r0, r1, lsl #20
    c70c:	00531c00 	subseq	r1, r3, r0, lsl #24
    c710:	00001408 	andeq	r1, r0, r8, lsl #8
    c714:	0e9c0100 	fmleqe	f0, f4, f0
    c718:	19000003 	stmdbne	r0, {r0, r1}
    c71c:	000008d1 	ldrdeq	r0, [r0], -r1
    c720:	8c010801 	stchi	8, cr0, [r1], {1}
    c724:	d2000000 	andle	r0, r0, #0
    c728:	1a00007d 	bne	c924 <_Min_Stack_Size+0xc524>
    c72c:	00002983 	andeq	r2, r0, r3, lsl #19
    c730:	be010a01 	vmlalt.f32	s0, s2, s2
    c734:	f3000000 	vhadd.u8	d0, d0, d0
    c738:	0000007d 	andeq	r0, r0, sp, ror r0
    c73c:	0005c71b 	andeq	ip, r5, fp, lsl r7
    c740:	01200100 	teqeq	r0, r0, lsl #2
    c744:	08005330 	stmdaeq	r0, {r4, r5, r8, r9, ip, lr}
    c748:	0000000c 	andeq	r0, r0, ip
    c74c:	03339c01 	teqeq	r3, #256	; 0x100
    c750:	d11c0000 	tstle	ip, r0
    c754:	01000008 	tsteq	r0, r8
    c758:	008c0120 	addeq	r0, ip, r0, lsr #2
    c75c:	50010000 	andpl	r0, r1, r0
    c760:	039d1d00 	orrseq	r1, sp, #0, 26
    c764:	a7060000 	strge	r0, [r6, -r0]
    c768:	0000a306 	andeq	sl, r0, r6, lsl #6
    c76c:	086f0000 	stmdaeq	pc!, {}^	; <UNPREDICTABLE>
    c770:	00040000 	andeq	r0, r4, r0
    c774:	000026cc 	andeq	r2, r0, ip, asr #13
    c778:	02840104 	addeq	r0, r4, #4, 2
    c77c:	73010000 	movwvc	r0, #4096	; 0x1000
    c780:	01000046 	tsteq	r0, r6, asr #32
    c784:	50000001 	andpl	r0, r0, r1
    c788:	00000014 	andeq	r0, r0, r4, lsl r0
    c78c:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    c790:	02000047 	andeq	r0, r0, #71	; 0x47
    c794:	01500601 	cmpeq	r0, r1, lsl #12
    c798:	01020000 	mrseq	r0, (UNDEF: 2)
    c79c:	00014e08 	andeq	r4, r1, r8, lsl #28
    c7a0:	05020200 	streq	r0, [r2, #-512]	; 0x200
    c7a4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    c7a8:	e5070202 	str	r0, [r7, #-514]	; 0x202
    c7ac:	03000001 	movweq	r0, #1
    c7b0:	00000377 	andeq	r0, r0, r7, ror r3
    c7b4:	004c3702 	subeq	r3, ip, r2, lsl #14
    c7b8:	04020000 	streq	r0, [r2], #-0
    c7bc:	0000c505 	andeq	ip, r0, r5, lsl #10
    c7c0:	00510300 	subseq	r0, r1, r0, lsl #6
    c7c4:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    c7c8:	0000005e 	andeq	r0, r0, lr, asr r0
    c7cc:	78070402 	stmdavc	r7, {r1, sl}
    c7d0:	02000001 	andeq	r0, r0, #1
    c7d4:	00c00508 	sbceq	r0, r0, r8, lsl #10
    c7d8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    c7dc:	00017307 	andeq	r7, r1, r7, lsl #6
    c7e0:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    c7e4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    c7e8:	7d070402 	cfstrsvc	mvf0, [r7, #-8]
    c7ec:	03000001 	movweq	r0, #1
    c7f0:	00000379 	andeq	r0, r0, r9, ror r3
    c7f4:	00414103 	subeq	r4, r1, r3, lsl #2
    c7f8:	53030000 	movwpl	r0, #12288	; 0x3000
    c7fc:	03000000 	movweq	r0, #0
    c800:	00005342 	andeq	r5, r0, r2, asr #6
    c804:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c808:	0000002c 	andeq	r0, r0, ip, lsr #32
    c80c:	00008c05 	andeq	r8, r0, r5, lsl #24
    c810:	00810500 	addeq	r0, r1, r0, lsl #10
    c814:	01060000 	mrseq	r0, (UNDEF: 6)
    c818:	be01f704 	cdplt	7, 0, cr15, cr1, cr4, {0}
    c81c:	07000000 	streq	r0, [r0, -r0]
    c820:	000028e4 	andeq	r2, r0, r4, ror #17
    c824:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    c828:	00010054 	andeq	r0, r1, r4, asr r0
    c82c:	003d2909 	eorseq	r2, sp, r9, lsl #18
    c830:	01f70400 	mvnseq	r0, r0, lsl #8
    c834:	000000a8 	andeq	r0, r0, r8, lsr #1
    c838:	003ca009 	eorseq	sl, ip, r9
    c83c:	01f70400 	mvnseq	r0, r0, lsl #8
    c840:	000000a8 	andeq	r0, r0, r8, lsr #1
    c844:	f9040106 			; <UNDEFINED> instruction: 0xf9040106
    c848:	0000ec01 	andeq	lr, r0, r1, lsl #24
    c84c:	04880700 	streq	r0, [r8], #1792	; 0x700
    c850:	07000000 	streq	r0, [r0, -r0]
    c854:	000005c0 	andeq	r0, r0, r0, asr #11
    c858:	2a090001 	bcs	24c864 <_Min_Stack_Size+0x24c464>
    c85c:	04000009 	streq	r0, [r0], #-9
    c860:	00d601f9 	ldrsheq	r0, [r6], #25
    c864:	000a0000 	andeq	r0, sl, r0
    c868:	02c7040c 	sbceq	r0, r7, #12, 8	; 0xc000000
    c86c:	0000022f 	andeq	r0, r0, pc, lsr #4
    c870:	0052430b 	subseq	r4, r2, fp, lsl #6
    c874:	9e02c904 	cdpls	9, 0, cr12, cr2, cr4, {0}
    c878:	00000000 	andeq	r0, r0, r0
    c87c:	5253490b 	subspl	r4, r3, #180224	; 0x2c000
    c880:	02ca0400 	sbceq	r0, sl, #0, 8
    c884:	0000009e 	muleq	r0, lr, r0
    c888:	3d8e0c04 	stccc	12, cr0, [lr, #16]
    c88c:	cb040000 	blgt	10c894 <_Min_Stack_Size+0x10c494>
    c890:	00009e02 	andeq	r9, r0, r2, lsl #28
    c894:	a30c0800 	movwge	r0, #51200	; 0xc800
    c898:	04000044 	streq	r0, [r0], #-68	; 0x44
    c89c:	009e02cc 	addseq	r0, lr, ip, asr #5
    c8a0:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c8a4:	0000450b 	andeq	r4, r0, fp, lsl #10
    c8a8:	9e02cd04 	cdpls	13, 0, cr12, cr2, cr4, {0}
    c8ac:	10000000 	andne	r0, r0, r0
    c8b0:	0047660c 	subeq	r6, r7, ip, lsl #12
    c8b4:	02ce0400 	sbceq	r0, lr, #0, 8
    c8b8:	0000009e 	muleq	r0, lr, r0
    c8bc:	47af0c14 			; <UNDEFINED> instruction: 0x47af0c14
    c8c0:	cf040000 	svcgt	0x00040000
    c8c4:	00009e02 	andeq	r9, r0, r2, lsl #28
    c8c8:	d90c1800 	stmdble	ip, {fp, ip}
    c8cc:	04000046 	streq	r0, [r0], #-70	; 0x46
    c8d0:	009e02d0 			; <UNDEFINED> instruction: 0x009e02d0
    c8d4:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    c8d8:	0000448d 	andeq	r4, r0, sp, lsl #9
    c8dc:	9e02d104 	mvflss	f5, f4
    c8e0:	20000000 	andcs	r0, r0, r0
    c8e4:	0046420c 	subeq	r4, r6, ip, lsl #4
    c8e8:	02d20400 	sbcseq	r0, r2, #0, 8
    c8ec:	0000009e 	muleq	r0, lr, r0
    c8f0:	45e80c24 	strbmi	r0, [r8, #3108]!	; 0xc24
    c8f4:	d3040000 	movwle	r0, #16384	; 0x4000
    c8f8:	00009e02 	andeq	r9, r0, r2, lsl #28
    c8fc:	0b0c2800 	bleq	316904 <_Min_Stack_Size+0x316504>
    c900:	04000048 	streq	r0, [r0], #-72	; 0x48
    c904:	009e02d4 			; <UNDEFINED> instruction: 0x009e02d4
    c908:	0c2c0000 	stceq	0, cr0, [ip], #-0
    c90c:	000043cf 	andeq	r4, r0, pc, asr #7
    c910:	9e02d504 	cfsh32ls	mvfx13, mvfx2, #4
    c914:	30000000 	andcc	r0, r0, r0
    c918:	0046280c 	subeq	r2, r6, ip, lsl #16
    c91c:	02d60400 	sbcseq	r0, r6, #0, 8
    c920:	0000009e 	muleq	r0, lr, r0
    c924:	45e20c34 	strbmi	r0, [r2, #3124]!	; 0xc34
    c928:	d7040000 	strle	r0, [r4, -r0]
    c92c:	00009e02 	andeq	r9, r0, r2, lsl #28
    c930:	810c3800 	tsthi	ip, r0, lsl #16
    c934:	04000045 	streq	r0, [r0], #-69	; 0x45
    c938:	009e02d8 			; <UNDEFINED> instruction: 0x009e02d8
    c93c:	0b3c0000 	bleq	f0c944 <_Min_Stack_Size+0xf0c544>
    c940:	00524f4f 	subseq	r4, r2, pc, asr #30
    c944:	9e02d904 	cdpls	9, 0, cr13, cr2, cr4, {0}
    c948:	40000000 	andmi	r0, r0, r0
    c94c:	524c4e0b 	subpl	r4, ip, #11, 28	; 0xb0
    c950:	02da0400 	sbcseq	r0, sl, #0, 8
    c954:	0000009e 	muleq	r0, lr, r0
    c958:	574c0b44 	strbpl	r0, [ip, -r4, asr #22]
    c95c:	db040052 	blle	10caac <_Min_Stack_Size+0x10c6ac>
    c960:	00009e02 	andeq	r9, r0, r2, lsl #28
    c964:	d60c4800 	strle	r4, [ip], -r0, lsl #16
    c968:	04000043 	streq	r0, [r0], #-67	; 0x43
    c96c:	009e02dc 			; <UNDEFINED> instruction: 0x009e02dc
    c970:	0c4c0000 	mareq	acc0, r0, ip
    c974:	000035d5 	ldrdeq	r3, [r0], -r5
    c978:	2f02dd04 	svccs	0x0002dd04
    c97c:	50000002 	andpl	r0, r0, r2
    c980:	00433c0d 	subeq	r3, r3, sp, lsl #24
    c984:	02de0400 	sbcseq	r0, lr, #0, 8
    c988:	0000024f 	andeq	r0, r0, pc, asr #4
    c98c:	660d0400 	strvs	r0, [sp], -r0, lsl #8
    c990:	04000044 	streq	r0, [r0], #-68	; 0x44
    c994:	025402df 	subseq	r0, r4, #-268435443	; 0xf000000d
    c998:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c99c:	008c0e00 	addeq	r0, ip, r0, lsl #28
    c9a0:	023f0000 	eorseq	r0, pc, #0
    c9a4:	970f0000 	strls	r0, [pc, -r0]
    c9a8:	eb000000 	bl	c9b0 <_Min_Stack_Size+0xc5b0>
    c9ac:	008c0e00 	addeq	r0, ip, r0, lsl #28
    c9b0:	024f0000 	subeq	r0, pc, #0
    c9b4:	970f0000 	strls	r0, [pc, -r0]
    c9b8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    c9bc:	023f0500 	eorseq	r0, pc, #0, 10
    c9c0:	3f050000 	svccc	0x00050000
    c9c4:	09000002 	stmdbeq	r0, {r1}
    c9c8:	0000476c 	andeq	r4, r0, ip, ror #14
    c9cc:	f802e004 			; <UNDEFINED> instruction: 0xf802e004
    c9d0:	10000000 	andne	r0, r0, r0
    c9d4:	e6300528 	ldrt	r0, [r0], -r8, lsr #10
    c9d8:	11000002 	tstne	r0, r2
    c9dc:	0000442f 	andeq	r4, r0, pc, lsr #8
    c9e0:	008c3205 	addeq	r3, ip, r5, lsl #4
    c9e4:	11000000 	mrsne	r0, (UNDEF: 0)
    c9e8:	000044c0 	andeq	r4, r0, r0, asr #9
    c9ec:	008c3505 	addeq	r3, ip, r5, lsl #10
    c9f0:	11040000 	mrsne	r0, (UNDEF: 4)
    c9f4:	000042e0 	andeq	r4, r0, r0, ror #5
    c9f8:	008c3805 	addeq	r3, ip, r5, lsl #16
    c9fc:	11080000 	mrsne	r0, (UNDEF: 8)
    ca00:	00004734 	andeq	r4, r0, r4, lsr r7
    ca04:	008c4005 	addeq	r4, ip, r5
    ca08:	110c0000 	mrsne	r0, (UNDEF: 12)
    ca0c:	00004716 	andeq	r4, r0, r6, lsl r7
    ca10:	008c4805 	addeq	r4, ip, r5, lsl #16
    ca14:	11100000 	tstne	r0, r0
    ca18:	000047d9 	ldrdeq	r4, [r0], -r9
    ca1c:	008c5005 	addeq	r5, ip, r5
    ca20:	11140000 	tstne	r4, r0
    ca24:	000046f1 	strdeq	r4, [r0], -r1
    ca28:	008c5605 	addeq	r5, ip, r5, lsl #12
    ca2c:	11180000 	tstne	r8, r0
    ca30:	000047b4 			; <UNDEFINED> instruction: 0x000047b4
    ca34:	008c5905 	addeq	r5, ip, r5, lsl #18
    ca38:	111c0000 	tstne	ip, r0
    ca3c:	000044e7 	andeq	r4, r0, r7, ror #9
    ca40:	008c5c05 	addeq	r5, ip, r5, lsl #24
    ca44:	11200000 	teqne	r0, r0
    ca48:	0000440d 	andeq	r4, r0, sp, lsl #8
    ca4c:	008c5f05 	addeq	r5, ip, r5, lsl #30
    ca50:	00240000 	eoreq	r0, r4, r0
    ca54:	0045d003 	subeq	sp, r5, r3
    ca58:	65610500 	strbvs	r0, [r1, #-1280]!	; 0x500
    ca5c:	10000002 	andne	r0, r0, r2
    ca60:	7e65052c 	cdpvc	5, 6, cr0, cr5, cr12, {1}
    ca64:	11000003 	tstne	r0, r3
    ca68:	000043a1 	andeq	r4, r0, r1, lsr #7
    ca6c:	008c6705 	addeq	r6, ip, r5, lsl #14
    ca70:	11000000 	mrsne	r0, (UNDEF: 0)
    ca74:	000043ac 	andeq	r4, r0, ip, lsr #7
    ca78:	008c6a05 	addeq	r6, ip, r5, lsl #20
    ca7c:	11040000 	mrsne	r0, (UNDEF: 4)
    ca80:	00004746 	andeq	r4, r0, r6, asr #14
    ca84:	008c6d05 	addeq	r6, ip, r5, lsl #26
    ca88:	11080000 	mrsne	r0, (UNDEF: 8)
    ca8c:	00004343 	andeq	r4, r0, r3, asr #6
    ca90:	008c7005 	addeq	r7, ip, r5
    ca94:	110c0000 	mrsne	r0, (UNDEF: 12)
    ca98:	000043b6 			; <UNDEFINED> instruction: 0x000043b6
    ca9c:	008c7305 	addeq	r7, ip, r5, lsl #6
    caa0:	11100000 	tstne	r0, r0
    caa4:	00004784 	andeq	r4, r0, r4, lsl #15
    caa8:	008c7605 	addeq	r7, ip, r5, lsl #12
    caac:	11140000 	tstne	r4, r0
    cab0:	000042b3 			; <UNDEFINED> instruction: 0x000042b3
    cab4:	008c7905 	addeq	r7, ip, r5, lsl #18
    cab8:	11180000 	tstne	r8, r0
    cabc:	00004420 	andeq	r4, r0, r0, lsr #8
    cac0:	008c7c05 	addeq	r7, ip, r5, lsl #24
    cac4:	111c0000 	tstne	ip, r0
    cac8:	000046e1 	andeq	r4, r0, r1, ror #13
    cacc:	008c7f05 	addeq	r7, ip, r5, lsl #30
    cad0:	11200000 	teqne	r0, r0
    cad4:	000042f1 	strdeq	r4, [r0], -r1
    cad8:	008c8205 	addeq	r8, ip, r5, lsl #4
    cadc:	11240000 	teqne	r4, r0
    cae0:	00004805 	andeq	r4, r0, r5, lsl #16
    cae4:	008c8505 	addeq	r8, ip, r5, lsl #10
    cae8:	00280000 	eoreq	r0, r8, r0
    caec:	0042cb03 	subeq	ip, r2, r3, lsl #22
    caf0:	f1870500 			; <UNDEFINED> instruction: 0xf1870500
    caf4:	10000002 	andne	r0, r0, r2
    caf8:	168a052c 	strne	r0, [sl], ip, lsr #10
    cafc:	11000004 	tstne	r0, r4
    cb00:	000045ef 	andeq	r4, r0, pc, ror #11
    cb04:	008c8c05 	addeq	r8, ip, r5, lsl #24
    cb08:	11000000 	mrsne	r0, (UNDEF: 0)
    cb0c:	0000477a 	andeq	r4, r0, sl, ror r7
    cb10:	008c8f05 	addeq	r8, ip, r5, lsl #30
    cb14:	11040000 	mrsne	r0, (UNDEF: 4)
    cb18:	000045ac 	andeq	r4, r0, ip, lsr #11
    cb1c:	008c9205 	addeq	r9, ip, r5, lsl #4
    cb20:	11080000 	mrsne	r0, (UNDEF: 8)
    cb24:	0000432b 	andeq	r4, r0, fp, lsr #6
    cb28:	008c9505 	addeq	r9, ip, r5, lsl #10
    cb2c:	110c0000 	mrsne	r0, (UNDEF: 12)
    cb30:	0000462f 	andeq	r4, r0, pc, lsr #12
    cb34:	008c9805 	addeq	r9, ip, r5, lsl #16
    cb38:	11100000 	tstne	r0, r0
    cb3c:	000044a9 	andeq	r4, r0, r9, lsr #9
    cb40:	008c9b05 	addeq	r9, ip, r5, lsl #22
    cb44:	11140000 	tstne	r4, r0
    cb48:	000043dc 	ldrdeq	r4, [r0], -ip
    cb4c:	008c9e05 	addeq	r9, ip, r5, lsl #28
    cb50:	11180000 	tstne	r8, r0
    cb54:	000045fa 	strdeq	r4, [r0], -sl
    cb58:	008ca105 	addeq	sl, ip, r5, lsl #2
    cb5c:	111c0000 	tstne	ip, r0
    cb60:	000043fd 	strdeq	r4, [r0], -sp
    cb64:	008ca405 	addeq	sl, ip, r5, lsl #8
    cb68:	11200000 	teqne	r0, r0
    cb6c:	000047eb 	andeq	r4, r0, fp, ror #15
    cb70:	008ca705 	addeq	sl, ip, r5, lsl #14
    cb74:	11240000 	teqne	r4, r0
    cb78:	000043c9 	andeq	r4, r0, r9, asr #7
    cb7c:	008caa05 	addeq	sl, ip, r5, lsl #20
    cb80:	00280000 	eoreq	r0, r8, r0
    cb84:	00475103 	subeq	r5, r7, r3, lsl #2
    cb88:	89ac0500 	stmibhi	ip!, {r8, sl}
    cb8c:	12000003 	andne	r0, r0, #3
    cb90:	00004448 	andeq	r4, r0, r8, asr #8
    cb94:	533c6901 	teqpl	ip, #16384	; 0x4000
    cb98:	001a0800 	andseq	r0, sl, r0, lsl #16
    cb9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    cba0:	00000467 	andeq	r0, r0, r7, ror #8
    cba4:	00534813 	subseq	r4, r3, r3, lsl r8
    cba8:	00085f08 	andeq	r5, r8, r8, lsl #30
    cbac:	00045000 	andeq	r5, r4, r0
    cbb0:	51011400 	tstpl	r1, r0, lsl #8
    cbb4:	01143101 	tsteq	r4, r1, lsl #2
    cbb8:	43400350 	movtmi	r0, #848	; 0x350
    cbbc:	56150024 	ldrpl	r0, [r5], -r4, lsr #32
    cbc0:	5f080053 	svcpl	0x00080053
    cbc4:	14000008 	strne	r0, [r0], #-8
    cbc8:	30015101 	andcc	r5, r1, r1, lsl #2
    cbcc:	03500114 	cmpeq	r0, #20, 2
    cbd0:	00244340 	eoreq	r4, r4, r0, asr #6
    cbd4:	45b71200 	ldrmi	r1, [r7, #512]!	; 0x200
    cbd8:	7a010000 	bvc	4cbe0 <_Min_Stack_Size+0x4c7e0>
    cbdc:	08005358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, lr}
    cbe0:	000000b6 	strheq	r0, [r0], -r6
    cbe4:	04c89c01 	strbeq	r9, [r8], #3073	; 0xc01
    cbe8:	55160000 	ldrpl	r0, [r6, #-0]
    cbec:	01000044 	tsteq	r0, r4, asr #32
    cbf0:	0004c87a 	andeq	ip, r4, sl, ror r8
    cbf4:	007e2c00 	rsbseq	r2, lr, r0, lsl #24
    cbf8:	43f41700 	mvnsmi	r1, #0, 14
    cbfc:	7d010000 	stcvc	0, cr0, [r1, #-0]
    cc00:	0000008c 	andeq	r0, r0, ip, lsl #1
    cc04:	00007e58 	andeq	r7, r0, r8, asr lr
    cc08:	00470f17 	subeq	r0, r7, r7, lsl pc
    cc0c:	8c7e0100 	ldfhie	f0, [lr], #-0
    cc10:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    cc14:	1700007e 	smlsdxne	r0, lr, r0, r0
    cc18:	00004510 	andeq	r4, r0, r0, lsl r5
    cc1c:	008c7f01 	addeq	r7, ip, r1, lsl #30
    cc20:	7ec40000 	cdpvc	0, 12, cr0, cr4, cr0, {0}
    cc24:	07170000 	ldreq	r0, [r7, -r0]
    cc28:	01000047 	tsteq	r0, r7, asr #32
    cc2c:	00008c80 	andeq	r8, r0, r0, lsl #25
    cc30:	007efa00 	rsbseq	pc, lr, r0, lsl #20
    cc34:	04180000 	ldreq	r0, [r8], #-0
    cc38:	000002e6 	andeq	r0, r0, r6, ror #5
    cc3c:	00447c12 	subeq	r7, r4, r2, lsl ip
    cc40:	10d30100 	sbcsne	r0, r3, r0, lsl #2
    cc44:	18080054 	stmdane	r8, {r2, r4, r6}
    cc48:	01000000 	mrseq	r0, (UNDEF: 0)
    cc4c:	0004f19c 	muleq	r4, ip, r1
    cc50:	44551900 	ldrbmi	r1, [r5], #-2304	; 0x900
    cc54:	d3010000 	movwle	r0, #4096	; 0x1000
    cc58:	000004c8 	andeq	r0, r0, r8, asr #9
    cc5c:	1a005001 	bne	20c68 <_Min_Stack_Size+0x20868>
    cc60:	00004609 	andeq	r4, r0, r9, lsl #12
    cc64:	5428f201 	strtpl	pc, [r8], #-513	; 0x201
    cc68:	00120800 	andseq	r0, r2, r0, lsl #16
    cc6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    cc70:	00453b1a 	subeq	r3, r5, sl, lsl fp
    cc74:	3cfe0100 	ldfcce	f0, [lr]
    cc78:	12080054 	andne	r0, r8, #84	; 0x54
    cc7c:	01000000 	mrseq	r0, (UNDEF: 0)
    cc80:	45191b9c 	ldrmi	r1, [r9, #-2972]	; 0xb9c
    cc84:	0b010000 	bleq	4cc8c <_Min_Stack_Size+0x4c88c>
    cc88:	00545001 	subseq	r5, r4, r1
    cc8c:	00001c08 	andeq	r1, r0, r8, lsl #24
    cc90:	389c0100 	ldmcc	ip, {r8}
    cc94:	1c000005 	stcne	0, cr0, [r0], {5}
    cc98:	00002783 	andeq	r2, r0, r3, lsl #15
    cc9c:	ec010b01 	stc	11, cr0, [r1], {1}
    cca0:	01000000 	mrseq	r0, (UNDEF: 0)
    cca4:	cc1b0050 	ldcgt	0, cr0, [fp], {80}	; 0x50
    cca8:	01000044 	tsteq	r0, r4, asr #32
    ccac:	546c0124 	strbtpl	r0, [ip], #-292	; 0x124
    ccb0:	00720800 	rsbseq	r0, r2, r0, lsl #16
    ccb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    ccb8:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    ccbc:	00465f1c 	subeq	r5, r6, ip, lsl pc
    ccc0:	01240100 	teqeq	r4, r0, lsl #2
    ccc4:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    ccc8:	fa1d5001 	blx	760cd4 <_Min_Stack_Size+0x7608d4>
    cccc:	01000044 	tsteq	r0, r4, asr #32
    ccd0:	008c0127 	addeq	r0, ip, r7, lsr #2
    ccd4:	7f290000 	svcvc	0x00290000
    ccd8:	751d0000 	ldrvc	r0, [sp, #-0]
    ccdc:	01000045 	tsteq	r0, r5, asr #32
    cce0:	008c0128 	addeq	r0, ip, r8, lsr #2
    cce4:	7f4d0000 	svcvc	0x004d0000
    cce8:	c21d0000 	andsgt	r0, sp, #0
    ccec:	01000045 	tsteq	r0, r5, asr #32
    ccf0:	008c0129 	addeq	r0, ip, r9, lsr #2
    ccf4:	7f710000 	svcvc	0x00710000
    ccf8:	681d0000 	ldmdavs	sp, {}	; <UNPREDICTABLE>
    ccfc:	01000043 	tsteq	r0, r3, asr #32
    cd00:	008c012a 	addeq	r0, ip, sl, lsr #2
    cd04:	7f950000 	svcvc	0x00950000
    cd08:	261d0000 	ldrcs	r0, [sp], -r0
    cd0c:	01000047 	tsteq	r0, r7, asr #32
    cd10:	008c012b 	addeq	r0, ip, fp, lsr #2
    cd14:	7fb90000 	svcvc	0x00b90000
    cd18:	f91d0000 			; <UNDEFINED> instruction: 0xf91d0000
    cd1c:	01000047 	tsteq	r0, r7, asr #32
    cd20:	008c012c 	addeq	r0, ip, ip, lsr #2
    cd24:	7fdd0000 	svcvc	0x00dd0000
    cd28:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    cd2c:	00037e04 	andeq	r7, r3, r4, lsl #28
    cd30:	45271b00 	strmi	r1, [r7, #-2816]!	; 0xb00
    cd34:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    cd38:	0054e001 	subseq	lr, r4, r1
    cd3c:	00001a08 	andeq	r1, r0, r8, lsl #20
    cd40:	e89c0100 	ldm	ip, {r8}
    cd44:	1c000005 	stcne	0, cr0, [r0], {5}
    cd48:	0000465f 	andeq	r4, r0, pc, asr r6
    cd4c:	bd015801 	stclt	8, cr5, [r1, #-4]
    cd50:	01000005 	tsteq	r0, r5
    cd54:	6d1b0050 	ldcvs	0, cr0, [fp, #-320]	; 0xfffffec0
    cd58:	01000044 	tsteq	r0, r4, asr #32
    cd5c:	54fc0185 	ldrbtpl	r0, [ip], #389	; 0x185
    cd60:	00720800 	rsbseq	r0, r2, r0, lsl #16
    cd64:	9c010000 	stcls	0, cr0, [r1], {-0}
    cd68:	0000066d 	andeq	r0, r0, sp, ror #12
    cd6c:	00438d1c 	subeq	r8, r3, ip, lsl sp
    cd70:	01850100 	orreq	r0, r5, r0, lsl #2
    cd74:	0000066d 	andeq	r0, r0, sp, ror #12
    cd78:	121d5001 	andsne	r5, sp, #1
    cd7c:	01000048 	tsteq	r0, r8, asr #32
    cd80:	008c0188 	addeq	r0, ip, r8, lsl #3
    cd84:	80010000 	andhi	r0, r1, r0
    cd88:	db1d0000 	blle	74cd90 <_Min_Stack_Size+0x74c990>
    cd8c:	01000044 	tsteq	r0, r4, asr #32
    cd90:	008c0189 	addeq	r0, ip, r9, lsl #3
    cd94:	80250000 	eorhi	r0, r5, r0
    cd98:	231d0000 	tstcs	sp, #0
    cd9c:	01000048 	tsteq	r0, r8, asr #32
    cda0:	008c018a 	addeq	r0, ip, sl, lsl #3
    cda4:	80490000 	subhi	r0, r9, r0
    cda8:	671d0000 	ldrvs	r0, [sp, -r0]
    cdac:	01000045 	tsteq	r0, r5, asr #32
    cdb0:	008c018b 	addeq	r0, ip, fp, lsl #3
    cdb4:	806d0000 	rsbhi	r0, sp, r0
    cdb8:	3a1d0000 	bcc	74cdc0 <_Min_Stack_Size+0x74c9c0>
    cdbc:	01000044 	tsteq	r0, r4, asr #32
    cdc0:	008c018c 	addeq	r0, ip, ip, lsl #3
    cdc4:	80910000 	addshi	r0, r1, r0
    cdc8:	a01d0000 	andsge	r0, sp, r0
    cdcc:	01000045 	tsteq	r0, r5, asr #32
    cdd0:	008c018d 	addeq	r0, ip, sp, lsl #3
    cdd4:	80b50000 	adcshi	r0, r5, r0
    cdd8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    cddc:	00041604 	andeq	r1, r4, r4, lsl #12
    cde0:	43541b00 	cmpmi	r4, #0, 22
    cde4:	ba010000 	blt	4cdec <_Min_Stack_Size+0x4c9ec>
    cde8:	00557001 	subseq	r7, r5, r1
    cdec:	00001a08 	andeq	r1, r0, r8, lsl #20
    cdf0:	989c0100 	ldmls	ip, {r8}
    cdf4:	1c000006 	stcne	0, cr0, [r0], {6}
    cdf8:	0000438d 	andeq	r4, r0, sp, lsl #7
    cdfc:	6d01ba01 	vstrvs	s22, [r1, #-4]
    ce00:	01000006 	tsteq	r0, r6
    ce04:	ff1b0050 			; <UNDEFINED> instruction: 0xff1b0050
    ce08:	01000042 	tsteq	r0, r2, asr #32
    ce0c:	558c01e5 	strpl	r0, [ip, #485]	; 0x1e5
    ce10:	001c0800 	andseq	r0, ip, r0, lsl #16
    ce14:	9c010000 	stcls	0, cr0, [r1], {-0}
    ce18:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
    ce1c:	0027831c 	eoreq	r8, r7, ip, lsl r3
    ce20:	01e50100 	mvneq	r0, r0, lsl #2
    ce24:	000000ec 	andeq	r0, r0, ip, ror #1
    ce28:	1b005001 	blne	20e34 <_Min_Stack_Size+0x20a34>
    ce2c:	000042a5 	andeq	r4, r0, r5, lsr #5
    ce30:	a801fd01 	stmdage	r1, {r0, r8, sl, fp, ip, sp, lr, pc}
    ce34:	1c080055 	stcne	0, cr0, [r8], {85}	; 0x55
    ce38:	01000000 	mrseq	r0, (UNDEF: 0)
    ce3c:	0006e29c 	muleq	r6, ip, r2
    ce40:	27831c00 	strcs	r1, [r3, r0, lsl #24]
    ce44:	fd010000 	stc2	0, cr0, [r1, #-0]
    ce48:	0000ec01 	andeq	lr, r0, r1, lsl #24
    ce4c:	00500100 	subseq	r0, r0, r0, lsl #2
    ce50:	00464a1b 	subeq	r4, r6, fp, lsl sl
    ce54:	02140100 	andseq	r0, r4, #0, 2
    ce58:	080055c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, lr}
    ce5c:	0000002c 	andeq	r0, r0, ip, lsr #32
    ce60:	07279c01 	streq	r9, [r7, -r1, lsl #24]!
    ce64:	941e0000 	ldrls	r0, [lr], #-0
    ce68:	01000044 	tsteq	r0, r4, asr #32
    ce6c:	008c0214 	addeq	r0, ip, r4, lsl r2
    ce70:	80d90000 	sbcshi	r0, r9, r0
    ce74:	831c0000 	tsthi	ip, #0
    ce78:	01000027 	tsteq	r0, r7, lsr #32
    ce7c:	00ec0214 	rsceq	r0, ip, r4, lsl r2
    ce80:	51010000 	mrspl	r0, (UNDEF: 1)
    ce84:	00449a1d 	subeq	r9, r4, sp, lsl sl
    ce88:	02160100 	andseq	r0, r6, #0, 2
    ce8c:	0000008c 	andeq	r0, r0, ip, lsl #1
    ce90:	000080fa 	strdeq	r8, [r0], -sl
    ce94:	45861b00 	strmi	r1, [r6, #2816]	; 0xb00
    ce98:	2f010000 	svccs	0x00010000
    ce9c:	0055f002 	subseq	pc, r5, r2
    cea0:	00000c08 	andeq	r0, r0, r8, lsl #24
    cea4:	4c9c0100 	ldfmis	f0, [ip], {0}
    cea8:	1c000007 	stcne	0, cr0, [r0], {7}
    ceac:	00004376 	andeq	r4, r0, r6, ror r3
    ceb0:	8c022f01 	stchi	15, cr2, [r2], {1}
    ceb4:	01000000 	mrseq	r0, (UNDEF: 0)
    ceb8:	4f1b0050 	svcmi	0x001b0050
    cebc:	01000045 	tsteq	r0, r5, asr #32
    cec0:	55fc0272 	ldrbpl	r0, [ip, #626]!	; 0x272
    cec4:	001a0800 	andseq	r0, sl, r0, lsl #16
    cec8:	9c010000 	stcls	0, cr0, [r1], {-0}
    cecc:	00000781 	andeq	r0, r0, r1, lsl #15
    ced0:	00455e1e 	subeq	r5, r5, lr, lsl lr
    ced4:	02720100 	rsbseq	r0, r2, #0, 2
    ced8:	0000008c 	andeq	r0, r0, ip, lsl #1
    cedc:	00008121 	andeq	r8, r0, r1, lsr #2
    cee0:	0027831c 	eoreq	r8, r7, ip, lsl r3
    cee4:	02720100 	rsbseq	r0, r2, #0, 2
    cee8:	000000ec 	andeq	r0, r0, ip, ror #1
    ceec:	1f005101 	svcne	0x00005101
    cef0:	0000479b 	muleq	r0, fp, r7
    cef4:	be029101 	mvflts	f1, f1
    cef8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    cefc:	14080056 	strne	r0, [r8], #-86	; 0x56
    cf00:	01000000 	mrseq	r0, (UNDEF: 0)
    cf04:	0007bc9c 	muleq	r7, ip, ip
    cf08:	461d1e00 	ldrmi	r1, [sp], -r0, lsl #28
    cf0c:	91010000 	mrsls	r0, (UNDEF: 1)
    cf10:	00008c02 	andeq	r8, r0, r2, lsl #24
    cf14:	00815b00 	addeq	r5, r1, r0, lsl #22
    cf18:	29831d00 	stmibcs	r3, {r8, sl, fp, ip}
    cf1c:	93010000 	movwls	r0, #4096	; 0x1000
    cf20:	0000be02 	andeq	fp, r0, r2, lsl #28
    cf24:	00817c00 	addeq	r7, r1, r0, lsl #24
    cf28:	0d1b0000 	ldceq	0, cr0, [fp, #-0]
    cf2c:	01000043 	tsteq	r0, r3, asr #32
    cf30:	562c02b3 			; <UNDEFINED> instruction: 0x562c02b3
    cf34:	000c0800 	andeq	r0, ip, r0, lsl #16
    cf38:	9c010000 	stcls	0, cr0, [r1], {-0}
    cf3c:	000007e1 	andeq	r0, r0, r1, ror #15
    cf40:	00461d1c 	subeq	r1, r6, ip, lsl sp
    cf44:	02b30100 	adcseq	r0, r3, #0, 2
    cf48:	0000008c 	andeq	r0, r0, ip, lsl #1
    cf4c:	1f005001 	svcne	0x00005001
    cf50:	000047c7 	andeq	r4, r0, r7, asr #15
    cf54:	ca02c801 	bgt	bef60 <_Min_Stack_Size+0xbeb60>
    cf58:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    cf5c:	20080056 	andcs	r0, r8, r6, asr r0
    cf60:	01000000 	mrseq	r0, (UNDEF: 0)
    cf64:	00082c9c 	muleq	r8, ip, ip
    cf68:	455e1e00 	ldrbmi	r1, [lr, #-3584]	; 0xe00
    cf6c:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    cf70:	00008c02 	andeq	r8, r0, r2, lsl #24
    cf74:	0081b500 	addeq	fp, r1, r0, lsl #10
    cf78:	29831d00 	stmibcs	r3, {r8, sl, fp, ip}
    cf7c:	ca010000 	bgt	4cf84 <_Min_Stack_Size+0x4cb84>
    cf80:	0000ca02 	andeq	ip, r0, r2, lsl #20
    cf84:	0081ef00 	addeq	lr, r1, r0, lsl #30
    cf88:	431d1d00 	tstmi	sp, #0, 26
    cf8c:	cb010000 	blgt	4cf94 <_Min_Stack_Size+0x4cb94>
    cf90:	00008c02 	andeq	r8, r0, r2, lsl #24
    cf94:	00824b00 	addeq	r4, r2, r0, lsl #22
    cf98:	c11b0000 	tstgt	fp, r0
    cf9c:	01000046 	tsteq	r0, r6, asr #32
    cfa0:	565802f0 			; <UNDEFINED> instruction: 0x565802f0
    cfa4:	000e0800 	andeq	r0, lr, r0, lsl #16
    cfa8:	9c010000 	stcls	0, cr0, [r1], {-0}
    cfac:	00000853 	andeq	r0, r0, r3, asr r8
    cfb0:	00455e1e 	subeq	r5, r5, lr, lsl lr
    cfb4:	02f00100 	rscseq	r0, r0, #0, 2
    cfb8:	0000008c 	andeq	r0, r0, ip, lsl #1
    cfbc:	00008291 	muleq	r0, r1, r2
    cfc0:	039d2000 	orrseq	r2, sp, #0
    cfc4:	a7060000 	strge	r0, [r6, -r0]
    cfc8:	0000a306 	andeq	sl, r0, r6, lsl #6
    cfcc:	298d2100 	stmibcs	sp, {r8, sp}
    cfd0:	46070000 	strmi	r0, [r7], -r0
    cfd4:	008c2202 	addeq	r2, ip, r2, lsl #4
    cfd8:	ec220000 	stc	0, cr0, [r2], #-0
    cfdc:	00000000 	andeq	r0, r0, r0
    cfe0:	000d4900 	andeq	r4, sp, r0, lsl #18
    cfe4:	b9000400 	stmdblt	r0, {sl}
    cfe8:	04000028 	streq	r0, [r0], #-40	; 0x28
    cfec:	00028401 	andeq	r8, r2, r1, lsl #8
    cff0:	4bfb0100 	blmi	ffecd3f8 <_estack+0xdfe9d3f8>
    cff4:	01010000 	mrseq	r0, (UNDEF: 1)
    cff8:	14f00000 	ldrbtne	r0, [r0], #0
    cffc:	00000000 	andeq	r0, r0, r0
    d000:	4b7c0000 	blmi	1f0d008 <_Min_Stack_Size+0x1f0cc08>
    d004:	04020000 	streq	r0, [r2], #-0
    d008:	00017d07 	andeq	r7, r1, r7, lsl #26
    d00c:	06010200 	streq	r0, [r1], -r0, lsl #4
    d010:	00000150 	andeq	r0, r0, r0, asr r1
    d014:	0000f203 	andeq	pc, r0, r3, lsl #4
    d018:	3e1c0200 	cdpcc	2, 1, cr0, cr12, cr0, {0}
    d01c:	02000000 	andeq	r0, r0, #0
    d020:	014e0801 	cmpeq	lr, r1, lsl #16
    d024:	02020000 	andeq	r0, r2, #0
    d028:	0000df05 	andeq	sp, r0, r5, lsl #30
    d02c:	005c0300 	subseq	r0, ip, r0, lsl #6
    d030:	26020000 	strcs	r0, [r2], -r0
    d034:	00000057 	andeq	r0, r0, r7, asr r0
    d038:	e5070202 	str	r0, [r7, #-514]	; 0x202
    d03c:	03000001 	movweq	r0, #1
    d040:	00000377 	andeq	r0, r0, r7, ror r3
    d044:	00693702 	rsbeq	r3, r9, r2, lsl #14
    d048:	04020000 	streq	r0, [r2], #-0
    d04c:	0000c505 	andeq	ip, r0, r5, lsl #10
    d050:	00510300 	subseq	r0, r1, r0, lsl #6
    d054:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    d058:	0000007b 	andeq	r0, r0, fp, ror r0
    d05c:	78070402 	stmdavc	r7, {r1, sl}
    d060:	02000001 	andeq	r0, r0, #1
    d064:	00c00508 	sbceq	r0, r0, r8, lsl #10
    d068:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    d06c:	00017307 	andeq	r7, r1, r7, lsl #6
    d070:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    d074:	00746e69 	rsbseq	r6, r4, r9, ror #28
    d078:	0000f403 	andeq	pc, r0, r3, lsl #8
    d07c:	332a0300 	teqcc	sl, #0, 6
    d080:	03000000 	movweq	r0, #0
    d084:	0000005e 	andeq	r0, r0, lr, asr r0
    d088:	004c3603 	subeq	r3, ip, r3, lsl #12
    d08c:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    d090:	03000003 	movweq	r0, #3
    d094:	00005e41 	andeq	r5, r0, r1, asr #28
    d098:	00530300 	subseq	r0, r3, r0, lsl #6
    d09c:	42030000 	andmi	r0, r3, #0
    d0a0:	00000070 	andeq	r0, r0, r0, ror r0
    d0a4:	2c070402 	cfstrscs	mvf0, [r7], {2}
    d0a8:	05000000 	streq	r0, [r0, #-0]
    d0ac:	000000b8 	strheq	r0, [r0], -r8
    d0b0:	0000b806 	andeq	fp, r0, r6, lsl #16
    d0b4:	0000df00 	andeq	sp, r0, r0, lsl #30
    d0b8:	00c30700 	sbceq	r0, r3, r0, lsl #14
    d0bc:	00010000 	andeq	r0, r1, r0
    d0c0:	0000b806 	andeq	fp, r0, r6, lsl #16
    d0c4:	0000ef00 	andeq	lr, r0, r0, lsl #30
    d0c8:	00c30700 	sbceq	r0, r3, r0, lsl #14
    d0cc:	00000000 	andeq	r0, r0, r0
    d0d0:	0000ad05 	andeq	sl, r0, r5, lsl #26
    d0d4:	04010800 	streq	r0, [r1], #-2048	; 0x800
    d0d8:	010a01f7 	strdeq	r0, [sl, -r7]
    d0dc:	e4090000 	str	r0, [r9], #-0
    d0e0:	00000028 	andeq	r0, r0, r8, lsr #32
    d0e4:	5445530a 	strbpl	r5, [r5], #-778	; 0x30a
    d0e8:	0b000100 	bleq	d4f0 <_Min_Stack_Size+0xd0f0>
    d0ec:	00003d29 	andeq	r3, r0, r9, lsr #26
    d0f0:	f401f704 	vst1.8	{d15}, [r1], r4
    d0f4:	0b000000 	bleq	d0fc <_Min_Stack_Size+0xccfc>
    d0f8:	00003ca0 	andeq	r3, r0, r0, lsr #25
    d0fc:	f401f704 	vst1.8	{d15}, [r1], r4
    d100:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    d104:	01f90401 	mvnseq	r0, r1, lsl #8
    d108:	00000138 	andeq	r0, r0, r8, lsr r1
    d10c:	00048809 	andeq	r8, r4, r9, lsl #16
    d110:	c0090000 	andgt	r0, r9, r0
    d114:	01000005 	tsteq	r0, r5
    d118:	092a0b00 	stmdbeq	sl!, {r8, r9, fp}
    d11c:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    d120:	00012201 	andeq	r2, r1, r1, lsl #4
    d124:	044c0c00 	strbeq	r0, [ip], #-3072	; 0xc00
    d128:	022b041b 	eoreq	r0, fp, #452984832	; 0x1b000000
    d12c:	3c0d0000 	stccc	0, cr0, [sp], {-0}
    d130:	04000002 	streq	r0, [r0], #-2
    d134:	00cf041d 	sbceq	r0, pc, sp, lsl r4	; <UNPREDICTABLE>
    d138:	0d000000 	stceq	0, cr0, [r0, #-0]
    d13c:	00004edd 	ldrdeq	r4, [r0], -sp
    d140:	ca041e04 	bgt	114958 <_Min_Stack_Size+0x114558>
    d144:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    d148:	004e580d 	subeq	r5, lr, sp, lsl #16
    d14c:	041f0400 	ldreq	r0, [pc], #-1024	; d154 <_Min_Stack_Size+0xcd54>
    d150:	000000ca 	andeq	r0, r0, sl, asr #1
    d154:	4cc70d0c 	stclmi	13, cr0, [r7], {12}
    d158:	20040000 	andcs	r0, r4, r0
    d15c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    d160:	480d1000 	stmdami	sp, {ip}
    d164:	0400004c 	streq	r0, [r0], #-76	; 0x4c
    d168:	00ca0421 	sbceq	r0, sl, r1, lsr #8
    d16c:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    d170:	00524347 	subseq	r4, r2, r7, asr #6
    d174:	ca042204 	bgt	11598c <_Min_Stack_Size+0x11558c>
    d178:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    d17c:	0002460d 	andeq	r4, r2, sp, lsl #12
    d180:	04230400 	strteq	r0, [r3], #-1024	; 0x400
    d184:	000000cf 	andeq	r0, r0, pc, asr #1
    d188:	4c5d0d1c 	mrrcmi	13, 1, r0, sp, cr12
    d18c:	24040000 	strcs	r0, [r4], #-0
    d190:	0000ca04 	andeq	ip, r0, r4, lsl #20
    d194:	500d2400 	andpl	r2, sp, r0, lsl #8
    d198:	04000002 	streq	r0, [r0], #-2
    d19c:	00df0425 	sbcseq	r0, pc, r5, lsr #8
    d1a0:	0d280000 	stceq	0, cr0, [r8, #-0]
    d1a4:	00004887 	andeq	r4, r0, r7, lsl #17
    d1a8:	ca042604 	bgt	1169c0 <_Min_Stack_Size+0x1165c0>
    d1ac:	2c000000 	stccs	0, cr0, [r0], {-0}
    d1b0:	0000900d 	andeq	r9, r0, sp
    d1b4:	04270400 	strteq	r0, [r7], #-1024	; 0x400
    d1b8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    d1bc:	45490e30 	strbmi	r0, [r9, #-3632]	; 0xe30
    d1c0:	28040052 	stmdacs	r4, {r1, r4, r6}
    d1c4:	0000ca04 	andeq	ip, r0, r4, lsl #20
    d1c8:	490e3400 	stmdbmi	lr, {sl, ip, sp}
    d1cc:	04005253 	streq	r5, [r0], #-595	; 0x253
    d1d0:	00ca0429 	sbceq	r0, sl, r9, lsr #8
    d1d4:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
    d1d8:	00524349 	subseq	r4, r2, r9, asr #6
    d1dc:	ca042a04 	bgt	1179f4 <_Min_Stack_Size+0x1175f4>
    d1e0:	3c000000 	stccc	0, cr0, [r0], {-0}
    d1e4:	004e060d 	subeq	r0, lr, sp, lsl #12
    d1e8:	042b0400 	strteq	r0, [fp], #-1024	; 0x400
    d1ec:	000000ca 	andeq	r0, r0, sl, asr #1
    d1f0:	4e530d40 	cdpmi	13, 5, cr0, cr3, cr0, {2}
    d1f4:	2c040000 	stccs	0, cr0, [r4], {-0}
    d1f8:	0000ca04 	andeq	ip, r0, r4, lsl #20
    d1fc:	a20d4400 	andge	r4, sp, #0, 8
    d200:	0400004f 	streq	r0, [r0], #-79	; 0x4f
    d204:	00ca042d 	sbceq	r0, sl, sp, lsr #8
    d208:	00480000 	subeq	r0, r8, r0
    d20c:	00493a0b 	subeq	r3, r9, fp, lsl #20
    d210:	042e0400 	strteq	r0, [lr], #-1024	; 0x400
    d214:	00000144 	andeq	r0, r0, r4, asr #2
    d218:	3404440c 	strcc	r4, [r4], #-1036	; 0x40c
    d21c:	0002f604 	andeq	pc, r2, r4, lsl #12
    d220:	52430e00 	subpl	r0, r3, #0, 28
    d224:	04360400 	ldrteq	r0, [r6], #-1024	; 0x400
    d228:	000000ca 	andeq	r0, r0, sl, asr #1
    d22c:	4b5b0d00 	blmi	16d0634 <_Min_Stack_Size+0x16d0234>
    d230:	37040000 	strcc	r0, [r4, -r0]
    d234:	0000ca04 	andeq	ip, r0, r4, lsl #20
    d238:	5d0d0400 	cfstrspl	mvf0, [sp, #-0]
    d23c:	04000049 	streq	r0, [r0], #-73	; 0x49
    d240:	00ca0438 	sbceq	r0, sl, r8, lsr r4
    d244:	0d080000 	stceq	0, cr0, [r8, #-0]
    d248:	00004c6a 	andeq	r4, r0, sl, ror #24
    d24c:	ca043904 	bgt	11b664 <_Min_Stack_Size+0x11b264>
    d250:	0c000000 	stceq	0, cr0, [r0], {-0}
    d254:	00501e0d 	subseq	r1, r0, sp, lsl #28
    d258:	043a0400 	ldrteq	r0, [sl], #-1024	; 0x400
    d25c:	000000ca 	andeq	r0, r0, sl, asr #1
    d260:	4a5f0d10 	bmi	17d06a8 <_Min_Stack_Size+0x17d02a8>
    d264:	3b040000 	blcc	10d26c <_Min_Stack_Size+0x10ce6c>
    d268:	0000ca04 	andeq	ip, r0, r4, lsl #20
    d26c:	700d1400 	andvc	r1, sp, r0, lsl #8
    d270:	0400004f 	streq	r0, [r0], #-79	; 0x4f
    d274:	00ca043c 	sbceq	r0, sl, ip, lsr r4
    d278:	0d180000 	ldceq	0, cr0, [r8, #-0]
    d27c:	00004c8c 	andeq	r4, r0, ip, lsl #25
    d280:	ca043d04 	bgt	11c698 <_Min_Stack_Size+0x11c298>
    d284:	1c000000 	stcne	0, cr0, [r0], {-0}
    d288:	00023c0d 	andeq	r3, r2, sp, lsl #24
    d28c:	043e0400 	ldrteq	r0, [lr], #-1024	; 0x400
    d290:	000000cf 	andeq	r0, r0, pc, asr #1
    d294:	4d840d20 	stcmi	13, cr0, [r4, #128]	; 0x80
    d298:	3f040000 	svccc	0x00040000
    d29c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    d2a0:	8c0d2800 	stchi	8, cr2, [sp], {-0}
    d2a4:	04000048 	streq	r0, [r0], #-72	; 0x48
    d2a8:	00ca0440 	sbceq	r0, sl, r0, asr #8
    d2ac:	0d2c0000 	stceq	0, cr0, [ip, #-0]
    d2b0:	00004848 	andeq	r4, r0, r8, asr #16
    d2b4:	ca044104 	bgt	11d6cc <_Min_Stack_Size+0x11d2cc>
    d2b8:	30000000 	andcc	r0, r0, r0
    d2bc:	0002460d 	andeq	r4, r2, sp, lsl #12
    d2c0:	04420400 	strbeq	r0, [r2], #-1024	; 0x400
    d2c4:	000002f6 	strdeq	r0, [r0], -r6
    d2c8:	4bf40d34 	blmi	ffd107a0 <_estack+0xdfce07a0>
    d2cc:	43040000 	movwmi	r0, #16384	; 0x4000
    d2d0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    d2d4:	06004000 	streq	r4, [r0], -r0
    d2d8:	000000b8 	strheq	r0, [r0], -r8
    d2dc:	00000306 	andeq	r0, r0, r6, lsl #6
    d2e0:	0000c307 	andeq	ip, r0, r7, lsl #6
    d2e4:	0b000200 	bleq	daec <_Min_Stack_Size+0xd6ec>
    d2e8:	00004a40 	andeq	r4, r0, r0, asr #20
    d2ec:	37044504 	strcc	r4, [r4, -r4, lsl #10]
    d2f0:	0f000002 	svceq	0x00000002
    d2f4:	cf30053c 	svcgt	0x0030053c
    d2f8:	10000003 	andne	r0, r0, r3
    d2fc:	00004963 	andeq	r4, r0, r3, ror #18
    d300:	00b83205 	adcseq	r3, r8, r5, lsl #4
    d304:	10000000 	andne	r0, r0, r0
    d308:	00004fd7 	ldrdeq	r4, [r0], -r7
    d30c:	00b83505 	adcseq	r3, r8, r5, lsl #10
    d310:	10040000 	andne	r0, r4, r0
    d314:	00004efd 	strdeq	r4, [r0], -sp
    d318:	00b83805 	adcseq	r3, r8, r5, lsl #16
    d31c:	10080000 	andne	r0, r8, r0
    d320:	00004c6f 	andeq	r4, r0, pc, ror #24
    d324:	00b83b05 	adcseq	r3, r8, r5, lsl #22
    d328:	100c0000 	andne	r0, ip, r0
    d32c:	00004a2c 	andeq	r4, r0, ip, lsr #20
    d330:	00b83e05 	adcseq	r3, r8, r5, lsl #28
    d334:	10100000 	andsne	r0, r0, r0
    d338:	00004ada 	ldrdeq	r4, [r0], -sl
    d33c:	00b84105 	adcseq	r4, r8, r5, lsl #2
    d340:	10140000 	andsne	r0, r4, r0
    d344:	00004e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    d348:	00b84405 	adcseq	r4, r8, r5, lsl #8
    d34c:	10180000 	andsne	r0, r8, r0
    d350:	0000499d 	muleq	r0, sp, r9
    d354:	00b84705 	adcseq	r4, r8, r5, lsl #14
    d358:	101c0000 	andsne	r0, ip, r0
    d35c:	000049c8 	andeq	r4, r0, r8, asr #19
    d360:	00b84a05 	adcseq	r4, r8, r5, lsl #20
    d364:	10200000 	eorne	r0, r0, r0
    d368:	0000490c 	andeq	r4, r0, ip, lsl #18
    d36c:	00b84d05 	adcseq	r4, r8, r5, lsl #26
    d370:	10240000 	eorne	r0, r4, r0
    d374:	00004c4d 	andeq	r4, r0, sp, asr #24
    d378:	00b85005 	adcseq	r5, r8, r5
    d37c:	10280000 	eorne	r0, r8, r0
    d380:	00004eb3 			; <UNDEFINED> instruction: 0x00004eb3
    d384:	00b85305 	adcseq	r5, r8, r5, lsl #6
    d388:	102c0000 	eorne	r0, ip, r0
    d38c:	00004bd1 	ldrdeq	r4, [r0], -r1
    d390:	00b85605 	adcseq	r5, r8, r5, lsl #12
    d394:	10300000 	eorsne	r0, r0, r0
    d398:	00004983 	andeq	r4, r0, r3, lsl #19
    d39c:	00b85905 	adcseq	r5, r8, r5, lsl #18
    d3a0:	10340000 	eorsne	r0, r4, r0
    d3a4:	00004b33 	andeq	r4, r0, r3, lsr fp
    d3a8:	00b85c05 	adcseq	r5, r8, r5, lsl #24
    d3ac:	00380000 	eorseq	r0, r8, r0
    d3b0:	00503403 	subseq	r3, r0, r3, lsl #8
    d3b4:	125e0500 	subsne	r0, lr, #0, 10
    d3b8:	0f000003 	svceq	0x00000003
    d3bc:	a3640540 	cmnge	r4, #64, 10	; 0x10000000
    d3c0:	10000004 	andne	r0, r0, r4
    d3c4:	00004bbc 			; <UNDEFINED> instruction: 0x00004bbc
    d3c8:	00b86605 	adcseq	r6, r8, r5, lsl #12
    d3cc:	10000000 	andne	r0, r0, r0
    d3d0:	00004afd 	strdeq	r4, [r0], -sp
    d3d4:	00b86905 	adcseq	r6, r8, r5, lsl #18
    d3d8:	10040000 	andne	r0, r4, r0
    d3dc:	000048f9 	strdeq	r4, [r0], -r9
    d3e0:	00b86c05 	adcseq	r6, r8, r5, lsl #24
    d3e4:	10080000 	andne	r0, r8, r0
    d3e8:	00004b8d 	andeq	r4, r0, sp, lsl #23
    d3ec:	00b86f05 	adcseq	r6, r8, r5, lsl #30
    d3f0:	100c0000 	andne	r0, ip, r0
    d3f4:	00004f0d 	andeq	r4, r0, sp, lsl #30
    d3f8:	00b87205 	adcseq	r7, r8, r5, lsl #4
    d3fc:	10100000 	andsne	r0, r0, r0
    d400:	00004cec 	andeq	r4, r0, ip, ror #25
    d404:	00b87505 	adcseq	r7, r8, r5, lsl #10
    d408:	10140000 	andsne	r0, r4, r0
    d40c:	00004ab1 			; <UNDEFINED> instruction: 0x00004ab1
    d410:	00b87805 	adcseq	r7, r8, r5, lsl #16
    d414:	10180000 	andsne	r0, r8, r0
    d418:	00004b61 	andeq	r4, r0, r1, ror #22
    d41c:	00b87b05 	adcseq	r7, r8, r5, lsl #22
    d420:	101c0000 	andsne	r0, ip, r0
    d424:	000048e4 	andeq	r4, r0, r4, ror #17
    d428:	00b87e05 	adcseq	r7, r8, r5, lsl #28
    d42c:	10200000 	eorne	r0, r0, r0
    d430:	00004def 	andeq	r4, r0, pc, ror #27
    d434:	00b88105 	adcseq	r8, r8, r5, lsl #2
    d438:	10240000 	eorne	r0, r4, r0
    d43c:	00004f44 	andeq	r4, r0, r4, asr #30
    d440:	00b88405 	adcseq	r8, r8, r5, lsl #8
    d444:	10280000 	eorne	r0, r8, r0
    d448:	00004f5a 	andeq	r4, r0, sl, asr pc
    d44c:	00b88705 	adcseq	r8, r8, r5, lsl #14
    d450:	102c0000 	eorne	r0, ip, r0
    d454:	000048d0 	ldrdeq	r4, [r0], -r0
    d458:	00b88a05 	adcseq	r8, r8, r5, lsl #20
    d45c:	10300000 	eorsne	r0, r0, r0
    d460:	00004ac7 	andeq	r4, r0, r7, asr #21
    d464:	00b88c05 	adcseq	r8, r8, r5, lsl #24
    d468:	10340000 	eorsne	r0, r4, r0
    d46c:	00004fe7 	andeq	r4, r0, r7, ror #31
    d470:	00b88f05 	adcseq	r8, r8, r5, lsl #30
    d474:	10380000 	eorsne	r0, r8, r0
    d478:	00004e40 	andeq	r4, r0, r0, asr #28
    d47c:	00b89205 	adcseq	r9, r8, r5, lsl #4
    d480:	003c0000 	eorseq	r0, ip, r0
    d484:	00483103 	subeq	r3, r8, r3, lsl #2
    d488:	da940500 	ble	fe50e890 <_estack+0xde4de890>
    d48c:	0f000003 	svceq	0x00000003
    d490:	cf9a0508 	svcgt	0x009a0508
    d494:	10000004 	andne	r0, r0, r4
    d498:	00004d15 	andeq	r4, r0, r5, lsl sp
    d49c:	00b89c05 	adcseq	r9, r8, r5, lsl #24
    d4a0:	10000000 	andne	r0, r0, r0
    d4a4:	00004d1f 	andeq	r4, r0, pc, lsl sp
    d4a8:	00b89d05 	adcseq	r9, r8, r5, lsl #26
    d4ac:	00040000 	andeq	r0, r4, r0
    d4b0:	004f2803 	subeq	r2, pc, r3, lsl #16
    d4b4:	ae9e0500 	cdpge	5, 9, cr0, cr14, cr0, {0}
    d4b8:	0f000004 	svceq	0x00000004
    d4bc:	07a0050c 	streq	r0, [r0, ip, lsl #10]!
    d4c0:	10000005 	andne	r0, r0, r5
    d4c4:	00004b4c 	andeq	r4, r0, ip, asr #22
    d4c8:	00b8a205 	adcseq	sl, r8, r5, lsl #4
    d4cc:	10000000 	andne	r0, r0, r0
    d4d0:	00004e5d 	andeq	r4, r0, sp, asr lr
    d4d4:	00b8a305 	adcseq	sl, r8, r5, lsl #6
    d4d8:	10040000 	andne	r0, r4, r0
    d4dc:	00004cde 	ldrdeq	r4, [r0], -lr
    d4e0:	00b8a405 	adcseq	sl, r8, r5, lsl #8
    d4e4:	00080000 	andeq	r0, r8, r0
    d4e8:	004f9203 	subeq	r9, pc, r3, lsl #4
    d4ec:	daa50500 	ble	fe94e8f4 <_estack+0xde91e8f4>
    d4f0:	0f000004 	svceq	0x00000004
    d4f4:	3fa7050c 	svccc	0x00a7050c
    d4f8:	10000005 	andne	r0, r0, r5
    d4fc:	00004ecb 	andeq	r4, r0, fp, asr #29
    d500:	00b8a905 	adcseq	sl, r8, r5, lsl #18
    d504:	10000000 	andne	r0, r0, r0
    d508:	00004a73 	andeq	r4, r0, r3, ror sl
    d50c:	00b8ac05 	adcseq	sl, r8, r5, lsl #24
    d510:	10040000 	andne	r0, r4, r0
    d514:	00004e7d 	andeq	r4, r0, sp, ror lr
    d518:	00b8af05 	adcseq	sl, r8, r5, lsl #30
    d51c:	00080000 	andeq	r0, r8, r0
    d520:	004b9f03 	subeq	r9, fp, r3, lsl #30
    d524:	12b10500 	adcsne	r0, r1, #0, 10
    d528:	0f000005 	svceq	0x00000005
    d52c:	83b30510 			; <UNDEFINED> instruction: 0x83b30510
    d530:	10000005 	andne	r0, r0, r5
    d534:	00004e14 	andeq	r4, r0, r4, lsl lr
    d538:	00b8b505 	adcseq	fp, r8, r5, lsl #10
    d53c:	10000000 	andne	r0, r0, r0
    d540:	00004a64 	andeq	r4, r0, r4, ror #20
    d544:	00b8b805 	adcseq	fp, r8, r5, lsl #16
    d548:	10040000 	andne	r0, r4, r0
    d54c:	00004da8 	andeq	r4, r0, r8, lsr #27
    d550:	00b8bb05 	adcseq	fp, r8, r5, lsl #22
    d554:	10080000 	andne	r0, r8, r0
    d558:	00004fa7 	andeq	r4, r0, r7, lsr #31
    d55c:	00b8be05 	adcseq	fp, r8, r5, lsl #28
    d560:	000c0000 	andeq	r0, ip, r0
    d564:	004cff03 	subeq	pc, ip, r3, lsl #30
    d568:	4ac00500 	bmi	ff00e970 <_estack+0xdefde970>
    d56c:	11000005 	tstne	r0, r5
    d570:	0000486d 	andeq	r4, r0, sp, ror #16
    d574:	56687b01 	strbtpl	r7, [r8], -r1, lsl #22
    d578:	001a0800 	andseq	r0, sl, r0, lsl #16
    d57c:	9c010000 	stcls	0, cr0, [r1], {-0}
    d580:	000005d4 	ldrdeq	r0, [r0], -r4
    d584:	00567412 	subseq	r7, r6, r2, lsl r4
    d588:	000d3908 	andeq	r3, sp, r8, lsl #18
    d58c:	0005bd00 	andeq	fp, r5, r0, lsl #26
    d590:	51011300 	mrspl	r1, SP_irq
    d594:	01133101 	tsteq	r3, r1, lsl #2
    d598:	46400350 			; <UNDEFINED> instruction: 0x46400350
    d59c:	82140024 	andshi	r0, r4, #36	; 0x24
    d5a0:	39080056 	stmdbcc	r8, {r1, r2, r4, r6}
    d5a4:	1300000d 	movwne	r0, #13
    d5a8:	30015101 	andcc	r5, r1, r1, lsl #2
    d5ac:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
    d5b0:	00244640 	eoreq	r4, r4, r0, asr #12
    d5b4:	4e361100 	rsfmis	f1, f6, f0
    d5b8:	8c010000 	stchi	0, cr0, [r1], {-0}
    d5bc:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
    d5c0:	000000a4 	andeq	r0, r0, r4, lsr #1
    d5c4:	06539c01 	ldrbeq	r9, [r3], -r1, lsl #24
    d5c8:	73150000 	tstvc	r5, #0
    d5cc:	01000049 	tsteq	r0, r9, asr #32
    d5d0:	0006538c 	andeq	r5, r6, ip, lsl #7
    d5d4:	0082af00 	addeq	sl, r2, r0, lsl #30
    d5d8:	49fe1600 	ldmibmi	lr!, {r9, sl, ip}^
    d5dc:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    d5e0:	000000b8 	strheq	r0, [r0], -r8
    d5e4:	000082d0 	ldrdeq	r8, [r0], -r0
    d5e8:	004c9116 	subeq	r9, ip, r6, lsl r1
    d5ec:	b88f0100 	stmlt	pc, {r8}	; <UNPREDICTABLE>
    d5f0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    d5f4:	16000082 	strne	r0, [r0], -r2, lsl #1
    d5f8:	00004892 	muleq	r0, r2, r8
    d5fc:	00b89001 	adcseq	r9, r8, r1
    d600:	83180000 	tsthi	r8, #0
    d604:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    d608:	0100004b 	tsteq	r0, fp, asr #32
    d60c:	0000b891 	muleq	r0, r1, r8
    d610:	00833c00 	addeq	r3, r3, r0, lsl #24
    d614:	4aa71600 	bmi	fe9d2e1c <_estack+0xde9a2e1c>
    d618:	92010000 	andls	r0, r1, #0
    d61c:	000000b8 	strheq	r0, [r0], -r8
    d620:	00008360 	andeq	r8, r0, r0, ror #6
    d624:	004a1c16 	subeq	r1, sl, r6, lsl ip
    d628:	b8930100 	ldmlt	r3, {r8}
    d62c:	83000000 	movwhi	r0, #0
    d630:	00000083 	andeq	r0, r0, r3, lsl #1
    d634:	03cf0417 	biceq	r0, pc, #385875968	; 0x17000000
    d638:	11110000 	tstne	r1, r0
    d63c:	0100004b 	tsteq	r0, fp, asr #32
    d640:	005728cd 	subseq	r2, r7, sp, asr #17
    d644:	00002208 	andeq	r2, r0, r8, lsl #4
    d648:	7c9c0100 	ldfvcs	f0, [ip], {0}
    d64c:	18000006 	stmdane	r0, {r1, r2}
    d650:	00004973 	andeq	r4, r0, r3, ror r9
    d654:	0653cd01 	ldrbeq	ip, [r3], -r1, lsl #26
    d658:	50010000 	andpl	r0, r1, r0
    d65c:	4a0d1100 	bmi	351a64 <_Min_Stack_Size+0x351664>
    d660:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    d664:	0800574c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, lr}
    d668:	0000001c 	andeq	r0, r0, ip, lsl r0
    d66c:	069f9c01 	ldreq	r9, [pc], r1, lsl #24
    d670:	83180000 	tsthi	r8, #0
    d674:	01000027 	tsteq	r0, r7, lsr #32
    d678:	000138e8 	andeq	r3, r1, r8, ror #17
    d67c:	00500100 	subseq	r0, r0, r0, lsl #2
    d680:	004d5119 	subeq	r5, sp, r9, lsl r1
    d684:	01000100 	mrseq	r0, (UNDEF: 16)
    d688:	08005768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, lr}
    d68c:	0000001c 	andeq	r0, r0, ip, lsl r0
    d690:	06c49c01 	strbeq	r9, [r4], r1, lsl #24
    d694:	831a0000 	tsthi	sl, #0
    d698:	01000027 	tsteq	r0, r7, lsr #32
    d69c:	01380100 	teqeq	r8, r0, lsl #2
    d6a0:	50010000 	andpl	r0, r1, r0
    d6a4:	50231b00 	eorpl	r1, r3, r0, lsl #22
    d6a8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    d6ac:	00050701 	andeq	r0, r5, r1, lsl #14
    d6b0:	00578400 	subseq	r8, r7, r0, lsl #8
    d6b4:	00003608 	andeq	r3, r0, r8, lsl #12
    d6b8:	ef9c0100 	svc	0x009c0100
    d6bc:	1c000006 	stcne	0, cr0, [r0], {6}
    d6c0:	00004fc3 	andeq	r4, r0, r3, asr #31
    d6c4:	07011a01 	streq	r1, [r1, -r1, lsl #20]
    d6c8:	a6000005 	strge	r0, [r0], -r5
    d6cc:	00000083 	andeq	r0, r0, r3, lsl #1
    d6d0:	004dd419 	subeq	sp, sp, r9, lsl r4
    d6d4:	012c0100 	teqeq	ip, r0, lsl #2
    d6d8:	080057bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    d6dc:	0000000a 	andeq	r0, r0, sl
    d6e0:	07149c01 	ldreq	r9, [r4, -r1, lsl #24]
    d6e4:	c31a0000 	tstgt	sl, #0
    d6e8:	0100004f 	tsteq	r0, pc, asr #32
    d6ec:	0714012c 	ldreq	r0, [r4, -ip, lsr #2]
    d6f0:	50010000 	andpl	r0, r1, r0
    d6f4:	07041700 	streq	r1, [r4, -r0, lsl #14]
    d6f8:	19000005 	stmdbne	r0, {r0, r2}
    d6fc:	00004f83 	andeq	r4, r0, r3, lsl #31
    d700:	c8013a01 	stmdagt	r1, {r0, r9, fp, ip, sp}
    d704:	0c080057 	stceq	0, cr0, [r8], {87}	; 0x57
    d708:	01000000 	mrseq	r0, (UNDEF: 0)
    d70c:	00073f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
    d710:	49471a00 	stmdbmi	r7, {r9, fp, ip}^
    d714:	3a010000 	bcc	4d71c <_Min_Stack_Size+0x4d31c>
    d718:	0000b801 	andeq	fp, r0, r1, lsl #16
    d71c:	00500100 	subseq	r0, r0, r0, lsl #2
    d720:	004b2119 	subeq	r2, fp, r9, lsl r1
    d724:	014c0100 	mrseq	r0, (UNDEF: 92)
    d728:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
    d72c:	0000000c 	andeq	r0, r0, ip
    d730:	07649c01 	strbeq	r9, [r4, -r1, lsl #24]!
    d734:	381a0000 	ldmdacc	sl, {}	; <UNPREDICTABLE>
    d738:	0100004f 	tsteq	r0, pc, asr #32
    d73c:	00b8014c 	adcseq	r0, r8, ip, asr #2
    d740:	50010000 	andpl	r0, r1, r0
    d744:	49b11900 	ldmibmi	r1!, {r8, fp, ip}
    d748:	61010000 	mrsvs	r0, (UNDEF: 1)
    d74c:	0057e001 	subseq	lr, r7, r1
    d750:	0000bc08 	andeq	fp, r0, r8, lsl #24
    d754:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    d758:	1a000007 	bne	d77c <_Min_Stack_Size+0xd37c>
    d75c:	00004a53 	andeq	r4, r0, r3, asr sl
    d760:	f9016101 			; <UNDEFINED> instruction: 0xf9016101
    d764:	01000007 	tsteq	r0, r7
    d768:	4d921d50 	ldcmi	13, cr1, [r2, #320]	; 0x140
    d76c:	61010000 	mrsvs	r0, (UNDEF: 1)
    d770:	0007ff01 	andeq	pc, r7, r1, lsl #30
    d774:	00843900 	addeq	r3, r4, r0, lsl #18
    d778:	4ec31c00 	cdpmi	12, 12, cr1, cr3, cr0, {0}
    d77c:	64010000 	strvs	r0, [r1], #-0
    d780:	0000b801 	andeq	fp, r0, r1, lsl #16
    d784:	00845a00 	addeq	r5, r4, r0, lsl #20
    d788:	4a241c00 	bmi	914790 <_Min_Stack_Size+0x914390>
    d78c:	65010000 	strvs	r0, [r1, #-0]
    d790:	0000b801 	andeq	fp, r0, r1, lsl #16
    d794:	00848500 	addeq	r8, r4, r0, lsl #10
    d798:	4ff51c00 	svcmi	0x00f51c00
    d79c:	66010000 	strvs	r0, [r1], -r0
    d7a0:	0000b801 	andeq	fp, r0, r1, lsl #16
    d7a4:	0084bb00 	addeq	fp, r4, r0, lsl #22
    d7a8:	4a161c00 	bmi	5947b0 <_Min_Stack_Size+0x5943b0>
    d7ac:	67010000 	strvs	r0, [r1, -r0]
    d7b0:	0000b801 	andeq	fp, r0, r1, lsl #16
    d7b4:	00850100 	addeq	r0, r5, r0, lsl #2
    d7b8:	49c01c00 	stmibmi	r0, {sl, fp, ip}^
    d7bc:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    d7c0:	0000b801 	andeq	fp, r0, r1, lsl #16
    d7c4:	00853300 	addeq	r3, r5, r0, lsl #6
    d7c8:	4dcf1c00 	stclmi	12, cr1, [pc]	; d7d0 <_Min_Stack_Size+0xd3d0>
    d7cc:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    d7d0:	0000b801 	andeq	fp, r0, r1, lsl #16
    d7d4:	00857900 	addeq	r7, r5, r0, lsl #18
    d7d8:	04170000 	ldreq	r0, [r7], #-0
    d7dc:	00000306 	andeq	r0, r0, r6, lsl #6
    d7e0:	04a30417 	strteq	r0, [r3], #1047	; 0x417
    d7e4:	29190000 	ldmdbcs	r9, {}	; <UNPREDICTABLE>
    d7e8:	0100004d 	tsteq	r0, sp, asr #32
    d7ec:	589c01af 	ldmpl	ip, {r0, r1, r2, r3, r5, r7, r8}
    d7f0:	00320800 	eorseq	r0, r2, r0, lsl #16
    d7f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    d7f8:	0000082a 	andeq	r0, r0, sl, lsr #16
    d7fc:	004d921a 	subeq	r9, sp, sl, lsl r2
    d800:	01af0100 			; <UNDEFINED> instruction: 0x01af0100
    d804:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    d808:	19005001 	stmdbne	r0, {r0, ip, lr}
    d80c:	00004fb5 			; <UNDEFINED> instruction: 0x00004fb5
    d810:	d001e001 	andle	lr, r1, r1
    d814:	14080058 	strne	r0, [r8], #-88	; 0x58
    d818:	01000000 	mrseq	r0, (UNDEF: 0)
    d81c:	00085d9c 	muleq	r8, ip, sp
    d820:	4a531a00 	bmi	14d4028 <_Min_Stack_Size+0x14d3c28>
    d824:	e0010000 	and	r0, r1, r0
    d828:	0007f901 	andeq	pc, r7, r1, lsl #18
    d82c:	1a500100 	bne	140dc34 <_Min_Stack_Size+0x140d834>
    d830:	00002783 	andeq	r2, r0, r3, lsl #15
    d834:	3801e001 	stmdacc	r1, {r0, sp, lr, pc}
    d838:	01000001 	tsteq	r0, r1
    d83c:	cc1b0051 	ldcgt	0, cr0, [fp], {81}	; 0x51
    d840:	0100004c 	tsteq	r0, ip, asr #32
    d844:	04cf01f9 	strbeq	r0, [pc], #505	; d84c <_Min_Stack_Size+0xd44c>
    d848:	58e40000 	stmiapl	r4!, {}^	; <UNPREDICTABLE>
    d84c:	001c0800 	andseq	r0, ip, r0, lsl #16
    d850:	9c010000 	stcls	0, cr0, [r1], {-0}
    d854:	00000888 	andeq	r0, r0, r8, lsl #17
    d858:	004ca01c 	subeq	sl, ip, ip, lsl r0
    d85c:	01fb0100 	mvnseq	r0, r0, lsl #2
    d860:	000004cf 	andeq	r0, r0, pc, asr #9
    d864:	000085af 	andeq	r8, r0, pc, lsr #11
    d868:	4cb41900 	ldcmi	9, cr1, [r4]
    d86c:	0c010000 	stceq	0, cr0, [r1], {-0}
    d870:	00590002 	subseq	r0, r9, r2
    d874:	00000808 	andeq	r0, r0, r8, lsl #16
    d878:	ad9c0100 	ldfges	f0, [ip]
    d87c:	1a000008 	bne	d8a4 <_Min_Stack_Size+0xd4a4>
    d880:	00004ca0 	andeq	r4, r0, r0, lsr #25
    d884:	ad020c01 	stcge	12, cr0, [r2, #-4]
    d888:	01000008 	tsteq	r0, r8
    d88c:	04170050 	ldreq	r0, [r7], #-80	; 0x50
    d890:	000004cf 	andeq	r0, r0, pc, asr #9
    d894:	004a861b 	subeq	r8, sl, fp, lsl r6
    d898:	021d0100 	andseq	r0, sp, #0, 2
    d89c:	0000010a 	andeq	r0, r0, sl, lsl #2
    d8a0:	08005908 	stmdaeq	r0, {r3, r8, fp, ip, lr}
    d8a4:	00000014 	andeq	r0, r0, r4, lsl r0
    d8a8:	08ee9c01 	stmiaeq	lr!, {r0, sl, fp, ip, pc}^
    d8ac:	e71d0000 	ldr	r0, [sp, -r0]
    d8b0:	0100004d 	tsteq	r0, sp, asr #32
    d8b4:	00b8021d 	adcseq	r0, r8, sp, lsl r2
    d8b8:	86090000 	strhi	r0, [r9], -r0
    d8bc:	831c0000 	tsthi	ip, #0
    d8c0:	01000029 	tsteq	r0, r9, lsr #32
    d8c4:	010a021f 	tsteq	sl, pc, lsl r2
    d8c8:	862a0000 	strthi	r0, [sl], -r0
    d8cc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    d8d0:	0000484f 	andeq	r4, r0, pc, asr #16
    d8d4:	1c023801 	stcne	8, cr3, [r2], {1}
    d8d8:	42080059 	andmi	r0, r8, #89	; 0x59
    d8dc:	01000000 	mrseq	r0, (UNDEF: 0)
    d8e0:	0009539c 	muleq	r9, ip, r3
    d8e4:	4a531a00 	bmi	14d40ec <_Min_Stack_Size+0x14d3cec>
    d8e8:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    d8ec:	0007f902 	andeq	pc, r7, r2, lsl #18
    d8f0:	1d500100 	ldfnee	f0, [r0, #-0]
    d8f4:	000048b4 			; <UNDEFINED> instruction: 0x000048b4
    d8f8:	53023801 	movwpl	r3, #10241	; 0x2801
    d8fc:	57000009 	strpl	r0, [r0, -r9]
    d900:	1d000086 	stcne	0, cr0, [r0, #-536]	; 0xfffffde8
    d904:	00002783 	andeq	r2, r0, r3, lsl #15
    d908:	38023801 	stmdacc	r2, {r0, fp, ip, sp}
    d90c:	91000001 	tstls	r0, r1
    d910:	1c000086 	stcne	0, cr0, [r0], {134}	; 0x86
    d914:	00004aa9 	andeq	r4, r0, r9, lsr #21
    d918:	b8023a01 	stmdalt	r2, {r0, r9, fp, ip, sp}
    d91c:	cb000000 	blgt	d924 <_Min_Stack_Size+0xd524>
    d920:	1c000086 	stcne	0, cr0, [r0], {134}	; 0x86
    d924:	00004a1e 	andeq	r4, r0, lr, lsl sl
    d928:	b8023b01 	stmdalt	r2, {r0, r8, r9, fp, ip, sp}
    d92c:	fa000000 	blx	d934 <_Min_Stack_Size+0xd534>
    d930:	00000086 	andeq	r0, r0, r6, lsl #1
    d934:	053f0417 	ldreq	r0, [pc, #-1047]!	; d525 <_Min_Stack_Size+0xd125>
    d938:	e2190000 	ands	r0, r9, #0
    d93c:	0100004e 	tsteq	r0, lr, asr #32
    d940:	5960025f 	stmdbpl	r0!, {r0, r1, r2, r3, r4, r6, r9}^
    d944:	000a0800 	andeq	r0, sl, r0, lsl #16
    d948:	9c010000 	stcls	0, cr0, [r1], {-0}
    d94c:	0000097e 	andeq	r0, r0, lr, ror r9
    d950:	0048b41a 	subeq	fp, r8, sl, lsl r4
    d954:	025f0100 	subseq	r0, pc, #0, 2
    d958:	00000953 	andeq	r0, r0, r3, asr r9
    d95c:	19005001 	stmdbne	r0, {r0, ip, lr}
    d960:	00004c7f 	andeq	r4, r0, pc, ror ip
    d964:	6c027101 	stfvss	f7, [r2], {1}
    d968:	20080059 	andcs	r0, r8, r9, asr r0
    d96c:	01000000 	mrseq	r0, (UNDEF: 0)
    d970:	0009b19c 	muleq	r9, ip, r1
    d974:	4a531a00 	bmi	14d417c <_Min_Stack_Size+0x14d3d7c>
    d978:	71010000 	mrsvc	r0, (UNDEF: 1)
    d97c:	0007f902 	andeq	pc, r7, r2, lsl #18
    d980:	1a500100 	bne	140dd88 <_Min_Stack_Size+0x140d988>
    d984:	00002783 	andeq	r2, r0, r3, lsl #15
    d988:	38027101 	stmdacc	r2, {r0, r8, ip, sp, lr}
    d98c:	01000001 	tsteq	r0, r1
    d990:	79190051 	ldmdbvc	r9, {r0, r4, r6}
    d994:	01000048 	tsteq	r0, r8, asr #32
    d998:	598c028e 	stmibpl	ip, {r1, r2, r3, r7, r9}
    d99c:	001a0800 	andseq	r0, sl, r0, lsl #16
    d9a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    d9a4:	00000a14 	andeq	r0, r0, r4, lsl sl
    d9a8:	004a531a 	subeq	r5, sl, sl, lsl r3
    d9ac:	028e0100 	addeq	r0, lr, #0, 2
    d9b0:	000007f9 	strdeq	r0, [r0], -r9
    d9b4:	781a5001 	ldmdavc	sl, {r0, ip, lr}
    d9b8:	0100004b 	tsteq	r0, fp, asr #32
    d9bc:	0a14028e 	beq	50e3fc <_Min_Stack_Size+0x50dffc>
    d9c0:	51010000 	mrspl	r0, (UNDEF: 1)
    d9c4:	004ff71c 	subeq	pc, pc, ip, lsl r7	; <UNPREDICTABLE>
    d9c8:	02900100 	addseq	r0, r0, #0, 2
    d9cc:	000000b8 	strheq	r0, [r0], -r8
    d9d0:	00008729 	andeq	r8, r0, r9, lsr #14
    d9d4:	6465721e 	strbtvs	r7, [r5], #-542	; 0x21e
    d9d8:	02910100 	addseq	r0, r1, #0, 2
    d9dc:	000000b8 	strheq	r0, [r0], -r8
    d9e0:	00008741 	andeq	r8, r0, r1, asr #14
    d9e4:	004d8a1c 	subeq	r8, sp, ip, lsl sl
    d9e8:	02920100 	addseq	r0, r2, #0, 2
    d9ec:	000000b8 	strheq	r0, [r0], -r8
    d9f0:	00008759 	andeq	r8, r0, r9, asr r7
    d9f4:	83041700 	movwhi	r1, #18176	; 0x4700
    d9f8:	19000005 	stmdbne	r0, {r0, r2}
    d9fc:	00004d60 	andeq	r4, r0, r0, ror #26
    da00:	a802a901 	stmdage	r2, {r0, r8, fp, sp, pc}
    da04:	0c080059 	stceq	0, cr0, [r8], {89}	; 0x59
    da08:	01000000 	mrseq	r0, (UNDEF: 0)
    da0c:	000a3f9c 	muleq	sl, ip, pc	; <UNPREDICTABLE>
    da10:	4b781a00 	blmi	1e14218 <_Min_Stack_Size+0x1e13e18>
    da14:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    da18:	000a1402 	andeq	r1, sl, r2, lsl #8
    da1c:	00500100 	subseq	r0, r0, r0, lsl #2
    da20:	004ffd19 	subeq	pc, pc, r9, lsl sp	; <UNPREDICTABLE>
    da24:	02bd0100 	adcseq	r0, sp, #0, 2
    da28:	080059b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip, lr}
    da2c:	00000072 	andeq	r0, r0, r2, ror r0
    da30:	0ae49c01 	beq	ff934a3c <_estack+0xdf904a3c>
    da34:	531a0000 	tstpl	sl, #0
    da38:	0100004a 	tsteq	r0, sl, asr #32
    da3c:	07f902bd 			; <UNDEFINED> instruction: 0x07f902bd
    da40:	50010000 	andpl	r0, r1, r0
    da44:	004e6d1d 	subeq	r6, lr, sp, lsl sp
    da48:	02bd0100 	adcseq	r0, sp, #0, 2
    da4c:	000000a2 	andeq	r0, r0, r2, lsr #1
    da50:	00008771 	andeq	r8, r0, r1, ror r7
    da54:	004e751d 	subeq	r7, lr, sp, lsl r5
    da58:	02bd0100 	adcseq	r0, sp, #0, 2
    da5c:	000000a2 	andeq	r0, r0, r2, lsr #1
    da60:	00008792 	muleq	r0, r2, r7
    da64:	004e0c1c 	subeq	r0, lr, ip, lsl ip
    da68:	02c00100 	sbceq	r0, r0, #0, 2
    da6c:	000000b8 	strheq	r0, [r0], -r8
    da70:	000087b3 			; <UNDEFINED> instruction: 0x000087b3
    da74:	0028c41c 	eoreq	ip, r8, ip, lsl r4
    da78:	02c00100 	sbceq	r0, r0, #0, 2
    da7c:	000000b8 	strheq	r0, [r0], -r8
    da80:	000087f2 	strdeq	r8, [r0], -r2
    da84:	004e8e1c 	subeq	r8, lr, ip, lsl lr
    da88:	02c10100 	sbceq	r0, r1, #0, 2
    da8c:	000000b8 	strheq	r0, [r0], -r8
    da90:	00008805 	andeq	r8, r0, r5, lsl #16
    da94:	004a971c 	subeq	r9, sl, ip, lsl r7
    da98:	02c20100 	sbceq	r0, r2, #0, 2
    da9c:	000000b8 	strheq	r0, [r0], -r8
    daa0:	00008830 	andeq	r8, r0, r0, lsr r8
    daa4:	0049ef1c 	subeq	lr, r9, ip, lsl pc
    daa8:	02c30100 	sbceq	r0, r3, #0, 2
    daac:	000000b8 	strheq	r0, [r0], -r8
    dab0:	00008859 	andeq	r8, r0, r9, asr r8
    dab4:	004f751c 	subeq	r7, pc, ip, lsl r5	; <UNPREDICTABLE>
    dab8:	02c40100 	sbceq	r0, r4, #0, 2
    dabc:	000000b8 	strheq	r0, [r0], -r8
    dac0:	00008877 	andeq	r8, r0, r7, ror r8
    dac4:	4d741900 	ldclmi	9, cr1, [r4, #-0]
    dac8:	fa010000 	blx	4dad0 <_Min_Stack_Size+0x4d6d0>
    dacc:	005a2802 	subseq	r2, sl, r2, lsl #16
    dad0:	00000408 	andeq	r0, r0, r8, lsl #8
    dad4:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    dad8:	1a00000b 	bne	db0c <_Min_Stack_Size+0xd70c>
    dadc:	00004a53 	andeq	r4, r0, r3, asr sl
    dae0:	f902fa01 			; <UNDEFINED> instruction: 0xf902fa01
    dae4:	01000007 	tsteq	r0, r7
    dae8:	4cf11a50 	vldmiami	r1!, {s3-s82}
    daec:	fa010000 	blx	4daf4 <_Min_Stack_Size+0x4d6f4>
    daf0:	00009702 	andeq	r9, r0, r2, lsl #14
    daf4:	00510100 	subseq	r0, r1, r0, lsl #2
    daf8:	004e2419 	subeq	r2, lr, r9, lsl r4
    dafc:	03090100 	movweq	r0, #37120	; 0x9100
    db00:	08005a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, lr}
    db04:	00000004 	andeq	r0, r0, r4
    db08:	0b4a9c01 	bleq	12b4b14 <_Min_Stack_Size+0x12b4714>
    db0c:	531a0000 	tstpl	sl, #0
    db10:	0100004a 	tsteq	r0, sl, asr #32
    db14:	07f90309 	ldrbeq	r0, [r9, r9, lsl #6]!
    db18:	50010000 	andpl	r0, r1, r0
    db1c:	0033b51a 	eorseq	fp, r3, sl, lsl r5
    db20:	03090100 	movweq	r0, #37120	; 0x9100
    db24:	000000b8 	strheq	r0, [r0], -r8
    db28:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    db2c:	000049e0 	andeq	r4, r0, r0, ror #19
    db30:	30031901 	andcc	r1, r3, r1, lsl #18
    db34:	5608005a 			; <UNDEFINED> instruction: 0x5608005a
    db38:	01000000 	mrseq	r0, (UNDEF: 0)
    db3c:	000be99c 	muleq	fp, ip, r9
    db40:	4a531a00 	bmi	14d4348 <_Min_Stack_Size+0x14d3f48>
    db44:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    db48:	0007f903 	andeq	pc, r7, r3, lsl #18
    db4c:	1d500100 	ldfnee	f0, [r0, #-0]
    db50:	0000502e 	andeq	r5, r0, lr, lsr #32
    db54:	b8031901 	stmdalt	r3, {r0, r8, fp, ip}
    db58:	95000000 	strls	r0, [r0, #-0]
    db5c:	1a000088 	bne	dd84 <_Min_Stack_Size+0xd984>
    db60:	00004866 	andeq	r4, r0, r6, ror #16
    db64:	b8031901 	stmdalt	r3, {r0, r8, fp, ip}
    db68:	01000000 	mrseq	r0, (UNDEF: 0)
    db6c:	28c41f52 	stmiacs	r4, {r1, r4, r6, r8, r9, sl, fp, ip}^
    db70:	1c010000 	stcne	0, cr0, [r1], {-0}
    db74:	00009703 	andeq	r9, r0, r3, lsl #14
    db78:	4e0c1c00 	cdpmi	12, 0, cr1, cr12, cr0, {0}
    db7c:	1d010000 	stcne	0, cr0, [r1, #-0]
    db80:	0000b803 	andeq	fp, r0, r3, lsl #16
    db84:	0088c100 	addeq	ip, r8, r0, lsl #2
    db88:	4e8e1c00 	cdpmi	12, 8, cr1, cr14, cr0, {0}
    db8c:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    db90:	0000b803 	andeq	fp, r0, r3, lsl #16
    db94:	0088f500 	addeq	pc, r8, r0, lsl #10
    db98:	4a971c00 	bmi	fe5d4ba0 <_estack+0xde5a4ba0>
    db9c:	1f010000 	svcne	0x00010000
    dba0:	0000b803 	andeq	fp, r0, r3, lsl #16
    dba4:	00890800 	addeq	r0, r9, r0, lsl #16
    dba8:	49ef1c00 	stmibmi	pc!, {sl, fp, ip}^	; <UNPREDICTABLE>
    dbac:	20010000 	andcs	r0, r1, r0
    dbb0:	0000b803 	andeq	fp, r0, r3, lsl #16
    dbb4:	00893500 	addeq	r3, r9, r0, lsl #10
    dbb8:	4f751c00 	svcmi	0x00751c00
    dbbc:	21010000 	mrscs	r0, (UNDEF: 1)
    dbc0:	0000b803 	andeq	fp, r0, r3, lsl #16
    dbc4:	00894800 	addeq	r4, r9, r0, lsl #16
    dbc8:	24190000 	ldrcs	r0, [r9], #-0
    dbcc:	01000049 	tsteq	r0, r9, asr #32
    dbd0:	5a880357 	bpl	fe20e934 <_estack+0xde1de934>
    dbd4:	00560800 	subseq	r0, r6, r0, lsl #16
    dbd8:	9c010000 	stcls	0, cr0, [r1], {-0}
    dbdc:	00000c38 	andeq	r0, r0, r8, lsr ip
    dbe0:	004a531a 	subeq	r5, sl, sl, lsl r3
    dbe4:	03570100 	cmpeq	r7, #0, 2
    dbe8:	000007f9 	strdeq	r0, [r0], -r9
    dbec:	121a5001 	andsne	r5, sl, #1
    dbf0:	0100004f 	tsteq	r0, pc, asr #32
    dbf4:	00b80357 	adcseq	r0, r8, r7, asr r3
    dbf8:	51010000 	mrspl	r0, (UNDEF: 1)
    dbfc:	0028c41f 	eoreq	ip, r8, pc, lsl r4
    dc00:	035a0100 	cmpeq	sl, #0, 2
    dc04:	00000097 	muleq	r0, r7, r0
    dc08:	004e0c1c 	subeq	r0, lr, ip, lsl ip
    dc0c:	035b0100 	cmpeq	fp, #0, 2
    dc10:	000000b8 	strheq	r0, [r0], -r8
    dc14:	00008962 	andeq	r8, r0, r2, ror #18
    dc18:	50101900 	andspl	r1, r0, r0, lsl #18
    dc1c:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    dc20:	005ae003 	subseq	lr, sl, r3
    dc24:	00001a08 	andeq	r1, r0, r8, lsl #20
    dc28:	6d9c0100 	ldfvss	f0, [ip]
    dc2c:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
    dc30:	00004c62 	andeq	r4, r0, r2, ror #24
    dc34:	b803c901 	stmdalt	r3, {r0, r8, fp, lr, pc}
    dc38:	8b000000 	blhi	dc40 <_Min_Stack_Size+0xd840>
    dc3c:	1a000089 	bne	de68 <_Min_Stack_Size+0xda68>
    dc40:	00002783 	andeq	r2, r0, r3, lsl #15
    dc44:	3803c901 	stmdacc	r3, {r0, r8, fp, lr, pc}
    dc48:	01000001 	tsteq	r0, r1
    dc4c:	3e1b0051 	mrccc	0, 0, r0, cr11, cr1, {2}
    dc50:	0100004d 	tsteq	r0, sp, asr #32
    dc54:	010a03e3 	smlatteq	sl, r3, r3, r0
    dc58:	5afc0000 	bpl	fff0dc60 <_estack+0xdfeddc60>
    dc5c:	00140800 	andseq	r0, r4, r0, lsl #16
    dc60:	9c010000 	stcls	0, cr0, [r1], {-0}
    dc64:	00000ca8 	andeq	r0, r0, r8, lsr #25
    dc68:	004f1e1d 	subeq	r1, pc, sp, lsl lr	; <UNPREDICTABLE>
    dc6c:	03e30100 	mvneq	r0, #0, 2
    dc70:	000000b8 	strheq	r0, [r0], -r8
    dc74:	000089c5 	andeq	r8, r0, r5, asr #19
    dc78:	0029831c 	eoreq	r8, r9, ip, lsl r3
    dc7c:	03e50100 	mvneq	r0, #0, 2
    dc80:	0000010a 	andeq	r0, r0, sl, lsl #2
    dc84:	000089e6 	andeq	r8, r0, r6, ror #19
    dc88:	48a51900 	stmiami	r5!, {r8, fp, ip}
    dc8c:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    dc90:	005b1003 	subseq	r1, fp, r3
    dc94:	00000c08 	andeq	r0, r0, r8, lsl #24
    dc98:	cd9c0100 	ldfgts	f0, [ip]
    dc9c:	1a00000c 	bne	dcd4 <_Min_Stack_Size+0xd8d4>
    dca0:	00004f1e 	andeq	r4, r0, lr, lsl pc
    dca4:	b803ff01 	stmdalt	r3, {r0, r8, r9, sl, fp, ip, sp, lr, pc}
    dca8:	01000000 	mrseq	r0, (UNDEF: 0)
    dcac:	ec1b0050 	ldc	0, cr0, [fp], {80}	; 0x50
    dcb0:	0100004a 	tsteq	r0, sl, asr #32
    dcb4:	01160412 	tsteq	r6, r2, lsl r4
    dcb8:	5b1c0000 	blpl	70dcc0 <_Min_Stack_Size+0x70d8c0>
    dcbc:	001e0800 	andseq	r0, lr, r0, lsl #16
    dcc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    dcc4:	00000d08 	andeq	r0, r0, r8, lsl #26
    dcc8:	004c621d 	subeq	r6, ip, sp, lsl r2
    dccc:	04120100 	ldreq	r0, [r2], #-256	; 0x100
    dcd0:	000000b8 	strheq	r0, [r0], -r8
    dcd4:	00008a1f 	andeq	r8, r0, pc, lsl sl
    dcd8:	0029831c 	eoreq	r8, r9, ip, lsl r3
    dcdc:	04140100 	ldreq	r0, [r4], #-256	; 0x100
    dce0:	00000116 	andeq	r0, r0, r6, lsl r1
    dce4:	00008a59 	andeq	r8, r0, r9, asr sl
    dce8:	4db81900 	ldcmi	9, cr1, [r8]
    dcec:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    dcf0:	005b3c04 	subseq	r3, fp, r4, lsl #24
    dcf4:	00000c08 	andeq	r0, r0, r8, lsl #24
    dcf8:	2d9c0100 	ldfcss	f0, [ip]
    dcfc:	1a00000d 	bne	dd38 <_Min_Stack_Size+0xd938>
    dd00:	00004c62 	andeq	r4, r0, r2, ror #24
    dd04:	b8043801 	stmdalt	r4, {r0, fp, ip, sp}
    dd08:	01000000 	mrseq	r0, (UNDEF: 0)
    dd0c:	9d200050 	stcls	0, cr0, [r0, #-320]!	; 0xfffffec0
    dd10:	06000003 	streq	r0, [r0], -r3
    dd14:	00ef06a7 	rsceq	r0, pc, r7, lsr #13
    dd18:	e1210000 	teq	r1, r0
    dd1c:	0700002d 	streq	r0, [r0, -sp, lsr #32]
    dd20:	b822024a 	stmdalt	r2!, {r1, r3, r6, r9}
    dd24:	22000000 	andcs	r0, r0, #0
    dd28:	00000138 	andeq	r0, r0, r8, lsr r1
    dd2c:	0c9e0000 	ldceq	0, cr0, [lr], {0}
    dd30:	00040000 	andeq	r0, r4, r0
    dd34:	00002a9b 	muleq	r0, fp, sl
    dd38:	02840104 	addeq	r0, r4, #4, 2
    dd3c:	d6010000 	strle	r0, [r1], -r0
    dd40:	01000052 	qaddeq	r0, r2, r0
    dd44:	e8000001 	stmda	r0, {r0}
    dd48:	00000015 	andeq	r0, r0, r5, lsl r0
    dd4c:	7f000000 	svcvc	0x00000000
    dd50:	02000050 	andeq	r0, r0, #80	; 0x50
    dd54:	01500601 	cmpeq	r0, r1, lsl #12
    dd58:	01020000 	mrseq	r0, (UNDEF: 2)
    dd5c:	00014e08 	andeq	r4, r1, r8, lsl #28
    dd60:	05020200 	streq	r0, [r2, #-512]	; 0x200
    dd64:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    dd68:	e5070202 	str	r0, [r7, #-514]	; 0x202
    dd6c:	03000001 	movweq	r0, #1
    dd70:	00000377 	andeq	r0, r0, r7, ror r3
    dd74:	004c3702 	subeq	r3, ip, r2, lsl #14
    dd78:	04020000 	streq	r0, [r2], #-0
    dd7c:	0000c505 	andeq	ip, r0, r5, lsl #10
    dd80:	00510300 	subseq	r0, r1, r0, lsl #6
    dd84:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    dd88:	0000005e 	andeq	r0, r0, lr, asr r0
    dd8c:	78070402 	stmdavc	r7, {r1, sl}
    dd90:	02000001 	andeq	r0, r0, #1
    dd94:	00c00508 	sbceq	r0, r0, r8, lsl #10
    dd98:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    dd9c:	00017307 	andeq	r7, r1, r7, lsl #6
    dda0:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    dda4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    dda8:	7d070402 	cfstrsvc	mvf0, [r7, #-8]
    ddac:	03000001 	movweq	r0, #1
    ddb0:	00000379 	andeq	r0, r0, r9, ror r3
    ddb4:	00414103 	subeq	r4, r1, r3, lsl #2
    ddb8:	53030000 	movwpl	r0, #12288	; 0x3000
    ddbc:	03000000 	movweq	r0, #0
    ddc0:	00005342 	andeq	r5, r0, r2, asr #6
    ddc4:	008c0500 	addeq	r0, ip, r0, lsl #10
    ddc8:	00a70000 	adceq	r0, r7, r0
    ddcc:	a7060000 	strge	r0, [r6, -r0]
    ddd0:	07000000 	streq	r0, [r0, -r0]
    ddd4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ddd8:	0000002c 	andeq	r0, r0, ip, lsr #32
    dddc:	00008c07 	andeq	r8, r0, r7, lsl #24
    dde0:	008c0500 	addeq	r0, ip, r0, lsl #10
    dde4:	00c30000 	sbceq	r0, r3, r0
    dde8:	a7060000 	strge	r0, [r6, -r0]
    ddec:	01000000 	mrseq	r0, (UNDEF: 0)
    ddf0:	00810700 	addeq	r0, r1, r0, lsl #14
    ddf4:	01080000 	mrseq	r0, (UNDEF: 8)
    ddf8:	de01f704 	cdple	7, 0, cr15, cr1, cr4, {0}
    ddfc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    de00:	000028e4 	andeq	r2, r0, r4, ror #17
    de04:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    de08:	00010054 	andeq	r0, r1, r4, asr r0
    de0c:	003d290b 	eorseq	r2, sp, fp, lsl #18
    de10:	01f70400 	mvnseq	r0, r0, lsl #8
    de14:	000000c8 	andeq	r0, r0, r8, asr #1
    de18:	003ca00b 	eorseq	sl, ip, fp
    de1c:	01f70400 	mvnseq	r0, r0, lsl #8
    de20:	000000c8 	andeq	r0, r0, r8, asr #1
    de24:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    de28:	00010c01 	andeq	r0, r1, r1, lsl #24
    de2c:	04880900 	streq	r0, [r8], #2304	; 0x900
    de30:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    de34:	000005c0 	andeq	r0, r0, r0, asr #11
    de38:	2a0b0001 	bcs	2cde44 <_Min_Stack_Size+0x2cda44>
    de3c:	04000009 	streq	r0, [r0], #-9
    de40:	00f601f9 	ldrshteq	r0, [r6], #25
    de44:	200c0000 	andcs	r0, ip, r0
    de48:	2f038b04 	svccs	0x00038b04
    de4c:	0d000001 	stceq	0, cr0, [r0, #-4]
    de50:	0000590c 	andeq	r5, r0, ip, lsl #18
    de54:	2f038d04 	svccs	0x00038d04
    de58:	00000001 	andeq	r0, r0, r1
    de5c:	00970700 	addseq	r0, r7, r0, lsl #14
    de60:	6d0b0000 	stcvs	0, cr0, [fp, #-0]
    de64:	04000051 	streq	r0, [r0], #-81	; 0x51
    de68:	0118038e 	tsteq	r8, lr, lsl #7
    de6c:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    de70:	57039404 	strpl	r9, [r3, -r4, lsl #8]
    de74:	0d000001 	stceq	0, cr0, [r0, #-4]
    de78:	000056f6 	strdeq	r5, [r0], -r6
    de7c:	67039604 	strvs	r9, [r3, -r4, lsl #12]
    de80:	00000001 	andeq	r0, r0, r1
    de84:	008c0500 	addeq	r0, ip, r0, lsl #10
    de88:	01670000 	cmneq	r7, r0
    de8c:	a7060000 	strge	r0, [r6, -r0]
    de90:	06000000 	streq	r0, [r0], -r0
    de94:	01570700 	cmpeq	r7, r0, lsl #14
    de98:	f20b0000 	vhadd.s8	d0, d11, d0
    de9c:	04000055 	streq	r0, [r0], #-85	; 0x55
    dea0:	01400397 			; <UNDEFINED> instruction: 0x01400397
    dea4:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    dea8:	d0039d04 	andle	r9, r3, r4, lsl #26
    deac:	0d000001 	stceq	0, cr0, [r0, #-4]
    deb0:	000054e4 	andeq	r5, r0, r4, ror #9
    deb4:	ae039f04 	cdpge	15, 0, cr9, cr3, cr4, {0}
    deb8:	00000000 	andeq	r0, r0, r0
    debc:	3252530e 	subscc	r5, r2, #939524096	; 0x38000000
    dec0:	03a00400 	moveq	r0, #0, 8
    dec4:	000000ae 	andeq	r0, r0, lr, lsr #1
    dec8:	50450d04 	subpl	r0, r5, r4, lsl #26
    decc:	a1040000 	mrsge	r0, (UNDEF: 4)
    ded0:	0000ae03 	andeq	sl, r0, r3, lsl #28
    ded4:	600d0800 	andvs	r0, sp, r0, lsl #16
    ded8:	04000055 	streq	r0, [r0], #-85	; 0x55
    dedc:	00ae03a2 	adceq	r0, lr, r2, lsr #7
    dee0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    dee4:	0000023c 	andeq	r0, r0, ip, lsr r2
    dee8:	8c03a304 	stchi	3, cr10, [r3], {4}
    deec:	10000000 	andne	r0, r0, r0
    def0:	0051f00d 	subseq	pc, r1, sp
    def4:	03a40400 			; <UNDEFINED> instruction: 0x03a40400
    def8:	000000ae 	andeq	r0, r0, lr, lsr #1
    defc:	530b0014 	movwpl	r0, #45076	; 0xb014
    df00:	04000053 	streq	r0, [r0], #-83	; 0x53
    df04:	017803a5 	cmneq	r8, r5, lsr #7
    df08:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    df0c:	3403ab04 	strcc	sl, [r3], #-2820	; 0xb04
    df10:	0d000002 	stceq	0, cr0, [r0, #-8]
    df14:	000054e9 	andeq	r5, r0, r9, ror #9
    df18:	ae03ad04 	cdpge	13, 0, cr10, cr3, cr4, {0}
    df1c:	00000000 	andeq	r0, r0, r0
    df20:	3352530e 	cmpcc	r2, #939524096	; 0x38000000
    df24:	03ae0400 			; <UNDEFINED> instruction: 0x03ae0400
    df28:	000000ae 	andeq	r0, r0, lr, lsr #1
    df2c:	50bb0d04 	adcspl	r0, fp, r4, lsl #26
    df30:	af040000 	svcge	0x00040000
    df34:	0000ae03 	andeq	sl, r0, r3, lsl #28
    df38:	660d0800 	strvs	r0, [sp], -r0, lsl #16
    df3c:	04000055 	streq	r0, [r0], #-85	; 0x55
    df40:	00ae03b0 	strhteq	r0, [lr], r0
    df44:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    df48:	0000023c 	andeq	r0, r0, ip, lsr r2
    df4c:	8c03b104 	stfhid	f3, [r3], {4}
    df50:	10000000 	andne	r0, r0, r0
    df54:	0051c30d 	subseq	ip, r1, sp, lsl #6
    df58:	03b20400 			; <UNDEFINED> instruction: 0x03b20400
    df5c:	000000ae 	andeq	r0, r0, lr, lsr #1
    df60:	bd0b0014 	stclt	0, cr0, [fp, #-80]	; 0xffffffb0
    df64:	04000055 	streq	r0, [r0], #-85	; 0x55
    df68:	01dc03b3 	ldrheq	r0, [ip, #51]	; 0x33
    df6c:	140c0000 	strne	r0, [ip], #-0
    df70:	8b03b904 	blhi	fc388 <_Min_Stack_Size+0xfbf88>
    df74:	0d000002 	stceq	0, cr0, [r0, #-8]
    df78:	000054ee 	andeq	r5, r0, lr, ror #9
    df7c:	ae03bb04 	vmlage.f64	d11, d3, d4
    df80:	00000000 	andeq	r0, r0, r0
    df84:	3452530e 	ldrbcc	r5, [r2], #-782	; 0x30e
    df88:	03bc0400 			; <UNDEFINED> instruction: 0x03bc0400
    df8c:	000000ae 	andeq	r0, r0, lr, lsr #1
    df90:	50c10d04 	sbcpl	r0, r1, r4, lsl #26
    df94:	bd040000 	stclt	0, cr0, [r4, #-0]
    df98:	0000ae03 	andeq	sl, r0, r3, lsl #28
    df9c:	c70d0800 	strgt	r0, [sp, -r0, lsl #16]
    dfa0:	04000056 	streq	r0, [r0], #-86	; 0x56
    dfa4:	00ae03be 	strhteq	r0, [lr], lr
    dfa8:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    dfac:	000058e4 	andeq	r5, r0, r4, ror #17
    dfb0:	ae03bf04 	cdpge	15, 0, cr11, cr3, cr4, {0}
    dfb4:	10000000 	andne	r0, r0, r0
    dfb8:	56300b00 	ldrtpl	r0, [r0], -r0, lsl #22
    dfbc:	c0040000 	andgt	r0, r4, r0
    dfc0:	00024003 	andeq	r4, r2, r3
    dfc4:	041c0c00 	ldreq	r0, [ip], #-3072	; 0xc00
    dfc8:	02e203c6 	rsceq	r0, r2, #402653187	; 0x18000003
    dfcc:	6a0d0000 	bvs	34dfd4 <_Min_Stack_Size+0x34dbd4>
    dfd0:	04000050 	streq	r0, [r0], #-80	; 0x50
    dfd4:	02e203c8 	rsceq	r0, r2, #200, 6	; 0x20000003
    dfd8:	0d000000 	stceq	0, cr0, [r0, #-0]
    dfdc:	00005184 	andeq	r5, r0, r4, lsl #3
    dfe0:	e703c904 	str	ip, [r3, -r4, lsl #18]
    dfe4:	08000002 	stmdaeq	r0, {r1}
    dfe8:	0053a40d 	subseq	sl, r3, sp, lsl #8
    dfec:	03ca0400 	biceq	r0, sl, #0, 8
    dff0:	000000ae 	andeq	r0, r0, lr, lsr #1
    dff4:	50f90d10 	rscspl	r0, r9, r0, lsl sp
    dff8:	cb040000 	blgt	10e000 <_Min_Stack_Size+0x10dc00>
    dffc:	0000ae03 	andeq	sl, r0, r3, lsl #28
    e000:	7f0d1400 	svcvc	0x000d1400
    e004:	04000051 	streq	r0, [r0], #-81	; 0x51
    e008:	00ae03cc 	adceq	r0, lr, ip, asr #7
    e00c:	00180000 	andseq	r0, r8, r0
    e010:	0000b307 	andeq	fp, r0, r7, lsl #6
    e014:	00b30700 	adcseq	r0, r3, r0, lsl #14
    e018:	6f0b0000 	svcvs	0x000b0000
    e01c:	04000050 	streq	r0, [r0], #-80	; 0x50
    e020:	029703cd 	addseq	r0, r7, #872415235	; 0x34000003
    e024:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    e028:	03552f05 	cmpeq	r5, #5, 30
    e02c:	a0100000 	andsge	r0, r0, r0
    e030:	05000056 	streq	r0, [r0, #-86]	; 0x56
    e034:	00008c31 	andeq	r8, r0, r1, lsr ip
    e038:	c5100000 	ldrgt	r0, [r0, #-0]
    e03c:	05000054 	streq	r0, [r0, #-84]	; 0x54
    e040:	00008c36 	andeq	r8, r0, r6, lsr ip
    e044:	4e100400 	cfmulsmi	mvf0, mvf0, mvf0
    e048:	05000055 	streq	r0, [r0, #-85]	; 0x55
    e04c:	00008c3b 	andeq	r8, r0, fp, lsr ip
    e050:	7d100800 	ldcvc	8, cr0, [r0, #-0]
    e054:	05000054 	streq	r0, [r0, #-84]	; 0x54
    e058:	00008c40 	andeq	r8, r0, r0, asr #24
    e05c:	fc100c00 	ldc2	12, cr0, [r0], {-0}
    e060:	05000058 	streq	r0, [r0, #-88]	; 0x58
    e064:	00008c45 	andeq	r8, r0, r5, asr #24
    e068:	41101000 	tstmi	r0, r0
    e06c:	05000057 	streq	r0, [r0, #-87]	; 0x57
    e070:	00008c49 	andeq	r8, r0, r9, asr #24
    e074:	81101400 	tsthi	r0, r0, lsl #8
    e078:	05000055 	streq	r0, [r0, #-85]	; 0x55
    e07c:	00008c51 	andeq	r8, r0, r1, asr ip
    e080:	03001800 	movweq	r1, #2048	; 0x800
    e084:	000055a0 	andeq	r5, r0, r0, lsr #11
    e088:	02f85305 	rscseq	r5, r8, #335544320	; 0x14000000
    e08c:	400f0000 	andmi	r0, pc, r0
    e090:	04295805 	strteq	r5, [r9], #-2053	; 0x805
    e094:	1a100000 	bne	40e09c <_Min_Stack_Size+0x40dc9c>
    e098:	05000056 	streq	r0, [r0, #-86]	; 0x56
    e09c:	00008c5a 	andeq	r8, r0, sl, asr ip
    e0a0:	e9100000 	ldmdb	r0, {}	; <UNPREDICTABLE>
    e0a4:	05000058 	streq	r0, [r0, #-88]	; 0x58
    e0a8:	00008c5d 	andeq	r8, r0, sp, asr ip
    e0ac:	cd100400 	cfldrsgt	mvf0, [r0, #-0]
    e0b0:	05000056 	streq	r0, [r0, #-86]	; 0x56
    e0b4:	00008c61 	andeq	r8, r0, r1, ror #24
    e0b8:	05100800 	ldreq	r0, [r0, #-2048]	; 0x800
    e0bc:	05000058 	streq	r0, [r0, #-88]	; 0x58
    e0c0:	00008c65 	andeq	r8, r0, r5, ror #24
    e0c4:	77100c00 	ldrvc	r0, [r0, -r0, lsl #24]
    e0c8:	05000053 	streq	r0, [r0, #-83]	; 0x53
    e0cc:	00008c68 	andeq	r8, r0, r8, ror #24
    e0d0:	c7101000 	ldrgt	r1, [r0, -r0]
    e0d4:	05000050 	streq	r0, [r0, #-80]	; 0x50
    e0d8:	00008c6c 	andeq	r8, r0, ip, ror #24
    e0dc:	23101400 	tstcs	r0, #0, 8
    e0e0:	05000056 	streq	r0, [r0, #-86]	; 0x56
    e0e4:	00008c70 	andeq	r8, r0, r0, ror ip
    e0e8:	cb101800 	blgt	4140f0 <_Min_Stack_Size+0x413cf0>
    e0ec:	05000053 	streq	r0, [r0, #-83]	; 0x53
    e0f0:	00008c74 	andeq	r8, r0, r4, ror ip
    e0f4:	5d101c00 	ldcpl	12, cr1, [r0, #-0]
    e0f8:	05000054 	streq	r0, [r0, #-84]	; 0x54
    e0fc:	00008c79 	andeq	r8, r0, r9, ror ip
    e100:	b6102000 	ldrlt	r2, [r0], -r0
    e104:	05000054 	streq	r0, [r0, #-84]	; 0x54
    e108:	00008c7c 	andeq	r8, r0, ip, ror ip
    e10c:	4b102400 	blmi	417114 <_Min_Stack_Size+0x416d14>
    e110:	05000050 	streq	r0, [r0, #-80]	; 0x50
    e114:	00008c80 	andeq	r8, r0, r0, lsl #25
    e118:	58102800 	ldmdapl	r0, {fp, sp}
    e11c:	05000058 	streq	r0, [r0, #-88]	; 0x58
    e120:	00008c83 	andeq	r8, r0, r3, lsl #25
    e124:	cf102c00 	svcgt	0x00102c00
    e128:	05000055 	streq	r0, [r0, #-85]	; 0x55
    e12c:	00008c87 	andeq	r8, r0, r7, lsl #25
    e130:	1b103000 	blne	41a138 <_Min_Stack_Size+0x419d38>
    e134:	05000051 	streq	r0, [r0, #-81]	; 0x51
    e138:	00008c8a 	andeq	r8, r0, sl, lsl #25
    e13c:	dc103400 	cfldrsle	mvf3, [r0], {-0}
    e140:	05000056 	streq	r0, [r0, #-86]	; 0x56
    e144:	00042990 	muleq	r4, r0, r9
    e148:	29103800 	ldmdbcs	r0, {fp, ip, sp}
    e14c:	05000052 	streq	r0, [r0, #-82]	; 0x52
    e150:	00042992 	muleq	r4, r2, r9
    e154:	11003c00 	tstne	r0, r0, lsl #24
    e158:	00035504 	andeq	r5, r3, r4, lsl #10
    e15c:	51890300 	orrpl	r0, r9, r0, lsl #6
    e160:	93050000 	movwls	r0, #20480	; 0x5000
    e164:	00000360 	andeq	r0, r0, r0, ror #6
    e168:	9805100f 	stmdals	r5, {r0, r1, r2, r3, ip}
    e16c:	00000473 	andeq	r0, r0, r3, ror r4
    e170:	0053e010 	subseq	lr, r3, r0, lsl r0
    e174:	8c9a0500 	cfldr32hi	mvfx0, [sl], {0}
    e178:	00000000 	andeq	r0, r0, r0
    e17c:	00572010 	subseq	r2, r7, r0, lsl r0
    e180:	8ca00500 	cfstr32hi	mvfx0, [r0]
    e184:	04000000 	streq	r0, [r0], #-0
    e188:	00564210 	subseq	r4, r6, r0, lsl r2
    e18c:	8ca60500 	cfstr32hi	mvfx0, [r6]
    e190:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e194:	0051a010 	subseq	sl, r1, r0, lsl r0
    e198:	8cad0500 	cfstr32hi	mvfx0, [sp]
    e19c:	0c000000 	stceq	0, cr0, [r0], {-0}
    e1a0:	52080300 	andpl	r0, r8, #0, 6
    e1a4:	b2050000 	andlt	r0, r5, #0
    e1a8:	0000043a 	andeq	r0, r0, sl, lsr r4
    e1ac:	b705240f 	strlt	r2, [r5, -pc, lsl #8]
    e1b0:	000004f3 	strdeq	r0, [r0], -r3
    e1b4:	00561a10 	subseq	r1, r6, r0, lsl sl
    e1b8:	8cb90500 	cfldr32hi	mvfx0, [r9]
    e1bc:	00000000 	andeq	r0, r0, r0
    e1c0:	0058d410 	subseq	sp, r8, r0, lsl r4
    e1c4:	8cbc0500 	cfldr32hi	mvfx0, [ip]
    e1c8:	04000000 	streq	r0, [r0], #-0
    e1cc:	00580510 	subseq	r0, r8, r0, lsl r5
    e1d0:	8cbf0500 	cfldr32hi	mvfx0, [pc]	; e1d8 <_Min_Stack_Size+0xddd8>
    e1d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e1d8:	0057fd10 	subseq	pc, r7, r0, lsl sp	; <UNPREDICTABLE>
    e1dc:	8cc20500 	cfstr64hi	mvdx0, [r2], {0}
    e1e0:	0c000000 	stceq	0, cr0, [r0], {-0}
    e1e4:	0057b010 	subseq	fp, r7, r0, lsl r0
    e1e8:	8cc50500 	cfstr64hi	mvdx0, [r5], {0}
    e1ec:	10000000 	andne	r0, r0, r0
    e1f0:	00536510 	subseq	r6, r3, r0, lsl r5
    e1f4:	8cc80500 	cfstr64hi	mvdx0, [r8], {0}
    e1f8:	14000000 	strne	r0, [r0], #-0
    e1fc:	00541b10 	subseq	r1, r4, r0, lsl fp
    e200:	8ccc0500 	cfstr64hi	mvdx0, [ip], {0}
    e204:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    e208:	0050ff10 	subseq	pc, r0, r0, lsl pc	; <UNPREDICTABLE>
    e20c:	f3d00500 	vabal.u16	q8, d0, d0
    e210:	1c000004 	stcne	0, cr0, [r0], {4}
    e214:	00529810 	subseq	r9, r2, r0, lsl r8
    e218:	f3d20500 	vabal.u16	q8, d2, d0
    e21c:	20000004 	andcs	r0, r0, r4
    e220:	73041100 	movwvc	r1, #16640	; 0x4100
    e224:	03000004 	movweq	r0, #4
    e228:	000055de 	ldrdeq	r5, [r0], -lr
    e22c:	047ed305 	ldrbteq	sp, [lr], #-773	; 0x305
    e230:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
    e234:	0555d905 	ldrbeq	sp, [r5, #-2309]	; 0x905
    e238:	d4100000 	ldrle	r0, [r0], #-0
    e23c:	05000058 	streq	r0, [r0, #-88]	; 0x58
    e240:	00008cdb 	ldrdeq	r8, [r0], -fp
    e244:	65100000 	ldrvs	r0, [r0, #-0]
    e248:	05000053 	streq	r0, [r0, #-83]	; 0x53
    e24c:	00008cde 	ldrdeq	r8, [r0], -lr
    e250:	1b100400 	blne	40f258 <_Min_Stack_Size+0x40ee58>
    e254:	05000054 	streq	r0, [r0, #-84]	; 0x54
    e258:	00008ce2 	andeq	r8, r0, r2, ror #25
    e25c:	ff100800 			; <UNDEFINED> instruction: 0xff100800
    e260:	05000050 	streq	r0, [r0, #-80]	; 0x50
    e264:	0004f3e7 	andeq	pc, r4, r7, ror #7
    e268:	98100c00 	ldmdals	r0, {sl, fp}
    e26c:	05000052 	streq	r0, [r0, #-82]	; 0x52
    e270:	0004f3e9 	andeq	pc, r4, r9, ror #7
    e274:	86101000 	ldrhi	r1, [r0], -r0
    e278:	05000058 	streq	r0, [r0, #-88]	; 0x58
    e27c:	0004f3eb 	andeq	pc, r4, fp, ror #7
    e280:	03001400 	movweq	r1, #1024	; 0x400
    e284:	000054f3 	strdeq	r5, [r0], -r3
    e288:	0504ec05 	streq	lr, [r4, #-3077]	; 0xc05
    e28c:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    e290:	05c1f205 	strbeq	pc, [r1, #517]	; 0x205	; <UNPREDICTABLE>
    e294:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
    e298:	05000057 	streq	r0, [r0, #-87]	; 0x57
    e29c:	00008cf4 	strdeq	r8, [r0], -r4
    e2a0:	3f100000 	svccc	0x00100000
    e2a4:	05000052 	streq	r0, [r0, #-82]	; 0x52
    e2a8:	00008cf8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    e2ac:	a7100400 	ldrge	r0, [r0, -r0, lsl #8]
    e2b0:	05000050 	streq	r0, [r0, #-80]	; 0x50
    e2b4:	00008cfc 	strdeq	r8, [r0], -ip
    e2b8:	2c0d0800 	stccs	8, cr0, [sp], {-0}
    e2bc:	05000054 	streq	r0, [r0, #-84]	; 0x54
    e2c0:	008c0100 	addeq	r0, ip, r0, lsl #2
    e2c4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    e2c8:	00005143 	andeq	r5, r0, r3, asr #2
    e2cc:	8c010505 	cfstr32hi	mvfx0, [r1], {5}
    e2d0:	10000000 	andne	r0, r0, r0
    e2d4:	0055090d 	subseq	r0, r5, sp, lsl #18
    e2d8:	01080500 	tsteq	r8, r0, lsl #10
    e2dc:	0000008c 	andeq	r0, r0, ip, lsl #1
    e2e0:	53aa0d14 			; <UNDEFINED> instruction: 0x53aa0d14
    e2e4:	0c050000 	stceq	0, cr0, [r5], {-0}
    e2e8:	00008c01 	andeq	r8, r0, r1, lsl #24
    e2ec:	0b001800 	bleq	142f4 <_Min_Stack_Size+0x13ef4>
    e2f0:	000057e2 	andeq	r5, r0, r2, ror #15
    e2f4:	60011005 	andvs	r1, r1, r5
    e2f8:	0c000005 	stceq	0, cr0, [r0], {5}
    e2fc:	01170510 	tsteq	r7, r0, lsl r5
    e300:	0000060b 	andeq	r0, r0, fp, lsl #12
    e304:	00586d0d 	subseq	r6, r8, sp, lsl #26
    e308:	01190500 	tsteq	r9, r0, lsl #10
    e30c:	0000008c 	andeq	r0, r0, ip, lsl #1
    e310:	567c0d00 	ldrbtpl	r0, [ip], -r0, lsl #26
    e314:	1c050000 	stcne	0, cr0, [r5], {-0}
    e318:	00008c01 	andeq	r8, r0, r1, lsl #24
    e31c:	3d0d0400 	cfstrscc	mvf0, [sp, #-0]
    e320:	05000053 	streq	r0, [r0, #-83]	; 0x53
    e324:	008c011f 	addeq	r0, ip, pc, lsl r1
    e328:	0d080000 	stceq	0, cr0, [r8, #-0]
    e32c:	000050de 	ldrdeq	r5, [r0], -lr
    e330:	8c012305 	stchi	3, cr2, [r1], {5}
    e334:	0c000000 	stceq	0, cr0, [r0], {-0}
    e338:	57510b00 	ldrbpl	r0, [r1, -r0, lsl #22]
    e33c:	25050000 	strcs	r0, [r5, #-0]
    e340:	0005cd01 	andeq	ip, r5, r1, lsl #26
    e344:	052c0c00 	streq	r0, [ip, #-3072]!	; 0xc00
    e348:	06b0012b 	ldrteq	r0, [r0], fp, lsr #2
    e34c:	1a0d0000 	bne	34e354 <_Min_Stack_Size+0x34df54>
    e350:	05000056 	streq	r0, [r0, #-86]	; 0x56
    e354:	008c012d 	addeq	r0, ip, sp, lsr #2
    e358:	0d000000 	stceq	0, cr0, [r0, #-0]
    e35c:	0000556c 	andeq	r5, r0, ip, ror #10
    e360:	8c013005 	stchi	0, cr3, [r1], {5}
    e364:	04000000 	streq	r0, [r0], #-0
    e368:	0056b50d 	subseq	fp, r6, sp, lsl #10
    e36c:	01330500 	teqeq	r3, r0, lsl #10
    e370:	0000008c 	andeq	r0, r0, ip, lsl #1
    e374:	52730d08 	rsbspl	r0, r3, #8, 26	; 0x200
    e378:	36050000 	strcc	r0, [r5], -r0
    e37c:	00008c01 	andeq	r8, r0, r1, lsl #24
    e380:	970d0c00 	strls	r0, [sp, -r0, lsl #24]
    e384:	05000054 	streq	r0, [r0, #-84]	; 0x54
    e388:	008c0139 	addeq	r0, ip, r9, lsr r1
    e38c:	0d100000 	ldceq	0, cr0, [r0, #-0]
    e390:	00005091 	muleq	r0, r1, r0
    e394:	8c013c05 	stchi	12, cr3, [r1], {5}
    e398:	14000000 	strne	r0, [r0], #-0
    e39c:	00583d0d 	subseq	r3, r8, sp, lsl #26
    e3a0:	013f0500 	teqeq	pc, r0, lsl #10
    e3a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    e3a8:	577f0d18 			; <UNDEFINED> instruction: 0x577f0d18
    e3ac:	42050000 	andmi	r0, r5, #0
    e3b0:	00008c01 	andeq	r8, r0, r1, lsl #24
    e3b4:	a20d1c00 	andge	r1, sp, #0, 24
    e3b8:	05000057 	streq	r0, [r0, #-87]	; 0x57
    e3bc:	008c0146 	addeq	r0, ip, r6, asr #2
    e3c0:	0d200000 	stceq	0, cr0, [r0, #-0]
    e3c4:	0000538b 	andeq	r5, r0, fp, lsl #7
    e3c8:	8c014a05 	stchi	10, cr4, [r1], {5}
    e3cc:	24000000 	strcs	r0, [r0], #-0
    e3d0:	00589e0d 	subseq	r9, r8, sp, lsl #28
    e3d4:	014d0500 	cmpeq	sp, r0, lsl #10
    e3d8:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    e3dc:	04110028 	ldreq	r0, [r1], #-40	; 0x28
    e3e0:	000005c1 	andeq	r0, r0, r1, asr #11
    e3e4:	00512e0b 	subseq	r2, r1, fp, lsl #28
    e3e8:	014f0500 	cmpeq	pc, r0, lsl #10
    e3ec:	00000617 	andeq	r0, r0, r7, lsl r6
    e3f0:	0051f612 	subseq	pc, r1, r2, lsl r6	; <UNPREDICTABLE>
    e3f4:	48820100 	stmmi	r2, {r8}
    e3f8:	3808005b 	stmdacc	r8, {r0, r1, r3, r4, r6}
    e3fc:	01000000 	mrseq	r0, (UNDEF: 0)
    e400:	0006e59c 	muleq	r6, ip, r5
    e404:	561a1300 	ldrpl	r1, [sl], -r0, lsl #6
    e408:	82010000 	andhi	r0, r1, #0
    e40c:	0000008c 	andeq	r0, r0, ip, lsl #1
    e410:	12005001 	andne	r5, r0, #1
    e414:	00005590 	muleq	r0, r0, r5
    e418:	5b809d01 	blpl	fe035824 <_estack+0xde005824>
    e41c:	01120800 	tsteq	r2, r0, lsl #16
    e420:	9c010000 	stcls	0, cr0, [r1], {-0}
    e424:	00000719 	andeq	r0, r0, r9, lsl r7
    e428:	00532214 	subseq	r2, r3, r4, lsl r2
    e42c:	199d0100 	ldmibne	sp, {r8}
    e430:	af000007 	svcge	0x00000007
    e434:	1500008a 	strne	r0, [r0, #-138]	; 0x8a
    e438:	00005338 	andeq	r5, r0, r8, lsr r3
    e43c:	008c9f01 	addeq	r9, ip, r1, lsl #30
    e440:	8ad00000 	bhi	ff40e448 <_estack+0xdf3de448>
    e444:	11000000 	mrsne	r0, (UNDEF: 0)
    e448:	00042f04 	andeq	r2, r4, r4, lsl #30
    e44c:	51c91600 	bicpl	r1, r9, r0, lsl #12
    e450:	01010000 	mrseq	r0, (UNDEF: 1)
    e454:	005c9401 	subseq	r9, ip, r1, lsl #8
    e458:	00005808 	andeq	r5, r0, r8, lsl #16
    e45c:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    e460:	17000007 	strne	r0, [r0, -r7]
    e464:	00005322 	andeq	r5, r0, r2, lsr #6
    e468:	19010101 	stmdbne	r1, {r0, r8}
    e46c:	01000007 	tsteq	r0, r7
    e470:	3e160050 	mrccc	0, 0, r0, cr6, cr0, {2}
    e474:	01000054 	qaddeq	r0, r4, r0
    e478:	5cec012e 	stfple	f0, [ip], #184	; 0xb8
    e47c:	00220800 	eoreq	r0, r2, r0, lsl #16
    e480:	9c010000 	stcls	0, cr0, [r1], {-0}
    e484:	00000779 	andeq	r0, r0, r9, ror r7
    e488:	00561a18 	subseq	r1, r6, r8, lsl sl
    e48c:	012e0100 	teqeq	lr, r0, lsl #2
    e490:	0000008c 	andeq	r0, r0, ip, lsl #1
    e494:	00008b0e 	andeq	r8, r0, lr, lsl #22
    e498:	00278317 	eoreq	r8, r7, r7, lsl r3
    e49c:	012e0100 	teqeq	lr, r0, lsl #2
    e4a0:	0000010c 	andeq	r0, r0, ip, lsl #2
    e4a4:	16005101 	strne	r5, [r0], -r1, lsl #2
    e4a8:	00005711 	andeq	r5, r0, r1, lsl r7
    e4ac:	10017701 	andne	r7, r1, r1, lsl #14
    e4b0:	1e08005d 	mcrne	0, 0, r0, cr8, cr13, {2}
    e4b4:	01000000 	mrseq	r0, (UNDEF: 0)
    e4b8:	0007a09c 	muleq	r7, ip, r0
    e4bc:	561a1800 	ldrpl	r1, [sl], -r0, lsl #16
    e4c0:	77010000 	strvc	r0, [r1, -r0]
    e4c4:	00008c01 	andeq	r8, r0, r1, lsl #24
    e4c8:	008b2f00 	addeq	r2, fp, r0, lsl #30
    e4cc:	70160000 	andsvc	r0, r6, r0
    e4d0:	01000054 	qaddeq	r0, r4, r0
    e4d4:	5d300196 	ldfpls	f0, [r0, #-600]!	; 0xfffffda8
    e4d8:	00780800 	rsbseq	r0, r8, r0, lsl #16
    e4dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    e4e0:	000007f7 	strdeq	r0, [r0], -r7
    e4e4:	00565418 	subseq	r5, r6, r8, lsl r4
    e4e8:	01960100 	orrseq	r0, r6, r0, lsl #2
    e4ec:	000007f7 	strdeq	r0, [r0], -r7
    e4f0:	00008b50 	andeq	r8, r0, r0, asr fp
    e4f4:	00539d19 	subseq	r9, r3, r9, lsl sp
    e4f8:	01980100 	orrseq	r0, r8, r0, lsl #2
    e4fc:	0000008c 	andeq	r0, r0, ip, lsl #1
    e500:	00008b71 	andeq	r8, r0, r1, ror fp
    e504:	0054ae19 	subseq	sl, r4, r9, lsl lr
    e508:	01980100 	orrseq	r0, r8, r0, lsl #2
    e50c:	0000008c 	andeq	r0, r0, ip, lsl #1
    e510:	00008b90 	muleq	r0, r0, fp
    e514:	00525819 	subseq	r5, r2, r9, lsl r8
    e518:	01980100 	orrseq	r0, r8, r0, lsl #2
    e51c:	0000008c 	andeq	r0, r0, ip, lsl #1
    e520:	00008baf 	andeq	r8, r0, pc, lsr #23
    e524:	f9041100 			; <UNDEFINED> instruction: 0xf9041100
    e528:	16000004 	strne	r0, [r0], -r4
    e52c:	00005408 	andeq	r5, r0, r8, lsl #8
    e530:	a801d701 	stmdage	r1, {r0, r8, r9, sl, ip, lr, pc}
    e534:	2e08005d 	mcrcs	0, 0, r0, cr8, cr13, {2}
    e538:	01000000 	mrseq	r0, (UNDEF: 0)
    e53c:	0008229c 	muleq	r8, ip, r2
    e540:	56541700 	ldrbpl	r1, [r4], -r0, lsl #14
    e544:	d7010000 	strle	r0, [r1, -r0]
    e548:	0007f701 	andeq	pc, r7, r1, lsl #14
    e54c:	00500100 	subseq	r0, r0, r0, lsl #2
    e550:	0058bd16 	subseq	fp, r8, r6, lsl sp
    e554:	01f40100 	mvnseq	r0, r0, lsl #2
    e558:	08005dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, lr}
    e55c:	00000034 	andeq	r0, r0, r4, lsr r0
    e560:	08579c01 	ldmdaeq	r7, {r0, sl, fp, ip, pc}^
    e564:	1a170000 	bne	5ce56c <_Min_Stack_Size+0x5ce16c>
    e568:	01000056 	qaddeq	r0, r6, r0
    e56c:	008c01f4 	strdeq	r0, [ip], r4
    e570:	50010000 	andpl	r0, r1, r0
    e574:	00278318 	eoreq	r8, r7, r8, lsl r3
    e578:	01f40100 	mvnseq	r0, r0, lsl #2
    e57c:	0000010c 	andeq	r0, r0, ip, lsl #2
    e580:	00008bda 	ldrdeq	r8, [r0], -sl
    e584:	57321600 	ldrpl	r1, [r2, -r0, lsl #12]!
    e588:	1c010000 	stcne	0, cr0, [r1], {-0}
    e58c:	005e0c02 	subseq	r0, lr, r2, lsl #24
    e590:	00003408 	andeq	r3, r0, r8, lsl #8
    e594:	8c9c0100 	ldfhis	f0, [ip], {0}
    e598:	17000008 	strne	r0, [r0, -r8]
    e59c:	0000561a 	andeq	r5, r0, sl, lsl r6
    e5a0:	8c021c01 	stchi	12, cr1, [r2], {1}
    e5a4:	01000000 	mrseq	r0, (UNDEF: 0)
    e5a8:	27831850 			; <UNDEFINED> instruction: 0x27831850
    e5ac:	1c010000 	stcne	0, cr0, [r1], {-0}
    e5b0:	00010c02 	andeq	r0, r1, r2, lsl #24
    e5b4:	008bfb00 	addeq	pc, fp, r0, lsl #22
    e5b8:	971a0000 	ldrls	r0, [sl, -r0]
    e5bc:	01000057 	qaddeq	r0, r7, r0
    e5c0:	008c0243 	addeq	r0, ip, r3, asr #4
    e5c4:	5e400000 	cdppl	0, 4, cr0, cr0, cr0, {0}
    e5c8:	00100800 	andseq	r0, r0, r0, lsl #16
    e5cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    e5d0:	000008c7 	andeq	r0, r0, r7, asr #17
    e5d4:	00561a18 	subseq	r1, r6, r8, lsl sl
    e5d8:	02430100 	subeq	r0, r3, #0, 2
    e5dc:	0000008c 	andeq	r0, r0, ip, lsl #1
    e5e0:	00008c1c 	andeq	r8, r0, ip, lsl ip
    e5e4:	0050a019 	subseq	sl, r0, r9, lsl r0
    e5e8:	02450100 	subeq	r0, r5, #0, 2
    e5ec:	0000008c 	andeq	r0, r0, ip, lsl #1
    e5f0:	00008c3d 	andeq	r8, r0, sp, lsr ip
    e5f4:	51df1b00 	bicspl	r1, pc, r0, lsl #22
    e5f8:	83010000 	movwhi	r0, #4096	; 0x1000
    e5fc:	005e5002 	subseq	r5, lr, r2
    e600:	00001a08 	andeq	r1, r0, r8, lsl #20
    e604:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    e608:	00005289 	andeq	r5, r0, r9, lsl #5
    e60c:	6c029401 	cfstrsvs	mvf9, [r2], {1}
    e610:	6408005e 	strvs	r0, [r8], #-94	; 0x5e
    e614:	01000000 	mrseq	r0, (UNDEF: 0)
    e618:	0009009c 	muleq	r9, ip, r0
    e61c:	57cd1800 	strbpl	r1, [sp, r0, lsl #16]
    e620:	94010000 	strls	r0, [r1], #-0
    e624:	00090002 	andeq	r0, r9, r2
    e628:	008c5c00 	addeq	r5, ip, r0, lsl #24
    e62c:	04110000 	ldreq	r0, [r1], #-0
    e630:	00000555 	andeq	r0, r0, r5, asr r5
    e634:	00560516 	subseq	r0, r6, r6, lsl r5
    e638:	02c80100 	sbceq	r0, r8, #0, 2
    e63c:	08005ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip, lr}
    e640:	0000002e 	andeq	r0, r0, lr, lsr #32
    e644:	092b9c01 	stmdbeq	fp!, {r0, sl, fp, ip, pc}
    e648:	cd170000 	ldcgt	0, cr0, [r7, #-0]
    e64c:	01000057 	qaddeq	r0, r7, r0
    e650:	090002c8 	stmdbeq	r0, {r3, r6, r7, r9}
    e654:	50010000 	andpl	r0, r1, r0
    e658:	56671600 	strbtpl	r1, [r7], -r0, lsl #12
    e65c:	e2010000 	and	r0, r1, #0
    e660:	005f0002 	subseq	r0, pc, r2
    e664:	00002808 	andeq	r2, r0, r8, lsl #16
    e668:	509c0100 	addspl	r0, ip, r0, lsl #2
    e66c:	17000009 	strne	r0, [r0, -r9]
    e670:	00002783 	andeq	r2, r0, r3, lsl #15
    e674:	0c02e201 	sfmeq	f6, 1, [r2], {1}
    e678:	01000001 	tsteq	r0, r1
    e67c:	4d160050 	ldcmi	0, cr0, [r6, #-320]	; 0xfffffec0
    e680:	01000054 	qaddeq	r0, r4, r0
    e684:	5f28032a 	svcpl	0x0028032a
    e688:	002c0800 	eoreq	r0, ip, r0, lsl #16
    e68c:	9c010000 	stcls	0, cr0, [r1], {-0}
    e690:	00000977 	andeq	r0, r0, r7, ror r9
    e694:	00561a18 	subseq	r1, r6, r8, lsl sl
    e698:	032a0100 	teqeq	sl, #0, 2
    e69c:	0000008c 	andeq	r0, r0, ip, lsl #1
    e6a0:	00008c7d 	andeq	r8, r0, sp, ror ip
    e6a4:	50831600 	addpl	r1, r3, r0, lsl #12
    e6a8:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    e6ac:	005f5403 	subseq	r5, pc, r3, lsl #8
    e6b0:	0000d408 	andeq	sp, r0, r8, lsl #8
    e6b4:	de9c0100 	fmllee	f0, f4, f0
    e6b8:	18000009 	stmdane	r0, {r0, r3}
    e6bc:	00005159 	andeq	r5, r0, r9, asr r1
    e6c0:	de033e01 	cdple	14, 0, cr3, cr3, cr1, {0}
    e6c4:	9e000009 	cdpls	0, 0, cr0, cr0, cr9, {0}
    e6c8:	1900008c 	stmdbne	r0, {r2, r3, r7}
    e6cc:	00005525 	andeq	r5, r0, r5, lsr #10
    e6d0:	8c034101 	stfhis	f4, [r3], {1}
    e6d4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    e6d8:	1900008c 	stmdbne	r0, {r2, r3, r7}
    e6dc:	0000552b 	andeq	r5, r0, fp, lsr #10
    e6e0:	8c034201 	sfmhi	f4, 4, [r3], {1}
    e6e4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    e6e8:	1900008d 	stmdbne	r0, {r0, r2, r3, r7}
    e6ec:	00005531 	andeq	r5, r0, r1, lsr r5
    e6f0:	8c034301 	stchi	3, cr4, [r3], {1}
    e6f4:	44000000 	strmi	r0, [r0], #-0
    e6f8:	1900008d 	stmdbne	r0, {r0, r2, r3, r7}
    e6fc:	00005823 	andeq	r5, r0, r3, lsr #16
    e700:	8c034401 	cfstrshi	mvf4, [r3], {1}
    e704:	6f000000 	svcvs	0x00000000
    e708:	0000008d 	andeq	r0, r0, sp, lsl #1
    e70c:	06b60411 	ssateq	r0, #23, r1, lsl #8
    e710:	29160000 	ldmdbcs	r6, {}	; <UNPREDICTABLE>
    e714:	01000058 	qaddeq	r0, r8, r0
    e718:	60280398 	mlavs	r8, r8, r3, r0
    e71c:	00360800 	eorseq	r0, r6, r0, lsl #16
    e720:	9c010000 	stcls	0, cr0, [r1], {-0}
    e724:	00000a09 	andeq	r0, r0, r9, lsl #20
    e728:	00515917 	subseq	r5, r1, r7, lsl r9
    e72c:	03980100 	orrseq	r0, r8, #0, 2
    e730:	000009de 	ldrdeq	r0, [r0], -lr
    e734:	16005001 	strne	r5, [r0], -r1
    e738:	00005260 	andeq	r5, r0, r0, ror #4
    e73c:	6003b601 	andvs	fp, r3, r1, lsl #12
    e740:	24080060 	strcs	r0, [r8], #-96	; 0x60
    e744:	01000000 	mrseq	r0, (UNDEF: 0)
    e748:	000a3e9c 	muleq	sl, ip, lr
    e74c:	55371700 	ldrpl	r1, [r7, #-1792]!	; 0x700
    e750:	b6010000 	strlt	r0, [r1], -r0
    e754:	000a3e03 	andeq	r3, sl, r3, lsl #28
    e758:	19500100 	ldmdbne	r0, {r8}^
    e75c:	00005338 	andeq	r5, r0, r8, lsr r3
    e760:	8c03b801 	stchi	8, cr11, [r3], {1}
    e764:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    e768:	0000008d 	andeq	r0, r0, sp, lsl #1
    e76c:	060b0411 			; <UNDEFINED> instruction: 0x060b0411
    e770:	b11a0000 	tstlt	sl, r0
    e774:	01000051 	qaddeq	r0, r1, r0
    e778:	008c03d0 	ldrdeq	r0, [ip], r0	; <UNPREDICTABLE>
    e77c:	60840000 	addvs	r0, r4, r0
    e780:	001c0800 	andseq	r0, ip, r0, lsl #16
    e784:	9c010000 	stcls	0, cr0, [r1], {-0}
    e788:	00000a7f 	andeq	r0, r0, pc, ror sl
    e78c:	0058c918 	subseq	ip, r8, r8, lsl r9
    e790:	03d00100 	bicseq	r0, r0, #0, 2
    e794:	0000008c 	andeq	r0, r0, ip, lsl #1
    e798:	00008dad 	andeq	r8, r0, sp, lsr #27
    e79c:	002b5e19 	eoreq	r5, fp, r9, lsl lr
    e7a0:	03d20100 	bicseq	r0, r2, #0, 2
    e7a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    e7a8:	00008de7 	andeq	r8, r0, r7, ror #27
    e7ac:	53b71600 			; <UNDEFINED> instruction: 0x53b71600
    e7b0:	ea010000 	b	4e7b8 <_Min_Stack_Size+0x4e3b8>
    e7b4:	0060a003 	rsbeq	sl, r0, r3
    e7b8:	00001208 	andeq	r1, r0, r8, lsl #4
    e7bc:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    e7c0:	1800000a 	stmdane	r0, {r1, r3}
    e7c4:	00005819 	andeq	r5, r0, r9, lsl r8
    e7c8:	8c03ea01 	stchi	10, cr14, [r3], {1}
    e7cc:	1d000000 	stcne	0, cr0, [r0, #-0]
    e7d0:	0000008e 	andeq	r0, r0, lr, lsl #1
    e7d4:	0053ee16 	subseq	lr, r3, r6, lsl lr
    e7d8:	03f80100 	mvnseq	r0, #0, 2
    e7dc:	080060b4 	stmdaeq	r0, {r2, r4, r5, r7, sp, lr}
    e7e0:	00000012 	andeq	r0, r0, r2, lsl r0
    e7e4:	0acd9c01 	beq	ff3757f0 <_estack+0xdf3457f0>
    e7e8:	d9180000 	ldmdble	r8, {}	; <UNPREDICTABLE>
    e7ec:	01000054 	qaddeq	r0, r4, r0
    e7f0:	008c03f8 	strdeq	r0, [ip], r8
    e7f4:	8e3e0000 	cdphi	0, 3, cr0, cr14, cr0, {0}
    e7f8:	16000000 	strne	r0, [r0], -r0
    e7fc:	000052b7 			; <UNDEFINED> instruction: 0x000052b7
    e800:	c8040801 	stmdagt	r4, {r0, fp}
    e804:	26080060 	strcs	r0, [r8], -r0, rrx
    e808:	01000000 	mrseq	r0, (UNDEF: 0)
    e80c:	000b029c 	muleq	fp, ip, r2
    e810:	58c91800 	stmiapl	r9, {fp, ip}^
    e814:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    e818:	00008c04 	andeq	r8, r0, r4, lsl #24
    e81c:	008e5f00 	addeq	r5, lr, r0, lsl #30
    e820:	27831700 	strcs	r1, [r3, r0, lsl #14]
    e824:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    e828:	00010c04 	andeq	r0, r1, r4, lsl #24
    e82c:	00510100 	subseq	r0, r1, r0, lsl #2
    e830:	0057c016 	subseq	ip, r7, r6, lsl r0
    e834:	043c0100 	ldrteq	r0, [ip], #-256	; 0x100
    e838:	080060f0 	stmdaeq	r0, {r4, r5, r6, r7, sp, lr}
    e83c:	000000a2 	andeq	r0, r0, r2, lsr #1
    e840:	0b479c01 	bleq	11f584c <_Min_Stack_Size+0x11f544c>
    e844:	1a170000 	bne	5ce84c <_Min_Stack_Size+0x5ce44c>
    e848:	01000056 	qaddeq	r0, r6, r0
    e84c:	008c043c 	addeq	r0, ip, ip, lsr r4
    e850:	50010000 	andpl	r0, r1, r0
    e854:	00585118 	subseq	r5, r8, r8, lsl r1
    e858:	043c0100 	ldrteq	r0, [ip], #-256	; 0x100
    e85c:	0000008c 	andeq	r0, r0, ip, lsl #1
    e860:	00008e80 	andeq	r8, r0, r0, lsl #29
    e864:	00278318 	eoreq	r8, r7, r8, lsl r3
    e868:	043c0100 	ldrteq	r0, [ip], #-256	; 0x100
    e86c:	0000010c 	andeq	r0, r0, ip, lsl #2
    e870:	00008f1e 	andeq	r8, r0, lr, lsl pc
    e874:	568e1a00 	strpl	r1, [lr], r0, lsl #20
    e878:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    e87c:	0000de04 	andeq	sp, r0, r4, lsl #28
    e880:	00619400 	rsbeq	r9, r1, r0, lsl #8
    e884:	00004208 	andeq	r4, r0, r8, lsl #4
    e888:	a09c0100 	addsge	r0, ip, r0, lsl #2
    e88c:	1800000b 	stmdane	r0, {r0, r1, r3}
    e890:	0000561a 	andeq	r5, r0, sl, lsl r6
    e894:	8c048901 	stchi	9, cr8, [r4], {1}
    e898:	bc000000 	stclt	0, cr0, [r0], {-0}
    e89c:	1700008f 	strne	r0, [r0, -pc, lsl #1]
    e8a0:	000058b4 			; <UNDEFINED> instruction: 0x000058b4
    e8a4:	8c048901 	stchi	9, cr8, [r4], {1}
    e8a8:	01000000 	mrseq	r0, (UNDEF: 0)
    e8ac:	29831951 	stmibcs	r3, {r0, r4, r6, r8, fp, ip}
    e8b0:	8b010000 	blhi	4e8b8 <_Min_Stack_Size+0x4e4b8>
    e8b4:	0000de04 	andeq	sp, r0, r4, lsl #28
    e8b8:	00900f00 	addseq	r0, r0, r0, lsl #30
    e8bc:	57911900 	ldrpl	r1, [r1, r0, lsl #18]
    e8c0:	8c010000 	stchi	0, cr0, [r1], {-0}
    e8c4:	00008c04 	andeq	r8, r0, r4, lsl #24
    e8c8:	00904200 	addseq	r4, r0, r0, lsl #4
    e8cc:	5c160000 	ldcpl	0, cr0, [r6], {-0}
    e8d0:	01000050 	qaddeq	r0, r0, r0
    e8d4:	61d804c1 	bicsvs	r0, r8, r1, asr #9
    e8d8:	00540800 	subseq	r0, r4, r0, lsl #16
    e8dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    e8e0:	00000bd5 	ldrdeq	r0, [r0], -r5
    e8e4:	00561a17 	subseq	r1, r6, r7, lsl sl
    e8e8:	04c10100 	strbeq	r0, [r1], #256	; 0x100
    e8ec:	0000008c 	andeq	r0, r0, ip, lsl #1
    e8f0:	b4185001 	ldrlt	r5, [r8], #-1
    e8f4:	01000058 	qaddeq	r0, r8, r0
    e8f8:	008c04c1 	addeq	r0, ip, r1, asr #9
    e8fc:	908f0000 	addls	r0, pc, r0
    e900:	1a000000 	bne	e908 <_Min_Stack_Size+0xe508>
    e904:	00005515 	andeq	r5, r0, r5, lsl r5
    e908:	ea04ec01 	b	149914 <_Min_Stack_Size+0x149514>
    e90c:	2c000000 	stccs	0, cr0, [r0], {-0}
    e910:	6c080062 	stcvs	0, cr0, [r8], {98}	; 0x62
    e914:	01000000 	mrseq	r0, (UNDEF: 0)
    e918:	000c609c 	muleq	ip, ip, r0
    e91c:	561a1800 	ldrpl	r1, [sl], -r0, lsl #16
    e920:	ec010000 	stc	0, cr0, [r1], {-0}
    e924:	00008c04 	andeq	r8, r0, r4, lsl #24
    e928:	0090e200 	addseq	lr, r0, r0, lsl #4
    e92c:	58511800 	ldmdapl	r1, {fp, ip}^
    e930:	ec010000 	stc	0, cr0, [r1], {-0}
    e934:	00008c04 	andeq	r8, r0, r4, lsl #24
    e938:	00910e00 	addseq	r0, r1, r0, lsl #28
    e93c:	29831900 	stmibcs	r3, {r8, fp, ip}
    e940:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    e944:	0000ea04 	andeq	lr, r0, r4, lsl #20
    e948:	00916c00 	addseq	r6, r1, r0, lsl #24
    e94c:	57911900 	ldrpl	r1, [r1, r0, lsl #18]
    e950:	ef010000 	svc	0x00010000
    e954:	00008c04 	andeq	r8, r0, r4, lsl #24
    e958:	0091a000 	addseq	sl, r1, r0
    e95c:	56751900 	ldrbtpl	r1, [r5], -r0, lsl #18
    e960:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    e964:	00008c04 	andeq	r8, r0, r4, lsl #24
    e968:	00920400 	addseq	r0, r2, r0, lsl #8
    e96c:	29841900 	stmibcs	r4, {r8, fp, ip}
    e970:	f1010000 	setend	le
    e974:	00008c04 	andeq	r8, r0, r4, lsl #24
    e978:	00924700 	addseq	r4, r2, r0, lsl #14
    e97c:	587d1900 	ldmdapl	sp!, {r8, fp, ip}^
    e980:	f2010000 	vhadd.s8	d0, d1, d0
    e984:	00008c04 	andeq	r8, r0, r4, lsl #24
    e988:	0092a000 	addseq	sl, r2, r0
    e98c:	fb160000 	blx	58e996 <_Min_Stack_Size+0x58e596>
    e990:	01000056 	qaddeq	r0, r6, r0
    e994:	62980534 	addsvs	r0, r8, #52, 10	; 0xd000000
    e998:	00540800 	subseq	r0, r4, r0, lsl #16
    e99c:	9c010000 	stcls	0, cr0, [r1], {-0}
    e9a0:	00000c95 	muleq	r0, r5, ip
    e9a4:	00561a17 	subseq	r1, r6, r7, lsl sl
    e9a8:	05340100 	ldreq	r0, [r4, #-256]!	; 0x100
    e9ac:	0000008c 	andeq	r0, r0, ip, lsl #1
    e9b0:	51185001 	tstpl	r8, r1
    e9b4:	01000058 	qaddeq	r0, r8, r0
    e9b8:	008c0534 	addeq	r0, ip, r4, lsr r5
    e9bc:	92f90000 	rscsls	r0, r9, #0
    e9c0:	1c000000 	stcne	0, cr0, [r0], {-0}
    e9c4:	0000039d 	muleq	r0, sp, r3
    e9c8:	c306a706 	movwgt	sl, #26374	; 0x6706
    e9cc:	00000000 	andeq	r0, r0, r0
    e9d0:	000002c9 	andeq	r0, r0, r9, asr #5
    e9d4:	2c3a0004 	ldccs	0, cr0, [sl], #-16
    e9d8:	01040000 	mrseq	r0, (UNDEF: 4)
    e9dc:	00000284 	andeq	r0, r0, r4, lsl #5
    e9e0:	00596101 	subseq	r6, r9, r1, lsl #2
    e9e4:	00010100 	andeq	r0, r1, r0, lsl #2
    e9e8:	0016c800 	andseq	ip, r6, r0, lsl #16
    e9ec:	00000000 	andeq	r0, r0, r0
    e9f0:	00566700 	subseq	r6, r6, r0, lsl #14
    e9f4:	06010200 	streq	r0, [r1], -r0, lsl #4
    e9f8:	00000150 	andeq	r0, r0, r0, asr r1
    e9fc:	0000f203 	andeq	pc, r0, r3, lsl #4
    ea00:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
    ea04:	02000000 	andeq	r0, r0, #0
    ea08:	014e0801 	cmpeq	lr, r1, lsl #16
    ea0c:	02020000 	andeq	r0, r2, #0
    ea10:	0000df05 	andeq	sp, r0, r5, lsl #30
    ea14:	07020200 	streq	r0, [r2, -r0, lsl #4]
    ea18:	000001e5 	andeq	r0, r0, r5, ror #3
    ea1c:	00037703 	andeq	r7, r3, r3, lsl #14
    ea20:	57370200 	ldrpl	r0, [r7, -r0, lsl #4]!
    ea24:	02000000 	andeq	r0, r0, #0
    ea28:	00c50504 	sbceq	r0, r5, r4, lsl #10
    ea2c:	51030000 	mrspl	r0, (UNDEF: 3)
    ea30:	02000000 	andeq	r0, r0, #0
    ea34:	00006938 	andeq	r6, r0, r8, lsr r9
    ea38:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ea3c:	00000178 	andeq	r0, r0, r8, ror r1
    ea40:	c0050802 	andgt	r0, r5, r2, lsl #16
    ea44:	02000000 	andeq	r0, r0, #0
    ea48:	01730708 	cmneq	r3, r8, lsl #14
    ea4c:	04040000 	streq	r0, [r4], #-0
    ea50:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    ea54:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ea58:	0000017d 	andeq	r0, r0, sp, ror r1
    ea5c:	0000f403 	andeq	pc, r0, r3, lsl #8
    ea60:	2c2a0300 	stccs	3, cr0, [sl], #-0
    ea64:	03000000 	movweq	r0, #0
    ea68:	00000379 	andeq	r0, r0, r9, ror r3
    ea6c:	004c4103 	subeq	r4, ip, r3, lsl #2
    ea70:	53030000 	movwpl	r0, #12288	; 0x3000
    ea74:	03000000 	movweq	r0, #0
    ea78:	00005e42 	andeq	r5, r0, r2, asr #28
    ea7c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ea80:	0000002c 	andeq	r0, r0, ip, lsr #32
    ea84:	0000a205 	andeq	sl, r0, r5, lsl #4
    ea88:	00970500 	addseq	r0, r7, r0, lsl #10
    ea8c:	01060000 	mrseq	r0, (UNDEF: 6)
    ea90:	d401f704 	strle	pc, [r1], #-1796	; 0x704
    ea94:	07000000 	streq	r0, [r0, -r0]
    ea98:	000028e4 	andeq	r2, r0, r4, ror #17
    ea9c:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    eaa0:	00010054 	andeq	r0, r1, r4, asr r0
    eaa4:	003d2909 	eorseq	r2, sp, r9, lsl #18
    eaa8:	01f70400 	mvnseq	r0, r0, lsl #8
    eaac:	000000be 	strheq	r0, [r0], -lr
    eab0:	003ca009 	eorseq	sl, ip, r9
    eab4:	01f70400 	mvnseq	r0, r0, lsl #8
    eab8:	000000be 	strheq	r0, [r0], -lr
    eabc:	f9040106 			; <UNDEFINED> instruction: 0xf9040106
    eac0:	00010201 	andeq	r0, r1, r1, lsl #4
    eac4:	04880700 	streq	r0, [r8], #1792	; 0x700
    eac8:	07000000 	streq	r0, [r0, -r0]
    eacc:	000005c0 	andeq	r0, r0, r0, asr #11
    ead0:	2a090001 	bcs	24eadc <_Min_Stack_Size+0x24e6dc>
    ead4:	04000009 	streq	r0, [r0], #-9
    ead8:	00ec01f9 	strdeq	r0, [ip], #25	; <UNPREDICTABLE>
    eadc:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    eae0:	3c058c04 	stccc	12, cr8, [r5], {4}
    eae4:	0b000001 	bleq	eaf0 <_Min_Stack_Size+0xe6f0>
    eae8:	04005243 	streq	r5, [r0], #-579	; 0x243
    eaec:	00b4058e 	adcseq	r0, r4, lr, lsl #11
    eaf0:	0b000000 	bleq	eaf8 <_Min_Stack_Size+0xe6f8>
    eaf4:	04005253 	streq	r5, [r0], #-595	; 0x253
    eaf8:	00b4058f 	adcseq	r0, r4, pc, lsl #11
    eafc:	0b040000 	bleq	10eb04 <_Min_Stack_Size+0x10e704>
    eb00:	04005244 	streq	r5, [r0], #-580	; 0x244
    eb04:	00b40590 	umlalseq	r0, r4, r0, r5
    eb08:	00080000 	andeq	r0, r8, r0
    eb0c:	00594c09 	subseq	r4, r9, r9, lsl #24
    eb10:	05910400 	ldreq	r0, [r1, #1024]	; 0x400
    eb14:	0000010e 	andeq	r0, r0, lr, lsl #2
    eb18:	0059410c 	subseq	r4, r9, ip, lsl #2
    eb1c:	ec630100 	stfe	f0, [r3], #-0
    eb20:	16080062 	strne	r0, [r8], -r2, rrx
    eb24:	01000000 	mrseq	r0, (UNDEF: 0)
    eb28:	00018c9c 	muleq	r1, ip, ip
    eb2c:	62f60d00 	rscsvs	r0, r6, #0, 26
    eb30:	02b90800 	adcseq	r0, r9, #0, 16
    eb34:	01760000 	cmneq	r6, r0
    eb38:	010e0000 	mrseq	r0, (UNDEF: 14)
    eb3c:	0e310151 	mrceq	1, 1, r0, cr1, cr1, {2}
    eb40:	08025001 	stmdaeq	r2, {r0, ip, lr}
    eb44:	020f0040 	andeq	r0, pc, #64	; 0x40
    eb48:	b9080063 	stmdblt	r8, {r0, r1, r5, r6}
    eb4c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    eb50:	30015101 	andcc	r5, r1, r1, lsl #2
    eb54:	0250010e 	subseq	r0, r0, #-2147483645	; 0x80000003
    eb58:	00004008 	andeq	r4, r0, r8
    eb5c:	00591e0c 	subseq	r1, r9, ip, lsl #28
    eb60:	04720100 	ldrbteq	r0, [r2], #-256	; 0x100
    eb64:	1c080063 	stcne	0, cr0, [r8], {99}	; 0x63
    eb68:	01000000 	mrseq	r0, (UNDEF: 0)
    eb6c:	0001af9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    eb70:	27831000 	strcs	r1, [r3, r0]
    eb74:	72010000 	andvc	r0, r1, #0
    eb78:	00000102 	andeq	r0, r0, r2, lsl #2
    eb7c:	11005001 	tstne	r0, r1
    eb80:	0000592d 	andeq	r5, r0, sp, lsr #18
    eb84:	00a2b001 	adceq	fp, r2, r1
    eb88:	63200000 	teqvs	r0, #0
    eb8c:	000c0800 	andeq	r0, ip, r0, lsl #16
    eb90:	9c010000 	stcls	0, cr0, [r1], {-0}
    eb94:	00591112 	subseq	r1, r9, r2, lsl r1
    eb98:	010b0100 	mrseq	r0, (UNDEF: 27)
    eb9c:	0800632c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp, lr}
    eba0:	0000001c 	andeq	r0, r0, ip, lsl r0
    eba4:	01e99c01 	mvneq	r9, r1, lsl #24
    eba8:	83130000 	tsthi	r3, #0
    ebac:	01000027 	tsteq	r0, r7, lsr #32
    ebb0:	0102010b 	tsteq	r2, fp, lsl #2
    ebb4:	50010000 	andpl	r0, r1, r0
    ebb8:	59e11400 	stmibpl	r1!, {sl, ip}^
    ebbc:	25010000 	strcs	r0, [r1, #-0]
    ebc0:	0000d401 	andeq	sp, r0, r1, lsl #8
    ebc4:	00634800 	rsbeq	r4, r3, r0, lsl #16
    ebc8:	00001408 	andeq	r1, r0, r8, lsl #8
    ebcc:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    ebd0:	15000002 	strne	r0, [r0, #-2]
    ebd4:	00005958 	andeq	r5, r0, r8, asr r9
    ebd8:	8c012501 	cfstr32hi	mvfx2, [r1], {1}
    ebdc:	4c000000 	stcmi	0, cr0, [r0], {-0}
    ebe0:	16000093 			; <UNDEFINED> instruction: 0x16000093
    ebe4:	00002983 	andeq	r2, r0, r3, lsl #19
    ebe8:	d4012701 	strle	r2, [r1], #-1793	; 0x701
    ebec:	6d000000 	stcvs	0, cr0, [r0, #-0]
    ebf0:	00000093 	muleq	r0, r3, r0
    ebf4:	0059ad12 	subseq	sl, r9, r2, lsl sp
    ebf8:	01460100 	mrseq	r0, (UNDEF: 86)
    ebfc:	0800635c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, lr}
    ec00:	00000010 	andeq	r0, r0, r0, lsl r0
    ec04:	024b9c01 	subeq	r9, fp, #256	; 0x100
    ec08:	58150000 	ldmdapl	r5, {}	; <UNPREDICTABLE>
    ec0c:	01000059 	qaddeq	r0, r9, r0
    ec10:	008c0146 	addeq	r0, ip, r6, asr #2
    ec14:	93ac0000 			; <UNDEFINED> instruction: 0x93ac0000
    ec18:	14000000 	strne	r0, [r0], #-0
    ec1c:	000059bb 			; <UNDEFINED> instruction: 0x000059bb
    ec20:	e0015601 	and	r5, r1, r1, lsl #12
    ec24:	6c000000 	stcvs	0, cr0, [r0], {-0}
    ec28:	14080063 	strne	r0, [r8], #-99	; 0x63
    ec2c:	01000000 	mrseq	r0, (UNDEF: 0)
    ec30:	0002869c 	muleq	r2, ip, r6
    ec34:	59261500 	stmdbpl	r6!, {r8, sl, ip}
    ec38:	56010000 	strpl	r0, [r1], -r0
    ec3c:	00008c01 	andeq	r8, r0, r1, lsl #24
    ec40:	0093cd00 	addseq	ip, r3, r0, lsl #26
    ec44:	29831600 	stmibcs	r3, {r9, sl, ip}
    ec48:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    ec4c:	0000e001 	andeq	lr, r0, r1
    ec50:	0093ee00 	addseq	lr, r3, r0, lsl #28
    ec54:	cb120000 	blgt	48ec5c <_Min_Stack_Size+0x48e85c>
    ec58:	01000059 	qaddeq	r0, r9, r0
    ec5c:	63800174 	orrvs	r0, r0, #116, 2
    ec60:	00100800 	andseq	r0, r0, r0, lsl #16
    ec64:	9c010000 	stcls	0, cr0, [r1], {-0}
    ec68:	000002ad 	andeq	r0, r0, sp, lsr #5
    ec6c:	00592615 	subseq	r2, r9, r5, lsl r6
    ec70:	01740100 	cmneq	r4, r0, lsl #2
    ec74:	0000008c 	andeq	r0, r0, ip, lsl #1
    ec78:	0000942d 	andeq	r9, r0, sp, lsr #8
    ec7c:	039d1700 	orrseq	r1, sp, #0, 14
    ec80:	a7050000 	strge	r0, [r5, -r0]
    ec84:	0000b906 	andeq	fp, r0, r6, lsl #18
    ec88:	2e861800 	cdpcs	8, 8, cr1, cr6, cr0, {0}
    ec8c:	47060000 	strmi	r0, [r6, -r0]
    ec90:	00a21902 	adceq	r1, r2, r2, lsl #18
    ec94:	02190000 	andseq	r0, r9, #0
    ec98:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	130e2501 	movwne	r2, #58625	; 0xe501
      18:	1b0e030b 	blne	380c4c <_Min_Stack_Size+0x38084c>
      1c:	1117550e 	tstne	r7, lr, lsl #10
      20:	00171001 	andseq	r1, r7, r1
      24:	00240200 	eoreq	r0, r4, r0, lsl #4
      28:	0b3e0b0b 	bleq	f82c5c <_Min_Stack_Size+0xf8285c>
      2c:	00000e03 	andeq	r0, r0, r3, lsl #28
      30:	03001603 	movweq	r1, #1539	; 0x603
      34:	3b0b3a0e 	blcc	2ce874 <_Min_Stack_Size+0x2ce474>
      38:	0013490b 	andseq	r4, r3, fp, lsl #18
      3c:	00240400 	eoreq	r0, r4, r0, lsl #8
      40:	0b3e0b0b 	bleq	f82c74 <_Min_Stack_Size+0xf82874>
      44:	00000803 	andeq	r0, r0, r3, lsl #16
      48:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
      4c:	06000013 			; <UNDEFINED> instruction: 0x06000013
      50:	0b0b0113 	bleq	2c04a4 <_Min_Stack_Size+0x2c00a4>
      54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      58:	00001301 	andeq	r1, r0, r1, lsl #6
      5c:	03000d07 	movweq	r0, #3335	; 0xd07
      60:	3b0b3a0e 	blcc	2ce8a0 <_Min_Stack_Size+0x2ce4a0>
      64:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
      68:	0800000b 	stmdaeq	r0, {r0, r1, r3}
      6c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      74:	0b381349 	bleq	e04da0 <_Min_Stack_Size+0xe049a0>
      78:	26090000 	strcs	r0, [r9], -r0
      7c:	00134900 	andseq	r4, r3, r0, lsl #18
      80:	01010a00 	tsteq	r1, r0, lsl #20
      84:	13011349 	movwne	r1, #4937	; 0x1349
      88:	210b0000 	mrscs	r0, (UNDEF: 11)
      8c:	2f134900 	svccs	0x00134900
      90:	0c00000b 	stceq	0, cr0, [r0], {11}
      94:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      9c:	00001349 	andeq	r1, r0, r9, asr #6
      a0:	0b01040d 	bleq	410dc <_Min_Stack_Size+0x40cdc>
      a4:	3b0b3a0b 	blcc	2ce8d8 <_Min_Stack_Size+0x2ce4d8>
      a8:	00130105 	andseq	r0, r3, r5, lsl #2
      ac:	00280e00 	eoreq	r0, r8, r0, lsl #28
      b0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
      b4:	280f0000 	stmdacs	pc, {}	; <UNPREDICTABLE>
      b8:	1c080300 	stcne	3, cr0, [r8], {-0}
      bc:	1000000d 	andne	r0, r0, sp
      c0:	0e03012e 	adfeqsp	f0, f3, #0.5
      c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      c8:	0b201927 	bleq	80656c <_Min_Stack_Size+0x80616c>
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
      d0:	03003411 	movweq	r3, #1041	; 0x411
      d4:	3b0b3a0e 	blcc	2ce914 <_Min_Stack_Size+0x2ce514>
      d8:	00134905 	andseq	r4, r3, r5, lsl #18
      dc:	012e1200 	teqeq	lr, r0, lsl #4
      e0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      e4:	0b3b0b3a 	bleq	ec2dd4 <_Min_Stack_Size+0xec29d4>
      e8:	01111927 	tsteq	r1, r7, lsr #18
      ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
      f4:	13000013 	movwne	r0, #19
      f8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
      fc:	17550152 			; <UNDEFINED> instruction: 0x17550152
     100:	0b590b58 	bleq	1642e68 <_Min_Stack_Size+0x1642a68>
     104:	0b140000 	bleq	50010c <_Min_Stack_Size+0x4ffd0c>
     108:	00175501 	andseq	r5, r7, r1, lsl #10
     10c:	00341500 	eorseq	r1, r4, r0, lsl #10
     110:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     114:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     118:	03193f01 	tsteq	r9, #1, 30
     11c:	3b0b3a0e 	blcc	2ce95c <_Min_Stack_Size+0x2ce55c>
     120:	11192705 	tstne	r9, r5, lsl #14
     124:	40061201 	andmi	r1, r6, r1, lsl #4
     128:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     12c:	00001301 	andeq	r1, r0, r1, lsl #6
     130:	03003417 	movweq	r3, #1047	; 0x417
     134:	3b0b3a08 	blcc	2ce95c <_Min_Stack_Size+0x2ce55c>
     138:	02134905 	andseq	r4, r3, #81920	; 0x14000
     13c:	18000017 	stmdane	r0, {r0, r1, r2, r4}
     140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     144:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     148:	17021349 	strne	r1, [r2, -r9, asr #6]
     14c:	34190000 	ldrcc	r0, [r9], #-0
     150:	3a0e0300 	bcc	380d58 <_Min_Stack_Size+0x380958>
     154:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     158:	3c193f13 	ldccc	15, cr3, [r9], {19}
     15c:	1a000019 	bne	1c8 <_Min_Heap_Size+0x1c8>
     160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     164:	0b3b0b3a 	bleq	ec2e54 <_Min_Stack_Size+0xec2a54>
     168:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     16c:	00001802 	andeq	r1, r0, r2, lsl #16
     170:	01110100 	tsteq	r1, r0, lsl #2
     174:	0b130e25 	bleq	4c3a10 <_Min_Stack_Size+0x4c3610>
     178:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     17c:	01111755 	tsteq	r1, r5, asr r7
     180:	00001710 	andeq	r1, r0, r0, lsl r7
     184:	03010402 	movweq	r0, #5122	; 0x1402
     188:	3a0b0b0e 	bcc	2c2dc8 <_Min_Stack_Size+0x2c29c8>
     18c:	010b3b0b 	tsteq	fp, fp, lsl #22
     190:	03000013 	movweq	r0, #19
     194:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     198:	00000d1c 	andeq	r0, r0, ip, lsl sp
     19c:	0b002404 	bleq	91b4 <_Min_Stack_Size+0x8db4>
     1a0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     1a4:	0500000e 	streq	r0, [r0, #-14]
     1a8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     1ac:	0b3b0b3a 	bleq	ec2e9c <_Min_Stack_Size+0xec2a9c>
     1b0:	00001349 	andeq	r1, r0, r9, asr #6
     1b4:	0b002406 	bleq	91d4 <_Min_Stack_Size+0x8dd4>
     1b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     1bc:	07000008 	streq	r0, [r0, -r8]
     1c0:	13490035 	movtne	r0, #36917	; 0x9035
     1c4:	01080000 	mrseq	r0, (UNDEF: 8)
     1c8:	01134901 	tsteq	r3, r1, lsl #18
     1cc:	09000013 	stmdbeq	r0, {r0, r1, r4}
     1d0:	13490021 	movtne	r0, #36897	; 0x9021
     1d4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     1d8:	0b01040a 	bleq	41208 <_Min_Stack_Size+0x40e08>
     1dc:	3b0b3a0b 	blcc	2cea10 <_Min_Stack_Size+0x2ce610>
     1e0:	00130105 	andseq	r0, r3, r5, lsl #2
     1e4:	00280b00 	eoreq	r0, r8, r0, lsl #22
     1e8:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     1ec:	160c0000 	strne	r0, [ip], -r0
     1f0:	3a0e0300 	bcc	380df8 <_Min_Stack_Size+0x3809f8>
     1f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     1f8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     1fc:	0b0b0113 	bleq	2c0650 <_Min_Stack_Size+0x2c0250>
     200:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     204:	00001301 	andeq	r1, r0, r1, lsl #6
     208:	03000d0e 	movweq	r0, #3342	; 0xd0e
     20c:	3b0b3a0e 	blcc	2cea4c <_Min_Stack_Size+0x2ce64c>
     210:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     214:	0f00000b 	svceq	0x0000000b
     218:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     21c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     220:	0b381349 	bleq	e04f4c <_Min_Stack_Size+0xe04b4c>
     224:	04100000 	ldreq	r0, [r0], #-0
     228:	3a0b0b01 	bcc	2c2e34 <_Min_Stack_Size+0x2c2a34>
     22c:	010b3b0b 	tsteq	fp, fp, lsl #22
     230:	11000013 	tstne	r0, r3, lsl r0
     234:	0b0b0113 	bleq	2c0688 <_Min_Stack_Size+0x2c0288>
     238:	0b3b0b3a 	bleq	ec2f28 <_Min_Stack_Size+0xec2b28>
     23c:	00001301 	andeq	r1, r0, r1, lsl #6
     240:	03000d12 	movweq	r0, #3346	; 0xd12
     244:	3b0b3a0e 	blcc	2cea84 <_Min_Stack_Size+0x2ce684>
     248:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     24c:	1300000b 	movwne	r0, #11
     250:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     254:	0b3a0e03 	bleq	e83a68 <_Min_Stack_Size+0xe83668>
     258:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     25c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     260:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     264:	00130119 	andseq	r0, r3, r9, lsl r1
     268:	82891400 	addhi	r1, r9, #0, 8
     26c:	01110101 	tsteq	r1, r1, lsl #2
     270:	13011331 	movwne	r1, #4913	; 0x1331
     274:	8a150000 	bhi	54027c <_Min_Stack_Size+0x53fe7c>
     278:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     27c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     280:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     284:	11010182 	smlabbne	r1, r2, r1, r0
     288:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     28c:	00001331 	andeq	r1, r0, r1, lsr r3
     290:	03003417 	movweq	r3, #1047	; 0x417
     294:	3b0b3a0e 	blcc	2cead4 <_Min_Stack_Size+0x2ce6d4>
     298:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     29c:	18000018 	stmdane	r0, {r3, r4}
     2a0:	01018289 	smlabbeq	r1, r9, r2, r8
     2a4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     2a8:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     2ac:	03193f01 	tsteq	r9, #1, 30
     2b0:	3b0b3a0e 	blcc	2ceaf0 <_Min_Stack_Size+0x2ce6f0>
     2b4:	1113490b 	tstne	r3, fp, lsl #18
     2b8:	40061201 	andmi	r1, r6, r1, lsl #4
     2bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     2c0:	00001301 	andeq	r1, r0, r1, lsl #6
     2c4:	0182891a 	orreq	r8, r2, sl, lsl r9
     2c8:	31011100 	mrscc	r1, (UNDEF: 17)
     2cc:	1b000013 	blne	320 <_Min_Heap_Size+0x320>
     2d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2d8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     2dc:	0000193c 	andeq	r1, r0, ip, lsr r9
     2e0:	0300341c 	movweq	r3, #1052	; 0x41c
     2e4:	3b0b3a0e 	blcc	2ceb24 <_Min_Stack_Size+0x2ce724>
     2e8:	3f13490b 	svccc	0x0013490b
     2ec:	00180219 	andseq	r0, r8, r9, lsl r2
     2f0:	012e1d00 	teqeq	lr, r0, lsl #26
     2f4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2fc:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     300:	00001301 	andeq	r1, r0, r1, lsl #6
     304:	4900051e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sl}
     308:	1f000013 	svcne	0x00000013
     30c:	0b0b000f 	bleq	2c0350 <_Min_Stack_Size+0x2bff50>
     310:	00001349 	andeq	r1, r0, r9, asr #6
     314:	3f012e20 	svccc	0x00012e20
     318:	3a0e0319 	bcc	380f84 <_Min_Stack_Size+0x380b84>
     31c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     320:	01193c19 	tsteq	r9, r9, lsl ip
     324:	21000013 	tstcs	r0, r3, lsl r0
     328:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     32c:	0b3a0e03 	bleq	e83b40 <_Min_Stack_Size+0xe83740>
     330:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     334:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     338:	00001301 	andeq	r1, r0, r1, lsl #6
     33c:	3f012e22 	svccc	0x00012e22
     340:	3a0e0319 	bcc	380fac <_Min_Stack_Size+0x380bac>
     344:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     348:	00193c19 	andseq	r3, r9, r9, lsl ip
     34c:	11010000 	mrsne	r0, (UNDEF: 1)
     350:	130e2501 	movwne	r2, #58625	; 0xe501
     354:	1b0e030b 	blne	380f88 <_Min_Stack_Size+0x380b88>
     358:	1117550e 	tstne	r7, lr, lsl #10
     35c:	00171001 	andseq	r1, r7, r1
     360:	00240200 	eoreq	r0, r4, r0, lsl #4
     364:	0b3e0b0b 	bleq	f82f98 <_Min_Stack_Size+0xf82b98>
     368:	00000803 	andeq	r0, r0, r3, lsl #16
     36c:	03001603 	movweq	r1, #1539	; 0x603
     370:	3b0b3a0e 	blcc	2cebb0 <_Min_Stack_Size+0x2ce7b0>
     374:	0013490b 	andseq	r4, r3, fp, lsl #18
     378:	00240400 	eoreq	r0, r4, r0, lsl #8
     37c:	0b3e0b0b 	bleq	f82fb0 <_Min_Stack_Size+0xf82bb0>
     380:	00000e03 	andeq	r0, r0, r3, lsl #28
     384:	0b000f05 	bleq	3fa0 <_Min_Stack_Size+0x3ba0>
     388:	0600000b 	streq	r0, [r0], -fp
     38c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     390:	0b3a0b0b 	bleq	e82fc4 <_Min_Stack_Size+0xe82bc4>
     394:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     398:	0d070000 	stceq	0, cr0, [r7, #-0]
     39c:	3a0e0300 	bcc	380fa4 <_Min_Stack_Size+0x380ba4>
     3a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3a4:	000b3813 	andeq	r3, fp, r3, lsl r8
     3a8:	000f0800 	andeq	r0, pc, r0, lsl #16
     3ac:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     3b0:	15090000 	strne	r0, [r9, #-0]
     3b4:	01192701 	tsteq	r9, r1, lsl #14
     3b8:	0a000013 	beq	40c <_Min_Stack_Size+0xc>
     3bc:	13490005 	movtne	r0, #36869	; 0x9005
     3c0:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     3c4:	3a0e0301 	bcc	380fd0 <_Min_Stack_Size+0x380bd0>
     3c8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     3cc:	010b2019 	tsteq	fp, r9, lsl r0
     3d0:	0c000013 	stceq	0, cr0, [r0], {19}
     3d4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     3d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     3dc:	00001349 	andeq	r1, r0, r9, asr #6
     3e0:	3f012e0d 	svccc	0x00012e0d
     3e4:	3a0e0319 	bcc	381050 <_Min_Stack_Size+0x380c50>
     3e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3ec:	11134919 	tstne	r3, r9, lsl r9
     3f0:	40061201 	andmi	r1, r6, r1, lsl #4
     3f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     3f8:	00001301 	andeq	r1, r0, r1, lsl #6
     3fc:	0300050e 	movweq	r0, #1294	; 0x50e
     400:	3b0b3a0e 	blcc	2cec40 <_Min_Stack_Size+0x2ce840>
     404:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     408:	0f000017 	svceq	0x00000017
     40c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     410:	0b3b0b3a 	bleq	ec3100 <_Min_Stack_Size+0xec2d00>
     414:	17021349 	strne	r1, [r2, -r9, asr #6]
     418:	1d100000 	ldcne	0, cr0, [r0, #-0]
     41c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     420:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     424:	010b590b 	tsteq	fp, fp, lsl #18
     428:	11000013 	tstne	r0, r3, lsl r0
     42c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     430:	34120000 	ldrcc	r0, [r2], #-0
     434:	02133100 	andseq	r3, r3, #0, 2
     438:	13000017 	movwne	r0, #23
     43c:	01018289 	smlabbeq	r1, r9, r2, r8
     440:	13310111 	teqne	r1, #1073741828	; 0x40000004
     444:	00001301 	andeq	r1, r0, r1, lsl #6
     448:	01828a14 	orreq	r8, r2, r4, lsl sl
     44c:	91180200 	tstls	r8, r0, lsl #4
     450:	00001842 	andeq	r1, r0, r2, asr #16
     454:	01828915 	orreq	r8, r2, r5, lsl r9
     458:	31011101 	tstcc	r1, r1, lsl #2
     45c:	16000013 			; <UNDEFINED> instruction: 0x16000013
     460:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     464:	0b3a0e03 	bleq	e83c78 <_Min_Stack_Size+0xe83878>
     468:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     46c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     470:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     474:	00130119 	andseq	r0, r3, r9, lsl r1
     478:	82891700 	addhi	r1, r9, #0, 14
     47c:	01110001 	tsteq	r1, r1
     480:	00001331 	andeq	r1, r0, r1, lsr r3
     484:	01828918 	orreq	r8, r2, r8, lsl r9
     488:	95011101 	strls	r1, [r1, #-257]	; 0x101
     48c:	13311942 	teqne	r1, #1081344	; 0x108000
     490:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     494:	3a0e0301 	bcc	3810a0 <_Min_Stack_Size+0x380ca0>
     498:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     49c:	010b2019 	tsteq	fp, r9, lsl r0
     4a0:	1a000013 	bne	4f4 <_Min_Stack_Size+0xf4>
     4a4:	0000010b 	andeq	r0, r0, fp, lsl #2
     4a8:	0300341b 	movweq	r3, #1051	; 0x41b
     4ac:	3b0b3a0e 	blcc	2cecec <_Min_Stack_Size+0x2ce8ec>
     4b0:	0013490b 	andseq	r4, r3, fp, lsl #18
     4b4:	012e1c00 	teqeq	lr, r0, lsl #24
     4b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     4bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     4c0:	01111927 	tsteq	r1, r7, lsr #18
     4c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     4c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
     4cc:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     4d0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     4d4:	17550152 			; <UNDEFINED> instruction: 0x17550152
     4d8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
     4dc:	00001301 	andeq	r1, r0, r1, lsl #6
     4e0:	11010b1e 	tstne	r1, lr, lsl fp
     4e4:	00061201 	andeq	r1, r6, r1, lsl #4
     4e8:	010b1f00 	tsteq	fp, r0, lsl #30
     4ec:	13011755 	movwne	r1, #5973	; 0x1755
     4f0:	34200000 	strtcc	r0, [r0], #-0
     4f4:	3a0e0300 	bcc	3810fc <_Min_Stack_Size+0x380cfc>
     4f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4fc:	00170213 	andseq	r0, r7, r3, lsl r2
     500:	00262100 	eoreq	r2, r6, r0, lsl #2
     504:	00001349 	andeq	r1, r0, r9, asr #6
     508:	3f012e22 	svccc	0x00012e22
     50c:	3a0e0319 	bcc	381178 <_Min_Stack_Size+0x380d78>
     510:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     514:	11134919 	tstne	r3, r9, lsl r9
     518:	40061201 	andmi	r1, r6, r1, lsl #4
     51c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     520:	00001301 	andeq	r1, r0, r1, lsl #6
     524:	03000523 	movweq	r0, #1315	; 0x523
     528:	3b0b3a0e 	blcc	2ced68 <_Min_Stack_Size+0x2ce968>
     52c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     530:	24000017 	strcs	r0, [r0], #-23
     534:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     538:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     53c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     540:	01250000 	teqeq	r5, r0
     544:	01134901 	tsteq	r3, r1, lsl #18
     548:	26000013 			; <UNDEFINED> instruction: 0x26000013
     54c:	13490021 	movtne	r0, #36897	; 0x9021
     550:	00000b2f 	andeq	r0, r0, pc, lsr #22
     554:	03003427 	movweq	r3, #1063	; 0x427
     558:	3b0b3a0e 	blcc	2ced98 <_Min_Stack_Size+0x2ce998>
     55c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     560:	28000018 	stmdacs	r0, {r3, r4}
     564:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     568:	0b3b0b3a 	bleq	ec3258 <_Min_Stack_Size+0xec2e58>
     56c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     570:	00001802 	andeq	r1, r0, r2, lsl #16
     574:	3f012e29 	svccc	0x00012e29
     578:	3a0e0319 	bcc	3811e4 <_Min_Stack_Size+0x380de4>
     57c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     580:	01193c19 	tsteq	r9, r9, lsl ip
     584:	2a000013 	bcs	5d8 <_Min_Stack_Size+0x1d8>
     588:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     58c:	0b3a0e03 	bleq	e83da0 <_Min_Stack_Size+0xe839a0>
     590:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     594:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     598:	00001301 	andeq	r1, r0, r1, lsl #6
     59c:	3f002e2b 	svccc	0x00002e2b
     5a0:	3a0e0319 	bcc	38120c <_Min_Stack_Size+0x380e0c>
     5a4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     5a8:	3c134919 	ldccc	9, cr4, [r3], {25}
     5ac:	2c000019 	stccs	0, cr0, [r0], {25}
     5b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     5b4:	0b3a0e03 	bleq	e83dc8 <_Min_Stack_Size+0xe839c8>
     5b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     5bc:	1301193c 	movwne	r1, #6460	; 0x193c
     5c0:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
     5c4:	03193f00 	tsteq	r9, #0, 30
     5c8:	3b0b3a0e 	blcc	2cee08 <_Min_Stack_Size+0x2cea08>
     5cc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     5d0:	00193c13 	andseq	r3, r9, r3, lsl ip
     5d4:	11010000 	mrsne	r0, (UNDEF: 1)
     5d8:	130e2501 	movwne	r2, #58625	; 0xe501
     5dc:	1b0e030b 	blne	381210 <_Min_Stack_Size+0x380e10>
     5e0:	1117550e 	tstne	r7, lr, lsl #10
     5e4:	00171001 	andseq	r1, r7, r1
     5e8:	00160200 	andseq	r0, r6, r0, lsl #4
     5ec:	0b3a0e03 	bleq	e83e00 <_Min_Stack_Size+0xe83a00>
     5f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5f4:	24030000 	strcs	r0, [r3], #-0
     5f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     5fc:	000e030b 	andeq	r0, lr, fp, lsl #6
     600:	00240400 	eoreq	r0, r4, r0, lsl #8
     604:	0b3e0b0b 	bleq	f83238 <_Min_Stack_Size+0xf82e38>
     608:	00000803 	andeq	r0, r0, r3, lsl #16
     60c:	0b000f05 	bleq	4228 <_Min_Stack_Size+0x3e28>
     610:	0600000b 	streq	r0, [r0], -fp
     614:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     618:	0b3a0b0b 	bleq	e8324c <_Min_Stack_Size+0xe82e4c>
     61c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     620:	0d070000 	stceq	0, cr0, [r7, #-0]
     624:	3a0e0300 	bcc	38122c <_Min_Stack_Size+0x380e2c>
     628:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     62c:	000b3813 	andeq	r3, fp, r3, lsl r8
     630:	000f0800 	andeq	r0, pc, r0, lsl #16
     634:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     638:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
     63c:	3a0e0301 	bcc	381248 <_Min_Stack_Size+0x380e48>
     640:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     644:	20134919 	andscs	r4, r3, r9, lsl r9
     648:	0013010b 	andseq	r0, r3, fp, lsl #2
     64c:	00050a00 	andeq	r0, r5, r0, lsl #20
     650:	0b3a0e03 	bleq	e83e64 <_Min_Stack_Size+0xe83a64>
     654:	1349053b 	movtne	r0, #38203	; 0x953b
     658:	340b0000 	strcc	r0, [fp], #-0
     65c:	3a0e0300 	bcc	381264 <_Min_Stack_Size+0x380e64>
     660:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     664:	0c000013 	stceq	0, cr0, [r0], {19}
     668:	13490026 	movtne	r0, #36902	; 0x9026
     66c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     670:	03193f01 	tsteq	r9, #1, 30
     674:	3b0b3a0e 	blcc	2ceeb4 <_Min_Stack_Size+0x2ceab4>
     678:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     67c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     680:	97184006 	ldrls	r4, [r8, -r6]
     684:	13011942 	movwne	r1, #6466	; 0x1942
     688:	340e0000 	strcc	r0, [lr], #-0
     68c:	3a0e0300 	bcc	381294 <_Min_Stack_Size+0x380e94>
     690:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     694:	00170213 	andseq	r0, r7, r3, lsl r2
     698:	82890f00 	addhi	r0, r9, #0, 30
     69c:	01110101 	tsteq	r1, r1, lsl #2
     6a0:	13011331 	movwne	r1, #4913	; 0x1331
     6a4:	8a100000 	bhi	4006ac <_Min_Stack_Size+0x4002ac>
     6a8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     6ac:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     6b0:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
     6b4:	11010182 	smlabbne	r1, r2, r1, r0
     6b8:	00133101 	andseq	r3, r3, r1, lsl #2
     6bc:	012e1200 	teqeq	lr, r0, lsl #4
     6c0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     6c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     6c8:	13491927 	movtne	r1, #39207	; 0x9927
     6cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6d4:	00130119 	andseq	r0, r3, r9, lsl r1
     6d8:	00051300 	andeq	r1, r5, r0, lsl #6
     6dc:	0b3a0e03 	bleq	e83ef0 <_Min_Stack_Size+0xe83af0>
     6e0:	1349053b 	movtne	r0, #38203	; 0x953b
     6e4:	00001702 	andeq	r1, r0, r2, lsl #14
     6e8:	03003414 	movweq	r3, #1044	; 0x414
     6ec:	3b0b3a0e 	blcc	2cef2c <_Min_Stack_Size+0x2ceb2c>
     6f0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     6f4:	15000017 	strne	r0, [r0, #-23]
     6f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     6fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     700:	0b1c1349 	bleq	70542c <_Min_Stack_Size+0x70502c>
     704:	0b160000 	bleq	58070c <_Min_Stack_Size+0x58030c>
     708:	01175501 	tsteq	r7, r1, lsl #10
     70c:	17000013 	smladne	r0, r3, r0, r0
     710:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     714:	17550152 			; <UNDEFINED> instruction: 0x17550152
     718:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
     71c:	00001301 	andeq	r1, r0, r1, lsl #6
     720:	31000518 	tstcc	r0, r8, lsl r5
     724:	00170213 	andseq	r0, r7, r3, lsl r2
     728:	010b1900 	tsteq	fp, r0, lsl #18
     72c:	00001755 	andeq	r1, r0, r5, asr r7
     730:	3100341a 	tstcc	r0, sl, lsl r4
     734:	00170213 	andseq	r0, r7, r3, lsl r2
     738:	00051b00 	andeq	r1, r5, r0, lsl #22
     73c:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     740:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
     744:	11000182 	smlabbne	r0, r2, r1, r0
     748:	00133101 	andseq	r3, r3, r1, lsl #2
     74c:	00341d00 	eorseq	r1, r4, r0, lsl #26
     750:	0b3a0e03 	bleq	e83f64 <_Min_Stack_Size+0xe83b64>
     754:	1349053b 	movtne	r0, #38203	; 0x953b
     758:	00001802 	andeq	r1, r0, r2, lsl #16
     75c:	3f012e1e 	svccc	0x00012e1e
     760:	3a0e0319 	bcc	3813cc <_Min_Stack_Size+0x380fcc>
     764:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     768:	20134919 	andscs	r4, r3, r9, lsl r9
     76c:	0013010b 	andseq	r0, r3, fp, lsl #2
     770:	012e1f00 	teqeq	lr, r0, lsl #30
     774:	01111331 	tsteq	r1, r1, lsr r3
     778:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     77c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     780:	20000013 	andcs	r0, r0, r3, lsl r0
     784:	13310034 	teqne	r1, #52	; 0x34
     788:	00001802 	andeq	r1, r0, r2, lsl #16
     78c:	03000521 	movweq	r0, #1313	; 0x521
     790:	3b0b3a0e 	blcc	2cefd0 <_Min_Stack_Size+0x2cebd0>
     794:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     798:	22000017 	andcs	r0, r0, #23
     79c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     7a0:	0b3a0e03 	bleq	e83fb4 <_Min_Stack_Size+0xe83bb4>
     7a4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     7a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     7b0:	00130119 	andseq	r0, r3, r9, lsl r1
     7b4:	82892300 	addhi	r2, r9, #0, 6
     7b8:	01110001 	tsteq	r1, r1
     7bc:	31194295 			; <UNDEFINED> instruction: 0x31194295
     7c0:	24000013 	strcs	r0, [r0], #-19
     7c4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     7c8:	17550152 			; <UNDEFINED> instruction: 0x17550152
     7cc:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
     7d0:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
     7d4:	03193f01 	tsteq	r9, #1, 30
     7d8:	3b0b3a0e 	blcc	2cf018 <_Min_Stack_Size+0x2cec18>
     7dc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     7e0:	01193c13 	tsteq	r9, r3, lsl ip
     7e4:	26000013 			; <UNDEFINED> instruction: 0x26000013
     7e8:	13490005 	movtne	r0, #36869	; 0x9005
     7ec:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     7f0:	03193f01 	tsteq	r9, #1, 30
     7f4:	3b0b3a0e 	blcc	2cf034 <_Min_Stack_Size+0x2cec34>
     7f8:	3c192705 	ldccc	7, cr2, [r9], {5}
     7fc:	00130119 	andseq	r0, r3, r9, lsl r1
     800:	002e2800 	eoreq	r2, lr, r0, lsl #16
     804:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     808:	0b3b0b3a 	bleq	ec34f8 <_Min_Stack_Size+0xec30f8>
     80c:	13491927 	movtne	r1, #39207	; 0x9927
     810:	0000193c 	andeq	r1, r0, ip, lsr r9
     814:	3f002e29 	svccc	0x00002e29
     818:	3a0e0319 	bcc	381484 <_Min_Stack_Size+0x381084>
     81c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     820:	3c134919 	ldccc	9, cr4, [r3], {25}
     824:	2a000019 	bcs	890 <_Min_Stack_Size+0x490>
     828:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     82c:	0b3a0e03 	bleq	e84040 <_Min_Stack_Size+0xe83c40>
     830:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     834:	0000193c 	andeq	r1, r0, ip, lsr r9
     838:	3f002e2b 	svccc	0x00002e2b
     83c:	3a0e0319 	bcc	3814a8 <_Min_Stack_Size+0x3810a8>
     840:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     844:	00193c19 	andseq	r3, r9, r9, lsl ip
     848:	012e2c00 	teqeq	lr, r0, lsl #24
     84c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     850:	0b3b0b3a 	bleq	ec3540 <_Min_Stack_Size+0xec3140>
     854:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     858:	00001301 	andeq	r1, r0, r1, lsl #6
     85c:	3f012e2d 	svccc	0x00012e2d
     860:	3a0e0319 	bcc	3814cc <_Min_Stack_Size+0x3810cc>
     864:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     868:	00193c19 	andseq	r3, r9, r9, lsl ip
     86c:	11010000 	mrsne	r0, (UNDEF: 1)
     870:	130e2501 	movwne	r2, #58625	; 0xe501
     874:	1b0e030b 	blne	3814a8 <_Min_Stack_Size+0x3810a8>
     878:	1117550e 	tstne	r7, lr, lsl #10
     87c:	00171001 	andseq	r1, r7, r1
     880:	00240200 	eoreq	r0, r4, r0, lsl #4
     884:	0b3e0b0b 	bleq	f834b8 <_Min_Stack_Size+0xf830b8>
     888:	00000e03 	andeq	r0, r0, r3, lsl #28
     88c:	0b002403 	bleq	98a0 <_Min_Stack_Size+0x94a0>
     890:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     894:	04000008 	streq	r0, [r0], #-8
     898:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     89c:	0b3b0b3a 	bleq	ec358c <_Min_Stack_Size+0xec318c>
     8a0:	00001349 	andeq	r1, r0, r9, asr #6
     8a4:	0b000f05 	bleq	44c0 <_Min_Stack_Size+0x40c0>
     8a8:	0600000b 	streq	r0, [r0], -fp
     8ac:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     8b0:	0b3a0b0b 	bleq	e834e4 <_Min_Stack_Size+0xe830e4>
     8b4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     8b8:	0d070000 	stceq	0, cr0, [r7, #-0]
     8bc:	3a0e0300 	bcc	3814c4 <_Min_Stack_Size+0x3810c4>
     8c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8c4:	000b3813 	andeq	r3, fp, r3, lsl r8
     8c8:	000f0800 	andeq	r0, pc, r0, lsl #16
     8cc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     8d0:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
     8d4:	03193f01 	tsteq	r9, #1, 30
     8d8:	3b0b3a0e 	blcc	2cf118 <_Min_Stack_Size+0x2ced18>
     8dc:	1119270b 	tstne	r9, fp, lsl #14
     8e0:	40061201 	andmi	r1, r6, r1, lsl #4
     8e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8e8:	00001301 	andeq	r1, r0, r1, lsl #6
     8ec:	0300050a 	movweq	r0, #1290	; 0x50a
     8f0:	3b0b3a0e 	blcc	2cf130 <_Min_Stack_Size+0x2ced30>
     8f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8f8:	0b000018 	bleq	960 <_Min_Stack_Size+0x560>
     8fc:	13490026 	movtne	r0, #36902	; 0x9026
     900:	340c0000 	strcc	r0, [ip], #-0
     904:	3a0e0300 	bcc	38150c <_Min_Stack_Size+0x38110c>
     908:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     90c:	00180213 	andseq	r0, r8, r3, lsl r2
     910:	00340d00 	eorseq	r0, r4, r0, lsl #26
     914:	0b3a0e03 	bleq	e84128 <_Min_Stack_Size+0xe83d28>
     918:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     91c:	00001702 	andeq	r1, r0, r2, lsl #14
     920:	3f012e0e 	svccc	0x00012e0e
     924:	3a0e0319 	bcc	381590 <_Min_Stack_Size+0x381190>
     928:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     92c:	11134919 	tstne	r3, r9, lsl r9
     930:	40061201 	andmi	r1, r6, r1, lsl #4
     934:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     938:	050f0000 	streq	r0, [pc, #-0]	; 940 <_Min_Stack_Size+0x540>
     93c:	3a0e0300 	bcc	381544 <_Min_Stack_Size+0x381144>
     940:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     944:	00170213 	andseq	r0, r7, r3, lsl r2
     948:	11010000 	mrsne	r0, (UNDEF: 1)
     94c:	130e2501 	movwne	r2, #58625	; 0xe501
     950:	1b0e030b 	blne	381584 <_Min_Stack_Size+0x381184>
     954:	1117550e 	tstne	r7, lr, lsl #10
     958:	00171001 	andseq	r1, r7, r1
     95c:	00160200 	andseq	r0, r6, r0, lsl #4
     960:	0b3a0e03 	bleq	e84174 <_Min_Stack_Size+0xe83d74>
     964:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     968:	24030000 	strcs	r0, [r3], #-0
     96c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     970:	000e030b 	andeq	r0, lr, fp, lsl #6
     974:	00240400 	eoreq	r0, r4, r0, lsl #8
     978:	0b3e0b0b 	bleq	f835ac <_Min_Stack_Size+0xf831ac>
     97c:	00000803 	andeq	r0, r0, r3, lsl #16
     980:	0b000f05 	bleq	459c <_Min_Stack_Size+0x419c>
     984:	0600000b 	streq	r0, [r0], -fp
     988:	0b0b000f 	bleq	2c09cc <_Min_Stack_Size+0x2c05cc>
     98c:	00001349 	andeq	r1, r0, r9, asr #6
     990:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
     994:	08000013 	stmdaeq	r0, {r0, r1, r4}
     998:	00000026 	andeq	r0, r0, r6, lsr #32
     99c:	03011309 	movweq	r1, #4873	; 0x1309
     9a0:	3a0b0b0e 	bcc	2c35e0 <_Min_Stack_Size+0x2c31e0>
     9a4:	010b3b0b 	tsteq	fp, fp, lsl #22
     9a8:	0a000013 	beq	9fc <_Min_Stack_Size+0x5fc>
     9ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     9b0:	0b3b0b3a 	bleq	ec36a0 <_Min_Stack_Size+0xec32a0>
     9b4:	0b381349 	bleq	e056e0 <_Min_Stack_Size+0xe052e0>
     9b8:	170b0000 	strne	r0, [fp, -r0]
     9bc:	3a0b0b01 	bcc	2c35c8 <_Min_Stack_Size+0x2c31c8>
     9c0:	010b3b0b 	tsteq	fp, fp, lsl #22
     9c4:	0c000013 	stceq	0, cr0, [r0], {19}
     9c8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     9cc:	0b3b0b3a 	bleq	ec36bc <_Min_Stack_Size+0xec32bc>
     9d0:	00001349 	andeq	r1, r0, r9, asr #6
     9d4:	03000d0d 	movweq	r0, #3341	; 0xd0d
     9d8:	3b0b3a08 	blcc	2cf200 <_Min_Stack_Size+0x2cee00>
     9dc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     9e0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     9e4:	13490035 	movtne	r0, #36917	; 0x9035
     9e8:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     9ec:	3a0e0301 	bcc	3815f8 <_Min_Stack_Size+0x3811f8>
     9f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     9f4:	20134919 	andscs	r4, r3, r9, lsl r9
     9f8:	0013010b 	andseq	r0, r3, fp, lsl #2
     9fc:	00051000 	andeq	r1, r5, r0
     a00:	0b3a0e03 	bleq	e84214 <_Min_Stack_Size+0xe83e14>
     a04:	1349053b 	movtne	r0, #38203	; 0x953b
     a08:	34110000 	ldrcc	r0, [r1], #-0
     a0c:	3a0e0300 	bcc	381614 <_Min_Stack_Size+0x381214>
     a10:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a14:	12000013 	andne	r0, r0, #19
     a18:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a1c:	0b3a0e03 	bleq	e84230 <_Min_Stack_Size+0xe83e30>
     a20:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     a24:	13010b20 	movwne	r0, #6944	; 0x1b20
     a28:	34130000 	ldrcc	r0, [r3], #-0
     a2c:	3a080300 	bcc	201634 <_Min_Stack_Size+0x201234>
     a30:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a34:	14000013 	strne	r0, [r0], #-19
     a38:	0e03012e 	adfeqsp	f0, f3, #0.5
     a3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a40:	01111927 	tsteq	r1, r7, lsr #18
     a44:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a48:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a4c:	15000013 	strne	r0, [r0, #-19]
     a50:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     a54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a58:	17021349 	strne	r1, [r2, -r9, asr #6]
     a5c:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     a60:	11010182 	smlabbne	r1, r2, r1, r0
     a64:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     a68:	00001331 	andeq	r1, r0, r1, lsr r3
     a6c:	01828a17 	orreq	r8, r2, r7, lsl sl
     a70:	91180200 	tstls	r8, r0, lsl #4
     a74:	00001842 	andeq	r1, r0, r2, asr #16
     a78:	03012e18 	movweq	r2, #7704	; 0x1e18
     a7c:	3b0b3a0e 	blcc	2cf2bc <_Min_Stack_Size+0x2ceebc>
     a80:	20192705 	andscs	r2, r9, r5, lsl #14
     a84:	0013010b 	andseq	r0, r3, fp, lsl #2
     a88:	012e1900 	teqeq	lr, r0, lsl #18
     a8c:	01111331 	tsteq	r1, r1, lsr r3
     a90:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a94:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a98:	1a000013 	bne	aec <_Min_Stack_Size+0x6ec>
     a9c:	13310005 	teqne	r1, #5
     aa0:	00001702 	andeq	r1, r0, r2, lsl #14
     aa4:	0182891b 	orreq	r8, r2, fp, lsl r9
     aa8:	31011100 	mrscc	r1, (UNDEF: 17)
     aac:	1c000013 	stcne	0, cr0, [r0], {19}
     ab0:	01018289 	smlabbeq	r1, r9, r2, r8
     ab4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     ab8:	00001301 	andeq	r1, r0, r1, lsl #6
     abc:	0182891d 	orreq	r8, r2, sp, lsl r9
     ac0:	95011100 	strls	r1, [r1, #-256]	; 0x100
     ac4:	13311942 	teqne	r1, #1081344	; 0x108000
     ac8:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     acc:	03193f01 	tsteq	r9, #1, 30
     ad0:	3b0b3a0e 	blcc	2cf310 <_Min_Stack_Size+0x2cef10>
     ad4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     ad8:	010b2013 	tsteq	fp, r3, lsl r0
     adc:	1f000013 	svcne	0x00000013
     ae0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     ae4:	0b3b0b3a 	bleq	ec37d4 <_Min_Stack_Size+0xec33d4>
     ae8:	00001349 	andeq	r1, r0, r9, asr #6
     aec:	31003420 	tstcc	r0, r0, lsr #8
     af0:	00170213 	andseq	r0, r7, r3, lsl r2
     af4:	012e2100 	teqeq	lr, r0, lsl #2
     af8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     afc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b00:	13491927 	movtne	r1, #39207	; 0x9927
     b04:	13010b20 	movwne	r0, #6944	; 0x1b20
     b08:	1d220000 	stcne	0, cr0, [r2, #-0]
     b0c:	11133101 	tstne	r3, r1, lsl #2
     b10:	58061201 	stmdapl	r6, {r0, r9, ip}
     b14:	0105590b 	tsteq	r5, fp, lsl #18
     b18:	23000013 	movwcs	r0, #19
     b1c:	0111010b 	tsteq	r1, fp, lsl #2
     b20:	00000612 	andeq	r0, r0, r2, lsl r6
     b24:	3f012e24 	svccc	0x00012e24
     b28:	3a0e0319 	bcc	381794 <_Min_Stack_Size+0x381394>
     b2c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     b30:	11134919 	tstne	r3, r9, lsl r9
     b34:	40061201 	andmi	r1, r6, r1, lsl #4
     b38:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b3c:	00001301 	andeq	r1, r0, r1, lsl #6
     b40:	03003425 	movweq	r3, #1061	; 0x425
     b44:	3b0b3a0e 	blcc	2cf384 <_Min_Stack_Size+0x2cef84>
     b48:	02134905 	andseq	r4, r3, #81920	; 0x14000
     b4c:	26000018 			; <UNDEFINED> instruction: 0x26000018
     b50:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     b54:	17550152 			; <UNDEFINED> instruction: 0x17550152
     b58:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
     b5c:	00001301 	andeq	r1, r0, r1, lsl #6
     b60:	55010b27 	strpl	r0, [r1, #-2855]	; 0xb27
     b64:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
     b68:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b70:	17021349 	strne	r1, [r2, -r9, asr #6]
     b74:	89290000 	stmdbhi	r9!, {}	; <UNPREDICTABLE>
     b78:	11010182 	smlabbne	r1, r2, r1, r0
     b7c:	00133101 	andseq	r3, r3, r1, lsl #2
     b80:	012e2a00 	teqeq	lr, r0, lsl #20
     b84:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b8c:	01111927 	tsteq	r1, r7, lsr #18
     b90:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b94:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b98:	2b000013 	blcs	bec <_Min_Stack_Size+0x7ec>
     b9c:	13310005 	teqne	r1, #5
     ba0:	892c0000 	stmdbhi	ip!, {}	; <UNPREDICTABLE>
     ba4:	11010182 	smlabbne	r1, r2, r1, r0
     ba8:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     bac:	13011331 	movwne	r1, #4913	; 0x1331
     bb0:	052d0000 	streq	r0, [sp, #-0]!
     bb4:	3a0e0300 	bcc	3817bc <_Min_Stack_Size+0x3813bc>
     bb8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bbc:	00180213 	andseq	r0, r8, r3, lsl r2
     bc0:	00342e00 	eorseq	r2, r4, r0, lsl #28
     bc4:	0b3a0803 	bleq	e82bd8 <_Min_Stack_Size+0xe827d8>
     bc8:	1349053b 	movtne	r0, #38203	; 0x953b
     bcc:	00001702 	andeq	r1, r0, r2, lsl #14
     bd0:	3100052f 	tstcc	r0, pc, lsr #10
     bd4:	00180213 	andseq	r0, r8, r3, lsl r2
     bd8:	01013000 	mrseq	r3, (UNDEF: 1)
     bdc:	13011349 	movwne	r1, #4937	; 0x1349
     be0:	21310000 	teqcs	r1, r0
     be4:	2f134900 	svccs	0x00134900
     be8:	3200000b 	andcc	r0, r0, #11
     bec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     bf0:	0b3b0b3a 	bleq	ec38e0 <_Min_Stack_Size+0xec34e0>
     bf4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     bf8:	00001802 	andeq	r1, r0, r2, lsl #16
     bfc:	3f012e33 	svccc	0x00012e33
     c00:	270e0319 	smladcs	lr, r9, r3, r0
     c04:	34134919 	ldrcc	r4, [r3], #-2329	; 0x919
     c08:	01193c19 	tsteq	r9, r9, lsl ip
     c0c:	34000013 	strcc	r0, [r0], #-19
     c10:	13490005 	movtne	r0, #36869	; 0x9005
     c14:	2e350000 	cdpcs	0, 3, cr0, cr5, cr0, {0}
     c18:	03193f00 	tsteq	r9, #0, 30
     c1c:	3b0b3a0e 	blcc	2cf45c <_Min_Stack_Size+0x2cf05c>
     c20:	3c19270b 	ldccc	7, cr2, [r9], {11}
     c24:	36000019 			; <UNDEFINED> instruction: 0x36000019
     c28:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c2c:	0b3a0e03 	bleq	e84440 <_Min_Stack_Size+0xe84040>
     c30:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     c34:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     c38:	00001301 	andeq	r1, r0, r1, lsl #6
     c3c:	3f002e37 	svccc	0x00002e37
     c40:	3a0e0319 	bcc	3818ac <_Min_Stack_Size+0x3814ac>
     c44:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     c48:	00193c19 	andseq	r3, r9, r9, lsl ip
     c4c:	012e3800 	teqeq	lr, r0, lsl #16
     c50:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c58:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     c5c:	00001301 	andeq	r1, r0, r1, lsl #6
     c60:	3f002e39 	svccc	0x00002e39
     c64:	3a0e0319 	bcc	3818d0 <_Min_Stack_Size+0x3814d0>
     c68:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c6c:	3c134919 	ldccc	9, cr4, [r3], {25}
     c70:	3a000019 	bcc	cdc <_Min_Stack_Size+0x8dc>
     c74:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     c78:	0b3a0e03 	bleq	e8448c <_Min_Stack_Size+0xe8408c>
     c7c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     c80:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     c84:	2e3b0000 	cdpcs	0, 3, cr0, cr11, cr0, {0}
     c88:	03193f01 	tsteq	r9, #1, 30
     c8c:	3b0b3a0e 	blcc	2cf4cc <_Min_Stack_Size+0x2cf0cc>
     c90:	3c19270b 	ldccc	7, cr2, [r9], {11}
     c94:	00130119 	andseq	r0, r3, r9, lsl r1
     c98:	012e3c00 	teqeq	lr, r0, lsl #24
     c9c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ca0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ca4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     ca8:	01000000 	mrseq	r0, (UNDEF: 0)
     cac:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     cb0:	0e030b13 	vmoveq.32	d3[0], r0
     cb4:	17550e1b 	smmlane	r5, fp, lr, r0
     cb8:	17100111 			; <UNDEFINED> instruction: 0x17100111
     cbc:	16020000 	strne	r0, [r2], -r0
     cc0:	3a0e0300 	bcc	3818c8 <_Min_Stack_Size+0x3814c8>
     cc4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cc8:	03000013 	movweq	r0, #19
     ccc:	0b0b0024 	bleq	2c0d64 <_Min_Stack_Size+0x2c0964>
     cd0:	0e030b3e 	vmoveq.16	d3[0], r0
     cd4:	24040000 	strcs	r0, [r4], #-0
     cd8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     cdc:	0008030b 	andeq	r0, r8, fp, lsl #6
     ce0:	000f0500 	andeq	r0, pc, r0, lsl #10
     ce4:	00000b0b 	andeq	r0, r0, fp, lsl #22
     ce8:	0b000f06 	bleq	4908 <_Min_Stack_Size+0x4508>
     cec:	0013490b 	andseq	r4, r3, fp, lsl #18
     cf0:	00260700 	eoreq	r0, r6, r0, lsl #14
     cf4:	00001349 	andeq	r1, r0, r9, asr #6
     cf8:	27011508 	strcs	r1, [r1, -r8, lsl #10]
     cfc:	00130119 	andseq	r0, r3, r9, lsl r1
     d00:	00050900 	andeq	r0, r5, r0, lsl #18
     d04:	00001349 	andeq	r1, r0, r9, asr #6
     d08:	0301130a 	movweq	r1, #4874	; 0x130a
     d0c:	3a0b0b0e 	bcc	2c394c <_Min_Stack_Size+0x2c354c>
     d10:	010b3b0b 	tsteq	fp, fp, lsl #22
     d14:	0b000013 	bleq	d68 <_Min_Stack_Size+0x968>
     d18:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     d1c:	0b3b0b3a 	bleq	ec3a0c <_Min_Stack_Size+0xec360c>
     d20:	0b381349 	bleq	e05a4c <_Min_Stack_Size+0xe0564c>
     d24:	040c0000 	streq	r0, [ip], #-0
     d28:	3a0b0b01 	bcc	2c3934 <_Min_Stack_Size+0x2c3534>
     d2c:	010b3b0b 	tsteq	fp, fp, lsl #22
     d30:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     d34:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     d38:	00000d1c 	andeq	r0, r0, ip, lsl sp
     d3c:	4900350e 	stmdbmi	r0, {r1, r2, r3, r8, sl, ip, sp}
     d40:	0f000013 	svceq	0x00000013
     d44:	13490101 	movtne	r0, #37121	; 0x9101
     d48:	00001301 	andeq	r1, r0, r1, lsl #6
     d4c:	49002110 	stmdbmi	r0, {r4, r8, sp}
     d50:	000b2f13 	andeq	r2, fp, r3, lsl pc
     d54:	012e1100 	teqeq	lr, r0, lsl #2
     d58:	0b3a0e03 	bleq	e8456c <_Min_Stack_Size+0xe8416c>
     d5c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     d60:	0b201349 	bleq	805a8c <_Min_Stack_Size+0x80568c>
     d64:	00001301 	andeq	r1, r0, r1, lsl #6
     d68:	03000512 	movweq	r0, #1298	; 0x512
     d6c:	3b0b3a0e 	blcc	2cf5ac <_Min_Stack_Size+0x2cf1ac>
     d70:	00134905 	andseq	r4, r3, r5, lsl #18
     d74:	00341300 	eorseq	r1, r4, r0, lsl #6
     d78:	0b3a0e03 	bleq	e8458c <_Min_Stack_Size+0xe8418c>
     d7c:	1349053b 	movtne	r0, #38203	; 0x953b
     d80:	0b140000 	bleq	500d88 <_Min_Stack_Size+0x500988>
     d84:	00130101 	andseq	r0, r3, r1, lsl #2
     d88:	010b1500 	tsteq	fp, r0, lsl #10
     d8c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     d90:	3a0e0301 	bcc	38199c <_Min_Stack_Size+0x38159c>
     d94:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     d98:	010b2019 	tsteq	fp, r9, lsl r0
     d9c:	17000013 	smladne	r0, r3, r0, r0
     da0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     da4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     da8:	00001349 	andeq	r1, r0, r9, asr #6
     dac:	3f002e18 	svccc	0x00002e18
     db0:	3a0e0319 	bcc	381a1c <_Min_Stack_Size+0x38161c>
     db4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     db8:	000b2019 	andeq	r2, fp, r9, lsl r0
     dbc:	012e1900 	teqeq	lr, r0, lsl #18
     dc0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     dc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     dc8:	0b201927 	bleq	80726c <_Min_Stack_Size+0x806e6c>
     dcc:	00001301 	andeq	r1, r0, r1, lsl #6
     dd0:	03012e1a 	movweq	r2, #7706	; 0x1e1a
     dd4:	3b0b3a0e 	blcc	2cf614 <_Min_Stack_Size+0x2cf214>
     dd8:	11192705 	tstne	r9, r5, lsl #14
     ddc:	40061201 	andmi	r1, r6, r1, lsl #4
     de0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     de4:	00001301 	andeq	r1, r0, r1, lsl #6
     de8:	0300341b 	movweq	r3, #1051	; 0x41b
     dec:	3b0b3a0e 	blcc	2cf62c <_Min_Stack_Size+0x2cf22c>
     df0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     df4:	1c000017 	stcne	0, cr0, [r0], {23}
     df8:	01018289 	smlabbeq	r1, r9, r2, r8
     dfc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     e00:	00001301 	andeq	r1, r0, r1, lsl #6
     e04:	01828a1d 	orreq	r8, r2, sp, lsl sl
     e08:	91180200 	tstls	r8, r0, lsl #4
     e0c:	00001842 	andeq	r1, r0, r2, asr #16
     e10:	0182891e 	orreq	r8, r2, lr, lsl r9
     e14:	31011101 	tstcc	r1, r1, lsl #2
     e18:	1f000013 	svcne	0x00000013
     e1c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e20:	0b3a0e03 	bleq	e84634 <_Min_Stack_Size+0xe84234>
     e24:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     e28:	0b201349 	bleq	805b54 <_Min_Stack_Size+0x805754>
     e2c:	00001301 	andeq	r1, r0, r1, lsl #6
     e30:	31012e20 	tstcc	r1, r0, lsr #28
     e34:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     e38:	97184006 	ldrls	r4, [r8, -r6]
     e3c:	13011942 	movwne	r1, #6466	; 0x1942
     e40:	05210000 	streq	r0, [r1, #-0]!
     e44:	02133100 	andseq	r3, r3, #0, 2
     e48:	22000017 	andcs	r0, r0, #23
     e4c:	13310034 	teqne	r1, #52	; 0x34
     e50:	00001702 	andeq	r1, r0, r2, lsl #14
     e54:	31003423 	tstcc	r0, r3, lsr #8
     e58:	00180213 	andseq	r0, r8, r3, lsl r2
     e5c:	011d2400 	tsteq	sp, r0, lsl #8
     e60:	01521331 	cmpeq	r2, r1, lsr r3
     e64:	0b581755 	bleq	1606bc0 <_Min_Stack_Size+0x16067c0>
     e68:	13010559 	movwne	r0, #5465	; 0x1559
     e6c:	0b250000 	bleq	940e74 <_Min_Stack_Size+0x940a74>
     e70:	00175501 	andseq	r5, r7, r1, lsl #10
     e74:	010b2600 	tsteq	fp, r0, lsl #12
     e78:	13011755 	movwne	r1, #5973	; 0x1755
     e7c:	89270000 	stmdbhi	r7!, {}	; <UNPREDICTABLE>
     e80:	11000182 	smlabbne	r0, r2, r1, r0
     e84:	00133101 	andseq	r3, r3, r1, lsl #2
     e88:	012e2800 	teqeq	lr, r0, lsl #16
     e8c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e94:	01111927 	tsteq	r1, r7, lsr #18
     e98:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e9c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     ea0:	29000013 	stmdbcs	r0, {r0, r1, r4}
     ea4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     ea8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     eac:	17021349 	strne	r1, [r2, -r9, asr #6]
     eb0:	1d2a0000 	stcne	0, cr0, [sl, #-0]
     eb4:	11133101 	tstne	r3, r1, lsl #2
     eb8:	58061201 	stmdapl	r6, {r0, r9, ip}
     ebc:	0105590b 	tsteq	r5, fp, lsl #18
     ec0:	2b000013 	blcs	f14 <_Min_Stack_Size+0xb14>
     ec4:	0111010b 	tsteq	r1, fp, lsl #2
     ec8:	00000612 	andeq	r0, r0, r2, lsl r6
     ecc:	3100342c 	tstcc	r0, ip, lsr #8
     ed0:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     ed4:	00018289 	andeq	r8, r1, r9, lsl #5
     ed8:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     edc:	00133119 	andseq	r3, r3, r9, lsl r1
     ee0:	012e2e00 	teqeq	lr, r0, lsl #28
     ee4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ee8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     eec:	13491927 	movtne	r1, #39207	; 0x9927
     ef0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ef4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ef8:	00130119 	andseq	r0, r3, r9, lsl r1
     efc:	010b2f00 	tsteq	fp, r0, lsl #30
     f00:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f04:	00001301 	andeq	r1, r0, r1, lsl #6
     f08:	31000530 	tstcc	r0, r0, lsr r5
     f0c:	00180213 	andseq	r0, r8, r3, lsl r2
     f10:	00053100 	andeq	r3, r5, r0, lsl #2
     f14:	0b1c1331 	bleq	705be0 <_Min_Stack_Size+0x7057e0>
     f18:	05320000 	ldreq	r0, [r2, #-0]!
     f1c:	00133100 	andseq	r3, r3, r0, lsl #2
     f20:	002e3300 	eoreq	r3, lr, r0, lsl #6
     f24:	01111331 	tsteq	r1, r1, lsr r3
     f28:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f2c:	00194297 	mulseq	r9, r7, r2
     f30:	00343400 	eorseq	r3, r4, r0, lsl #8
     f34:	0b3a0e03 	bleq	e84748 <_Min_Stack_Size+0xe84348>
     f38:	1349053b 	movtne	r0, #38203	; 0x953b
     f3c:	00001802 	andeq	r1, r0, r2, lsl #16
     f40:	3f002e35 	svccc	0x00002e35
     f44:	3a0e0319 	bcc	381bb0 <_Min_Stack_Size+0x3817b0>
     f48:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     f4c:	11134919 	tstne	r3, r9, lsl r9
     f50:	40061201 	andmi	r1, r6, r1, lsl #4
     f54:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f58:	1d360000 	ldcne	0, cr0, [r6, #-0]
     f5c:	52133100 	andspl	r3, r3, #0, 2
     f60:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     f64:	0005590b 	andeq	r5, r5, fp, lsl #18
     f68:	011d3700 	tsteq	sp, r0, lsl #14
     f6c:	01521331 	cmpeq	r2, r1, lsr r3
     f70:	0b581755 	bleq	1606ccc <_Min_Stack_Size+0x16068cc>
     f74:	00000559 	andeq	r0, r0, r9, asr r5
     f78:	31011d38 	tstcc	r1, r8, lsr sp
     f7c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f80:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     f84:	39000005 	stmdbcc	r0, {r0, r2}
     f88:	01018289 	smlabbeq	r1, r9, r2, r8
     f8c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     f90:	01133119 	tsteq	r3, r9, lsl r1
     f94:	3a000013 	bcc	fe8 <_Min_Stack_Size+0xbe8>
     f98:	01018289 	smlabbeq	r1, r9, r2, r8
     f9c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     fa0:	00133119 	andseq	r3, r3, r9, lsl r1
     fa4:	002e3b00 	eoreq	r3, lr, r0, lsl #22
     fa8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     fac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     fb0:	01111927 	tsteq	r1, r7, lsr #18
     fb4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     fb8:	00194297 	mulseq	r9, r7, r2
     fbc:	00053c00 	andeq	r3, r5, r0, lsl #24
     fc0:	0b3a0e03 	bleq	e847d4 <_Min_Stack_Size+0xe843d4>
     fc4:	1349053b 	movtne	r0, #38203	; 0x953b
     fc8:	00001802 	andeq	r1, r0, r2, lsl #16
     fcc:	0300343d 	movweq	r3, #1085	; 0x43d
     fd0:	3b0b3a0e 	blcc	2cf810 <_Min_Stack_Size+0x2cf410>
     fd4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fd8:	3e000018 	mcrcc	0, 0, r0, cr0, cr8, {0}
     fdc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     fe0:	0b3b0b3a 	bleq	ec3cd0 <_Min_Stack_Size+0xec38d0>
     fe4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     fe8:	00001802 	andeq	r1, r0, r2, lsl #16
     fec:	3f012e3f 	svccc	0x00012e3f
     ff0:	3a0e0319 	bcc	381c5c <_Min_Stack_Size+0x38185c>
     ff4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     ff8:	01193c19 	tsteq	r9, r9, lsl ip
     ffc:	40000013 	andmi	r0, r0, r3, lsl r0
    1000:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1004:	0b3a0e03 	bleq	e84818 <_Min_Stack_Size+0xe84418>
    1008:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    100c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    1010:	00001301 	andeq	r1, r0, r1, lsl #6
    1014:	3f012e41 	svccc	0x00012e41
    1018:	3a0e0319 	bcc	381c84 <_Min_Stack_Size+0x381884>
    101c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1020:	3c134919 	ldccc	9, cr4, [r3], {25}
    1024:	00130119 	andseq	r0, r3, r9, lsl r1
    1028:	002e4200 	eoreq	r4, lr, r0, lsl #4
    102c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1030:	0b3b0b3a 	bleq	ec3d20 <_Min_Stack_Size+0xec3920>
    1034:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1038:	2e430000 	cdpcs	0, 4, cr0, cr3, cr0, {0}
    103c:	03193f00 	tsteq	r9, #0, 30
    1040:	3b0b3a0e 	blcc	2cf880 <_Min_Stack_Size+0x2cf480>
    1044:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1048:	00193c13 	andseq	r3, r9, r3, lsl ip
    104c:	012e4400 	teqeq	lr, r0, lsl #8
    1050:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1054:	0b3b0b3a 	bleq	ec3d44 <_Min_Stack_Size+0xec3944>
    1058:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    105c:	00001301 	andeq	r1, r0, r1, lsl #6
    1060:	3f002e45 	svccc	0x00002e45
    1064:	3a0e0319 	bcc	381cd0 <_Min_Stack_Size+0x3818d0>
    1068:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    106c:	3c134919 	ldccc	9, cr4, [r3], {25}
    1070:	46000019 			; <UNDEFINED> instruction: 0x46000019
    1074:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1078:	0b3a0e03 	bleq	e8488c <_Min_Stack_Size+0xe8448c>
    107c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1080:	0000193c 	andeq	r1, r0, ip, lsr r9
    1084:	3f012e47 	svccc	0x00012e47
    1088:	3a0e0319 	bcc	381cf4 <_Min_Stack_Size+0x3818f4>
    108c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1090:	00193c19 	andseq	r3, r9, r9, lsl ip
    1094:	11010000 	mrsne	r0, (UNDEF: 1)
    1098:	130e2501 	movwne	r2, #58625	; 0xe501
    109c:	1b0e030b 	blne	381cd0 <_Min_Stack_Size+0x3818d0>
    10a0:	1117550e 	tstne	r7, lr, lsl #10
    10a4:	00171001 	andseq	r1, r7, r1
    10a8:	00160200 	andseq	r0, r6, r0, lsl #4
    10ac:	0b3a0e03 	bleq	e848c0 <_Min_Stack_Size+0xe844c0>
    10b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10b4:	24030000 	strcs	r0, [r3], #-0
    10b8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    10bc:	000e030b 	andeq	r0, lr, fp, lsl #6
    10c0:	00240400 	eoreq	r0, r4, r0, lsl #8
    10c4:	0b3e0b0b 	bleq	f83cf8 <_Min_Stack_Size+0xf838f8>
    10c8:	00000803 	andeq	r0, r0, r3, lsl #16
    10cc:	0b000f05 	bleq	4ce8 <_Min_Stack_Size+0x48e8>
    10d0:	0600000b 	streq	r0, [r0], -fp
    10d4:	0b0b000f 	bleq	2c1118 <_Min_Stack_Size+0x2c0d18>
    10d8:	00001349 	andeq	r1, r0, r9, asr #6
    10dc:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
    10e0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    10e4:	00000026 	andeq	r0, r0, r6, lsr #32
    10e8:	27011509 	strcs	r1, [r1, -r9, lsl #10]
    10ec:	00130119 	andseq	r0, r3, r9, lsl r1
    10f0:	00050a00 	andeq	r0, r5, r0, lsl #20
    10f4:	00001349 	andeq	r1, r0, r9, asr #6
    10f8:	0301130b 	movweq	r1, #4875	; 0x130b
    10fc:	3a0b0b0e 	bcc	2c3d3c <_Min_Stack_Size+0x2c393c>
    1100:	010b3b0b 	tsteq	fp, fp, lsl #22
    1104:	0c000013 	stceq	0, cr0, [r0], {19}
    1108:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    110c:	0b3b0b3a 	bleq	ec3dfc <_Min_Stack_Size+0xec39fc>
    1110:	0b381349 	bleq	e05e3c <_Min_Stack_Size+0xe05a3c>
    1114:	170d0000 	strne	r0, [sp, -r0]
    1118:	3a0b0b01 	bcc	2c3d24 <_Min_Stack_Size+0x2c3924>
    111c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1120:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1124:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1128:	0b3b0b3a 	bleq	ec3e18 <_Min_Stack_Size+0xec3a18>
    112c:	00001349 	andeq	r1, r0, r9, asr #6
    1130:	03000d0f 	movweq	r0, #3343	; 0xd0f
    1134:	3b0b3a08 	blcc	2cf95c <_Min_Stack_Size+0x2cf55c>
    1138:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    113c:	1000000b 	andne	r0, r0, fp
    1140:	0e03012e 	adfeqsp	f0, f3, #0.5
    1144:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1148:	13491927 	movtne	r1, #39207	; 0x9927
    114c:	13010b20 	movwne	r0, #6944	; 0x1b20
    1150:	05110000 	ldreq	r0, [r1, #-0]
    1154:	3a0e0300 	bcc	381d5c <_Min_Stack_Size+0x38195c>
    1158:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    115c:	12000013 	andne	r0, r0, #19
    1160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1164:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1168:	00001349 	andeq	r1, r0, r9, asr #6
    116c:	03002e13 	movweq	r2, #3603	; 0xe13
    1170:	3b0b3a0e 	blcc	2cf9b0 <_Min_Stack_Size+0x2cf5b0>
    1174:	20192705 	andscs	r2, r9, r5, lsl #14
    1178:	1400000b 	strne	r0, [r0], #-11
    117c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1180:	0b3a0e03 	bleq	e84994 <_Min_Stack_Size+0xe84594>
    1184:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1188:	01111349 	tsteq	r1, r9, asr #6
    118c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1190:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1194:	15000013 	strne	r0, [r0, #-19]
    1198:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    119c:	0b3b0b3a 	bleq	ec3e8c <_Min_Stack_Size+0xec3a8c>
    11a0:	17021349 	strne	r1, [r2, -r9, asr #6]
    11a4:	1d160000 	ldcne	0, cr0, [r6, #-0]
    11a8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    11ac:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    11b0:	010b590b 	tsteq	fp, fp, lsl #18
    11b4:	17000013 	smladne	r0, r3, r0, r0
    11b8:	00018289 	andeq	r8, r1, r9, lsl #5
    11bc:	13310111 	teqne	r1, #1073741828	; 0x40000004
    11c0:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    11c4:	11010182 	smlabbne	r1, r2, r1, r0
    11c8:	01133101 	tsteq	r3, r1, lsl #2
    11cc:	19000013 	stmdbne	r0, {r0, r1, r4}
    11d0:	0001828a 	andeq	r8, r1, sl, lsl #5
    11d4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    11d8:	1a000018 	bne	1240 <_Min_Stack_Size+0xe40>
    11dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    11e0:	0b3a0e03 	bleq	e849f4 <_Min_Stack_Size+0xe845f4>
    11e4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    11e8:	01111349 	tsteq	r1, r9, asr #6
    11ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    11f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    11f4:	1b000013 	blne	1248 <_Min_Stack_Size+0xe48>
    11f8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    11fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1200:	17021349 	strne	r1, [r2, -r9, asr #6]
    1204:	341c0000 	ldrcc	r0, [ip], #-0
    1208:	3a0e0300 	bcc	381e10 <_Min_Stack_Size+0x381a10>
    120c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1210:	00170213 	andseq	r0, r7, r3, lsl r2
    1214:	011d1d00 	tsteq	sp, r0, lsl #26
    1218:	01521331 	cmpeq	r2, r1, lsr r3
    121c:	0b581755 	bleq	1606f78 <_Min_Stack_Size+0x1606b78>
    1220:	13010559 	movwne	r0, #5465	; 0x1559
    1224:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    1228:	03193f01 	tsteq	r9, #1, 30
    122c:	3b0b3a0e 	blcc	2cfa6c <_Min_Stack_Size+0x2cf66c>
    1230:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1234:	010b2013 	tsteq	fp, r3, lsl r0
    1238:	1f000013 	svcne	0x00000013
    123c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    1240:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1244:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1248:	00130119 	andseq	r0, r3, r9, lsl r1
    124c:	00052000 	andeq	r2, r5, r0
    1250:	17021331 	smladxne	r2, r1, r3, r1
    1254:	34210000 	strtcc	r0, [r1], #-0
    1258:	02133100 	andseq	r3, r3, #0, 2
    125c:	22000017 	andcs	r0, r0, #23
    1260:	13310034 	teqne	r1, #52	; 0x34
    1264:	00001802 	andeq	r1, r0, r2, lsl #16
    1268:	03012e23 	movweq	r2, #7715	; 0x1e23
    126c:	3b0b3a0e 	blcc	2cfaac <_Min_Stack_Size+0x2cf6ac>
    1270:	20192705 	andscs	r2, r9, r5, lsl #14
    1274:	0013010b 	andseq	r0, r3, fp, lsl #2
    1278:	012e2400 	teqeq	lr, r0, lsl #8
    127c:	0b3a0e03 	bleq	e84a90 <_Min_Stack_Size+0xe84690>
    1280:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1284:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1288:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    128c:	00130119 	andseq	r0, r3, r9, lsl r1
    1290:	00342500 	eorseq	r2, r4, r0, lsl #10
    1294:	0b3a0e03 	bleq	e84aa8 <_Min_Stack_Size+0xe846a8>
    1298:	1349053b 	movtne	r0, #38203	; 0x953b
    129c:	00001802 	andeq	r1, r0, r2, lsl #16
    12a0:	31011d26 	tstcc	r1, r6, lsr #26
    12a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    12a8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    12ac:	00130105 	andseq	r0, r3, r5, lsl #2
    12b0:	00052700 	andeq	r2, r5, r0, lsl #14
    12b4:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    12b8:	0b280000 	bleq	a012c0 <_Min_Stack_Size+0xa00ec0>
    12bc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    12c0:	29000006 	stmdbcs	r0, {r1, r2}
    12c4:	13310034 	teqne	r1, #52	; 0x34
    12c8:	052a0000 	streq	r0, [sl, #-0]!
    12cc:	00133100 	andseq	r3, r3, r0, lsl #2
    12d0:	010b2b00 	tsteq	fp, r0, lsl #22
    12d4:	00001755 	andeq	r1, r0, r5, asr r7
    12d8:	0182892c 	orreq	r8, r2, ip, lsr #18
    12dc:	31011101 	tstcc	r1, r1, lsl #2
    12e0:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    12e4:	01018289 	smlabbeq	r1, r9, r2, r8
    12e8:	13010111 	movwne	r0, #4369	; 0x1111
    12ec:	0b2e0000 	bleq	b812f4 <_Min_Stack_Size+0xb80ef4>
    12f0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    12f4:	00130106 	andseq	r0, r3, r6, lsl #2
    12f8:	011d2f00 	tsteq	sp, r0, lsl #30
    12fc:	01521331 	cmpeq	r2, r1, lsr r3
    1300:	0b581755 	bleq	160705c <_Min_Stack_Size+0x1606c5c>
    1304:	00000559 	andeq	r0, r0, r9, asr r5
    1308:	55010b30 	strpl	r0, [r1, #-2864]	; 0xb30
    130c:	00130117 	andseq	r0, r3, r7, lsl r1
    1310:	00343100 	eorseq	r3, r4, r0, lsl #2
    1314:	0b3a0e03 	bleq	e84b28 <_Min_Stack_Size+0xe84728>
    1318:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    131c:	00001802 	andeq	r1, r0, r2, lsl #16
    1320:	3f002e32 	svccc	0x00002e32
    1324:	3a0e0319 	bcc	381f90 <_Min_Stack_Size+0x381b90>
    1328:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    132c:	00193c19 	andseq	r3, r9, r9, lsl ip
    1330:	012e3300 	teqeq	lr, r0, lsl #6
    1334:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1338:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    133c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1340:	00001301 	andeq	r1, r0, r1, lsl #6
    1344:	3f012e34 	svccc	0x00012e34
    1348:	3a0e0319 	bcc	381fb4 <_Min_Stack_Size+0x381bb4>
    134c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1350:	3c134919 	ldccc	9, cr4, [r3], {25}
    1354:	00130119 	andseq	r0, r3, r9, lsl r1
    1358:	002e3500 	eoreq	r3, lr, r0, lsl #10
    135c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1360:	0b3b0b3a 	bleq	ec4050 <_Min_Stack_Size+0xec3c50>
    1364:	13491927 	movtne	r1, #39207	; 0x9927
    1368:	0000193c 	andeq	r1, r0, ip, lsr r9
    136c:	3f002e36 	svccc	0x00002e36
    1370:	3a0e0319 	bcc	381fdc <_Min_Stack_Size+0x381bdc>
    1374:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1378:	3c134919 	ldccc	9, cr4, [r3], {25}
    137c:	37000019 	smladcc	r0, r9, r0, r0
    1380:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1384:	0b3a0e03 	bleq	e84b98 <_Min_Stack_Size+0xe84798>
    1388:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    138c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1390:	3f012e38 	svccc	0x00012e38
    1394:	3a0e0319 	bcc	382000 <_Min_Stack_Size+0x381c00>
    1398:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    139c:	00193c19 	andseq	r3, r9, r9, lsl ip
    13a0:	11010000 	mrsne	r0, (UNDEF: 1)
    13a4:	130e2501 	movwne	r2, #58625	; 0xe501
    13a8:	1b0e030b 	blne	381fdc <_Min_Stack_Size+0x381bdc>
    13ac:	1117550e 	tstne	r7, lr, lsl #10
    13b0:	00171001 	andseq	r1, r7, r1
    13b4:	00240200 	eoreq	r0, r4, r0, lsl #4
    13b8:	0b3e0b0b 	bleq	f83fec <_Min_Stack_Size+0xf83bec>
    13bc:	00000803 	andeq	r0, r0, r3, lsl #16
    13c0:	0b002403 	bleq	a3d4 <_Min_Stack_Size+0x9fd4>
    13c4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    13c8:	0400000e 	streq	r0, [r0], #-14
    13cc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    13d0:	0b3b0b3a 	bleq	ec40c0 <_Min_Stack_Size+0xec3cc0>
    13d4:	00001349 	andeq	r1, r0, r9, asr #6
    13d8:	0b000f05 	bleq	4ff4 <_Min_Stack_Size+0x4bf4>
    13dc:	0013490b 	andseq	r4, r3, fp, lsl #18
    13e0:	01150600 	tsteq	r5, r0, lsl #12
    13e4:	13011927 	movwne	r1, #6439	; 0x1927
    13e8:	05070000 	streq	r0, [r7, #-0]
    13ec:	00134900 	andseq	r4, r3, r0, lsl #18
    13f0:	000f0800 	andeq	r0, pc, r0, lsl #16
    13f4:	00000b0b 	andeq	r0, r0, fp, lsl #22
    13f8:	03002e09 	movweq	r2, #3593	; 0xe09
    13fc:	3b0b3a0e 	blcc	2cfc3c <_Min_Stack_Size+0x2cf83c>
    1400:	11192705 	tstne	r9, r5, lsl #14
    1404:	40061201 	andmi	r1, r6, r1, lsl #4
    1408:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    140c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    1410:	03193f01 	tsteq	r9, #1, 30
    1414:	3b0b3a0e 	blcc	2cfc54 <_Min_Stack_Size+0x2cf854>
    1418:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    141c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1420:	97184006 	ldrls	r4, [r8, -r6]
    1424:	13011942 	movwne	r1, #6466	; 0x1942
    1428:	050b0000 	streq	r0, [fp, #-0]
    142c:	3a0e0300 	bcc	382034 <_Min_Stack_Size+0x381c34>
    1430:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1434:	00170213 	andseq	r0, r7, r3, lsl r2
    1438:	00050c00 	andeq	r0, r5, r0, lsl #24
    143c:	0b3a0e03 	bleq	e84c50 <_Min_Stack_Size+0xe84850>
    1440:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1444:	00001802 	andeq	r1, r0, r2, lsl #16
    1448:	3f002e0d 	svccc	0x00002e0d
    144c:	3a0e0319 	bcc	3820b8 <_Min_Stack_Size+0x381cb8>
    1450:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1454:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1458:	97184006 	ldrls	r4, [r8, -r6]
    145c:	00001942 	andeq	r1, r0, r2, asr #18
    1460:	3f002e0e 	svccc	0x00002e0e
    1464:	3a0e0319 	bcc	3820d0 <_Min_Stack_Size+0x381cd0>
    1468:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    146c:	11134919 	tstne	r3, r9, lsl r9
    1470:	40061201 	andmi	r1, r6, r1, lsl #4
    1474:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1478:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    147c:	3a0e0301 	bcc	382088 <_Min_Stack_Size+0x381c88>
    1480:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1484:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1488:	97184006 	ldrls	r4, [r8, -r6]
    148c:	13011942 	movwne	r1, #6466	; 0x1942
    1490:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
    1494:	11000182 	smlabbne	r0, r2, r1, r0
    1498:	00133101 	andseq	r3, r3, r1, lsl #2
    149c:	012e1100 	teqeq	lr, r0, lsl #2
    14a0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    14a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    14a8:	01111927 	tsteq	r1, r7, lsr #18
    14ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    14b0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    14b4:	12000013 	andne	r0, r0, #19
    14b8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    14bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    14c0:	17021349 	strne	r1, [r2, -r9, asr #6]
    14c4:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
    14c8:	11000182 	smlabbne	r0, r2, r1, r0
    14cc:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    14d0:	00001331 	andeq	r1, r0, r1, lsr r3
    14d4:	01828914 	orreq	r8, r2, r4, lsl r9
    14d8:	95011101 	strls	r1, [r1, #-257]	; 0x101
    14dc:	13311942 	teqne	r1, #1081344	; 0x108000
    14e0:	8a150000 	bhi	5414e8 <_Min_Stack_Size+0x5410e8>
    14e4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    14e8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    14ec:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    14f0:	03193f01 	tsteq	r9, #1, 30
    14f4:	3b0b3a0e 	blcc	2cfd34 <_Min_Stack_Size+0x2cf934>
    14f8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    14fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1500:	97184006 	ldrls	r4, [r8, -r6]
    1504:	13011942 	movwne	r1, #6466	; 0x1942
    1508:	0b170000 	bleq	5c1510 <_Min_Stack_Size+0x5c1110>
    150c:	01175501 	tsteq	r7, r1, lsl #10
    1510:	18000013 	stmdane	r0, {r0, r1, r4}
    1514:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1518:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    151c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1520:	34190000 	ldrcc	r0, [r9], #-0
    1524:	3a0e0300 	bcc	38212c <_Min_Stack_Size+0x381d2c>
    1528:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    152c:	000d1c13 	andeq	r1, sp, r3, lsl ip
    1530:	00351a00 	eorseq	r1, r5, r0, lsl #20
    1534:	00001349 	andeq	r1, r0, r9, asr #6
    1538:	4900261b 	stmdbmi	r0, {r0, r1, r3, r4, r9, sl, sp}
    153c:	1c000013 	stcne	0, cr0, [r0], {19}
    1540:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1544:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1548:	17021349 	strne	r1, [r2, -r9, asr #6]
    154c:	341d0000 	ldrcc	r0, [sp], #-0
    1550:	3a0e0300 	bcc	382158 <_Min_Stack_Size+0x381d58>
    1554:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1558:	00180213 	andseq	r0, r8, r3, lsl r2
    155c:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1560:	0b3a0e03 	bleq	e84d74 <_Min_Stack_Size+0xe84974>
    1564:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1568:	00000d1c 	andeq	r0, r0, ip, lsl sp
    156c:	0300341f 	movweq	r3, #1055	; 0x41f
    1570:	3b0b3a0e 	blcc	2cfdb0 <_Min_Stack_Size+0x2cf9b0>
    1574:	3f13490b 	svccc	0x0013490b
    1578:	00193c19 	andseq	r3, r9, r9, lsl ip
    157c:	002e2000 	eoreq	r2, lr, r0
    1580:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1584:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1588:	13491927 	movtne	r1, #39207	; 0x9927
    158c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1590:	01110100 	tsteq	r1, r0, lsl #2
    1594:	0b130e25 	bleq	4c4e30 <_Min_Stack_Size+0x4c4a30>
    1598:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    159c:	01111755 	tsteq	r1, r5, asr r7
    15a0:	00001710 	andeq	r1, r0, r0, lsl r7
    15a4:	03001602 	movweq	r1, #1538	; 0x602
    15a8:	3b0b3a0e 	blcc	2cfde8 <_Min_Stack_Size+0x2cf9e8>
    15ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    15b0:	00240300 	eoreq	r0, r4, r0, lsl #6
    15b4:	0b3e0b0b 	bleq	f841e8 <_Min_Stack_Size+0xf83de8>
    15b8:	00000e03 	andeq	r0, r0, r3, lsl #28
    15bc:	0b002404 	bleq	a5d4 <_Min_Stack_Size+0xa1d4>
    15c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    15c4:	05000008 	streq	r0, [r0, #-8]
    15c8:	0b0b000f 	bleq	2c160c <_Min_Stack_Size+0x2c120c>
    15cc:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    15d0:	03193f01 	tsteq	r9, #1, 30
    15d4:	3b0b3a0e 	blcc	2cfe14 <_Min_Stack_Size+0x2cfa14>
    15d8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    15dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    15e0:	97184006 	ldrls	r4, [r8, -r6]
    15e4:	13011942 	movwne	r1, #6466	; 0x1942
    15e8:	05070000 	streq	r0, [r7, #-0]
    15ec:	3a0e0300 	bcc	3821f4 <_Min_Stack_Size+0x381df4>
    15f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15f4:	00170213 	andseq	r0, r7, r3, lsl r2
    15f8:	00340800 	eorseq	r0, r4, r0, lsl #16
    15fc:	0b3a0e03 	bleq	e84e10 <_Min_Stack_Size+0xe84a10>
    1600:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1604:	00001702 	andeq	r1, r0, r2, lsl #14
    1608:	03003409 	movweq	r3, #1033	; 0x409
    160c:	3b0b3a0e 	blcc	2cfe4c <_Min_Stack_Size+0x2cfa4c>
    1610:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1614:	0a000018 	beq	167c <_Min_Stack_Size+0x127c>
    1618:	00018289 	andeq	r8, r1, r9, lsl #5
    161c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1620:	0f0b0000 	svceq	0x000b0000
    1624:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1628:	0c000013 	stceq	0, cr0, [r0], {19}
    162c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1630:	0b3a0e03 	bleq	e84e44 <_Min_Stack_Size+0xe84a44>
    1634:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1638:	06120111 			; <UNDEFINED> instruction: 0x06120111
    163c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1640:	00130119 	andseq	r0, r3, r9, lsl r1
    1644:	00050d00 	andeq	r0, r5, r0, lsl #26
    1648:	0b3a0803 	bleq	e8365c <_Min_Stack_Size+0xe8325c>
    164c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1650:	00001702 	andeq	r1, r0, r2, lsl #14
    1654:	3f002e0e 	svccc	0x00002e0e
    1658:	3a0e0319 	bcc	3822c4 <_Min_Stack_Size+0x381ec4>
    165c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1660:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1664:	97184006 	ldrls	r4, [r8, -r6]
    1668:	00001942 	andeq	r1, r0, r2, asr #18
    166c:	3f002e0f 	svccc	0x00002e0f
    1670:	3a0e0319 	bcc	3822dc <_Min_Stack_Size+0x381edc>
    1674:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1678:	11134919 	tstne	r3, r9, lsl r9
    167c:	40061201 	andmi	r1, r6, r1, lsl #4
    1680:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1684:	01100000 	tsteq	r0, r0
    1688:	01134901 	tsteq	r3, r1, lsl #18
    168c:	11000013 	tstne	r0, r3, lsl r0
    1690:	13490021 	movtne	r0, #36897	; 0x9021
    1694:	0000062f 	andeq	r0, r0, pc, lsr #12
    1698:	3f002e12 	svccc	0x00002e12
    169c:	3a0e0319 	bcc	382308 <_Min_Stack_Size+0x381f08>
    16a0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    16a4:	00193c19 	andseq	r3, r9, r9, lsl ip
    16a8:	002e1300 	eoreq	r1, lr, r0, lsl #6
    16ac:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    16b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    16b4:	13491927 	movtne	r1, #39207	; 0x9927
    16b8:	0000193c 	andeq	r1, r0, ip, lsr r9
    16bc:	3f002e14 	svccc	0x00002e14
    16c0:	3a0e0319 	bcc	38232c <_Min_Stack_Size+0x381f2c>
    16c4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    16c8:	3c134919 	ldccc	9, cr4, [r3], {25}
    16cc:	00000019 	andeq	r0, r0, r9, lsl r0
    16d0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    16d4:	030b130e 	movweq	r1, #45838	; 0xb30e
    16d8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    16dc:	10011117 	andne	r1, r1, r7, lsl r1
    16e0:	02000017 	andeq	r0, r0, #23
    16e4:	0b0b0024 	bleq	2c177c <_Min_Stack_Size+0x2c137c>
    16e8:	0e030b3e 	vmoveq.16	d3[0], r0
    16ec:	16030000 	strne	r0, [r3], -r0
    16f0:	3a0e0300 	bcc	3822f8 <_Min_Stack_Size+0x381ef8>
    16f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16f8:	04000013 	streq	r0, [r0], #-19
    16fc:	0b0b0024 	bleq	2c1794 <_Min_Stack_Size+0x2c1394>
    1700:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1704:	13050000 	movwne	r0, #20480	; 0x5000
    1708:	3a050b01 	bcc	144314 <_Min_Stack_Size+0x143f14>
    170c:	01053b0b 	tsteq	r5, fp, lsl #22
    1710:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1714:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1718:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    171c:	0b381349 	bleq	e06448 <_Min_Stack_Size+0xe06048>
    1720:	0d070000 	stceq	0, cr0, [r7, #-0]
    1724:	3a0e0300 	bcc	38232c <_Min_Stack_Size+0x381f2c>
    1728:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    172c:	00053813 	andeq	r3, r5, r3, lsl r8
    1730:	000d0800 	andeq	r0, sp, r0, lsl #16
    1734:	0b3a0803 	bleq	e83748 <_Min_Stack_Size+0xe83348>
    1738:	1349053b 	movtne	r0, #38203	; 0x953b
    173c:	00000538 	andeq	r0, r0, r8, lsr r5
    1740:	49010109 	stmdbmi	r1, {r0, r3, r8}
    1744:	00130113 	andseq	r0, r3, r3, lsl r1
    1748:	00210a00 	eoreq	r0, r1, r0, lsl #20
    174c:	0b2f1349 	bleq	bc6478 <_Min_Stack_Size+0xbc6078>
    1750:	350b0000 	strcc	r0, [fp, #-0]
    1754:	00134900 	andseq	r4, r3, r0, lsl #18
    1758:	00210c00 	eoreq	r0, r1, r0, lsl #24
    175c:	052f1349 	streq	r1, [pc, #-841]!	; 141b <_Min_Stack_Size+0x101b>
    1760:	160d0000 	strne	r0, [sp], -r0
    1764:	3a0e0300 	bcc	38236c <_Min_Stack_Size+0x381f6c>
    1768:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    176c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1770:	0b0b0113 	bleq	2c1bc4 <_Min_Stack_Size+0x2c17c4>
    1774:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1778:	00001301 	andeq	r1, r0, r1, lsl #6
    177c:	03000d0f 	movweq	r0, #3343	; 0xd0f
    1780:	3b0b3a08 	blcc	2cffa8 <_Min_Stack_Size+0x2cfba8>
    1784:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1788:	1000000b 	andne	r0, r0, fp
    178c:	13490026 	movtne	r0, #36902	; 0x9026
    1790:	04110000 	ldreq	r0, [r1], #-0
    1794:	3a0b0b01 	bcc	2c43a0 <_Min_Stack_Size+0x2c3fa0>
    1798:	01053b0b 	tsteq	r5, fp, lsl #22
    179c:	12000013 	andne	r0, r0, #19
    17a0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    17a4:	00000d1c 	andeq	r0, r0, ip, lsl sp
    17a8:	0b011313 	bleq	463fc <_Min_Stack_Size+0x45ffc>
    17ac:	3b0b3a0b 	blcc	2cffe0 <_Min_Stack_Size+0x2cfbe0>
    17b0:	0013010b 	andseq	r0, r3, fp, lsl #2
    17b4:	000d1400 	andeq	r1, sp, r0, lsl #8
    17b8:	0b3a0e03 	bleq	e84fcc <_Min_Stack_Size+0xe84bcc>
    17bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    17c0:	00000b38 	andeq	r0, r0, r8, lsr fp
    17c4:	3f012e15 	svccc	0x00012e15
    17c8:	3a0e0319 	bcc	382434 <_Min_Stack_Size+0x382034>
    17cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    17d0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    17d4:	97184006 	ldrls	r4, [r8, -r6]
    17d8:	13011942 	movwne	r1, #6466	; 0x1942
    17dc:	05160000 	ldreq	r0, [r6, #-0]
    17e0:	3a0e0300 	bcc	3823e8 <_Min_Stack_Size+0x381fe8>
    17e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17e8:	00170213 	andseq	r0, r7, r3, lsl r2
    17ec:	00341700 	eorseq	r1, r4, r0, lsl #14
    17f0:	0b3a0e03 	bleq	e85004 <_Min_Stack_Size+0xe84c04>
    17f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    17f8:	00001702 	andeq	r1, r0, r2, lsl #14
    17fc:	0b000f18 	bleq	5464 <_Min_Stack_Size+0x5064>
    1800:	0013490b 	andseq	r4, r3, fp, lsl #18
    1804:	00051900 	andeq	r1, r5, r0, lsl #18
    1808:	0b3a0e03 	bleq	e8501c <_Min_Stack_Size+0xe84c1c>
    180c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1810:	00001802 	andeq	r1, r0, r2, lsl #16
    1814:	0300341a 	movweq	r3, #1050	; 0x41a
    1818:	3b0b3a0e 	blcc	2d0058 <_Min_Stack_Size+0x2cfc58>
    181c:	3f134905 	svccc	0x00134905
    1820:	00193c19 	andseq	r3, r9, r9, lsl ip
    1824:	11010000 	mrsne	r0, (UNDEF: 1)
    1828:	130e2501 	movwne	r2, #58625	; 0xe501
    182c:	1b0e030b 	blne	382460 <_Min_Stack_Size+0x382060>
    1830:	1117550e 	tstne	r7, lr, lsl #10
    1834:	00171001 	andseq	r1, r7, r1
    1838:	00240200 	eoreq	r0, r4, r0, lsl #4
    183c:	0b3e0b0b 	bleq	f84470 <_Min_Stack_Size+0xf84070>
    1840:	00000e03 	andeq	r0, r0, r3, lsl #28
    1844:	03001603 	movweq	r1, #1539	; 0x603
    1848:	3b0b3a0e 	blcc	2d0088 <_Min_Stack_Size+0x2cfc88>
    184c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1850:	00240400 	eoreq	r0, r4, r0, lsl #8
    1854:	0b3e0b0b 	bleq	f84488 <_Min_Stack_Size+0xf84088>
    1858:	00000803 	andeq	r0, r0, r3, lsl #16
    185c:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    1860:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1864:	13490101 	movtne	r0, #37121	; 0x9101
    1868:	00001301 	andeq	r1, r0, r1, lsl #6
    186c:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
    1870:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1874:	01040800 	tsteq	r4, r0, lsl #16
    1878:	0b3a0b0b 	bleq	e844ac <_Min_Stack_Size+0xe840ac>
    187c:	1301053b 	movwne	r0, #5435	; 0x153b
    1880:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
    1884:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1888:	0a00000d 	beq	18c4 <_Min_Stack_Size+0x14c4>
    188c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1890:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1894:	00001349 	andeq	r1, r0, r9, asr #6
    1898:	0b01130b 	bleq	464cc <_Min_Stack_Size+0x460cc>
    189c:	3b0b3a0b 	blcc	2d00d0 <_Min_Stack_Size+0x2cfcd0>
    18a0:	00130105 	andseq	r0, r3, r5, lsl #2
    18a4:	000d0c00 	andeq	r0, sp, r0, lsl #24
    18a8:	0b3a0e03 	bleq	e850bc <_Min_Stack_Size+0xe84cbc>
    18ac:	1349053b 	movtne	r0, #38203	; 0x953b
    18b0:	00000b38 	andeq	r0, r0, r8, lsr fp
    18b4:	03000d0d 	movweq	r0, #3341	; 0xd0d
    18b8:	3b0b3a08 	blcc	2d00e0 <_Min_Stack_Size+0x2cfce0>
    18bc:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    18c0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    18c4:	0b0b0104 	bleq	2c1cdc <_Min_Stack_Size+0x2c18dc>
    18c8:	0b3b0b3a 	bleq	ec45b8 <_Min_Stack_Size+0xec41b8>
    18cc:	00001301 	andeq	r1, r0, r1, lsl #6
    18d0:	0b01130f 	bleq	46514 <_Min_Stack_Size+0x46114>
    18d4:	3b0b3a0b 	blcc	2d0108 <_Min_Stack_Size+0x2cfd08>
    18d8:	0013010b 	andseq	r0, r3, fp, lsl #2
    18dc:	000d1000 	andeq	r1, sp, r0
    18e0:	0b3a0e03 	bleq	e850f4 <_Min_Stack_Size+0xe84cf4>
    18e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18e8:	00000b38 	andeq	r0, r0, r8, lsr fp
    18ec:	3f012e11 	svccc	0x00012e11
    18f0:	3a0e0319 	bcc	38255c <_Min_Stack_Size+0x38215c>
    18f4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    18f8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    18fc:	97184006 	ldrls	r4, [r8, -r6]
    1900:	13011942 	movwne	r1, #6466	; 0x1942
    1904:	05120000 	ldreq	r0, [r2, #-0]
    1908:	3a0e0300 	bcc	382510 <_Min_Stack_Size+0x382110>
    190c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1910:	00170213 	andseq	r0, r7, r3, lsl r2
    1914:	82891300 	addhi	r1, r9, #0, 6
    1918:	01110101 	tsteq	r1, r1, lsl #2
    191c:	13011331 	movwne	r1, #4913	; 0x1331
    1920:	8a140000 	bhi	501928 <_Min_Stack_Size+0x501528>
    1924:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    1928:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    192c:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    1930:	11010182 	smlabbne	r1, r2, r1, r0
    1934:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    1938:	13011331 	movwne	r1, #4913	; 0x1331
    193c:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    1940:	11010182 	smlabbne	r1, r2, r1, r0
    1944:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    1948:	00001331 	andeq	r1, r0, r1, lsr r3
    194c:	0b000f17 	bleq	55b0 <_Min_Stack_Size+0x51b0>
    1950:	0013490b 	andseq	r4, r3, fp, lsl #18
    1954:	00051800 	andeq	r1, r5, r0, lsl #16
    1958:	0b3a0e03 	bleq	e8516c <_Min_Stack_Size+0xe84d6c>
    195c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1960:	00001802 	andeq	r1, r0, r2, lsl #16
    1964:	03003419 	movweq	r3, #1049	; 0x419
    1968:	3b0b3a0e 	blcc	2d01a8 <_Min_Stack_Size+0x2cfda8>
    196c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1970:	1a000017 	bne	19d4 <_Min_Stack_Size+0x15d4>
    1974:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1978:	0b3b0b3a 	bleq	ec4668 <_Min_Stack_Size+0xec4268>
    197c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1980:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    1984:	03193f01 	tsteq	r9, #1, 30
    1988:	3b0b3a0e 	blcc	2d01c8 <_Min_Stack_Size+0x2cfdc8>
    198c:	11192705 	tstne	r9, r5, lsl #14
    1990:	40061201 	andmi	r1, r6, r1, lsl #4
    1994:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1998:	00001301 	andeq	r1, r0, r1, lsl #6
    199c:	0300051c 	movweq	r0, #1308	; 0x51c
    19a0:	3b0b3a0e 	blcc	2d01e0 <_Min_Stack_Size+0x2cfde0>
    19a4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    19a8:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
    19ac:	08030034 	stmdaeq	r3, {r2, r4, r5}
    19b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    19b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    19b8:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    19bc:	03193f01 	tsteq	r9, #1, 30
    19c0:	3b0b3a0e 	blcc	2d0200 <_Min_Stack_Size+0x2cfe00>
    19c4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    19c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    19cc:	97184006 	ldrls	r4, [r8, -r6]
    19d0:	13011942 	movwne	r1, #6466	; 0x1942
    19d4:	051f0000 	ldreq	r0, [pc, #-0]	; 19dc <_Min_Stack_Size+0x15dc>
    19d8:	3a0e0300 	bcc	3825e0 <_Min_Stack_Size+0x3821e0>
    19dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    19e0:	00170213 	andseq	r0, r7, r3, lsl r2
    19e4:	00342000 	eorseq	r2, r4, r0
    19e8:	0b3a0e03 	bleq	e851fc <_Min_Stack_Size+0xe84dfc>
    19ec:	1349053b 	movtne	r0, #38203	; 0x953b
    19f0:	00001702 	andeq	r1, r0, r2, lsl #14
    19f4:	03003421 	movweq	r3, #1057	; 0x421
    19f8:	3b0b3a0e 	blcc	2d0238 <_Min_Stack_Size+0x2cfe38>
    19fc:	3f134905 	svccc	0x00134905
    1a00:	00193c19 	andseq	r3, r9, r9, lsl ip
    1a04:	012e2200 	teqeq	lr, r0, lsl #4
    1a08:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1a0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1a10:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1a14:	05230000 	streq	r0, [r3, #-0]!
    1a18:	00134900 	andseq	r4, r3, r0, lsl #18
    1a1c:	11010000 	mrsne	r0, (UNDEF: 1)
    1a20:	130e2501 	movwne	r2, #58625	; 0xe501
    1a24:	1b0e030b 	blne	382658 <_Min_Stack_Size+0x382258>
    1a28:	1117550e 	tstne	r7, lr, lsl #10
    1a2c:	00171001 	andseq	r1, r7, r1
    1a30:	00240200 	eoreq	r0, r4, r0, lsl #4
    1a34:	0b3e0b0b 	bleq	f84668 <_Min_Stack_Size+0xf84268>
    1a38:	00000e03 	andeq	r0, r0, r3, lsl #28
    1a3c:	03001603 	movweq	r1, #1539	; 0x603
    1a40:	3b0b3a0e 	blcc	2d0280 <_Min_Stack_Size+0x2cfe80>
    1a44:	0013490b 	andseq	r4, r3, fp, lsl #18
    1a48:	00240400 	eoreq	r0, r4, r0, lsl #8
    1a4c:	0b3e0b0b 	bleq	f84680 <_Min_Stack_Size+0xf84280>
    1a50:	00000803 	andeq	r0, r0, r3, lsl #16
    1a54:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    1a58:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1a5c:	13490101 	movtne	r0, #37121	; 0x9101
    1a60:	00001301 	andeq	r1, r0, r1, lsl #6
    1a64:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
    1a68:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1a6c:	01040800 	tsteq	r4, r0, lsl #16
    1a70:	0b3a0b0b 	bleq	e846a4 <_Min_Stack_Size+0xe842a4>
    1a74:	1301053b 	movwne	r0, #5435	; 0x153b
    1a78:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
    1a7c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1a80:	0a00000d 	beq	1abc <_Min_Stack_Size+0x16bc>
    1a84:	08030028 	stmdaeq	r3, {r3, r5}
    1a88:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1a8c:	0300160b 	movweq	r1, #1547	; 0x60b
    1a90:	3b0b3a0e 	blcc	2d02d0 <_Min_Stack_Size+0x2cfed0>
    1a94:	00134905 	andseq	r4, r3, r5, lsl #18
    1a98:	01130c00 	tsteq	r3, r0, lsl #24
    1a9c:	0b3a0b0b 	bleq	e846d0 <_Min_Stack_Size+0xe842d0>
    1aa0:	1301053b 	movwne	r0, #5435	; 0x153b
    1aa4:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    1aa8:	3a080300 	bcc	2026b0 <_Min_Stack_Size+0x2022b0>
    1aac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ab0:	000b3813 	andeq	r3, fp, r3, lsl r8
    1ab4:	000d0e00 	andeq	r0, sp, r0, lsl #28
    1ab8:	0b3a0e03 	bleq	e852cc <_Min_Stack_Size+0xe84ecc>
    1abc:	1349053b 	movtne	r0, #38203	; 0x953b
    1ac0:	00000b38 	andeq	r0, r0, r8, lsr fp
    1ac4:	0b01130f 	bleq	46708 <_Min_Stack_Size+0x46308>
    1ac8:	3b0b3a0b 	blcc	2d02fc <_Min_Stack_Size+0x2cfefc>
    1acc:	0013010b 	andseq	r0, r3, fp, lsl #2
    1ad0:	000d1000 	andeq	r1, sp, r0
    1ad4:	0b3a0e03 	bleq	e852e8 <_Min_Stack_Size+0xe84ee8>
    1ad8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1adc:	00000b38 	andeq	r0, r0, r8, lsr fp
    1ae0:	3f012e11 	svccc	0x00012e11
    1ae4:	3a0e0319 	bcc	382750 <_Min_Stack_Size+0x382350>
    1ae8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1aec:	20134919 	andscs	r4, r3, r9, lsl r9
    1af0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1af4:	00051200 	andeq	r1, r5, r0, lsl #4
    1af8:	0b3a0e03 	bleq	e8530c <_Min_Stack_Size+0xe84f0c>
    1afc:	1349053b 	movtne	r0, #38203	; 0x953b
    1b00:	34130000 	ldrcc	r0, [r3], #-0
    1b04:	3a080300 	bcc	20270c <_Min_Stack_Size+0x20230c>
    1b08:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b0c:	14000013 	strne	r0, [r0], #-19
    1b10:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1b14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1b18:	00001349 	andeq	r1, r0, r9, asr #6
    1b1c:	3f002e15 	svccc	0x00002e15
    1b20:	3a0e0319 	bcc	38278c <_Min_Stack_Size+0x38238c>
    1b24:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1b28:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1b2c:	97184006 	ldrls	r4, [r8, -r6]
    1b30:	00001942 	andeq	r1, r0, r2, asr #18
    1b34:	3f012e16 	svccc	0x00012e16
    1b38:	3a0e0319 	bcc	3827a4 <_Min_Stack_Size+0x3823a4>
    1b3c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1b40:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1b44:	97184006 	ldrls	r4, [r8, -r6]
    1b48:	13011942 	movwne	r1, #6466	; 0x1942
    1b4c:	05170000 	ldreq	r0, [r7, #-0]
    1b50:	3a0e0300 	bcc	382758 <_Min_Stack_Size+0x382358>
    1b54:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b58:	00180213 	andseq	r0, r8, r3, lsl r2
    1b5c:	012e1800 	teqeq	lr, r0, lsl #16
    1b60:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1b64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1b68:	13491927 	movtne	r1, #39207	; 0x9927
    1b6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1b70:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1b74:	00130119 	andseq	r0, r3, r9, lsl r1
    1b78:	00341900 	eorseq	r1, r4, r0, lsl #18
    1b7c:	0b3a0e03 	bleq	e85390 <_Min_Stack_Size+0xe84f90>
    1b80:	1349053b 	movtne	r0, #38203	; 0x953b
    1b84:	00001802 	andeq	r1, r0, r2, lsl #16
    1b88:	0300341a 	movweq	r3, #1050	; 0x41a
    1b8c:	3b0b3a0e 	blcc	2d03cc <_Min_Stack_Size+0x2cffcc>
    1b90:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1b94:	1b000017 	blne	1bf8 <_Min_Stack_Size+0x17f8>
    1b98:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1b9c:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1ba0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    1ba4:	00001301 	andeq	r1, r0, r1, lsl #6
    1ba8:	3100051c 	tstcc	r0, ip, lsl r5
    1bac:	000b1c13 	andeq	r1, fp, r3, lsl ip
    1bb0:	010b1d00 	tsteq	fp, r0, lsl #26
    1bb4:	00001755 	andeq	r1, r0, r5, asr r7
    1bb8:	3100341e 	tstcc	r0, lr, lsl r4
    1bbc:	00170213 	andseq	r0, r7, r3, lsl r2
    1bc0:	011d1f00 	tsteq	sp, r0, lsl #30
    1bc4:	01111331 	tsteq	r1, r1, lsr r3
    1bc8:	0b580612 	bleq	1603418 <_Min_Stack_Size+0x1603018>
    1bcc:	00000559 	andeq	r0, r0, r9, asr r5
    1bd0:	31000520 	tstcc	r0, r0, lsr #10
    1bd4:	00170213 	andseq	r0, r7, r3, lsl r2
    1bd8:	010b2100 	mrseq	r2, (UNDEF: 27)
    1bdc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1be0:	05220000 	streq	r0, [r2, #-0]!
    1be4:	3a0e0300 	bcc	3827ec <_Min_Stack_Size+0x3823ec>
    1be8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bec:	00170213 	andseq	r0, r7, r3, lsl r2
    1bf0:	002e2300 	eoreq	r2, lr, r0, lsl #6
    1bf4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1bf8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1bfc:	13491927 	movtne	r1, #39207	; 0x9927
    1c00:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1c04:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1c08:	24000019 	strcs	r0, [r0], #-25
    1c0c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1c10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1c14:	17021349 	strne	r1, [r2, -r9, asr #6]
    1c18:	0f250000 	svceq	0x00250000
    1c1c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1c20:	26000013 			; <UNDEFINED> instruction: 0x26000013
    1c24:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    1c28:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1c2c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1c30:	00130119 	andseq	r0, r3, r9, lsl r1
    1c34:	002e2700 	eoreq	r2, lr, r0, lsl #14
    1c38:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1c3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1c40:	01111927 	tsteq	r1, r7, lsr #18
    1c44:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1c48:	00194297 	mulseq	r9, r7, r2
    1c4c:	00342800 	eorseq	r2, r4, r0, lsl #16
    1c50:	0b3a0e03 	bleq	e85464 <_Min_Stack_Size+0xe85064>
    1c54:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c58:	00001802 	andeq	r1, r0, r2, lsl #16
    1c5c:	49002629 	stmdbmi	r0, {r0, r3, r5, r9, sl, sp}
    1c60:	2a000013 	bcs	1cb4 <_Min_Stack_Size+0x18b4>
    1c64:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1c68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1c6c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1c70:	0000193c 	andeq	r1, r0, ip, lsr r9
    1c74:	01110100 	tsteq	r1, r0, lsl #2
    1c78:	0b130e25 	bleq	4c5514 <_Min_Stack_Size+0x4c5114>
    1c7c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1c80:	01111755 	tsteq	r1, r5, asr r7
    1c84:	00001710 	andeq	r1, r0, r0, lsl r7
    1c88:	0b002402 	bleq	ac98 <_Min_Stack_Size+0xa898>
    1c8c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1c90:	0300000e 	movweq	r0, #14
    1c94:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1c98:	0b3b0b3a 	bleq	ec4988 <_Min_Stack_Size+0xec4588>
    1c9c:	00001349 	andeq	r1, r0, r9, asr #6
    1ca0:	0b002404 	bleq	acb8 <_Min_Stack_Size+0xa8b8>
    1ca4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1ca8:	05000008 	streq	r0, [r0, #-8]
    1cac:	13490035 	movtne	r0, #36917	; 0x9035
    1cb0:	04060000 	streq	r0, [r6], #-0
    1cb4:	3a0b0b01 	bcc	2c48c0 <_Min_Stack_Size+0x2c44c0>
    1cb8:	01053b0b 	tsteq	r5, fp, lsl #22
    1cbc:	07000013 	smladeq	r0, r3, r0, r0
    1cc0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1cc4:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1cc8:	03002808 	movweq	r2, #2056	; 0x808
    1ccc:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1cd0:	00160900 	andseq	r0, r6, r0, lsl #18
    1cd4:	0b3a0e03 	bleq	e854e8 <_Min_Stack_Size+0xe850e8>
    1cd8:	1349053b 	movtne	r0, #38203	; 0x953b
    1cdc:	130a0000 	movwne	r0, #40960	; 0xa000
    1ce0:	3a0b0b01 	bcc	2c48ec <_Min_Stack_Size+0x2c44ec>
    1ce4:	01053b0b 	tsteq	r5, fp, lsl #22
    1ce8:	0b000013 	bleq	1d3c <_Min_Stack_Size+0x193c>
    1cec:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1cf0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1cf4:	0b381349 	bleq	e06a20 <_Min_Stack_Size+0xe06620>
    1cf8:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1cfc:	3a0e0300 	bcc	382904 <_Min_Stack_Size+0x382504>
    1d00:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d04:	000b3813 	andeq	r3, fp, r3, lsl r8
    1d08:	01130d00 	tsteq	r3, r0, lsl #26
    1d0c:	0b3a0b0b 	bleq	e84940 <_Min_Stack_Size+0xe84540>
    1d10:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1d14:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    1d18:	3a0e0300 	bcc	382920 <_Min_Stack_Size+0x382520>
    1d1c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d20:	000b3813 	andeq	r3, fp, r3, lsl r8
    1d24:	012e0f00 	teqeq	lr, r0, lsl #30
    1d28:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1d2c:	0b3b0b3a 	bleq	ec4a1c <_Min_Stack_Size+0xec461c>
    1d30:	01111927 	tsteq	r1, r7, lsr #18
    1d34:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1d38:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1d3c:	10000013 	andne	r0, r0, r3, lsl r0
    1d40:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1d44:	0b3b0b3a 	bleq	ec4a34 <_Min_Stack_Size+0xec4634>
    1d48:	17021349 	strne	r1, [r2, -r9, asr #6]
    1d4c:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
    1d50:	11010182 	smlabbne	r1, r2, r1, r0
    1d54:	01133101 	tsteq	r3, r1, lsl #2
    1d58:	12000013 	andne	r0, r0, #19
    1d5c:	0001828a 	andeq	r8, r1, sl, lsl #5
    1d60:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    1d64:	13000018 	movwne	r0, #24
    1d68:	01018289 	smlabbeq	r1, r9, r2, r8
    1d6c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    1d70:	01133119 	tsteq	r3, r9, lsl r1
    1d74:	14000013 	strne	r0, [r0], #-19
    1d78:	01018289 	smlabbeq	r1, r9, r2, r8
    1d7c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    1d80:	00133119 	andseq	r3, r3, r9, lsl r1
    1d84:	000f1500 	andeq	r1, pc, r0, lsl #10
    1d88:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1d8c:	34160000 	ldrcc	r0, [r6], #-0
    1d90:	3a0e0300 	bcc	382998 <_Min_Stack_Size+0x382598>
    1d94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d98:	00170213 	andseq	r0, r7, r3, lsl r2
    1d9c:	00341700 	eorseq	r1, r4, r0, lsl #14
    1da0:	0b3a0e03 	bleq	e855b4 <_Min_Stack_Size+0xe851b4>
    1da4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1da8:	00001802 	andeq	r1, r0, r2, lsl #16
    1dac:	01828918 	orreq	r8, r2, r8, lsl r9
    1db0:	31011101 	tstcc	r1, r1, lsl #2
    1db4:	19000013 	stmdbne	r0, {r0, r1, r4}
    1db8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1dbc:	0b3a0e03 	bleq	e855d0 <_Min_Stack_Size+0xe851d0>
    1dc0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1dc4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1dc8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1dcc:	00130119 	andseq	r0, r3, r9, lsl r1
    1dd0:	00051a00 	andeq	r1, r5, r0, lsl #20
    1dd4:	0b3a0e03 	bleq	e855e8 <_Min_Stack_Size+0xe851e8>
    1dd8:	1349053b 	movtne	r0, #38203	; 0x953b
    1ddc:	00001802 	andeq	r1, r0, r2, lsl #16
    1de0:	0300051b 	movweq	r0, #1307	; 0x51b
    1de4:	3b0b3a0e 	blcc	2d0624 <_Min_Stack_Size+0x2d0224>
    1de8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1dec:	1c000017 	stcne	0, cr0, [r0], {23}
    1df0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1df4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1df8:	17021349 	strne	r1, [r2, -r9, asr #6]
    1dfc:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
    1e00:	03193f01 	tsteq	r9, #1, 30
    1e04:	3b0b3a0e 	blcc	2d0644 <_Min_Stack_Size+0x2d0244>
    1e08:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1e0c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1e10:	97184006 	ldrls	r4, [r8, -r6]
    1e14:	13011942 	movwne	r1, #6466	; 0x1942
    1e18:	341e0000 	ldrcc	r0, [lr], #-0
    1e1c:	3a0e0300 	bcc	382a24 <_Min_Stack_Size+0x382624>
    1e20:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e24:	1f000013 	svcne	0x00000013
    1e28:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1e2c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1e30:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1e34:	0000193c 	andeq	r1, r0, ip, lsr r9
    1e38:	3f012e20 	svccc	0x00012e20
    1e3c:	3a0e0319 	bcc	382aa8 <_Min_Stack_Size+0x3826a8>
    1e40:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1e44:	01193c19 	tsteq	r9, r9, lsl ip
    1e48:	21000013 	tstcs	r0, r3, lsl r0
    1e4c:	13490005 	movtne	r0, #36869	; 0x9005
    1e50:	01000000 	mrseq	r0, (UNDEF: 0)
    1e54:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1e58:	0e030b13 	vmoveq.32	d3[0], r0
    1e5c:	17550e1b 	smmlane	r5, fp, lr, r0
    1e60:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1e64:	24020000 	strcs	r0, [r2], #-0
    1e68:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1e6c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1e70:	00160300 	andseq	r0, r6, r0, lsl #6
    1e74:	0b3a0e03 	bleq	e85688 <_Min_Stack_Size+0xe85288>
    1e78:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e7c:	24040000 	strcs	r0, [r4], #-0
    1e80:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1e84:	0008030b 	andeq	r0, r8, fp, lsl #6
    1e88:	00350500 	eorseq	r0, r5, r0, lsl #10
    1e8c:	00001349 	andeq	r1, r0, r9, asr #6
    1e90:	49010106 	stmdbmi	r1, {r1, r2, r8}
    1e94:	00130113 	andseq	r0, r3, r3, lsl r1
    1e98:	00210700 	eoreq	r0, r1, r0, lsl #14
    1e9c:	0b2f1349 	bleq	bc6bc8 <_Min_Stack_Size+0xbc67c8>
    1ea0:	04080000 	streq	r0, [r8], #-0
    1ea4:	3a0b0b01 	bcc	2c4ab0 <_Min_Stack_Size+0x2c46b0>
    1ea8:	01053b0b 	tsteq	r5, fp, lsl #22
    1eac:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1eb0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1eb4:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1eb8:	0300280a 	movweq	r2, #2058	; 0x80a
    1ebc:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1ec0:	00160b00 	andseq	r0, r6, r0, lsl #22
    1ec4:	0b3a0e03 	bleq	e856d8 <_Min_Stack_Size+0xe852d8>
    1ec8:	1349053b 	movtne	r0, #38203	; 0x953b
    1ecc:	130c0000 	movwne	r0, #49152	; 0xc000
    1ed0:	3a0b0b01 	bcc	2c4adc <_Min_Stack_Size+0x2c46dc>
    1ed4:	01053b0b 	tsteq	r5, fp, lsl #22
    1ed8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1edc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1ee0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1ee4:	0b381349 	bleq	e06c10 <_Min_Stack_Size+0xe06810>
    1ee8:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    1eec:	3a080300 	bcc	202af4 <_Min_Stack_Size+0x2026f4>
    1ef0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ef4:	000b3813 	andeq	r3, fp, r3, lsl r8
    1ef8:	012e0f00 	teqeq	lr, r0, lsl #30
    1efc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1f00:	0b3b0b3a 	bleq	ec4bf0 <_Min_Stack_Size+0xec47f0>
    1f04:	01111927 	tsteq	r1, r7, lsr #18
    1f08:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1f0c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1f10:	10000013 	andne	r0, r0, r3, lsl r0
    1f14:	01018289 	smlabbeq	r1, r9, r2, r8
    1f18:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1f1c:	00001301 	andeq	r1, r0, r1, lsl #6
    1f20:	01828a11 	orreq	r8, r2, r1, lsl sl
    1f24:	91180200 	tstls	r8, r0, lsl #4
    1f28:	00001842 	andeq	r1, r0, r2, asr #16
    1f2c:	01828912 	orreq	r8, r2, r2, lsl r9
    1f30:	95011101 	strls	r1, [r1, #-257]	; 0x101
    1f34:	13311942 	teqne	r1, #1081344	; 0x108000
    1f38:	05130000 	ldreq	r0, [r3, #-0]
    1f3c:	3a0e0300 	bcc	382b44 <_Min_Stack_Size+0x382744>
    1f40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f44:	00180213 	andseq	r0, r8, r3, lsl r2
    1f48:	00051400 	andeq	r1, r5, r0, lsl #8
    1f4c:	0b3a0e03 	bleq	e85760 <_Min_Stack_Size+0xe85360>
    1f50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1f54:	00001702 	andeq	r1, r0, r2, lsl #14
    1f58:	03003415 	movweq	r3, #1045	; 0x415
    1f5c:	3b0b3a08 	blcc	2d0784 <_Min_Stack_Size+0x2d0384>
    1f60:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1f64:	16000017 			; <UNDEFINED> instruction: 0x16000017
    1f68:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1f6c:	0b3a0e03 	bleq	e85780 <_Min_Stack_Size+0xe85380>
    1f70:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1f74:	01111349 	tsteq	r1, r9, asr #6
    1f78:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1f7c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1f80:	17000013 	smladne	r0, r3, r0, r0
    1f84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1f88:	0b3b0b3a 	bleq	ec4c78 <_Min_Stack_Size+0xec4878>
    1f8c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1f90:	34180000 	ldrcc	r0, [r8], #-0
    1f94:	3a0e0300 	bcc	382b9c <_Min_Stack_Size+0x38279c>
    1f98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f9c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1fa0:	19000019 	stmdbne	r0, {r0, r3, r4}
    1fa4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1fa8:	0b3a0e03 	bleq	e857bc <_Min_Stack_Size+0xe853bc>
    1fac:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1fb0:	0000193c 	andeq	r1, r0, ip, lsr r9
    1fb4:	4900051a 	stmdbmi	r0, {r1, r3, r4, r8, sl}
    1fb8:	00000013 	andeq	r0, r0, r3, lsl r0
    1fbc:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1fc0:	030b130e 	movweq	r1, #45838	; 0xb30e
    1fc4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    1fc8:	10011117 	andne	r1, r1, r7, lsl r1
    1fcc:	02000017 	andeq	r0, r0, #23
    1fd0:	0b0b0024 	bleq	2c2068 <_Min_Stack_Size+0x2c1c68>
    1fd4:	0e030b3e 	vmoveq.16	d3[0], r0
    1fd8:	16030000 	strne	r0, [r3], -r0
    1fdc:	3a0e0300 	bcc	382be4 <_Min_Stack_Size+0x3827e4>
    1fe0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fe4:	04000013 	streq	r0, [r0], #-19
    1fe8:	0b0b0024 	bleq	2c2080 <_Min_Stack_Size+0x2c1c80>
    1fec:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1ff0:	35050000 	strcc	r0, [r5, #-0]
    1ff4:	00134900 	andseq	r4, r3, r0, lsl #18
    1ff8:	01040600 	tsteq	r4, r0, lsl #12
    1ffc:	0b3a0b0b 	bleq	e84c30 <_Min_Stack_Size+0xe84830>
    2000:	1301053b 	movwne	r0, #5435	; 0x153b
    2004:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    2008:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    200c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    2010:	08030028 	stmdaeq	r3, {r3, r5}
    2014:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2018:	03001609 	movweq	r1, #1545	; 0x609
    201c:	3b0b3a0e 	blcc	2d085c <_Min_Stack_Size+0x2d045c>
    2020:	00134905 	andseq	r4, r3, r5, lsl #18
    2024:	01130a00 	tsteq	r3, r0, lsl #20
    2028:	0b3a0b0b 	bleq	e84c5c <_Min_Stack_Size+0xe8485c>
    202c:	1301053b 	movwne	r0, #5435	; 0x153b
    2030:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    2034:	3a080300 	bcc	202c3c <_Min_Stack_Size+0x20283c>
    2038:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    203c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2040:	000d0c00 	andeq	r0, sp, r0, lsl #24
    2044:	0b3a0e03 	bleq	e85858 <_Min_Stack_Size+0xe85458>
    2048:	1349053b 	movtne	r0, #38203	; 0x953b
    204c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2050:	0b01130d 	bleq	46c8c <_Min_Stack_Size+0x4688c>
    2054:	3b0b3a0b 	blcc	2d0888 <_Min_Stack_Size+0x2d0488>
    2058:	0013010b 	andseq	r0, r3, fp, lsl #2
    205c:	000d0e00 	andeq	r0, sp, r0, lsl #28
    2060:	0b3a0e03 	bleq	e85874 <_Min_Stack_Size+0xe85474>
    2064:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2068:	00000b38 	andeq	r0, r0, r8, lsr fp
    206c:	3f012e0f 	svccc	0x00012e0f
    2070:	3a0e0319 	bcc	382cdc <_Min_Stack_Size+0x3828dc>
    2074:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2078:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    207c:	97184006 	ldrls	r4, [r8, -r6]
    2080:	13011942 	movwne	r1, #6466	; 0x1942
    2084:	05100000 	ldreq	r0, [r0, #-0]
    2088:	3a0e0300 	bcc	382c90 <_Min_Stack_Size+0x382890>
    208c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2090:	00170213 	andseq	r0, r7, r3, lsl r2
    2094:	82891100 	addhi	r1, r9, #0, 2
    2098:	01110101 	tsteq	r1, r1, lsl #2
    209c:	13011331 	movwne	r1, #4913	; 0x1331
    20a0:	8a120000 	bhi	4820a8 <_Min_Stack_Size+0x481ca8>
    20a4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    20a8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    20ac:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
    20b0:	11010182 	smlabbne	r1, r2, r1, r0
    20b4:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    20b8:	13011331 	movwne	r1, #4913	; 0x1331
    20bc:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    20c0:	11010182 	smlabbne	r1, r2, r1, r0
    20c4:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    20c8:	00001331 	andeq	r1, r0, r1, lsr r3
    20cc:	0b000f15 	bleq	5d28 <_Min_Stack_Size+0x5928>
    20d0:	0013490b 	andseq	r4, r3, fp, lsl #18
    20d4:	00341600 	eorseq	r1, r4, r0, lsl #12
    20d8:	0b3a0e03 	bleq	e858ec <_Min_Stack_Size+0xe854ec>
    20dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    20e0:	00001702 	andeq	r1, r0, r2, lsl #14
    20e4:	03003417 	movweq	r3, #1047	; 0x417
    20e8:	3b0b3a0e 	blcc	2d0928 <_Min_Stack_Size+0x2d0528>
    20ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    20f0:	18000018 	stmdane	r0, {r3, r4}
    20f4:	01018289 	smlabbeq	r1, r9, r2, r8
    20f8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    20fc:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2100:	03193f01 	tsteq	r9, #1, 30
    2104:	3b0b3a0e 	blcc	2d0944 <_Min_Stack_Size+0x2d0544>
    2108:	11192705 	tstne	r9, r5, lsl #14
    210c:	40061201 	andmi	r1, r6, r1, lsl #4
    2110:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2114:	00001301 	andeq	r1, r0, r1, lsl #6
    2118:	0300051a 	movweq	r0, #1306	; 0x51a
    211c:	3b0b3a0e 	blcc	2d095c <_Min_Stack_Size+0x2d055c>
    2120:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2124:	1b000018 	blne	218c <_Min_Stack_Size+0x1d8c>
    2128:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    212c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2130:	17021349 	strne	r1, [r2, -r9, asr #6]
    2134:	341c0000 	ldrcc	r0, [ip], #-0
    2138:	3a0e0300 	bcc	382d40 <_Min_Stack_Size+0x382940>
    213c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2140:	00170213 	andseq	r0, r7, r3, lsl r2
    2144:	012e1d00 	teqeq	lr, r0, lsl #26
    2148:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    214c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2150:	13491927 	movtne	r1, #39207	; 0x9927
    2154:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2158:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    215c:	00130119 	andseq	r0, r3, r9, lsl r1
    2160:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2164:	0b3a0803 	bleq	e84178 <_Min_Stack_Size+0xe83d78>
    2168:	1349053b 	movtne	r0, #38203	; 0x953b
    216c:	00001802 	andeq	r1, r0, r2, lsl #16
    2170:	0300341f 	movweq	r3, #1055	; 0x41f
    2174:	3b0b3a0e 	blcc	2d09b4 <_Min_Stack_Size+0x2d05b4>
    2178:	02134905 	andseq	r4, r3, #81920	; 0x14000
    217c:	20000018 	andcs	r0, r0, r8, lsl r0
    2180:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2184:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2188:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    218c:	0000193c 	andeq	r1, r0, ip, lsr r9
    2190:	3f012e21 	svccc	0x00012e21
    2194:	3a0e0319 	bcc	382e00 <_Min_Stack_Size+0x382a00>
    2198:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    219c:	01193c19 	tsteq	r9, r9, lsl ip
    21a0:	22000013 	andcs	r0, r0, #19
    21a4:	13490005 	movtne	r0, #36869	; 0x9005
    21a8:	01000000 	mrseq	r0, (UNDEF: 0)
    21ac:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    21b0:	0e030b13 	vmoveq.32	d3[0], r0
    21b4:	17550e1b 	smmlane	r5, fp, lr, r0
    21b8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    21bc:	24020000 	strcs	r0, [r2], #-0
    21c0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    21c4:	000e030b 	andeq	r0, lr, fp, lsl #6
    21c8:	00160300 	andseq	r0, r6, r0, lsl #6
    21cc:	0b3a0e03 	bleq	e859e0 <_Min_Stack_Size+0xe855e0>
    21d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    21d4:	24040000 	strcs	r0, [r4], #-0
    21d8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    21dc:	0008030b 	andeq	r0, r8, fp, lsl #6
    21e0:	00350500 	eorseq	r0, r5, r0, lsl #10
    21e4:	00001349 	andeq	r1, r0, r9, asr #6
    21e8:	0b010406 	bleq	43208 <_Min_Stack_Size+0x42e08>
    21ec:	3b0b3a0b 	blcc	2d0a20 <_Min_Stack_Size+0x2d0620>
    21f0:	00130105 	andseq	r0, r3, r5, lsl #2
    21f4:	00280700 	eoreq	r0, r8, r0, lsl #14
    21f8:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    21fc:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    2200:	1c080300 	stcne	3, cr0, [r8], {-0}
    2204:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    2208:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    220c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2210:	00001349 	andeq	r1, r0, r9, asr #6
    2214:	0b01130a 	bleq	46e44 <_Min_Stack_Size+0x46a44>
    2218:	3b0b3a0b 	blcc	2d0a4c <_Min_Stack_Size+0x2d064c>
    221c:	00130105 	andseq	r0, r3, r5, lsl #2
    2220:	000d0b00 	andeq	r0, sp, r0, lsl #22
    2224:	0b3a0803 	bleq	e84238 <_Min_Stack_Size+0xe83e38>
    2228:	1349053b 	movtne	r0, #38203	; 0x953b
    222c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2230:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2234:	3b0b3a0e 	blcc	2d0a74 <_Min_Stack_Size+0x2d0674>
    2238:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    223c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    2240:	0b0b0113 	bleq	2c2694 <_Min_Stack_Size+0x2c2294>
    2244:	0b3b0b3a 	bleq	ec4f34 <_Min_Stack_Size+0xec4b34>
    2248:	00001301 	andeq	r1, r0, r1, lsl #6
    224c:	03000d0e 	movweq	r0, #3342	; 0xd0e
    2250:	3b0b3a0e 	blcc	2d0a90 <_Min_Stack_Size+0x2d0690>
    2254:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2258:	0f00000b 	svceq	0x0000000b
    225c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2260:	0b3a0e03 	bleq	e85a74 <_Min_Stack_Size+0xe85674>
    2264:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2268:	06120111 			; <UNDEFINED> instruction: 0x06120111
    226c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2270:	00130119 	andseq	r0, r3, r9, lsl r1
    2274:	00051000 	andeq	r1, r5, r0
    2278:	0b3a0e03 	bleq	e85a8c <_Min_Stack_Size+0xe8568c>
    227c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2280:	00001802 	andeq	r1, r0, r2, lsl #16
    2284:	0b000f11 	bleq	5ed0 <_Min_Stack_Size+0x5ad0>
    2288:	0013490b 	andseq	r4, r3, fp, lsl #18
    228c:	012e1200 	teqeq	lr, r0, lsl #4
    2290:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2294:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2298:	01111927 	tsteq	r1, r7, lsr #18
    229c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    22a0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    22a4:	13000013 	movwne	r0, #19
    22a8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    22ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    22b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    22b4:	05140000 	ldreq	r0, [r4, #-0]
    22b8:	3a0e0300 	bcc	382ec0 <_Min_Stack_Size+0x382ac0>
    22bc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    22c0:	00170213 	andseq	r0, r7, r3, lsl r2
    22c4:	00341500 	eorseq	r1, r4, r0, lsl #10
    22c8:	0b3a0e03 	bleq	e85adc <_Min_Stack_Size+0xe856dc>
    22cc:	1349053b 	movtne	r0, #38203	; 0x953b
    22d0:	00001702 	andeq	r1, r0, r2, lsl #14
    22d4:	3f012e16 	svccc	0x00012e16
    22d8:	3a0e0319 	bcc	382f44 <_Min_Stack_Size+0x382b44>
    22dc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    22e0:	11134919 	tstne	r3, r9, lsl r9
    22e4:	40061201 	andmi	r1, r6, r1, lsl #4
    22e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    22ec:	00001301 	andeq	r1, r0, r1, lsl #6
    22f0:	03003417 	movweq	r3, #1047	; 0x417
    22f4:	3b0b3a08 	blcc	2d0b1c <_Min_Stack_Size+0x2d071c>
    22f8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    22fc:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    2300:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2304:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2308:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    230c:	34190000 	ldrcc	r0, [r9], #-0
    2310:	3a0e0300 	bcc	382f18 <_Min_Stack_Size+0x382b18>
    2314:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2318:	3c193f13 	ldccc	15, cr3, [r9], {19}
    231c:	00000019 	andeq	r0, r0, r9, lsl r0
    2320:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    2324:	030b130e 	movweq	r1, #45838	; 0xb30e
    2328:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    232c:	10011117 	andne	r1, r1, r7, lsl r1
    2330:	02000017 	andeq	r0, r0, #23
    2334:	0b0b0024 	bleq	2c23cc <_Min_Stack_Size+0x2c1fcc>
    2338:	0e030b3e 	vmoveq.16	d3[0], r0
    233c:	16030000 	strne	r0, [r3], -r0
    2340:	3a0e0300 	bcc	382f48 <_Min_Stack_Size+0x382b48>
    2344:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2348:	04000013 	streq	r0, [r0], #-19
    234c:	0b0b0024 	bleq	2c23e4 <_Min_Stack_Size+0x2c1fe4>
    2350:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2354:	35050000 	strcc	r0, [r5, #-0]
    2358:	00134900 	andseq	r4, r3, r0, lsl #18
    235c:	01010600 	tsteq	r1, r0, lsl #12
    2360:	13011349 	movwne	r1, #4937	; 0x1349
    2364:	21070000 	mrscs	r0, (UNDEF: 7)
    2368:	2f134900 	svccs	0x00134900
    236c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2370:	0b0b0104 	bleq	2c2788 <_Min_Stack_Size+0x2c2388>
    2374:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2378:	00001301 	andeq	r1, r0, r1, lsl #6
    237c:	03002809 	movweq	r2, #2057	; 0x809
    2380:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    2384:	00280a00 	eoreq	r0, r8, r0, lsl #20
    2388:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    238c:	160b0000 	strne	r0, [fp], -r0
    2390:	3a0e0300 	bcc	382f98 <_Min_Stack_Size+0x382b98>
    2394:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2398:	0c000013 	stceq	0, cr0, [r0], {19}
    239c:	0b0b0113 	bleq	2c27f0 <_Min_Stack_Size+0x2c23f0>
    23a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    23a4:	00001301 	andeq	r1, r0, r1, lsl #6
    23a8:	03000d0d 	movweq	r0, #3341	; 0xd0d
    23ac:	3b0b3a08 	blcc	2d0bd4 <_Min_Stack_Size+0x2d07d4>
    23b0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    23b4:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    23b8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    23bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    23c0:	0b381349 	bleq	e070ec <_Min_Stack_Size+0xe06cec>
    23c4:	130f0000 	movwne	r0, #61440	; 0xf000
    23c8:	3a0b0b01 	bcc	2c4fd4 <_Min_Stack_Size+0x2c4bd4>
    23cc:	010b3b0b 	tsteq	fp, fp, lsl #22
    23d0:	10000013 	andne	r0, r0, r3, lsl r0
    23d4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    23d8:	0b3b0b3a 	bleq	ec50c8 <_Min_Stack_Size+0xec4cc8>
    23dc:	0b381349 	bleq	e07108 <_Min_Stack_Size+0xe06d08>
    23e0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    23e4:	03193f01 	tsteq	r9, #1, 30
    23e8:	3b0b3a0e 	blcc	2d0c28 <_Min_Stack_Size+0x2d0828>
    23ec:	1119270b 	tstne	r9, fp, lsl #14
    23f0:	40061201 	andmi	r1, r6, r1, lsl #4
    23f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    23f8:	00001301 	andeq	r1, r0, r1, lsl #6
    23fc:	03000512 	movweq	r0, #1298	; 0x512
    2400:	3b0b3a0e 	blcc	2d0c40 <_Min_Stack_Size+0x2d0840>
    2404:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2408:	13000017 	movwne	r0, #23
    240c:	01018289 	smlabbeq	r1, r9, r2, r8
    2410:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2414:	00001301 	andeq	r1, r0, r1, lsl #6
    2418:	01828a14 	orreq	r8, r2, r4, lsl sl
    241c:	91180200 	tstls	r8, r0, lsl #4
    2420:	00001842 	andeq	r1, r0, r2, asr #16
    2424:	01828915 	orreq	r8, r2, r5, lsl r9
    2428:	95011101 	strls	r1, [r1, #-257]	; 0x101
    242c:	13311942 	teqne	r1, #1081344	; 0x108000
    2430:	00001301 	andeq	r1, r0, r1, lsl #6
    2434:	01828916 	orreq	r8, r2, r6, lsl r9
    2438:	95011101 	strls	r1, [r1, #-257]	; 0x101
    243c:	13311942 	teqne	r1, #1081344	; 0x108000
    2440:	0f170000 	svceq	0x00170000
    2444:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2448:	18000013 	stmdane	r0, {r0, r1, r4}
    244c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2450:	0b3a0e03 	bleq	e85c64 <_Min_Stack_Size+0xe85864>
    2454:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2458:	06120111 			; <UNDEFINED> instruction: 0x06120111
    245c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2460:	00130119 	andseq	r0, r3, r9, lsl r1
    2464:	00051900 	andeq	r1, r5, r0, lsl #18
    2468:	0b3a0e03 	bleq	e85c7c <_Min_Stack_Size+0xe8587c>
    246c:	1349053b 	movtne	r0, #38203	; 0x953b
    2470:	00001802 	andeq	r1, r0, r2, lsl #16
    2474:	0300051a 	movweq	r0, #1306	; 0x51a
    2478:	3b0b3a0e 	blcc	2d0cb8 <_Min_Stack_Size+0x2d08b8>
    247c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2480:	1b000017 	blne	24e4 <_Min_Stack_Size+0x20e4>
    2484:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2488:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    248c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2490:	341c0000 	ldrcc	r0, [ip], #-0
    2494:	3a080300 	bcc	20309c <_Min_Stack_Size+0x202c9c>
    2498:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    249c:	00170213 	andseq	r0, r7, r3, lsl r2
    24a0:	012e1d00 	teqeq	lr, r0, lsl #26
    24a4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    24a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    24ac:	13491927 	movtne	r1, #39207	; 0x9927
    24b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    24b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    24b8:	00130119 	andseq	r0, r3, r9, lsl r1
    24bc:	00341e00 	eorseq	r1, r4, r0, lsl #28
    24c0:	0b3a0e03 	bleq	e85cd4 <_Min_Stack_Size+0xe858d4>
    24c4:	1349053b 	movtne	r0, #38203	; 0x953b
    24c8:	341f0000 	ldrcc	r0, [pc], #-0	; 24d0 <_Min_Stack_Size+0x20d0>
    24cc:	3a0e0300 	bcc	3830d4 <_Min_Stack_Size+0x382cd4>
    24d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    24d4:	3c193f13 	ldccc	15, cr3, [r9], {19}
    24d8:	20000019 	andcs	r0, r0, r9, lsl r0
    24dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    24e0:	0b3a0e03 	bleq	e85cf4 <_Min_Stack_Size+0xe858f4>
    24e4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    24e8:	1301193c 	movwne	r1, #6460	; 0x193c
    24ec:	05210000 	streq	r0, [r1, #-0]!
    24f0:	00134900 	andseq	r4, r3, r0, lsl #18
    24f4:	012e2200 	teqeq	lr, r0, lsl #4
    24f8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    24fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2500:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2504:	01000000 	mrseq	r0, (UNDEF: 0)
    2508:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    250c:	0e030b13 	vmoveq.32	d3[0], r0
    2510:	17550e1b 	smmlane	r5, fp, lr, r0
    2514:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2518:	24020000 	strcs	r0, [r2], #-0
    251c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2520:	000e030b 	andeq	r0, lr, fp, lsl #6
    2524:	00160300 	andseq	r0, r6, r0, lsl #6
    2528:	0b3a0e03 	bleq	e85d3c <_Min_Stack_Size+0xe8593c>
    252c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2530:	24040000 	strcs	r0, [r4], #-0
    2534:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2538:	0008030b 	andeq	r0, r8, fp, lsl #6
    253c:	00350500 	eorseq	r0, r5, r0, lsl #10
    2540:	00001349 	andeq	r1, r0, r9, asr #6
    2544:	0b010406 	bleq	43564 <_Min_Stack_Size+0x43164>
    2548:	3b0b3a0b 	blcc	2d0d7c <_Min_Stack_Size+0x2d097c>
    254c:	00130105 	andseq	r0, r3, r5, lsl #2
    2550:	00280700 	eoreq	r0, r8, r0, lsl #14
    2554:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    2558:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    255c:	1c080300 	stcne	3, cr0, [r8], {-0}
    2560:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    2564:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2568:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    256c:	00001349 	andeq	r1, r0, r9, asr #6
    2570:	0b01130a 	bleq	471a0 <_Min_Stack_Size+0x46da0>
    2574:	3b0b3a0b 	blcc	2d0da8 <_Min_Stack_Size+0x2d09a8>
    2578:	00130105 	andseq	r0, r3, r5, lsl #2
    257c:	000d0b00 	andeq	r0, sp, r0, lsl #22
    2580:	0b3a0803 	bleq	e84594 <_Min_Stack_Size+0xe84194>
    2584:	1349053b 	movtne	r0, #38203	; 0x953b
    2588:	00000b38 	andeq	r0, r0, r8, lsr fp
    258c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2590:	3b0b3a0e 	blcc	2d0dd0 <_Min_Stack_Size+0x2d09d0>
    2594:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2598:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    259c:	0b0b0104 	bleq	2c29b4 <_Min_Stack_Size+0x2c25b4>
    25a0:	0b3b0b3a 	bleq	ec5290 <_Min_Stack_Size+0xec4e90>
    25a4:	00001301 	andeq	r1, r0, r1, lsl #6
    25a8:	0b01130e 	bleq	471e8 <_Min_Stack_Size+0x46de8>
    25ac:	3b0b3a0b 	blcc	2d0de0 <_Min_Stack_Size+0x2d09e0>
    25b0:	0013010b 	andseq	r0, r3, fp, lsl #2
    25b4:	000d0f00 	andeq	r0, sp, r0, lsl #30
    25b8:	0b3a0e03 	bleq	e85dcc <_Min_Stack_Size+0xe859cc>
    25bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25c0:	00000b38 	andeq	r0, r0, r8, lsr fp
    25c4:	3f002e10 	svccc	0x00002e10
    25c8:	3a0e0319 	bcc	383234 <_Min_Stack_Size+0x382e34>
    25cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    25d0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    25d4:	97184006 	ldrls	r4, [r8, -r6]
    25d8:	00001942 	andeq	r1, r0, r2, asr #18
    25dc:	3f012e11 	svccc	0x00012e11
    25e0:	3a0e0319 	bcc	38324c <_Min_Stack_Size+0x382e4c>
    25e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    25e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    25ec:	97184006 	ldrls	r4, [r8, -r6]
    25f0:	13011942 	movwne	r1, #6466	; 0x1942
    25f4:	05120000 	ldreq	r0, [r2, #-0]
    25f8:	3a0e0300 	bcc	383200 <_Min_Stack_Size+0x382e00>
    25fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2600:	00170213 	andseq	r0, r7, r3, lsl r2
    2604:	00341300 	eorseq	r1, r4, r0, lsl #6
    2608:	0b3a0803 	bleq	e8461c <_Min_Stack_Size+0xe8421c>
    260c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2610:	00001702 	andeq	r1, r0, r2, lsl #14
    2614:	0b000f14 	bleq	626c <_Min_Stack_Size+0x5e6c>
    2618:	0013490b 	andseq	r4, r3, fp, lsl #18
    261c:	00051500 	andeq	r1, r5, r0, lsl #10
    2620:	0b3a0e03 	bleq	e85e34 <_Min_Stack_Size+0xe85a34>
    2624:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2628:	00001802 	andeq	r1, r0, r2, lsl #16
    262c:	3f012e16 	svccc	0x00012e16
    2630:	3a0e0319 	bcc	38329c <_Min_Stack_Size+0x382e9c>
    2634:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2638:	11134919 	tstne	r3, r9, lsl r9
    263c:	40061201 	andmi	r1, r6, r1, lsl #4
    2640:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2644:	00001301 	andeq	r1, r0, r1, lsl #6
    2648:	03003417 	movweq	r3, #1047	; 0x417
    264c:	3b0b3a0e 	blcc	2d0e8c <_Min_Stack_Size+0x2d0a8c>
    2650:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2654:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    2658:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    265c:	0b3a0e03 	bleq	e85e70 <_Min_Stack_Size+0xe85a70>
    2660:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2664:	01111349 	tsteq	r1, r9, asr #6
    2668:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    266c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2670:	19000013 	stmdbne	r0, {r0, r1, r4}
    2674:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2678:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    267c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2680:	341a0000 	ldrcc	r0, [sl], #-0
    2684:	3a0e0300 	bcc	38328c <_Min_Stack_Size+0x382e8c>
    2688:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    268c:	00170213 	andseq	r0, r7, r3, lsl r2
    2690:	012e1b00 	teqeq	lr, r0, lsl #22
    2694:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2698:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    269c:	01111927 	tsteq	r1, r7, lsr #18
    26a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    26a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    26a8:	1c000013 	stcne	0, cr0, [r0], {19}
    26ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    26b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    26b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    26b8:	341d0000 	ldrcc	r0, [sp], #-0
    26bc:	3a0e0300 	bcc	3832c4 <_Min_Stack_Size+0x382ec4>
    26c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    26c4:	3c193f13 	ldccc	15, cr3, [r9], {19}
    26c8:	00000019 	andeq	r0, r0, r9, lsl r0
    26cc:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    26d0:	030b130e 	movweq	r1, #45838	; 0xb30e
    26d4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    26d8:	10011117 	andne	r1, r1, r7, lsl r1
    26dc:	02000017 	andeq	r0, r0, #23
    26e0:	0b0b0024 	bleq	2c2778 <_Min_Stack_Size+0x2c2378>
    26e4:	0e030b3e 	vmoveq.16	d3[0], r0
    26e8:	16030000 	strne	r0, [r3], -r0
    26ec:	3a0e0300 	bcc	3832f4 <_Min_Stack_Size+0x382ef4>
    26f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    26f4:	04000013 	streq	r0, [r0], #-19
    26f8:	0b0b0024 	bleq	2c2790 <_Min_Stack_Size+0x2c2390>
    26fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2700:	35050000 	strcc	r0, [r5, #-0]
    2704:	00134900 	andseq	r4, r3, r0, lsl #18
    2708:	01040600 	tsteq	r4, r0, lsl #12
    270c:	0b3a0b0b 	bleq	e85340 <_Min_Stack_Size+0xe84f40>
    2710:	1301053b 	movwne	r0, #5435	; 0x153b
    2714:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    2718:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    271c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    2720:	08030028 	stmdaeq	r3, {r3, r5}
    2724:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2728:	03001609 	movweq	r1, #1545	; 0x609
    272c:	3b0b3a0e 	blcc	2d0f6c <_Min_Stack_Size+0x2d0b6c>
    2730:	00134905 	andseq	r4, r3, r5, lsl #18
    2734:	01130a00 	tsteq	r3, r0, lsl #20
    2738:	0b3a050b 	bleq	e83b6c <_Min_Stack_Size+0xe8376c>
    273c:	1301053b 	movwne	r0, #5435	; 0x153b
    2740:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    2744:	3a080300 	bcc	20334c <_Min_Stack_Size+0x202f4c>
    2748:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    274c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2750:	000d0c00 	andeq	r0, sp, r0, lsl #24
    2754:	0b3a0e03 	bleq	e85f68 <_Min_Stack_Size+0xe85b68>
    2758:	1349053b 	movtne	r0, #38203	; 0x953b
    275c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2760:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2764:	3b0b3a0e 	blcc	2d0fa4 <_Min_Stack_Size+0x2d0ba4>
    2768:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    276c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    2770:	13490101 	movtne	r0, #37121	; 0x9101
    2774:	00001301 	andeq	r1, r0, r1, lsl #6
    2778:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
    277c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2780:	01131000 	tsteq	r3, r0
    2784:	0b3a0b0b 	bleq	e853b8 <_Min_Stack_Size+0xe84fb8>
    2788:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    278c:	0d110000 	ldceq	0, cr0, [r1, #-0]
    2790:	3a0e0300 	bcc	383398 <_Min_Stack_Size+0x382f98>
    2794:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2798:	000b3813 	andeq	r3, fp, r3, lsl r8
    279c:	012e1200 	teqeq	lr, r0, lsl #4
    27a0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    27a4:	0b3b0b3a 	bleq	ec5494 <_Min_Stack_Size+0xec5094>
    27a8:	01111927 	tsteq	r1, r7, lsr #18
    27ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    27b0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    27b4:	13000013 	movwne	r0, #19
    27b8:	01018289 	smlabbeq	r1, r9, r2, r8
    27bc:	13310111 	teqne	r1, #1073741828	; 0x40000004
    27c0:	00001301 	andeq	r1, r0, r1, lsl #6
    27c4:	01828a14 	orreq	r8, r2, r4, lsl sl
    27c8:	91180200 	tstls	r8, r0, lsl #4
    27cc:	00001842 	andeq	r1, r0, r2, asr #16
    27d0:	01828915 	orreq	r8, r2, r5, lsl r9
    27d4:	95011101 	strls	r1, [r1, #-257]	; 0x101
    27d8:	13311942 	teqne	r1, #1081344	; 0x108000
    27dc:	05160000 	ldreq	r0, [r6, #-0]
    27e0:	3a0e0300 	bcc	3833e8 <_Min_Stack_Size+0x382fe8>
    27e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    27e8:	00170213 	andseq	r0, r7, r3, lsl r2
    27ec:	00341700 	eorseq	r1, r4, r0, lsl #14
    27f0:	0b3a0e03 	bleq	e86004 <_Min_Stack_Size+0xe85c04>
    27f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    27f8:	00001702 	andeq	r1, r0, r2, lsl #14
    27fc:	0b000f18 	bleq	6464 <_Min_Stack_Size+0x6064>
    2800:	0013490b 	andseq	r4, r3, fp, lsl #18
    2804:	00051900 	andeq	r1, r5, r0, lsl #18
    2808:	0b3a0e03 	bleq	e8601c <_Min_Stack_Size+0xe85c1c>
    280c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2810:	00001802 	andeq	r1, r0, r2, lsl #16
    2814:	3f002e1a 	svccc	0x00002e1a
    2818:	3a0e0319 	bcc	383484 <_Min_Stack_Size+0x383084>
    281c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2820:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2824:	97184006 	ldrls	r4, [r8, -r6]
    2828:	00001942 	andeq	r1, r0, r2, asr #18
    282c:	3f012e1b 	svccc	0x00012e1b
    2830:	3a0e0319 	bcc	38349c <_Min_Stack_Size+0x38309c>
    2834:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2838:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    283c:	97184006 	ldrls	r4, [r8, -r6]
    2840:	13011942 	movwne	r1, #6466	; 0x1942
    2844:	051c0000 	ldreq	r0, [ip, #-0]
    2848:	3a0e0300 	bcc	383450 <_Min_Stack_Size+0x383050>
    284c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2850:	00180213 	andseq	r0, r8, r3, lsl r2
    2854:	00341d00 	eorseq	r1, r4, r0, lsl #26
    2858:	0b3a0e03 	bleq	e8606c <_Min_Stack_Size+0xe85c6c>
    285c:	1349053b 	movtne	r0, #38203	; 0x953b
    2860:	00001702 	andeq	r1, r0, r2, lsl #14
    2864:	0300051e 	movweq	r0, #1310	; 0x51e
    2868:	3b0b3a0e 	blcc	2d10a8 <_Min_Stack_Size+0x2d0ca8>
    286c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2870:	1f000017 	svcne	0x00000017
    2874:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2878:	0b3a0e03 	bleq	e8608c <_Min_Stack_Size+0xe85c8c>
    287c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2880:	01111349 	tsteq	r1, r9, asr #6
    2884:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2888:	01194297 			; <UNDEFINED> instruction: 0x01194297
    288c:	20000013 	andcs	r0, r0, r3, lsl r0
    2890:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2894:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2898:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    289c:	0000193c 	andeq	r1, r0, ip, lsr r9
    28a0:	3f012e21 	svccc	0x00012e21
    28a4:	3a0e0319 	bcc	383510 <_Min_Stack_Size+0x383110>
    28a8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    28ac:	00193c19 	andseq	r3, r9, r9, lsl ip
    28b0:	00052200 	andeq	r2, r5, r0, lsl #4
    28b4:	00001349 	andeq	r1, r0, r9, asr #6
    28b8:	01110100 	tsteq	r1, r0, lsl #2
    28bc:	0b130e25 	bleq	4c6158 <_Min_Stack_Size+0x4c5d58>
    28c0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    28c4:	01111755 	tsteq	r1, r5, asr r7
    28c8:	00001710 	andeq	r1, r0, r0, lsl r7
    28cc:	0b002402 	bleq	b8dc <_Min_Stack_Size+0xb4dc>
    28d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    28d4:	0300000e 	movweq	r0, #14
    28d8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    28dc:	0b3b0b3a 	bleq	ec55cc <_Min_Stack_Size+0xec51cc>
    28e0:	00001349 	andeq	r1, r0, r9, asr #6
    28e4:	0b002404 	bleq	b8fc <_Min_Stack_Size+0xb4fc>
    28e8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    28ec:	05000008 	streq	r0, [r0, #-8]
    28f0:	13490035 	movtne	r0, #36917	; 0x9035
    28f4:	01060000 	mrseq	r0, (UNDEF: 6)
    28f8:	01134901 	tsteq	r3, r1, lsl #18
    28fc:	07000013 	smladeq	r0, r3, r0, r0
    2900:	13490021 	movtne	r0, #36897	; 0x9021
    2904:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2908:	0b010408 	bleq	43930 <_Min_Stack_Size+0x43530>
    290c:	3b0b3a0b 	blcc	2d1140 <_Min_Stack_Size+0x2d0d40>
    2910:	00130105 	andseq	r0, r3, r5, lsl #2
    2914:	00280900 	eoreq	r0, r8, r0, lsl #18
    2918:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    291c:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    2920:	1c080300 	stcne	3, cr0, [r8], {-0}
    2924:	0b00000d 	bleq	2960 <_Min_Stack_Size+0x2560>
    2928:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    292c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2930:	00001349 	andeq	r1, r0, r9, asr #6
    2934:	0b01130c 	bleq	4756c <_Min_Stack_Size+0x4716c>
    2938:	3b0b3a0b 	blcc	2d116c <_Min_Stack_Size+0x2d0d6c>
    293c:	00130105 	andseq	r0, r3, r5, lsl #2
    2940:	000d0d00 	andeq	r0, sp, r0, lsl #26
    2944:	0b3a0e03 	bleq	e86158 <_Min_Stack_Size+0xe85d58>
    2948:	1349053b 	movtne	r0, #38203	; 0x953b
    294c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2950:	03000d0e 	movweq	r0, #3342	; 0xd0e
    2954:	3b0b3a08 	blcc	2d117c <_Min_Stack_Size+0x2d0d7c>
    2958:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    295c:	0f00000b 	svceq	0x0000000b
    2960:	0b0b0113 	bleq	2c2db4 <_Min_Stack_Size+0x2c29b4>
    2964:	0b3b0b3a 	bleq	ec5654 <_Min_Stack_Size+0xec5254>
    2968:	00001301 	andeq	r1, r0, r1, lsl #6
    296c:	03000d10 	movweq	r0, #3344	; 0xd10
    2970:	3b0b3a0e 	blcc	2d11b0 <_Min_Stack_Size+0x2d0db0>
    2974:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2978:	1100000b 	tstne	r0, fp
    297c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2980:	0b3a0e03 	bleq	e86194 <_Min_Stack_Size+0xe85d94>
    2984:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2988:	06120111 			; <UNDEFINED> instruction: 0x06120111
    298c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2990:	00130119 	andseq	r0, r3, r9, lsl r1
    2994:	82891200 	addhi	r1, r9, #0, 4
    2998:	01110101 	tsteq	r1, r1, lsl #2
    299c:	13011331 	movwne	r1, #4913	; 0x1331
    29a0:	8a130000 	bhi	4c29a8 <_Min_Stack_Size+0x4c25a8>
    29a4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    29a8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    29ac:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    29b0:	11010182 	smlabbne	r1, r2, r1, r0
    29b4:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    29b8:	00001331 	andeq	r1, r0, r1, lsr r3
    29bc:	03000515 	movweq	r0, #1301	; 0x515
    29c0:	3b0b3a0e 	blcc	2d1200 <_Min_Stack_Size+0x2d0e00>
    29c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    29c8:	16000017 			; <UNDEFINED> instruction: 0x16000017
    29cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    29d0:	0b3b0b3a 	bleq	ec56c0 <_Min_Stack_Size+0xec52c0>
    29d4:	17021349 	strne	r1, [r2, -r9, asr #6]
    29d8:	0f170000 	svceq	0x00170000
    29dc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    29e0:	18000013 	stmdane	r0, {r0, r1, r4}
    29e4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    29e8:	0b3b0b3a 	bleq	ec56d8 <_Min_Stack_Size+0xec52d8>
    29ec:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    29f0:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    29f4:	03193f01 	tsteq	r9, #1, 30
    29f8:	3b0b3a0e 	blcc	2d1238 <_Min_Stack_Size+0x2d0e38>
    29fc:	11192705 	tstne	r9, r5, lsl #14
    2a00:	40061201 	andmi	r1, r6, r1, lsl #4
    2a04:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2a08:	00001301 	andeq	r1, r0, r1, lsl #6
    2a0c:	0300051a 	movweq	r0, #1306	; 0x51a
    2a10:	3b0b3a0e 	blcc	2d1250 <_Min_Stack_Size+0x2d0e50>
    2a14:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2a18:	1b000018 	blne	2a80 <_Min_Stack_Size+0x2680>
    2a1c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2a20:	0b3a0e03 	bleq	e86234 <_Min_Stack_Size+0xe85e34>
    2a24:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2a28:	01111349 	tsteq	r1, r9, asr #6
    2a2c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2a30:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2a34:	1c000013 	stcne	0, cr0, [r0], {19}
    2a38:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2a3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2a40:	17021349 	strne	r1, [r2, -r9, asr #6]
    2a44:	051d0000 	ldreq	r0, [sp, #-0]
    2a48:	3a0e0300 	bcc	383650 <_Min_Stack_Size+0x383250>
    2a4c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a50:	00170213 	andseq	r0, r7, r3, lsl r2
    2a54:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2a58:	0b3a0803 	bleq	e84a6c <_Min_Stack_Size+0xe8466c>
    2a5c:	1349053b 	movtne	r0, #38203	; 0x953b
    2a60:	00001702 	andeq	r1, r0, r2, lsl #14
    2a64:	0300341f 	movweq	r3, #1055	; 0x41f
    2a68:	3b0b3a0e 	blcc	2d12a8 <_Min_Stack_Size+0x2d0ea8>
    2a6c:	00134905 	andseq	r4, r3, r5, lsl #18
    2a70:	00342000 	eorseq	r2, r4, r0
    2a74:	0b3a0e03 	bleq	e86288 <_Min_Stack_Size+0xe85e88>
    2a78:	1349053b 	movtne	r0, #38203	; 0x953b
    2a7c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2a80:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    2a84:	03193f01 	tsteq	r9, #1, 30
    2a88:	3b0b3a0e 	blcc	2d12c8 <_Min_Stack_Size+0x2d0ec8>
    2a8c:	3c192705 	ldccc	7, cr2, [r9], {5}
    2a90:	22000019 	andcs	r0, r0, #25
    2a94:	13490005 	movtne	r0, #36869	; 0x9005
    2a98:	01000000 	mrseq	r0, (UNDEF: 0)
    2a9c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2aa0:	0e030b13 	vmoveq.32	d3[0], r0
    2aa4:	17550e1b 	smmlane	r5, fp, lr, r0
    2aa8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2aac:	24020000 	strcs	r0, [r2], #-0
    2ab0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2ab4:	000e030b 	andeq	r0, lr, fp, lsl #6
    2ab8:	00160300 	andseq	r0, r6, r0, lsl #6
    2abc:	0b3a0e03 	bleq	e862d0 <_Min_Stack_Size+0xe85ed0>
    2ac0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ac4:	24040000 	strcs	r0, [r4], #-0
    2ac8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2acc:	0008030b 	andeq	r0, r8, fp, lsl #6
    2ad0:	01010500 	tsteq	r1, r0, lsl #10
    2ad4:	13011349 	movwne	r1, #4937	; 0x1349
    2ad8:	21060000 	mrscs	r0, (UNDEF: 6)
    2adc:	2f134900 	svccs	0x00134900
    2ae0:	0700000b 	streq	r0, [r0, -fp]
    2ae4:	13490035 	movtne	r0, #36917	; 0x9035
    2ae8:	04080000 	streq	r0, [r8], #-0
    2aec:	3a0b0b01 	bcc	2c56f8 <_Min_Stack_Size+0x2c52f8>
    2af0:	01053b0b 	tsteq	r5, fp, lsl #22
    2af4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2af8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2afc:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2b00:	0300280a 	movweq	r2, #2058	; 0x80a
    2b04:	000d1c08 	andeq	r1, sp, r8, lsl #24
    2b08:	00160b00 	andseq	r0, r6, r0, lsl #22
    2b0c:	0b3a0e03 	bleq	e86320 <_Min_Stack_Size+0xe85f20>
    2b10:	1349053b 	movtne	r0, #38203	; 0x953b
    2b14:	130c0000 	movwne	r0, #49152	; 0xc000
    2b18:	3a0b0b01 	bcc	2c5724 <_Min_Stack_Size+0x2c5324>
    2b1c:	01053b0b 	tsteq	r5, fp, lsl #22
    2b20:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    2b24:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2b28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2b2c:	0b381349 	bleq	e07858 <_Min_Stack_Size+0xe07458>
    2b30:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    2b34:	3a080300 	bcc	20373c <_Min_Stack_Size+0x20333c>
    2b38:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b3c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2b40:	01130f00 	tsteq	r3, r0, lsl #30
    2b44:	0b3a0b0b 	bleq	e85778 <_Min_Stack_Size+0xe85378>
    2b48:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2b4c:	0d100000 	ldceq	0, cr0, [r0, #-0]
    2b50:	3a0e0300 	bcc	383758 <_Min_Stack_Size+0x383358>
    2b54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b58:	000b3813 	andeq	r3, fp, r3, lsl r8
    2b5c:	000f1100 	andeq	r1, pc, r0, lsl #2
    2b60:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2b64:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    2b68:	03193f01 	tsteq	r9, #1, 30
    2b6c:	3b0b3a0e 	blcc	2d13ac <_Min_Stack_Size+0x2d0fac>
    2b70:	1119270b 	tstne	r9, fp, lsl #14
    2b74:	40061201 	andmi	r1, r6, r1, lsl #4
    2b78:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2b7c:	00001301 	andeq	r1, r0, r1, lsl #6
    2b80:	03000513 	movweq	r0, #1299	; 0x513
    2b84:	3b0b3a0e 	blcc	2d13c4 <_Min_Stack_Size+0x2d0fc4>
    2b88:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b8c:	14000018 	strne	r0, [r0], #-24
    2b90:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2b94:	0b3b0b3a 	bleq	ec5884 <_Min_Stack_Size+0xec5484>
    2b98:	17021349 	strne	r1, [r2, -r9, asr #6]
    2b9c:	34150000 	ldrcc	r0, [r5], #-0
    2ba0:	3a0e0300 	bcc	3837a8 <_Min_Stack_Size+0x3833a8>
    2ba4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ba8:	00170213 	andseq	r0, r7, r3, lsl r2
    2bac:	012e1600 	teqeq	lr, r0, lsl #12
    2bb0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2bb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2bb8:	01111927 	tsteq	r1, r7, lsr #18
    2bbc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2bc0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2bc4:	17000013 	smladne	r0, r3, r0, r0
    2bc8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2bcc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2bd0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2bd4:	05180000 	ldreq	r0, [r8, #-0]
    2bd8:	3a0e0300 	bcc	3837e0 <_Min_Stack_Size+0x3833e0>
    2bdc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2be0:	00170213 	andseq	r0, r7, r3, lsl r2
    2be4:	00341900 	eorseq	r1, r4, r0, lsl #18
    2be8:	0b3a0e03 	bleq	e863fc <_Min_Stack_Size+0xe85ffc>
    2bec:	1349053b 	movtne	r0, #38203	; 0x953b
    2bf0:	00001702 	andeq	r1, r0, r2, lsl #14
    2bf4:	3f012e1a 	svccc	0x00012e1a
    2bf8:	3a0e0319 	bcc	383864 <_Min_Stack_Size+0x383464>
    2bfc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2c00:	11134919 	tstne	r3, r9, lsl r9
    2c04:	40061201 	andmi	r1, r6, r1, lsl #4
    2c08:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2c0c:	00001301 	andeq	r1, r0, r1, lsl #6
    2c10:	3f002e1b 	svccc	0x00002e1b
    2c14:	3a0e0319 	bcc	383880 <_Min_Stack_Size+0x383480>
    2c18:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2c1c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2c20:	97184006 	ldrls	r4, [r8, -r6]
    2c24:	00001942 	andeq	r1, r0, r2, asr #18
    2c28:	0300341c 	movweq	r3, #1052	; 0x41c
    2c2c:	3b0b3a0e 	blcc	2d146c <_Min_Stack_Size+0x2d106c>
    2c30:	3f134905 	svccc	0x00134905
    2c34:	00193c19 	andseq	r3, r9, r9, lsl ip
    2c38:	11010000 	mrsne	r0, (UNDEF: 1)
    2c3c:	130e2501 	movwne	r2, #58625	; 0xe501
    2c40:	1b0e030b 	blne	383874 <_Min_Stack_Size+0x383474>
    2c44:	1117550e 	tstne	r7, lr, lsl #10
    2c48:	00171001 	andseq	r1, r7, r1
    2c4c:	00240200 	eoreq	r0, r4, r0, lsl #4
    2c50:	0b3e0b0b 	bleq	f85884 <_Min_Stack_Size+0xf85484>
    2c54:	00000e03 	andeq	r0, r0, r3, lsl #28
    2c58:	03001603 	movweq	r1, #1539	; 0x603
    2c5c:	3b0b3a0e 	blcc	2d149c <_Min_Stack_Size+0x2d109c>
    2c60:	0013490b 	andseq	r4, r3, fp, lsl #18
    2c64:	00240400 	eoreq	r0, r4, r0, lsl #8
    2c68:	0b3e0b0b 	bleq	f8589c <_Min_Stack_Size+0xf8549c>
    2c6c:	00000803 	andeq	r0, r0, r3, lsl #16
    2c70:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    2c74:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2c78:	0b0b0104 	bleq	2c3090 <_Min_Stack_Size+0x2c2c90>
    2c7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2c80:	00001301 	andeq	r1, r0, r1, lsl #6
    2c84:	03002807 	movweq	r2, #2055	; 0x807
    2c88:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    2c8c:	00280800 	eoreq	r0, r8, r0, lsl #16
    2c90:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    2c94:	16090000 	strne	r0, [r9], -r0
    2c98:	3a0e0300 	bcc	3838a0 <_Min_Stack_Size+0x3834a0>
    2c9c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ca0:	0a000013 	beq	2cf4 <_Min_Stack_Size+0x28f4>
    2ca4:	0b0b0113 	bleq	2c30f8 <_Min_Stack_Size+0x2c2cf8>
    2ca8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2cac:	00001301 	andeq	r1, r0, r1, lsl #6
    2cb0:	03000d0b 	movweq	r0, #3339	; 0xd0b
    2cb4:	3b0b3a08 	blcc	2d14dc <_Min_Stack_Size+0x2d10dc>
    2cb8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2cbc:	0c00000b 	stceq	0, cr0, [r0], {11}
    2cc0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2cc4:	0b3a0e03 	bleq	e864d8 <_Min_Stack_Size+0xe860d8>
    2cc8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2ccc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2cd0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2cd4:	00130119 	andseq	r0, r3, r9, lsl r1
    2cd8:	82890d00 	addhi	r0, r9, #0, 26
    2cdc:	01110101 	tsteq	r1, r1, lsl #2
    2ce0:	13011331 	movwne	r1, #4913	; 0x1331
    2ce4:	8a0e0000 	bhi	382cec <_Min_Stack_Size+0x3828ec>
    2ce8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2cec:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2cf0:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
    2cf4:	11010182 	smlabbne	r1, r2, r1, r0
    2cf8:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    2cfc:	00001331 	andeq	r1, r0, r1, lsr r3
    2d00:	03000510 	movweq	r0, #1296	; 0x510
    2d04:	3b0b3a0e 	blcc	2d1544 <_Min_Stack_Size+0x2d1144>
    2d08:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2d0c:	11000018 	tstne	r0, r8, lsl r0
    2d10:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2d14:	0b3a0e03 	bleq	e86528 <_Min_Stack_Size+0xe86128>
    2d18:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2d1c:	01111349 	tsteq	r1, r9, asr #6
    2d20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2d24:	00194297 	mulseq	r9, r7, r2
    2d28:	012e1200 	teqeq	lr, r0, lsl #4
    2d2c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2d30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2d34:	01111927 	tsteq	r1, r7, lsr #18
    2d38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2d3c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2d40:	13000013 	movwne	r0, #19
    2d44:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2d48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2d4c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2d50:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    2d54:	03193f01 	tsteq	r9, #1, 30
    2d58:	3b0b3a0e 	blcc	2d1598 <_Min_Stack_Size+0x2d1198>
    2d5c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2d60:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2d64:	97184006 	ldrls	r4, [r8, -r6]
    2d68:	13011942 	movwne	r1, #6466	; 0x1942
    2d6c:	05150000 	ldreq	r0, [r5, #-0]
    2d70:	3a0e0300 	bcc	383978 <_Min_Stack_Size+0x383578>
    2d74:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d78:	00170213 	andseq	r0, r7, r3, lsl r2
    2d7c:	00341600 	eorseq	r1, r4, r0, lsl #12
    2d80:	0b3a0e03 	bleq	e86594 <_Min_Stack_Size+0xe86194>
    2d84:	1349053b 	movtne	r0, #38203	; 0x953b
    2d88:	00001702 	andeq	r1, r0, r2, lsl #14
    2d8c:	03003417 	movweq	r3, #1047	; 0x417
    2d90:	3b0b3a0e 	blcc	2d15d0 <_Min_Stack_Size+0x2d11d0>
    2d94:	3f134905 	svccc	0x00134905
    2d98:	00193c19 	andseq	r3, r9, r9, lsl ip
    2d9c:	012e1800 	teqeq	lr, r0, lsl #16
    2da0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2da4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2da8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2dac:	05190000 	ldreq	r0, [r9, #-0]
    2db0:	00134900 	andseq	r4, r3, r0, lsl #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  14:	00000044 	andeq	r0, r0, r4, asr #32
  18:	08000338 	stmdaeq	r0, {r3, r4, r5, r8, r9}
  1c:	00000002 	andeq	r0, r0, r2
	...
  28:	00000024 	andeq	r0, r0, r4, lsr #32
  2c:	00730002 	rsbseq	r0, r3, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
  3c:	00000122 	andeq	r0, r0, r2, lsr #2
  40:	08000460 	stmdaeq	r0, {r5, r6, sl}
  44:	00000092 	muleq	r0, r2, r0
	...
  50:	0000003c 	andeq	r0, r0, ip, lsr r0
  54:	06510002 	ldrbeq	r0, [r1], -r2
  58:	00040000 	andeq	r0, r4, r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	080004f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl}
  64:	00000016 	andeq	r0, r0, r6, lsl r0
  68:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
  6c:	00000056 	andeq	r0, r0, r6, asr r0
  70:	08000564 	stmdaeq	r0, {r2, r5, r6, r8, sl}
  74:	00000044 	andeq	r0, r0, r4, asr #32
  78:	080005a8 	stmdaeq	r0, {r3, r5, r7, r8, sl}
  7c:	0000002a 	andeq	r0, r0, sl, lsr #32
  80:	080005d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl}
  84:	0000000c 	andeq	r0, r0, ip
	...
  90:	00000034 	andeq	r0, r0, r4, lsr r0
  94:	0e7a0002 	cdpeq	0, 7, cr0, cr10, cr2, {0}
  98:	00040000 	andeq	r0, r4, r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	080005e0 	stmdaeq	r0, {r5, r6, r7, r8, sl}
  a4:	000000e0 	andeq	r0, r0, r0, ror #1
  a8:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
  ac:	00000054 	andeq	r0, r0, r4, asr r0
  b0:	08000714 	stmdaeq	r0, {r2, r4, r8, r9, sl}
  b4:	000001ee 	andeq	r0, r0, lr, ror #3
  b8:	08000904 	stmdaeq	r0, {r2, r8, fp}
  bc:	00000036 	andeq	r0, r0, r6, lsr r0
	...
  c8:	0000005c 	andeq	r0, r0, ip, asr r0
  cc:	160b0002 	strne	r0, [fp], -r2
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	0800093c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp}
  dc:	0000001a 	andeq	r0, r0, sl, lsl r0
  e0:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
  e4:	000000ce 	andeq	r0, r0, lr, asr #1
  e8:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
  ec:	00000026 	andeq	r0, r0, r6, lsr #32
  f0:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
  f4:	00000026 	andeq	r0, r0, r6, lsr #32
  f8:	08000a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp}
  fc:	00000070 	andeq	r0, r0, r0, ror r0
 100:	08000ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp}
 104:	000000b2 	strheq	r0, [r0], -r2
 108:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
 10c:	00000040 	andeq	r0, r0, r0, asr #32
 110:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
 114:	0000007a 	andeq	r0, r0, sl, ror r0
 118:	08000c58 	stmdaeq	r0, {r3, r4, r6, sl, fp}
 11c:	00000006 	andeq	r0, r0, r6
	...
 128:	0000003c 	andeq	r0, r0, ip, lsr r0
 12c:	20c30002 	sbccs	r0, r3, r2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	08000c60 	stmdaeq	r0, {r5, r6, sl, fp}
 13c:	00000016 	andeq	r0, r0, r6, lsl r0
 140:	08000c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp}
 144:	00000006 	andeq	r0, r0, r6
 148:	08000c80 	stmdaeq	r0, {r7, sl, fp}
 14c:	0000001e 	andeq	r0, r0, lr, lsl r0
 150:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
 154:	00000034 	andeq	r0, r0, r4, lsr r0
 158:	08000cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp}
 15c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 168:	000000dc 	ldrdeq	r0, [r0], -ip
 16c:	235b0002 	cmpcs	fp, #2
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
 17c:	00000026 	andeq	r0, r0, r6, lsr #32
 180:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
 184:	00000084 	andeq	r0, r0, r4, lsl #1
 188:	08000da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp}
 18c:	00000072 	andeq	r0, r0, r2, ror r0
 190:	08000e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp}
 194:	00000076 	andeq	r0, r0, r6, ror r0
 198:	08000e94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp}
 19c:	00000084 	andeq	r0, r0, r4, lsl #1
 1a0:	08000f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp}
 1a4:	00000280 	andeq	r0, r0, r0, lsl #5
 1a8:	08001198 	stmdaeq	r0, {r3, r4, r7, r8, ip}
 1ac:	00000050 	andeq	r0, r0, r0, asr r0
 1b0:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
 1b4:	00000034 	andeq	r0, r0, r4, lsr r0
 1b8:	0800121c 	stmdaeq	r0, {r2, r3, r4, r9, ip}
 1bc:	00000124 	andeq	r0, r0, r4, lsr #2
 1c0:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
 1c4:	0000023e 	andeq	r0, r0, lr, lsr r2
 1c8:	08001580 	stmdaeq	r0, {r7, r8, sl, ip}
 1cc:	0000003a 	andeq	r0, r0, sl, lsr r0
 1d0:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
 1d4:	00000082 	andeq	r0, r0, r2, lsl #1
 1d8:	08001640 	stmdaeq	r0, {r6, r9, sl, ip}
 1dc:	00000052 	andeq	r0, r0, r2, asr r0
 1e0:	08001694 	stmdaeq	r0, {r2, r4, r7, r9, sl, ip}
 1e4:	0000001a 	andeq	r0, r0, sl, lsl r0
 1e8:	080016b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip}
 1ec:	0000001e 	andeq	r0, r0, lr, lsl r0
 1f0:	080016d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip}
 1f4:	0000000e 	andeq	r0, r0, lr
 1f8:	080016e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip}
 1fc:	00000094 	muleq	r0, r4, r0
 200:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
 204:	00000004 	andeq	r0, r0, r4
 208:	08001778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip}
 20c:	00000004 	andeq	r0, r0, r4
 210:	0800177c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip}
 214:	00000006 	andeq	r0, r0, r6
 218:	08001784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip}
 21c:	00000016 	andeq	r0, r0, r6, lsl r0
 220:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
 224:	00000016 	andeq	r0, r0, r6, lsl r0
 228:	080017b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip}
 22c:	0000005a 	andeq	r0, r0, sl, asr r0
 230:	08001810 	stmdaeq	r0, {r4, fp, ip}
 234:	00000060 	andeq	r0, r0, r0, rrx
 238:	08001870 	stmdaeq	r0, {r4, r5, r6, fp, ip}
 23c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
 248:	00000134 	andeq	r0, r0, r4, lsr r1
 24c:	3d0d0002 	stccc	0, cr0, [sp, #-8]
 250:	00040000 	andeq	r0, r4, r0
 254:	00000000 	andeq	r0, r0, r0
 258:	08001920 	stmdaeq	r0, {r5, r8, fp, ip}
 25c:	0000006e 	andeq	r0, r0, lr, rrx
 260:	08001990 	stmdaeq	r0, {r4, r7, r8, fp, ip}
 264:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 268:	08001b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip}
 26c:	000000c0 	andeq	r0, r0, r0, asr #1
 270:	08001c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip}
 274:	00000028 	andeq	r0, r0, r8, lsr #32
 278:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
 27c:	000000c0 	andeq	r0, r0, r0, asr #1
 280:	08001cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip}
 284:	00000152 	andeq	r0, r0, r2, asr r1
 288:	08001e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip}
 28c:	00000088 	andeq	r0, r0, r8, lsl #1
 290:	08001ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip}
 294:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 298:	08001f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip}
 29c:	0000014a 	andeq	r0, r0, sl, asr #2
 2a0:	080020cc 	stmdaeq	r0, {r2, r3, r6, r7, sp}
 2a4:	0000001a 	andeq	r0, r0, sl, lsl r0
 2a8:	080020e8 	stmdaeq	r0, {r3, r5, r6, r7, sp}
 2ac:	00000010 	andeq	r0, r0, r0, lsl r0
 2b0:	080020f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp}
 2b4:	00000018 	andeq	r0, r0, r8, lsl r0
 2b8:	08002110 	stmdaeq	r0, {r4, r8, sp}
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	0800212c 	stmdaeq	r0, {r2, r3, r5, r8, sp}
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	08002138 	stmdaeq	r0, {r3, r4, r5, r8, sp}
 2cc:	0000017c 	andeq	r0, r0, ip, ror r1
 2d0:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
 2d4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2d8:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
 2dc:	000000bc 	strheq	r0, [r0], -ip
 2e0:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
 2e4:	0000008c 	andeq	r0, r0, ip, lsl #1
 2e8:	080024ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, sp}
 2ec:	00000092 	muleq	r0, r2, r0
 2f0:	08002580 	stmdaeq	r0, {r7, r8, sl, sp}
 2f4:	0000037c 	andeq	r0, r0, ip, ror r3
 2f8:	080028fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp}
 2fc:	00000096 	muleq	r0, r6, r0
 300:	08002994 	stmdaeq	r0, {r2, r4, r7, r8, fp, sp}
 304:	0000008e 	andeq	r0, r0, lr, lsl #1
 308:	08002a24 	stmdaeq	r0, {r2, r5, r9, fp, sp}
 30c:	000000aa 	andeq	r0, r0, sl, lsr #1
 310:	08002ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, sp}
 314:	00000074 	andeq	r0, r0, r4, ror r0
 318:	08002b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, sp}
 31c:	0000008a 	andeq	r0, r0, sl, lsl #1
 320:	08002bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, sp}
 324:	0000007e 	andeq	r0, r0, lr, ror r0
 328:	08002c50 	stmdaeq	r0, {r4, r6, sl, fp, sp}
 32c:	00000024 	andeq	r0, r0, r4, lsr #32
 330:	08002c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, sp}
 334:	00000074 	andeq	r0, r0, r4, ror r0
 338:	08002ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, sp}
 33c:	0000000e 	andeq	r0, r0, lr
 340:	08002cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, sp}
 344:	00000006 	andeq	r0, r0, r6
 348:	08002d00 	stmdaeq	r0, {r8, sl, fp, sp}
 34c:	00000006 	andeq	r0, r0, r6
 350:	08002d08 	stmdaeq	r0, {r3, r8, sl, fp, sp}
 354:	0000000c 	andeq	r0, r0, ip
 358:	08002d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, sp}
 35c:	00000024 	andeq	r0, r0, r4, lsr #32
 360:	08002d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, sp}
 364:	00000078 	andeq	r0, r0, r8, ror r0
 368:	08002db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, sp}
 36c:	00000052 	andeq	r0, r0, r2, asr r0
 370:	08002e04 	stmdaeq	r0, {r2, r9, sl, fp, sp}
 374:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
 380:	00000044 	andeq	r0, r0, r4, asr #32
 384:	61080002 	tstvs	r8, r2
 388:	00040000 	andeq	r0, r4, r0
 38c:	00000000 	andeq	r0, r0, r0
 390:	08002e20 	stmdaeq	r0, {r5, r9, sl, fp, sp}
 394:	000000b2 	strheq	r0, [r0], -r2
 398:	08002ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, sp}
 39c:	000000ac 	andeq	r0, r0, ip, lsr #1
 3a0:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
 3a4:	00000052 	andeq	r0, r0, r2, asr r0
 3a8:	08002fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, sp}
 3ac:	0000031c 	andeq	r0, r0, ip, lsl r3
 3b0:	080032f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, sp}
 3b4:	00000018 	andeq	r0, r0, r8, lsl r0
 3b8:	08003308 	stmdaeq	r0, {r3, r8, r9, ip, sp}
 3bc:	00000004 	andeq	r0, r0, r4
	...
 3c8:	00000094 	muleq	r0, r4, r0
 3cc:	736f0002 	cmnvc	pc, #2
 3d0:	00040000 	andeq	r0, r4, r0
 3d4:	00000000 	andeq	r0, r0, r0
 3d8:	0800330c 	stmdaeq	r0, {r2, r3, r8, r9, ip, sp}
 3dc:	00000018 	andeq	r0, r0, r8, lsl r0
 3e0:	08003328 	stmdaeq	r0, {r3, r5, r8, r9, ip, sp}
 3e4:	0000000e 	andeq	r0, r0, lr
 3e8:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
 3ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 3f0:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
 3f4:	00000020 	andeq	r0, r0, r0, lsr #32
 3f8:	08003388 	stmdaeq	r0, {r3, r7, r8, r9, ip, sp}
 3fc:	00000018 	andeq	r0, r0, r8, lsl r0
 400:	080033a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp}
 404:	00000010 	andeq	r0, r0, r0, lsl r0
 408:	080033b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, sp}
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	080033cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp}
 414:	0000001a 	andeq	r0, r0, sl, lsl r0
 418:	080033e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip, sp}
 41c:	0000001e 	andeq	r0, r0, lr, lsl r0
 420:	08003408 	stmdaeq	r0, {r3, sl, ip, sp}
 424:	00000006 	andeq	r0, r0, r6
 428:	08003410 	stmdaeq	r0, {r4, sl, ip, sp}
 42c:	00000024 	andeq	r0, r0, r4, lsr #32
 430:	08003434 	stmdaeq	r0, {r2, r4, r5, sl, ip, sp}
 434:	00000058 	andeq	r0, r0, r8, asr r0
 438:	0800348c 	stmdaeq	r0, {r2, r3, r7, sl, ip, sp}
 43c:	00000024 	andeq	r0, r0, r4, lsr #32
 440:	080034b0 	stmdaeq	r0, {r4, r5, r7, sl, ip, sp}
 444:	00000032 	andeq	r0, r0, r2, lsr r0
 448:	080034e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, sp}
 44c:	000000bc 	strheq	r0, [r0], -ip
 450:	080035a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp}
 454:	0000004c 	andeq	r0, r0, ip, asr #32
	...
 460:	00000034 	andeq	r0, r0, r4, lsr r0
 464:	775a0002 	ldrbvc	r0, [sl, -r2]
 468:	00040000 	andeq	r0, r4, r0
 46c:	00000000 	andeq	r0, r0, r0
 470:	080035ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, sp}
 474:	00000060 	andeq	r0, r0, r0, rrx
 478:	0800364c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp}
 47c:	0000000c 	andeq	r0, r0, ip
 480:	08003658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, sp}
 484:	0000000e 	andeq	r0, r0, lr
 488:	08003668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, sp}
 48c:	00000014 	andeq	r0, r0, r4, lsl r0
	...
 498:	0000003c 	andeq	r0, r0, ip, lsr r0
 49c:	79290002 	stmdbvc	r9!, {r1}
 4a0:	00040000 	andeq	r0, r4, r0
 4a4:	00000000 	andeq	r0, r0, r0
 4a8:	0800367c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip, sp}
 4ac:	00000014 	andeq	r0, r0, r4, lsl r0
 4b0:	08003690 	stmdaeq	r0, {r4, r7, r9, sl, ip, sp}
 4b4:	00000080 	andeq	r0, r0, r0, lsl #1
 4b8:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
 4bc:	00000016 	andeq	r0, r0, r6, lsl r0
 4c0:	08003728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp}
 4c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 4c8:	08003744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip, sp}
 4cc:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
 4d8:	00000084 	andeq	r0, r0, r4, lsl #1
 4dc:	7e700002 	cdpvc	0, 7, cr0, cr0, cr2, {0}
 4e0:	00040000 	andeq	r0, r4, r0
 4e4:	00000000 	andeq	r0, r0, r0
 4e8:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
 4ec:	0000016e 	andeq	r0, r0, lr, ror #2
 4f0:	080038d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, sp}
 4f4:	000000c0 	andeq	r0, r0, r0, asr #1
 4f8:	08003990 	stmdaeq	r0, {r4, r7, r8, fp, ip, sp}
 4fc:	00000012 	andeq	r0, r0, r2, lsl r0
 500:	080039a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, ip, sp}
 504:	00000024 	andeq	r0, r0, r4, lsr #32
 508:	080039c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip, sp}
 50c:	0000000c 	andeq	r0, r0, ip
 510:	080039d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp}
 514:	00000006 	andeq	r0, r0, r6
 518:	080039dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, ip, sp}
 51c:	0000000c 	andeq	r0, r0, ip
 520:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
 524:	00000006 	andeq	r0, r0, r6
 528:	080039f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, sp}
 52c:	00000004 	andeq	r0, r0, r4
 530:	080039f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, sp}
 534:	00000004 	andeq	r0, r0, r4
 538:	080039f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, sp}
 53c:	0000000a 	andeq	r0, r0, sl
 540:	08003a04 	stmdaeq	r0, {r2, r9, fp, ip, sp}
 544:	00000004 	andeq	r0, r0, r4
 548:	08003a08 	stmdaeq	r0, {r3, r9, fp, ip, sp}
 54c:	00000008 	andeq	r0, r0, r8
 550:	08003a10 	stmdaeq	r0, {r4, r9, fp, ip, sp}
 554:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 560:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 564:	86b50002 	ldrthi	r0, [r5], r2
 568:	00040000 	andeq	r0, r4, r0
 56c:	00000000 	andeq	r0, r0, r0
 570:	08003a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip, sp}
 574:	00000054 	andeq	r0, r0, r4, asr r0
 578:	08003a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, sp}
 57c:	00000010 	andeq	r0, r0, r0, lsl r0
 580:	08003a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip, sp}
 584:	0000003e 	andeq	r0, r0, lr, lsr r0
 588:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
 58c:	00000016 	andeq	r0, r0, r6, lsl r0
 590:	08003af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, sp}
 594:	0000000a 	andeq	r0, r0, sl
 598:	08003b00 	stmdaeq	r0, {r8, r9, fp, ip, sp}
 59c:	00000022 	andeq	r0, r0, r2, lsr #32
 5a0:	08003b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip, sp}
 5a4:	0000000c 	andeq	r0, r0, ip
 5a8:	08003b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip, sp}
 5ac:	00000026 	andeq	r0, r0, r6, lsr #32
 5b0:	08003b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip, sp}
 5b4:	0000000a 	andeq	r0, r0, sl
 5b8:	08003b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, sp}
 5bc:	00000018 	andeq	r0, r0, r8, lsl r0
 5c0:	08003b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, sp}
 5c4:	0000000a 	andeq	r0, r0, sl
 5c8:	08003b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip, sp}
 5cc:	00000018 	andeq	r0, r0, r8, lsl r0
 5d0:	08003ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, ip, sp}
 5d4:	0000000a 	andeq	r0, r0, sl
 5d8:	08003bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip, sp}
 5dc:	0000000a 	andeq	r0, r0, sl
 5e0:	08003bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip, sp}
 5e4:	00000016 	andeq	r0, r0, r6, lsl r0
 5e8:	08003bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, sp}
 5ec:	00000016 	andeq	r0, r0, r6, lsl r0
 5f0:	08003be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, ip, sp}
 5f4:	00000014 	andeq	r0, r0, r4, lsl r0
 5f8:	08003bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
 5fc:	00000010 	andeq	r0, r0, r0, lsl r0
 600:	08003c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip, sp}
 604:	00000014 	andeq	r0, r0, r4, lsl r0
 608:	08003c20 	stmdaeq	r0, {r5, sl, fp, ip, sp}
 60c:	00000014 	andeq	r0, r0, r4, lsl r0
 610:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
 614:	00000016 	andeq	r0, r0, r6, lsl r0
 618:	08003c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, sp}
 61c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 620:	08003cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, ip, sp}
 624:	00000038 	andeq	r0, r0, r8, lsr r0
 628:	08003d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp, ip, sp}
 62c:	0000000c 	andeq	r0, r0, ip
 630:	08003d40 	stmdaeq	r0, {r6, r8, sl, fp, ip, sp}
 634:	0000000c 	andeq	r0, r0, ip
 638:	08003d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip, sp}
 63c:	0000000c 	andeq	r0, r0, ip
 640:	08003d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, sp}
 644:	0000001a 	andeq	r0, r0, sl, lsl r0
 648:	08003d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip, sp}
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	08003d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip, sp}
 654:	00000018 	andeq	r0, r0, r8, lsl r0
 658:	08003da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, sp}
 65c:	00000018 	andeq	r0, r0, r8, lsl r0
 660:	08003dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, sp}
 664:	00000018 	andeq	r0, r0, r8, lsl r0
 668:	08003dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, sp}
 66c:	0000000c 	andeq	r0, r0, ip
 670:	08003de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, sp}
 674:	0000001a 	andeq	r0, r0, sl, lsl r0
 678:	08003e00 	stmdaeq	r0, {r9, sl, fp, ip, sp}
 67c:	0000001a 	andeq	r0, r0, sl, lsl r0
 680:	08003e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, ip, sp}
 684:	0000001a 	andeq	r0, r0, sl, lsl r0
 688:	08003e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip, sp}
 68c:	0000001a 	andeq	r0, r0, sl, lsl r0
 690:	08003e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, sp}
 694:	0000001a 	andeq	r0, r0, sl, lsl r0
 698:	08003e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, ip, sp}
 69c:	0000001a 	andeq	r0, r0, sl, lsl r0
 6a0:	08003e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, ip, sp}
 6a4:	0000001a 	andeq	r0, r0, sl, lsl r0
 6a8:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
 6ac:	0000001a 	andeq	r0, r0, sl, lsl r0
 6b0:	08003ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, ip, sp}
 6b4:	0000001a 	andeq	r0, r0, sl, lsl r0
 6b8:	08003ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, sp}
 6bc:	0000001a 	andeq	r0, r0, sl, lsl r0
 6c0:	08003efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
 6c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 6c8:	08003f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, sp}
 6cc:	0000001a 	andeq	r0, r0, sl, lsl r0
 6d0:	08003f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, ip, sp}
 6d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 6d8:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
 6dc:	0000001a 	andeq	r0, r0, sl, lsl r0
 6e0:	08003f6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, ip, sp}
 6e4:	0000001a 	andeq	r0, r0, sl, lsl r0
 6e8:	08003f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip, sp}
 6ec:	0000001a 	andeq	r0, r0, sl, lsl r0
 6f0:	08003fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip, sp}
 6f4:	0000003c 	andeq	r0, r0, ip, lsr r0
 6f8:	08003fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, sp}
 6fc:	00000012 	andeq	r0, r0, r2, lsl r0
 700:	08003ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
 704:	00000014 	andeq	r0, r0, r4, lsl r0
 708:	08004008 	stmdaeq	r0, {r3, lr}
 70c:	0000000c 	andeq	r0, r0, ip
	...
 718:	000000fc 	strdeq	r0, [r0], -ip
 71c:	958b0002 	strls	r0, [fp, #2]
 720:	00040000 	andeq	r0, r4, r0
 724:	00000000 	andeq	r0, r0, r0
 728:	08004014 	stmdaeq	r0, {r2, r4, lr}
 72c:	0000011c 	andeq	r0, r0, ip, lsl r1
 730:	08004130 	stmdaeq	r0, {r4, r5, r8, lr}
 734:	000000c8 	andeq	r0, r0, r8, asr #1
 738:	080041f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, lr}
 73c:	00000016 	andeq	r0, r0, r6, lsl r0
 740:	08004210 	stmdaeq	r0, {r4, r9, lr}
 744:	00000024 	andeq	r0, r0, r4, lsr #32
 748:	08004234 	stmdaeq	r0, {r2, r4, r5, r9, lr}
 74c:	0000000c 	andeq	r0, r0, ip
 750:	08004240 	stmdaeq	r0, {r6, r9, lr}
 754:	0000001a 	andeq	r0, r0, sl, lsl r0
 758:	0800425c 	stmdaeq	r0, {r2, r3, r4, r6, r9, lr}
 75c:	00000012 	andeq	r0, r0, r2, lsl r0
 760:	08004270 	stmdaeq	r0, {r4, r5, r6, r9, lr}
 764:	0000001a 	andeq	r0, r0, sl, lsl r0
 768:	0800428c 	stmdaeq	r0, {r2, r3, r7, r9, lr}
 76c:	0000001a 	andeq	r0, r0, sl, lsl r0
 770:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
 774:	00000008 	andeq	r0, r0, r8
 778:	080042b0 	stmdaeq	r0, {r4, r5, r7, r9, lr}
 77c:	00000008 	andeq	r0, r0, r8
 780:	080042b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, lr}
 784:	00000016 	andeq	r0, r0, r6, lsl r0
 788:	080042d0 	stmdaeq	r0, {r4, r6, r7, r9, lr}
 78c:	0000001a 	andeq	r0, r0, sl, lsl r0
 790:	080042ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, lr}
 794:	00000016 	andeq	r0, r0, r6, lsl r0
 798:	08004304 	stmdaeq	r0, {r2, r8, r9, lr}
 79c:	00000016 	andeq	r0, r0, r6, lsl r0
 7a0:	0800431c 	stmdaeq	r0, {r2, r3, r4, r8, r9, lr}
 7a4:	0000001a 	andeq	r0, r0, sl, lsl r0
 7a8:	08004338 	stmdaeq	r0, {r3, r4, r5, r8, r9, lr}
 7ac:	0000000c 	andeq	r0, r0, ip
 7b0:	08004344 	stmdaeq	r0, {r2, r6, r8, r9, lr}
 7b4:	0000001a 	andeq	r0, r0, sl, lsl r0
 7b8:	08004360 	stmdaeq	r0, {r5, r6, r8, r9, lr}
 7bc:	00000012 	andeq	r0, r0, r2, lsl r0
 7c0:	08004374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, lr}
 7c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 7c8:	08004390 	stmdaeq	r0, {r4, r7, r8, r9, lr}
 7cc:	0000001a 	andeq	r0, r0, sl, lsl r0
 7d0:	080043ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, lr}
 7d4:	00000016 	andeq	r0, r0, r6, lsl r0
 7d8:	080043c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, lr}
 7dc:	0000001a 	andeq	r0, r0, sl, lsl r0
 7e0:	080043e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, lr}
 7e4:	00000014 	andeq	r0, r0, r4, lsl r0
 7e8:	080043f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, lr}
 7ec:	0000003a 	andeq	r0, r0, sl, lsr r0
 7f0:	08004430 	stmdaeq	r0, {r4, r5, sl, lr}
 7f4:	0000000c 	andeq	r0, r0, ip
 7f8:	0800443c 	stmdaeq	r0, {r2, r3, r4, r5, sl, lr}
 7fc:	00000008 	andeq	r0, r0, r8
 800:	08004444 	stmdaeq	r0, {r2, r6, sl, lr}
 804:	0000004a 	andeq	r0, r0, sl, asr #32
 808:	08004490 	stmdaeq	r0, {r4, r7, sl, lr}
 80c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 818:	0000004c 	andeq	r0, r0, ip, asr #32
 81c:	a13c0002 	teqge	ip, r2
 820:	00040000 	andeq	r0, r4, r0
 824:	00000000 	andeq	r0, r0, r0
 828:	080044a0 	stmdaeq	r0, {r5, r7, sl, lr}
 82c:	0000001a 	andeq	r0, r0, sl, lsl r0
 830:	080044bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, lr}
 834:	0000000c 	andeq	r0, r0, ip
 838:	080044c8 	stmdaeq	r0, {r3, r6, r7, sl, lr}
 83c:	0000000a 	andeq	r0, r0, sl
 840:	080044d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, lr}
 844:	0000002e 	andeq	r0, r0, lr, lsr #32
 848:	08004504 	stmdaeq	r0, {r2, r8, sl, lr}
 84c:	0000000a 	andeq	r0, r0, sl
 850:	08004510 	stmdaeq	r0, {r4, r8, sl, lr}
 854:	0000000c 	andeq	r0, r0, ip
 858:	0800451c 	stmdaeq	r0, {r2, r3, r4, r8, sl, lr}
 85c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 868:	0000012c 	andeq	r0, r0, ip, lsr #2
 86c:	a4180002 	ldrge	r0, [r8], #-2
 870:	00040000 	andeq	r0, r4, r0
 874:	00000000 	andeq	r0, r0, r0
 878:	0800452c 	stmdaeq	r0, {r2, r3, r5, r8, sl, lr}
 87c:	00000070 	andeq	r0, r0, r0, ror r0
 880:	0800459c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, lr}
 884:	000000e8 	andeq	r0, r0, r8, ror #1
 888:	08004684 	stmdaeq	r0, {r2, r7, r9, sl, lr}
 88c:	00000022 	andeq	r0, r0, r2, lsr #32
 890:	080046a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, lr}
 894:	0000001a 	andeq	r0, r0, sl, lsl r0
 898:	080046c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, lr}
 89c:	0000001a 	andeq	r0, r0, sl, lsl r0
 8a0:	080046e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, lr}
 8a4:	00000014 	andeq	r0, r0, r4, lsl r0
 8a8:	080046f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, lr}
 8ac:	0000001a 	andeq	r0, r0, sl, lsl r0
 8b0:	08004710 	stmdaeq	r0, {r4, r8, r9, sl, lr}
 8b4:	0000001a 	andeq	r0, r0, sl, lsl r0
 8b8:	0800472c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, lr}
 8bc:	00000012 	andeq	r0, r0, r2, lsl r0
 8c0:	08004740 	stmdaeq	r0, {r6, r8, r9, sl, lr}
 8c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 8c8:	0800475c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, lr}
 8cc:	00000014 	andeq	r0, r0, r4, lsl r0
 8d0:	08004770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, lr}
 8d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 8d8:	0800478c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, lr}
 8dc:	0000001a 	andeq	r0, r0, sl, lsl r0
 8e0:	080047a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, lr}
 8e4:	0000001a 	andeq	r0, r0, sl, lsl r0
 8e8:	080047c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, lr}
 8ec:	0000001a 	andeq	r0, r0, sl, lsl r0
 8f0:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
 8f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8f8:	080047fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 900:	08004818 	stmdaeq	r0, {r3, r4, fp, lr}
 904:	0000001c 	andeq	r0, r0, ip, lsl r0
 908:	08004834 	stmdaeq	r0, {r2, r4, r5, fp, lr}
 90c:	0000001a 	andeq	r0, r0, sl, lsl r0
 910:	08004850 	stmdaeq	r0, {r4, r6, fp, lr}
 914:	00000004 	andeq	r0, r0, r4
 918:	08004854 	stmdaeq	r0, {r2, r4, r6, fp, lr}
 91c:	00000006 	andeq	r0, r0, r6
 920:	0800485c 	stmdaeq	r0, {r2, r3, r4, r6, fp, lr}
 924:	0000001a 	andeq	r0, r0, sl, lsl r0
 928:	08004878 	stmdaeq	r0, {r3, r4, r5, r6, fp, lr}
 92c:	0000001c 	andeq	r0, r0, ip, lsl r0
 930:	08004894 	stmdaeq	r0, {r2, r4, r7, fp, lr}
 934:	0000001a 	andeq	r0, r0, sl, lsl r0
 938:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
 93c:	00000008 	andeq	r0, r0, r8
 940:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
 944:	0000001a 	andeq	r0, r0, sl, lsl r0
 948:	080048d4 	stmdaeq	r0, {r2, r4, r6, r7, fp, lr}
 94c:	0000001a 	andeq	r0, r0, sl, lsl r0
 950:	080048f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, lr}
 954:	00000018 	andeq	r0, r0, r8, lsl r0
 958:	08004908 	stmdaeq	r0, {r3, r8, fp, lr}
 95c:	00000014 	andeq	r0, r0, r4, lsl r0
 960:	0800491c 	stmdaeq	r0, {r2, r3, r4, r8, fp, lr}
 964:	00000018 	andeq	r0, r0, r8, lsl r0
 968:	08004934 	stmdaeq	r0, {r2, r4, r5, r8, fp, lr}
 96c:	00000010 	andeq	r0, r0, r0, lsl r0
 970:	08004944 	stmdaeq	r0, {r2, r6, r8, fp, lr}
 974:	00000036 	andeq	r0, r0, r6, lsr r0
 978:	0800497c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, lr}
 97c:	00000008 	andeq	r0, r0, r8
 980:	08004984 	stmdaeq	r0, {r2, r7, r8, fp, lr}
 984:	0000001c 	andeq	r0, r0, ip, lsl r0
 988:	080049a0 	stmdaeq	r0, {r5, r7, r8, fp, lr}
 98c:	00000008 	andeq	r0, r0, r8
	...
 998:	000000ac 	andeq	r0, r0, ip, lsr #1
 99c:	b06f0002 	rsblt	r0, pc, r2
 9a0:	00040000 	andeq	r0, r4, r0
 9a4:	00000000 	andeq	r0, r0, r0
 9a8:	080049a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, lr}
 9ac:	000001f6 	strdeq	r0, [r0], -r6
 9b0:	08004ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, lr}
 9b4:	0000006a 	andeq	r0, r0, sl, rrx
 9b8:	08004c0c 	stmdaeq	r0, {r2, r3, sl, fp, lr}
 9bc:	00000022 	andeq	r0, r0, r2, lsr #32
 9c0:	08004c30 	stmdaeq	r0, {r4, r5, sl, fp, lr}
 9c4:	00000014 	andeq	r0, r0, r4, lsl r0
 9c8:	08004c44 	stmdaeq	r0, {r2, r6, sl, fp, lr}
 9cc:	00000014 	andeq	r0, r0, r4, lsl r0
 9d0:	08004c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, lr}
 9d4:	00000014 	andeq	r0, r0, r4, lsl r0
 9d8:	08004c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, lr}
 9dc:	00000004 	andeq	r0, r0, r4
 9e0:	08004c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, lr}
 9e4:	00000006 	andeq	r0, r0, r6
 9e8:	08004c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp, lr}
 9ec:	00000018 	andeq	r0, r0, r8, lsl r0
 9f0:	08004c90 	stmdaeq	r0, {r4, r7, sl, fp, lr}
 9f4:	00000014 	andeq	r0, r0, r4, lsl r0
 9f8:	08004ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, lr}
 9fc:	0000000a 	andeq	r0, r0, sl
 a00:	08004cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, lr}
 a04:	00000008 	andeq	r0, r0, r8
 a08:	08004cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, lr}
 a0c:	00000008 	andeq	r0, r0, r8
 a10:	08004cc0 	stmdaeq	r0, {r6, r7, sl, fp, lr}
 a14:	00000008 	andeq	r0, r0, r8
 a18:	08004cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, lr}
 a1c:	00000040 	andeq	r0, r0, r0, asr #32
 a20:	08004d08 	stmdaeq	r0, {r3, r8, sl, fp, lr}
 a24:	0000003a 	andeq	r0, r0, sl, lsr r0
 a28:	08004d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, lr}
 a2c:	00000040 	andeq	r0, r0, r0, asr #32
 a30:	08004d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, lr}
 a34:	00000058 	andeq	r0, r0, r8, asr r0
 a38:	08004ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, lr}
 a3c:	0000003a 	andeq	r0, r0, sl, lsr r0
	...
 a48:	000000dc 	ldrdeq	r0, [r0], -ip
 a4c:	b7ae0002 	strlt	r0, [lr, r2]!
 a50:	00040000 	andeq	r0, r4, r0
 a54:	00000000 	andeq	r0, r0, r0
 a58:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
 a5c:	000000dc 	ldrdeq	r0, [r0], -ip
 a60:	08004ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, lr}
 a64:	00000052 	andeq	r0, r0, r2, asr r0
 a68:	08004f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, lr}
 a6c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 a70:	08005038 	stmdaeq	r0, {r3, r4, r5, ip, lr}
 a74:	00000018 	andeq	r0, r0, r8, lsl r0
 a78:	08005050 	stmdaeq	r0, {r4, r6, ip, lr}
 a7c:	0000000e 	andeq	r0, r0, lr
 a80:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
 a84:	0000001a 	andeq	r0, r0, sl, lsl r0
 a88:	0800507c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip, lr}
 a8c:	0000001a 	andeq	r0, r0, sl, lsl r0
 a90:	08005098 	stmdaeq	r0, {r3, r4, r7, ip, lr}
 a94:	00000016 	andeq	r0, r0, r6, lsl r0
 a98:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
 a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 aa0:	080050cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, lr}
 aa4:	0000001e 	andeq	r0, r0, lr, lsl r0
 aa8:	080050ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, lr}
 aac:	0000001a 	andeq	r0, r0, sl, lsl r0
 ab0:	08005108 	stmdaeq	r0, {r3, r8, ip, lr}
 ab4:	0000001a 	andeq	r0, r0, sl, lsl r0
 ab8:	08005124 	stmdaeq	r0, {r2, r5, r8, ip, lr}
 abc:	00000048 	andeq	r0, r0, r8, asr #32
 ac0:	0800516c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, lr}
 ac4:	00000006 	andeq	r0, r0, r6
 ac8:	08005174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip, lr}
 acc:	00000004 	andeq	r0, r0, r4
 ad0:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
 ad4:	0000001a 	andeq	r0, r0, sl, lsl r0
 ad8:	08005194 	stmdaeq	r0, {r2, r4, r7, r8, ip, lr}
 adc:	0000000c 	andeq	r0, r0, ip
 ae0:	080051a0 	stmdaeq	r0, {r5, r7, r8, ip, lr}
 ae4:	0000000c 	andeq	r0, r0, ip
 ae8:	080051ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, lr}
 aec:	00000006 	andeq	r0, r0, r6
 af0:	080051b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, lr}
 af4:	00000014 	andeq	r0, r0, r4, lsl r0
 af8:	080051c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, lr}
 afc:	0000001e 	andeq	r0, r0, lr, lsl r0
 b00:	080051e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip, lr}
 b04:	0000000c 	andeq	r0, r0, ip
 b08:	080051f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, lr}
 b0c:	00000008 	andeq	r0, r0, r8
 b10:	080051fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip, lr}
 b14:	0000002a 	andeq	r0, r0, sl, lsr #32
 b18:	08005228 	stmdaeq	r0, {r3, r5, r9, ip, lr}
 b1c:	00000012 	andeq	r0, r0, r2, lsl r0
	...
 b28:	00000054 	andeq	r0, r0, r4, asr r0
 b2c:	c42e0002 	strtgt	r0, [lr], #-2
 b30:	00040000 	andeq	r0, r4, r0
 b34:	00000000 	andeq	r0, r0, r0
 b38:	0800523c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, lr}
 b3c:	0000001e 	andeq	r0, r0, lr, lsl r0
 b40:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
 b44:	00000080 	andeq	r0, r0, r0, lsl #1
 b48:	080052dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip, lr}
 b4c:	0000000e 	andeq	r0, r0, lr
 b50:	080052ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip, lr}
 b54:	00000010 	andeq	r0, r0, r0, lsl r0
 b58:	080052fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip, lr}
 b5c:	00000014 	andeq	r0, r0, r4, lsl r0
 b60:	08005310 	stmdaeq	r0, {r4, r8, r9, ip, lr}
 b64:	0000000c 	andeq	r0, r0, ip
 b68:	0800531c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip, lr}
 b6c:	00000014 	andeq	r0, r0, r4, lsl r0
 b70:	08005330 	stmdaeq	r0, {r4, r5, r8, r9, ip, lr}
 b74:	0000000c 	andeq	r0, r0, ip
	...
 b80:	000000ac 	andeq	r0, r0, ip, lsr #1
 b84:	c76e0002 	strbgt	r0, [lr, -r2]!
 b88:	00040000 	andeq	r0, r4, r0
 b8c:	00000000 	andeq	r0, r0, r0
 b90:	0800533c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, lr}
 b94:	0000001a 	andeq	r0, r0, sl, lsl r0
 b98:	08005358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, lr}
 b9c:	000000b6 	strheq	r0, [r0], -r6
 ba0:	08005410 	stmdaeq	r0, {r4, sl, ip, lr}
 ba4:	00000018 	andeq	r0, r0, r8, lsl r0
 ba8:	08005428 	stmdaeq	r0, {r3, r5, sl, ip, lr}
 bac:	00000012 	andeq	r0, r0, r2, lsl r0
 bb0:	0800543c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, lr}
 bb4:	00000012 	andeq	r0, r0, r2, lsl r0
 bb8:	08005450 	stmdaeq	r0, {r4, r6, sl, ip, lr}
 bbc:	0000001c 	andeq	r0, r0, ip, lsl r0
 bc0:	0800546c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, lr}
 bc4:	00000072 	andeq	r0, r0, r2, ror r0
 bc8:	080054e0 	stmdaeq	r0, {r5, r6, r7, sl, ip, lr}
 bcc:	0000001a 	andeq	r0, r0, sl, lsl r0
 bd0:	080054fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, lr}
 bd4:	00000072 	andeq	r0, r0, r2, ror r0
 bd8:	08005570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip, lr}
 bdc:	0000001a 	andeq	r0, r0, sl, lsl r0
 be0:	0800558c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip, lr}
 be4:	0000001c 	andeq	r0, r0, ip, lsl r0
 be8:	080055a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, ip, lr}
 bec:	0000001c 	andeq	r0, r0, ip, lsl r0
 bf0:	080055c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, lr}
 bf4:	0000002c 	andeq	r0, r0, ip, lsr #32
 bf8:	080055f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, lr}
 bfc:	0000000c 	andeq	r0, r0, ip
 c00:	080055fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, ip, lr}
 c04:	0000001a 	andeq	r0, r0, sl, lsl r0
 c08:	08005618 	stmdaeq	r0, {r3, r4, r9, sl, ip, lr}
 c0c:	00000014 	andeq	r0, r0, r4, lsl r0
 c10:	0800562c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, lr}
 c14:	0000000c 	andeq	r0, r0, ip
 c18:	08005638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip, lr}
 c1c:	00000020 	andeq	r0, r0, r0, lsr #32
 c20:	08005658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, lr}
 c24:	0000000e 	andeq	r0, r0, lr
	...
 c30:	00000104 	andeq	r0, r0, r4, lsl #2
 c34:	cfe10002 	svcgt	0x00e10002
 c38:	00040000 	andeq	r0, r4, r0
 c3c:	00000000 	andeq	r0, r0, r0
 c40:	08005668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, lr}
 c44:	0000001a 	andeq	r0, r0, sl, lsl r0
 c48:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
 c4c:	000000a4 	andeq	r0, r0, r4, lsr #1
 c50:	08005728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, lr}
 c54:	00000022 	andeq	r0, r0, r2, lsr #32
 c58:	0800574c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, lr}
 c5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c60:	08005768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, lr}
 c64:	0000001c 	andeq	r0, r0, ip, lsl r0
 c68:	08005784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip, lr}
 c6c:	00000036 	andeq	r0, r0, r6, lsr r0
 c70:	080057bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, lr}
 c74:	0000000a 	andeq	r0, r0, sl
 c78:	080057c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip, lr}
 c7c:	0000000c 	andeq	r0, r0, ip
 c80:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
 c84:	0000000c 	andeq	r0, r0, ip
 c88:	080057e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, lr}
 c8c:	000000bc 	strheq	r0, [r0], -ip
 c90:	0800589c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, lr}
 c94:	00000032 	andeq	r0, r0, r2, lsr r0
 c98:	080058d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, lr}
 c9c:	00000014 	andeq	r0, r0, r4, lsl r0
 ca0:	080058e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, lr}
 ca4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ca8:	08005900 	stmdaeq	r0, {r8, fp, ip, lr}
 cac:	00000008 	andeq	r0, r0, r8
 cb0:	08005908 	stmdaeq	r0, {r3, r8, fp, ip, lr}
 cb4:	00000014 	andeq	r0, r0, r4, lsl r0
 cb8:	0800591c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, lr}
 cbc:	00000042 	andeq	r0, r0, r2, asr #32
 cc0:	08005960 	stmdaeq	r0, {r5, r6, r8, fp, ip, lr}
 cc4:	0000000a 	andeq	r0, r0, sl
 cc8:	0800596c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, ip, lr}
 ccc:	00000020 	andeq	r0, r0, r0, lsr #32
 cd0:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
 cd4:	0000001a 	andeq	r0, r0, sl, lsl r0
 cd8:	080059a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, ip, lr}
 cdc:	0000000c 	andeq	r0, r0, ip
 ce0:	080059b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip, lr}
 ce4:	00000072 	andeq	r0, r0, r2, ror r0
 ce8:	08005a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, lr}
 cec:	00000004 	andeq	r0, r0, r4
 cf0:	08005a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, lr}
 cf4:	00000004 	andeq	r0, r0, r4
 cf8:	08005a30 	stmdaeq	r0, {r4, r5, r9, fp, ip, lr}
 cfc:	00000056 	andeq	r0, r0, r6, asr r0
 d00:	08005a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, lr}
 d04:	00000056 	andeq	r0, r0, r6, asr r0
 d08:	08005ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, ip, lr}
 d0c:	0000001a 	andeq	r0, r0, sl, lsl r0
 d10:	08005afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, ip, lr}
 d14:	00000014 	andeq	r0, r0, r4, lsl r0
 d18:	08005b10 	stmdaeq	r0, {r4, r8, r9, fp, ip, lr}
 d1c:	0000000c 	andeq	r0, r0, ip
 d20:	08005b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, ip, lr}
 d24:	0000001e 	andeq	r0, r0, lr, lsl r0
 d28:	08005b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip, lr}
 d2c:	0000000c 	andeq	r0, r0, ip
	...
 d38:	000000ec 	andeq	r0, r0, ip, ror #1
 d3c:	dd2e0002 	stcle	0, cr0, [lr, #-8]!
 d40:	00040000 	andeq	r0, r4, r0
 d44:	00000000 	andeq	r0, r0, r0
 d48:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
 d4c:	00000038 	andeq	r0, r0, r8, lsr r0
 d50:	08005b80 	stmdaeq	r0, {r7, r8, r9, fp, ip, lr}
 d54:	00000112 	andeq	r0, r0, r2, lsl r1
 d58:	08005c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, ip, lr}
 d5c:	00000058 	andeq	r0, r0, r8, asr r0
 d60:	08005cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip, lr}
 d64:	00000022 	andeq	r0, r0, r2, lsr #32
 d68:	08005d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, lr}
 d6c:	0000001e 	andeq	r0, r0, lr, lsl r0
 d70:	08005d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, lr}
 d74:	00000078 	andeq	r0, r0, r8, ror r0
 d78:	08005da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, lr}
 d7c:	0000002e 	andeq	r0, r0, lr, lsr #32
 d80:	08005dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, lr}
 d84:	00000034 	andeq	r0, r0, r4, lsr r0
 d88:	08005e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, lr}
 d8c:	00000034 	andeq	r0, r0, r4, lsr r0
 d90:	08005e40 	stmdaeq	r0, {r6, r9, sl, fp, ip, lr}
 d94:	00000010 	andeq	r0, r0, r0, lsl r0
 d98:	08005e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, lr}
 d9c:	0000001a 	andeq	r0, r0, sl, lsl r0
 da0:	08005e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, lr}
 da4:	00000064 	andeq	r0, r0, r4, rrx
 da8:	08005ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip, lr}
 dac:	0000002e 	andeq	r0, r0, lr, lsr #32
 db0:	08005f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, lr}
 db4:	00000028 	andeq	r0, r0, r8, lsr #32
 db8:	08005f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp, ip, lr}
 dbc:	0000002c 	andeq	r0, r0, ip, lsr #32
 dc0:	08005f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}
 dc4:	000000d4 	ldrdeq	r0, [r0], -r4
 dc8:	08006028 	stmdaeq	r0, {r3, r5, sp, lr}
 dcc:	00000036 	andeq	r0, r0, r6, lsr r0
 dd0:	08006060 	stmdaeq	r0, {r5, r6, sp, lr}
 dd4:	00000024 	andeq	r0, r0, r4, lsr #32
 dd8:	08006084 	stmdaeq	r0, {r2, r7, sp, lr}
 ddc:	0000001c 	andeq	r0, r0, ip, lsl r0
 de0:	080060a0 	stmdaeq	r0, {r5, r7, sp, lr}
 de4:	00000012 	andeq	r0, r0, r2, lsl r0
 de8:	080060b4 	stmdaeq	r0, {r2, r4, r5, r7, sp, lr}
 dec:	00000012 	andeq	r0, r0, r2, lsl r0
 df0:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
 df4:	00000026 	andeq	r0, r0, r6, lsr #32
 df8:	080060f0 	stmdaeq	r0, {r4, r5, r6, r7, sp, lr}
 dfc:	000000a2 	andeq	r0, r0, r2, lsr #1
 e00:	08006194 	stmdaeq	r0, {r2, r4, r7, r8, sp, lr}
 e04:	00000042 	andeq	r0, r0, r2, asr #32
 e08:	080061d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sp, lr}
 e0c:	00000054 	andeq	r0, r0, r4, asr r0
 e10:	0800622c 	stmdaeq	r0, {r2, r3, r5, r9, sp, lr}
 e14:	0000006c 	andeq	r0, r0, ip, rrx
 e18:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
 e1c:	00000054 	andeq	r0, r0, r4, asr r0
	...
 e28:	00000054 	andeq	r0, r0, r4, asr r0
 e2c:	e9d00002 	ldmib	r0, {r1}^
 e30:	00040000 	andeq	r0, r4, r0
 e34:	00000000 	andeq	r0, r0, r0
 e38:	080062ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sp, lr}
 e3c:	00000016 	andeq	r0, r0, r6, lsl r0
 e40:	08006304 	stmdaeq	r0, {r2, r8, r9, sp, lr}
 e44:	0000001c 	andeq	r0, r0, ip, lsl r0
 e48:	08006320 	stmdaeq	r0, {r5, r8, r9, sp, lr}
 e4c:	0000000c 	andeq	r0, r0, ip
 e50:	0800632c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp, lr}
 e54:	0000001c 	andeq	r0, r0, ip, lsl r0
 e58:	08006348 	stmdaeq	r0, {r3, r6, r8, r9, sp, lr}
 e5c:	00000014 	andeq	r0, r0, r4, lsl r0
 e60:	0800635c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, lr}
 e64:	00000010 	andeq	r0, r0, r0, lsl r0
 e68:	0800636c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sp, lr}
 e6c:	00000014 	andeq	r0, r0, r4, lsl r0
 e70:	08006380 	stmdaeq	r0, {r7, r8, r9, sp, lr}
 e74:	00000010 	andeq	r0, r0, r0, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       4:	00000000 	andeq	r0, r0, r0
       8:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
       c:	08000338 	stmdaeq	r0, {r3, r4, r5, r8, r9}
      10:	08000338 	stmdaeq	r0, {r3, r4, r5, r8, r9}
      14:	0800033a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9}
	...
      20:	08000386 	stmdaeq	r0, {r1, r2, r7, r8, r9}
      24:	080003cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9}
      28:	080003de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9}
      2c:	0800045e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl}
	...
      38:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
      3c:	0800045e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl}
      40:	08000460 	stmdaeq	r0, {r5, r6, sl}
      44:	080004f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl}
	...
      50:	080004f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl}
      54:	0800050a 	stmdaeq	r0, {r1, r3, r8, sl}
      58:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
      5c:	08000562 	stmdaeq	r0, {r1, r5, r6, r8, sl}
      60:	08000564 	stmdaeq	r0, {r2, r5, r6, r8, sl}
      64:	080005a8 	stmdaeq	r0, {r3, r5, r7, r8, sl}
      68:	080005a8 	stmdaeq	r0, {r3, r5, r7, r8, sl}
      6c:	080005d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl}
      70:	080005d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl}
      74:	080005e0 	stmdaeq	r0, {r5, r6, r7, r8, sl}
	...
      80:	0800065e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl}
      84:	0800066a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl}
      88:	0800066c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl}
      8c:	080006b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl}
	...
      98:	08000718 	stmdaeq	r0, {r3, r4, r8, r9, sl}
      9c:	08000720 	stmdaeq	r0, {r5, r8, r9, sl}
      a0:	08000722 	stmdaeq	r0, {r1, r5, r8, r9, sl}
      a4:	0800077a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl}
	...
      b0:	0800077a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl}
      b4:	08000854 	stmdaeq	r0, {r2, r4, r6, fp}
      b8:	08000856 	stmdaeq	r0, {r1, r2, r4, r6, fp}
      bc:	0800085a 	stmdaeq	r0, {r1, r3, r4, r6, fp}
      c0:	08000892 	stmdaeq	r0, {r1, r4, r7, fp}
      c4:	080008b2 	stmdaeq	r0, {r1, r4, r5, r7, fp}
	...
      d0:	0800079e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl}
      d4:	080007a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl}
      d8:	080007a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl}
      dc:	080007a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl}
      e0:	080007ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl}
      e4:	080007b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl}
      e8:	080007b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl}
      ec:	080007bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl}
      f0:	08000892 	stmdaeq	r0, {r1, r4, r7, fp}
      f4:	0800089c 	stmdaeq	r0, {r2, r3, r4, r7, fp}
      f8:	0800089e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp}
      fc:	080008aa 	stmdaeq	r0, {r1, r3, r5, r7, fp}
	...
     108:	080008b8 	stmdaeq	r0, {r3, r4, r5, r7, fp}
     10c:	080008dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp}
     110:	080008de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp}
     114:	080008e2 	stmdaeq	r0, {r1, r5, r6, r7, fp}
     118:	080008e4 	stmdaeq	r0, {r2, r5, r6, r7, fp}
     11c:	080008e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, fp}
	...
     128:	080005e0 	stmdaeq	r0, {r5, r6, r7, r8, sl}
     12c:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
     130:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
     134:	08000714 	stmdaeq	r0, {r2, r4, r8, r9, sl}
     138:	08000714 	stmdaeq	r0, {r2, r4, r8, r9, sl}
     13c:	08000902 	stmdaeq	r0, {r1, r8, fp}
     140:	08000904 	stmdaeq	r0, {r2, r8, fp}
     144:	0800093a 	stmdaeq	r0, {r1, r3, r4, r5, r8, fp}
	...
     150:	08000986 	stmdaeq	r0, {r1, r2, r7, r8, fp}
     154:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
     158:	080009a8 	stmdaeq	r0, {r3, r5, r7, r8, fp}
     15c:	080009b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp}
     160:	080009c0 	stmdaeq	r0, {r6, r7, r8, fp}
     164:	080009e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp}
	...
     170:	08000988 	stmdaeq	r0, {r3, r7, r8, fp}
     174:	08000992 	stmdaeq	r0, {r1, r4, r7, r8, fp}
     178:	080009a8 	stmdaeq	r0, {r3, r5, r7, r8, fp}
     17c:	080009b0 	stmdaeq	r0, {r4, r5, r7, r8, fp}
	...
     188:	08000a04 	stmdaeq	r0, {r2, r9, fp}
     18c:	08000a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp}
     190:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
     194:	08000a26 	stmdaeq	r0, {r1, r2, r5, r9, fp}
	...
     1a0:	08000bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp}
     1a4:	08000be2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, fp}
     1a8:	08000be6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, fp}
     1ac:	08000c3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sl, fp}
     1b0:	08000c42 	stmdaeq	r0, {r1, r6, sl, fp}
     1b4:	08000c4e 	stmdaeq	r0, {r1, r2, r3, r6, sl, fp}
     1b8:	08000c52 	stmdaeq	r0, {r1, r4, r6, sl, fp}
     1bc:	08000c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp}
	...
     1c8:	0800093c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp}
     1cc:	08000956 	stmdaeq	r0, {r1, r2, r4, r6, r8, fp}
     1d0:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
     1d4:	08000a26 	stmdaeq	r0, {r1, r2, r5, r9, fp}
     1d8:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
     1dc:	08000a4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, fp}
     1e0:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
     1e4:	08000a76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, fp}
     1e8:	08000a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp}
     1ec:	08000ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp}
     1f0:	08000ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp}
     1f4:	08000b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp}
     1f8:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
     1fc:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
     200:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
     204:	08000c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp}
     208:	08000c58 	stmdaeq	r0, {r3, r4, r6, sl, fp}
     20c:	08000c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp}
	...
     218:	08000c60 	stmdaeq	r0, {r5, r6, sl, fp}
     21c:	08000c76 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, fp}
     220:	08000c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp}
     224:	08000c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp}
     228:	08000c80 	stmdaeq	r0, {r7, sl, fp}
     22c:	08000c9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, sl, fp}
     230:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
     234:	08000cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp}
     238:	08000cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp}
     23c:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
	...
     248:	08000ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp}
     24c:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
     250:	08000f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp}
     254:	08000f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp}
	...
     260:	08000f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp}
     264:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
     268:	08001078 	stmdaeq	r0, {r3, r4, r5, r6, ip}
     26c:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
	...
     278:	08000faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp}
     27c:	08000fba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, fp}
     280:	0800106c 	stmdaeq	r0, {r2, r3, r5, r6, ip}
     284:	08001070 	stmdaeq	r0, {r4, r5, r6, ip}
	...
     290:	08000fba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, fp}
     294:	08000fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp}
     298:	08000ff2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, fp}
     29c:	08001032 	stmdaeq	r0, {r1, r4, r5, ip}
	...
     2a8:	08001046 	stmdaeq	r0, {r1, r2, r6, ip}
     2ac:	0800106c 	stmdaeq	r0, {r2, r3, r5, r6, ip}
     2b0:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
     2b4:	0800112e 	stmdaeq	r0, {r1, r2, r3, r5, r8, ip}
     2b8:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
     2bc:	08001134 	stmdaeq	r0, {r2, r4, r5, r8, ip}
     2c0:	08001142 	stmdaeq	r0, {r1, r6, r8, ip}
     2c4:	08001172 	stmdaeq	r0, {r1, r4, r5, r6, r8, ip}
	...
     2d0:	08001262 	stmdaeq	r0, {r1, r5, r6, r9, ip}
     2d4:	08001272 	stmdaeq	r0, {r1, r4, r5, r6, r9, ip}
     2d8:	08001292 	stmdaeq	r0, {r1, r4, r7, r9, ip}
     2dc:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
     2e0:	080012ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, ip}
     2e4:	080012d0 	stmdaeq	r0, {r4, r6, r7, r9, ip}
     2e8:	080012d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, ip}
     2ec:	08001310 	stmdaeq	r0, {r4, r8, r9, ip}
	...
     2f8:	08001378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, ip}
     2fc:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
     300:	080013e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip}
     304:	0800144c 	stmdaeq	r0, {r2, r3, r6, sl, ip}
	...
     310:	080013c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, ip}
     314:	080013d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, ip}
     318:	08001496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip}
     31c:	0800149a 	stmdaeq	r0, {r1, r3, r4, r7, sl, ip}
	...
     328:	080016e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, ip}
     32c:	08001722 	stmdaeq	r0, {r1, r5, r8, r9, sl, ip}
     330:	08001734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, ip}
     334:	08001748 	stmdaeq	r0, {r3, r6, r8, r9, sl, ip}
     338:	0800174e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, ip}
     33c:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
	...
     348:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
     34c:	08001918 	stmdaeq	r0, {r3, r4, r8, fp, ip}
     350:	0800191c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip}
     354:	08001920 	stmdaeq	r0, {r5, r8, fp, ip}
	...
     360:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
     364:	08000d22 	stmdaeq	r0, {r1, r5, r8, sl, fp}
     368:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
     36c:	08000da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp}
     370:	08000da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp}
     374:	08000e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp}
     378:	08000e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp}
     37c:	08000e92 	stmdaeq	r0, {r1, r4, r7, r9, sl, fp}
     380:	08000e94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp}
     384:	08000f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp}
     388:	08000f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp}
     38c:	08001198 	stmdaeq	r0, {r3, r4, r7, r8, ip}
     390:	08001198 	stmdaeq	r0, {r3, r4, r7, r8, ip}
     394:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
     398:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
     39c:	0800121c 	stmdaeq	r0, {r2, r3, r4, r9, ip}
     3a0:	0800121c 	stmdaeq	r0, {r2, r3, r4, r9, ip}
     3a4:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
     3a8:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
     3ac:	0800157e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip}
     3b0:	08001580 	stmdaeq	r0, {r7, r8, sl, ip}
     3b4:	080015ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, ip}
     3b8:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
     3bc:	0800163e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl, ip}
     3c0:	08001640 	stmdaeq	r0, {r6, r9, sl, ip}
     3c4:	08001692 	stmdaeq	r0, {r1, r4, r7, r9, sl, ip}
     3c8:	08001694 	stmdaeq	r0, {r2, r4, r7, r9, sl, ip}
     3cc:	080016ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, ip}
     3d0:	080016b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip}
     3d4:	080016ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, ip}
     3d8:	080016d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip}
     3dc:	080016de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, ip}
     3e0:	080016e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip}
     3e4:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
     3e8:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
     3ec:	08001778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip}
     3f0:	08001778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip}
     3f4:	0800177c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip}
     3f8:	0800177c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip}
     3fc:	08001782 	stmdaeq	r0, {r1, r7, r8, r9, sl, ip}
     400:	08001784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip}
     404:	0800179a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, ip}
     408:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
     40c:	080017b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, ip}
     410:	080017b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip}
     414:	0800180e 	stmdaeq	r0, {r1, r2, r3, fp, ip}
     418:	08001810 	stmdaeq	r0, {r4, fp, ip}
     41c:	08001870 	stmdaeq	r0, {r4, r5, r6, fp, ip}
     420:	08001870 	stmdaeq	r0, {r4, r5, r6, fp, ip}
     424:	08001920 	stmdaeq	r0, {r5, r8, fp, ip}
	...
     430:	080019b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, fp, ip}
     434:	080019da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip}
     438:	08001b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip}
     43c:	08001b42 	stmdaeq	r0, {r1, r6, r8, r9, fp, ip}
	...
     448:	080019da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip}
     44c:	08001af2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, fp, ip}
     450:	08001afe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}
     454:	08001b04 	stmdaeq	r0, {r2, r8, r9, fp, ip}
     458:	08001b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, ip}
     45c:	08001b10 	stmdaeq	r0, {r4, r8, r9, fp, ip}
     460:	08001b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, ip}
     464:	08001b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip}
	...
     470:	080019da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip}
     474:	080019dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, ip}
     478:	080019de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, fp, ip}
     47c:	080019e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, ip}
     480:	080019ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, fp, ip}
     484:	080019ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp, ip}
     488:	080019f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip}
     48c:	08001a66 	stmdaeq	r0, {r1, r2, r5, r6, r9, fp, ip}
     490:	08001a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip}
     494:	08001a6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, fp, ip}
	...
     4a0:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
     4a4:	08001e6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, ip}
     4a8:	08001e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip}
     4ac:	08001e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, ip}
	...
     4b8:	08001ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp, ip}
     4bc:	08001eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp, ip}
     4c0:	08001eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, ip}
     4c4:	08001eee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, fp, ip}
     4c8:	08001f00 	stmdaeq	r0, {r8, r9, sl, fp, ip}
     4cc:	08001f0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, fp, ip}
	...
     4d8:	08001f82 	stmdaeq	r0, {r1, r7, r8, r9, sl, fp, ip}
     4dc:	0800207c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sp}
     4e0:	080020aa 	stmdaeq	r0, {r1, r3, r5, r7, sp}
     4e4:	080020ac 	stmdaeq	r0, {r2, r3, r5, r7, sp}
     4e8:	080020b0 	stmdaeq	r0, {r4, r5, r7, sp}
     4ec:	080020ca 	stmdaeq	r0, {r1, r3, r6, r7, sp}
	...
     4f8:	08001f82 	stmdaeq	r0, {r1, r7, r8, r9, sl, fp, ip}
     4fc:	08001faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp, ip}
     500:	080020aa 	stmdaeq	r0, {r1, r3, r5, r7, sp}
     504:	080020ac 	stmdaeq	r0, {r2, r3, r5, r7, sp}
     508:	080020b0 	stmdaeq	r0, {r4, r5, r7, sp}
     50c:	080020b4 	stmdaeq	r0, {r2, r4, r5, r7, sp}
	...
     518:	08001faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp, ip}
     51c:	08002076 	stmdaeq	r0, {r1, r2, r4, r5, r6, sp}
     520:	080020b4 	stmdaeq	r0, {r2, r4, r5, r7, sp}
     524:	080020ca 	stmdaeq	r0, {r1, r3, r6, r7, sp}
	...
     530:	08001fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip}
     534:	08001fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip}
     538:	08001fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip}
     53c:	08001fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, ip}
     540:	08001fde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
     544:	08001fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip}
     548:	08001ff2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, fp, ip}
     54c:	08001ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip}
     550:	08001ffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
     554:	08001ffe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	...
     560:	0800215e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sp}
     564:	08002202 	stmdaeq	r0, {r1, r9, sp}
     568:	08002240 	stmdaeq	r0, {r6, r9, sp}
     56c:	08002264 	stmdaeq	r0, {r2, r5, r6, r9, sp}
     570:	08002268 	stmdaeq	r0, {r3, r5, r6, r9, sp}
     574:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
	...
     580:	08002240 	stmdaeq	r0, {r6, r9, sp}
     584:	08002264 	stmdaeq	r0, {r2, r5, r6, r9, sp}
     588:	08002268 	stmdaeq	r0, {r3, r5, r6, r9, sp}
     58c:	080022a0 	stmdaeq	r0, {r5, r7, r9, sp}
     590:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
     594:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
	...
     5a0:	08002286 	stmdaeq	r0, {r1, r2, r7, r9, sp}
     5a4:	080022a0 	stmdaeq	r0, {r5, r7, r9, sp}
     5a8:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
     5ac:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
	...
     5b8:	080023bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sp}
     5bc:	080023be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sp}
     5c0:	080023c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sp}
     5c4:	080023c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sp}
     5c8:	080023ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sp}
     5cc:	080023cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp}
	...
     5d8:	080023be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sp}
     5dc:	080023c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sp}
     5e0:	080023c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sp}
     5e4:	080023ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sp}
     5e8:	080023cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp}
     5ec:	0800241c 	stmdaeq	r0, {r2, r3, r4, sl, sp}
     5f0:	08002424 	stmdaeq	r0, {r2, r5, sl, sp}
     5f4:	0800242a 	stmdaeq	r0, {r1, r3, r5, sl, sp}
     5f8:	0800244c 	stmdaeq	r0, {r2, r3, r6, sl, sp}
     5fc:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
	...
     608:	080023f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sp}
     60c:	0800241c 	stmdaeq	r0, {r2, r3, r4, sl, sp}
     610:	0800244c 	stmdaeq	r0, {r2, r3, r6, sl, sp}
     614:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
	...
     620:	0800247a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, sp}
     624:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
     628:	08002484 	stmdaeq	r0, {r2, r7, sl, sp}
     62c:	08002486 	stmdaeq	r0, {r1, r2, r7, sl, sp}
     630:	0800248e 	stmdaeq	r0, {r1, r2, r3, r7, sl, sp}
     634:	08002490 	stmdaeq	r0, {r4, r7, sl, sp}
	...
     640:	0800249c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp}
     644:	080024c8 	stmdaeq	r0, {r3, r6, r7, sl, sp}
     648:	080024d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, sp}
     64c:	080024ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, sp}
	...
     658:	08002512 	stmdaeq	r0, {r1, r4, r8, sl, sp}
     65c:	08002536 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, sp}
     660:	08002544 	stmdaeq	r0, {r2, r6, r8, sl, sp}
     664:	0800257e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, sp}
	...
     670:	08002522 	stmdaeq	r0, {r1, r5, r8, sl, sp}
     674:	08002524 	stmdaeq	r0, {r2, r5, r8, sl, sp}
     678:	08002526 	stmdaeq	r0, {r1, r2, r5, r8, sl, sp}
     67c:	0800252a 	stmdaeq	r0, {r1, r3, r5, r8, sl, sp}
	...
     688:	08002580 	stmdaeq	r0, {r7, r8, sl, sp}
     68c:	08002588 	stmdaeq	r0, {r3, r7, r8, sl, sp}
     690:	0800258c 	stmdaeq	r0, {r2, r3, r7, r8, sl, sp}
     694:	0800258e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, sp}
     698:	08002596 	stmdaeq	r0, {r1, r2, r4, r7, r8, sl, sp}
     69c:	0800259a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, sp}
	...
     6a8:	080025be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, sp}
     6ac:	080025ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, sp}
     6b0:	08002636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, sp}
     6b4:	08002658 	stmdaeq	r0, {r3, r4, r6, r9, sl, sp}
     6b8:	0800265a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, sp}
     6bc:	08002662 	stmdaeq	r0, {r1, r5, r6, r9, sl, sp}
     6c0:	08002666 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, sp}
     6c4:	080026d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp}
	...
     6d0:	080025c0 	stmdaeq	r0, {r6, r7, r8, sl, sp}
     6d4:	080025c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp}
     6d8:	08002636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, sp}
     6dc:	08002658 	stmdaeq	r0, {r3, r4, r6, r9, sl, sp}
     6e0:	0800265a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, sp}
     6e4:	08002662 	stmdaeq	r0, {r1, r5, r6, r9, sl, sp}
     6e8:	08002666 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, sp}
     6ec:	080026d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp}
	...
     6f8:	08002636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, sp}
     6fc:	08002658 	stmdaeq	r0, {r3, r4, r6, r9, sl, sp}
     700:	0800265a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, sp}
     704:	08002662 	stmdaeq	r0, {r1, r5, r6, r9, sl, sp}
	...
     710:	0800269c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, sp}
     714:	080026bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, sp}
     718:	080026cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, sp}
     71c:	080026d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp}
	...
     728:	080025de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, sp}
     72c:	080025e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, sp}
     730:	0800276a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, sp}
     734:	0800276e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp}
     738:	08002770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, sp}
     73c:	08002786 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, sp}
     740:	0800278a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, sp}
     744:	080027e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, sp}
	...
     750:	0800276a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, sp}
     754:	0800276e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp}
     758:	08002770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, sp}
     75c:	0800277e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp}
     760:	08002780 	stmdaeq	r0, {r7, r8, r9, sl, sp}
     764:	08002784 	stmdaeq	r0, {r2, r7, r8, r9, sl, sp}
	...
     770:	080025f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, sp}
     774:	080025fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, sp}
     778:	080027e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, sp}
     77c:	080027ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, sp}
     780:	080027ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, sp}
     784:	08002802 	stmdaeq	r0, {r1, fp, sp}
     788:	08002806 	stmdaeq	r0, {r1, r2, fp, sp}
     78c:	08002860 	stmdaeq	r0, {r5, r6, fp, sp}
	...
     798:	080027e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, sp}
     79c:	080027ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, sp}
     7a0:	080027ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, sp}
     7a4:	080027fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, sp}
     7a8:	080027fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, sp}
     7ac:	08002800 	stmdaeq	r0, {fp, sp}
	...
     7b8:	080025fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, sp}
     7bc:	08002602 	stmdaeq	r0, {r1, r9, sl, sp}
     7c0:	08002604 	stmdaeq	r0, {r2, r9, sl, sp}
     7c4:	0800260c 	stmdaeq	r0, {r2, r3, r9, sl, sp}
     7c8:	08002860 	stmdaeq	r0, {r5, r6, fp, sp}
     7cc:	08002868 	stmdaeq	r0, {r3, r5, r6, fp, sp}
     7d0:	0800286a 	stmdaeq	r0, {r1, r3, r5, r6, fp, sp}
     7d4:	08002878 	stmdaeq	r0, {r3, r4, r5, r6, fp, sp}
     7d8:	0800287a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, sp}
     7dc:	08002898 	stmdaeq	r0, {r3, r4, r7, fp, sp}
     7e0:	0800289c 	stmdaeq	r0, {r2, r3, r4, r7, fp, sp}
     7e4:	080028fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp}
	...
     7f0:	08002872 	stmdaeq	r0, {r1, r4, r5, r6, fp, sp}
     7f4:	08002878 	stmdaeq	r0, {r3, r4, r5, r6, fp, sp}
     7f8:	0800287a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, sp}
     7fc:	08002898 	stmdaeq	r0, {r3, r4, r7, fp, sp}
     800:	0800289c 	stmdaeq	r0, {r2, r3, r4, r7, fp, sp}
     804:	080028fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp}
	...
     810:	08002872 	stmdaeq	r0, {r1, r4, r5, r6, fp, sp}
     814:	08002874 	stmdaeq	r0, {r2, r4, r5, r6, fp, sp}
     818:	08002876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, sp}
     81c:	08002878 	stmdaeq	r0, {r3, r4, r5, r6, fp, sp}
     820:	0800287a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, sp}
     824:	08002886 	stmdaeq	r0, {r1, r2, r7, fp, sp}
     828:	0800288e 	stmdaeq	r0, {r1, r2, r3, r7, fp, sp}
     82c:	08002892 	stmdaeq	r0, {r1, r4, r7, fp, sp}
	...
     838:	08002874 	stmdaeq	r0, {r2, r4, r5, r6, fp, sp}
     83c:	08002876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, sp}
     840:	08002886 	stmdaeq	r0, {r1, r2, r7, fp, sp}
     844:	08002888 	stmdaeq	r0, {r3, r7, fp, sp}
     848:	0800288a 	stmdaeq	r0, {r1, r3, r7, fp, sp}
     84c:	0800288e 	stmdaeq	r0, {r1, r2, r3, r7, fp, sp}
     850:	08002894 	stmdaeq	r0, {r2, r4, r7, fp, sp}
     854:	08002898 	stmdaeq	r0, {r3, r4, r7, fp, sp}
     858:	080028a0 	stmdaeq	r0, {r5, r7, fp, sp}
     85c:	080028b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, sp}
	...
     868:	0800260c 	stmdaeq	r0, {r2, r3, r9, sl, sp}
     86c:	08002614 	stmdaeq	r0, {r2, r4, r9, sl, sp}
     870:	08002618 	stmdaeq	r0, {r3, r4, r9, sl, sp}
     874:	0800261e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, sp}
     878:	080026d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp}
     87c:	080026e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp}
     880:	080026e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, sp}
     884:	080026f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp}
     888:	080026f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, sp}
     88c:	0800276a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, sp}
	...
     898:	080026d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp}
     89c:	080026d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, sp}
     8a0:	080026d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp}
     8a4:	080026d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, sp}
     8a8:	080026d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, sp}
     8ac:	080026e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp}
     8b0:	080026e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, sp}
     8b4:	080026ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, sp}
	...
     8c0:	080026d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, sp}
     8c4:	080026d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp}
     8c8:	080026d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, sp}
     8cc:	080026d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, sp}
     8d0:	080026ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, sp}
     8d4:	080026ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, sp}
     8d8:	080026f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, sp}
     8dc:	080026f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp}
     8e0:	080026fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, sp}
     8e4:	080026fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, sp}
     8e8:	08002704 	stmdaeq	r0, {r2, r8, r9, sl, sp}
     8ec:	0800271a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, sp}
	...
     8f8:	08002952 	stmdaeq	r0, {r1, r4, r6, r8, fp, sp}
     8fc:	08002978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, sp}
     900:	0800298c 	stmdaeq	r0, {r2, r3, r7, r8, fp, sp}
     904:	08002992 	stmdaeq	r0, {r1, r4, r7, r8, fp, sp}
	...
     910:	080029c2 	stmdaeq	r0, {r1, r6, r7, r8, fp, sp}
     914:	080029c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, fp, sp}
     918:	080029c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, sp}
     91c:	080029fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, fp, sp}
     920:	08002a02 	stmdaeq	r0, {r1, r9, fp, sp}
     924:	08002a08 	stmdaeq	r0, {r3, r9, fp, sp}
	...
     930:	080029f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, fp, sp}
     934:	080029fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, fp, sp}
     938:	08002a02 	stmdaeq	r0, {r1, r9, fp, sp}
     93c:	08002a08 	stmdaeq	r0, {r3, r9, fp, sp}
	...
     948:	08002a6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, fp, sp}
     94c:	08002a72 	stmdaeq	r0, {r1, r4, r5, r6, r9, fp, sp}
     950:	08002a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, sp}
     954:	08002a9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, fp, sp}
     958:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
     95c:	08002ab0 	stmdaeq	r0, {r4, r5, r7, r9, fp, sp}
     960:	08002ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp, sp}
     964:	08002aba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, fp, sp}
	...
     970:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
     974:	08002ab0 	stmdaeq	r0, {r4, r5, r7, r9, fp, sp}
     978:	08002ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp, sp}
     97c:	08002aba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, fp, sp}
	...
     988:	08002af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, sp}
     98c:	08002afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, sp}
     990:	08002afe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, fp, sp}
     994:	08002b28 	stmdaeq	r0, {r3, r5, r8, r9, fp, sp}
     998:	08002b2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, fp, sp}
     99c:	08002b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, sp}
     9a0:	08002b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp, sp}
     9a4:	08002b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, sp}
	...
     9b0:	08002b2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, fp, sp}
     9b4:	08002b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, sp}
     9b8:	08002b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp, sp}
     9bc:	08002b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, sp}
	...
     9c8:	08002c84 	stmdaeq	r0, {r2, r7, sl, fp, sp}
     9cc:	08002cc0 	stmdaeq	r0, {r6, r7, sl, fp, sp}
     9d0:	08002cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, sp}
     9d4:	08002cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, sp}
     9d8:	08002cd2 	stmdaeq	r0, {r1, r4, r6, r7, sl, fp, sp}
     9dc:	08002cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, sp}
	...
     9e8:	08002cb2 	stmdaeq	r0, {r1, r4, r5, r7, sl, fp, sp}
     9ec:	08002cb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, fp, sp}
     9f0:	08002cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, sp}
     9f4:	08002cc0 	stmdaeq	r0, {r6, r7, sl, fp, sp}
	...
     a00:	08001920 	stmdaeq	r0, {r5, r8, fp, ip}
     a04:	0800198e 	stmdaeq	r0, {r1, r2, r3, r7, r8, fp, ip}
     a08:	08001990 	stmdaeq	r0, {r4, r7, r8, fp, ip}
     a0c:	08001b4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, fp, ip}
     a10:	08001b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip}
     a14:	08001c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip}
     a18:	08001c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip}
     a1c:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
     a20:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
     a24:	08001cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip}
     a28:	08001cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip}
     a2c:	08001e46 	stmdaeq	r0, {r1, r2, r6, r9, sl, fp, ip}
     a30:	08001e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip}
     a34:	08001ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip}
     a38:	08001ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip}
     a3c:	08001f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip}
     a40:	08001f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip}
     a44:	080020ca 	stmdaeq	r0, {r1, r3, r6, r7, sp}
     a48:	080020cc 	stmdaeq	r0, {r2, r3, r6, r7, sp}
     a4c:	080020e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sp}
     a50:	080020e8 	stmdaeq	r0, {r3, r5, r6, r7, sp}
     a54:	080020f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp}
     a58:	080020f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp}
     a5c:	08002110 	stmdaeq	r0, {r4, r8, sp}
     a60:	08002110 	stmdaeq	r0, {r4, r8, sp}
     a64:	0800212c 	stmdaeq	r0, {r2, r3, r5, r8, sp}
     a68:	0800212c 	stmdaeq	r0, {r2, r3, r5, r8, sp}
     a6c:	08002138 	stmdaeq	r0, {r3, r4, r5, r8, sp}
     a70:	08002138 	stmdaeq	r0, {r3, r4, r5, r8, sp}
     a74:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
     a78:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
     a7c:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
     a80:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
     a84:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
     a88:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
     a8c:	080024ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, sp}
     a90:	080024ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, sp}
     a94:	0800257e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, sp}
     a98:	08002580 	stmdaeq	r0, {r7, r8, sl, sp}
     a9c:	080028fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp}
     aa0:	080028fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp}
     aa4:	08002992 	stmdaeq	r0, {r1, r4, r7, r8, fp, sp}
     aa8:	08002994 	stmdaeq	r0, {r2, r4, r7, r8, fp, sp}
     aac:	08002a22 	stmdaeq	r0, {r1, r5, r9, fp, sp}
     ab0:	08002a24 	stmdaeq	r0, {r2, r5, r9, fp, sp}
     ab4:	08002ace 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, fp, sp}
     ab8:	08002ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, sp}
     abc:	08002b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, sp}
     ac0:	08002b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, sp}
     ac4:	08002bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp, sp}
     ac8:	08002bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, sp}
     acc:	08002c4e 	stmdaeq	r0, {r1, r2, r3, r6, sl, fp, sp}
     ad0:	08002c50 	stmdaeq	r0, {r4, r6, sl, fp, sp}
     ad4:	08002c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, sp}
     ad8:	08002c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, sp}
     adc:	08002ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, sp}
     ae0:	08002ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, sp}
     ae4:	08002cf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, fp, sp}
     ae8:	08002cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, sp}
     aec:	08002cfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, fp, sp}
     af0:	08002d00 	stmdaeq	r0, {r8, sl, fp, sp}
     af4:	08002d06 	stmdaeq	r0, {r1, r2, r8, sl, fp, sp}
     af8:	08002d08 	stmdaeq	r0, {r3, r8, sl, fp, sp}
     afc:	08002d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, sp}
     b00:	08002d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, sp}
     b04:	08002d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, sp}
     b08:	08002d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, sp}
     b0c:	08002db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, sp}
     b10:	08002db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, sp}
     b14:	08002e02 	stmdaeq	r0, {r1, r9, sl, fp, sp}
     b18:	08002e04 	stmdaeq	r0, {r2, r9, sl, fp, sp}
     b1c:	08002e1e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, fp, sp}
	...
     b28:	08002e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, sp}
     b2c:	08002e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, sp}
     b30:	08002e2e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl, fp, sp}
     b34:	08002e40 	stmdaeq	r0, {r6, r9, sl, fp, sp}
     b38:	08002e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp, sp}
     b3c:	08002ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, sp}
     b40:	08002ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, sp}
     b44:	08002ed2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, fp, sp}
	...
     b50:	08002eee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, fp, sp}
     b54:	08002f02 	stmdaeq	r0, {r1, r8, r9, sl, fp, sp}
     b58:	08002f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp, sp}
     b5c:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
	...
     b68:	08003010 	stmdaeq	r0, {r4, ip, sp}
     b6c:	08003054 	stmdaeq	r0, {r2, r4, r6, ip, sp}
     b70:	080030b8 	stmdaeq	r0, {r3, r4, r5, r7, ip, sp}
     b74:	080030f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip, sp}
     b78:	08003130 	stmdaeq	r0, {r4, r5, r8, ip, sp}
     b7c:	08003168 	stmdaeq	r0, {r3, r5, r6, r8, ip, sp}
     b80:	0800317e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, ip, sp}
     b84:	080031f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip, sp}
     b88:	0800322a 	stmdaeq	r0, {r1, r3, r5, r9, ip, sp}
     b8c:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
	...
     b98:	08003014 	stmdaeq	r0, {r2, r4, ip, sp}
     b9c:	08003026 	stmdaeq	r0, {r1, r2, r5, ip, sp}
     ba0:	08003030 	stmdaeq	r0, {r4, r5, ip, sp}
     ba4:	0800303c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp}
     ba8:	080030b8 	stmdaeq	r0, {r3, r4, r5, r7, ip, sp}
     bac:	080030f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, ip, sp}
     bb0:	08003152 	stmdaeq	r0, {r1, r4, r6, r8, ip, sp}
     bb4:	08003168 	stmdaeq	r0, {r3, r5, r6, r8, ip, sp}
     bb8:	080031c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip, sp}
     bbc:	080031f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip, sp}
	...
     bc8:	080030b8 	stmdaeq	r0, {r3, r4, r5, r7, ip, sp}
     bcc:	080030e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, sp}
     bd0:	080030ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, sp}
     bd4:	080030f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, ip, sp}
     bd8:	08003152 	stmdaeq	r0, {r1, r4, r6, r8, ip, sp}
     bdc:	08003168 	stmdaeq	r0, {r3, r5, r6, r8, ip, sp}
     be0:	080031c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip, sp}
     be4:	080031f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip, sp}
	...
     bf0:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
     bf4:	08003152 	stmdaeq	r0, {r1, r4, r6, r8, ip, sp}
     bf8:	08003184 	stmdaeq	r0, {r2, r7, r8, ip, sp}
     bfc:	080031c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip, sp}
     c00:	0800322a 	stmdaeq	r0, {r1, r3, r5, r9, ip, sp}
     c04:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
	...
     c10:	08003186 	stmdaeq	r0, {r1, r2, r7, r8, ip, sp}
     c14:	08003188 	stmdaeq	r0, {r3, r7, r8, ip, sp}
     c18:	0800318a 	stmdaeq	r0, {r1, r3, r7, r8, ip, sp}
     c1c:	08003198 	stmdaeq	r0, {r3, r4, r7, r8, ip, sp}
     c20:	0800322a 	stmdaeq	r0, {r1, r3, r5, r9, ip, sp}
     c24:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
	...
     c30:	08003054 	stmdaeq	r0, {r2, r4, r6, ip, sp}
     c34:	080030b8 	stmdaeq	r0, {r3, r4, r5, r7, ip, sp}
     c38:	080030f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip, sp}
     c3c:	08003130 	stmdaeq	r0, {r4, r5, r8, ip, sp}
     c40:	08003168 	stmdaeq	r0, {r3, r5, r6, r8, ip, sp}
     c44:	0800317e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, ip, sp}
     c48:	080031f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip, sp}
     c4c:	0800322a 	stmdaeq	r0, {r1, r3, r5, r9, ip, sp}
     c50:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
     c54:	080032f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, sp}
	...
     c60:	0800307c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip, sp}
     c64:	080030b0 	stmdaeq	r0, {r4, r5, r7, ip, sp}
     c68:	080030f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip, sp}
     c6c:	08003130 	stmdaeq	r0, {r4, r5, r8, ip, sp}
     c70:	08003168 	stmdaeq	r0, {r3, r5, r6, r8, ip, sp}
     c74:	0800317e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, ip, sp}
     c78:	080031f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip, sp}
     c7c:	0800322a 	stmdaeq	r0, {r1, r3, r5, r9, ip, sp}
	...
     c88:	0800324e 	stmdaeq	r0, {r1, r2, r3, r6, r9, ip, sp}
     c8c:	08003254 	stmdaeq	r0, {r2, r4, r6, r9, ip, sp}
     c90:	08003256 	stmdaeq	r0, {r1, r2, r4, r6, r9, ip, sp}
     c94:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
     c98:	080032be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, ip, sp}
     c9c:	080032ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, ip, sp}
	...
     ca8:	080032a0 	stmdaeq	r0, {r5, r7, r9, ip, sp}
     cac:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
     cb0:	080032a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, ip, sp}
     cb4:	080032be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, ip, sp}
	...
     cc0:	080032ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, ip, sp}
     cc4:	080032b0 	stmdaeq	r0, {r4, r5, r7, r9, ip, sp}
     cc8:	080032b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, ip, sp}
     ccc:	080032b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip, sp}
	...
     cd8:	08002e20 	stmdaeq	r0, {r5, r9, sl, fp, sp}
     cdc:	08002ed2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, fp, sp}
     ce0:	08002ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, sp}
     ce4:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
     ce8:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
     cec:	08002fd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, fp, sp}
     cf0:	08002fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, sp}
     cf4:	080032f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, sp}
     cf8:	080032f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, sp}
     cfc:	08003308 	stmdaeq	r0, {r3, r8, r9, ip, sp}
     d00:	08003308 	stmdaeq	r0, {r3, r8, r9, ip, sp}
     d04:	0800330c 	stmdaeq	r0, {r2, r3, r8, r9, ip, sp}
	...
     d10:	080034e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, ip, sp}
     d14:	080034ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip, sp}
     d18:	080034f0 	stmdaeq	r0, {r4, r5, r6, r7, sl, ip, sp}
     d1c:	08003552 	stmdaeq	r0, {r1, r4, r6, r8, sl, ip, sp}
     d20:	0800355a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, ip, sp}
     d24:	08003564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip, sp}
	...
     d30:	0800330c 	stmdaeq	r0, {r2, r3, r8, r9, ip, sp}
     d34:	08003324 	stmdaeq	r0, {r2, r5, r8, r9, ip, sp}
     d38:	08003328 	stmdaeq	r0, {r3, r5, r8, r9, ip, sp}
     d3c:	08003336 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, ip, sp}
     d40:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
     d44:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
     d48:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
     d4c:	08003388 	stmdaeq	r0, {r3, r7, r8, r9, ip, sp}
     d50:	08003388 	stmdaeq	r0, {r3, r7, r8, r9, ip, sp}
     d54:	080033a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp}
     d58:	080033a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp}
     d5c:	080033b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, sp}
     d60:	080033b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, sp}
     d64:	080033cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp}
     d68:	080033cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp}
     d6c:	080033e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, ip, sp}
     d70:	080033e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip, sp}
     d74:	08003406 	stmdaeq	r0, {r1, r2, sl, ip, sp}
     d78:	08003408 	stmdaeq	r0, {r3, sl, ip, sp}
     d7c:	0800340e 	stmdaeq	r0, {r1, r2, r3, sl, ip, sp}
     d80:	08003410 	stmdaeq	r0, {r4, sl, ip, sp}
     d84:	08003434 	stmdaeq	r0, {r2, r4, r5, sl, ip, sp}
     d88:	08003434 	stmdaeq	r0, {r2, r4, r5, sl, ip, sp}
     d8c:	0800348c 	stmdaeq	r0, {r2, r3, r7, sl, ip, sp}
     d90:	0800348c 	stmdaeq	r0, {r2, r3, r7, sl, ip, sp}
     d94:	080034b0 	stmdaeq	r0, {r4, r5, r7, sl, ip, sp}
     d98:	080034b0 	stmdaeq	r0, {r4, r5, r7, sl, ip, sp}
     d9c:	080034e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip, sp}
     da0:	080034e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, sp}
     da4:	080035a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp}
     da8:	080035a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp}
     dac:	080035ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, sp}
	...
     db8:	080035ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, sp}
     dbc:	0800364c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp}
     dc0:	0800364c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp}
     dc4:	08003658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, sp}
     dc8:	08003658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, sp}
     dcc:	08003666 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, ip, sp}
     dd0:	08003668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, sp}
     dd4:	0800367c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip, sp}
	...
     de0:	0800367c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip, sp}
     de4:	08003690 	stmdaeq	r0, {r4, r7, r9, sl, ip, sp}
     de8:	08003690 	stmdaeq	r0, {r4, r7, r9, sl, ip, sp}
     dec:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
     df0:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
     df4:	08003726 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, ip, sp}
     df8:	08003728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp}
     dfc:	08003742 	stmdaeq	r0, {r1, r6, r8, r9, sl, ip, sp}
     e00:	08003744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip, sp}
     e04:	0800375e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sl, ip, sp}
	...
     e10:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
     e14:	080038ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, sp}
     e18:	080038d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, sp}
     e1c:	08003990 	stmdaeq	r0, {r4, r7, r8, fp, ip, sp}
     e20:	08003990 	stmdaeq	r0, {r4, r7, r8, fp, ip, sp}
     e24:	080039a2 	stmdaeq	r0, {r1, r5, r7, r8, fp, ip, sp}
     e28:	080039a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, ip, sp}
     e2c:	080039c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip, sp}
     e30:	080039c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip, sp}
     e34:	080039d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp}
     e38:	080039d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp}
     e3c:	080039da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip, sp}
     e40:	080039dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, ip, sp}
     e44:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
     e48:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
     e4c:	080039ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, ip, sp}
     e50:	080039f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, sp}
     e54:	080039f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, sp}
     e58:	080039f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, sp}
     e5c:	080039f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, sp}
     e60:	080039f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, sp}
     e64:	08003a02 	stmdaeq	r0, {r1, r9, fp, ip, sp}
     e68:	08003a04 	stmdaeq	r0, {r2, r9, fp, ip, sp}
     e6c:	08003a08 	stmdaeq	r0, {r3, r9, fp, ip, sp}
     e70:	08003a08 	stmdaeq	r0, {r3, r9, fp, ip, sp}
     e74:	08003a10 	stmdaeq	r0, {r4, r9, fp, ip, sp}
     e78:	08003a10 	stmdaeq	r0, {r4, r9, fp, ip, sp}
     e7c:	08003a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip, sp}
	...
     e88:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
     e8c:	08003aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, ip, sp}
     e90:	08003aa6 	stmdaeq	r0, {r1, r2, r5, r7, r9, fp, ip, sp}
     e94:	08003ab0 	stmdaeq	r0, {r4, r5, r7, r9, fp, ip, sp}
	...
     ea0:	08003a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip, sp}
     ea4:	08003a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, sp}
     ea8:	08003a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, sp}
     eac:	08003a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip, sp}
     eb0:	08003a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip, sp}
     eb4:	08003ada 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, fp, ip, sp}
     eb8:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
     ebc:	08003af2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, fp, ip, sp}
     ec0:	08003af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, sp}
     ec4:	08003afe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, fp, ip, sp}
     ec8:	08003b00 	stmdaeq	r0, {r8, r9, fp, ip, sp}
     ecc:	08003b22 	stmdaeq	r0, {r1, r5, r8, r9, fp, ip, sp}
     ed0:	08003b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip, sp}
     ed4:	08003b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip, sp}
     ed8:	08003b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip, sp}
     edc:	08003b56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, fp, ip, sp}
     ee0:	08003b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip, sp}
     ee4:	08003b62 	stmdaeq	r0, {r1, r5, r6, r8, r9, fp, ip, sp}
     ee8:	08003b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, sp}
     eec:	08003b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, sp}
     ef0:	08003b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, sp}
     ef4:	08003b86 	stmdaeq	r0, {r1, r2, r7, r8, r9, fp, ip, sp}
     ef8:	08003b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip, sp}
     efc:	08003ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, ip, sp}
     f00:	08003ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, ip, sp}
     f04:	08003baa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, fp, ip, sp}
     f08:	08003bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip, sp}
     f0c:	08003bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, ip, sp}
     f10:	08003bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip, sp}
     f14:	08003bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp, ip, sp}
     f18:	08003bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, sp}
     f1c:	08003be6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, fp, ip, sp}
     f20:	08003be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, ip, sp}
     f24:	08003bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
     f28:	08003bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
     f2c:	08003c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip, sp}
     f30:	08003c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip, sp}
     f34:	08003c20 	stmdaeq	r0, {r5, sl, fp, ip, sp}
     f38:	08003c20 	stmdaeq	r0, {r5, sl, fp, ip, sp}
     f3c:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
     f40:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
     f44:	08003c4a 	stmdaeq	r0, {r1, r3, r6, sl, fp, ip, sp}
     f48:	08003c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, sp}
     f4c:	08003cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, ip, sp}
     f50:	08003cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, ip, sp}
     f54:	08003d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp, ip, sp}
     f58:	08003d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp, ip, sp}
     f5c:	08003d40 	stmdaeq	r0, {r6, r8, sl, fp, ip, sp}
     f60:	08003d40 	stmdaeq	r0, {r6, r8, sl, fp, ip, sp}
     f64:	08003d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip, sp}
     f68:	08003d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip, sp}
     f6c:	08003d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, sp}
     f70:	08003d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, sp}
     f74:	08003d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp, ip, sp}
     f78:	08003d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip, sp}
     f7c:	08003d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip, sp}
     f80:	08003d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip, sp}
     f84:	08003da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, sp}
     f88:	08003da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, sp}
     f8c:	08003dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, sp}
     f90:	08003dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, sp}
     f94:	08003dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, sp}
     f98:	08003dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, sp}
     f9c:	08003de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, sp}
     fa0:	08003de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, sp}
     fa4:	08003dfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
     fa8:	08003e00 	stmdaeq	r0, {r9, sl, fp, ip, sp}
     fac:	08003e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, ip, sp}
     fb0:	08003e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, ip, sp}
     fb4:	08003e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp, ip, sp}
     fb8:	08003e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip, sp}
     fbc:	08003e52 	stmdaeq	r0, {r1, r4, r6, r9, sl, fp, ip, sp}
     fc0:	08003e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, sp}
     fc4:	08003e6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, ip, sp}
     fc8:	08003e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, ip, sp}
     fcc:	08003e8a 	stmdaeq	r0, {r1, r3, r7, r9, sl, fp, ip, sp}
     fd0:	08003e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, ip, sp}
     fd4:	08003ea6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, fp, ip, sp}
     fd8:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
     fdc:	08003ec2 	stmdaeq	r0, {r1, r6, r7, r9, sl, fp, ip, sp}
     fe0:	08003ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, ip, sp}
     fe4:	08003ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp}
     fe8:	08003ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, sp}
     fec:	08003efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
     ff0:	08003efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
     ff4:	08003f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp, ip, sp}
     ff8:	08003f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, sp}
     ffc:	08003f32 	stmdaeq	r0, {r1, r4, r5, r8, r9, sl, fp, ip, sp}
    1000:	08003f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, ip, sp}
    1004:	08003f4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, fp, ip, sp}
    1008:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
    100c:	08003f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, ip, sp}
    1010:	08003f6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, ip, sp}
    1014:	08003f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp, ip, sp}
    1018:	08003f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip, sp}
    101c:	08003fa2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, fp, ip, sp}
    1020:	08003fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip, sp}
    1024:	08003fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, sp}
    1028:	08003fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, sp}
    102c:	08003ff2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    1030:	08003ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    1034:	08004008 	stmdaeq	r0, {r3, lr}
    1038:	08004008 	stmdaeq	r0, {r3, lr}
    103c:	08004014 	stmdaeq	r0, {r2, r4, lr}
	...
    1048:	08004014 	stmdaeq	r0, {r2, r4, lr}
    104c:	08004130 	stmdaeq	r0, {r4, r5, r8, lr}
    1050:	08004130 	stmdaeq	r0, {r4, r5, r8, lr}
    1054:	080041f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, lr}
    1058:	080041f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, lr}
    105c:	0800420e 	stmdaeq	r0, {r1, r2, r3, r9, lr}
    1060:	08004210 	stmdaeq	r0, {r4, r9, lr}
    1064:	08004234 	stmdaeq	r0, {r2, r4, r5, r9, lr}
    1068:	08004234 	stmdaeq	r0, {r2, r4, r5, r9, lr}
    106c:	08004240 	stmdaeq	r0, {r6, r9, lr}
    1070:	08004240 	stmdaeq	r0, {r6, r9, lr}
    1074:	0800425a 	stmdaeq	r0, {r1, r3, r4, r6, r9, lr}
    1078:	0800425c 	stmdaeq	r0, {r2, r3, r4, r6, r9, lr}
    107c:	0800426e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, lr}
    1080:	08004270 	stmdaeq	r0, {r4, r5, r6, r9, lr}
    1084:	0800428a 	stmdaeq	r0, {r1, r3, r7, r9, lr}
    1088:	0800428c 	stmdaeq	r0, {r2, r3, r7, r9, lr}
    108c:	080042a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, lr}
    1090:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
    1094:	080042b0 	stmdaeq	r0, {r4, r5, r7, r9, lr}
    1098:	080042b0 	stmdaeq	r0, {r4, r5, r7, r9, lr}
    109c:	080042b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, lr}
    10a0:	080042b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, lr}
    10a4:	080042ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, lr}
    10a8:	080042d0 	stmdaeq	r0, {r4, r6, r7, r9, lr}
    10ac:	080042ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, lr}
    10b0:	080042ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, lr}
    10b4:	08004302 	stmdaeq	r0, {r1, r8, r9, lr}
    10b8:	08004304 	stmdaeq	r0, {r2, r8, r9, lr}
    10bc:	0800431a 	stmdaeq	r0, {r1, r3, r4, r8, r9, lr}
    10c0:	0800431c 	stmdaeq	r0, {r2, r3, r4, r8, r9, lr}
    10c4:	08004336 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, lr}
    10c8:	08004338 	stmdaeq	r0, {r3, r4, r5, r8, r9, lr}
    10cc:	08004344 	stmdaeq	r0, {r2, r6, r8, r9, lr}
    10d0:	08004344 	stmdaeq	r0, {r2, r6, r8, r9, lr}
    10d4:	0800435e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, lr}
    10d8:	08004360 	stmdaeq	r0, {r5, r6, r8, r9, lr}
    10dc:	08004372 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, lr}
    10e0:	08004374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, lr}
    10e4:	0800438e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, lr}
    10e8:	08004390 	stmdaeq	r0, {r4, r7, r8, r9, lr}
    10ec:	080043aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, lr}
    10f0:	080043ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, lr}
    10f4:	080043c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, lr}
    10f8:	080043c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, lr}
    10fc:	080043de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, lr}
    1100:	080043e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, lr}
    1104:	080043f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, lr}
    1108:	080043f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, lr}
    110c:	0800442e 	stmdaeq	r0, {r1, r2, r3, r5, sl, lr}
    1110:	08004430 	stmdaeq	r0, {r4, r5, sl, lr}
    1114:	0800443c 	stmdaeq	r0, {r2, r3, r4, r5, sl, lr}
    1118:	0800443c 	stmdaeq	r0, {r2, r3, r4, r5, sl, lr}
    111c:	08004444 	stmdaeq	r0, {r2, r6, sl, lr}
    1120:	08004444 	stmdaeq	r0, {r2, r6, sl, lr}
    1124:	0800448e 	stmdaeq	r0, {r1, r2, r3, r7, sl, lr}
    1128:	08004490 	stmdaeq	r0, {r4, r7, sl, lr}
    112c:	080044a0 	stmdaeq	r0, {r5, r7, sl, lr}
	...
    1138:	080044a0 	stmdaeq	r0, {r5, r7, sl, lr}
    113c:	080044ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, lr}
    1140:	080044bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, lr}
    1144:	080044c8 	stmdaeq	r0, {r3, r6, r7, sl, lr}
    1148:	080044c8 	stmdaeq	r0, {r3, r6, r7, sl, lr}
    114c:	080044d2 	stmdaeq	r0, {r1, r4, r6, r7, sl, lr}
    1150:	080044d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, lr}
    1154:	08004502 	stmdaeq	r0, {r1, r8, sl, lr}
    1158:	08004504 	stmdaeq	r0, {r2, r8, sl, lr}
    115c:	0800450e 	stmdaeq	r0, {r1, r2, r3, r8, sl, lr}
    1160:	08004510 	stmdaeq	r0, {r4, r8, sl, lr}
    1164:	0800451c 	stmdaeq	r0, {r2, r3, r4, r8, sl, lr}
    1168:	0800451c 	stmdaeq	r0, {r2, r3, r4, r8, sl, lr}
    116c:	0800452c 	stmdaeq	r0, {r2, r3, r5, r8, sl, lr}
	...
    1178:	0800452c 	stmdaeq	r0, {r2, r3, r5, r8, sl, lr}
    117c:	0800459c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, lr}
    1180:	0800459c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, lr}
    1184:	08004684 	stmdaeq	r0, {r2, r7, r9, sl, lr}
    1188:	08004684 	stmdaeq	r0, {r2, r7, r9, sl, lr}
    118c:	080046a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, lr}
    1190:	080046a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, lr}
    1194:	080046c2 	stmdaeq	r0, {r1, r6, r7, r9, sl, lr}
    1198:	080046c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, lr}
    119c:	080046de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, lr}
    11a0:	080046e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, lr}
    11a4:	080046f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, lr}
    11a8:	080046f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, lr}
    11ac:	0800470e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, lr}
    11b0:	08004710 	stmdaeq	r0, {r4, r8, r9, sl, lr}
    11b4:	0800472a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, lr}
    11b8:	0800472c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, lr}
    11bc:	0800473e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, lr}
    11c0:	08004740 	stmdaeq	r0, {r6, r8, r9, sl, lr}
    11c4:	0800475a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, lr}
    11c8:	0800475c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, lr}
    11cc:	08004770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, lr}
    11d0:	08004770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, lr}
    11d4:	0800478a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, lr}
    11d8:	0800478c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, lr}
    11dc:	080047a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, lr}
    11e0:	080047a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, lr}
    11e4:	080047c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, lr}
    11e8:	080047c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, lr}
    11ec:	080047de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, lr}
    11f0:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
    11f4:	080047fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    11f8:	080047fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    11fc:	08004818 	stmdaeq	r0, {r3, r4, fp, lr}
    1200:	08004818 	stmdaeq	r0, {r3, r4, fp, lr}
    1204:	08004834 	stmdaeq	r0, {r2, r4, r5, fp, lr}
    1208:	08004834 	stmdaeq	r0, {r2, r4, r5, fp, lr}
    120c:	0800484e 	stmdaeq	r0, {r1, r2, r3, r6, fp, lr}
    1210:	08004850 	stmdaeq	r0, {r4, r6, fp, lr}
    1214:	08004854 	stmdaeq	r0, {r2, r4, r6, fp, lr}
    1218:	08004854 	stmdaeq	r0, {r2, r4, r6, fp, lr}
    121c:	0800485a 	stmdaeq	r0, {r1, r3, r4, r6, fp, lr}
    1220:	0800485c 	stmdaeq	r0, {r2, r3, r4, r6, fp, lr}
    1224:	08004876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, lr}
    1228:	08004878 	stmdaeq	r0, {r3, r4, r5, r6, fp, lr}
    122c:	08004894 	stmdaeq	r0, {r2, r4, r7, fp, lr}
    1230:	08004894 	stmdaeq	r0, {r2, r4, r7, fp, lr}
    1234:	080048ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, fp, lr}
    1238:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
    123c:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
    1240:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
    1244:	080048d2 	stmdaeq	r0, {r1, r4, r6, r7, fp, lr}
    1248:	080048d4 	stmdaeq	r0, {r2, r4, r6, r7, fp, lr}
    124c:	080048ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, lr}
    1250:	080048f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, lr}
    1254:	08004908 	stmdaeq	r0, {r3, r8, fp, lr}
    1258:	08004908 	stmdaeq	r0, {r3, r8, fp, lr}
    125c:	0800491c 	stmdaeq	r0, {r2, r3, r4, r8, fp, lr}
    1260:	0800491c 	stmdaeq	r0, {r2, r3, r4, r8, fp, lr}
    1264:	08004934 	stmdaeq	r0, {r2, r4, r5, r8, fp, lr}
    1268:	08004934 	stmdaeq	r0, {r2, r4, r5, r8, fp, lr}
    126c:	08004944 	stmdaeq	r0, {r2, r6, r8, fp, lr}
    1270:	08004944 	stmdaeq	r0, {r2, r6, r8, fp, lr}
    1274:	0800497a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, fp, lr}
    1278:	0800497c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, lr}
    127c:	08004984 	stmdaeq	r0, {r2, r7, r8, fp, lr}
    1280:	08004984 	stmdaeq	r0, {r2, r7, r8, fp, lr}
    1284:	080049a0 	stmdaeq	r0, {r5, r7, r8, fp, lr}
    1288:	080049a0 	stmdaeq	r0, {r5, r7, r8, fp, lr}
    128c:	080049a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, lr}
	...
    1298:	080049a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, lr}
    129c:	08004b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp, lr}
    12a0:	08004ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, lr}
    12a4:	08004c0a 	stmdaeq	r0, {r1, r3, sl, fp, lr}
    12a8:	08004c0c 	stmdaeq	r0, {r2, r3, sl, fp, lr}
    12ac:	08004c2e 	stmdaeq	r0, {r1, r2, r3, r5, sl, fp, lr}
    12b0:	08004c30 	stmdaeq	r0, {r4, r5, sl, fp, lr}
    12b4:	08004c44 	stmdaeq	r0, {r2, r6, sl, fp, lr}
    12b8:	08004c44 	stmdaeq	r0, {r2, r6, sl, fp, lr}
    12bc:	08004c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, lr}
    12c0:	08004c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, lr}
    12c4:	08004c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, lr}
    12c8:	08004c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, lr}
    12cc:	08004c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, lr}
    12d0:	08004c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, lr}
    12d4:	08004c76 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, fp, lr}
    12d8:	08004c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp, lr}
    12dc:	08004c90 	stmdaeq	r0, {r4, r7, sl, fp, lr}
    12e0:	08004c90 	stmdaeq	r0, {r4, r7, sl, fp, lr}
    12e4:	08004ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, lr}
    12e8:	08004ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, lr}
    12ec:	08004cae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, fp, lr}
    12f0:	08004cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, lr}
    12f4:	08004cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, lr}
    12f8:	08004cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, lr}
    12fc:	08004cc0 	stmdaeq	r0, {r6, r7, sl, fp, lr}
    1300:	08004cc0 	stmdaeq	r0, {r6, r7, sl, fp, lr}
    1304:	08004cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, lr}
    1308:	08004cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, lr}
    130c:	08004d08 	stmdaeq	r0, {r3, r8, sl, fp, lr}
    1310:	08004d08 	stmdaeq	r0, {r3, r8, sl, fp, lr}
    1314:	08004d42 	stmdaeq	r0, {r1, r6, r8, sl, fp, lr}
    1318:	08004d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, lr}
    131c:	08004d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, lr}
    1320:	08004d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, lr}
    1324:	08004ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, lr}
    1328:	08004ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, lr}
    132c:	08004e16 	stmdaeq	r0, {r1, r2, r4, r9, sl, fp, lr}
	...
    1338:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
    133c:	08004ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, lr}
    1340:	08004ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, lr}
    1344:	08004f46 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl, fp, lr}
    1348:	08004f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, lr}
    134c:	08005038 	stmdaeq	r0, {r3, r4, r5, ip, lr}
    1350:	08005038 	stmdaeq	r0, {r3, r4, r5, ip, lr}
    1354:	08005050 	stmdaeq	r0, {r4, r6, ip, lr}
    1358:	08005050 	stmdaeq	r0, {r4, r6, ip, lr}
    135c:	0800505e 	stmdaeq	r0, {r1, r2, r3, r4, r6, ip, lr}
    1360:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
    1364:	0800507a 	stmdaeq	r0, {r1, r3, r4, r5, r6, ip, lr}
    1368:	0800507c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip, lr}
    136c:	08005096 	stmdaeq	r0, {r1, r2, r4, r7, ip, lr}
    1370:	08005098 	stmdaeq	r0, {r3, r4, r7, ip, lr}
    1374:	080050ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, ip, lr}
    1378:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
    137c:	080050cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, lr}
    1380:	080050cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, lr}
    1384:	080050ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, ip, lr}
    1388:	080050ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, lr}
    138c:	08005106 	stmdaeq	r0, {r1, r2, r8, ip, lr}
    1390:	08005108 	stmdaeq	r0, {r3, r8, ip, lr}
    1394:	08005122 	stmdaeq	r0, {r1, r5, r8, ip, lr}
    1398:	08005124 	stmdaeq	r0, {r2, r5, r8, ip, lr}
    139c:	0800516c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, lr}
    13a0:	0800516c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, lr}
    13a4:	08005172 	stmdaeq	r0, {r1, r4, r5, r6, r8, ip, lr}
    13a8:	08005174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip, lr}
    13ac:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
    13b0:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
    13b4:	08005192 	stmdaeq	r0, {r1, r4, r7, r8, ip, lr}
    13b8:	08005194 	stmdaeq	r0, {r2, r4, r7, r8, ip, lr}
    13bc:	080051a0 	stmdaeq	r0, {r5, r7, r8, ip, lr}
    13c0:	080051a0 	stmdaeq	r0, {r5, r7, r8, ip, lr}
    13c4:	080051ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, lr}
    13c8:	080051ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, lr}
    13cc:	080051b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, ip, lr}
    13d0:	080051b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, lr}
    13d4:	080051c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, lr}
    13d8:	080051c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, lr}
    13dc:	080051e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, ip, lr}
    13e0:	080051e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip, lr}
    13e4:	080051f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, lr}
    13e8:	080051f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, lr}
    13ec:	080051fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip, lr}
    13f0:	080051fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip, lr}
    13f4:	08005226 	stmdaeq	r0, {r1, r2, r5, r9, ip, lr}
    13f8:	08005228 	stmdaeq	r0, {r3, r5, r9, ip, lr}
    13fc:	0800523a 	stmdaeq	r0, {r1, r3, r4, r5, r9, ip, lr}
	...
    1408:	0800523c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, lr}
    140c:	0800525a 	stmdaeq	r0, {r1, r3, r4, r6, r9, ip, lr}
    1410:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
    1414:	080052dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip, lr}
    1418:	080052dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip, lr}
    141c:	080052ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, ip, lr}
    1420:	080052ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip, lr}
    1424:	080052fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip, lr}
    1428:	080052fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip, lr}
    142c:	08005310 	stmdaeq	r0, {r4, r8, r9, ip, lr}
    1430:	08005310 	stmdaeq	r0, {r4, r8, r9, ip, lr}
    1434:	0800531c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip, lr}
    1438:	0800531c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip, lr}
    143c:	08005330 	stmdaeq	r0, {r4, r5, r8, r9, ip, lr}
    1440:	08005330 	stmdaeq	r0, {r4, r5, r8, r9, ip, lr}
    1444:	0800533c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, lr}
	...
    1450:	0800533c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, lr}
    1454:	08005356 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, ip, lr}
    1458:	08005358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, lr}
    145c:	0800540e 	stmdaeq	r0, {r1, r2, r3, sl, ip, lr}
    1460:	08005410 	stmdaeq	r0, {r4, sl, ip, lr}
    1464:	08005428 	stmdaeq	r0, {r3, r5, sl, ip, lr}
    1468:	08005428 	stmdaeq	r0, {r3, r5, sl, ip, lr}
    146c:	0800543a 	stmdaeq	r0, {r1, r3, r4, r5, sl, ip, lr}
    1470:	0800543c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, lr}
    1474:	0800544e 	stmdaeq	r0, {r1, r2, r3, r6, sl, ip, lr}
    1478:	08005450 	stmdaeq	r0, {r4, r6, sl, ip, lr}
    147c:	0800546c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, lr}
    1480:	0800546c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, lr}
    1484:	080054de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, ip, lr}
    1488:	080054e0 	stmdaeq	r0, {r5, r6, r7, sl, ip, lr}
    148c:	080054fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, ip, lr}
    1490:	080054fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, lr}
    1494:	0800556e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, ip, lr}
    1498:	08005570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip, lr}
    149c:	0800558a 	stmdaeq	r0, {r1, r3, r7, r8, sl, ip, lr}
    14a0:	0800558c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip, lr}
    14a4:	080055a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, ip, lr}
    14a8:	080055a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, ip, lr}
    14ac:	080055c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, lr}
    14b0:	080055c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, lr}
    14b4:	080055f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, lr}
    14b8:	080055f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, lr}
    14bc:	080055fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, ip, lr}
    14c0:	080055fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, ip, lr}
    14c4:	08005616 	stmdaeq	r0, {r1, r2, r4, r9, sl, ip, lr}
    14c8:	08005618 	stmdaeq	r0, {r3, r4, r9, sl, ip, lr}
    14cc:	0800562c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, lr}
    14d0:	0800562c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, lr}
    14d4:	08005638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip, lr}
    14d8:	08005638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip, lr}
    14dc:	08005658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, lr}
    14e0:	08005658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, lr}
    14e4:	08005666 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, ip, lr}
	...
    14f0:	08005668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, lr}
    14f4:	08005682 	stmdaeq	r0, {r1, r7, r9, sl, ip, lr}
    14f8:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
    14fc:	08005728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, lr}
    1500:	08005728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, lr}
    1504:	0800574a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, ip, lr}
    1508:	0800574c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, lr}
    150c:	08005768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, lr}
    1510:	08005768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, lr}
    1514:	08005784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip, lr}
    1518:	08005784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip, lr}
    151c:	080057ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    1520:	080057bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    1524:	080057c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl, ip, lr}
    1528:	080057c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip, lr}
    152c:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
    1530:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
    1534:	080057e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, lr}
    1538:	080057e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, lr}
    153c:	0800589c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, lr}
    1540:	0800589c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, lr}
    1544:	080058ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, lr}
    1548:	080058d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, lr}
    154c:	080058e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, lr}
    1550:	080058e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, lr}
    1554:	08005900 	stmdaeq	r0, {r8, fp, ip, lr}
    1558:	08005900 	stmdaeq	r0, {r8, fp, ip, lr}
    155c:	08005908 	stmdaeq	r0, {r3, r8, fp, ip, lr}
    1560:	08005908 	stmdaeq	r0, {r3, r8, fp, ip, lr}
    1564:	0800591c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, lr}
    1568:	0800591c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, lr}
    156c:	0800595e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, fp, ip, lr}
    1570:	08005960 	stmdaeq	r0, {r5, r6, r8, fp, ip, lr}
    1574:	0800596a 	stmdaeq	r0, {r1, r3, r5, r6, r8, fp, ip, lr}
    1578:	0800596c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, ip, lr}
    157c:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
    1580:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
    1584:	080059a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, fp, ip, lr}
    1588:	080059a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, ip, lr}
    158c:	080059b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip, lr}
    1590:	080059b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip, lr}
    1594:	08005a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip, lr}
    1598:	08005a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, lr}
    159c:	08005a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, lr}
    15a0:	08005a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, lr}
    15a4:	08005a30 	stmdaeq	r0, {r4, r5, r9, fp, ip, lr}
    15a8:	08005a30 	stmdaeq	r0, {r4, r5, r9, fp, ip, lr}
    15ac:	08005a86 	stmdaeq	r0, {r1, r2, r7, r9, fp, ip, lr}
    15b0:	08005a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, lr}
    15b4:	08005ade 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, fp, ip, lr}
    15b8:	08005ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, ip, lr}
    15bc:	08005afa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, fp, ip, lr}
    15c0:	08005afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, ip, lr}
    15c4:	08005b10 	stmdaeq	r0, {r4, r8, r9, fp, ip, lr}
    15c8:	08005b10 	stmdaeq	r0, {r4, r8, r9, fp, ip, lr}
    15cc:	08005b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, ip, lr}
    15d0:	08005b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, ip, lr}
    15d4:	08005b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, ip, lr}
    15d8:	08005b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip, lr}
    15dc:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
	...
    15e8:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
    15ec:	08005b80 	stmdaeq	r0, {r7, r8, r9, fp, ip, lr}
    15f0:	08005b80 	stmdaeq	r0, {r7, r8, r9, fp, ip, lr}
    15f4:	08005c92 	stmdaeq	r0, {r1, r4, r7, sl, fp, ip, lr}
    15f8:	08005c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, ip, lr}
    15fc:	08005cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip, lr}
    1600:	08005cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip, lr}
    1604:	08005d0e 	stmdaeq	r0, {r1, r2, r3, r8, sl, fp, ip, lr}
    1608:	08005d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, lr}
    160c:	08005d2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, sl, fp, ip, lr}
    1610:	08005d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, lr}
    1614:	08005da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, lr}
    1618:	08005da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, lr}
    161c:	08005dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, ip, lr}
    1620:	08005dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, lr}
    1624:	08005e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, lr}
    1628:	08005e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, lr}
    162c:	08005e40 	stmdaeq	r0, {r6, r9, sl, fp, ip, lr}
    1630:	08005e40 	stmdaeq	r0, {r6, r9, sl, fp, ip, lr}
    1634:	08005e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, lr}
    1638:	08005e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, lr}
    163c:	08005e6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, fp, ip, lr}
    1640:	08005e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, lr}
    1644:	08005ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip, lr}
    1648:	08005ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip, lr}
    164c:	08005efe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    1650:	08005f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, lr}
    1654:	08005f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp, ip, lr}
    1658:	08005f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp, ip, lr}
    165c:	08005f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}
    1660:	08005f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}
    1664:	08006028 	stmdaeq	r0, {r3, r5, sp, lr}
    1668:	08006028 	stmdaeq	r0, {r3, r5, sp, lr}
    166c:	0800605e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sp, lr}
    1670:	08006060 	stmdaeq	r0, {r5, r6, sp, lr}
    1674:	08006084 	stmdaeq	r0, {r2, r7, sp, lr}
    1678:	08006084 	stmdaeq	r0, {r2, r7, sp, lr}
    167c:	080060a0 	stmdaeq	r0, {r5, r7, sp, lr}
    1680:	080060a0 	stmdaeq	r0, {r5, r7, sp, lr}
    1684:	080060b2 	stmdaeq	r0, {r1, r4, r5, r7, sp, lr}
    1688:	080060b4 	stmdaeq	r0, {r2, r4, r5, r7, sp, lr}
    168c:	080060c6 	stmdaeq	r0, {r1, r2, r6, r7, sp, lr}
    1690:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
    1694:	080060ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sp, lr}
    1698:	080060f0 	stmdaeq	r0, {r4, r5, r6, r7, sp, lr}
    169c:	08006192 	stmdaeq	r0, {r1, r4, r7, r8, sp, lr}
    16a0:	08006194 	stmdaeq	r0, {r2, r4, r7, r8, sp, lr}
    16a4:	080061d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sp, lr}
    16a8:	080061d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sp, lr}
    16ac:	0800622c 	stmdaeq	r0, {r2, r3, r5, r9, sp, lr}
    16b0:	0800622c 	stmdaeq	r0, {r2, r3, r5, r9, sp, lr}
    16b4:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    16b8:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    16bc:	080062ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sp, lr}
	...
    16c8:	080062ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sp, lr}
    16cc:	08006302 	stmdaeq	r0, {r1, r8, r9, sp, lr}
    16d0:	08006304 	stmdaeq	r0, {r2, r8, r9, sp, lr}
    16d4:	08006320 	stmdaeq	r0, {r5, r8, r9, sp, lr}
    16d8:	08006320 	stmdaeq	r0, {r5, r8, r9, sp, lr}
    16dc:	0800632c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp, lr}
    16e0:	0800632c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp, lr}
    16e4:	08006348 	stmdaeq	r0, {r3, r6, r8, r9, sp, lr}
    16e8:	08006348 	stmdaeq	r0, {r3, r6, r8, r9, sp, lr}
    16ec:	0800635c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, lr}
    16f0:	0800635c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, lr}
    16f4:	0800636c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sp, lr}
    16f8:	0800636c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sp, lr}
    16fc:	08006380 	stmdaeq	r0, {r7, r8, r9, sp, lr}
    1700:	08006380 	stmdaeq	r0, {r7, r8, r9, sp, lr}
    1704:	08006390 	stmdaeq	r0, {r4, r7, r8, r9, sp, lr}
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08000460 	stmdaeq	r0, {r5, r6, sl}
       4:	0800046a 	stmdaeq	r0, {r1, r3, r5, r6, sl}
       8:	9f300002 	svcls	0x00300002
       c:	0800046a 	stmdaeq	r0, {r1, r3, r5, r6, sl}
      10:	0800046e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl}
      14:	00720005 	rsbseq	r0, r2, r5
      18:	6e9f1a3c 	mrcvs	10, 4, r1, cr15, cr12, {1}
      1c:	7e080004 	cdpvc	0, 0, cr0, cr8, cr4, {0}
      20:	01080004 	tsteq	r8, r4
      24:	049a5200 	ldreq	r5, [sl], #512	; 0x200
      28:	04a40800 	strteq	r0, [r4], #2048	; 0x800
      2c:	00060800 	andeq	r0, r6, r0, lsl #16
      30:	ff080072 			; <UNDEFINED> instruction: 0xff080072
      34:	04a49f1a 	strteq	r9, [r4], #3866	; 0xf1a
      38:	04a80800 	strteq	r0, [r8], #2048	; 0x800
      3c:	00010800 	andeq	r0, r1, r0, lsl #16
      40:	0004e852 	andeq	lr, r4, r2, asr r8
      44:	0004f208 	andeq	pc, r4, r8, lsl #4
      48:	52000108 	andpl	r0, r0, #8, 2
	...
      54:	08000460 	stmdaeq	r0, {r5, r6, sl}
      58:	0800047e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl}
      5c:	9f300002 	svcls	0x00300002
      60:	080004a4 	stmdaeq	r0, {r2, r5, r7, sl}
      64:	080004e0 	stmdaeq	r0, {r5, r6, r7, sl}
      68:	9f300002 	svcls	0x00300002
      6c:	080004e0 	stmdaeq	r0, {r5, r6, r7, sl}
      70:	080004e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl}
      74:	e8510001 	ldmda	r1, {r0}^
      78:	f2080004 	vhadd.s8	d0, d8, d4
      7c:	02080004 	andeq	r0, r8, #4
      80:	009f3000 	addseq	r3, pc, r0
      84:	00000000 	andeq	r0, r0, r0
      88:	60000000 	andvs	r0, r0, r0
      8c:	7e080004 	cdpvc	0, 0, cr0, cr8, cr4, {0}
      90:	02080004 	andeq	r0, r8, #4
      94:	a49f3200 	ldrge	r3, [pc], #512	; 9c <_Min_Heap_Size+0x9c>
      98:	e0080004 	and	r0, r8, r4
      9c:	02080004 	andeq	r0, r8, #4
      a0:	e89f3200 	ldm	pc, {r9, ip, sp}	; <UNPREDICTABLE>
      a4:	f2080004 	vhadd.s8	d0, d8, d4
      a8:	02080004 	andeq	r0, r8, #4
      ac:	009f3200 	addseq	r3, pc, r0, lsl #4
      b0:	00000000 	andeq	r0, r0, r0
      b4:	60000000 	andvs	r0, r0, r0
      b8:	7e080004 	cdpvc	0, 0, cr0, cr8, cr4, {0}
      bc:	02080004 	andeq	r0, r8, #4
      c0:	a49f3000 	ldrge	r3, [pc], #0	; c8 <_Min_Heap_Size+0xc8>
      c4:	a6080004 	strge	r0, [r8], -r4
      c8:	02080004 	andeq	r0, r8, #4
      cc:	a69f3000 	ldrge	r3, [pc], r0
      d0:	ae080004 	cdpge	0, 0, cr0, cr8, cr4, {0}
      d4:	09080004 	stmdbeq	r8, {r2}
      d8:	40007000 	andmi	r7, r0, r0
      dc:	461a2442 	ldrmi	r2, [sl], -r2, asr #8
      e0:	04e89f25 	strbteq	r9, [r8], #3877	; 0xf25
      e4:	04f20800 	ldrbteq	r0, [r2], #2048	; 0x800
      e8:	00020800 	andeq	r0, r2, r0, lsl #16
      ec:	00009f30 	andeq	r9, r0, r0, lsr pc
      f0:	00000000 	andeq	r0, r0, r0
      f4:	04600000 	strbteq	r0, [r0], #-0
      f8:	047e0800 	ldrbteq	r0, [lr], #-2048	; 0x800
      fc:	00020800 	andeq	r0, r2, r0, lsl #16
     100:	04a49f32 	strteq	r9, [r4], #3890	; 0xf32
     104:	04c40800 	strbeq	r0, [r4], #2048	; 0x800
     108:	00020800 	andeq	r0, r2, r0, lsl #16
     10c:	04c49f32 	strbeq	r9, [r4], #3890	; 0xf32
     110:	04e80800 	strbteq	r0, [r8], #2048	; 0x800
     114:	00010800 	andeq	r0, r1, r0, lsl #16
     118:	0004e852 	andeq	lr, r4, r2, asr r8
     11c:	0004f208 	andeq	pc, r4, r8, lsl #4
     120:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     124:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     128:	00000000 	andeq	r0, r0, r0
     12c:	0005e000 	andeq	lr, r5, r0
     130:	0005e808 	andeq	lr, r5, r8, lsl #16
     134:	50000108 	andpl	r0, r0, r8, lsl #2
     138:	080005e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl}
     13c:	080006ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl}
     140:	ba570001 	blt	15c014c <_Min_Stack_Size+0x15bfd4c>
     144:	c0080006 	andgt	r0, r8, r6
     148:	04080006 	streq	r0, [r8], #-6
     14c:	5001f300 	andpl	pc, r1, r0, lsl #6
     150:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     154:	00000000 	andeq	r0, r0, r0
     158:	0005e000 	andeq	lr, r5, r0
     15c:	0005ef08 	andeq	lr, r5, r8, lsl #30
     160:	51000108 	tstpl	r0, r8, lsl #2
     164:	080005ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, sl}
     168:	08000642 	stmdaeq	r0, {r1, r6, r9, sl}
     16c:	42560001 	subsmi	r0, r6, #1
     170:	5e080006 	cdppl	0, 0, cr0, cr8, cr6, {0}
     174:	16080006 	strne	r0, [r8], -r6
     178:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     17c:	244b4012 	strbcs	r4, [fp], #-18
     180:	14163122 	ldrne	r3, [r6], #-290	; 0x122
     184:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
     188:	0001282d 	andeq	r2, r1, sp, lsr #16
     18c:	5e9f1316 	mrcpl	3, 4, r1, cr15, cr6, {0}
     190:	ba080006 	blt	2001b0 <_Min_Stack_Size+0x1ffdb0>
     194:	01080006 	tsteq	r8, r6
     198:	06ba5600 	ldrteq	r5, [sl], r0, lsl #12
     19c:	06c00800 	strbeq	r0, [r0], r0, lsl #16
     1a0:	00040800 	andeq	r0, r4, r0, lsl #16
     1a4:	9f5101f3 	svcls	0x005101f3
	...
     1b0:	080005e0 	stmdaeq	r0, {r5, r6, r7, r8, sl}
     1b4:	080005ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, sl}
     1b8:	ef520001 	svc	0x00520001
     1bc:	ba080005 	blt	2001d8 <_Min_Stack_Size+0x1ffdd8>
     1c0:	01080006 	tsteq	r8, r6
     1c4:	06ba5800 	ldrteq	r5, [sl], r0, lsl #16
     1c8:	06c00800 	strbeq	r0, [r0], r0, lsl #16
     1cc:	00040800 	andeq	r0, r4, r0, lsl #16
     1d0:	9f5201f3 	svcls	0x005201f3
	...
     1dc:	08000658 	stmdaeq	r0, {r3, r4, r6, r9, sl}
     1e0:	0800065e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl}
     1e4:	9f310002 	svcls	0x00310002
     1e8:	080006b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl}
     1ec:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
     1f0:	00500001 	subseq	r0, r0, r1
     1f4:	00000000 	andeq	r0, r0, r0
     1f8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     1fc:	02080005 	andeq	r0, r8, #5
     200:	01080006 	tsteq	r8, r6
     204:	06025000 	streq	r5, [r2], -r0
     208:	065e0800 	ldrbeq	r0, [lr], -r0, lsl #16
     20c:	00010800 	andeq	r0, r1, r0, lsl #16
     210:	00065e54 	andeq	r5, r6, r4, asr lr
     214:	00066208 	andeq	r6, r6, r8, lsl #4
     218:	50000108 	andpl	r0, r0, r8, lsl #2
     21c:	08000662 	stmdaeq	r0, {r1, r5, r6, r9, sl}
     220:	080006b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl}
     224:	b2540001 	subslt	r0, r4, #1
     228:	b6080006 	strlt	r0, [r8], -r6
     22c:	01080006 	tsteq	r8, r6
     230:	06b65000 	ldrteq	r5, [r6], r0
     234:	06ba0800 	ldrteq	r0, [sl], r0, lsl #16
     238:	00010800 	andeq	r0, r1, r0, lsl #16
     23c:	00000054 	andeq	r0, r0, r4, asr r0
     240:	00000000 	andeq	r0, r0, r0
     244:	00066c00 	andeq	r6, r6, r0, lsl #24
     248:	00067408 	andeq	r7, r6, r8, lsl #8
     24c:	30000208 	andcc	r0, r0, r8, lsl #4
     250:	0006749f 	muleq	r6, pc, r4	; <UNPREDICTABLE>
     254:	00067e08 	andeq	r7, r6, r8, lsl #28
     258:	31000208 	tstcc	r0, r8, lsl #4
     25c:	00067e9f 	muleq	r6, pc, lr	; <UNPREDICTABLE>
     260:	0006b208 	andeq	fp, r6, r8, lsl #4
     264:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     268:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     26c:	00000000 	andeq	r0, r0, r0
     270:	0006c000 	andeq	ip, r6, r0
     274:	0006da08 	andeq	sp, r6, r8, lsl #20
     278:	50000108 	andpl	r0, r0, r8, lsl #2
     27c:	080006da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl}
     280:	08000714 	stmdaeq	r0, {r2, r4, r8, r9, sl}
     284:	01f30004 	mvnseq	r0, r4
     288:	00009f50 	andeq	r9, r0, r0, asr pc
     28c:	00000000 	andeq	r0, r0, r0
     290:	06c00000 	strbeq	r0, [r0], r0
     294:	06df0800 	ldrbeq	r0, [pc], r0, lsl #16
     298:	00010800 	andeq	r0, r1, r0, lsl #16
     29c:	0006df51 	andeq	sp, r6, r1, asr pc
     2a0:	00070e08 	andeq	r0, r7, r8, lsl #28
     2a4:	57000108 	strpl	r0, [r0, -r8, lsl #2]
     2a8:	0800070e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl}
     2ac:	08000711 	stmdaeq	r0, {r0, r4, r8, r9, sl}
     2b0:	11500001 	cmpne	r0, r1
     2b4:	12080007 	andne	r0, r8, #7
     2b8:	04080007 	streq	r0, [r8], #-7
     2bc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     2c0:	0007129f 	muleq	r7, pc, r2	; <UNPREDICTABLE>
     2c4:	00071408 	andeq	r1, r7, r8, lsl #8
     2c8:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
     2d4:	080006d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl}
     2d8:	0800070e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl}
     2dc:	12560001 	subsne	r0, r6, #1
     2e0:	14080007 	strne	r0, [r8], #-7
     2e4:	01080007 	tsteq	r8, r7
     2e8:	00005600 	andeq	r5, r0, r0, lsl #12
     2ec:	00000000 	andeq	r0, r0, r0
     2f0:	07440000 	strbeq	r0, [r4, -r0]
     2f4:	077a0800 	ldrbeq	r0, [sl, -r0, lsl #16]!
     2f8:	00010800 	andeq	r0, r1, r0, lsl #16
     2fc:	00000054 	andeq	r0, r0, r4, asr r0
     300:	00000000 	andeq	r0, r0, r0
     304:	0007ea00 	andeq	lr, r7, r0, lsl #20
     308:	00085408 	andeq	r5, r8, r8, lsl #8
     30c:	5a000108 	bpl	734 <_Min_Stack_Size+0x334>
	...
     318:	08000898 	stmdaeq	r0, {r3, r4, r7, fp}
     31c:	0800089e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp}
     320:	9e530001 	cdpls	0, 5, cr0, cr3, cr1, {0}
     324:	ae080008 	cdpge	0, 0, cr0, cr8, cr8, {0}
     328:	05080008 	streq	r0, [r8, #-8]
     32c:	007c0300 	rsbseq	r0, ip, r0, lsl #6
     330:	00002000 	andeq	r2, r0, r0
     334:	00000000 	andeq	r0, r0, r0
     338:	08be0000 	ldmeq	lr!, {}	; <UNPREDICTABLE>
     33c:	08f00800 	ldmeq	r0!, {fp}^
     340:	00010800 	andeq	r0, r1, r0, lsl #16
     344:	00000058 	andeq	r0, r0, r8, asr r0
     348:	00000000 	andeq	r0, r0, r0
     34c:	00090400 	andeq	r0, r9, r0, lsl #8
     350:	00091008 	andeq	r1, r9, r8
     354:	50000108 	andpl	r0, r0, r8, lsl #2
     358:	08000910 	stmdaeq	r0, {r4, r8, fp}
     35c:	0800093a 	stmdaeq	r0, {r1, r3, r4, r5, r8, fp}
     360:	01f30004 	mvnseq	r0, r4
     364:	00009f50 	andeq	r9, r0, r0, asr pc
     368:	00000000 	andeq	r0, r0, r0
     36c:	09440000 	stmdbeq	r4, {}^	; <UNPREDICTABLE>
     370:	094e0800 	stmdbeq	lr, {fp}^
     374:	00010800 	andeq	r0, r1, r0, lsl #16
     378:	00094e50 	andeq	r4, r9, r0, asr lr
     37c:	00095608 	andeq	r5, r9, r8, lsl #12
     380:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     38c:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
     390:	08000973 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, fp}
     394:	73500001 	cmpvc	r0, #1
     398:	76080009 	strvc	r0, [r8], -r9
     39c:	01080009 	tsteq	r8, r9
     3a0:	09765600 	ldmdbeq	r6!, {r9, sl, ip, lr}^
     3a4:	09790800 	ldmdbeq	r9!, {fp}^
     3a8:	00010800 	andeq	r0, r1, r0, lsl #16
     3ac:	00097950 	andeq	r7, r9, r0, asr r9
     3b0:	00099c08 	andeq	r9, r9, r8, lsl #24
     3b4:	56000108 	strpl	r0, [r0], -r8, lsl #2
     3b8:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
     3bc:	0800099f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r8, fp}
     3c0:	9f500001 	svcls	0x00500001
     3c4:	26080009 	strcs	r0, [r8], -r9
     3c8:	0108000a 	tsteq	r8, sl
     3cc:	00005600 	andeq	r5, r0, r0, lsl #12
     3d0:	00000000 	andeq	r0, r0, r0
     3d4:	09580000 	ldmdbeq	r8, {}^	; <UNPREDICTABLE>
     3d8:	09730800 	ldmdbeq	r3!, {fp}^
     3dc:	00010800 	andeq	r0, r1, r0, lsl #16
     3e0:	00097351 	andeq	r7, r9, r1, asr r3
     3e4:	00097608 	andeq	r7, r9, r8, lsl #12
     3e8:	54000108 	strpl	r0, [r0], #-264	; 0x108
     3ec:	08000976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp}
     3f0:	08000979 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, fp}
     3f4:	79510001 	ldmdbvc	r1, {r0}^
     3f8:	98080009 	stmdals	r8, {r0, r3}
     3fc:	01080009 	tsteq	r8, r9
     400:	09985400 	ldmibeq	r8, {sl, ip, lr}
     404:	099c0800 	ldmibeq	ip, {fp}
     408:	00040800 	andeq	r0, r4, r0, lsl #16
     40c:	9f5101f3 	svcls	0x005101f3
     410:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
     414:	0800099f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r8, fp}
     418:	9f510001 	svcls	0x00510001
     41c:	b6080009 	strlt	r0, [r8], -r9
     420:	01080009 	tsteq	r8, r9
     424:	09b65400 	ldmibeq	r6!, {sl, ip, lr}
     428:	09c00800 	stmibeq	r0, {fp}^
     42c:	00040800 	andeq	r0, r4, r0, lsl #16
     430:	9f5101f3 	svcls	0x005101f3
     434:	080009c0 	stmdaeq	r0, {r6, r7, r8, fp}
     438:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
     43c:	14540001 	ldrbne	r0, [r4], #-1
     440:	1c08000a 	stcne	0, cr0, [r8], {10}
     444:	0408000a 	streq	r0, [r8], #-10
     448:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     44c:	000a1c9f 	muleq	sl, pc, ip	; <UNPREDICTABLE>
     450:	000a2608 	andeq	r2, sl, r8, lsl #12
     454:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     460:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
     464:	08000973 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, fp}
     468:	73520001 	cmpvc	r2, #1
     46c:	76080009 	strvc	r0, [r8], -r9
     470:	01080009 	tsteq	r8, r9
     474:	09765700 	ldmdbeq	r6!, {r8, r9, sl, ip, lr}^
     478:	09790800 	ldmdbeq	r9!, {fp}^
     47c:	00010800 	andeq	r0, r1, r0, lsl #16
     480:	00097952 	andeq	r7, r9, r2, asr r9
     484:	00099c08 	andeq	r9, r9, r8, lsl #24
     488:	57000108 	strpl	r0, [r0, -r8, lsl #2]
     48c:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
     490:	0800099f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r8, fp}
     494:	9f520001 	svcls	0x00520001
     498:	26080009 	strcs	r0, [r8], -r9
     49c:	0108000a 	tsteq	r8, sl
     4a0:	00005700 	andeq	r5, r0, r0, lsl #14
     4a4:	00000000 	andeq	r0, r0, r0
     4a8:	09580000 	ldmdbeq	r8, {}^	; <UNPREDICTABLE>
     4ac:	09730800 	ldmdbeq	r3!, {fp}^
     4b0:	00010800 	andeq	r0, r1, r0, lsl #16
     4b4:	00097353 	andeq	r7, r9, r3, asr r3
     4b8:	00097608 	andeq	r7, r9, r8, lsl #12
     4bc:	58000108 	stmdapl	r0, {r3, r8}
     4c0:	08000976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp}
     4c4:	08000979 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, fp}
     4c8:	79530001 	ldmdbvc	r3, {r0}^
     4cc:	9c080009 	stcls	0, cr0, [r8], {9}
     4d0:	01080009 	tsteq	r8, r9
     4d4:	099c5800 	ldmibeq	ip, {fp, ip, lr}
     4d8:	099f0800 	ldmibeq	pc, {fp}	; <UNPREDICTABLE>
     4dc:	00010800 	andeq	r0, r1, r0, lsl #16
     4e0:	00099f53 	andeq	r9, r9, r3, asr pc
     4e4:	000a2608 	andeq	r2, sl, r8, lsl #12
     4e8:	58000108 	stmdapl	r0, {r3, r8}
	...
     4f4:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
     4f8:	08000992 	stmdaeq	r0, {r1, r4, r7, r8, fp}
     4fc:	00910002 	addseq	r0, r1, r2
     500:	08000992 	stmdaeq	r0, {r1, r4, r7, r8, fp}
     504:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
     508:	9f300002 	svcls	0x00300002
     50c:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
     510:	080009b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp}
     514:	00910002 	addseq	r0, r1, r2
     518:	080009b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp}
     51c:	080009ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, fp}
     520:	9f300002 	svcls	0x00300002
     524:	080009c0 	stmdaeq	r0, {r6, r7, r8, fp}
     528:	080009e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp}
     52c:	207d0002 	rsbscs	r0, sp, r2
     530:	080009e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp}
     534:	08000a26 	stmdaeq	r0, {r1, r2, r5, r9, fp}
     538:	00590001 	subseq	r0, r9, r1
     53c:	00000000 	andeq	r0, r0, r0
     540:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     544:	73080009 	movwvc	r0, #32777	; 0x8009
     548:	01080009 	tsteq	r8, r9
     54c:	09735000 	ldmdbeq	r3!, {ip, lr}^
     550:	09760800 	ldmdbeq	r6!, {fp}^
     554:	00010800 	andeq	r0, r1, r0, lsl #16
     558:	00097656 	andeq	r7, r9, r6, asr r6
     55c:	00097908 	andeq	r7, r9, r8, lsl #18
     560:	50000108 	andpl	r0, r0, r8, lsl #2
     564:	08000979 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, fp}
     568:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
     56c:	9c560001 	mrrcls	0, 0, r0, r6, cr1
     570:	9f080009 	svcls	0x00080009
     574:	01080009 	tsteq	r8, r9
     578:	099f5000 	ldmibeq	pc, {ip, lr}	; <UNPREDICTABLE>
     57c:	0a260800 	beq	982584 <_Min_Stack_Size+0x982184>
     580:	00010800 	andeq	r0, r1, r0, lsl #16
     584:	00000056 	andeq	r0, r0, r6, asr r0
     588:	00000000 	andeq	r0, r0, r0
     58c:	00099200 	andeq	r9, r9, r0, lsl #4
     590:	00099c08 	andeq	r9, r9, r8, lsl #24
     594:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     598:	080009b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp}
     59c:	080009ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, fp}
     5a0:	e6550001 	ldrb	r0, [r5], -r1
     5a4:	f4080009 	vst4.8	{d0-d3}, [r8], r9
     5a8:	02080009 	andeq	r0, r8, #9
     5ac:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
     5b0:	01080009 	tsteq	r8, r9
     5b4:	0108000a 	tsteq	r8, sl
     5b8:	0a045000 	beq	1145c0 <_Min_Stack_Size+0x1141c0>
     5bc:	0a260800 	beq	9825c4 <_Min_Stack_Size+0x9821c4>
     5c0:	00010800 	andeq	r0, r1, r0, lsl #16
     5c4:	00000055 	andeq	r0, r0, r5, asr r0
     5c8:	00000000 	andeq	r0, r0, r0
     5cc:	00096800 	andeq	r6, r9, r0, lsl #16
     5d0:	0009ba08 	andeq	fp, r9, r8, lsl #20
     5d4:	30000208 	andcc	r0, r0, r8, lsl #4
     5d8:	0009c09f 	muleq	r9, pc, r0	; <UNPREDICTABLE>
     5dc:	0009d408 	andeq	sp, r9, r8, lsl #8
     5e0:	30000208 	andcc	r0, r0, r8, lsl #4
     5e4:	0009d49f 	muleq	r9, pc, r4	; <UNPREDICTABLE>
     5e8:	0009dc08 	andeq	sp, r9, r8, lsl #24
     5ec:	53000108 	movwpl	r0, #264	; 0x108
     5f0:	080009dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp}
     5f4:	080009e0 	stmdaeq	r0, {r5, r6, r7, r8, fp}
     5f8:	e0510001 	subs	r0, r1, r1
     5fc:	e5080009 	str	r0, [r8, #-9]
     600:	1b080009 	blne	20062c <_Min_Stack_Size+0x20022c>
     604:	24464400 	strbcs	r4, [r6], #-1024	; 0x400
     608:	77244640 	strvc	r4, [r4, -r0, asr #12]!
     60c:	282e3000 	stmdacs	lr!, {ip, sp}
     610:	13160001 	tstne	r6, #1
     614:	00780073 	rsbseq	r0, r8, r3, ror r0
     618:	01282e30 	teqeq	r8, r0, lsr lr
     61c:	9f131600 	svcls	0x00131600
     620:	080009e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, fp}
     624:	08000a26 	stmdaeq	r0, {r1, r2, r5, r9, fp}
     628:	46440026 	strbmi	r0, [r4], -r6, lsr #32
     62c:	24464024 	strbcs	r4, [r6], #-36	; 0x24
     630:	2e300077 	mrccs	0, 1, r0, cr0, cr7, {3}
     634:	16000128 	strne	r0, [r0], -r8, lsr #2
     638:	24444013 	strbcs	r4, [r4], #-19
     63c:	30007730 	andcc	r7, r0, r0, lsr r7
     640:	0001282e 	andeq	r2, r1, lr, lsr #16
     644:	00781316 	rsbseq	r1, r8, r6, lsl r3
     648:	01282e30 	teqeq	r8, r0, lsr lr
     64c:	9f131600 	svcls	0x00131600
	...
     658:	080009ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, fp}
     65c:	080009ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, fp}
     660:	00500001 	subseq	r0, r0, r1
     664:	00000000 	andeq	r0, r0, r0
     668:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     66c:	9c080009 	stcls	0, cr0, [r8], {9}
     670:	01080009 	tsteq	r8, r9
     674:	09a85500 	stmibeq	r8!, {r8, sl, ip, lr}
     678:	09ba0800 	ldmibeq	sl!, {fp}
     67c:	00010800 	andeq	r0, r1, r0, lsl #16
     680:	0009c055 	andeq	ip, r9, r5, asr r0
     684:	0009fc08 	andeq	pc, r9, r8, lsl #24
     688:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
     694:	08000988 	stmdaeq	r0, {r3, r7, r8, fp}
     698:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
     69c:	a8580001 	ldmdage	r8, {r0}^
     6a0:	26080009 	strcs	r0, [r8], -r9
     6a4:	0108000a 	tsteq	r8, sl
     6a8:	00005800 	andeq	r5, r0, r0, lsl #16
     6ac:	00000000 	andeq	r0, r0, r0
     6b0:	09880000 	stmibeq	r8, {}	; <UNPREDICTABLE>
     6b4:	09980800 	ldmibeq	r8, {fp}
     6b8:	00010800 	andeq	r0, r1, r0, lsl #16
     6bc:	00099854 	andeq	r9, r9, r4, asr r8
     6c0:	00099c08 	andeq	r9, r9, r8, lsl #24
     6c4:	f3000408 	vshl.u8	d0, d8, d0
     6c8:	a89f5101 	ldmge	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
     6cc:	b6080009 	strlt	r0, [r8], -r9
     6d0:	01080009 	tsteq	r8, r9
     6d4:	09b65400 	ldmibeq	r6!, {sl, ip, lr}
     6d8:	09c00800 	stmibeq	r0, {fp}^
     6dc:	00040800 	andeq	r0, r4, r0, lsl #16
     6e0:	9f5101f3 	svcls	0x005101f3
     6e4:	080009c0 	stmdaeq	r0, {r6, r7, r8, fp}
     6e8:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
     6ec:	14540001 	ldrbne	r0, [r4], #-1
     6f0:	1c08000a 	stcne	0, cr0, [r8], {10}
     6f4:	0408000a 	streq	r0, [r8], #-10
     6f8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     6fc:	000a1c9f 	muleq	sl, pc, ip	; <UNPREDICTABLE>
     700:	000a2608 	andeq	r2, sl, r8, lsl #12
     704:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     710:	08000988 	stmdaeq	r0, {r3, r7, r8, fp}
     714:	08000992 	stmdaeq	r0, {r1, r4, r7, r8, fp}
     718:	9f300002 	svcls	0x00300002
     71c:	08000992 	stmdaeq	r0, {r1, r4, r7, r8, fp}
     720:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
     724:	9f310002 	svcls	0x00310002
     728:	080009a8 	stmdaeq	r0, {r3, r5, r7, r8, fp}
     72c:	080009b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp}
     730:	9f300002 	svcls	0x00300002
     734:	080009c0 	stmdaeq	r0, {r6, r7, r8, fp}
     738:	08000a26 	stmdaeq	r0, {r1, r2, r5, r9, fp}
     73c:	9f300002 	svcls	0x00300002
	...
     748:	08000a04 	stmdaeq	r0, {r2, r9, fp}
     74c:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
     750:	14540001 	ldrbne	r0, [r4], #-1
     754:	1c08000a 	stcne	0, cr0, [r8], {10}
     758:	0408000a 	streq	r0, [r8], #-10
     75c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     760:	000a1c9f 	muleq	sl, pc, ip	; <UNPREDICTABLE>
     764:	000a2608 	andeq	r2, sl, r8, lsl #12
     768:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     774:	08000a04 	stmdaeq	r0, {r2, r9, fp}
     778:	08000a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp}
     77c:	9f300002 	svcls	0x00300002
     780:	08000a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp}
     784:	08000a16 	stmdaeq	r0, {r1, r2, r4, r9, fp}
     788:	9f310002 	svcls	0x00310002
     78c:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
     790:	08000a26 	stmdaeq	r0, {r1, r2, r5, r9, fp}
     794:	9f300002 	svcls	0x00300002
	...
     7a0:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
     7a4:	08000a37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r9, fp}
     7a8:	37500001 	ldrbcc	r0, [r0, -r1]
     7ac:	3a08000a 	bcc	2007dc <_Min_Stack_Size+0x2003dc>
     7b0:	0108000a 	tsteq	r8, sl
     7b4:	0a3a5600 	beq	e95fbc <_Min_Stack_Size+0xe95bbc>
     7b8:	0a3d0800 	beq	f427c0 <_Min_Stack_Size+0xf423c0>
     7bc:	00010800 	andeq	r0, r1, r0, lsl #16
     7c0:	000a3d50 	andeq	r3, sl, r0, asr sp
     7c4:	000a4e08 	andeq	r4, sl, r8, lsl #28
     7c8:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
     7d4:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
     7d8:	08000a37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r9, fp}
     7dc:	37510001 	ldrbcc	r0, [r1, -r1]
     7e0:	3a08000a 	bcc	200810 <_Min_Stack_Size+0x200410>
     7e4:	0108000a 	tsteq	r8, sl
     7e8:	0a3a5400 	beq	e957f0 <_Min_Stack_Size+0xe953f0>
     7ec:	0a3d0800 	beq	f427f4 <_Min_Stack_Size+0xf423f4>
     7f0:	00010800 	andeq	r0, r1, r0, lsl #16
     7f4:	000a3d51 	andeq	r3, sl, r1, asr sp
     7f8:	000a4408 	andeq	r4, sl, r8, lsl #8
     7fc:	54000108 	strpl	r0, [r0], #-264	; 0x108
     800:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
     804:	08000a4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, fp}
     808:	01f30004 	mvnseq	r0, r4
     80c:	00009f51 	andeq	r9, r0, r1, asr pc
     810:	00000000 	andeq	r0, r0, r0
     814:	0a320000 	beq	c8081c <_Min_Stack_Size+0xc8041c>
     818:	0a370800 	beq	dc2820 <_Min_Stack_Size+0xdc2420>
     81c:	00010800 	andeq	r0, r1, r0, lsl #16
     820:	000a3750 	andeq	r3, sl, r0, asr r7
     824:	000a3a08 	andeq	r3, sl, r8, lsl #20
     828:	56000108 	strpl	r0, [r0], -r8, lsl #2
     82c:	08000a3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, fp}
     830:	08000a3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, fp}
     834:	3d500001 	ldclcc	0, cr0, [r0, #-4]
     838:	4e08000a 	cdpmi	0, 0, cr0, cr8, cr10, {0}
     83c:	0108000a 	tsteq	r8, sl
     840:	00005600 	andeq	r5, r0, r0, lsl #12
     844:	00000000 	andeq	r0, r0, r0
     848:	0a500000 	beq	1400850 <_Min_Stack_Size+0x1400450>
     84c:	0a5f0800 	beq	17c2854 <_Min_Stack_Size+0x17c2454>
     850:	00010800 	andeq	r0, r1, r0, lsl #16
     854:	000a5f50 	andeq	r5, sl, r0, asr pc
     858:	000a6208 	andeq	r6, sl, r8, lsl #4
     85c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     860:	08000a62 	stmdaeq	r0, {r1, r5, r6, r9, fp}
     864:	08000a65 	stmdaeq	r0, {r0, r2, r5, r6, r9, fp}
     868:	65500001 	ldrbvs	r0, [r0, #-1]
     86c:	7608000a 	strvc	r0, [r8], -sl
     870:	0108000a 	tsteq	r8, sl
     874:	00005500 	andeq	r5, r0, r0, lsl #10
     878:	00000000 	andeq	r0, r0, r0
     87c:	0a500000 	beq	1400884 <_Min_Stack_Size+0x1400484>
     880:	0a5f0800 	beq	17c2888 <_Min_Stack_Size+0x17c2488>
     884:	00010800 	andeq	r0, r1, r0, lsl #16
     888:	000a5f51 	andeq	r5, sl, r1, asr pc
     88c:	000a6208 	andeq	r6, sl, r8, lsl #4
     890:	56000108 	strpl	r0, [r0], -r8, lsl #2
     894:	08000a62 	stmdaeq	r0, {r1, r5, r6, r9, fp}
     898:	08000a65 	stmdaeq	r0, {r0, r2, r5, r6, r9, fp}
     89c:	65510001 	ldrbvs	r0, [r1, #-1]
     8a0:	6c08000a 	stcvs	0, cr0, [r8], {10}
     8a4:	0108000a 	tsteq	r8, sl
     8a8:	0a6c5600 	beq	1b160b0 <_Min_Stack_Size+0x1b15cb0>
     8ac:	0a760800 	beq	1d828b4 <_Min_Stack_Size+0x1d824b4>
     8b0:	00040800 	andeq	r0, r4, r0, lsl #16
     8b4:	9f5101f3 	svcls	0x005101f3
	...
     8c0:	08000a66 	stmdaeq	r0, {r1, r2, r5, r6, r9, fp}
     8c4:	08000a71 	stmdaeq	r0, {r0, r4, r5, r6, r9, fp}
     8c8:	00500001 	subseq	r0, r0, r1
     8cc:	00000000 	andeq	r0, r0, r0
     8d0:	5a000000 	bpl	8d8 <_Min_Stack_Size+0x4d8>
     8d4:	5f08000a 	svcpl	0x0008000a
     8d8:	0108000a 	tsteq	r8, sl
     8dc:	0a5f5000 	beq	17d48e4 <_Min_Stack_Size+0x17d44e4>
     8e0:	0a620800 	beq	18828e8 <_Min_Stack_Size+0x18824e8>
     8e4:	00010800 	andeq	r0, r1, r0, lsl #16
     8e8:	000a6255 	andeq	r6, sl, r5, asr r2
     8ec:	000a6508 	andeq	r6, sl, r8, lsl #10
     8f0:	50000108 	andpl	r0, r0, r8, lsl #2
     8f4:	08000a65 	stmdaeq	r0, {r0, r2, r5, r6, r9, fp}
     8f8:	08000a76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, fp}
     8fc:	00550001 	subseq	r0, r5, r1
     900:	00000000 	andeq	r0, r0, r0
     904:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     908:	8708000a 	strhi	r0, [r8, -sl]
     90c:	0108000a 	tsteq	r8, sl
     910:	0a875000 	beq	fe1d4918 <_estack+0xde1a4918>
     914:	0a8a0800 	beq	fe28291c <_estack+0xde25291c>
     918:	00010800 	andeq	r0, r1, r0, lsl #16
     91c:	000a8a54 	andeq	r8, sl, r4, asr sl
     920:	000a8d08 	andeq	r8, sl, r8, lsl #26
     924:	50000108 	andpl	r0, r0, r8, lsl #2
     928:	08000a8d 	stmdaeq	r0, {r0, r2, r3, r7, r9, fp}
     92c:	08000ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp}
     930:	00540001 	subseq	r0, r4, r1
     934:	00000000 	andeq	r0, r0, r0
     938:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     93c:	8708000a 	strhi	r0, [r8, -sl]
     940:	0108000a 	tsteq	r8, sl
     944:	0a875100 	beq	fe1d4d4c <_estack+0xde1a4d4c>
     948:	0a8a0800 	beq	fe282950 <_estack+0xde252950>
     94c:	00010800 	andeq	r0, r1, r0, lsl #16
     950:	000a8a56 	andeq	r8, sl, r6, asr sl
     954:	000a8d08 	andeq	r8, sl, r8, lsl #26
     958:	51000108 	tstpl	r0, r8, lsl #2
     95c:	08000a8d 	stmdaeq	r0, {r0, r2, r3, r7, r9, fp}
     960:	08000a98 	stmdaeq	r0, {r3, r4, r7, r9, fp}
     964:	98560001 	ldmdals	r6, {r0}^
     968:	e808000a 	stmda	r8, {r1, r3}
     96c:	0408000a 	streq	r0, [r8], #-10
     970:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     974:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     978:	00000000 	andeq	r0, r0, r0
     97c:	000a9800 	andeq	r9, sl, r0, lsl #16
     980:	000ab108 	andeq	fp, sl, r8, lsl #2
     984:	50000108 	andpl	r0, r0, r8, lsl #2
     988:	08000ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp}
     98c:	08000aba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, fp}
     990:	ba570001 	blt	15c099c <_Min_Stack_Size+0x15c059c>
     994:	d008000a 	andle	r0, r8, sl
     998:	0108000a 	tsteq	r8, sl
     99c:	0ad05000 	beq	ff4149a4 <_estack+0xdf3e49a4>
     9a0:	0ad60800 	beq	ff5829a8 <_estack+0xdf5529a8>
     9a4:	00010800 	andeq	r0, r1, r0, lsl #16
     9a8:	000ae257 	andeq	lr, sl, r7, asr r2
     9ac:	000ae808 	andeq	lr, sl, r8, lsl #16
     9b0:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     9bc:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
     9c0:	08000aba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, fp}
     9c4:	be570001 	cdplt	0, 5, cr0, cr7, cr1, {0}
     9c8:	d608000a 	strle	r0, [r8], -sl
     9cc:	0108000a 	tsteq	r8, sl
     9d0:	00005700 	andeq	r5, r0, r0, lsl #14
     9d4:	00000000 	andeq	r0, r0, r0
     9d8:	0a8a0000 	beq	fe2809e0 <_estack+0xde2509e0>
     9dc:	0a8d0800 	beq	fe3429e4 <_estack+0xde3129e4>
     9e0:	00030800 	andeq	r0, r3, r0, lsl #16
     9e4:	8d9f0470 	cfldrshi	mvf0, [pc, #448]	; bac <_Min_Stack_Size+0x7ac>
     9e8:	e808000a 	stmda	r8, {r1, r3}
     9ec:	0308000a 	movweq	r0, #32778	; 0x800a
     9f0:	9f047400 	svcls	0x00047400
	...
     9fc:	08000a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp}
     a00:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
     a04:	9f300002 	svcls	0x00300002
     a08:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
     a0c:	08000ad6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, fp}
     a10:	e2550001 	subs	r0, r5, #1
     a14:	e808000a 	stmda	r8, {r1, r3}
     a18:	0208000a 	andeq	r0, r8, #10
     a1c:	009f3000 	addseq	r3, pc, r0
     a20:	00000000 	andeq	r0, r0, r0
     a24:	a0000000 	andge	r0, r0, r0
     a28:	b108000a 	tstlt	r8, sl
     a2c:	0108000a 	tsteq	r8, sl
     a30:	0abe5300 	beq	fef95638 <_estack+0xdef65638>
     a34:	0ac60800 	beq	ff182a3c <_estack+0xdf152a3c>
     a38:	00010800 	andeq	r0, r1, r0, lsl #16
     a3c:	000ac652 	andeq	ip, sl, r2, asr r6
     a40:	000ad408 	andeq	sp, sl, r8, lsl #8
     a44:	53000108 	movwpl	r0, #264	; 0x108
	...
     a50:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
     a54:	08000aa6 	stmdaeq	r0, {r1, r2, r5, r7, r9, fp}
     a58:	00720008 	rsbseq	r0, r2, r8
     a5c:	1f244440 	svcne	0x00244440
     a60:	0aa69f1a 	beq	fe9a86d0 <_estack+0xde9786d0>
     a64:	0ab10800 	beq	fec42a6c <_estack+0xdec12a6c>
     a68:	00090800 	andeq	r0, r9, r0, lsl #16
     a6c:	40060070 	andmi	r0, r6, r0, ror r0
     a70:	1a1f2444 	bne	7c9b88 <_Min_Stack_Size+0x7c9788>
     a74:	000abe9f 	muleq	sl, pc, lr	; <UNPREDICTABLE>
     a78:	000ad408 	andeq	sp, sl, r8, lsl #8
     a7c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
     a80:	24444000 	strbcs	r4, [r4], #-0
     a84:	009f1a1f 	addseq	r1, pc, pc, lsl sl	; <UNPREDICTABLE>
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	82000000 	andhi	r0, r0, #0
     a90:	8708000a 	strhi	r0, [r8, -sl]
     a94:	0108000a 	tsteq	r8, sl
     a98:	0a875000 	beq	fe1d4aa0 <_estack+0xde1a4aa0>
     a9c:	0a8a0800 	beq	fe282aa4 <_estack+0xde252aa4>
     aa0:	00010800 	andeq	r0, r1, r0, lsl #16
     aa4:	000a8a54 	andeq	r8, sl, r4, asr sl
     aa8:	000a8d08 	andeq	r8, sl, r8, lsl #26
     aac:	50000108 	andpl	r0, r0, r8, lsl #2
     ab0:	08000a8d 	stmdaeq	r0, {r0, r2, r3, r7, r9, fp}
     ab4:	08000ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp}
     ab8:	00540001 	subseq	r0, r4, r1
     abc:	00000000 	andeq	r0, r0, r0
     ac0:	82000000 	andhi	r0, r0, #0
     ac4:	a408000a 	strge	r0, [r8], #-10
     ac8:	0208000a 	andeq	r0, r8, #10
     acc:	a49f3000 	ldrge	r3, [pc], #0	; ad4 <_Min_Stack_Size+0x6d4>
     ad0:	b408000a 	strlt	r0, [r8], #-10
     ad4:	0208000a 	andeq	r0, r8, #10
     ad8:	be9f3100 	fmllte	f3, f7, f0
     adc:	d408000a 	strle	r0, [r8], #-10
     ae0:	0208000a 	andeq	r0, r8, #10
     ae4:	e29f3000 	adds	r3, pc, #0
     ae8:	e808000a 	stmda	r8, {r1, r3}
     aec:	0208000a 	andeq	r0, r8, #10
     af0:	009f3000 	addseq	r3, pc, r0
     af4:	00000000 	andeq	r0, r0, r0
     af8:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     afc:	fd08000a 	stc2	0, cr0, [r8, #-40]	; 0xffffffd8
     b00:	0108000a 	tsteq	r8, sl
     b04:	0afd5000 	beq	fff54b0c <_estack+0xdff24b0c>
     b08:	0b000800 	bleq	2b10 <_Min_Stack_Size+0x2710>
     b0c:	00010800 	andeq	r0, r1, r0, lsl #16
     b10:	000b0054 	andeq	r0, fp, r4, asr r0
     b14:	000b0308 	andeq	r0, fp, r8, lsl #6
     b18:	50000108 	andpl	r0, r0, r8, lsl #2
     b1c:	08000b03 	stmdaeq	r0, {r0, r1, r8, r9, fp}
     b20:	08000b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp}
     b24:	2c540001 	mrrccs	0, 0, r0, r4, cr1
     b28:	2f08000b 	svccs	0x0008000b
     b2c:	0108000b 	tsteq	r8, fp
     b30:	0b2f5000 	bleq	bd4b38 <_Min_Stack_Size+0xbd4738>
     b34:	0b9a0800 	bleq	fe682b3c <_estack+0xde652b3c>
     b38:	00010800 	andeq	r0, r1, r0, lsl #16
     b3c:	00000054 	andeq	r0, r0, r4, asr r0
     b40:	00000000 	andeq	r0, r0, r0
     b44:	000ae800 	andeq	lr, sl, r0, lsl #16
     b48:	000afd08 	andeq	pc, sl, r8, lsl #26
     b4c:	51000108 	tstpl	r0, r8, lsl #2
     b50:	08000afd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, fp}
     b54:	08000b00 	stmdaeq	r0, {r8, r9, fp}
     b58:	00560001 	subseq	r0, r6, r1
     b5c:	0308000b 	movweq	r0, #32779	; 0x800b
     b60:	0108000b 	tsteq	r8, fp
     b64:	0b035100 	bleq	d4f6c <_Min_Stack_Size+0xd4b6c>
     b68:	0b160800 	bleq	582b70 <_Min_Stack_Size+0x582770>
     b6c:	00010800 	andeq	r0, r1, r0, lsl #16
     b70:	000b1656 	andeq	r1, fp, r6, asr r6
     b74:	000b1908 	andeq	r1, fp, r8, lsl #18
     b78:	51000108 	tstpl	r0, r8, lsl #2
     b7c:	08000b19 	stmdaeq	r0, {r0, r3, r4, r8, r9, fp}
     b80:	08000b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp}
     b84:	01f30004 	mvnseq	r0, r4
     b88:	0b2c9f51 	bleq	b288d4 <_Min_Stack_Size+0xb284d4>
     b8c:	0b2f0800 	bleq	bc2b94 <_Min_Stack_Size+0xbc2794>
     b90:	00010800 	andeq	r0, r1, r0, lsl #16
     b94:	000b2f51 	andeq	r2, fp, r1, asr pc
     b98:	000b3e08 	andeq	r3, fp, r8, lsl #28
     b9c:	56000108 	strpl	r0, [r0], -r8, lsl #2
     ba0:	08000b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp}
     ba4:	08000b41 	stmdaeq	r0, {r0, r6, r8, r9, fp}
     ba8:	41510001 	cmpmi	r1, r1
     bac:	9408000b 	strls	r0, [r8], #-11
     bb0:	0408000b 	streq	r0, [r8], #-11
     bb4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     bb8:	000b949f 	muleq	fp, pc, r4	; <UNPREDICTABLE>
     bbc:	000b9a08 	andeq	r9, fp, r8, lsl #20
     bc0:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
     bcc:	08000ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp}
     bd0:	08000afd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, fp}
     bd4:	fd520001 	ldc2l	0, cr0, [r2, #-4]
     bd8:	0008000a 	andeq	r0, r8, sl
     bdc:	0108000b 	tsteq	r8, fp
     be0:	0b005500 	bleq	15fe8 <_Min_Stack_Size+0x15be8>
     be4:	0b030800 	bleq	c2bec <_Min_Stack_Size+0xc27ec>
     be8:	00010800 	andeq	r0, r1, r0, lsl #16
     bec:	000b0352 	andeq	r0, fp, r2, asr r3
     bf0:	000b2808 	andeq	r2, fp, r8, lsl #16
     bf4:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     bf8:	08000b28 	stmdaeq	r0, {r3, r5, r8, r9, fp}
     bfc:	08000b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp}
     c00:	01f30004 	mvnseq	r0, r4
     c04:	0b2c9f52 	bleq	b28954 <_Min_Stack_Size+0xb28554>
     c08:	0b2f0800 	bleq	bc2c10 <_Min_Stack_Size+0xbc2810>
     c0c:	00010800 	andeq	r0, r1, r0, lsl #16
     c10:	000b2f52 	andeq	r2, fp, r2, asr pc
     c14:	000b8408 	andeq	r8, fp, r8, lsl #8
     c18:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     c1c:	08000b84 	stmdaeq	r0, {r2, r7, r8, r9, fp}
     c20:	08000b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp}
     c24:	01f30004 	mvnseq	r0, r4
     c28:	0b8c9f52 	bleq	fe328978 <_estack+0xde2f8978>
     c2c:	0b9a0800 	bleq	fe682c34 <_estack+0xde652c34>
     c30:	00010800 	andeq	r0, r1, r0, lsl #16
     c34:	00000055 	andeq	r0, r0, r5, asr r0
     c38:	00000000 	andeq	r0, r0, r0
     c3c:	000ae800 	andeq	lr, sl, r0, lsl #16
     c40:	000afd08 	andeq	pc, sl, r8, lsl #26
     c44:	53000108 	movwpl	r0, #264	; 0x108
     c48:	08000afd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, fp}
     c4c:	08000b00 	stmdaeq	r0, {r8, r9, fp}
     c50:	00570001 	subseq	r0, r7, r1
     c54:	0308000b 	movweq	r0, #32779	; 0x800b
     c58:	0108000b 	tsteq	r8, fp
     c5c:	0b035300 	bleq	d5864 <_Min_Stack_Size+0xd5464>
     c60:	0b240800 	bleq	902c68 <_Min_Stack_Size+0x902868>
     c64:	00010800 	andeq	r0, r1, r0, lsl #16
     c68:	000b2457 	andeq	r2, fp, r7, asr r4
     c6c:	000b2808 	andeq	r2, fp, r8, lsl #16
     c70:	30000208 	andcc	r0, r0, r8, lsl #4
     c74:	000b2c9f 	muleq	fp, pc, ip	; <UNPREDICTABLE>
     c78:	000b2f08 	andeq	r2, fp, r8, lsl #30
     c7c:	53000108 	movwpl	r0, #264	; 0x108
     c80:	08000b2f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, fp}
     c84:	08000b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp}
     c88:	92570001 	subsls	r0, r7, #1
     c8c:	9408000b 	strls	r0, [r8], #-11
     c90:	0208000b 	andeq	r0, r8, #11
     c94:	949f3000 	ldrls	r3, [pc], #0	; c9c <_Min_Stack_Size+0x89c>
     c98:	9a08000b 	bls	200ccc <_Min_Stack_Size+0x2008cc>
     c9c:	0108000b 	tsteq	r8, fp
     ca0:	00005700 	andeq	r5, r0, r0, lsl #14
     ca4:	00000000 	andeq	r0, r0, r0
     ca8:	0b100000 	bleq	400cb0 <_Min_Stack_Size+0x4008b0>
     cac:	0b190800 	bleq	642cb4 <_Min_Stack_Size+0x6428b4>
     cb0:	00010800 	andeq	r0, r1, r0, lsl #16
     cb4:	000b3853 	andeq	r3, fp, r3, asr r8
     cb8:	000b4108 	andeq	r4, fp, r8, lsl #2
     cbc:	53000108 	movwpl	r0, #264	; 0x108
	...
     cc8:	08000b24 	stmdaeq	r0, {r2, r5, r8, r9, fp}
     ccc:	08000b28 	stmdaeq	r0, {r3, r5, r8, r9, fp}
     cd0:	5a560001 	bpl	1580cdc <_Min_Stack_Size+0x15808dc>
     cd4:	6808000b 	stmdavs	r8, {r0, r1, r3}
     cd8:	0208000b 	andeq	r0, r8, #11
     cdc:	689f3000 	ldmvs	pc, {ip, sp}	; <UNPREDICTABLE>
     ce0:	7508000b 	strvc	r0, [r8, #-11]
     ce4:	0108000b 	tsteq	r8, fp
     ce8:	0b785000 	bleq	1e14cf0 <_Min_Stack_Size+0x1e148f0>
     cec:	0b940800 	bleq	fe502cf4 <_estack+0xde4d2cf4>
     cf0:	00010800 	andeq	r0, r1, r0, lsl #16
     cf4:	00000056 	andeq	r0, r0, r6, asr r0
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	000af200 	andeq	pc, sl, r0, lsl #4
     d00:	000afd08 	andeq	pc, sl, r8, lsl #26
     d04:	50000108 	andpl	r0, r0, r8, lsl #2
     d08:	08000afd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, fp}
     d0c:	08000b00 	stmdaeq	r0, {r8, r9, fp}
     d10:	00540001 	subseq	r0, r4, r1
     d14:	0308000b 	movweq	r0, #32779	; 0x800b
     d18:	0108000b 	tsteq	r8, fp
     d1c:	0b035000 	bleq	d4d24 <_Min_Stack_Size+0xd4924>
     d20:	0b2c0800 	bleq	b02d28 <_Min_Stack_Size+0xb02928>
     d24:	00010800 	andeq	r0, r1, r0, lsl #16
     d28:	000b2c54 	andeq	r2, fp, r4, asr ip
     d2c:	000b2f08 	andeq	r2, fp, r8, lsl #30
     d30:	50000108 	andpl	r0, r0, r8, lsl #2
     d34:	08000b2f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, fp}
     d38:	08000b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp}
     d3c:	00540001 	subseq	r0, r4, r1
     d40:	00000000 	andeq	r0, r0, r0
     d44:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
     d48:	6308000b 	movwvs	r0, #32779	; 0x800b
     d4c:	0108000b 	tsteq	r8, fp
     d50:	00005000 	andeq	r5, r0, r0
     d54:	00000000 	andeq	r0, r0, r0
     d58:	0af20000 	beq	ffc80d60 <_estack+0xdfc50d60>
     d5c:	0b280800 	bleq	a02d64 <_Min_Stack_Size+0xa02964>
     d60:	00020800 	andeq	r0, r2, r0, lsl #16
     d64:	0b2c9f30 	bleq	b28a2c <_Min_Stack_Size+0xb2862c>
     d68:	0b8a0800 	bleq	fe282d70 <_estack+0xde252d70>
     d6c:	00020800 	andeq	r0, r2, r0, lsl #16
     d70:	0b8a9f30 	bleq	fe2a8a38 <_estack+0xde278a38>
     d74:	0b8c0800 	bleq	fe302d7c <_estack+0xde2d2d7c>
     d78:	00020800 	andeq	r0, r2, r0, lsl #16
     d7c:	0b8c9f31 	bleq	fe328a48 <_estack+0xde2f8a48>
     d80:	0b9a0800 	bleq	fe682d88 <_estack+0xde652d88>
     d84:	00020800 	andeq	r0, r2, r0, lsl #16
     d88:	00009f30 	andeq	r9, r0, r0, lsr pc
     d8c:	00000000 	andeq	r0, r0, r0
     d90:	0b9c0000 	bleq	fe700d98 <_estack+0xde6d0d98>
     d94:	0ba30800 	bleq	fe8c2d9c <_estack+0xde892d9c>
     d98:	00010800 	andeq	r0, r1, r0, lsl #16
     d9c:	000ba350 	andeq	sl, fp, r0, asr r3
     da0:	000bd208 	andeq	sp, fp, r8, lsl #4
     da4:	54000108 	strpl	r0, [r0], #-264	; 0x108
     da8:	08000bd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, fp}
     dac:	08000bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp}
     db0:	01f30004 	mvnseq	r0, r4
     db4:	0bd69f50 	bleq	ff5a8afc <_estack+0xdf578afc>
     db8:	0bdc0800 	bleq	ff702dc0 <_estack+0xdf6d2dc0>
     dbc:	00010800 	andeq	r0, r1, r0, lsl #16
     dc0:	00000054 	andeq	r0, r0, r4, asr r0
     dc4:	00000000 	andeq	r0, r0, r0
     dc8:	000ba000 	andeq	sl, fp, r0
     dcc:	000ba308 	andeq	sl, fp, r8, lsl #6
     dd0:	50000108 	andpl	r0, r0, r8, lsl #2
     dd4:	08000ba3 	stmdaeq	r0, {r0, r1, r5, r7, r8, r9, fp}
     dd8:	08000bd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, fp}
     ddc:	d2540001 	subsle	r0, r4, #1
     de0:	d608000b 	strle	r0, [r8], -fp
     de4:	0408000b 	streq	r0, [r8], #-11
     de8:	5001f300 	andpl	pc, r1, r0, lsl #6
     dec:	000bd69f 	muleq	fp, pc, r6	; <UNPREDICTABLE>
     df0:	000bdc08 	andeq	sp, fp, r8, lsl #24
     df4:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     e00:	08000ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp}
     e04:	08000ba3 	stmdaeq	r0, {r0, r1, r5, r7, r8, r9, fp}
     e08:	04700003 	ldrbteq	r0, [r0], #-3
     e0c:	000ba39f 	muleq	fp, pc, r3	; <UNPREDICTABLE>
     e10:	000bd208 	andeq	sp, fp, r8, lsl #4
     e14:	74000308 	strvc	r0, [r0], #-776	; 0x308
     e18:	0bd29f04 	bleq	ff4a8a30 <_estack+0xdf478a30>
     e1c:	0bd60800 	bleq	ff582e24 <_estack+0xdf552e24>
     e20:	00060800 	andeq	r0, r6, r0, lsl #16
     e24:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
     e28:	0bd69f04 	bleq	ff5a8a40 <_estack+0xdf578a40>
     e2c:	0bdc0800 	bleq	ff702e34 <_estack+0xdf6d2e34>
     e30:	00030800 	andeq	r0, r3, r0, lsl #16
     e34:	009f0474 	addseq	r0, pc, r4, ror r4	; <UNPREDICTABLE>
     e38:	00000000 	andeq	r0, r0, r0
     e3c:	dc000000 	stcle	0, cr0, [r0], {-0}
     e40:	eb08000b 	bl	200e74 <_Min_Stack_Size+0x200a74>
     e44:	0108000b 	tsteq	r8, fp
     e48:	0beb5000 	bleq	ffad4e50 <_estack+0xdfaa4e50>
     e4c:	0bee0800 	bleq	ffb82e54 <_estack+0xdfb52e54>
     e50:	00010800 	andeq	r0, r1, r0, lsl #16
     e54:	000bee54 	andeq	lr, fp, r4, asr lr
     e58:	000bf108 	andeq	pc, fp, r8, lsl #2
     e5c:	50000108 	andpl	r0, r0, r8, lsl #2
     e60:	08000bf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp}
     e64:	08000c42 	stmdaeq	r0, {r1, r6, sl, fp}
     e68:	42540001 	subsmi	r0, r4, #1
     e6c:	4608000c 	strmi	r0, [r8], -ip
     e70:	0408000c 	streq	r0, [r8], #-12
     e74:	5001f300 	andpl	pc, r1, r0, lsl #6
     e78:	000c469f 	muleq	ip, pc, r6	; <UNPREDICTABLE>
     e7c:	000c5208 	andeq	r5, ip, r8, lsl #4
     e80:	54000108 	strpl	r0, [r0], #-264	; 0x108
     e84:	08000c52 	stmdaeq	r0, {r1, r4, r6, sl, fp}
     e88:	08000c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp}
     e8c:	01f30004 	mvnseq	r0, r4
     e90:	00009f50 	andeq	r9, r0, r0, asr pc
     e94:	00000000 	andeq	r0, r0, r0
     e98:	0bdc0000 	bleq	ff700ea0 <_estack+0xdf6d0ea0>
     e9c:	0beb0800 	bleq	ffac2ea4 <_estack+0xdfa92ea4>
     ea0:	00010800 	andeq	r0, r1, r0, lsl #16
     ea4:	000beb51 	andeq	lr, fp, r1, asr fp
     ea8:	000bee08 	andeq	lr, fp, r8, lsl #28
     eac:	56000108 	strpl	r0, [r0], -r8, lsl #2
     eb0:	08000bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp}
     eb4:	08000bf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp}
     eb8:	f1510001 			; <UNDEFINED> instruction: 0xf1510001
     ebc:	fc08000b 	stc2	0, cr0, [r8], {11}
     ec0:	0108000b 	tsteq	r8, fp
     ec4:	0bfc5600 	bleq	fff166cc <_estack+0xdfee66cc>
     ec8:	0c560800 	mrrceq	8, 0, r0, r6, cr0
     ecc:	00040800 	andeq	r0, r4, r0, lsl #16
     ed0:	9f5101f3 	svcls	0x005101f3
	...
     edc:	08000be6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, fp}
     ee0:	08000beb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r8, r9, fp}
     ee4:	eb510001 	bl	1440ef0 <_Min_Stack_Size+0x1440af0>
     ee8:	ee08000b 	cdp	0, 0, cr0, cr8, cr11, {0}
     eec:	0108000b 	tsteq	r8, fp
     ef0:	0bee5600 	bleq	ffb966f8 <_estack+0xdfb666f8>
     ef4:	0bf10800 	bleq	ffc42efc <_estack+0xdfc12efc>
     ef8:	00010800 	andeq	r0, r1, r0, lsl #16
     efc:	000bf151 	andeq	pc, fp, r1, asr r1	; <UNPREDICTABLE>
     f00:	000bfc08 	andeq	pc, fp, r8, lsl #24
     f04:	56000108 	strpl	r0, [r0], -r8, lsl #2
     f08:	08000bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp}
     f0c:	08000c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp}
     f10:	01f30004 	mvnseq	r0, r4
     f14:	00009f51 	andeq	r9, r0, r1, asr pc
     f18:	00000000 	andeq	r0, r0, r0
     f1c:	0be60000 	bleq	ff980f24 <_estack+0xdf950f24>
     f20:	0beb0800 	bleq	ffac2f28 <_estack+0xdfa92f28>
     f24:	00010800 	andeq	r0, r1, r0, lsl #16
     f28:	000beb50 	andeq	lr, fp, r0, asr fp
     f2c:	000bee08 	andeq	lr, fp, r8, lsl #28
     f30:	54000108 	strpl	r0, [r0], #-264	; 0x108
     f34:	08000bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp}
     f38:	08000bf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp}
     f3c:	f1500001 			; <UNDEFINED> instruction: 0xf1500001
     f40:	4208000b 	andmi	r0, r8, #11
     f44:	0108000c 	tsteq	r8, ip
     f48:	0c425400 	cfstrdeq	mvd5, [r2], {-0}
     f4c:	0c460800 	mcrreq	8, 0, r0, r6, cr0
     f50:	00040800 	andeq	r0, r4, r0, lsl #16
     f54:	9f5001f3 	svcls	0x005001f3
     f58:	08000c46 	stmdaeq	r0, {r1, r2, r6, sl, fp}
     f5c:	08000c52 	stmdaeq	r0, {r1, r4, r6, sl, fp}
     f60:	52540001 	subspl	r0, r4, #1
     f64:	5608000c 	strpl	r0, [r8], -ip
     f68:	0408000c 	streq	r0, [r8], #-12
     f6c:	5001f300 	andpl	pc, r1, r0, lsl #6
     f70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f74:	00000000 	andeq	r0, r0, r0
     f78:	000bfc00 	andeq	pc, fp, r0, lsl #24
     f7c:	000c1508 	andeq	r1, ip, r8, lsl #10
     f80:	50000108 	andpl	r0, r0, r8, lsl #2
     f84:	08000c18 	stmdaeq	r0, {r3, r4, sl, fp}
     f88:	08000c1e 	stmdaeq	r0, {r1, r2, r3, r4, sl, fp}
     f8c:	1e570001 	cdpne	0, 5, cr0, cr7, cr1, {0}
     f90:	3408000c 	strcc	r0, [r8], #-12
     f94:	0108000c 	tsteq	r8, ip
     f98:	0c345000 	ldceq	0, cr5, [r4], #-0
     f9c:	0c420800 	mcrreq	8, 0, r0, r2, cr0
     fa0:	00010800 	andeq	r0, r1, r0, lsl #16
     fa4:	000c4657 	andeq	r4, ip, r7, asr r6
     fa8:	000c5508 	andeq	r5, ip, r8, lsl #10
     fac:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     fb8:	08000c04 	stmdaeq	r0, {r2, sl, fp}
     fbc:	08000c1e 	stmdaeq	r0, {r1, r2, r3, r4, sl, fp}
     fc0:	22570001 	subscs	r0, r7, #1
     fc4:	4208000c 	andmi	r0, r8, #12
     fc8:	0108000c 	tsteq	r8, ip
     fcc:	00005700 	andeq	r5, r0, r0, lsl #14
     fd0:	00000000 	andeq	r0, r0, r0
     fd4:	0bfc0000 	bleq	fff00fdc <_estack+0xdfed0fdc>
     fd8:	0c420800 	mcrreq	8, 0, r0, r2, cr0
     fdc:	00010800 	andeq	r0, r1, r0, lsl #16
     fe0:	000c4256 	andeq	r4, ip, r6, asr r2
     fe4:	000c4608 	andeq	r4, ip, r8, lsl #12
     fe8:	f3000608 	vmax.u8	d0, d0, d8
     fec:	0c235001 	stceq	0, cr5, [r3], #-4
     ff0:	000c469f 	muleq	ip, pc, r6	; <UNPREDICTABLE>
     ff4:	000c5208 	andeq	r5, ip, r8, lsl #4
     ff8:	56000108 	strpl	r0, [r0], -r8, lsl #2
     ffc:	08000c52 	stmdaeq	r0, {r1, r4, r6, sl, fp}
    1000:	08000c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp}
    1004:	01f30006 	mvnseq	r0, r6
    1008:	9f0c2350 	svcls	0x000c2350
	...
    1014:	08000bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp}
    1018:	08000bf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp}
    101c:	04700003 	ldrbteq	r0, [r0], #-3
    1020:	000bf19f 	muleq	fp, pc, r1	; <UNPREDICTABLE>
    1024:	000c4208 	andeq	r4, ip, r8, lsl #4
    1028:	74000308 	strvc	r0, [r0], #-776	; 0x308
    102c:	0c429f04 	mcrreq	15, 0, r9, r2, cr4
    1030:	0c460800 	mcrreq	8, 0, r0, r6, cr0
    1034:	00060800 	andeq	r0, r6, r0, lsl #16
    1038:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
    103c:	0c469f04 	mcrreq	15, 0, r9, r6, cr4
    1040:	0c520800 	mrrceq	8, 0, r0, r2, cr0
    1044:	00030800 	andeq	r0, r3, r0, lsl #16
    1048:	529f0474 	addspl	r0, pc, #116, 8	; 0x74000000
    104c:	5608000c 	strpl	r0, [r8], -ip
    1050:	0608000c 	streq	r0, [r8], -ip
    1054:	5001f300 	andpl	pc, r1, r0, lsl #6
    1058:	009f0423 	addseq	r0, pc, r3, lsr #8
    105c:	00000000 	andeq	r0, r0, r0
    1060:	e6000000 	str	r0, [r0], -r0
    1064:	0408000b 	streq	r0, [r8], #-11
    1068:	0208000c 	andeq	r0, r8, #12
    106c:	049f3000 	ldreq	r3, [pc], #0	; 1074 <_Min_Stack_Size+0xc74>
    1070:	3a08000c 	bcc	2010a8 <_Min_Stack_Size+0x200ca8>
    1074:	0108000c 	tsteq	r8, ip
    1078:	0c3a5500 	cfldr32eq	mvfx5, [sl], #-0
    107c:	0c420800 	mcrreq	8, 0, r0, r2, cr0
    1080:	00040800 	andeq	r0, r4, r0, lsl #16
    1084:	9f200075 	svcls	0x00200075
    1088:	08000c46 	stmdaeq	r0, {r1, r2, r6, sl, fp}
    108c:	08000c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp}
    1090:	9f300002 	svcls	0x00300002
	...
    109c:	08000c04 	stmdaeq	r0, {r2, sl, fp}
    10a0:	08000c15 	stmdaeq	r0, {r0, r2, r4, sl, fp}
    10a4:	22530001 	subscs	r0, r3, #1
    10a8:	2a08000c 	bcs	2010e0 <_Min_Stack_Size+0x200ce0>
    10ac:	0108000c 	tsteq	r8, ip
    10b0:	0c2a5200 	sfmeq	f5, 4, [sl], #-0
    10b4:	0c380800 	ldceq	8, cr0, [r8], #-0
    10b8:	00010800 	andeq	r0, r1, r0, lsl #16
    10bc:	00000053 	andeq	r0, r0, r3, asr r0
    10c0:	00000000 	andeq	r0, r0, r0
    10c4:	000c0400 	andeq	r0, ip, r0, lsl #8
    10c8:	000c0a08 	andeq	r0, ip, r8, lsl #20
    10cc:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    10d0:	24444000 	strbcs	r4, [r4], #-0
    10d4:	0a9f1a1f 	beq	fe7c7958 <_estack+0xde797958>
    10d8:	1508000c 	strne	r0, [r8, #-12]
    10dc:	0908000c 	stmdbeq	r8, {r2, r3}
    10e0:	06007000 	streq	r7, [r0], -r0
    10e4:	1f244440 	svcne	0x00244440
    10e8:	0c229f1a 	stceq	15, cr9, [r2], #-104	; 0xffffff98
    10ec:	0c380800 	ldceq	8, cr0, [r8], #-0
    10f0:	00080800 	andeq	r0, r8, r0, lsl #16
    10f4:	44400072 	strbmi	r0, [r0], #-114	; 0x72
    10f8:	9f1a1f24 	svcls	0x001a1f24
	...
    1104:	08000be6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, fp}
    1108:	08000c08 	stmdaeq	r0, {r3, sl, fp}
    110c:	9f300002 	svcls	0x00300002
    1110:	08000c08 	stmdaeq	r0, {r3, sl, fp}
    1114:	08000c18 	stmdaeq	r0, {r3, r4, sl, fp}
    1118:	9f310002 	svcls	0x00310002
    111c:	08000c22 	stmdaeq	r0, {r1, r5, sl, fp}
    1120:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
    1124:	9f300002 	svcls	0x00300002
    1128:	08000c46 	stmdaeq	r0, {r1, r2, r6, sl, fp}
    112c:	08000c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp}
    1130:	9f300002 	svcls	0x00300002
	...
    113c:	08000c58 	stmdaeq	r0, {r3, r4, r6, sl, fp}
    1140:	08000c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp}
    1144:	5c500001 	mrrcpl	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1148:	5e08000c 	cdppl	0, 0, cr0, cr8, cr12, {0}
    114c:	0408000c 	streq	r0, [r8], #-12
    1150:	5001f300 	andpl	pc, r1, r0, lsl #6
    1154:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1158:	00000000 	andeq	r0, r0, r0
    115c:	000cb000 	andeq	fp, ip, r0
    1160:	000cce08 	andeq	ip, ip, r8, lsl #28
    1164:	52000108 	andpl	r0, r0, #8, 2
    1168:	08000cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp}
    116c:	08000cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp}
    1170:	00520001 	subseq	r0, r2, r1
    1174:	00000000 	andeq	r0, r0, r0
    1178:	a4000000 	strge	r0, [r0], #-0
    117c:	cc08000c 	stcgt	0, cr0, [r8], {12}
    1180:	0108000c 	tsteq	r8, ip
    1184:	0ccc5500 	cfstr64eq	mvdx5, [ip], {0}
    1188:	0cce0800 	stcleq	8, cr0, [lr], {0}
    118c:	00020800 	andeq	r0, r2, r0, lsl #16
    1190:	0cce0071 	stcleq	0, cr0, [lr], {113}	; 0x71
    1194:	0cd40800 	ldcleq	8, cr0, [r4], {0}
    1198:	00010800 	andeq	r0, r1, r0, lsl #16
    119c:	00000055 	andeq	r0, r0, r5, asr r0
    11a0:	00000000 	andeq	r0, r0, r0
    11a4:	000cd400 	andeq	sp, ip, r0, lsl #8
    11a8:	000cfa08 	andeq	pc, ip, r8, lsl #20
    11ac:	50000108 	andpl	r0, r0, r8, lsl #2
    11b0:	08000cfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, fp}
    11b4:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
    11b8:	01f30004 	mvnseq	r0, r4
    11bc:	00009f50 	andeq	r9, r0, r0, asr pc
    11c0:	00000000 	andeq	r0, r0, r0
    11c4:	0cfc0000 	ldcleq	0, cr0, [ip]
    11c8:	0d0a0800 	stceq	8, cr0, [sl, #-0]
    11cc:	00010800 	andeq	r0, r1, r0, lsl #16
    11d0:	000d0a50 	andeq	r0, sp, r0, asr sl
    11d4:	000d1d08 	andeq	r1, sp, r8, lsl #26
    11d8:	53000108 	movwpl	r0, #264	; 0x108
    11dc:	08000d1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, fp}
    11e0:	08000d1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, fp}
    11e4:	01f30004 	mvnseq	r0, r4
    11e8:	0d1e9f50 	ldceq	15, cr9, [lr, #-320]	; 0xfffffec0
    11ec:	0d220800 	stceq	8, cr0, [r2, #-0]
    11f0:	00010800 	andeq	r0, r1, r0, lsl #16
    11f4:	00000050 	andeq	r0, r0, r0, asr r0
    11f8:	00000000 	andeq	r0, r0, r0
    11fc:	000cfc00 	andeq	pc, ip, r0, lsl #24
    1200:	000d1a08 	andeq	r1, sp, r8, lsl #20
    1204:	51000108 	tstpl	r0, r8, lsl #2
    1208:	08000d1a 	stmdaeq	r0, {r1, r3, r4, r8, sl, fp}
    120c:	08000d1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, fp}
    1210:	1d500001 	ldclne	0, cr0, [r0, #-4]
    1214:	1e08000d 	cdpne	0, 0, cr0, cr8, cr13, {0}
    1218:	0408000d 	streq	r0, [r8], #-13
    121c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1220:	000d1e9f 	muleq	sp, pc, lr	; <UNPREDICTABLE>
    1224:	000d2208 	andeq	r2, sp, r8, lsl #4
    1228:	51000108 	tstpl	r0, r8, lsl #2
	...
    1234:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
    1238:	08000d2b 	stmdaeq	r0, {r0, r1, r3, r5, r8, sl, fp}
    123c:	2b500001 	blcs	1401248 <_Min_Stack_Size+0x1400e48>
    1240:	a408000d 	strge	r0, [r8], #-13
    1244:	0108000d 	tsteq	r8, sp
    1248:	0da45400 	cfstrseq	mvf5, [r4]
    124c:	0da80800 	stceq	8, cr0, [r8]
    1250:	00040800 	andeq	r0, r4, r0, lsl #16
    1254:	9f5001f3 	svcls	0x005001f3
	...
    1260:	08000da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp}
    1264:	08000db3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, sl, fp}
    1268:	b3500001 	cmplt	r0, #1
    126c:	1408000d 	strne	r0, [r8], #-13
    1270:	0108000e 	tsteq	r8, lr
    1274:	0e145400 	cfmulseq	mvf5, mvf4, mvf0
    1278:	0e170800 	cdpeq	8, 1, cr0, cr7, cr0, {0}
    127c:	00010800 	andeq	r0, r1, r0, lsl #16
    1280:	000e1750 	andeq	r1, lr, r0, asr r7
    1284:	000e1a08 	andeq	r1, lr, r8, lsl #20
    1288:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1294:	08000da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp}
    1298:	08000db3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, sl, fp}
    129c:	b3510001 	cmplt	r1, #1
    12a0:	1408000d 	strne	r0, [r8], #-13
    12a4:	0108000e 	tsteq	r8, lr
    12a8:	0e145500 	cfmul32eq	mvfx5, mvfx4, mvfx0
    12ac:	0e170800 	cdpeq	8, 1, cr0, cr7, cr0, {0}
    12b0:	00010800 	andeq	r0, r1, r0, lsl #16
    12b4:	000e1751 	andeq	r1, lr, r1, asr r7
    12b8:	000e1a08 	andeq	r1, lr, r8, lsl #20
    12bc:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    12c8:	08000e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp}
    12cc:	08000e2a 	stmdaeq	r0, {r1, r3, r5, r9, sl, fp}
    12d0:	2a500001 	bcs	14012dc <_Min_Stack_Size+0x1400edc>
    12d4:	5608000e 	strpl	r0, [r8], -lr
    12d8:	0108000e 	tsteq	r8, lr
    12dc:	0e565500 	cdpeq	5, 5, cr5, cr6, cr0, {0}
    12e0:	0e860800 	cdpeq	8, 8, cr0, cr6, cr0, {0}
    12e4:	00040800 	andeq	r0, r4, r0, lsl #16
    12e8:	9f5001f3 	svcls	0x005001f3
    12ec:	08000e86 	stmdaeq	r0, {r1, r2, r7, r9, sl, fp}
    12f0:	08000e92 	stmdaeq	r0, {r1, r4, r7, r9, sl, fp}
    12f4:	00550001 	subseq	r0, r5, r1
    12f8:	00000000 	andeq	r0, r0, r0
    12fc:	1c000000 	stcne	0, cr0, [r0], {-0}
    1300:	2d08000e 	stccs	0, cr0, [r8, #-56]	; 0xffffffc8
    1304:	0108000e 	tsteq	r8, lr
    1308:	0e2d5100 	sufeqe	f5, f5, f0
    130c:	0e920800 	cdpeq	8, 9, cr0, cr2, cr0, {0}
    1310:	00010800 	andeq	r0, r1, r0, lsl #16
    1314:	00000056 	andeq	r0, r0, r6, asr r0
    1318:	00000000 	andeq	r0, r0, r0
    131c:	000e1c00 	andeq	r1, lr, r0, lsl #24
    1320:	000e2d08 	andeq	r2, lr, r8, lsl #26
    1324:	52000108 	andpl	r0, r0, #8, 2
    1328:	08000e2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, sl, fp}
    132c:	08000e92 	stmdaeq	r0, {r1, r4, r7, r9, sl, fp}
    1330:	01f30004 	mvnseq	r0, r4
    1334:	00009f52 	andeq	r9, r0, r2, asr pc
    1338:	00000000 	andeq	r0, r0, r0
    133c:	0e2e0000 	cdpeq	0, 2, cr0, cr14, cr0, {0}
    1340:	0e360800 	cdpeq	8, 3, cr0, cr6, cr0, {0}
    1344:	00010800 	andeq	r0, r1, r0, lsl #16
    1348:	000e3650 	andeq	r3, lr, r0, asr r6
    134c:	000e8c08 	andeq	r8, lr, r8, lsl #24
    1350:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    135c:	08000e32 	stmdaeq	r0, {r1, r4, r5, r9, sl, fp}
    1360:	08000e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp}
    1364:	00750008 	rsbseq	r0, r5, r8
    1368:	231e0076 	tstcs	lr, #118	; 0x76
    136c:	0e389f01 	cdpeq	15, 3, cr9, cr8, cr1, {0}
    1370:	0e3b0800 	cdpeq	8, 3, cr0, cr11, cr0, {0}
    1374:	00010800 	andeq	r0, r1, r0, lsl #16
    1378:	000e3b50 	andeq	r3, lr, r0, asr fp
    137c:	000e5608 	andeq	r5, lr, r8, lsl #12
    1380:	75000808 	strvc	r0, [r0, #-2056]	; 0x808
    1384:	1e007600 	cfmadd32ne	mvax0, mvfx7, mvfx0, mvfx0
    1388:	569f0123 	ldrpl	r0, [pc], r3, lsr #2
    138c:	8608000e 	strhi	r0, [r8], -lr
    1390:	0908000e 	stmdbeq	r8, {r1, r2, r3}
    1394:	5001f300 	andpl	pc, r1, r0, lsl #6
    1398:	231e0076 	tstcs	lr, #118	; 0x76
    139c:	0e869f01 	cdpeq	15, 8, cr9, cr6, cr1, {0}
    13a0:	0e8c0800 	cdpeq	8, 8, cr0, cr12, cr0, {0}
    13a4:	00080800 	andeq	r0, r8, r0, lsl #16
    13a8:	00760075 	rsbseq	r0, r6, r5, ror r0
    13ac:	9f01231e 	svcls	0x0001231e
	...
    13b8:	08000e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp}
    13bc:	08000e82 	stmdaeq	r0, {r1, r7, r9, sl, fp}
    13c0:	9f300002 	svcls	0x00300002
    13c4:	08000e82 	stmdaeq	r0, {r1, r7, r9, sl, fp}
    13c8:	08000e86 	stmdaeq	r0, {r1, r2, r7, r9, sl, fp}
    13cc:	86540001 	ldrbhi	r0, [r4], -r1
    13d0:	9208000e 	andls	r0, r8, #14
    13d4:	0208000e 	andeq	r0, r8, #14
    13d8:	009f3000 	addseq	r3, pc, r0
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	44000000 	strmi	r0, [r0], #-0
    13e4:	8608000e 	strhi	r0, [r8], -lr
    13e8:	0208000e 	andeq	r0, r8, #14
    13ec:	009f3100 	addseq	r3, pc, r0, lsl #2
    13f0:	00000000 	andeq	r0, r0, r0
    13f4:	44000000 	strmi	r0, [r0], #-0
    13f8:	8608000e 	strhi	r0, [r8], -lr
    13fc:	0108000e 	tsteq	r8, lr
    1400:	00005400 	andeq	r5, r0, r0, lsl #8
    1404:	00000000 	andeq	r0, r0, r0
    1408:	0e940000 	cdpeq	0, 9, cr0, cr4, cr0, {0}
    140c:	0ea50800 	cdpeq	8, 10, cr0, cr5, cr0, {0}
    1410:	00010800 	andeq	r0, r1, r0, lsl #16
    1414:	000ea550 	andeq	sl, lr, r0, asr r5
    1418:	000ea808 	andeq	sl, lr, r8, lsl #16
    141c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1420:	08000ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp}
    1424:	08000eaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, fp}
    1428:	aa500001 	bge	1401434 <_Min_Stack_Size+0x1401034>
    142c:	0608000e 	streq	r0, [r8], -lr
    1430:	0108000f 	tsteq	r8, pc
    1434:	0f065500 	svceq	0x00065500
    1438:	0f090800 	svceq	0x00090800
    143c:	00010800 	andeq	r0, r1, r0, lsl #16
    1440:	000f0950 	andeq	r0, pc, r0, asr r9	; <UNPREDICTABLE>
    1444:	000f1808 	andeq	r1, pc, r8, lsl #16
    1448:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    1454:	08000e94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp}
    1458:	08000ea5 	stmdaeq	r0, {r0, r2, r5, r7, r9, sl, fp}
    145c:	a5510001 	ldrbge	r0, [r1, #-1]
    1460:	a808000e 	stmdage	r8, {r1, r2, r3}
    1464:	0108000e 	tsteq	r8, lr
    1468:	0ea85600 	cdpeq	6, 10, cr5, cr8, cr0, {0}
    146c:	0ead0800 	cdpeq	8, 10, cr0, cr13, cr0, {0}
    1470:	00010800 	andeq	r0, r1, r0, lsl #16
    1474:	000ead51 	andeq	sl, lr, r1, asr sp
    1478:	000f0608 	andeq	r0, pc, r8, lsl #12
    147c:	56000108 	strpl	r0, [r0], -r8, lsl #2
    1480:	08000f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp}
    1484:	08000f09 	stmdaeq	r0, {r0, r3, r8, r9, sl, fp}
    1488:	09510001 	ldmdbeq	r1, {r0}^
    148c:	1808000f 	stmdane	r8, {r0, r1, r2, r3}
    1490:	0108000f 	tsteq	r8, pc
    1494:	00005600 	andeq	r5, r0, r0, lsl #12
    1498:	00000000 	andeq	r0, r0, r0
    149c:	0ea80000 	cdpeq	0, 10, cr0, cr8, cr0, {0}
    14a0:	0f060800 	svceq	0x00060800
    14a4:	00020800 	andeq	r0, r2, r0, lsl #16
    14a8:	0f0c9f32 	svceq	0x000c9f32
    14ac:	0f180800 	svceq	0x00180800
    14b0:	00020800 	andeq	r0, r2, r0, lsl #16
    14b4:	00009f32 	andeq	r9, r0, r2, lsr pc
    14b8:	00000000 	andeq	r0, r0, r0
    14bc:	0ea80000 	cdpeq	0, 10, cr0, cr8, cr0, {0}
    14c0:	0f060800 	svceq	0x00060800
    14c4:	00020800 	andeq	r0, r2, r0, lsl #16
    14c8:	0f0c9f30 	svceq	0x000c9f30
    14cc:	0f180800 	svceq	0x00180800
    14d0:	00020800 	andeq	r0, r2, r0, lsl #16
    14d4:	00009f30 	andeq	r9, r0, r0, lsr pc
    14d8:	00000000 	andeq	r0, r0, r0
    14dc:	0ea80000 	cdpeq	0, 10, cr0, cr8, cr0, {0}
    14e0:	0eaa0800 	cdpeq	8, 10, cr0, cr10, cr0, {0}
    14e4:	00010800 	andeq	r0, r1, r0, lsl #16
    14e8:	000eaa50 	andeq	sl, lr, r0, asr sl
    14ec:	000f0608 	andeq	r0, pc, r8, lsl #12
    14f0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    14f4:	08000f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp}
    14f8:	08000f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp}
    14fc:	00550001 	subseq	r0, r5, r1
    1500:	00000000 	andeq	r0, r0, r0
    1504:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    1508:	b408000e 	strlt	r0, [r8], #-14
    150c:	0108000e 	tsteq	r8, lr
    1510:	0eb45000 	cdpeq	0, 11, cr5, cr4, cr0, {0}
    1514:	0f060800 	svceq	0x00060800
    1518:	00010800 	andeq	r0, r1, r0, lsl #16
    151c:	000f0c54 	andeq	r0, pc, r4, asr ip	; <UNPREDICTABLE>
    1520:	000f1808 	andeq	r1, pc, r8, lsl #16
    1524:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1530:	08000eb2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl, fp}
    1534:	08000f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp}
    1538:	9f310002 	svcls	0x00310002
    153c:	08000f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp}
    1540:	08000f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp}
    1544:	9f310002 	svcls	0x00310002
	...
    1550:	08000ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp}
    1554:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
    1558:	9f300002 	svcls	0x00300002
    155c:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
    1560:	08000f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp}
    1564:	0c540001 	mrrceq	0, 0, r0, r4, cr1
    1568:	1808000f 	stmdane	r8, {r0, r1, r2, r3}
    156c:	0208000f 	andeq	r0, r8, #15
    1570:	009f3000 	addseq	r3, pc, r0
    1574:	00000000 	andeq	r0, r0, r0
    1578:	c2000000 	andgt	r0, r0, #0
    157c:	0608000e 	streq	r0, [r8], -lr
    1580:	0208000f 	andeq	r0, r8, #15
    1584:	009f3100 	addseq	r3, pc, r0, lsl #2
    1588:	00000000 	andeq	r0, r0, r0
    158c:	c2000000 	andgt	r0, r0, #0
    1590:	0608000e 	streq	r0, [r8], -lr
    1594:	0108000f 	tsteq	r8, pc
    1598:	00005400 	andeq	r5, r0, r0, lsl #8
    159c:	00000000 	andeq	r0, r0, r0
    15a0:	0f180000 	svceq	0x00180000
    15a4:	0f390800 	svceq	0x00390800
    15a8:	00010800 	andeq	r0, r1, r0, lsl #16
    15ac:	000f3950 	andeq	r3, pc, r0, asr r9	; <UNPREDICTABLE>
    15b0:	000fe608 	andeq	lr, pc, r8, lsl #12
    15b4:	54000108 	strpl	r0, [r0], #-264	; 0x108
    15b8:	08000fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp}
    15bc:	08000fef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, r9, sl, fp}
    15c0:	ef500001 	svc	0x00500001
    15c4:	f608000f 			; <UNDEFINED> instruction: 0xf608000f
    15c8:	01080010 	tsteq	r8, r0, lsl r0
    15cc:	10f65400 	rscsne	r5, r6, r0, lsl #8
    15d0:	10f90800 	rscsne	r0, r9, r0, lsl #16
    15d4:	00010800 	andeq	r0, r1, r0, lsl #16
    15d8:	0010f950 	andseq	pc, r0, r0, asr r9	; <UNPREDICTABLE>
    15dc:	00117808 	andseq	r7, r1, r8, lsl #16
    15e0:	54000108 	strpl	r0, [r0], #-264	; 0x108
    15e4:	08001178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip}
    15e8:	08001183 	stmdaeq	r0, {r0, r1, r7, r8, ip}
    15ec:	83500001 	cmphi	r0, #1
    15f0:	98080011 	stmdals	r8, {r0, r4}
    15f4:	01080011 	tsteq	r8, r1, lsl r0
    15f8:	00005400 	andeq	r5, r0, r0, lsl #8
    15fc:	00000000 	andeq	r0, r0, r0
    1600:	0f180000 	svceq	0x00180000
    1604:	0f390800 	svceq	0x00390800
    1608:	00010800 	andeq	r0, r1, r0, lsl #16
    160c:	000f3951 	andeq	r3, pc, r1, asr r9	; <UNPREDICTABLE>
    1610:	000fe608 	andeq	lr, pc, r8, lsl #12
    1614:	59000108 	stmdbpl	r0, {r3, r8}
    1618:	08000fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp}
    161c:	08000fef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, r9, sl, fp}
    1620:	ef510001 	svc	0x00510001
    1624:	f608000f 			; <UNDEFINED> instruction: 0xf608000f
    1628:	01080010 	tsteq	r8, r0, lsl r0
    162c:	10f65900 	rscsne	r5, r6, r0, lsl #18
    1630:	10f90800 	rscsne	r0, r9, r0, lsl #16
    1634:	00010800 	andeq	r0, r1, r0, lsl #16
    1638:	0010f951 	andseq	pc, r0, r1, asr r9	; <UNPREDICTABLE>
    163c:	00117808 	andseq	r7, r1, r8, lsl #16
    1640:	59000108 	stmdbpl	r0, {r3, r8}
    1644:	08001178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip}
    1648:	08001183 	stmdaeq	r0, {r0, r1, r7, r8, ip}
    164c:	83510001 	cmphi	r1, #1
    1650:	98080011 	stmdals	r8, {r0, r4}
    1654:	01080011 	tsteq	r8, r1, lsl r0
    1658:	00005900 	andeq	r5, r0, r0, lsl #18
    165c:	00000000 	andeq	r0, r0, r0
    1660:	0f180000 	svceq	0x00180000
    1664:	0f390800 	svceq	0x00390800
    1668:	00010800 	andeq	r0, r1, r0, lsl #16
    166c:	000f3952 	andeq	r3, pc, r2, asr r9	; <UNPREDICTABLE>
    1670:	000fa008 	andeq	sl, pc, r8
    1674:	91000208 	tstls	r0, r8, lsl #4
    1678:	000fa04c 	andeq	sl, pc, ip, asr #32
    167c:	000fa308 	andeq	sl, pc, r8, lsl #6
    1680:	71000208 	tstvc	r0, r8, lsl #4
    1684:	000fa300 	andeq	sl, pc, r0, lsl #6
    1688:	000fe608 	andeq	lr, pc, r8, lsl #12
    168c:	91000208 	tstls	r0, r8, lsl #4
    1690:	000fe64c 	andeq	lr, pc, ip, asr #12
    1694:	000fef08 	andeq	lr, pc, r8, lsl #30
    1698:	52000108 	andpl	r0, r0, #8, 2
    169c:	08000fef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, r9, sl, fp}
    16a0:	080010f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, ip}
    16a4:	4c910002 	ldcmi	0, cr0, [r1], {2}
    16a8:	080010f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, ip}
    16ac:	080010f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, ip}
    16b0:	f9520001 			; <UNDEFINED> instruction: 0xf9520001
    16b4:	78080010 	stmdavc	r8, {r4}
    16b8:	02080011 	andeq	r0, r8, #17
    16bc:	784c9100 	stmdavc	ip, {r8, ip, pc}^
    16c0:	83080011 	movwhi	r0, #32785	; 0x8011
    16c4:	01080011 	tsteq	r8, r1, lsl r0
    16c8:	11835200 	orrne	r5, r3, r0, lsl #4
    16cc:	11980800 	orrsne	r0, r8, r0, lsl #16
    16d0:	00020800 	andeq	r0, r2, r0, lsl #16
    16d4:	00004c91 	muleq	r0, r1, ip
    16d8:	00000000 	andeq	r0, r0, r0
    16dc:	0f180000 	svceq	0x00180000
    16e0:	0f320800 	svceq	0x00320800
    16e4:	00010800 	andeq	r0, r1, r0, lsl #16
    16e8:	000f3253 	andeq	r3, pc, r3, asr r2	; <UNPREDICTABLE>
    16ec:	0010f608 	andseq	pc, r0, r8, lsl #12
    16f0:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    16f4:	080010f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, ip}
    16f8:	080010f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, ip}
    16fc:	f9530001 			; <UNDEFINED> instruction: 0xf9530001
    1700:	78080010 	stmdavc	r8, {r4}
    1704:	01080011 	tsteq	r8, r1, lsl r0
    1708:	11785700 	cmnne	r8, r0, lsl #14
    170c:	117a0800 	cmnne	sl, r0, lsl #16
    1710:	00010800 	andeq	r0, r1, r0, lsl #16
    1714:	00117a53 	andseq	r7, r1, r3, asr sl
    1718:	00119808 	andseq	r9, r1, r8, lsl #16
    171c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    1728:	08000f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp}
    172c:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
    1730:	9f300002 	svcls	0x00300002
    1734:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
    1738:	08000f62 	stmdaeq	r0, {r1, r5, r6, r8, r9, sl, fp}
    173c:	625a0001 	subsvs	r0, sl, #1
    1740:	7808000f 	stmdavc	r8, {r0, r1, r2, r3}
    1744:	0108000f 	tsteq	r8, pc
    1748:	0f785b00 	svceq	0x00785b00
    174c:	0fe60800 	svceq	0x00e60800
    1750:	00020800 	andeq	r0, r2, r0, lsl #16
    1754:	0fe69f31 	svceq	0x00e69f31
    1758:	0ff20800 	svceq	0x00f20800
    175c:	00020800 	andeq	r0, r2, r0, lsl #16
    1760:	0ff29f30 	svceq	0x00f29f30
    1764:	10440800 	subne	r0, r4, r0, lsl #16
    1768:	00020800 	andeq	r0, r2, r0, lsl #16
    176c:	10449f31 	subne	r9, r4, r1, lsr pc
    1770:	106c0800 	rsbne	r0, ip, r0, lsl #16
    1774:	00010800 	andeq	r0, r1, r0, lsl #16
    1778:	00106c5b 	andseq	r6, r0, fp, asr ip
    177c:	0010ee08 	andseq	lr, r0, r8, lsl #28
    1780:	31000208 	tstcc	r0, r8, lsl #4
    1784:	0010ee9f 	mulseq	r0, pc, lr	; <UNPREDICTABLE>
    1788:	0010f408 	andseq	pc, r0, r8, lsl #8
    178c:	5b000108 	blpl	1bb4 <_Min_Stack_Size+0x17b4>
    1790:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
    1794:	080010f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, ip}
    1798:	9f310002 	svcls	0x00310002
    179c:	080010f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, ip}
    17a0:	080010fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip}
    17a4:	9f300002 	svcls	0x00300002
    17a8:	080010fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip}
    17ac:	0800110e 	stmdaeq	r0, {r1, r2, r3, r8, ip}
    17b0:	9f310002 	svcls	0x00310002
    17b4:	0800110e 	stmdaeq	r0, {r1, r2, r3, r8, ip}
    17b8:	08001172 	stmdaeq	r0, {r1, r4, r5, r6, r8, ip}
    17bc:	725b0001 	subsvc	r0, fp, #1
    17c0:	86080011 			; <UNDEFINED> instruction: 0x86080011
    17c4:	02080011 	andeq	r0, r8, #17
    17c8:	869f3000 	ldrhi	r3, [pc], r0
    17cc:	98080011 	stmdals	r8, {r0, r4}
    17d0:	01080011 	tsteq	r8, r1, lsl r0
    17d4:	00005b00 	andeq	r5, r0, r0, lsl #22
    17d8:	00000000 	andeq	r0, r0, r0
    17dc:	10780000 	rsbsne	r0, r8, r0
    17e0:	10ee0800 	rscne	r0, lr, r0, lsl #16
    17e4:	00010800 	andeq	r0, r1, r0, lsl #16
    17e8:	00000054 	andeq	r0, r0, r4, asr r0
    17ec:	00000000 	andeq	r0, r0, r0
    17f0:	000faa00 	andeq	sl, pc, r0, lsl #20
    17f4:	000fe608 	andeq	lr, pc, r8, lsl #12
    17f8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    17fc:	08000ff2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, fp}
    1800:	08001046 	stmdaeq	r0, {r1, r2, r6, ip}
    1804:	6c540001 	mrrcvs	0, 0, r0, r4, cr1
    1808:	ee080010 	mcr	0, 0, r0, cr8, cr0, {0}
    180c:	01080010 	tsteq	r8, r0, lsl r0
    1810:	00005400 	andeq	r5, r0, r0, lsl #8
    1814:	00000000 	andeq	r0, r0, r0
    1818:	0fb60000 	svceq	0x00b60000
    181c:	0fe60800 	svceq	0x00e60800
    1820:	00020800 	andeq	r0, r2, r0, lsl #16
    1824:	0ff29f30 	svceq	0x00f29f30
    1828:	10360800 	eorsne	r0, r6, r0, lsl #16
    182c:	00020800 	andeq	r0, r2, r0, lsl #16
    1830:	106c9f30 	rsbne	r9, ip, r0, lsr pc
    1834:	10ee0800 	rscne	r0, lr, r0, lsl #16
    1838:	00020800 	andeq	r0, r2, r0, lsl #16
    183c:	00009f31 	andeq	r9, r0, r1, lsr pc
    1840:	00000000 	andeq	r0, r0, r0
    1844:	0fba0000 	svceq	0x00ba0000
    1848:	0fe60800 	svceq	0x00e60800
    184c:	00010800 	andeq	r0, r1, r0, lsl #16
    1850:	000ff254 	andeq	pc, pc, r4, asr r2	; <UNPREDICTABLE>
    1854:	00103608 	andseq	r3, r0, r8, lsl #12
    1858:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1864:	08001046 	stmdaeq	r0, {r1, r2, r6, ip}
    1868:	0800106c 	stmdaeq	r0, {r2, r3, r5, r6, ip}
    186c:	1c570001 	mrrcne	0, 0, r0, r7, cr1
    1870:	20080011 	andcs	r0, r8, r1, lsl r0
    1874:	02080011 	andeq	r0, r8, #17
    1878:	009f3200 	addseq	r3, pc, r0, lsl #4
    187c:	00000000 	andeq	r0, r0, r0
    1880:	46000000 	strmi	r0, [r0], -r0
    1884:	6c080010 	stcvs	0, cr0, [r8], {16}
    1888:	01080010 	tsteq	r8, r0, lsl r0
    188c:	111c5900 	tstne	ip, r0, lsl #18
    1890:	11720800 	cmnne	r2, r0, lsl #16
    1894:	00010800 	andeq	r0, r1, r0, lsl #16
    1898:	00118659 	andseq	r8, r1, r9, asr r6
    189c:	00119808 	andseq	r9, r1, r8, lsl #16
    18a0:	59000108 	stmdbpl	r0, {r3, r8}
	...
    18ac:	08001046 	stmdaeq	r0, {r1, r2, r6, ip}
    18b0:	0800106c 	stmdaeq	r0, {r2, r3, r5, r6, ip}
    18b4:	1c540001 	mrrcne	0, 0, r0, r4, cr1
    18b8:	72080011 	andvc	r0, r8, #17
    18bc:	01080011 	tsteq	r8, r1, lsl r0
    18c0:	11865400 	orrne	r5, r6, r0, lsl #8
    18c4:	11980800 	orrsne	r0, r8, r0, lsl #16
    18c8:	00010800 	andeq	r0, r1, r0, lsl #16
    18cc:	00000054 	andeq	r0, r0, r4, asr r0
    18d0:	00000000 	andeq	r0, r0, r0
    18d4:	00119800 	andseq	r9, r1, r0, lsl #16
    18d8:	00119e08 	andseq	r9, r1, r8, lsl #28
    18dc:	50000108 	andpl	r0, r0, r8, lsl #2
    18e0:	0800119e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, ip}
    18e4:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
    18e8:	01f30004 	mvnseq	r0, r4
    18ec:	00009f50 	andeq	r9, r0, r0, asr pc
    18f0:	00000000 	andeq	r0, r0, r0
    18f4:	11a20000 			; <UNDEFINED> instruction: 0x11a20000
    18f8:	11c60800 	bicne	r0, r6, r0, lsl #16
    18fc:	00010800 	andeq	r0, r1, r0, lsl #16
    1900:	0011c650 	andseq	ip, r1, r0, asr r6
    1904:	0011e208 	andseq	lr, r1, r8, lsl #4
    1908:	54000108 	strpl	r0, [r0], #-264	; 0x108
    190c:	080011e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, ip}
    1910:	080011e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, ip}
    1914:	e5500001 	ldrb	r0, [r0, #-1]
    1918:	e8080011 	stmda	r8, {r0, r4}
    191c:	01080011 	tsteq	r8, r1, lsl r0
    1920:	00005400 	andeq	r5, r0, r0, lsl #8
    1924:	00000000 	andeq	r0, r0, r0
    1928:	11e80000 	mvnne	r0, r0
    192c:	11f30800 	mvnsne	r0, r0, lsl #16
    1930:	00010800 	andeq	r0, r1, r0, lsl #16
    1934:	0011f350 	andseq	pc, r1, r0, asr r3	; <UNPREDICTABLE>
    1938:	0011fc08 	andseq	pc, r1, r8, lsl #24
    193c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1940:	080011fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip}
    1944:	080011ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, ip}
    1948:	ff500001 			; <UNDEFINED> instruction: 0xff500001
    194c:	1c080011 	stcne	0, cr0, [r8], {17}
    1950:	01080012 	tsteq	r8, r2, lsl r0
    1954:	00005400 	andeq	r5, r0, r0, lsl #8
    1958:	00000000 	andeq	r0, r0, r0
    195c:	120c0000 	andne	r0, ip, #0
    1960:	120e0800 	andne	r0, lr, #0, 16
    1964:	00010800 	andeq	r0, r1, r0, lsl #16
    1968:	00000050 	andeq	r0, r0, r0, asr r0
    196c:	00000000 	andeq	r0, r0, r0
    1970:	00121c00 	andseq	r1, r2, r0, lsl #24
    1974:	00123708 	andseq	r3, r2, r8, lsl #14
    1978:	50000108 	andpl	r0, r0, r8, lsl #2
    197c:	08001237 	stmdaeq	r0, {r0, r1, r2, r4, r5, r9, ip}
    1980:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
    1984:	48540001 	ldmdami	r4, {r0}^
    1988:	56080012 			; <UNDEFINED> instruction: 0x56080012
    198c:	04080012 	streq	r0, [r8], #-18
    1990:	5001f300 	andpl	pc, r1, r0, lsl #6
    1994:	0012569f 	mulseq	r2, pc, r6	; <UNPREDICTABLE>
    1998:	00125f08 	andseq	r5, r2, r8, lsl #30
    199c:	50000108 	andpl	r0, r0, r8, lsl #2
    19a0:	0800125f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r9, ip}
    19a4:	08001262 	stmdaeq	r0, {r1, r5, r6, r9, ip}
    19a8:	62540001 	subsvs	r0, r4, #1
    19ac:	8c080012 	stchi	0, cr0, [r8], {18}
    19b0:	04080012 	streq	r0, [r8], #-18
    19b4:	5001f300 	andpl	pc, r1, r0, lsl #6
    19b8:	00128c9f 	mulseq	r2, pc, ip	; <UNPREDICTABLE>
    19bc:	00128f08 	andseq	r8, r2, r8, lsl #30
    19c0:	50000108 	andpl	r0, r0, r8, lsl #2
    19c4:	0800128f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, ip}
    19c8:	08001292 	stmdaeq	r0, {r1, r4, r7, r9, ip}
    19cc:	92540001 	subsls	r0, r4, #1
    19d0:	c4080012 	strgt	r0, [r8], #-18
    19d4:	04080012 	streq	r0, [r8], #-18
    19d8:	5001f300 	andpl	pc, r1, r0, lsl #6
    19dc:	0012c49f 	mulseq	r2, pc, r4	; <UNPREDICTABLE>
    19e0:	0012c708 	andseq	ip, r2, r8, lsl #14
    19e4:	50000108 	andpl	r0, r0, r8, lsl #2
    19e8:	080012c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r9, ip}
    19ec:	080012d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, ip}
    19f0:	d6540001 	ldrble	r0, [r4], -r1
    19f4:	10080012 	andne	r0, r8, r2, lsl r0
    19f8:	04080013 	streq	r0, [r8], #-19
    19fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    1a00:	0013109f 	mulseq	r3, pc, r0	; <UNPREDICTABLE>
    1a04:	00131908 	andseq	r1, r3, r8, lsl #18
    1a08:	50000108 	andpl	r0, r0, r8, lsl #2
    1a0c:	08001319 	stmdaeq	r0, {r0, r3, r4, r8, r9, ip}
    1a10:	0800131c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip}
    1a14:	1c540001 	mrrcne	0, 0, r0, r4, cr1
    1a18:	40080013 	andmi	r0, r8, r3, lsl r0
    1a1c:	04080013 	streq	r0, [r8], #-19
    1a20:	5001f300 	andpl	pc, r1, r0, lsl #6
    1a24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a28:	00000000 	andeq	r0, r0, r0
    1a2c:	00121c00 	andseq	r1, r2, r0, lsl #24
    1a30:	00123708 	andseq	r3, r2, r8, lsl #14
    1a34:	51000108 	tstpl	r0, r8, lsl #2
    1a38:	08001237 	stmdaeq	r0, {r0, r1, r2, r4, r5, r9, ip}
    1a3c:	08001256 	stmdaeq	r0, {r1, r2, r4, r6, r9, ip}
    1a40:	56560001 	ldrbpl	r0, [r6], -r1
    1a44:	5f080012 	svcpl	0x00080012
    1a48:	01080012 	tsteq	r8, r2, lsl r0
    1a4c:	125f5100 	subsne	r5, pc, #0, 2
    1a50:	128c0800 	addne	r0, ip, #0, 16
    1a54:	00010800 	andeq	r0, r1, r0, lsl #16
    1a58:	00128c56 	andseq	r8, r2, r6, asr ip
    1a5c:	00128f08 	andseq	r8, r2, r8, lsl #30
    1a60:	51000108 	tstpl	r0, r8, lsl #2
    1a64:	0800128f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, ip}
    1a68:	080012c4 	stmdaeq	r0, {r2, r6, r7, r9, ip}
    1a6c:	c4560001 	ldrbgt	r0, [r6], #-1
    1a70:	c7080012 	smladgt	r8, r2, r0, r0
    1a74:	01080012 	tsteq	r8, r2, lsl r0
    1a78:	12c75100 	sbcne	r5, r7, #0, 2
    1a7c:	13100800 	tstne	r0, #0, 16
    1a80:	00010800 	andeq	r0, r1, r0, lsl #16
    1a84:	00131056 	andseq	r1, r3, r6, asr r0
    1a88:	00131908 	andseq	r1, r3, r8, lsl #18
    1a8c:	51000108 	tstpl	r0, r8, lsl #2
    1a90:	08001319 	stmdaeq	r0, {r0, r3, r4, r8, r9, ip}
    1a94:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
    1a98:	00560001 	subseq	r0, r6, r1
    1a9c:	00000000 	andeq	r0, r0, r0
    1aa0:	1c000000 	stcne	0, cr0, [r0], {-0}
    1aa4:	37080012 	smladcc	r8, r2, r0, r0
    1aa8:	01080012 	tsteq	r8, r2, lsl r0
    1aac:	12375200 	eorsne	r5, r7, #0, 4
    1ab0:	12560800 	subsne	r0, r6, #0, 16
    1ab4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ab8:	00125658 	andseq	r5, r2, r8, asr r6
    1abc:	00125f08 	andseq	r5, r2, r8, lsl #30
    1ac0:	52000108 	andpl	r0, r0, #8, 2
    1ac4:	0800125f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r9, ip}
    1ac8:	0800128c 	stmdaeq	r0, {r2, r3, r7, r9, ip}
    1acc:	8c580001 	mrrchi	0, 0, r0, r8, cr1
    1ad0:	8f080012 	svchi	0x00080012
    1ad4:	01080012 	tsteq	r8, r2, lsl r0
    1ad8:	128f5200 	addne	r5, pc, #0, 4
    1adc:	12c40800 	sbcne	r0, r4, #0, 16
    1ae0:	00010800 	andeq	r0, r1, r0, lsl #16
    1ae4:	0012c458 	andseq	ip, r2, r8, asr r4
    1ae8:	0012c708 	andseq	ip, r2, r8, lsl #14
    1aec:	52000108 	andpl	r0, r0, #8, 2
    1af0:	080012c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r9, ip}
    1af4:	08001310 	stmdaeq	r0, {r4, r8, r9, ip}
    1af8:	10580001 	subsne	r0, r8, r1
    1afc:	19080013 	stmdbne	r8, {r0, r1, r4}
    1b00:	01080013 	tsteq	r8, r3, lsl r0
    1b04:	13195200 	tstne	r9, #0, 4
    1b08:	13400800 	movtne	r0, #2048	; 0x800
    1b0c:	00010800 	andeq	r0, r1, r0, lsl #16
    1b10:	00000058 	andeq	r0, r0, r8, asr r0
    1b14:	00000000 	andeq	r0, r0, r0
    1b18:	00121c00 	andseq	r1, r2, r0, lsl #24
    1b1c:	00123008 	andseq	r3, r2, r8
    1b20:	53000108 	movwpl	r0, #264	; 0x108
    1b24:	08001230 	stmdaeq	r0, {r4, r5, r9, ip}
    1b28:	0800124a 	stmdaeq	r0, {r1, r3, r6, r9, ip}
    1b2c:	4a550001 	bmi	1541b38 <_Min_Stack_Size+0x1541738>
    1b30:	56080012 			; <UNDEFINED> instruction: 0x56080012
    1b34:	04080012 	streq	r0, [r8], #-18
    1b38:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1b3c:	0012569f 	mulseq	r2, pc, r6	; <UNPREDICTABLE>
    1b40:	00126808 	andseq	r6, r2, r8, lsl #16
    1b44:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1b48:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
    1b4c:	0800128c 	stmdaeq	r0, {r2, r3, r7, r9, ip}
    1b50:	01f30004 	mvnseq	r0, r4
    1b54:	128c9f53 	addne	r9, ip, #332	; 0x14c
    1b58:	128f0800 	addne	r0, pc, #0, 16
    1b5c:	00010800 	andeq	r0, r1, r0, lsl #16
    1b60:	00128f53 	andseq	r8, r2, r3, asr pc
    1b64:	0012b008 	andseq	fp, r2, r8
    1b68:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1b6c:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
    1b70:	080012c4 	stmdaeq	r0, {r2, r6, r7, r9, ip}
    1b74:	01f30004 	mvnseq	r0, r4
    1b78:	12c49f53 	sbcne	r9, r4, #332	; 0x14c
    1b7c:	13060800 	movwne	r0, #26624	; 0x6800
    1b80:	00010800 	andeq	r0, r1, r0, lsl #16
    1b84:	00130655 	andseq	r0, r3, r5, asr r6
    1b88:	00131008 	andseq	r1, r3, r8
    1b8c:	f3000408 	vshl.u8	d0, d8, d0
    1b90:	109f5301 	addsne	r5, pc, r1, lsl #6
    1b94:	12080013 	andne	r0, r8, #19
    1b98:	01080013 	tsteq	r8, r3, lsl r0
    1b9c:	13125300 	tstne	r2, #0, 6
    1ba0:	131c0800 	tstne	ip, #0, 16
    1ba4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ba8:	00131c55 	andseq	r1, r3, r5, asr ip
    1bac:	00134008 	andseq	r4, r3, r8
    1bb0:	f3000408 	vshl.u8	d0, d8, d0
    1bb4:	009f5301 	addseq	r5, pc, r1, lsl #6
    1bb8:	00000000 	andeq	r0, r0, r0
    1bbc:	4a000000 	bmi	1bc4 <_Min_Stack_Size+0x17c4>
    1bc0:	56080012 			; <UNDEFINED> instruction: 0x56080012
    1bc4:	01080012 	tsteq	r8, r2, lsl r0
    1bc8:	12825400 	addne	r5, r2, #0, 8
    1bcc:	128c0800 	addne	r0, ip, #0, 16
    1bd0:	00010800 	andeq	r0, r1, r0, lsl #16
    1bd4:	0012ba54 	andseq	fp, r2, r4, asr sl
    1bd8:	0012c408 	andseq	ip, r2, r8, lsl #8
    1bdc:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1be0:	08001336 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, ip}
    1be4:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
    1be8:	00540001 	subseq	r0, r4, r1
    1bec:	00000000 	andeq	r0, r0, r0
    1bf0:	44000000 	strmi	r0, [r0], #-0
    1bf4:	4a080012 	bmi	201c44 <_Min_Stack_Size+0x201844>
    1bf8:	01080012 	tsteq	r8, r2, lsl r0
    1bfc:	124a5000 	subne	r5, sl, #0
    1c00:	12560800 	subsne	r0, r6, #0, 16
    1c04:	00010800 	andeq	r0, r1, r0, lsl #16
    1c08:	00126257 	andseq	r6, r2, r7, asr r2
    1c0c:	00126c08 	andseq	r6, r2, r8, lsl #24
    1c10:	50000108 	andpl	r0, r0, r8, lsl #2
    1c14:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
    1c18:	0800128c 	stmdaeq	r0, {r2, r3, r7, r9, ip}
    1c1c:	92570001 	subsls	r0, r7, #1
    1c20:	98080012 	stmdals	r8, {r1, r4}
    1c24:	01080012 	tsteq	r8, r2, lsl r0
    1c28:	12985000 	addsne	r5, r8, #0
    1c2c:	12c40800 	sbcne	r0, r4, #0, 16
    1c30:	00010800 	andeq	r0, r1, r0, lsl #16
    1c34:	0012d257 	andseq	sp, r2, r7, asr r2
    1c38:	0012da08 	andseq	sp, r2, r8, lsl #20
    1c3c:	50000108 	andpl	r0, r0, r8, lsl #2
    1c40:	080012da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, ip}
    1c44:	08001306 	stmdaeq	r0, {r1, r2, r8, r9, ip}
    1c48:	06570001 	ldrbeq	r0, [r7], -r1
    1c4c:	08080013 	stmdaeq	r8, {r0, r1, r4}
    1c50:	01080013 	tsteq	r8, r3, lsl r0
    1c54:	13085000 	movwne	r5, #32768	; 0x8000
    1c58:	13100800 	tstne	r0, #0, 16
    1c5c:	00010800 	andeq	r0, r1, r0, lsl #16
    1c60:	00131c57 	andseq	r1, r3, r7, asr ip
    1c64:	00134008 	andseq	r4, r3, r8
    1c68:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    1c74:	08001262 	stmdaeq	r0, {r1, r5, r6, r9, ip}
    1c78:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
    1c7c:	68550001 	ldmdavs	r5, {r0}^
    1c80:	8c080012 	stchi	0, cr0, [r8], {18}
    1c84:	04080012 	streq	r0, [r8], #-18
    1c88:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1c8c:	0012929f 	mulseq	r2, pc, r2	; <UNPREDICTABLE>
    1c90:	0012b008 	andseq	fp, r2, r8
    1c94:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1c98:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
    1c9c:	080012c4 	stmdaeq	r0, {r2, r6, r7, r9, ip}
    1ca0:	01f30004 	mvnseq	r0, r4
    1ca4:	12d29f53 	sbcsne	r9, r2, #332	; 0x14c
    1ca8:	13060800 	movwne	r0, #26624	; 0x6800
    1cac:	00010800 	andeq	r0, r1, r0, lsl #16
    1cb0:	00130655 	andseq	r0, r3, r5, asr r6
    1cb4:	00131008 	andseq	r1, r3, r8
    1cb8:	f3000408 	vshl.u8	d0, d8, d0
    1cbc:	1c9f5301 	ldcne	3, cr5, [pc], {1}
    1cc0:	40080013 	andmi	r0, r8, r3, lsl r0
    1cc4:	04080013 	streq	r0, [r8], #-19
    1cc8:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1ccc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1cd0:	00000000 	andeq	r0, r0, r0
    1cd4:	00126200 	andseq	r6, r2, r0, lsl #4
    1cd8:	00128c08 	andseq	r8, r2, r8, lsl #24
    1cdc:	56000108 	strpl	r0, [r0], -r8, lsl #2
    1ce0:	08001292 	stmdaeq	r0, {r1, r4, r7, r9, ip}
    1ce4:	080012c4 	stmdaeq	r0, {r2, r6, r7, r9, ip}
    1ce8:	d2560001 	subsle	r0, r6, #1
    1cec:	10080012 	andne	r0, r8, r2, lsl r0
    1cf0:	01080013 	tsteq	r8, r3, lsl r0
    1cf4:	131c5600 	tstne	ip, #0, 12
    1cf8:	13400800 	movtne	r0, #2048	; 0x800
    1cfc:	00010800 	andeq	r0, r1, r0, lsl #16
    1d00:	00000056 	andeq	r0, r0, r6, asr r0
    1d04:	00000000 	andeq	r0, r0, r0
    1d08:	00126200 	andseq	r6, r2, r0, lsl #4
    1d0c:	00128208 	andseq	r8, r2, r8, lsl #4
    1d10:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1d14:	08001292 	stmdaeq	r0, {r1, r4, r7, r9, ip}
    1d18:	080012ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, ip}
    1d1c:	d2540001 	subsle	r0, r4, #1
    1d20:	10080012 	andne	r0, r8, r2, lsl r0
    1d24:	01080013 	tsteq	r8, r3, lsl r0
    1d28:	131c5400 	tstne	ip, #0, 8
    1d2c:	132a0800 	teqne	sl, #0, 16
    1d30:	00010800 	andeq	r0, r1, r0, lsl #16
    1d34:	00000054 	andeq	r0, r0, r4, asr r0
    1d38:	00000000 	andeq	r0, r0, r0
    1d3c:	00134000 	andseq	r4, r3, r0
    1d40:	00135d08 	andseq	r5, r3, r8, lsl #26
    1d44:	50000108 	andpl	r0, r0, r8, lsl #2
    1d48:	0800135d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, ip}
    1d4c:	0800150c 	stmdaeq	r0, {r2, r3, r8, sl, ip}
    1d50:	0c540001 	mrrceq	0, 0, r0, r4, cr1
    1d54:	0f080015 	svceq	0x00080015
    1d58:	01080015 	tsteq	r8, r5, lsl r0
    1d5c:	150f5000 	strne	r5, [pc, #-0]	; 1d64 <_Min_Stack_Size+0x1964>
    1d60:	15700800 	ldrbne	r0, [r0, #-2048]!	; 0x800
    1d64:	00010800 	andeq	r0, r1, r0, lsl #16
    1d68:	00157054 	andseq	r7, r5, r4, asr r0
    1d6c:	00157b08 	andseq	r7, r5, r8, lsl #22
    1d70:	50000108 	andpl	r0, r0, r8, lsl #2
    1d74:	0800157b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, sl, ip}
    1d78:	0800157e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip}
    1d7c:	00540001 	subseq	r0, r4, r1
    1d80:	00000000 	andeq	r0, r0, r0
    1d84:	40000000 	andmi	r0, r0, r0
    1d88:	5d080013 	stcpl	0, cr0, [r8, #-76]	; 0xffffffb4
    1d8c:	01080013 	tsteq	r8, r3, lsl r0
    1d90:	135d5100 	cmpne	sp, #0, 2
    1d94:	150c0800 	strne	r0, [ip, #-2048]	; 0x800
    1d98:	00010800 	andeq	r0, r1, r0, lsl #16
    1d9c:	00150c58 	andseq	r0, r5, r8, asr ip
    1da0:	00150f08 	andseq	r0, r5, r8, lsl #30
    1da4:	51000108 	tstpl	r0, r8, lsl #2
    1da8:	0800150f 	stmdaeq	r0, {r0, r1, r2, r3, r8, sl, ip}
    1dac:	08001570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip}
    1db0:	70580001 	subsvc	r0, r8, r1
    1db4:	7b080015 	blvc	201e10 <_Min_Stack_Size+0x201a10>
    1db8:	01080015 	tsteq	r8, r5, lsl r0
    1dbc:	157b5100 	ldrbne	r5, [fp, #-256]!	; 0x100
    1dc0:	157e0800 	ldrbne	r0, [lr, #-2048]!	; 0x800
    1dc4:	00010800 	andeq	r0, r1, r0, lsl #16
    1dc8:	00000058 	andeq	r0, r0, r8, asr r0
    1dcc:	00000000 	andeq	r0, r0, r0
    1dd0:	00134000 	andseq	r4, r3, r0
    1dd4:	00135d08 	andseq	r5, r3, r8, lsl #26
    1dd8:	52000108 	andpl	r0, r0, #8, 2
    1ddc:	0800135d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, ip}
    1de0:	080013bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip}
    1de4:	4c910002 	ldcmi	0, cr0, [r1], {2}
    1de8:	080013bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip}
    1dec:	080013bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip}
    1df0:	00710002 	rsbseq	r0, r1, r2
    1df4:	080013bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip}
    1df8:	0800150c 	stmdaeq	r0, {r2, r3, r8, sl, ip}
    1dfc:	4c910002 	ldcmi	0, cr0, [r1], {2}
    1e00:	0800150c 	stmdaeq	r0, {r2, r3, r8, sl, ip}
    1e04:	0800150f 	stmdaeq	r0, {r0, r1, r2, r3, r8, sl, ip}
    1e08:	0f520001 	svceq	0x00520001
    1e0c:	70080015 	andvc	r0, r8, r5, lsl r0
    1e10:	02080015 	andeq	r0, r8, #21
    1e14:	704c9100 	subvc	r9, ip, r0, lsl #2
    1e18:	7b080015 	blvc	201e74 <_Min_Stack_Size+0x201a74>
    1e1c:	01080015 	tsteq	r8, r5, lsl r0
    1e20:	157b5200 	ldrbne	r5, [fp, #-512]!	; 0x200
    1e24:	157e0800 	ldrbne	r0, [lr, #-2048]!	; 0x800
    1e28:	00020800 	andeq	r0, r2, r0, lsl #16
    1e2c:	00004c91 	muleq	r0, r1, ip
    1e30:	00000000 	andeq	r0, r0, r0
    1e34:	13400000 	movtne	r0, #0
    1e38:	135a0800 	cmpne	sl, #0, 16
    1e3c:	00010800 	andeq	r0, r1, r0, lsl #16
    1e40:	00135a53 	andseq	r5, r3, r3, asr sl
    1e44:	00150c08 	andseq	r0, r5, r8, lsl #24
    1e48:	5a000108 	bpl	2270 <_Min_Stack_Size+0x1e70>
    1e4c:	0800150c 	stmdaeq	r0, {r2, r3, r8, sl, ip}
    1e50:	0800150f 	stmdaeq	r0, {r0, r1, r2, r3, r8, sl, ip}
    1e54:	0f530001 	svceq	0x00530001
    1e58:	70080015 	andvc	r0, r8, r5, lsl r0
    1e5c:	01080015 	tsteq	r8, r5, lsl r0
    1e60:	15705a00 	ldrbne	r5, [r0, #-2560]!	; 0xa00
    1e64:	15720800 	ldrbne	r0, [r2, #-2048]!	; 0x800
    1e68:	00010800 	andeq	r0, r1, r0, lsl #16
    1e6c:	00157253 	andseq	r7, r5, r3, asr r2
    1e70:	00157e08 	andseq	r7, r5, r8, lsl #28
    1e74:	5a000108 	bpl	229c <_Min_Stack_Size+0x1e9c>
	...
    1e80:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
    1e84:	08001372 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, ip}
    1e88:	9f300002 	svcls	0x00300002
    1e8c:	08001372 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, ip}
    1e90:	08001394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip}
    1e94:	945b0001 	ldrbls	r0, [fp], #-1
    1e98:	60080013 	andvs	r0, r8, r3, lsl r0
    1e9c:	02080014 	andeq	r0, r8, #20
    1ea0:	609f3100 	addsvs	r3, pc, r0, lsl #2
    1ea4:	96080014 			; <UNDEFINED> instruction: 0x96080014
    1ea8:	01080014 	tsteq	r8, r4, lsl r0
    1eac:	14965b00 	ldrne	r5, [r6], #2816	; 0xb00
    1eb0:	15040800 	strne	r0, [r4, #-2048]	; 0x800
    1eb4:	00020800 	andeq	r0, r2, r0, lsl #16
    1eb8:	15049f31 	strne	r9, [r4, #-3889]	; 0xf31
    1ebc:	150a0800 	strne	r0, [sl, #-2048]	; 0x800
    1ec0:	00010800 	andeq	r0, r1, r0, lsl #16
    1ec4:	00150a5b 	andseq	r0, r5, fp, asr sl
    1ec8:	00150c08 	andseq	r0, r5, r8, lsl #24
    1ecc:	31000208 	tstcc	r0, r8, lsl #4
    1ed0:	00150c9f 	mulseq	r5, pc, ip	; <UNPREDICTABLE>
    1ed4:	00151208 	andseq	r1, r5, r8, lsl #4
    1ed8:	30000208 	andcc	r0, r0, r8, lsl #4
    1edc:	0015129f 	mulseq	r5, pc, r2	; <UNPREDICTABLE>
    1ee0:	00153408 	andseq	r3, r5, r8, lsl #8
    1ee4:	31000208 	tstcc	r0, r8, lsl #4
    1ee8:	0015349f 	mulseq	r5, pc, r4	; <UNPREDICTABLE>
    1eec:	00156a08 	andseq	r6, r5, r8, lsl #20
    1ef0:	5b000108 	blpl	2318 <_Min_Stack_Size+0x1f18>
    1ef4:	0800156a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, ip}
    1ef8:	0800157e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip}
    1efc:	9f300002 	svcls	0x00300002
	...
    1f08:	0800146a 	stmdaeq	r0, {r1, r3, r5, r6, sl, ip}
    1f0c:	08001496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip}
    1f10:	42550001 	subsmi	r0, r5, #1
    1f14:	6a080015 	bvs	201f70 <_Min_Stack_Size+0x201b70>
    1f18:	01080015 	tsteq	r8, r5, lsl r0
    1f1c:	00005500 	andeq	r5, r0, r0, lsl #10
    1f20:	00000000 	andeq	r0, r0, r0
    1f24:	13e40000 	mvnne	r0, #0
    1f28:	14560800 	ldrbne	r0, [r6], #-2048	; 0x800
    1f2c:	00010800 	andeq	r0, r1, r0, lsl #16
    1f30:	00000054 	andeq	r0, r0, r4, asr r0
    1f34:	00000000 	andeq	r0, r0, r0
    1f38:	0013c600 	andseq	ip, r3, r0, lsl #12
    1f3c:	00146408 	andseq	r6, r4, r8, lsl #8
    1f40:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1f44:	08001496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip}
    1f48:	08001504 	stmdaeq	r0, {r2, r8, sl, ip}
    1f4c:	12540001 	subsne	r0, r4, #1
    1f50:	22080015 	andcs	r0, r8, #21
    1f54:	01080015 	tsteq	r8, r5, lsl r0
    1f58:	00005400 	andeq	r5, r0, r0, lsl #8
    1f5c:	00000000 	andeq	r0, r0, r0
    1f60:	13d00000 	bicsne	r0, r0, #0
    1f64:	14560800 	ldrbne	r0, [r6], #-2048	; 0x800
    1f68:	00020800 	andeq	r0, r2, r0, lsl #16
    1f6c:	14969f31 	ldrne	r9, [r6], #3889	; 0xf31
    1f70:	15040800 	strne	r0, [r4, #-2048]	; 0x800
    1f74:	00020800 	andeq	r0, r2, r0, lsl #16
    1f78:	15129f30 	ldrne	r9, [r2, #-3888]	; 0xf30
    1f7c:	15220800 	strne	r0, [r2, #-2048]!	; 0x800
    1f80:	00020800 	andeq	r0, r2, r0, lsl #16
    1f84:	00009f31 	andeq	r9, r0, r1, lsr pc
    1f88:	00000000 	andeq	r0, r0, r0
    1f8c:	149a0000 	ldrne	r0, [sl], #0
    1f90:	15040800 	strne	r0, [r4, #-2048]	; 0x800
    1f94:	00010800 	andeq	r0, r1, r0, lsl #16
    1f98:	00000054 	andeq	r0, r0, r4, asr r0
    1f9c:	00000000 	andeq	r0, r0, r0
    1fa0:	00158000 	andseq	r8, r5, r0
    1fa4:	00158d08 	andseq	r8, r5, r8, lsl #26
    1fa8:	50000108 	andpl	r0, r0, r8, lsl #2
    1fac:	0800158d 	stmdaeq	r0, {r0, r2, r3, r7, r8, sl, ip}
    1fb0:	080015aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sl, ip}
    1fb4:	aa540001 	bge	1501fc0 <_Min_Stack_Size+0x1501bc0>
    1fb8:	ad080015 	stcge	0, cr0, [r8, #-84]	; 0xffffffac
    1fbc:	01080015 	tsteq	r8, r5, lsl r0
    1fc0:	15ad5000 	strne	r5, [sp, #0]!
    1fc4:	15ba0800 	ldrne	r0, [sl, #2048]!	; 0x800
    1fc8:	00010800 	andeq	r0, r1, r0, lsl #16
    1fcc:	00000054 	andeq	r0, r0, r4, asr r0
    1fd0:	00000000 	andeq	r0, r0, r0
    1fd4:	00158000 	andseq	r8, r5, r0
    1fd8:	00158d08 	andseq	r8, r5, r8, lsl #26
    1fdc:	51000108 	tstpl	r0, r8, lsl #2
    1fe0:	0800158d 	stmdaeq	r0, {r0, r2, r3, r7, r8, sl, ip}
    1fe4:	080015aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sl, ip}
    1fe8:	aa550001 	bge	1541ff4 <_Min_Stack_Size+0x1541bf4>
    1fec:	ad080015 	stcge	0, cr0, [r8, #-84]	; 0xffffffac
    1ff0:	01080015 	tsteq	r8, r5, lsl r0
    1ff4:	15ad5100 	strne	r5, [sp, #256]!	; 0x100
    1ff8:	15ba0800 	ldrne	r0, [sl, #2048]!	; 0x800
    1ffc:	00010800 	andeq	r0, r1, r0, lsl #16
    2000:	00000055 	andeq	r0, r0, r5, asr r0
    2004:	00000000 	andeq	r0, r0, r0
    2008:	00159e00 	andseq	r9, r5, r0, lsl #28
    200c:	0015aa08 	andseq	sl, r5, r8, lsl #20
    2010:	50000108 	andpl	r0, r0, r8, lsl #2
    2014:	080015b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, ip}
    2018:	080015ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, ip}
    201c:	9f310002 	svcls	0x00310002
	...
    2028:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
    202c:	080015cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, sl, ip}
    2030:	cb500001 	blgt	140203c <_Min_Stack_Size+0x1401c3c>
    2034:	d8080015 	stmdale	r8, {r0, r2, r4}
    2038:	01080015 	tsteq	r8, r5, lsl r0
    203c:	15d85400 	ldrbne	r5, [r8, #1024]	; 0x400
    2040:	15e20800 	strbne	r0, [r2, #2048]!	; 0x800
    2044:	00040800 	andeq	r0, r4, r0, lsl #16
    2048:	9f5001f3 	svcls	0x005001f3
    204c:	080015e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, ip}
    2050:	080015e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, ip}
    2054:	e5500001 	ldrb	r0, [r0, #-1]
    2058:	06080015 			; <UNDEFINED> instruction: 0x06080015
    205c:	01080016 	tsteq	r8, r6, lsl r0
    2060:	16065400 	strne	r5, [r6], -r0, lsl #8
    2064:	160e0800 	strne	r0, [lr], -r0, lsl #16
    2068:	00040800 	andeq	r0, r4, r0, lsl #16
    206c:	9f5001f3 	svcls	0x005001f3
    2070:	0800160e 	stmdaeq	r0, {r1, r2, r3, r9, sl, ip}
    2074:	08001617 	stmdaeq	r0, {r0, r1, r2, r4, r9, sl, ip}
    2078:	17500001 	ldrbne	r0, [r0, -r1]
    207c:	32080016 	andcc	r0, r8, #22
    2080:	01080016 	tsteq	r8, r6, lsl r0
    2084:	16325400 	ldrtne	r5, [r2], -r0, lsl #8
    2088:	163e0800 	ldrtne	r0, [lr], -r0, lsl #16
    208c:	00040800 	andeq	r0, r4, r0, lsl #16
    2090:	9f5001f3 	svcls	0x005001f3
	...
    209c:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
    20a0:	080015cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, sl, ip}
    20a4:	cb510001 	blgt	14420b0 <_Min_Stack_Size+0x1441cb0>
    20a8:	e2080015 	and	r0, r8, #21
    20ac:	01080015 	tsteq	r8, r5, lsl r0
    20b0:	15e25600 	strbne	r5, [r2, #1536]!	; 0x600
    20b4:	15e50800 	strbne	r0, [r5, #2048]!	; 0x800
    20b8:	00010800 	andeq	r0, r1, r0, lsl #16
    20bc:	0015e551 	andseq	lr, r5, r1, asr r5
    20c0:	00160e08 	andseq	r0, r6, r8, lsl #28
    20c4:	56000108 	strpl	r0, [r0], -r8, lsl #2
    20c8:	0800160e 	stmdaeq	r0, {r1, r2, r3, r9, sl, ip}
    20cc:	08001617 	stmdaeq	r0, {r0, r1, r2, r4, r9, sl, ip}
    20d0:	17510001 	ldrbne	r0, [r1, -r1]
    20d4:	3e080016 	mcrcc	0, 0, r0, cr8, cr6, {0}
    20d8:	01080016 	tsteq	r8, r6, lsl r0
    20dc:	00005600 	andeq	r5, r0, r0, lsl #12
    20e0:	00000000 	andeq	r0, r0, r0
    20e4:	15bc0000 	ldrne	r0, [ip, #0]!
    20e8:	15cb0800 	strbne	r0, [fp, #2048]	; 0x800
    20ec:	00010800 	andeq	r0, r1, r0, lsl #16
    20f0:	0015cb52 	andseq	ip, r5, r2, asr fp
    20f4:	0015e208 	andseq	lr, r5, r8, lsl #4
    20f8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    20fc:	080015e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, ip}
    2100:	080015e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, ip}
    2104:	e5520001 	ldrb	r0, [r2, #-1]
    2108:	0e080015 	mcreq	0, 0, r0, cr8, cr5, {0}
    210c:	01080016 	tsteq	r8, r6, lsl r0
    2110:	160e5500 	strne	r5, [lr], -r0, lsl #10
    2114:	16170800 	ldrne	r0, [r7], -r0, lsl #16
    2118:	00010800 	andeq	r0, r1, r0, lsl #16
    211c:	00161752 	andseq	r1, r6, r2, asr r7
    2120:	00163e08 	andseq	r3, r6, r8, lsl #28
    2124:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    2130:	080015d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip}
    2134:	080015dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, ip}
    2138:	dd530001 	ldclle	0, cr0, [r3, #-4]
    213c:	e2080015 	and	r0, r8, #21
    2140:	01080015 	tsteq	r8, r5, lsl r0
    2144:	16065400 	strne	r5, [r6], -r0, lsl #8
    2148:	160e0800 	strne	r0, [lr], -r0, lsl #16
    214c:	00010800 	andeq	r0, r1, r0, lsl #16
    2150:	00163654 	andseq	r3, r6, r4, asr r6
    2154:	00163e08 	andseq	r3, r6, r8, lsl #28
    2158:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    2164:	080015d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip}
    2168:	080015dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, ip}
    216c:	dd500001 	ldclle	0, cr0, [r0, #-4]
    2170:	e2080015 	and	r0, r8, #21
    2174:	01080015 	tsteq	r8, r5, lsl r0
    2178:	15e85700 	strbne	r5, [r8, #1792]!	; 0x700
    217c:	15ec0800 	strbne	r0, [ip, #2048]!	; 0x800
    2180:	00010800 	andeq	r0, r1, r0, lsl #16
    2184:	0015ec50 	andseq	lr, r5, r0, asr ip
    2188:	00160e08 	andseq	r0, r6, r8, lsl #28
    218c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    2190:	0800161a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip}
    2194:	0800163e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl, ip}
    2198:	00570001 	subseq	r0, r7, r1
    219c:	00000000 	andeq	r0, r0, r0
    21a0:	40000000 	andmi	r0, r0, r0
    21a4:	4f080016 	svcmi	0x00080016
    21a8:	01080016 	tsteq	r8, r6, lsl r0
    21ac:	164f5000 	strbne	r5, [pc], -r0
    21b0:	16660800 	strbtne	r0, [r6], -r0, lsl #16
    21b4:	00010800 	andeq	r0, r1, r0, lsl #16
    21b8:	00166654 	andseq	r6, r6, r4, asr r6
    21bc:	00166908 	andseq	r6, r6, r8, lsl #18
    21c0:	50000108 	andpl	r0, r0, r8, lsl #2
    21c4:	08001669 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, ip}
    21c8:	08001686 	stmdaeq	r0, {r1, r2, r7, r9, sl, ip}
    21cc:	86540001 	ldrbhi	r0, [r4], -r1
    21d0:	8f080016 	svchi	0x00080016
    21d4:	01080016 	tsteq	r8, r6, lsl r0
    21d8:	168f5000 	strne	r5, [pc], r0
    21dc:	16920800 	ldrne	r0, [r2], r0, lsl #16
    21e0:	00010800 	andeq	r0, r1, r0, lsl #16
    21e4:	00000054 	andeq	r0, r0, r4, asr r0
    21e8:	00000000 	andeq	r0, r0, r0
    21ec:	00164000 	andseq	r4, r6, r0
    21f0:	00164f08 	andseq	r4, r6, r8, lsl #30
    21f4:	51000108 	tstpl	r0, r8, lsl #2
    21f8:	0800164f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r9, sl, ip}
    21fc:	08001666 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, ip}
    2200:	66560001 	ldrbvs	r0, [r6], -r1
    2204:	69080016 	stmdbvs	r8, {r1, r2, r4}
    2208:	01080016 	tsteq	r8, r6, lsl r0
    220c:	16695100 	strbtne	r5, [r9], -r0, lsl #2
    2210:	16860800 	strne	r0, [r6], r0, lsl #16
    2214:	00010800 	andeq	r0, r1, r0, lsl #16
    2218:	00168656 	andseq	r8, r6, r6, asr r6
    221c:	00168f08 	andseq	r8, r6, r8, lsl #30
    2220:	51000108 	tstpl	r0, r8, lsl #2
    2224:	0800168f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, ip}
    2228:	08001692 	stmdaeq	r0, {r1, r4, r7, r9, sl, ip}
    222c:	00560001 	subseq	r0, r6, r1
    2230:	00000000 	andeq	r0, r0, r0
    2234:	5a000000 	bpl	223c <_Min_Stack_Size+0x1e3c>
    2238:	66080016 			; <UNDEFINED> instruction: 0x66080016
    223c:	01080016 	tsteq	r8, r6, lsl r0
    2240:	167c5500 	ldrbtne	r5, [ip], -r0, lsl #10
    2244:	16860800 	strne	r0, [r6], r0, lsl #16
    2248:	00010800 	andeq	r0, r1, r0, lsl #16
    224c:	00000055 	andeq	r0, r0, r5, asr r0
    2250:	00000000 	andeq	r0, r0, r0
    2254:	00165800 	andseq	r5, r6, r0, lsl #16
    2258:	00165f08 	andseq	r5, r6, r8, lsl #30
    225c:	50000108 	andpl	r0, r0, r8, lsl #2
    2260:	0800165f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r9, sl, ip}
    2264:	08001666 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, ip}
    2268:	6c580001 	mrrcvs	0, 0, r0, r8, cr1
    226c:	72080016 	andvc	r0, r8, #22
    2270:	01080016 	tsteq	r8, r6, lsl r0
    2274:	16725000 	ldrbtne	r5, [r2], -r0
    2278:	16860800 	strne	r0, [r6], r0, lsl #16
    227c:	00010800 	andeq	r0, r1, r0, lsl #16
    2280:	00000058 	andeq	r0, r0, r8, asr r0
    2284:	00000000 	andeq	r0, r0, r0
    2288:	00166e00 	andseq	r6, r6, r0, lsl #28
    228c:	00168608 	andseq	r8, r6, r8, lsl #12
    2290:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    229c:	08001694 	stmdaeq	r0, {r2, r4, r7, r9, sl, ip}
    22a0:	0800169d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, ip}
    22a4:	9d500001 	ldclls	0, cr0, [r0, #-4]
    22a8:	a0080016 	andge	r0, r8, r6, lsl r0
    22ac:	01080016 	tsteq	r8, r6, lsl r0
    22b0:	16a05400 	strtne	r5, [r0], r0, lsl #8
    22b4:	16a80800 	strtne	r0, [r8], r0, lsl #16
    22b8:	00040800 	andeq	r0, r4, r0, lsl #16
    22bc:	9f5001f3 	svcls	0x005001f3
    22c0:	080016a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip}
    22c4:	080016ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r9, sl, ip}
    22c8:	ab500001 	blge	14022d4 <_Min_Stack_Size+0x1401ed4>
    22cc:	ae080016 	mcrge	0, 0, r0, cr8, cr6, {0}
    22d0:	01080016 	tsteq	r8, r6, lsl r0
    22d4:	00005400 	andeq	r5, r0, r0, lsl #8
    22d8:	00000000 	andeq	r0, r0, r0
    22dc:	16a00000 	strtne	r0, [r0], r0
    22e0:	16a80800 	strtne	r0, [r8], r0, lsl #16
    22e4:	00010800 	andeq	r0, r1, r0, lsl #16
    22e8:	00000054 	andeq	r0, r0, r4, asr r0
    22ec:	00000000 	andeq	r0, r0, r0
    22f0:	0016b000 	andseq	fp, r6, r0
    22f4:	0016b908 	andseq	fp, r6, r8, lsl #18
    22f8:	50000108 	andpl	r0, r0, r8, lsl #2
    22fc:	080016b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, ip}
    2300:	080016be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip}
    2304:	be540001 	cdplt	0, 5, cr0, cr4, cr1, {0}
    2308:	c8080016 	stmdagt	r8, {r1, r2, r4}
    230c:	04080016 	streq	r0, [r8], #-22
    2310:	5001f300 	andpl	pc, r1, r0, lsl #6
    2314:	0016c89f 	mulseq	r6, pc, r8	; <UNPREDICTABLE>
    2318:	0016cb08 	andseq	ip, r6, r8, lsl #22
    231c:	50000108 	andpl	r0, r0, r8, lsl #2
    2320:	080016cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r9, sl, ip}
    2324:	080016ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, ip}
    2328:	00540001 	subseq	r0, r4, r1
    232c:	00000000 	andeq	r0, r0, r0
    2330:	c0000000 	andgt	r0, r0, r0
    2334:	c8080016 	stmdagt	r8, {r1, r2, r4}
    2338:	01080016 	tsteq	r8, r6, lsl r0
    233c:	00005400 	andeq	r5, r0, r0, lsl #8
    2340:	00000000 	andeq	r0, r0, r0
    2344:	16d00000 	ldrbne	r0, [r0], r0
    2348:	16d60800 	ldrbne	r0, [r6], r0, lsl #16
    234c:	00010800 	andeq	r0, r1, r0, lsl #16
    2350:	0016d650 	andseq	sp, r6, r0, asr r6
    2354:	0016d808 	andseq	sp, r6, r8, lsl #16
    2358:	f3000408 	vshl.u8	d0, d8, d0
    235c:	d89f5001 	ldmle	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    2360:	db080016 	blle	2023c0 <_Min_Stack_Size+0x201fc0>
    2364:	01080016 	tsteq	r8, r6, lsl r0
    2368:	16db5000 	ldrbne	r5, [fp], r0
    236c:	16de0800 	ldrbne	r0, [lr], r0, lsl #16
    2370:	00040800 	andeq	r0, r4, r0, lsl #16
    2374:	9f5001f3 	svcls	0x005001f3
	...
    2380:	080016d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, ip}
    2384:	080016d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip}
    2388:	00500001 	subseq	r0, r0, r1
    238c:	00000000 	andeq	r0, r0, r0
    2390:	e0000000 	and	r0, r0, r0
    2394:	24080016 	strcs	r0, [r8], #-22
    2398:	01080017 	tsteq	r8, r7, lsl r0
    239c:	17245000 	strne	r5, [r4, -r0]!
    23a0:	17300800 	ldrne	r0, [r0, -r0, lsl #16]!
    23a4:	00010800 	andeq	r0, r1, r0, lsl #16
    23a8:	00173054 	andseq	r3, r7, r4, asr r0
    23ac:	00173308 	andseq	r3, r7, r8, lsl #6
    23b0:	50000108 	andpl	r0, r0, r8, lsl #2
    23b4:	08001733 	stmdaeq	r0, {r0, r1, r4, r5, r8, r9, sl, ip}
    23b8:	08001734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, ip}
    23bc:	01f30004 	mvnseq	r0, r4
    23c0:	17349f50 			; <UNDEFINED> instruction: 0x17349f50
    23c4:	174b0800 	strbne	r0, [fp, -r0, lsl #16]
    23c8:	00010800 	andeq	r0, r1, r0, lsl #16
    23cc:	00174b50 	andseq	r4, r7, r0, asr fp
    23d0:	00174e08 	andseq	r4, r7, r8, lsl #28
    23d4:	54000108 	strpl	r0, [r0], #-264	; 0x108
    23d8:	0800174e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, ip}
    23dc:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
    23e0:	00500001 	subseq	r0, r0, r1
    23e4:	00000000 	andeq	r0, r0, r0
    23e8:	e6000000 	str	r0, [r0], -r0
    23ec:	f4080016 	vst4.8	{d0-d3}, [r8 :64], r6
    23f0:	02080016 	andeq	r0, r8, #22
    23f4:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
    23f8:	fa080016 	blx	202458 <_Min_Stack_Size+0x202058>
    23fc:	02080016 	andeq	r0, r8, #22
    2400:	fa9f3100 	blx	fe7ce808 <_estack+0xde79e808>
    2404:	00080016 	andeq	r0, r8, r6, lsl r0
    2408:	02080017 	andeq	r0, r8, #23
    240c:	009f3200 	addseq	r3, pc, r0, lsl #4
    2410:	06080017 			; <UNDEFINED> instruction: 0x06080017
    2414:	02080017 	andeq	r0, r8, #23
    2418:	069f3300 	ldreq	r3, [pc], r0, lsl #6
    241c:	0c080017 	stceq	0, cr0, [r8], {23}
    2420:	02080017 	andeq	r0, r8, #23
    2424:	0c9f3400 	cfldrseq	mvf3, [pc], {0}
    2428:	12080017 	andne	r0, r8, #23
    242c:	02080017 	andeq	r0, r8, #23
    2430:	129f3500 	addsne	r3, pc, #0, 10
    2434:	18080017 	stmdane	r8, {r0, r1, r2, r4}
    2438:	02080017 	andeq	r0, r8, #23
    243c:	189f3600 	ldmne	pc, {r9, sl, ip, sp}	; <UNPREDICTABLE>
    2440:	22080017 	andcs	r0, r8, #23
    2444:	02080017 	andeq	r0, r8, #23
    2448:	349f3700 	ldrcc	r3, [pc], #1792	; 2450 <_Min_Stack_Size+0x2050>
    244c:	36080017 			; <UNDEFINED> instruction: 0x36080017
    2450:	02080017 	andeq	r0, r8, #23
    2454:	3e9f3600 	cdpcc	6, 9, cr3, cr15, cr0, {0}
    2458:	48080017 	stmdami	r8, {r0, r1, r2, r4}
    245c:	02080017 	andeq	r0, r8, #23
    2460:	4e9f3300 	cdpmi	3, 9, cr3, cr15, cr0, {0}
    2464:	58080017 	stmdapl	r8, {r0, r1, r2, r4}
    2468:	02080017 	andeq	r0, r8, #23
    246c:	589f3000 	ldmpl	pc, {ip, sp}	; <UNPREDICTABLE>
    2470:	62080017 	andvs	r0, r8, #23
    2474:	02080017 	andeq	r0, r8, #23
    2478:	629f3100 	addsvs	r3, pc, #0, 2
    247c:	6c080017 	stcvs	0, cr0, [r8], {23}
    2480:	02080017 	andeq	r0, r8, #23
    2484:	6c9f3200 	lfmvs	f3, 4, [pc], {0}
    2488:	70080017 	andvc	r0, r8, r7, lsl r0
    248c:	02080017 	andeq	r0, r8, #23
    2490:	709f3500 	addsvc	r3, pc, r0, lsl #10
    2494:	74080017 	strvc	r0, [r8], #-23
    2498:	02080017 	andeq	r0, r8, #23
    249c:	009f3400 	addseq	r3, pc, r0, lsl #8
    24a0:	00000000 	andeq	r0, r0, r0
    24a4:	74000000 	strvc	r0, [r0], #-0
    24a8:	76080017 			; <UNDEFINED> instruction: 0x76080017
    24ac:	01080017 	tsteq	r8, r7, lsl r0
    24b0:	17765000 	ldrbne	r5, [r6, -r0]!
    24b4:	17780800 	ldrbne	r0, [r8, -r0, lsl #16]!
    24b8:	00040800 	andeq	r0, r4, r0, lsl #16
    24bc:	9f5001f3 	svcls	0x005001f3
	...
    24c8:	0800177c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip}
    24cc:	08001780 	stmdaeq	r0, {r7, r8, r9, sl, ip}
    24d0:	80500001 	subshi	r0, r0, r1
    24d4:	82080017 	andhi	r0, r8, #23
    24d8:	04080017 	streq	r0, [r8], #-23
    24dc:	5001f300 	andpl	pc, r1, r0, lsl #6
    24e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    24e4:	00000000 	andeq	r0, r0, r0
    24e8:	00178400 	andseq	r8, r7, r0, lsl #8
    24ec:	00178a08 	andseq	r8, r7, r8, lsl #20
    24f0:	50000108 	andpl	r0, r0, r8, lsl #2
    24f4:	0800178a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, ip}
    24f8:	08001794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip}
    24fc:	01f30004 	mvnseq	r0, r4
    2500:	17949f50 			; <UNDEFINED> instruction: 0x17949f50
    2504:	17970800 	ldrne	r0, [r7, r0, lsl #16]
    2508:	00010800 	andeq	r0, r1, r0, lsl #16
    250c:	00179750 	andseq	r9, r7, r0, asr r7
    2510:	00179a08 	andseq	r9, r7, r8, lsl #20
    2514:	f3000408 	vshl.u8	d0, d8, d0
    2518:	009f5001 	addseq	r5, pc, r1
    251c:	00000000 	andeq	r0, r0, r0
    2520:	8a000000 	bhi	2528 <_Min_Stack_Size+0x2128>
    2524:	8e080017 	mcrhi	0, 0, r0, cr8, cr7, {0}
    2528:	08080017 	stmdaeq	r8, {r0, r1, r2, r4}
    252c:	30007000 	andcc	r7, r0, r0
    2530:	1aff0829 	bne	fffc45dc <_estack+0xdff945dc>
    2534:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2538:	00000000 	andeq	r0, r0, r0
    253c:	00179c00 	andseq	r9, r7, r0, lsl #24
    2540:	0017a408 	andseq	sl, r7, r8, lsl #8
    2544:	50000108 	andpl	r0, r0, r8, lsl #2
    2548:	080017a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, ip}
    254c:	080017ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, ip}
    2550:	01f30004 	mvnseq	r0, r4
    2554:	17ac9f50 	sbfxne	r9, r0, #30, #13
    2558:	17af0800 	strne	r0, [pc, r0, lsl #16]!
    255c:	00010800 	andeq	r0, r1, r0, lsl #16
    2560:	0017af50 	andseq	sl, r7, r0, asr pc
    2564:	0017b208 	andseq	fp, r7, r8, lsl #4
    2568:	f3000408 	vshl.u8	d0, d8, d0
    256c:	009f5001 	addseq	r5, pc, r1
    2570:	00000000 	andeq	r0, r0, r0
    2574:	a2000000 	andge	r0, r0, #0
    2578:	a4080017 	strge	r0, [r8], #-23
    257c:	0a080017 	beq	2025e0 <_Min_Stack_Size+0x2021e0>
    2580:	70007200 	andvc	r7, r0, r0, lsl #4
    2584:	0829063c 	stmdaeq	r9!, {r2, r3, r4, r5, r9, sl}
    2588:	a49f1aff 	ldrge	r1, [pc], #2815	; 2590 <_Min_Stack_Size+0x2190>
    258c:	a8080017 	stmdage	r8, {r0, r1, r2, r4}
    2590:	09080017 	stmdbeq	r8, {r0, r1, r2, r4}
    2594:	70007200 	andvc	r7, r0, r0, lsl #4
    2598:	ff082900 			; <UNDEFINED> instruction: 0xff082900
    259c:	17a89f1a 			; <UNDEFINED> instruction: 0x17a89f1a
    25a0:	17ac0800 	strne	r0, [ip, r0, lsl #16]!
    25a4:	000d0800 	andeq	r0, sp, r0, lsl #16
    25a8:	01f30072 	mvnseq	r0, r2, ror r0
    25ac:	063c2350 			; <UNDEFINED> instruction: 0x063c2350
    25b0:	1aff0829 	bne	fffc465c <_estack+0xdff9465c>
    25b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    25b8:	00000000 	andeq	r0, r0, r0
    25bc:	0017b400 	andseq	fp, r7, r0, lsl #8
    25c0:	0017c208 	andseq	ip, r7, r8, lsl #4
    25c4:	30000208 	andcc	r0, r0, r8, lsl #4
    25c8:	0017c29f 	mulseq	r7, pc, r2	; <UNPREDICTABLE>
    25cc:	0017c608 	andseq	ip, r7, r8, lsl #12
    25d0:	31000208 	tstcc	r0, r8, lsl #4
    25d4:	0017c69f 	mulseq	r7, pc, r6	; <UNPREDICTABLE>
    25d8:	0017ca08 	andseq	ip, r7, r8, lsl #20
    25dc:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    25e0:	0017ca9f 	mulseq	r7, pc, sl	; <UNPREDICTABLE>
    25e4:	0017ce08 	andseq	ip, r7, r8, lsl #28
    25e8:	33000208 	movwcc	r0, #520	; 0x208
    25ec:	0017ce9f 	mulseq	r7, pc, lr	; <UNPREDICTABLE>
    25f0:	0017d208 	andseq	sp, r7, r8, lsl #4
    25f4:	34000208 	strcc	r0, [r0], #-520	; 0x208
    25f8:	0017d29f 	mulseq	r7, pc, r2	; <UNPREDICTABLE>
    25fc:	0017d608 	andseq	sp, r7, r8, lsl #12
    2600:	35000208 	strcc	r0, [r0, #-520]	; 0x208
    2604:	0017d69f 	mulseq	r7, pc, r6	; <UNPREDICTABLE>
    2608:	0017da08 	andseq	sp, r7, r8, lsl #20
    260c:	36000208 	strcc	r0, [r0], -r8, lsl #4
    2610:	0017da9f 	mulseq	r7, pc, sl	; <UNPREDICTABLE>
    2614:	0017e408 	andseq	lr, r7, r8, lsl #8
    2618:	37000208 	strcc	r0, [r0, -r8, lsl #4]
    261c:	0017e49f 	mulseq	r7, pc, r4	; <UNPREDICTABLE>
    2620:	0017e608 	andseq	lr, r7, r8, lsl #12
    2624:	36000208 	strcc	r0, [r0], -r8, lsl #4
    2628:	0017f69f 	mulseq	r7, pc, r6	; <UNPREDICTABLE>
    262c:	0017fa08 	andseq	pc, r7, r8, lsl #20
    2630:	31000208 	tstcc	r0, r8, lsl #4
    2634:	0017fa9f 	mulseq	r7, pc, sl	; <UNPREDICTABLE>
    2638:	0017fe08 	andseq	pc, r7, r8, lsl #28
    263c:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    2640:	0017fe9f 	mulseq	r7, pc, lr	; <UNPREDICTABLE>
    2644:	00180208 	andseq	r0, r8, r8, lsl #4
    2648:	33000208 	movwcc	r0, #520	; 0x208
    264c:	0018029f 	mulseq	r8, pc, r2	; <UNPREDICTABLE>
    2650:	00180608 	andseq	r0, r8, r8, lsl #12
    2654:	34000208 	strcc	r0, [r0], #-520	; 0x208
    2658:	0018069f 	mulseq	r8, pc, r6	; <UNPREDICTABLE>
    265c:	00180a08 	andseq	r0, r8, r8, lsl #20
    2660:	35000208 	strcc	r0, [r0, #-520]	; 0x208
    2664:	00180a9f 	mulseq	r8, pc, sl	; <UNPREDICTABLE>
    2668:	00180e08 	andseq	r0, r8, r8, lsl #28
    266c:	37000208 	strcc	r0, [r0, -r8, lsl #4]
    2670:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2674:	00000000 	andeq	r0, r0, r0
    2678:	00181000 	andseq	r1, r8, r0
    267c:	00181e08 	andseq	r1, r8, r8, lsl #28
    2680:	30000208 	andcc	r0, r0, r8, lsl #4
    2684:	00181e9f 	mulseq	r8, pc, lr	; <UNPREDICTABLE>
    2688:	00182408 	andseq	r2, r8, r8, lsl #8
    268c:	31000208 	tstcc	r0, r8, lsl #4
    2690:	0018249f 	mulseq	r8, pc, r4	; <UNPREDICTABLE>
    2694:	00182a08 	andseq	r2, r8, r8, lsl #20
    2698:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    269c:	00182a9f 	mulseq	r8, pc, sl	; <UNPREDICTABLE>
    26a0:	00183008 	andseq	r3, r8, r8
    26a4:	33000208 	movwcc	r0, #520	; 0x208
    26a8:	0018309f 	mulseq	r8, pc, r0	; <UNPREDICTABLE>
    26ac:	00183608 	andseq	r3, r8, r8, lsl #12
    26b0:	34000208 	strcc	r0, [r0], #-520	; 0x208
    26b4:	0018369f 	mulseq	r8, pc, r6	; <UNPREDICTABLE>
    26b8:	00183c08 	andseq	r3, r8, r8, lsl #24
    26bc:	35000208 	strcc	r0, [r0, #-520]	; 0x208
    26c0:	00183c9f 	mulseq	r8, pc, ip	; <UNPREDICTABLE>
    26c4:	00184208 	andseq	r4, r8, r8, lsl #4
    26c8:	36000208 	strcc	r0, [r0], -r8, lsl #4
    26cc:	0018429f 	mulseq	r8, pc, r2	; <UNPREDICTABLE>
    26d0:	00184e08 	andseq	r4, r8, r8, lsl #28
    26d4:	37000208 	strcc	r0, [r0, -r8, lsl #4]
    26d8:	00184e9f 	mulseq	r8, pc, lr	; <UNPREDICTABLE>
    26dc:	00185008 	andseq	r5, r8, r8
    26e0:	36000208 	strcc	r0, [r0], -r8, lsl #4
    26e4:	0018589f 	mulseq	r8, pc, r8	; <UNPREDICTABLE>
    26e8:	00185c08 	andseq	r5, r8, r8, lsl #24
    26ec:	30000208 	andcc	r0, r0, r8, lsl #4
    26f0:	00185c9f 	mulseq	r8, pc, ip	; <UNPREDICTABLE>
    26f4:	00186008 	andseq	r6, r8, r8
    26f8:	31000208 	tstcc	r0, r8, lsl #4
    26fc:	0018609f 	mulseq	r8, pc, r0	; <UNPREDICTABLE>
    2700:	00186408 	andseq	r6, r8, r8, lsl #8
    2704:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    2708:	0018649f 	mulseq	r8, pc, r4	; <UNPREDICTABLE>
    270c:	00186808 	andseq	r6, r8, r8, lsl #16
    2710:	33000208 	movwcc	r0, #520	; 0x208
    2714:	0018689f 	mulseq	r8, pc, r8	; <UNPREDICTABLE>
    2718:	00186c08 	andseq	r6, r8, r8, lsl #24
    271c:	34000208 	strcc	r0, [r0], #-520	; 0x208
    2720:	00186c9f 	mulseq	r8, pc, ip	; <UNPREDICTABLE>
    2724:	00187008 	andseq	r7, r8, r8
    2728:	35000208 	strcc	r0, [r0, #-520]	; 0x208
    272c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2730:	00000000 	andeq	r0, r0, r0
    2734:	00187000 	andseq	r7, r8, r0
    2738:	00187908 	andseq	r7, r8, r8, lsl #18
    273c:	50000108 	andpl	r0, r0, r8, lsl #2
    2740:	08001879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, ip}
    2744:	0800191c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip}
    2748:	1c540001 	mrrcne	0, 0, r0, r4, cr1
    274c:	20080019 	andcs	r0, r8, r9, lsl r0
    2750:	04080019 	streq	r0, [r8], #-25
    2754:	5001f300 	andpl	pc, r1, r0, lsl #6
    2758:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    275c:	00000000 	andeq	r0, r0, r0
    2760:	00187000 	andseq	r7, r8, r0
    2764:	00187908 	andseq	r7, r8, r8, lsl #18
    2768:	51000108 	tstpl	r0, r8, lsl #2
    276c:	08001879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, ip}
    2770:	080018b2 	stmdaeq	r0, {r1, r4, r5, r7, fp, ip}
    2774:	b2550001 	subslt	r0, r5, #1
    2778:	20080018 	andcs	r0, r8, r8, lsl r0
    277c:	04080019 	streq	r0, [r8], #-25
    2780:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2784:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2788:	00000000 	andeq	r0, r0, r0
    278c:	00187400 	andseq	r7, r8, r0, lsl #8
    2790:	00187908 	andseq	r7, r8, r8, lsl #18
    2794:	50000108 	andpl	r0, r0, r8, lsl #2
    2798:	08001879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, ip}
    279c:	0800191c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip}
    27a0:	1c540001 	mrrcne	0, 0, r0, r4, cr1
    27a4:	20080019 	andcs	r0, r8, r9, lsl r0
    27a8:	04080019 	streq	r0, [r8], #-25
    27ac:	5001f300 	andpl	pc, r1, r0, lsl #6
    27b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    27b4:	00000000 	andeq	r0, r0, r0
    27b8:	0018a000 	andseq	sl, r8, r0
    27bc:	00191c08 	andseq	r1, r9, r8, lsl #24
    27c0:	54000108 	strpl	r0, [r0], #-264	; 0x108
    27c4:	0800191c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip}
    27c8:	08001920 	stmdaeq	r0, {r5, r8, fp, ip}
    27cc:	01f30004 	mvnseq	r0, r4
    27d0:	00009f50 	andeq	r9, r0, r0, asr pc
    27d4:	00000000 	andeq	r0, r0, r0
    27d8:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
    27dc:	192c0800 	stmdbne	ip!, {fp}
    27e0:	00020800 	andeq	r0, r2, r0, lsl #16
    27e4:	00009f30 	andeq	r9, r0, r0, lsr pc
    27e8:	00000000 	andeq	r0, r0, r0
    27ec:	19900000 	ldmibne	r0, {}	; <UNPREDICTABLE>
    27f0:	19af0800 	stmibne	pc!, {fp}	; <UNPREDICTABLE>
    27f4:	00010800 	andeq	r0, r1, r0, lsl #16
    27f8:	0019af50 	andseq	sl, r9, r0, asr pc
    27fc:	0019b208 	andseq	fp, r9, r8, lsl #4
    2800:	56000108 	strpl	r0, [r0], -r8, lsl #2
    2804:	080019b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, fp, ip}
    2808:	080019b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip}
    280c:	b4500001 	ldrblt	r0, [r0], #-1
    2810:	8e080019 	mcrhi	0, 0, r0, cr8, cr9, {0}
    2814:	0108001a 	tsteq	r8, sl, lsl r0
    2818:	1a8e5600 	bne	fe398020 <_estack+0xde368020>
    281c:	1b040800 	blne	104824 <_Min_Stack_Size+0x104424>
    2820:	00040800 	andeq	r0, r4, r0, lsl #16
    2824:	9f5001f3 	svcls	0x005001f3
    2828:	08001b04 	stmdaeq	r0, {r2, r8, r9, fp, ip}
    282c:	08001b07 	stmdaeq	r0, {r0, r1, r2, r8, r9, fp, ip}
    2830:	07500001 	ldrbeq	r0, [r0, -r1]
    2834:	0a08001b 	beq	2028a8 <_Min_Stack_Size+0x2024a8>
    2838:	0108001b 	tsteq	r8, fp, lsl r0
    283c:	1b0a5600 	blne	298044 <_Min_Stack_Size+0x297c44>
    2840:	1b2a0800 	blne	a84848 <_Min_Stack_Size+0xa84448>
    2844:	00040800 	andeq	r0, r4, r0, lsl #16
    2848:	9f5001f3 	svcls	0x005001f3
    284c:	08001b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip}
    2850:	08001b4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, fp, ip}
    2854:	00560001 	subseq	r0, r6, r1
    2858:	00000000 	andeq	r0, r0, r0
    285c:	90000000 	andls	r0, r0, r0
    2860:	af080019 	svcge	0x00080019
    2864:	01080019 	tsteq	r8, r9, lsl r0
    2868:	19af5100 	stmibne	pc!, {r8, ip, lr}	; <UNPREDICTABLE>
    286c:	19b20800 	ldmibne	r2!, {fp}
    2870:	00010800 	andeq	r0, r1, r0, lsl #16
    2874:	0019b255 	andseq	fp, r9, r5, asr r2
    2878:	0019b708 	andseq	fp, r9, r8, lsl #14
    287c:	51000108 	tstpl	r0, r8, lsl #2
    2880:	080019b7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r8, fp, ip}
    2884:	08001aa2 	stmdaeq	r0, {r1, r5, r7, r9, fp, ip}
    2888:	a2550001 	subsge	r0, r5, #1
    288c:	0408001a 	streq	r0, [r8], #-26
    2890:	0408001b 	streq	r0, [r8], #-27
    2894:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2898:	001b049f 	mulseq	fp, pc, r4	; <UNPREDICTABLE>
    289c:	001b0708 	andseq	r0, fp, r8, lsl #14
    28a0:	51000108 	tstpl	r0, r8, lsl #2
    28a4:	08001b07 	stmdaeq	r0, {r0, r1, r2, r8, r9, fp, ip}
    28a8:	08001b0a 	stmdaeq	r0, {r1, r3, r8, r9, fp, ip}
    28ac:	0a550001 	beq	15428b8 <_Min_Stack_Size+0x15424b8>
    28b0:	1408001b 	strne	r0, [r8], #-27
    28b4:	0408001b 	streq	r0, [r8], #-27
    28b8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    28bc:	001b149f 	mulseq	fp, pc, r4	; <UNPREDICTABLE>
    28c0:	001b1e08 	andseq	r1, fp, r8, lsl #28
    28c4:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    28c8:	08001b1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, fp, ip}
    28cc:	08001b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip}
    28d0:	01f30004 	mvnseq	r0, r4
    28d4:	1b2a9f51 	blne	aaa620 <_Min_Stack_Size+0xaaa220>
    28d8:	1b4a0800 	blne	12848e0 <_Min_Stack_Size+0x12844e0>
    28dc:	00010800 	andeq	r0, r1, r0, lsl #16
    28e0:	00000055 	andeq	r0, r0, r5, asr r0
    28e4:	00000000 	andeq	r0, r0, r0
    28e8:	00199000 	andseq	r9, r9, r0
    28ec:	0019af08 	andseq	sl, r9, r8, lsl #30
    28f0:	52000108 	andpl	r0, r0, #8, 2
    28f4:	080019af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r8, fp, ip}
    28f8:	080019b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, fp, ip}
    28fc:	01f30004 	mvnseq	r0, r4
    2900:	19b29f52 	ldmibne	r2!, {r1, r4, r6, r8, r9, sl, fp, ip, pc}
    2904:	19b70800 	ldmibne	r7!, {fp}
    2908:	00010800 	andeq	r0, r1, r0, lsl #16
    290c:	0019b752 	andseq	fp, r9, r2, asr r7
    2910:	001b0408 	andseq	r0, fp, r8, lsl #8
    2914:	f3000408 	vshl.u8	d0, d8, d0
    2918:	049f5201 	ldreq	r5, [pc], #513	; 2920 <_Min_Stack_Size+0x2520>
    291c:	0708001b 	smladeq	r8, fp, r0, r0
    2920:	0108001b 	tsteq	r8, fp, lsl r0
    2924:	1b075200 	blne	1d712c <_Min_Stack_Size+0x1d6d2c>
    2928:	1b4a0800 	blne	1284930 <_Min_Stack_Size+0x1284530>
    292c:	00040800 	andeq	r0, r4, r0, lsl #16
    2930:	9f5201f3 	svcls	0x005201f3
	...
    293c:	08001990 	stmdaeq	r0, {r4, r7, r8, fp, ip}
    2940:	080019af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r8, fp, ip}
    2944:	af530001 	svcge	0x00530001
    2948:	b2080019 	andlt	r0, r8, #25
    294c:	01080019 	tsteq	r8, r9, lsl r0
    2950:	19b25a00 	ldmibne	r2!, {r9, fp, ip, lr}
    2954:	19b70800 	ldmibne	r7!, {fp}
    2958:	00010800 	andeq	r0, r1, r0, lsl #16
    295c:	0019b753 	andseq	fp, r9, r3, asr r7
    2960:	001b0408 	andseq	r0, fp, r8, lsl #8
    2964:	5a000108 	bpl	2d8c <_Min_Stack_Size+0x298c>
    2968:	08001b04 	stmdaeq	r0, {r2, r8, r9, fp, ip}
    296c:	08001b07 	stmdaeq	r0, {r0, r1, r2, r8, r9, fp, ip}
    2970:	07530001 	ldrbeq	r0, [r3, -r1]
    2974:	4a08001b 	bmi	2029e8 <_Min_Stack_Size+0x2025e8>
    2978:	0108001b 	tsteq	r8, fp, lsl r0
    297c:	00005a00 	andeq	r5, r0, r0, lsl #20
    2980:	00000000 	andeq	r0, r0, r0
    2984:	19900000 	ldmibne	r0, {}	; <UNPREDICTABLE>
    2988:	19960800 	ldmibne	r6, {fp}
    298c:	00020800 	andeq	r0, r2, r0, lsl #16
    2990:	19960091 	ldmibne	r6, {r0, r4, r7}
    2994:	19a20800 	stmibne	r2!, {fp}
    2998:	00020800 	andeq	r0, r2, r0, lsl #16
    299c:	19a20077 	stmibne	r2!, {r0, r1, r2, r4, r5, r6}
    29a0:	1b4a0800 	blne	12849a8 <_Min_Stack_Size+0x12845a8>
    29a4:	00020800 	andeq	r0, r2, r0, lsl #16
    29a8:	0000287d 	andeq	r2, r0, sp, ror r8
    29ac:	00000000 	andeq	r0, r0, r0
    29b0:	19900000 	ldmibne	r0, {}	; <UNPREDICTABLE>
    29b4:	19960800 	ldmibne	r6, {fp}
    29b8:	00020800 	andeq	r0, r2, r0, lsl #16
    29bc:	19960491 	ldmibne	r6, {r0, r4, r7, sl}
    29c0:	19a20800 	stmibne	r2!, {fp}
    29c4:	00020800 	andeq	r0, r2, r0, lsl #16
    29c8:	19a20477 	stmibne	r2!, {r0, r1, r2, r4, r5, r6, sl}
    29cc:	1b4a0800 	blne	12849d4 <_Min_Stack_Size+0x12845d4>
    29d0:	00020800 	andeq	r0, r2, r0, lsl #16
    29d4:	00002c7d 	andeq	r2, r0, sp, ror ip
    29d8:	00000000 	andeq	r0, r0, r0
    29dc:	19900000 	ldmibne	r0, {}	; <UNPREDICTABLE>
    29e0:	19960800 	ldmibne	r6, {fp}
    29e4:	00020800 	andeq	r0, r2, r0, lsl #16
    29e8:	19960891 	ldmibne	r6, {r0, r4, r7, fp}
    29ec:	19a20800 	stmibne	r2!, {fp}
    29f0:	00020800 	andeq	r0, r2, r0, lsl #16
    29f4:	19a20877 	stmibne	r2!, {r0, r1, r2, r4, r5, r6, fp}
    29f8:	1b4a0800 	blne	1284a00 <_Min_Stack_Size+0x1284600>
    29fc:	00020800 	andeq	r0, r2, r0, lsl #16
    2a00:	0000307d 	andeq	r3, r0, sp, ror r0
    2a04:	00000000 	andeq	r0, r0, r0
    2a08:	19900000 	ldmibne	r0, {}	; <UNPREDICTABLE>
    2a0c:	19960800 	ldmibne	r6, {fp}
    2a10:	00020800 	andeq	r0, r2, r0, lsl #16
    2a14:	19960c91 	ldmibne	r6, {r0, r4, r7, sl, fp}
    2a18:	19a20800 	stmibne	r2!, {fp}
    2a1c:	00020800 	andeq	r0, r2, r0, lsl #16
    2a20:	19a20c77 	stmibne	r2!, {r0, r1, r2, r4, r5, r6, sl, fp}
    2a24:	1b4a0800 	blne	1284a2c <_Min_Stack_Size+0x128462c>
    2a28:	00020800 	andeq	r0, r2, r0, lsl #16
    2a2c:	0000347d 	andeq	r3, r0, sp, ror r4
    2a30:	00000000 	andeq	r0, r0, r0
    2a34:	1aee0000 	bne	ffb82a3c <_estack+0xdfb52a3c>
    2a38:	1b040800 	blne	104a40 <_Min_Stack_Size+0x104640>
    2a3c:	00020800 	andeq	r0, r2, r0, lsl #16
    2a40:	1b0a9f31 	blne	2aa70c <_Min_Stack_Size+0x2aa30c>
    2a44:	1b140800 	blne	504a4c <_Min_Stack_Size+0x50464c>
    2a48:	00020800 	andeq	r0, r2, r0, lsl #16
    2a4c:	1b429f31 	blne	10aa718 <_Min_Stack_Size+0x10aa318>
    2a50:	1b4a0800 	blne	1284a58 <_Min_Stack_Size+0x1284658>
    2a54:	00030800 	andeq	r0, r3, r0, lsl #16
    2a58:	009fff09 	addseq	pc, pc, r9, lsl #30
    2a5c:	00000000 	andeq	r0, r0, r0
    2a60:	b2000000 	andlt	r0, r0, #0
    2a64:	d2080019 	andle	r0, r8, #25
    2a68:	01080019 	tsteq	r8, r9, lsl r0
    2a6c:	19d25b00 	ldmibne	r2, {r8, r9, fp, ip, lr}^
    2a70:	1b040800 	blne	104a78 <_Min_Stack_Size+0x104678>
    2a74:	00020800 	andeq	r0, r2, r0, lsl #16
    2a78:	1b0a307d 	blne	28ec74 <_Min_Stack_Size+0x28e874>
    2a7c:	1b2a0800 	blne	a84a84 <_Min_Stack_Size+0xa84684>
    2a80:	00020800 	andeq	r0, r2, r0, lsl #16
    2a84:	1b2a307d 	blne	a8ec80 <_Min_Stack_Size+0xa8e880>
    2a88:	1b2e0800 	blne	b84a90 <_Min_Stack_Size+0xb84690>
    2a8c:	00010800 	andeq	r0, r1, r0, lsl #16
    2a90:	001b2e5b 	andseq	r2, fp, fp, asr lr
    2a94:	001b4a08 	andseq	r4, fp, r8, lsl #20
    2a98:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
    2a9c:	00000030 	andeq	r0, r0, r0, lsr r0
    2aa0:	00000000 	andeq	r0, r0, r0
    2aa4:	0019b200 	andseq	fp, r9, r0, lsl #4
    2aa8:	0019b708 	andseq	fp, r9, r8, lsl #14
    2aac:	52000108 	andpl	r0, r0, #8, 2
    2ab0:	080019b7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r8, fp, ip}
    2ab4:	080019ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, fp, ip}
    2ab8:	ea580001 	b	1602ac4 <_Min_Stack_Size+0x16026c4>
    2abc:	48080019 	stmdami	r8, {r0, r3, r4}
    2ac0:	0308001a 	movweq	r0, #32794	; 0x801a
    2ac4:	9f017800 	svcls	0x00017800
    2ac8:	08001b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip}
    2acc:	08001b4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, fp, ip}
    2ad0:	00580001 	subseq	r0, r8, r1
    2ad4:	00000000 	andeq	r0, r0, r0
    2ad8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    2adc:	ce080019 	mcrgt	0, 0, r0, cr8, cr9, {0}
    2ae0:	01080019 	tsteq	r8, r9, lsl r0
    2ae4:	19ce5000 	stmibne	lr, {ip, lr}^
    2ae8:	1b040800 	blne	104af0 <_Min_Stack_Size+0x1046f0>
    2aec:	00010800 	andeq	r0, r1, r0, lsl #16
    2af0:	001b0a54 	andseq	r0, fp, r4, asr sl
    2af4:	001b2a08 	andseq	r2, fp, r8, lsl #20
    2af8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    2afc:	08001b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip}
    2b00:	08001b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip}
    2b04:	30500001 	subscc	r0, r0, r1
    2b08:	4208001b 	andmi	r0, r8, #27
    2b0c:	0108001b 	tsteq	r8, fp, lsl r0
    2b10:	1b425400 	blne	1097b18 <_Min_Stack_Size+0x1097718>
    2b14:	1b4a0800 	blne	1284b1c <_Min_Stack_Size+0x128471c>
    2b18:	00020800 	andeq	r0, r2, r0, lsl #16
    2b1c:	00009f30 	andeq	r9, r0, r0, lsr pc
    2b20:	00000000 	andeq	r0, r0, r0
    2b24:	19da0000 	ldmibne	sl, {}^	; <UNPREDICTABLE>
    2b28:	19e60800 	stmibne	r6!, {fp}^
    2b2c:	000d0800 	andeq	r0, sp, r0, lsl #16
    2b30:	ffffff78 			; <UNDEFINED> instruction: 0xffffff78
    2b34:	243203ff 	ldrtcs	r0, [r2], #-1023	; 0x3ff
    2b38:	22063074 	andcs	r3, r6, #116	; 0x74
    2b3c:	0019e69f 	mulseq	r9, pc, r6	; <UNPREDICTABLE>
    2b40:	0019ea08 	andseq	lr, r9, r8, lsl #20
    2b44:	78000908 	stmdavc	r0, {r3, r8, fp}
    2b48:	7424327f 	strtvc	r3, [r4], #-639	; 0x27f
    2b4c:	9f220630 	svcls	0x00220630
    2b50:	080019ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, fp, ip}
    2b54:	080019f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip}
    2b58:	00780009 	rsbseq	r0, r8, r9
    2b5c:	30742432 	rsbscc	r2, r4, r2, lsr r4
    2b60:	f49f2206 			; <UNDEFINED> instruction: 0xf49f2206
    2b64:	04080019 	streq	r0, [r8], #-25
    2b68:	0108001b 	tsteq	r8, fp, lsl r0
    2b6c:	1b0a5b00 	blne	299774 <_Min_Stack_Size+0x299374>
    2b70:	1b2a0800 	blne	a84b78 <_Min_Stack_Size+0xa84778>
    2b74:	00010800 	andeq	r0, r1, r0, lsl #16
    2b78:	0000005b 	andeq	r0, r0, fp, asr r0
    2b7c:	00000000 	andeq	r0, r0, r0
    2b80:	0019f400 	andseq	pc, r9, r0, lsl #8
    2b84:	001b0408 	andseq	r0, fp, r8, lsl #8
    2b88:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
    2b8c:	001b0a34 	andseq	r0, fp, r4, lsr sl
    2b90:	001b2a08 	andseq	r2, fp, r8, lsl #20
    2b94:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
    2b98:	00000034 	andeq	r0, r0, r4, lsr r0
    2b9c:	00000000 	andeq	r0, r0, r0
    2ba0:	0019f400 	andseq	pc, r9, r0, lsl #8
    2ba4:	001b0408 	andseq	r0, fp, r8, lsl #8
    2ba8:	f3000408 	vshl.u8	d0, d8, d0
    2bac:	0a9f5201 	beq	fe7d73b8 <_estack+0xde7a73b8>
    2bb0:	2a08001b 	bcs	202c24 <_Min_Stack_Size+0x202824>
    2bb4:	0408001b 	streq	r0, [r8], #-27
    2bb8:	5201f300 	andpl	pc, r1, #0, 6
    2bbc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2bc0:	00000000 	andeq	r0, r0, r0
    2bc4:	0019f400 	andseq	pc, r9, r0, lsl #8
    2bc8:	001b0408 	andseq	r0, fp, r8, lsl #8
    2bcc:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    2bd0:	08001b0a 	stmdaeq	r0, {r1, r3, r8, r9, fp, ip}
    2bd4:	08001b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip}
    2bd8:	00570001 	subseq	r0, r7, r1
    2bdc:	00000000 	andeq	r0, r0, r0
    2be0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    2be4:	a2080019 	andge	r0, r8, #25
    2be8:	0108001a 	tsteq	r8, sl, lsl r0
    2bec:	1aa25500 	bne	fe897ff4 <_estack+0xde867ff4>
    2bf0:	1b040800 	blne	104bf8 <_Min_Stack_Size+0x1047f8>
    2bf4:	00040800 	andeq	r0, r4, r0, lsl #16
    2bf8:	9f5101f3 	svcls	0x005101f3
    2bfc:	08001b0a 	stmdaeq	r0, {r1, r3, r8, r9, fp, ip}
    2c00:	08001b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, ip}
    2c04:	01f30004 	mvnseq	r0, r4
    2c08:	1b149f51 	blne	52a954 <_Min_Stack_Size+0x52a554>
    2c0c:	1b1e0800 	blne	784c14 <_Min_Stack_Size+0x784814>
    2c10:	00010800 	andeq	r0, r1, r0, lsl #16
    2c14:	001b1e55 	andseq	r1, fp, r5, asr lr
    2c18:	001b2a08 	andseq	r2, fp, r8, lsl #20
    2c1c:	f3000408 	vshl.u8	d0, d8, d0
    2c20:	009f5101 	addseq	r5, pc, r1, lsl #2
    2c24:	00000000 	andeq	r0, r0, r0
    2c28:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    2c2c:	04080019 	streq	r0, [r8], #-25
    2c30:	0108001b 	tsteq	r8, fp, lsl r0
    2c34:	1b0a5400 	blne	297c3c <_Min_Stack_Size+0x29783c>
    2c38:	1b2a0800 	blne	a84c40 <_Min_Stack_Size+0xa84840>
    2c3c:	00010800 	andeq	r0, r1, r0, lsl #16
    2c40:	00000054 	andeq	r0, r0, r4, asr r0
    2c44:	00000000 	andeq	r0, r0, r0
    2c48:	0019f400 	andseq	pc, r9, r0, lsl #8
    2c4c:	0019f608 	andseq	pc, r9, r8, lsl #12
    2c50:	30000208 	andcc	r0, r0, r8, lsl #4
    2c54:	0019f69f 	mulseq	r9, pc, r6	; <UNPREDICTABLE>
    2c58:	001a0008 	andseq	r0, sl, r8
    2c5c:	31000208 	tstcc	r0, r8, lsl #4
    2c60:	001a009f 	mulseq	sl, pc, r0	; <UNPREDICTABLE>
    2c64:	001a0a08 	andseq	r0, sl, r8, lsl #20
    2c68:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    2c6c:	001a0a9f 	mulseq	sl, pc, sl	; <UNPREDICTABLE>
    2c70:	001a1408 	andseq	r1, sl, r8, lsl #8
    2c74:	33000208 	movwcc	r0, #520	; 0x208
    2c78:	001a149f 	mulseq	sl, pc, r4	; <UNPREDICTABLE>
    2c7c:	001a1e08 	andseq	r1, sl, r8, lsl #28
    2c80:	34000208 	strcc	r0, [r0], #-520	; 0x208
    2c84:	001a1e9f 	mulseq	sl, pc, lr	; <UNPREDICTABLE>
    2c88:	001a2808 	andseq	r2, sl, r8, lsl #16
    2c8c:	35000208 	strcc	r0, [r0, #-520]	; 0x208
    2c90:	001a289f 	mulseq	sl, pc, r8	; <UNPREDICTABLE>
    2c94:	001a3208 	andseq	r3, sl, r8, lsl #4
    2c98:	36000208 	strcc	r0, [r0], -r8, lsl #4
    2c9c:	001a329f 	mulseq	sl, pc, r2	; <UNPREDICTABLE>
    2ca0:	001a3c08 	andseq	r3, sl, r8, lsl #24
    2ca4:	37000208 	strcc	r0, [r0, -r8, lsl #4]
    2ca8:	001a3c9f 	mulseq	sl, pc, ip	; <UNPREDICTABLE>
    2cac:	001a4208 	andseq	r4, sl, r8, lsl #4
    2cb0:	38000208 	stmdacc	r0, {r3, r9}
    2cb4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2cb8:	00000000 	andeq	r0, r0, r0
    2cbc:	001b4c00 	andseq	r4, fp, r0, lsl #24
    2cc0:	001b5308 	andseq	r5, fp, r8, lsl #6
    2cc4:	50000108 	andpl	r0, r0, r8, lsl #2
    2cc8:	08001b53 	stmdaeq	r0, {r0, r1, r4, r6, r8, r9, fp, ip}
    2ccc:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
    2cd0:	00540001 	subseq	r0, r4, r1
    2cd4:	0a08001c 	beq	202d4c <_Min_Stack_Size+0x20294c>
    2cd8:	0108001c 	tsteq	r8, ip, lsl r0
    2cdc:	00005400 	andeq	r5, r0, r0, lsl #8
    2ce0:	00000000 	andeq	r0, r0, r0
    2ce4:	1b580000 	blne	1602cec <_Min_Stack_Size+0x16028ec>
    2ce8:	1bfc0800 	blne	fff04cf0 <_estack+0xdfed4cf0>
    2cec:	00010800 	andeq	r0, r1, r0, lsl #16
    2cf0:	00000054 	andeq	r0, r0, r4, asr r0
    2cf4:	00000000 	andeq	r0, r0, r0
    2cf8:	001bd400 	andseq	sp, fp, r0, lsl #8
    2cfc:	001bd608 	andseq	sp, fp, r8, lsl #12
    2d00:	73000508 	movwvc	r0, #1288	; 0x508
    2d04:	0c23060c 	stceq	6, cr0, [r3], #-48	; 0xffffffd0
    2d08:	08001bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp, ip}
    2d0c:	08001bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp, ip}
    2d10:	0c730002 	ldcleq	0, cr0, [r3], #-8
    2d14:	08001bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp, ip}
    2d18:	08001bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, ip}
    2d1c:	00520001 	subseq	r0, r2, r1
    2d20:	00000000 	andeq	r0, r0, r0
    2d24:	0c000000 	stceq	0, cr0, [r0], {-0}
    2d28:	1308001c 	movwne	r0, #32796	; 0x801c
    2d2c:	0108001c 	tsteq	r8, ip, lsl r0
    2d30:	1c135000 	ldcne	0, cr5, [r3], {-0}
    2d34:	1c180800 	ldcne	8, cr0, [r8], {-0}
    2d38:	00010800 	andeq	r0, r1, r0, lsl #16
    2d3c:	001c1854 	andseq	r1, ip, r4, asr r8
    2d40:	001c2008 	andseq	r2, ip, r8
    2d44:	f3000408 	vshl.u8	d0, d8, d0
    2d48:	209f5001 	addscs	r5, pc, r1
    2d4c:	2a08001c 	bcs	202dc4 <_Min_Stack_Size+0x2029c4>
    2d50:	0108001c 	tsteq	r8, ip, lsl r0
    2d54:	00005400 	andeq	r5, r0, r0, lsl #8
    2d58:	00000000 	andeq	r0, r0, r0
    2d5c:	1c160000 	ldcne	0, cr0, [r6], {-0}
    2d60:	1c180800 	ldcne	8, cr0, [r8], {-0}
    2d64:	00010800 	andeq	r0, r1, r0, lsl #16
    2d68:	001c1854 	andseq	r1, ip, r4, asr r8
    2d6c:	001c2008 	andseq	r2, ip, r8
    2d70:	f3000408 	vshl.u8	d0, d8, d0
    2d74:	2a9f5001 	bcs	fe7d6d80 <_estack+0xde7a6d80>
    2d78:	2c08001c 	stccs	0, cr0, [r8], {28}
    2d7c:	0108001c 	tsteq	r8, ip, lsl r0
    2d80:	00005400 	andeq	r5, r0, r0, lsl #8
    2d84:	00000000 	andeq	r0, r0, r0
    2d88:	1c180000 	ldcne	0, cr0, [r8], {-0}
    2d8c:	1c200800 	stcne	8, cr0, [r0], #-0
    2d90:	00010800 	andeq	r0, r1, r0, lsl #16
    2d94:	001c2c54 	andseq	r2, ip, r4, asr ip
    2d98:	001c3408 	andseq	r3, ip, r8, lsl #8
    2d9c:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    2da8:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
    2dac:	08001c41 	stmdaeq	r0, {r0, r6, sl, fp, ip}
    2db0:	41500001 	cmpmi	r0, r1
    2db4:	4608001c 			; <UNDEFINED> instruction: 0x4608001c
    2db8:	0108001c 	tsteq	r8, ip, lsl r0
    2dbc:	1cac5400 	cfstrsne	mvf5, [ip]
    2dc0:	1caf0800 	stcne	8, cr0, [pc]	; 2dc8 <_Min_Stack_Size+0x29c8>
    2dc4:	00010800 	andeq	r0, r1, r0, lsl #16
    2dc8:	001caf50 	andseq	sl, ip, r0, asr pc
    2dcc:	001cbc08 	andseq	fp, ip, r8, lsl #24
    2dd0:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    2ddc:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
    2de0:	08001c41 	stmdaeq	r0, {r0, r6, sl, fp, ip}
    2de4:	41510001 	cmpmi	r1, r1
    2de8:	8008001c 	andhi	r0, r8, ip, lsl r0
    2dec:	0108001c 	tsteq	r8, ip, lsl r0
    2df0:	1c805500 	cfstr32ne	mvfx5, [r0], {0}
    2df4:	1c980800 	ldcne	8, cr0, [r8], {0}
    2df8:	00030800 	andeq	r0, r3, r0, lsl #16
    2dfc:	9800c874 	stmdals	r0, {r2, r4, r5, r6, fp, lr, pc}
    2e00:	a208001c 	andge	r0, r8, #28
    2e04:	0408001c 	streq	r0, [r8], #-28
    2e08:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2e0c:	001ca29f 	mulseq	ip, pc, r2	; <UNPREDICTABLE>
    2e10:	001cac08 	andseq	sl, ip, r8, lsl #24
    2e14:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    2e18:	08001cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, ip}
    2e1c:	08001caf 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, sl, fp, ip}
    2e20:	af510001 	svcge	0x00510001
    2e24:	be08001c 	mcrlt	0, 0, r0, cr8, cr12, {0}
    2e28:	0108001c 	tsteq	r8, ip, lsl r0
    2e2c:	1cbe5500 	cfldr32ne	mvfx5, [lr]
    2e30:	1cca0800 	stclne	8, cr0, [sl], {0}
    2e34:	00040800 	andeq	r0, r4, r0, lsl #16
    2e38:	9f5101f3 	svcls	0x005101f3
    2e3c:	08001cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, ip}
    2e40:	08001cd1 	stmdaeq	r0, {r0, r4, r6, r7, sl, fp, ip}
    2e44:	c8740003 	ldmdagt	r4!, {r0, r1}^
    2e48:	001cd100 	andseq	sp, ip, r0, lsl #2
    2e4c:	001cf408 	andseq	pc, ip, r8, lsl #8
    2e50:	f3000408 	vshl.u8	d0, d8, d0
    2e54:	009f5101 	addseq	r5, pc, r1, lsl #2
    2e58:	00000000 	andeq	r0, r0, r0
    2e5c:	46000000 	strmi	r0, [r0], -r0
    2e60:	9e08001c 	mcrls	0, 0, r0, cr8, cr12, {0}
    2e64:	0108001c 	tsteq	r8, ip, lsl r0
    2e68:	1ca25400 	cfstrsne	mvf5, [r2]
    2e6c:	1cac0800 	stcne	8, cr0, [ip]
    2e70:	00010800 	andeq	r0, r1, r0, lsl #16
    2e74:	001cbe54 	andseq	fp, ip, r4, asr lr
    2e78:	001cc608 	andseq	ip, ip, r8, lsl #12
    2e7c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    2e80:	08001cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, ip}
    2e84:	08001cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip}
    2e88:	00540001 	subseq	r0, r4, r1
    2e8c:	00000000 	andeq	r0, r0, r0
    2e90:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2e94:	7408001c 	strvc	r0, [r8], #-28
    2e98:	0108001c 	tsteq	r8, ip, lsl r0
    2e9c:	1ca25200 	sfmne	f5, 4, [r2]
    2ea0:	1cac0800 	stcne	8, cr0, [ip]
    2ea4:	00010800 	andeq	r0, r1, r0, lsl #16
    2ea8:	00000052 	andeq	r0, r0, r2, asr r0
    2eac:	00000000 	andeq	r0, r0, r0
    2eb0:	001c6e00 	andseq	r6, ip, r0, lsl #28
    2eb4:	001c8a08 	andseq	r8, ip, r8, lsl #20
    2eb8:	53000108 	movwpl	r0, #264	; 0x108
	...
    2ec4:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
    2ec8:	08001c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, ip}
    2ecc:	9f300002 	svcls	0x00300002
    2ed0:	08001c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, ip}
    2ed4:	08001c9a 	stmdaeq	r0, {r1, r3, r4, r7, sl, fp, ip}
    2ed8:	a2560001 	subsge	r0, r6, #1
    2edc:	be08001c 	mcrlt	0, 0, r0, cr8, cr12, {0}
    2ee0:	0208001c 	andeq	r0, r8, #28
    2ee4:	be9f3000 	cdplt	0, 9, cr3, cr15, cr0, {0}
    2ee8:	c608001c 			; <UNDEFINED> instruction: 0xc608001c
    2eec:	0108001c 	tsteq	r8, ip, lsl r0
    2ef0:	1cca5600 	stclne	6, cr5, [sl], {0}
    2ef4:	1cf40800 	ldclne	8, cr0, [r4]
    2ef8:	00010800 	andeq	r0, r1, r0, lsl #16
    2efc:	00000056 	andeq	r0, r0, r6, asr r0
    2f00:	00000000 	andeq	r0, r0, r0
    2f04:	001cf400 	andseq	pc, ip, r0, lsl #8
    2f08:	001cff08 	andseq	pc, ip, r8, lsl #30
    2f0c:	50000108 	andpl	r0, r0, r8, lsl #2
    2f10:	08001cff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, sl, fp, ip}
    2f14:	08001d08 	stmdaeq	r0, {r3, r8, sl, fp, ip}
    2f18:	9c540001 	mrrcls	0, 0, r0, r4, cr1
    2f1c:	9e08001d 	mcrls	0, 0, r0, cr8, cr13, {0}
    2f20:	0108001d 	tsteq	r8, sp, lsl r0
    2f24:	00005400 	andeq	r5, r0, r0, lsl #8
    2f28:	00000000 	andeq	r0, r0, r0
    2f2c:	1d080000 	stcne	0, cr0, [r8, #-0]
    2f30:	1d9c0800 	ldcne	8, cr0, [ip]
    2f34:	00010800 	andeq	r0, r1, r0, lsl #16
    2f38:	001da054 	andseq	sl, sp, r4, asr r0
    2f3c:	001db808 	andseq	fp, sp, r8, lsl #16
    2f40:	54000108 	strpl	r0, [r0], #-264	; 0x108
    2f44:	08001dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, ip}
    2f48:	08001e46 	stmdaeq	r0, {r1, r2, r6, r9, sl, fp, ip}
    2f4c:	00540001 	subseq	r0, r4, r1
    2f50:	00000000 	andeq	r0, r0, r0
    2f54:	6c000000 	stcvs	0, cr0, [r0], {-0}
    2f58:	6e08001d 	mcrvs	0, 0, r0, cr8, cr13, {0}
    2f5c:	0508001d 	streq	r0, [r8, #-29]
    2f60:	060c7300 	streq	r7, [ip], -r0, lsl #6
    2f64:	1d6e0c23 	stclne	12, cr0, [lr, #-140]!	; 0xffffff74
    2f68:	1d740800 	ldclne	8, cr0, [r4, #-0]
    2f6c:	00020800 	andeq	r0, r2, r0, lsl #16
    2f70:	1d740c73 	ldclne	12, cr0, [r4, #-460]!	; 0xfffffe34
    2f74:	1d760800 	ldclne	8, cr0, [r6, #-0]
    2f78:	00010800 	andeq	r0, r1, r0, lsl #16
    2f7c:	00000052 	andeq	r0, r0, r2, asr r0
    2f80:	00000000 	andeq	r0, r0, r0
    2f84:	001e1a00 	andseq	r1, lr, r0, lsl #20
    2f88:	001e3208 	andseq	r3, lr, r8, lsl #4
    2f8c:	52000108 	andpl	r0, r0, #8, 2
	...
    2f98:	08001e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip}
    2f9c:	08001e5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r9, sl, fp, ip}
    2fa0:	5f500001 	svcpl	0x00500001
    2fa4:	7208001e 	andvc	r0, r8, #30
    2fa8:	0108001e 	tsteq	r8, lr, lsl r0
    2fac:	1e725400 	cdpne	4, 7, cr5, cr2, cr0, {0}
    2fb0:	1e760800 	cdpne	8, 7, cr0, cr6, cr0, {0}
    2fb4:	00040800 	andeq	r0, r4, r0, lsl #16
    2fb8:	9f5001f3 	svcls	0x005001f3
    2fbc:	08001e76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, sl, fp, ip}
    2fc0:	08001e7b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r9, sl, fp, ip}
    2fc4:	7b500001 	blvc	1402fd0 <_Min_Stack_Size+0x1402bd0>
    2fc8:	d008001e 	andle	r0, r8, lr, lsl r0
    2fcc:	0108001e 	tsteq	r8, lr, lsl r0
    2fd0:	00005400 	andeq	r5, r0, r0, lsl #8
    2fd4:	00000000 	andeq	r0, r0, r0
    2fd8:	1e600000 	cdpne	0, 6, cr0, cr0, cr0, {0}
    2fdc:	1e720800 	cdpne	8, 7, cr0, cr2, cr0, {0}
    2fe0:	00010800 	andeq	r0, r1, r0, lsl #16
    2fe4:	001e7254 	andseq	r7, lr, r4, asr r2
    2fe8:	001e7608 	andseq	r7, lr, r8, lsl #12
    2fec:	f3000408 	vshl.u8	d0, d8, d0
    2ff0:	7e9f5001 	cdpvc	0, 9, cr5, cr15, cr1, {0}
    2ff4:	d008001e 	andle	r0, r8, lr, lsl r0
    2ff8:	0108001e 	tsteq	r8, lr, lsl r0
    2ffc:	00005400 	andeq	r5, r0, r0, lsl #8
    3000:	00000000 	andeq	r0, r0, r0
    3004:	1e600000 	cdpne	0, 6, cr0, cr0, cr0, {0}
    3008:	1e6e0800 	cdpne	8, 6, cr0, cr14, cr0, {0}
    300c:	00020800 	andeq	r0, r2, r0, lsl #16
    3010:	1e7e9f30 	mrcne	15, 3, r9, cr14, cr0, {1}
    3014:	1e8c0800 	cdpne	8, 8, cr0, cr12, cr0, {0}
    3018:	00020800 	andeq	r0, r2, r0, lsl #16
    301c:	1e8c9f30 	mcrne	15, 4, r9, cr12, cr0, {1}
    3020:	1e970800 	cdpne	8, 9, cr0, cr7, cr0, {0}
    3024:	00080800 	andeq	r0, r8, r0, lsl #16
    3028:	29300072 	ldmdbcs	r0!, {r1, r4, r5, r6}
    302c:	9f1aff08 	svcls	0x001aff08
	...
    3038:	08001e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, ip}
    303c:	08001e97 	stmdaeq	r0, {r0, r1, r2, r4, r7, r9, sl, fp, ip}
    3040:	00720008 	rsbseq	r0, r2, r8
    3044:	ff082930 			; <UNDEFINED> instruction: 0xff082930
    3048:	00009f1a 	andeq	r9, r0, sl, lsl pc
    304c:	00000000 	andeq	r0, r0, r0
    3050:	1ed00000 	cdpne	0, 13, cr0, cr0, cr0, {0}
    3054:	1ed90800 	cdpne	8, 13, cr0, cr9, cr0, {0}
    3058:	00010800 	andeq	r0, r1, r0, lsl #16
    305c:	001ed950 	andseq	sp, lr, r0, asr r9
    3060:	001efa08 	andseq	pc, lr, r8, lsl #20
    3064:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3068:	08001efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
    306c:	08001efd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip}
    3070:	fd500001 	ldc2l	0, cr0, [r0, #-4]
    3074:	8008001e 	andhi	r0, r8, lr, lsl r0
    3078:	0108001f 	tsteq	r8, pc, lsl r0
    307c:	00005400 	andeq	r5, r0, r0, lsl #8
    3080:	00000000 	andeq	r0, r0, r0
    3084:	1ed00000 	cdpne	0, 13, cr0, cr0, cr0, {0}
    3088:	1ef20800 	cdpne	8, 15, cr0, cr2, cr0, {0}
    308c:	00020800 	andeq	r0, r2, r0, lsl #16
    3090:	1ef29f30 	mrcne	15, 7, r9, cr2, cr0, {1}
    3094:	1efa0800 	cdpne	8, 15, cr0, cr10, cr0, {0}
    3098:	00010800 	andeq	r0, r1, r0, lsl #16
    309c:	001efa55 	andseq	pc, lr, r5, asr sl	; <UNPREDICTABLE>
    30a0:	001f3808 	andseq	r3, pc, r8, lsl #16
    30a4:	30000208 	andcc	r0, r0, r8, lsl #4
    30a8:	001f389f 	mulseq	pc, pc, r8	; <UNPREDICTABLE>
    30ac:	001f6e08 	andseq	r6, pc, r8, lsl #28
    30b0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    30b4:	08001f6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip}
    30b8:	08001f76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip}
    30bc:	9f300002 	svcls	0x00300002
    30c0:	08001f76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip}
    30c4:	08001f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip}
    30c8:	00550001 	subseq	r0, r5, r1
    30cc:	00000000 	andeq	r0, r0, r0
    30d0:	ec000000 	stc	0, cr0, [r0], {-0}
    30d4:	ee08001e 	mcr	0, 0, r0, cr8, cr14, {0}
    30d8:	0108001e 	tsteq	r8, lr, lsl r0
    30dc:	1eee5000 	cdpne	0, 14, cr5, cr14, cr0, {0}
    30e0:	1efa0800 	cdpne	8, 15, cr0, cr10, cr0, {0}
    30e4:	00010800 	andeq	r0, r1, r0, lsl #16
    30e8:	001f0056 	andseq	r0, pc, r6, asr r0	; <UNPREDICTABLE>
    30ec:	001f0408 	andseq	r0, pc, r8, lsl #8
    30f0:	50000108 	andpl	r0, r0, r8, lsl #2
    30f4:	08001f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, ip}
    30f8:	08001f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip}
    30fc:	00560001 	subseq	r0, r6, r1
    3100:	00000000 	andeq	r0, r0, r0
    3104:	ec000000 	stc	0, cr0, [r0], {-0}
    3108:	fa08001e 	blx	203188 <_Min_Stack_Size+0x202d88>
    310c:	0108001e 	tsteq	r8, lr, lsl r0
    3110:	1f005400 	svcne	0x00005400
    3114:	1f800800 	svcne	0x00800800
    3118:	00010800 	andeq	r0, r1, r0, lsl #16
    311c:	00000054 	andeq	r0, r0, r4, asr r0
    3120:	00000000 	andeq	r0, r0, r0
    3124:	001eec00 	andseq	lr, lr, r0, lsl #24
    3128:	001eee08 	andseq	lr, lr, r8, lsl #28
    312c:	30000208 	andcc	r0, r0, r8, lsl #4
    3130:	001f009f 	mulseq	pc, pc, r0	; <UNPREDICTABLE>
    3134:	001f0e08 	andseq	r0, pc, r8, lsl #28
    3138:	30000208 	andcc	r0, r0, r8, lsl #4
    313c:	001f0e9f 	mulseq	pc, pc, lr	; <UNPREDICTABLE>
    3140:	001f2c08 	andseq	r2, pc, r8, lsl #24
    3144:	75000808 	strvc	r0, [r0, #-2056]	; 0x808
    3148:	08293000 	stmdaeq	r9!, {ip, sp}
    314c:	2c9f1aff 	vldmiacs	pc, {s2-s256}
    3150:	3b08001f 	blcc	2031d4 <_Min_Stack_Size+0x202dd4>
    3154:	0908001f 	stmdbeq	r8, {r0, r1, r2, r3, r4}
    3158:	06287400 	strteq	r7, [r8], -r0, lsl #8
    315c:	ff082930 			; <UNDEFINED> instruction: 0xff082930
    3160:	1f6e9f1a 	svcne	0x006e9f1a
    3164:	1f800800 	svcne	0x00800800
    3168:	00080800 	andeq	r0, r8, r0, lsl #16
    316c:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    3170:	9f1aff08 	svcls	0x001aff08
	...
    317c:	08001f0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, fp, ip}
    3180:	08001f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip}
    3184:	00750008 	rsbseq	r0, r5, r8
    3188:	ff082930 			; <UNDEFINED> instruction: 0xff082930
    318c:	1f2c9f1a 	svcne	0x002c9f1a
    3190:	1f3b0800 	svcne	0x003b0800
    3194:	00090800 	andeq	r0, r9, r0, lsl #16
    3198:	30062874 	andcc	r2, r6, r4, ror r8
    319c:	1aff0829 	bne	fffc5248 <_estack+0xdff95248>
    31a0:	001f6e9f 	mulseq	pc, pc, lr	; <UNPREDICTABLE>
    31a4:	001f8008 	andseq	r8, pc, r8
    31a8:	75000808 	strvc	r0, [r0, #-2056]	; 0x808
    31ac:	08293000 	stmdaeq	r9!, {ip, sp}
    31b0:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    31b4:	00000000 	andeq	r0, r0, r0
    31b8:	84000000 	strhi	r0, [r0], #-0
    31bc:	89080020 	stmdbhi	r8, {r5}
    31c0:	01080020 	tsteq	r8, r0, lsr #32
    31c4:	20895000 	addcs	r5, r9, r0
    31c8:	209c0800 	addscs	r0, ip, r0, lsl #16
    31cc:	00010800 	andeq	r0, r1, r0, lsl #16
    31d0:	0020a054 	eoreq	sl, r0, r4, asr r0
    31d4:	0020a208 	eoreq	sl, r0, r8, lsl #4
    31d8:	50000108 	andpl	r0, r0, r8, lsl #2
    31dc:	080020a4 	stmdaeq	r0, {r2, r5, r7, sp}
    31e0:	080020a7 	stmdaeq	r0, {r0, r1, r2, r5, r7, sp}
    31e4:	a7500001 	ldrbge	r0, [r0, -r1]
    31e8:	aa080020 	bge	203270 <_Min_Stack_Size+0x202e70>
    31ec:	01080020 	tsteq	r8, r0, lsr #32
    31f0:	00005400 	andeq	r5, r0, r0, lsl #8
    31f4:	00000000 	andeq	r0, r0, r0
    31f8:	20720000 	rsbscs	r0, r2, r0
    31fc:	20a20800 	adccs	r0, r2, r0, lsl #16
    3200:	00020800 	andeq	r0, r2, r0, lsl #16
    3204:	20a49f31 	adccs	r9, r4, r1, lsr pc
    3208:	20aa0800 	adccs	r0, sl, r0, lsl #16
    320c:	00020800 	andeq	r0, r2, r0, lsl #16
    3210:	00009f31 	andeq	r9, r0, r1, lsr pc
    3214:	00000000 	andeq	r0, r0, r0
    3218:	1f880000 	svcne	0x00880000
    321c:	1f940800 	svcne	0x00940800
    3220:	00010800 	andeq	r0, r1, r0, lsl #16
    3224:	001f9450 	andseq	r9, pc, r0, asr r4	; <UNPREDICTABLE>
    3228:	00208408 	eoreq	r8, r0, r8, lsl #8
    322c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3230:	08002084 	stmdaeq	r0, {r2, r7, sp}
    3234:	0800209c 	stmdaeq	r0, {r2, r3, r4, r7, sp}
    3238:	7c770003 	ldclvc	0, cr0, [r7], #-12
    323c:	0020a09f 	mlaeq	r0, pc, r0, sl	; <UNPREDICTABLE>
    3240:	0020a208 	eoreq	sl, r0, r8, lsl #4
    3244:	77000308 	strvc	r0, [r0, -r8, lsl #6]
    3248:	20a49f7c 	adccs	r9, r4, ip, ror pc
    324c:	20aa0800 	adccs	r0, sl, r0, lsl #16
    3250:	00030800 	andeq	r0, r3, r0, lsl #16
    3254:	aa9f7c77 	bge	fe7e2438 <_estack+0xde7b2438>
    3258:	b0080020 	andlt	r0, r8, r0, lsr #32
    325c:	01080020 	tsteq	r8, r0, lsr #32
    3260:	20b05400 	adcscs	r5, r0, r0, lsl #8
    3264:	20b30800 	adcscs	r0, r3, r0, lsl #16
    3268:	00010800 	andeq	r0, r1, r0, lsl #16
    326c:	0020b450 	eoreq	fp, r0, r0, asr r4
    3270:	0020ca08 	eoreq	ip, r0, r8, lsl #20
    3274:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    3280:	08001faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp, ip}
    3284:	08001fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip}
    3288:	30740007 	rsbscc	r0, r4, r7
    328c:	04842306 	streq	r2, [r4], #774	; 0x306
    3290:	001fbc9f 	mulseq	pc, pc, ip	; <UNPREDICTABLE>
    3294:	001fde08 	andseq	sp, pc, r8, lsl #28
    3298:	53000108 	movwpl	r0, #264	; 0x108
    329c:	08001fde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
    32a0:	08002014 	stmdaeq	r0, {r2, r4, sp}
    32a4:	00560001 	subseq	r0, r6, r1
    32a8:	00000000 	andeq	r0, r0, r0
    32ac:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    32b0:	a208001f 	andge	r0, r8, #31
    32b4:	02080020 	andeq	r0, r8, #32
    32b8:	a49f3000 	ldrge	r3, [pc], #0	; 32c0 <_Min_Stack_Size+0x2ec0>
    32bc:	aa080020 	bge	203344 <_Min_Stack_Size+0x202f44>
    32c0:	02080020 	andeq	r0, r8, #32
    32c4:	b49f3000 	ldrlt	r3, [pc], #0	; 32cc <_Min_Stack_Size+0x2ecc>
    32c8:	ca080020 	bgt	203350 <_Min_Stack_Size+0x202f50>
    32cc:	02080020 	andeq	r0, r8, #32
    32d0:	009f3000 	addseq	r3, pc, r0
    32d4:	00000000 	andeq	r0, r0, r0
    32d8:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    32dc:	8408001f 	strhi	r0, [r8], #-31
    32e0:	01080020 	tsteq	r8, r0, lsr #32
    32e4:	20845400 	addcs	r5, r4, r0, lsl #8
    32e8:	209c0800 	addscs	r0, ip, r0, lsl #16
    32ec:	00030800 	andeq	r0, r3, r0, lsl #16
    32f0:	a09f7c77 	addsge	r7, pc, r7, ror ip	; <UNPREDICTABLE>
    32f4:	a2080020 	andge	r0, r8, #32
    32f8:	03080020 	movweq	r0, #32800	; 0x8020
    32fc:	9f7c7700 	svcls	0x007c7700
    3300:	080020a4 	stmdaeq	r0, {r2, r5, r7, sp}
    3304:	080020aa 	stmdaeq	r0, {r1, r3, r5, r7, sp}
    3308:	7c770003 	ldclvc	0, cr0, [r7], #-12
    330c:	0020b49f 	mlaeq	r0, pc, r4, fp	; <UNPREDICTABLE>
    3310:	0020ca08 	eoreq	ip, r0, r8, lsl #20
    3314:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    3320:	08001fde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
    3324:	080020a2 	stmdaeq	r0, {r1, r5, r7, sp}
    3328:	9f340002 	svcls	0x00340002
    332c:	080020a4 	stmdaeq	r0, {r2, r5, r7, sp}
    3330:	080020aa 	stmdaeq	r0, {r1, r3, r5, r7, sp}
    3334:	9f340002 	svcls	0x00340002
    3338:	080020b4 	stmdaeq	r0, {r2, r4, r5, r7, sp}
    333c:	080020ca 	stmdaeq	r0, {r1, r3, r6, r7, sp}
    3340:	9f340002 	svcls	0x00340002
	...
    334c:	0800211a 	stmdaeq	r0, {r1, r3, r4, r8, sp}
    3350:	08002127 	stmdaeq	r0, {r0, r1, r2, r5, r8, sp}
    3354:	00500001 	subseq	r0, r0, r1
    3358:	00000000 	andeq	r0, r0, r0
    335c:	a6000000 	strge	r0, [r0], -r0
    3360:	f2080021 	vhadd.s8	d0, d8, d17
    3364:	01080021 	tsteq	r8, r1, lsr #32
    3368:	22a05a00 	adccs	r5, r0, #0, 20
    336c:	22a40800 	adccs	r0, r4, #0, 16
    3370:	00010800 	andeq	r0, r1, r0, lsl #16
    3374:	0000005a 	andeq	r0, r0, sl, asr r0
    3378:	00000000 	andeq	r0, r0, r0
    337c:	0021aa00 	eoreq	sl, r1, r0, lsl #20
    3380:	0021b908 	eoreq	fp, r1, r8, lsl #18
    3384:	51000108 	tstpl	r0, r8, lsl #2
    3388:	080022a0 	stmdaeq	r0, {r5, r7, r9, sp}
    338c:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
    3390:	00510001 	subseq	r0, r1, r1
    3394:	00000000 	andeq	r0, r0, r0
    3398:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    339c:	96080021 	strls	r0, [r8], -r1, lsr #32
    33a0:	02080021 	andeq	r0, r8, #33	; 0x21
    33a4:	969f3000 	ldrls	r3, [pc], r0
    33a8:	16080021 	strne	r0, [r8], -r1, lsr #32
    33ac:	01080022 	tsteq	r8, r2, lsr #32
    33b0:	22185500 	andscs	r5, r8, #0, 10
    33b4:	22280800 	eorcs	r0, r8, #0, 16
    33b8:	00020800 	andeq	r0, r2, r0, lsl #16
    33bc:	22289f30 	eorcs	r9, r8, #48, 30	; 0xc0
    33c0:	22380800 	eorscs	r0, r8, #0, 16
    33c4:	00010800 	andeq	r0, r1, r0, lsl #16
    33c8:	00224055 	eoreq	r4, r2, r5, asr r0
    33cc:	0022a008 	eoreq	sl, r2, r8
    33d0:	30000208 	andcc	r0, r0, r8, lsl #4
    33d4:	0022a09f 	mlaeq	r2, pc, r0, sl	; <UNPREDICTABLE>
    33d8:	0022a408 	eoreq	sl, r2, r8, lsl #8
    33dc:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    33e0:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
    33e4:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
    33e8:	9f300002 	svcls	0x00300002
	...
    33f4:	08002162 	stmdaeq	r0, {r1, r5, r6, r8, sp}
    33f8:	08002218 	stmdaeq	r0, {r3, r4, r9, sp}
    33fc:	40590001 	subsmi	r0, r9, r1
    3400:	b4080022 	strlt	r0, [r8], #-34	; 0x22
    3404:	01080022 	tsteq	r8, r2, lsr #32
    3408:	00005900 	andeq	r5, r0, r0, lsl #18
    340c:	00000000 	andeq	r0, r0, r0
    3410:	22720000 	rsbscs	r0, r2, #0
    3414:	22a00800 	adccs	r0, r0, #0, 16
    3418:	00010800 	andeq	r0, r1, r0, lsl #16
    341c:	0022a450 	eoreq	sl, r2, r0, asr r4
    3420:	0022b408 	eoreq	fp, r2, r8, lsl #8
    3424:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    3430:	0800228e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sp}
    3434:	08002290 	stmdaeq	r0, {r4, r7, r9, sp}
    3438:	0c730005 	ldcleq	0, cr0, [r3], #-20	; 0xffffffec
    343c:	900c2306 	andls	r2, ip, r6, lsl #6
    3440:	92080022 	andls	r0, r8, #34	; 0x22
    3444:	02080022 	andeq	r0, r8, #34	; 0x22
    3448:	920c7300 	andls	r7, ip, #0, 6
    344c:	98080022 	stmdals	r8, {r1, r5}
    3450:	01080022 	tsteq	r8, r2, lsr #32
    3454:	00005300 	andeq	r5, r0, r0, lsl #6
    3458:	00000000 	andeq	r0, r0, r0
    345c:	231a0000 	tstcs	sl, #0
    3460:	23540800 	cmpcs	r4, #0, 16
    3464:	00010800 	andeq	r0, r1, r0, lsl #16
    3468:	00000057 	andeq	r0, r0, r7, asr r0
    346c:	00000000 	andeq	r0, r0, r0
    3470:	0022b400 	eoreq	fp, r2, r0, lsl #8
    3474:	00236e08 	eoreq	r6, r3, r8, lsl #28
    3478:	30000208 	andcc	r0, r0, r8, lsl #4
    347c:	00236e9f 	mlaeq	r3, pc, lr, r6	; <UNPREDICTABLE>
    3480:	00237808 	eoreq	r7, r3, r8, lsl #16
    3484:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3488:	08002378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sp}
    348c:	08002396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sp}
    3490:	9f300002 	svcls	0x00300002
    3494:	08002396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sp}
    3498:	0800239a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sp}
    349c:	9f310002 	svcls	0x00310002
    34a0:	0800239a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sp}
    34a4:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
    34a8:	00540001 	subseq	r0, r4, r1
    34ac:	00000000 	andeq	r0, r0, r0
    34b0:	a4000000 	strge	r0, [r0], #-0
    34b4:	ea080023 	b	203548 <_Min_Stack_Size+0x203148>
    34b8:	01080023 	tsteq	r8, r3, lsr #32
    34bc:	23ea5000 	mvncs	r5, #0
    34c0:	24240800 	strtcs	r0, [r4], #-2048	; 0x800
    34c4:	00040800 	andeq	r0, r4, r0, lsl #16
    34c8:	9f5001f3 	svcls	0x005001f3
    34cc:	08002424 	stmdaeq	r0, {r2, r5, sl, sp}
    34d0:	0800242d 	stmdaeq	r0, {r0, r2, r3, r5, sl, sp}
    34d4:	2d500001 	ldclcs	0, cr0, [r0, #-4]
    34d8:	3a080024 	bcc	203570 <_Min_Stack_Size+0x203170>
    34dc:	04080024 	streq	r0, [r8], #-36	; 0x24
    34e0:	5001f300 	andpl	pc, r1, r0, lsl #6
    34e4:	00243a9f 	mlaeq	r4, pc, sl, r3	; <UNPREDICTABLE>
    34e8:	00243d08 	eoreq	r3, r4, r8, lsl #26
    34ec:	50000108 	andpl	r0, r0, r8, lsl #2
    34f0:	0800243d 	stmdaeq	r0, {r0, r2, r3, r4, r5, sl, sp}
    34f4:	08002440 	stmdaeq	r0, {r6, sl, sp}
    34f8:	01f30004 	mvnseq	r0, r4
    34fc:	24409f50 	strbcs	r9, [r0], #-3920	; 0xf50
    3500:	24430800 	strbcs	r0, [r3], #-2048	; 0x800
    3504:	00010800 	andeq	r0, r1, r0, lsl #16
    3508:	00244350 	eoreq	r4, r4, r0, asr r3
    350c:	00244608 	eoreq	r4, r4, r8, lsl #12
    3510:	f3000408 	vshl.u8	d0, d8, d0
    3514:	469f5001 	ldrmi	r5, [pc], r1
    3518:	49080024 	stmdbmi	r8, {r2, r5}
    351c:	01080024 	tsteq	r8, r4, lsr #32
    3520:	24495000 	strbcs	r5, [r9], #-0
    3524:	24600800 	strbtcs	r0, [r0], #-2048	; 0x800
    3528:	00040800 	andeq	r0, r4, r0, lsl #16
    352c:	9f5001f3 	svcls	0x005001f3
	...
    3538:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
    353c:	080023ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, r9, sp}
    3540:	ef510001 	svc	0x00510001
    3544:	24080023 	strcs	r0, [r8], #-35	; 0x23
    3548:	04080024 	streq	r0, [r8], #-36	; 0x24
    354c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3550:	0024249f 	mlaeq	r4, pc, r4, r2	; <UNPREDICTABLE>
    3554:	00242d08 	eoreq	r2, r4, r8, lsl #26
    3558:	51000108 	tstpl	r0, r8, lsl #2
    355c:	0800242d 	stmdaeq	r0, {r0, r2, r3, r5, sl, sp}
    3560:	0800243a 	stmdaeq	r0, {r1, r3, r4, r5, sl, sp}
    3564:	01f30004 	mvnseq	r0, r4
    3568:	243a9f51 	ldrtcs	r9, [sl], #-3921	; 0xf51
    356c:	243d0800 	ldrtcs	r0, [sp], #-2048	; 0x800
    3570:	00010800 	andeq	r0, r1, r0, lsl #16
    3574:	00243d51 	eoreq	r3, r4, r1, asr sp
    3578:	00244008 	eoreq	r4, r4, r8
    357c:	f3000408 	vshl.u8	d0, d8, d0
    3580:	409f5101 	addsmi	r5, pc, r1, lsl #2
    3584:	43080024 	movwmi	r0, #32804	; 0x8024
    3588:	01080024 	tsteq	r8, r4, lsr #32
    358c:	24435100 	strbcs	r5, [r3], #-256	; 0x100
    3590:	24460800 	strbcs	r0, [r6], #-2048	; 0x800
    3594:	00040800 	andeq	r0, r4, r0, lsl #16
    3598:	9f5101f3 	svcls	0x005101f3
    359c:	08002446 	stmdaeq	r0, {r1, r2, r6, sl, sp}
    35a0:	08002449 	stmdaeq	r0, {r0, r3, r6, sl, sp}
    35a4:	49510001 	ldmdbmi	r1, {r0}^
    35a8:	60080024 	andvs	r0, r8, r4, lsr #32
    35ac:	04080024 	streq	r0, [r8], #-36	; 0x24
    35b0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    35b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    35b8:	00000000 	andeq	r0, r0, r0
    35bc:	0023d400 	eoreq	sp, r3, r0, lsl #8
    35c0:	00243608 	eoreq	r3, r4, r8, lsl #12
    35c4:	54000108 	strpl	r0, [r0], #-264	; 0x108
    35c8:	0800244c 	stmdaeq	r0, {r2, r3, r6, sl, sp}
    35cc:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
    35d0:	00540001 	subseq	r0, r4, r1
    35d4:	00000000 	andeq	r0, r0, r0
    35d8:	20000000 	andcs	r0, r0, r0
    35dc:	24080024 	strcs	r0, [r8], #-36	; 0x24
    35e0:	01080024 	tsteq	r8, r4, lsr #32
    35e4:	242e5000 	strtcs	r5, [lr], #-0
    35e8:	24390800 	ldrtcs	r0, [r9], #-2048	; 0x800
    35ec:	00010800 	andeq	r0, r1, r0, lsl #16
    35f0:	00000050 	andeq	r0, r0, r0, asr r0
    35f4:	00000000 	andeq	r0, r0, r0
    35f8:	0023a400 	eoreq	sl, r3, r0, lsl #8
    35fc:	0023de08 	eoreq	sp, r3, r8, lsl #28
    3600:	30000208 	andcc	r0, r0, r8, lsl #4
    3604:	0023de9f 	mlaeq	r3, pc, lr, sp	; <UNPREDICTABLE>
    3608:	00242208 	eoreq	r2, r4, r8, lsl #4
    360c:	31000208 	tstcc	r0, r8, lsl #4
    3610:	0024249f 	mlaeq	r4, pc, r4, r2	; <UNPREDICTABLE>
    3614:	00243208 	eoreq	r3, r4, r8, lsl #4
    3618:	30000208 	andcc	r0, r0, r8, lsl #4
    361c:	00243a9f 	mlaeq	r4, pc, sl, r3	; <UNPREDICTABLE>
    3620:	00244c08 	eoreq	r4, r4, r8, lsl #24
    3624:	30000208 	andcc	r0, r0, r8, lsl #4
    3628:	00244c9f 	mlaeq	r4, pc, ip, r4	; <UNPREDICTABLE>
    362c:	00246008 	eoreq	r6, r4, r8
    3630:	31000208 	tstcc	r0, r8, lsl #4
    3634:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3638:	00000000 	andeq	r0, r0, r0
    363c:	0023ce00 	eoreq	ip, r3, r0, lsl #28
    3640:	0023ef08 	eoreq	lr, r3, r8, lsl #30
    3644:	53000108 	movwpl	r0, #264	; 0x108
    3648:	08002424 	stmdaeq	r0, {r2, r5, sl, sp}
    364c:	0800242d 	stmdaeq	r0, {r0, r2, r3, r5, sl, sp}
    3650:	00530001 	subseq	r0, r3, r1
    3654:	00000000 	andeq	r0, r0, r0
    3658:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    365c:	22080023 	andcs	r0, r8, #35	; 0x23
    3660:	01080024 	tsteq	r8, r4, lsr #32
    3664:	244c5400 	strbcs	r5, [ip], #-1024	; 0x400
    3668:	24600800 	strbtcs	r0, [r0], #-2048	; 0x800
    366c:	00010800 	andeq	r0, r1, r0, lsl #16
    3670:	00000054 	andeq	r0, r0, r4, asr r0
    3674:	00000000 	andeq	r0, r0, r0
    3678:	00246000 	eoreq	r6, r4, r0
    367c:	00246608 	eoreq	r6, r4, r8, lsl #12
    3680:	50000108 	andpl	r0, r0, r8, lsl #2
    3684:	08002466 	stmdaeq	r0, {r1, r2, r5, r6, sl, sp}
    3688:	0800246e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, sp}
    368c:	01f30004 	mvnseq	r0, r4
    3690:	246e9f50 	strbtcs	r9, [lr], #-3920	; 0xf50
    3694:	24940800 	ldrcs	r0, [r4], #2048	; 0x800
    3698:	00010800 	andeq	r0, r1, r0, lsl #16
    369c:	00249450 	eoreq	r9, r4, r0, asr r4
    36a0:	00249b08 	eoreq	r9, r4, r8, lsl #22
    36a4:	52000108 	andpl	r0, r0, #8, 2
    36a8:	0800249b 	stmdaeq	r0, {r0, r1, r3, r4, r7, sl, sp}
    36ac:	080024d2 	stmdaeq	r0, {r1, r4, r6, r7, sl, sp}
    36b0:	01f30004 	mvnseq	r0, r4
    36b4:	24d29f50 	ldrbcs	r9, [r2], #3920	; 0xf50
    36b8:	24d50800 	ldrbcs	r0, [r5], #2048	; 0x800
    36bc:	00010800 	andeq	r0, r1, r0, lsl #16
    36c0:	0024d550 	eoreq	sp, r4, r0, asr r5
    36c4:	0024ec08 	eoreq	lr, r4, r8, lsl #24
    36c8:	f3000408 	vshl.u8	d0, d8, d0
    36cc:	009f5001 	addseq	r5, pc, r1
    36d0:	00000000 	andeq	r0, r0, r0
    36d4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    36d8:	d2080024 	andle	r0, r8, #36	; 0x24
    36dc:	01080024 	tsteq	r8, r4, lsr #32
    36e0:	24d85500 	ldrbcs	r5, [r8], #1280	; 0x500
    36e4:	24ec0800 	strbtcs	r0, [ip], #2048	; 0x800
    36e8:	00010800 	andeq	r0, r1, r0, lsl #16
    36ec:	00000055 	andeq	r0, r0, r5, asr r0
    36f0:	00000000 	andeq	r0, r0, r0
    36f4:	00246000 	eoreq	r6, r4, r0
    36f8:	00246608 	eoreq	r6, r4, r8, lsl #12
    36fc:	30000208 	andcc	r0, r0, r8, lsl #4
    3700:	00246e9f 	mlaeq	r4, pc, lr, r6	; <UNPREDICTABLE>
    3704:	0024cc08 	eoreq	ip, r4, r8, lsl #24
    3708:	30000208 	andcc	r0, r0, r8, lsl #4
    370c:	0024cc9f 	mlaeq	r4, pc, ip, ip	; <UNPREDICTABLE>
    3710:	0024d208 	eoreq	sp, r4, r8, lsl #4
    3714:	50000108 	andpl	r0, r0, r8, lsl #2
    3718:	080024d2 	stmdaeq	r0, {r1, r4, r6, r7, sl, sp}
    371c:	080024ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, sp}
    3720:	9f300002 	svcls	0x00300002
	...
    372c:	0800249c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp}
    3730:	080024d2 	stmdaeq	r0, {r1, r4, r6, r7, sl, sp}
    3734:	d8550001 	ldmdale	r5, {r0}^
    3738:	ec080024 	stc	0, cr0, [r8], {36}	; 0x24
    373c:	01080024 	tsteq	r8, r4, lsr #32
    3740:	00005500 	andeq	r5, r0, r0, lsl #10
    3744:	00000000 	andeq	r0, r0, r0
    3748:	24ec0000 	strbtcs	r0, [ip], #0
    374c:	25220800 	strcs	r0, [r2, #-2048]!	; 0x800
    3750:	00010800 	andeq	r0, r1, r0, lsl #16
    3754:	00252250 	eoreq	r2, r5, r0, asr r2
    3758:	00257e08 	eoreq	r7, r5, r8, lsl #28
    375c:	f3000408 	vshl.u8	d0, d8, d0
    3760:	009f5001 	addseq	r5, pc, r1
    3764:	00000000 	andeq	r0, r0, r0
    3768:	26000000 	strcs	r0, [r0], -r0
    376c:	30080025 	andcc	r0, r8, r5, lsr #32
    3770:	08080025 	stmdaeq	r8, {r0, r2, r5}
    3774:	30007700 	andcc	r7, r0, r0, lsl #14
    3778:	1aff0829 	bne	fffc5824 <_estack+0xdff95824>
    377c:	0025449f 	mlaeq	r5, pc, r4, r4	; <UNPREDICTABLE>
    3780:	00257e08 	eoreq	r7, r5, r8, lsl #28
    3784:	77000808 	strvc	r0, [r0, -r8, lsl #16]
    3788:	08293000 	stmdaeq	r9!, {ip, sp}
    378c:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    3790:	00000000 	andeq	r0, r0, r0
    3794:	80000000 	andhi	r0, r0, r0
    3798:	c4080025 	strgt	r0, [r8], #-37	; 0x25
    379c:	01080025 	tsteq	r8, r5, lsr #32
    37a0:	25c45000 	strbcs	r5, [r4]
    37a4:	26320800 	ldrtcs	r0, [r2], -r0, lsl #16
    37a8:	00020800 	andeq	r0, r2, r0, lsl #16
    37ac:	2632007d 			; <UNDEFINED> instruction: 0x2632007d
    37b0:	26360800 	ldrtcs	r0, [r6], -r0, lsl #16
    37b4:	00020800 	andeq	r0, r2, r0, lsl #16
    37b8:	26364891 			; <UNDEFINED> instruction: 0x26364891
    37bc:	28fc0800 	ldmcs	ip!, {fp}^
    37c0:	00020800 	andeq	r0, r2, r0, lsl #16
    37c4:	0000007d 	andeq	r0, r0, sp, ror r0
    37c8:	00000000 	andeq	r0, r0, r0
    37cc:	25800000 	strcs	r0, [r0]
    37d0:	25c40800 	strbcs	r0, [r4, #2048]	; 0x800
    37d4:	00010800 	andeq	r0, r1, r0, lsl #16
    37d8:	0025c451 	eoreq	ip, r5, r1, asr r4
    37dc:	0028fc08 	eoreq	pc, r8, r8, lsl #24
    37e0:	f3000408 	vshl.u8	d0, d8, d0
    37e4:	009f5101 	addseq	r5, pc, r1, lsl #2
    37e8:	00000000 	andeq	r0, r0, r0
    37ec:	80000000 	andhi	r0, r0, r0
    37f0:	ae080025 	cdpge	0, 0, cr0, cr8, cr5, {1}
    37f4:	01080025 	tsteq	r8, r5, lsr #32
    37f8:	25ae5200 	strcs	r5, [lr, #512]!	; 0x200
    37fc:	28fc0800 	ldmcs	ip!, {fp}^
    3800:	00020800 	andeq	r0, r2, r0, lsl #16
    3804:	00004c91 	muleq	r0, r1, ip
    3808:	00000000 	andeq	r0, r0, r0
    380c:	25800000 	strcs	r0, [r0]
    3810:	25c40800 	strbcs	r0, [r4, #2048]	; 0x800
    3814:	00020800 	andeq	r0, r2, r0, lsl #16
    3818:	25c49f30 	strbcs	r9, [r4, #3888]	; 0xf30
    381c:	26180800 	ldrcs	r0, [r8], -r0, lsl #16
    3820:	00010800 	andeq	r0, r1, r0, lsl #16
    3824:	00261859 	eoreq	r1, r6, r9, asr r8
    3828:	00262208 	eoreq	r2, r6, r8, lsl #4
    382c:	5a000108 	bpl	3c54 <_Min_Stack_Size+0x3854>
    3830:	08002622 	stmdaeq	r0, {r1, r5, r9, sl, sp}
    3834:	08002636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, sp}
    3838:	36560001 	ldrbcc	r0, [r6], -r1
    383c:	d0080026 	andle	r0, r8, r6, lsr #32
    3840:	01080026 	tsteq	r8, r6, lsr #32
    3844:	26d05900 	ldrbcs	r5, [r0], r0, lsl #18
    3848:	276a0800 	strbcs	r0, [sl, -r0, lsl #16]!
    384c:	00010800 	andeq	r0, r1, r0, lsl #16
    3850:	00276a5a 	eoreq	r6, r7, sl, asr sl
    3854:	0028fc08 	eoreq	pc, r8, r8, lsl #24
    3858:	59000108 	stmdbpl	r0, {r3, r8}
	...
    3864:	08002580 	stmdaeq	r0, {r7, r8, sl, sp}
    3868:	080025c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp}
    386c:	9f350002 	svcls	0x00350002
	...
    3878:	080025c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp}
    387c:	0800262a 	stmdaeq	r0, {r1, r3, r5, r9, sl, sp}
    3880:	9f310002 	svcls	0x00310002
    3884:	08002636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, sp}
    3888:	080028fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp}
    388c:	9f310002 	svcls	0x00310002
	...
    3898:	080025c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp}
    389c:	080025ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, sp}
    38a0:	78750003 	ldmdavc	r5!, {r0, r1}^
    38a4:	0025ce9f 	mlaeq	r5, pc, lr, ip	; <UNPREDICTABLE>
    38a8:	0025e608 	eoreq	lr, r5, r8, lsl #12
    38ac:	75000308 	strvc	r0, [r0, #-776]	; 0x308
    38b0:	26369f0c 	ldrtcs	r9, [r6], -ip, lsl #30
    38b4:	26d00800 	ldrbcs	r0, [r0], r0, lsl #16
    38b8:	00030800 	andeq	r0, r3, r0, lsl #16
    38bc:	6a9f7875 	bvs	fe7e1a98 <_estack+0xde7b1a98>
    38c0:	6e080027 	cdpvs	0, 0, cr0, cr8, cr7, {1}
    38c4:	03080027 	movweq	r0, #32807	; 0x8027
    38c8:	9f0c7500 	svcls	0x000c7500
	...
    38d4:	080025c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp}
    38d8:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
    38dc:	9f300002 	svcls	0x00300002
    38e0:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
    38e4:	080025e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, sp}
    38e8:	36500001 	ldrbcc	r0, [r0], -r1
    38ec:	d0080026 	andle	r0, r8, r6, lsr #32
    38f0:	02080026 	andeq	r0, r8, #38	; 0x26
    38f4:	6a9f3000 	bvs	fe7cf8fc <_estack+0xde79f8fc>
    38f8:	8a080027 	bhi	20399c <_Min_Stack_Size+0x20359c>
    38fc:	01080027 	tsteq	r8, r7, lsr #32
    3900:	00005000 	andeq	r5, r0, r0
    3904:	00000000 	andeq	r0, r0, r0
    3908:	26360000 	ldrtcs	r0, [r6], -r0
    390c:	26d00800 	ldrbcs	r0, [r0], r0, lsl #16
    3910:	00020800 	andeq	r0, r2, r0, lsl #16
    3914:	00009f31 	andeq	r9, r0, r1, lsr pc
    3918:	00000000 	andeq	r0, r0, r0
    391c:	26360000 	ldrtcs	r0, [r6], -r0
    3920:	26d00800 	ldrbcs	r0, [r0], r0, lsl #16
    3924:	00030800 	andeq	r0, r3, r0, lsl #16
    3928:	009f7875 	addseq	r7, pc, r5, ror r8	; <UNPREDICTABLE>
    392c:	00000000 	andeq	r0, r0, r0
    3930:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    3934:	d0080026 	andle	r0, r8, r6, lsr #32
    3938:	01080026 	tsteq	r8, r6, lsr #32
    393c:	00005200 	andeq	r5, r0, r0, lsl #4
    3940:	00000000 	andeq	r0, r0, r0
    3944:	265c0000 	ldrbcs	r0, [ip], -r0
    3948:	26d00800 	ldrbcs	r0, [r0], r0, lsl #16
    394c:	00010800 	andeq	r0, r1, r0, lsl #16
    3950:	00000056 	andeq	r0, r0, r6, asr r0
    3954:	00000000 	andeq	r0, r0, r0
    3958:	00266800 	eoreq	r6, r6, r0, lsl #16
    395c:	0026d008 	eoreq	sp, r6, r8
    3960:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    396c:	08002668 	stmdaeq	r0, {r3, r5, r6, r9, sl, sp}
    3970:	080026d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp}
    3974:	78750003 	ldmdavc	r5!, {r0, r1}^
    3978:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    397c:	00000000 	andeq	r0, r0, r0
    3980:	00269c00 	eoreq	r9, r6, r0, lsl #24
    3984:	0026aa08 	eoreq	sl, r6, r8, lsl #20
    3988:	30000208 	andcc	r0, r0, r8, lsl #4
    398c:	0026aa9f 	mlaeq	r6, pc, sl, sl	; <UNPREDICTABLE>
    3990:	0026bc08 	eoreq	fp, r6, r8, lsl #24
    3994:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3998:	080026cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, sp}
    399c:	080026d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp}
    39a0:	9f300002 	svcls	0x00300002
	...
    39ac:	080025de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, sp}
    39b0:	0800262a 	stmdaeq	r0, {r1, r3, r5, r9, sl, sp}
    39b4:	9f320002 	svcls	0x00320002
    39b8:	080026d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp}
    39bc:	080028fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp}
    39c0:	9f320002 	svcls	0x00320002
	...
    39cc:	080025de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, sp}
    39d0:	080025f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, sp}
    39d4:	6a570001 	bvs	15c39e0 <_Min_Stack_Size+0x15c35e0>
    39d8:	e6080027 	str	r0, [r8], -r7, lsr #32
    39dc:	01080027 	tsteq	r8, r7, lsr #32
    39e0:	00005700 	andeq	r5, r0, r0, lsl #14
    39e4:	00000000 	andeq	r0, r0, r0
    39e8:	25de0000 	ldrbcs	r0, [lr]
    39ec:	25f00800 	ldrbcs	r0, [r0, #2048]!	; 0x800
    39f0:	00090800 	andeq	r0, r9, r0, lsl #16
    39f4:	24350079 	ldrtcs	r0, [r5], #-121	; 0x79
    39f8:	2206007d 	andcs	r0, r6, #125	; 0x7d
    39fc:	00276a9f 	mlaeq	r7, pc, sl, r6	; <UNPREDICTABLE>
    3a00:	0027e608 	eoreq	lr, r7, r8, lsl #12
    3a04:	79000908 	stmdbvc	r0, {r3, r8, fp}
    3a08:	7d243500 	cfstr32vc	mvfx3, [r4, #-0]
    3a0c:	9f220600 	svcls	0x00220600
	...
    3a18:	080025de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, sp}
    3a1c:	080025e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, sp}
    3a20:	9f300002 	svcls	0x00300002
    3a24:	080025e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, sp}
    3a28:	080025f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, sp}
    3a2c:	6a560001 	bvs	1583a38 <_Min_Stack_Size+0x1583638>
    3a30:	e6080027 	str	r0, [r8], -r7, lsr #32
    3a34:	02080027 	andeq	r0, r8, #39	; 0x27
    3a38:	009f3000 	addseq	r3, pc, r0
    3a3c:	00000000 	andeq	r0, r0, r0
    3a40:	6a000000 	bvs	3a48 <_Min_Stack_Size+0x3648>
    3a44:	e6080027 	str	r0, [r8], -r7, lsr #32
    3a48:	02080027 	andeq	r0, r8, #39	; 0x27
    3a4c:	009f3200 	addseq	r3, pc, r0, lsl #4
    3a50:	00000000 	andeq	r0, r0, r0
    3a54:	6a000000 	bvs	3a5c <_Min_Stack_Size+0x365c>
    3a58:	e6080027 	str	r0, [r8], -r7, lsr #32
    3a5c:	01080027 	tsteq	r8, r7, lsr #32
    3a60:	00005700 	andeq	r5, r0, r0, lsl #14
    3a64:	00000000 	andeq	r0, r0, r0
    3a68:	276a0000 	strbcs	r0, [sl, -r0]!
    3a6c:	27e60800 	strbcs	r0, [r6, r0, lsl #16]!
    3a70:	00090800 	andeq	r0, r9, r0, lsl #16
    3a74:	24350079 	ldrtcs	r0, [r5], #-121	; 0x79
    3a78:	2206007d 	andcs	r0, r6, #125	; 0x7d
    3a7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a80:	00000000 	andeq	r0, r0, r0
    3a84:	00279a00 	eoreq	r9, r7, r0, lsl #20
    3a88:	0027e608 	eoreq	lr, r7, r8, lsl #12
    3a8c:	52000108 	andpl	r0, r0, #8, 2
	...
    3a98:	08002784 	stmdaeq	r0, {r2, r7, r8, r9, sl, sp}
    3a9c:	080027e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, sp}
    3aa0:	005a0001 	subseq	r0, sl, r1
    3aa4:	00000000 	andeq	r0, r0, r0
    3aa8:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    3aac:	e6080027 	str	r0, [r8], -r7, lsr #32
    3ab0:	01080027 	tsteq	r8, r7, lsr #32
    3ab4:	00005600 	andeq	r5, r0, r0, lsl #12
    3ab8:	00000000 	andeq	r0, r0, r0
    3abc:	278e0000 	strcs	r0, [lr, r0]
    3ac0:	27e60800 	strbcs	r0, [r6, r0, lsl #16]!
    3ac4:	00010800 	andeq	r0, r1, r0, lsl #16
    3ac8:	00000057 	andeq	r0, r0, r7, asr r0
    3acc:	00000000 	andeq	r0, r0, r0
    3ad0:	0027bc00 	eoreq	fp, r7, r0, lsl #24
    3ad4:	0027c608 	eoreq	ip, r7, r8, lsl #12
    3ad8:	30000208 	andcc	r0, r0, r8, lsl #4
    3adc:	0027c69f 	mlaeq	r7, pc, r6, ip	; <UNPREDICTABLE>
    3ae0:	0027d608 	eoreq	sp, r7, r8, lsl #12
    3ae4:	53000108 	movwpl	r0, #264	; 0x108
	...
    3af0:	080025f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, sp}
    3af4:	0800262a 	stmdaeq	r0, {r1, r3, r5, r9, sl, sp}
    3af8:	9f320002 	svcls	0x00320002
    3afc:	080026d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp}
    3b00:	0800276a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, sp}
    3b04:	9f320002 	svcls	0x00320002
    3b08:	080027e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, sp}
    3b0c:	080028fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp}
    3b10:	9f320002 	svcls	0x00320002
	...
    3b1c:	080025f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, sp}
    3b20:	080025fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, sp}
    3b24:	e6570001 	ldrb	r0, [r7], -r1
    3b28:	64080027 	strvs	r0, [r8], #-39	; 0x27
    3b2c:	01080028 	tsteq	r8, r8, lsr #32
    3b30:	28645700 	stmdacs	r4!, {r8, r9, sl, ip, lr}^
    3b34:	28720800 	ldmdacs	r2!, {fp}^
    3b38:	00030800 	andeq	r0, r3, r0, lsl #16
    3b3c:	009f787e 	addseq	r7, pc, lr, ror r8	; <UNPREDICTABLE>
    3b40:	00000000 	andeq	r0, r0, r0
    3b44:	f2000000 	vhadd.s8	d0, d0, d0
    3b48:	04080025 	streq	r0, [r8], #-37	; 0x25
    3b4c:	09080026 	stmdbeq	r8, {r1, r2, r5}
    3b50:	35007900 	strcc	r7, [r0, #-2304]	; 0x900
    3b54:	06007d24 	streq	r7, [r0], -r4, lsr #26
    3b58:	27e69f22 	strbcs	r9, [r6, r2, lsr #30]!
    3b5c:	286a0800 	stmdacs	sl!, {fp}^
    3b60:	00090800 	andeq	r0, r9, r0, lsl #16
    3b64:	24350079 	ldrtcs	r0, [r5], #-121	; 0x79
    3b68:	2206007d 	andcs	r0, r6, #125	; 0x7d
    3b6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b70:	00000000 	andeq	r0, r0, r0
    3b74:	0025f200 	eoreq	pc, r5, r0, lsl #4
    3b78:	0025fa08 	eoreq	pc, r5, r8, lsl #20
    3b7c:	30000208 	andcc	r0, r0, r8, lsl #4
    3b80:	0025fa9f 	mlaeq	r5, pc, sl, pc	; <UNPREDICTABLE>
    3b84:	00260608 	eoreq	r0, r6, r8, lsl #12
    3b88:	56000108 	strpl	r0, [r0], -r8, lsl #2
    3b8c:	080027e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, sp}
    3b90:	08002860 	stmdaeq	r0, {r5, r6, fp, sp}
    3b94:	9f300002 	svcls	0x00300002
    3b98:	08002860 	stmdaeq	r0, {r5, r6, fp, sp}
    3b9c:	0800286c 	stmdaeq	r0, {r2, r3, r5, r6, fp, sp}
    3ba0:	00560001 	subseq	r0, r6, r1
    3ba4:	00000000 	andeq	r0, r0, r0
    3ba8:	e6000000 	str	r0, [r0], -r0
    3bac:	72080027 	andvc	r0, r8, #39	; 0x27
    3bb0:	02080028 	andeq	r0, r8, #40	; 0x28
    3bb4:	009f3200 	addseq	r3, pc, r0, lsl #4
    3bb8:	00000000 	andeq	r0, r0, r0
    3bbc:	e6000000 	str	r0, [r0], -r0
    3bc0:	64080027 	strvs	r0, [r8], #-39	; 0x27
    3bc4:	01080028 	tsteq	r8, r8, lsr #32
    3bc8:	28645700 	stmdacs	r4!, {r8, r9, sl, ip, lr}^
    3bcc:	28720800 	ldmdacs	r2!, {fp}^
    3bd0:	00030800 	andeq	r0, r3, r0, lsl #16
    3bd4:	009f787e 	addseq	r7, pc, lr, ror r8	; <UNPREDICTABLE>
    3bd8:	00000000 	andeq	r0, r0, r0
    3bdc:	e6000000 	str	r0, [r0], -r0
    3be0:	6a080027 	bvs	203c84 <_Min_Stack_Size+0x203884>
    3be4:	09080028 	stmdbeq	r8, {r3, r5}
    3be8:	35007900 	strcc	r7, [r0, #-2304]	; 0x900
    3bec:	06007d24 	streq	r7, [r0], -r4, lsr #26
    3bf0:	00009f22 	andeq	r9, r0, r2, lsr #30
    3bf4:	00000000 	andeq	r0, r0, r0
    3bf8:	28160000 	ldmdacs	r6, {}	; <UNPREDICTABLE>
    3bfc:	28720800 	ldmdacs	r2!, {fp}^
    3c00:	00010800 	andeq	r0, r1, r0, lsl #16
    3c04:	00000052 	andeq	r0, r0, r2, asr r0
    3c08:	00000000 	andeq	r0, r0, r0
    3c0c:	00280000 	eoreq	r0, r8, r0
    3c10:	00287208 	eoreq	r7, r8, r8, lsl #4
    3c14:	5a000108 	bpl	403c <_Min_Stack_Size+0x3c3c>
	...
    3c20:	0800280a 	stmdaeq	r0, {r1, r3, fp, sp}
    3c24:	0800286c 	stmdaeq	r0, {r2, r3, r5, r6, fp, sp}
    3c28:	00560001 	subseq	r0, r6, r1
    3c2c:	00000000 	andeq	r0, r0, r0
    3c30:	0a000000 	beq	3c38 <_Min_Stack_Size+0x3838>
    3c34:	64080028 	strvs	r0, [r8], #-40	; 0x28
    3c38:	01080028 	tsteq	r8, r8, lsr #32
    3c3c:	28645700 	stmdacs	r4!, {r8, r9, sl, ip, lr}^
    3c40:	28720800 	ldmdacs	r2!, {fp}^
    3c44:	00030800 	andeq	r0, r3, r0, lsl #16
    3c48:	009f787e 	addseq	r7, pc, lr, ror r8	; <UNPREDICTABLE>
    3c4c:	00000000 	andeq	r0, r0, r0
    3c50:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3c54:	42080028 	andmi	r0, r8, #40	; 0x28
    3c58:	02080028 	andeq	r0, r8, #40	; 0x28
    3c5c:	429f3000 	addsmi	r3, pc, #0
    3c60:	52080028 	andpl	r0, r8, #40	; 0x28
    3c64:	01080028 	tsteq	r8, r8, lsr #32
    3c68:	00005300 	andeq	r5, r0, r0, lsl #6
    3c6c:	00000000 	andeq	r0, r0, r0
    3c70:	26040000 	strcs	r0, [r4], -r0
    3c74:	262a0800 	strtcs	r0, [sl], -r0, lsl #16
    3c78:	00020800 	andeq	r0, r2, r0, lsl #16
    3c7c:	26d09f34 			; <UNDEFINED> instruction: 0x26d09f34
    3c80:	276a0800 	strbcs	r0, [sl, -r0, lsl #16]!
    3c84:	00020800 	andeq	r0, r2, r0, lsl #16
    3c88:	286a9f34 	stmdacs	sl!, {r2, r4, r5, r8, r9, sl, fp, ip, pc}^
    3c8c:	28fc0800 	ldmcs	ip!, {fp}^
    3c90:	00020800 	andeq	r0, r2, r0, lsl #16
    3c94:	00009f34 	andeq	r9, r0, r4, lsr pc
    3c98:	00000000 	andeq	r0, r0, r0
    3c9c:	26040000 	strcs	r0, [r4], -r0
    3ca0:	262a0800 	strtcs	r0, [sl], -r0, lsl #16
    3ca4:	00060800 	andeq	r0, r6, r0, lsl #16
    3ca8:	0000fc03 	andeq	pc, r0, r3, lsl #24
    3cac:	26d09f20 	ldrbcs	r9, [r0], r0, lsr #30
    3cb0:	276a0800 	strbcs	r0, [sl, -r0, lsl #16]!
    3cb4:	00060800 	andeq	r0, r6, r0, lsl #16
    3cb8:	0000fc03 	andeq	pc, r0, r3, lsl #24
    3cbc:	286a9f20 	stmdacs	sl!, {r5, r8, r9, sl, fp, ip, pc}^
    3cc0:	28fc0800 	ldmcs	ip!, {fp}^
    3cc4:	00060800 	andeq	r0, r6, r0, lsl #16
    3cc8:	0000fc03 	andeq	pc, r0, r3, lsl #24
    3ccc:	00009f20 	andeq	r9, r0, r0, lsr #30
    3cd0:	00000000 	andeq	r0, r0, r0
    3cd4:	26040000 	strcs	r0, [r4], -r0
    3cd8:	260c0800 	strcs	r0, [ip], -r0, lsl #16
    3cdc:	00090800 	andeq	r0, r9, r0, lsl #16
    3ce0:	24350079 	ldrtcs	r0, [r5], #-121	; 0x79
    3ce4:	2206007d 	andcs	r0, r6, #125	; 0x7d
    3ce8:	00286a9f 	mlaeq	r8, pc, sl, r6	; <UNPREDICTABLE>
    3cec:	00287208 	eoreq	r7, r8, r8, lsl #4
    3cf0:	79000908 	stmdbvc	r0, {r3, r8, fp}
    3cf4:	7d243500 	cfstr32vc	mvfx3, [r4, #-0]
    3cf8:	9f220600 	svcls	0x00220600
	...
    3d04:	08002604 	stmdaeq	r0, {r2, r9, sl, sp}
    3d08:	0800260c 	stmdaeq	r0, {r2, r3, r9, sl, sp}
    3d0c:	9f300002 	svcls	0x00300002
    3d10:	0800260c 	stmdaeq	r0, {r2, r3, r9, sl, sp}
    3d14:	0800261a 	stmdaeq	r0, {r1, r3, r4, r9, sl, sp}
    3d18:	6a560001 	bvs	1583d24 <_Min_Stack_Size+0x1583924>
    3d1c:	fc080028 	stc2	0, cr0, [r8], {40}	; 0x28
    3d20:	02080028 	andeq	r0, r8, #40	; 0x28
    3d24:	009f3000 	addseq	r3, pc, r0
    3d28:	00000000 	andeq	r0, r0, r0
    3d2c:	d2000000 	andle	r0, r0, #0
    3d30:	dc080028 	stcle	0, cr0, [r8], {40}	; 0x28
    3d34:	02080028 	andeq	r0, r8, #40	; 0x28
    3d38:	dc9f3000 	ldcle	0, cr3, [pc], {0}
    3d3c:	ec080028 	stc	0, cr0, [r8], {40}	; 0x28
    3d40:	01080028 	tsteq	r8, r8, lsr #32
    3d44:	00005200 	andeq	r5, r0, r0, lsl #4
    3d48:	00000000 	andeq	r0, r0, r0
    3d4c:	26180000 	ldrcs	r0, [r8], -r0
    3d50:	262a0800 	strtcs	r0, [sl], -r0, lsl #16
    3d54:	00020800 	andeq	r0, r2, r0, lsl #16
    3d58:	26d09f33 			; <UNDEFINED> instruction: 0x26d09f33
    3d5c:	276a0800 	strbcs	r0, [sl, -r0, lsl #16]!
    3d60:	00020800 	andeq	r0, r2, r0, lsl #16
    3d64:	00009f33 	andeq	r9, r0, r3, lsr pc
    3d68:	00000000 	andeq	r0, r0, r0
    3d6c:	26180000 	ldrcs	r0, [r8], -r0
    3d70:	262a0800 	strtcs	r0, [sl], -r0, lsl #16
    3d74:	00060800 	andeq	r0, r6, r0, lsl #16
    3d78:	0001d003 	andeq	sp, r1, r3
    3d7c:	26d09f20 	ldrbcs	r9, [r0], r0, lsr #30
    3d80:	276a0800 	strbcs	r0, [sl, -r0, lsl #16]!
    3d84:	00060800 	andeq	r0, r6, r0, lsl #16
    3d88:	0001d003 	andeq	sp, r1, r3
    3d8c:	00009f20 	andeq	r9, r0, r0, lsr #30
    3d90:	00000000 	andeq	r0, r0, r0
    3d94:	26180000 	ldrcs	r0, [r8], -r0
    3d98:	262a0800 	strtcs	r0, [sl], -r0, lsl #16
    3d9c:	00090800 	andeq	r0, r9, r0, lsl #16
    3da0:	2435007a 	ldrtcs	r0, [r5], #-122	; 0x7a
    3da4:	2206007d 	andcs	r0, r6, #125	; 0x7d
    3da8:	0026d09f 	mlaeq	r6, pc, r0, sp	; <UNPREDICTABLE>
    3dac:	00276a08 	eoreq	r6, r7, r8, lsl #20
    3db0:	7a000908 	bvc	61d8 <_Min_Stack_Size+0x5dd8>
    3db4:	7d243500 	cfstr32vc	mvfx3, [r4, #-0]
    3db8:	9f220600 	svcls	0x00220600
	...
    3dc4:	08002618 	stmdaeq	r0, {r3, r4, r9, sl, sp}
    3dc8:	0800261e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, sp}
    3dcc:	9f300002 	svcls	0x00300002
    3dd0:	0800261e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, sp}
    3dd4:	08002622 	stmdaeq	r0, {r1, r5, r9, sl, sp}
    3dd8:	d0560001 	subsle	r0, r6, r1
    3ddc:	6a080026 	bvs	203e7c <_Min_Stack_Size+0x203a7c>
    3de0:	02080027 	andeq	r0, r8, #39	; 0x27
    3de4:	009f3000 	addseq	r3, pc, r0
    3de8:	00000000 	andeq	r0, r0, r0
    3dec:	d0000000 	andle	r0, r0, r0
    3df0:	6a080026 	bvs	203e90 <_Min_Stack_Size+0x203a90>
    3df4:	02080027 	andeq	r0, r8, #39	; 0x27
    3df8:	009f3300 	addseq	r3, pc, r0, lsl #6
    3dfc:	00000000 	andeq	r0, r0, r0
    3e00:	d0000000 	andle	r0, r0, r0
    3e04:	6a080026 	bvs	203ea4 <_Min_Stack_Size+0x203aa4>
    3e08:	06080027 	streq	r0, [r8], -r7, lsr #32
    3e0c:	01d00300 	bicseq	r0, r0, r0, lsl #6
    3e10:	009f2000 	addseq	r2, pc, r0
    3e14:	00000000 	andeq	r0, r0, r0
    3e18:	d0000000 	andle	r0, r0, r0
    3e1c:	6a080026 	bvs	203ebc <_Min_Stack_Size+0x203abc>
    3e20:	09080027 	stmdbeq	r8, {r0, r1, r2, r5}
    3e24:	35007a00 	strcc	r7, [r0, #-2560]	; 0xa00
    3e28:	06007d24 	streq	r7, [r0], -r4, lsr #26
    3e2c:	00009f22 	andeq	r9, r0, r2, lsr #30
    3e30:	00000000 	andeq	r0, r0, r0
    3e34:	27160000 	ldrcs	r0, [r6, -r0]
    3e38:	276a0800 	strbcs	r0, [sl, -r0, lsl #16]!
    3e3c:	00010800 	andeq	r0, r1, r0, lsl #16
    3e40:	00000054 	andeq	r0, r0, r4, asr r0
    3e44:	00000000 	andeq	r0, r0, r0
    3e48:	0026ea00 	eoreq	lr, r6, r0, lsl #20
    3e4c:	00276a08 	eoreq	r6, r7, r8, lsl #20
    3e50:	59000108 	stmdbpl	r0, {r3, r8}
	...
    3e5c:	08002704 	stmdaeq	r0, {r2, r8, r9, sl, sp}
    3e60:	0800276a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, sp}
    3e64:	00560001 	subseq	r0, r6, r1
    3e68:	00000000 	andeq	r0, r0, r0
    3e6c:	04000000 	streq	r0, [r0], #-0
    3e70:	6a080027 	bvs	203f14 <_Min_Stack_Size+0x203b14>
    3e74:	06080027 	streq	r0, [r8], -r7, lsr #32
    3e78:	01d00300 	bicseq	r0, r0, r0, lsl #6
    3e7c:	009f2000 	addseq	r2, pc, r0
    3e80:	00000000 	andeq	r0, r0, r0
    3e84:	40000000 	andmi	r0, r0, r0
    3e88:	4a080027 	bmi	203f2c <_Min_Stack_Size+0x203b2c>
    3e8c:	02080027 	andeq	r0, r8, #39	; 0x27
    3e90:	4a9f3000 	bmi	fe7cfe98 <_estack+0xde79fe98>
    3e94:	5a080027 	bpl	203f38 <_Min_Stack_Size+0x203b38>
    3e98:	01080027 	tsteq	r8, r7, lsr #32
    3e9c:	00005300 	andeq	r5, r0, r0, lsl #6
    3ea0:	00000000 	andeq	r0, r0, r0
    3ea4:	295c0000 	ldmdbcs	ip, {}^	; <UNPREDICTABLE>
    3ea8:	296e0800 	stmdbcs	lr!, {fp}^
    3eac:	00010800 	andeq	r0, r1, r0, lsl #16
    3eb0:	00296e52 	eoreq	r6, r9, r2, asr lr
    3eb4:	00297808 	eoreq	r7, r9, r8, lsl #16
    3eb8:	71000308 	tstvc	r0, r8, lsl #6
    3ebc:	298c9f78 	stmibcs	ip, {r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
    3ec0:	29920800 	ldmibcs	r2, {fp}
    3ec4:	00010800 	andeq	r0, r1, r0, lsl #16
    3ec8:	00000052 	andeq	r0, r0, r2, asr r0
    3ecc:	00000000 	andeq	r0, r0, r0
    3ed0:	00299400 	eoreq	r9, r9, r0, lsl #8
    3ed4:	0029ab08 	eoreq	sl, r9, r8, lsl #22
    3ed8:	50000108 	andpl	r0, r0, r8, lsl #2
    3edc:	080029ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, fp, sp}
    3ee0:	08002a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp, sp}
    3ee4:	01f30004 	mvnseq	r0, r4
    3ee8:	2a1c9f50 	bcs	72bc30 <_Min_Stack_Size+0x72b830>
    3eec:	2a1f0800 	bcs	7c5ef4 <_Min_Stack_Size+0x7c5af4>
    3ef0:	00010800 	andeq	r0, r1, r0, lsl #16
    3ef4:	002a1f50 	eoreq	r1, sl, r0, asr pc
    3ef8:	002a2208 	eoreq	r2, sl, r8, lsl #4
    3efc:	f3000408 	vshl.u8	d0, d8, d0
    3f00:	009f5001 	addseq	r5, pc, r1
    3f04:	00000000 	andeq	r0, r0, r0
    3f08:	94000000 	strls	r0, [r0], #-0
    3f0c:	a6080029 	strge	r0, [r8], -r9, lsr #32
    3f10:	01080029 	tsteq	r8, r9, lsr #32
    3f14:	29a65100 	stmibcs	r6!, {r8, ip, lr}
    3f18:	29c80800 	stmibcs	r8, {fp}^
    3f1c:	00010800 	andeq	r0, r1, r0, lsl #16
    3f20:	0029c855 	eoreq	ip, r9, r5, asr r8
    3f24:	002a0808 	eoreq	r0, sl, r8, lsl #16
    3f28:	f3000408 	vshl.u8	d0, d8, d0
    3f2c:	089f5101 	ldmeq	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
    3f30:	1808002a 	stmdane	r8, {r1, r3, r5}
    3f34:	0108002a 	tsteq	r8, sl, lsr #32
    3f38:	2a185500 	bcs	619340 <_Min_Stack_Size+0x618f40>
    3f3c:	2a1b0800 	bcs	6c5f44 <_Min_Stack_Size+0x6c5b44>
    3f40:	00030800 	andeq	r0, r3, r0, lsl #16
    3f44:	1b9f7f72 	blne	fe7e3d14 <_estack+0xde7b3d14>
    3f48:	1c08002a 	stcne	0, cr0, [r8], {42}	; 0x2a
    3f4c:	0408002a 	streq	r0, [r8], #-42	; 0x2a
    3f50:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3f54:	002a1c9f 	mlaeq	sl, pc, ip, r1	; <UNPREDICTABLE>
    3f58:	002a1f08 	eoreq	r1, sl, r8, lsl #30
    3f5c:	51000108 	tstpl	r0, r8, lsl #2
    3f60:	08002a1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r9, fp, sp}
    3f64:	08002a22 	stmdaeq	r0, {r1, r5, r9, fp, sp}
    3f68:	00550001 	subseq	r0, r5, r1
    3f6c:	00000000 	andeq	r0, r0, r0
    3f70:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    3f74:	02080029 	andeq	r0, r8, #41	; 0x29
    3f78:	0108002a 	tsteq	r8, sl, lsr #32
    3f7c:	2a025500 	bcs	99384 <_Min_Stack_Size+0x98f84>
    3f80:	2a070800 	bcs	1c5f88 <_Min_Stack_Size+0x1c5b88>
    3f84:	00020800 	andeq	r0, r2, r0, lsl #16
    3f88:	00000472 	andeq	r0, r0, r2, ror r4
    3f8c:	00000000 	andeq	r0, r0, r0
    3f90:	29f20000 	ldmibcs	r2!, {}^	; <UNPREDICTABLE>
    3f94:	2a020800 	bcs	85f9c <_Min_Stack_Size+0x85b9c>
    3f98:	00010800 	andeq	r0, r1, r0, lsl #16
    3f9c:	002a0255 	eoreq	r0, sl, r5, asr r2
    3fa0:	002a0708 	eoreq	r0, sl, r8, lsl #14
    3fa4:	72000208 	andvc	r0, r0, #8, 4	; 0x80000000
    3fa8:	00000004 	andeq	r0, r0, r4
    3fac:	00000000 	andeq	r0, r0, r0
    3fb0:	002a2400 	eoreq	r2, sl, r0, lsl #8
    3fb4:	002a3b08 	eoreq	r3, sl, r8, lsl #22
    3fb8:	50000108 	andpl	r0, r0, r8, lsl #2
    3fbc:	08002a3b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r9, fp, sp}
    3fc0:	08002a3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, fp, sp}
    3fc4:	01f30004 	mvnseq	r0, r4
    3fc8:	2a3e9f50 	bcs	fabd10 <_Min_Stack_Size+0xfab910>
    3fcc:	2a570800 	bcs	15c5fd4 <_Min_Stack_Size+0x15c5bd4>
    3fd0:	00010800 	andeq	r0, r1, r0, lsl #16
    3fd4:	002a5750 	eoreq	r5, sl, r0, asr r7
    3fd8:	002a9e08 	eoreq	r9, sl, r8, lsl #28
    3fdc:	f3000408 	vshl.u8	d0, d8, d0
    3fe0:	9e9f5001 	cdpls	0, 9, cr5, cr15, cr1, {0}
    3fe4:	a108002a 	tstge	r8, sl, lsr #32
    3fe8:	0108002a 	tsteq	r8, sl, lsr #32
    3fec:	2aa15000 	bcs	fe857ff4 <_estack+0xde827ff4>
    3ff0:	2ace0800 	bcs	ff385ff8 <_estack+0xdf355ff8>
    3ff4:	00040800 	andeq	r0, r4, r0, lsl #16
    3ff8:	9f5001f3 	svcls	0x005001f3
	...
    4004:	08002a24 	stmdaeq	r0, {r2, r5, r9, fp, sp}
    4008:	08002a3b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r9, fp, sp}
    400c:	3b510001 	blcc	1444018 <_Min_Stack_Size+0x1443c18>
    4010:	3e08002a 	cdpcc	0, 0, cr0, cr8, cr10, {1}
    4014:	0408002a 	streq	r0, [r8], #-42	; 0x2a
    4018:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    401c:	002a3e9f 	mlaeq	sl, pc, lr, r3	; <UNPREDICTABLE>
    4020:	002a4a08 	eoreq	r4, sl, r8, lsl #20
    4024:	51000108 	tstpl	r0, r8, lsl #2
    4028:	08002a4a 	stmdaeq	r0, {r1, r3, r6, r9, fp, sp}
    402c:	08002a9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, fp, sp}
    4030:	01f30004 	mvnseq	r0, r4
    4034:	2a9e9f51 	bcs	fe7abd80 <_estack+0xde77bd80>
    4038:	2aa10800 	bcs	fe846040 <_estack+0xde816040>
    403c:	00010800 	andeq	r0, r1, r0, lsl #16
    4040:	002aa151 	eoreq	sl, sl, r1, asr r1
    4044:	002ace08 	eoreq	ip, sl, r8, lsl #28
    4048:	f3000408 	vshl.u8	d0, d8, d0
    404c:	009f5101 	addseq	r5, pc, r1, lsl #2
    4050:	00000000 	andeq	r0, r0, r0
    4054:	24000000 	strcs	r0, [r0], #-0
    4058:	3b08002a 	blcc	204108 <_Min_Stack_Size+0x203d08>
    405c:	0108002a 	tsteq	r8, sl, lsr #32
    4060:	2a3b5200 	bcs	ed8868 <_Min_Stack_Size+0xed8468>
    4064:	2a3e0800 	bcs	f8606c <_Min_Stack_Size+0xf85c6c>
    4068:	00010800 	andeq	r0, r1, r0, lsl #16
    406c:	002a3e55 	eoreq	r3, sl, r5, asr lr
    4070:	002a4c08 	eoreq	r4, sl, r8, lsl #24
    4074:	52000108 	andpl	r0, r0, #8, 2
    4078:	08002a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp}
    407c:	08002a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, sp}
    4080:	74550001 	ldrbvc	r0, [r5], #-1
    4084:	9e08002a 	cdpls	0, 0, cr0, cr8, cr10, {1}
    4088:	0408002a 	streq	r0, [r8], #-42	; 0x2a
    408c:	5201f300 	andpl	pc, r1, #0, 6
    4090:	002a9e9f 	mlaeq	sl, pc, lr, r9	; <UNPREDICTABLE>
    4094:	002aa108 	eoreq	sl, sl, r8, lsl #2
    4098:	52000108 	andpl	r0, r0, #8, 2
    409c:	08002aa1 	stmdaeq	r0, {r0, r5, r7, r9, fp, sp}
    40a0:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
    40a4:	a4550001 	ldrbge	r0, [r5], #-1
    40a8:	ba08002a 	blt	204158 <_Min_Stack_Size+0x203d58>
    40ac:	0408002a 	streq	r0, [r8], #-42	; 0x2a
    40b0:	5201f300 	andpl	pc, r1, #0, 6
    40b4:	002aba9f 	mlaeq	sl, pc, sl, fp	; <UNPREDICTABLE>
    40b8:	002aca08 	eoreq	ip, sl, r8, lsl #20
    40bc:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    40c0:	08002aca 	stmdaeq	r0, {r1, r3, r6, r7, r9, fp, sp}
    40c4:	08002ace 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, fp, sp}
    40c8:	01f30004 	mvnseq	r0, r4
    40cc:	00009f52 	andeq	r9, r0, r2, asr pc
    40d0:	00000000 	andeq	r0, r0, r0
    40d4:	2a740000 	bcs	1d040dc <_Min_Stack_Size+0x1d03cdc>
    40d8:	2a9e0800 	bcs	fe7860e0 <_estack+0xde7560e0>
    40dc:	00010800 	andeq	r0, r1, r0, lsl #16
    40e0:	002aa455 	eoreq	sl, sl, r5, asr r4
    40e4:	002ab408 	eoreq	fp, sl, r8, lsl #8
    40e8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    40ec:	08002ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp, sp}
    40f0:	08002ab9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, fp, sp}
    40f4:	04720002 	ldrbteq	r0, [r2], #-2
	...
    4100:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
    4104:	08002ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp, sp}
    4108:	b4550001 	ldrblt	r0, [r5], #-1
    410c:	b908002a 	stmdblt	r8, {r1, r3, r5}
    4110:	0208002a 	andeq	r0, r8, #42	; 0x2a
    4114:	00047200 	andeq	r7, r4, r0, lsl #4
    4118:	00000000 	andeq	r0, r0, r0
    411c:	d0000000 	andle	r0, r0, r0
    4120:	e508002a 	str	r0, [r8, #-42]	; 0x2a
    4124:	0108002a 	tsteq	r8, sl, lsr #32
    4128:	2ae55000 	bcs	ff958130 <_estack+0xdf928130>
    412c:	2b280800 	blcs	a06134 <_Min_Stack_Size+0xa05d34>
    4130:	00040800 	andeq	r0, r4, r0, lsl #16
    4134:	9f5001f3 	svcls	0x005001f3
    4138:	08002b28 	stmdaeq	r0, {r3, r5, r8, r9, fp, sp}
    413c:	08002b2b 	stmdaeq	r0, {r0, r1, r3, r5, r8, r9, fp, sp}
    4140:	2b500001 	blcs	140414c <_Min_Stack_Size+0x1403d4c>
    4144:	4408002b 	strmi	r0, [r8], #-43	; 0x2b
    4148:	0408002b 	streq	r0, [r8], #-43	; 0x2b
    414c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4150:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4154:	00000000 	andeq	r0, r0, r0
    4158:	002ad000 	eoreq	sp, sl, r0
    415c:	002ae008 	eoreq	lr, sl, r8
    4160:	51000108 	tstpl	r0, r8, lsl #2
    4164:	08002ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, sp}
    4168:	08002afe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, fp, sp}
    416c:	fe550001 	cdp2	0, 5, cr0, cr5, cr1, {0}
    4170:	2808002a 	stmdacs	r8, {r1, r3, r5}
    4174:	0408002b 	streq	r0, [r8], #-43	; 0x2b
    4178:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    417c:	002b289f 	mlaeq	fp, pc, r8, r2	; <UNPREDICTABLE>
    4180:	002b2b08 	eoreq	r2, fp, r8, lsl #22
    4184:	51000108 	tstpl	r0, r8, lsl #2
    4188:	08002b2b 	stmdaeq	r0, {r0, r1, r3, r5, r8, r9, fp, sp}
    418c:	08002b2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, fp, sp}
    4190:	2e550001 	cdpcs	0, 5, cr0, cr5, cr1, {0}
    4194:	4408002b 	strmi	r0, [r8], #-43	; 0x2b
    4198:	0408002b 	streq	r0, [r8], #-43	; 0x2b
    419c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    41a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    41a4:	00000000 	andeq	r0, r0, r0
    41a8:	002afe00 	eoreq	pc, sl, r0, lsl #28
    41ac:	002b2808 	eoreq	r2, fp, r8, lsl #16
    41b0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    41b4:	08002b2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, fp, sp}
    41b8:	08002b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp, sp}
    41bc:	3e550001 	cdpcc	0, 5, cr0, cr5, cr1, {0}
    41c0:	4308002b 	movwmi	r0, #32811	; 0x802b
    41c4:	0208002b 	andeq	r0, r8, #43	; 0x2b
    41c8:	00047200 	andeq	r7, r4, r0, lsl #4
    41cc:	00000000 	andeq	r0, r0, r0
    41d0:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    41d4:	3e08002b 	cdpcc	0, 0, cr0, cr8, cr11, {1}
    41d8:	0108002b 	tsteq	r8, fp, lsr #32
    41dc:	2b3e5500 	blcs	f995e4 <_Min_Stack_Size+0xf991e4>
    41e0:	2b430800 	blcs	10c61e8 <_Min_Stack_Size+0x10c5de8>
    41e4:	00020800 	andeq	r0, r2, r0, lsl #16
    41e8:	00000472 	andeq	r0, r0, r2, ror r4
    41ec:	00000000 	andeq	r0, r0, r0
    41f0:	2b440000 	blcs	11041f8 <_Min_Stack_Size+0x1103df8>
    41f4:	2b540800 	blcs	15061fc <_Min_Stack_Size+0x1505dfc>
    41f8:	00010800 	andeq	r0, r1, r0, lsl #16
    41fc:	002b5450 	eoreq	r5, fp, r0, asr r4
    4200:	002bc808 	eoreq	ip, fp, r8, lsl #16
    4204:	f3000408 	vshl.u8	d0, d8, d0
    4208:	c89f5001 	ldmgt	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    420c:	cb08002b 	blgt	2042c0 <_Min_Stack_Size+0x203ec0>
    4210:	0108002b 	tsteq	r8, fp, lsr #32
    4214:	2bcb5000 	blcs	ff2d821c <_estack+0xdf2a821c>
    4218:	2bce0800 	blcs	ff386220 <_estack+0xdf356220>
    421c:	00040800 	andeq	r0, r4, r0, lsl #16
    4220:	9f5001f3 	svcls	0x005001f3
	...
    422c:	08002ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, sp}
    4230:	08002bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, sp}
    4234:	9f310002 	svcls	0x00310002
    4238:	08002bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, sp}
    423c:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
    4240:	00500001 	subseq	r0, r0, r1
    4244:	00000000 	andeq	r0, r0, r0
    4248:	d0000000 	andle	r0, r0, r0
    424c:	ef08002b 	svc	0x0008002b
    4250:	0108002b 	tsteq	r8, fp, lsr #32
    4254:	2bef5000 	blcs	ffbd825c <_estack+0xdfba825c>
    4258:	2c420800 	mcrrcs	8, 0, r0, r2, cr0
    425c:	00040800 	andeq	r0, r4, r0, lsl #16
    4260:	9f5001f3 	svcls	0x005001f3
    4264:	08002c42 	stmdaeq	r0, {r1, r6, sl, fp, sp}
    4268:	08002c45 	stmdaeq	r0, {r0, r2, r6, sl, fp, sp}
    426c:	45500001 	ldrbmi	r0, [r0, #-1]
    4270:	4808002c 	stmdami	r8, {r2, r3, r5}
    4274:	0408002c 	streq	r0, [r8], #-44	; 0x2c
    4278:	5001f300 	andpl	pc, r1, r0, lsl #6
    427c:	002c489f 	mlaeq	ip, pc, r8, r4	; <UNPREDICTABLE>
    4280:	002c4b08 	eoreq	r4, ip, r8, lsl #22
    4284:	50000108 	andpl	r0, r0, r8, lsl #2
    4288:	08002c4b 	stmdaeq	r0, {r0, r1, r3, r6, sl, fp, sp}
    428c:	08002c4e 	stmdaeq	r0, {r1, r2, r3, r6, sl, fp, sp}
    4290:	01f30004 	mvnseq	r0, r4
    4294:	00009f50 	andeq	r9, r0, r0, asr pc
    4298:	00000000 	andeq	r0, r0, r0
    429c:	2bd00000 	blcs	ff4042a4 <_estack+0xdf3d42a4>
    42a0:	2bef0800 	blcs	ffbc62a8 <_estack+0xdfb962a8>
    42a4:	00010800 	andeq	r0, r1, r0, lsl #16
    42a8:	002bef51 	eoreq	lr, fp, r1, asr pc
    42ac:	002c4208 	eoreq	r4, ip, r8, lsl #4
    42b0:	f3000408 	vshl.u8	d0, d8, d0
    42b4:	429f5101 	addsmi	r5, pc, #1073741824	; 0x40000000
    42b8:	4508002c 	strmi	r0, [r8, #-44]	; 0x2c
    42bc:	0108002c 	tsteq	r8, ip, lsr #32
    42c0:	2c455100 	stfcse	f5, [r5], {-0}
    42c4:	2c480800 	mcrrcs	8, 0, r0, r8, cr0
    42c8:	00040800 	andeq	r0, r4, r0, lsl #16
    42cc:	9f5101f3 	svcls	0x005101f3
    42d0:	08002c48 	stmdaeq	r0, {r3, r6, sl, fp, sp}
    42d4:	08002c4b 	stmdaeq	r0, {r0, r1, r3, r6, sl, fp, sp}
    42d8:	4b510001 	blmi	14442e4 <_Min_Stack_Size+0x1443ee4>
    42dc:	4e08002c 	cdpmi	0, 0, cr0, cr8, cr12, {1}
    42e0:	0408002c 	streq	r0, [r8], #-44	; 0x2c
    42e4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    42e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    42ec:	00000000 	andeq	r0, r0, r0
    42f0:	002be200 	eoreq	lr, fp, r0, lsl #4
    42f4:	002c4208 	eoreq	r4, ip, r8, lsl #4
    42f8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    42fc:	08002c48 	stmdaeq	r0, {r3, r6, sl, fp, sp}
    4300:	08002c4e 	stmdaeq	r0, {r1, r2, r3, r6, sl, fp, sp}
    4304:	00540001 	subseq	r0, r4, r1
    4308:	00000000 	andeq	r0, r0, r0
    430c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4310:	4008002c 	andmi	r0, r8, ip, lsr #32
    4314:	0208002c 	andeq	r0, r8, #44	; 0x2c
    4318:	409f3100 	addsmi	r3, pc, r0, lsl #2
    431c:	4208002c 	andmi	r0, r8, #44	; 0x2c
    4320:	0108002c 	tsteq	r8, ip, lsr #32
    4324:	00005000 	andeq	r5, r0, r0
    4328:	00000000 	andeq	r0, r0, r0
    432c:	2c500000 	mracs	r0, r0, acc0
    4330:	2c710800 	ldclcs	8, cr0, [r1], #-0
    4334:	00010800 	andeq	r0, r1, r0, lsl #16
    4338:	002c7150 	eoreq	r7, ip, r0, asr r1
    433c:	002c7408 	eoreq	r7, ip, r8, lsl #8
    4340:	f3000408 	vshl.u8	d0, d8, d0
    4344:	009f5001 	addseq	r5, pc, r1
    4348:	00000000 	andeq	r0, r0, r0
    434c:	74000000 	strvc	r0, [r0], #-0
    4350:	8308002c 	movwhi	r0, #32812	; 0x802c
    4354:	0108002c 	tsteq	r8, ip, lsr #32
    4358:	2c835000 	stccs	0, cr5, [r3], {0}
    435c:	2cdc0800 	ldclcs	8, cr0, [ip], {0}
    4360:	00010800 	andeq	r0, r1, r0, lsl #16
    4364:	002cdc54 	eoreq	sp, ip, r4, asr ip
    4368:	002cdf08 	eoreq	sp, ip, r8, lsl #30
    436c:	50000108 	andpl	r0, r0, r8, lsl #2
    4370:	08002cdf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sl, fp, sp}
    4374:	08002ce2 	stmdaeq	r0, {r1, r5, r6, r7, sl, fp, sp}
    4378:	e2540001 	subs	r0, r4, #1
    437c:	e508002c 	str	r0, [r8, #-44]	; 0x2c
    4380:	0108002c 	tsteq	r8, ip, lsr #32
    4384:	2ce55000 	stclcs	0, cr5, [r5]
    4388:	2ce80800 	stclcs	8, cr0, [r8]
    438c:	00010800 	andeq	r0, r1, r0, lsl #16
    4390:	00000054 	andeq	r0, r0, r4, asr r0
    4394:	00000000 	andeq	r0, r0, r0
    4398:	002c7400 	eoreq	r7, ip, r0, lsl #8
    439c:	002c8308 	eoreq	r8, ip, r8, lsl #6
    43a0:	51000108 	tstpl	r0, r8, lsl #2
    43a4:	08002c83 	stmdaeq	r0, {r0, r1, r7, sl, fp, sp}
    43a8:	08002cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, sp}
    43ac:	bc550001 	mrrclt	0, 0, r0, r5, cr1
    43b0:	c808002c 	stmdagt	r8, {r2, r3, r5}
    43b4:	0408002c 	streq	r0, [r8], #-44	; 0x2c
    43b8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    43bc:	002cc89f 	mlaeq	ip, pc, r8, ip	; <UNPREDICTABLE>
    43c0:	002cca08 	eoreq	ip, ip, r8, lsl #20
    43c4:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    43c8:	08002cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, sp}
    43cc:	08002cd2 	stmdaeq	r0, {r1, r4, r6, r7, sl, fp, sp}
    43d0:	01f30004 	mvnseq	r0, r4
    43d4:	2cd29f51 	ldclcs	15, cr9, [r2], {81}	; 0x51
    43d8:	2cd40800 	ldclcs	8, cr0, [r4], {0}
    43dc:	00010800 	andeq	r0, r1, r0, lsl #16
    43e0:	002cd455 	eoreq	sp, ip, r5, asr r4
    43e4:	002cdc08 	eoreq	sp, ip, r8, lsl #24
    43e8:	f3000408 	vshl.u8	d0, d8, d0
    43ec:	dc9f5101 	ldfles	f5, [pc], {1}
    43f0:	df08002c 	svcle	0x0008002c
    43f4:	0108002c 	tsteq	r8, ip, lsr #32
    43f8:	2cdf5100 	ldfcse	f5, [pc], {0}
    43fc:	2ce20800 	stclcs	8, cr0, [r2]
    4400:	00010800 	andeq	r0, r1, r0, lsl #16
    4404:	002ce255 	eoreq	lr, ip, r5, asr r2
    4408:	002ce508 	eoreq	lr, ip, r8, lsl #10
    440c:	51000108 	tstpl	r0, r8, lsl #2
    4410:	08002ce5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, fp, sp}
    4414:	08002ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, sp}
    4418:	00550001 	subseq	r0, r5, r1
    441c:	00000000 	andeq	r0, r0, r0
    4420:	c0000000 	andgt	r0, r0, r0
    4424:	c808002c 	stmdagt	r8, {r2, r3, r5}
    4428:	0108002c 	tsteq	r8, ip, lsr #32
    442c:	2cca5500 	cfstr64cs	mvdx5, [sl], {0}
    4430:	2cd20800 	ldclcs	8, cr0, [r2], {0}
    4434:	00010800 	andeq	r0, r1, r0, lsl #16
    4438:	002cd455 	eoreq	sp, ip, r5, asr r4
    443c:	002cdc08 	eoreq	sp, ip, r8, lsl #24
    4440:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    444c:	08002c92 	stmdaeq	r0, {r1, r4, r7, sl, fp, sp}
    4450:	08002cb2 	stmdaeq	r0, {r1, r4, r5, r7, sl, fp, sp}
    4454:	c8500001 	ldmdagt	r0, {r0}^
    4458:	cd08002c 	stcgt	0, cr0, [r8, #-176]	; 0xffffff50
    445c:	0108002c 	tsteq	r8, ip, lsr #32
    4460:	2cd25000 	ldclcs	0, cr5, [r2], {0}
    4464:	2cd70800 	ldclcs	8, cr0, [r7], {0}
    4468:	00010800 	andeq	r0, r1, r0, lsl #16
    446c:	00000050 	andeq	r0, r0, r0, asr r0
    4470:	00000000 	andeq	r0, r0, r0
    4474:	002cba00 	eoreq	fp, ip, r0, lsl #20
    4478:	002cc808 	eoreq	ip, ip, r8, lsl #16
    447c:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    4488:	08002cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, sp}
    448c:	08002cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, sp}
    4490:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4494:	fe08002c 	cdp2	0, 0, cr0, cr8, cr12, {1}
    4498:	0408002c 	streq	r0, [r8], #-44	; 0x2c
    449c:	5001f300 	andpl	pc, r1, r0, lsl #6
    44a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44a4:	00000000 	andeq	r0, r0, r0
    44a8:	002cfa00 	eoreq	pc, ip, r0, lsl #20
    44ac:	002cfc08 	eoreq	pc, ip, r8, lsl #24
    44b0:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    44bc:	08002d02 	stmdaeq	r0, {r1, r8, sl, fp, sp}
    44c0:	08002d04 	stmdaeq	r0, {r2, r8, sl, fp, sp}
    44c4:	00500001 	subseq	r0, r0, r1
    44c8:	00000000 	andeq	r0, r0, r0
    44cc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    44d0:	8408002d 	strhi	r0, [r8], #-45	; 0x2d
    44d4:	0108002d 	tsteq	r8, sp, lsr #32
    44d8:	2d845000 	stccs	0, cr5, [r4]
    44dc:	2dac0800 	stccs	8, cr0, [ip]
    44e0:	00010800 	andeq	r0, r1, r0, lsl #16
    44e4:	002dac54 	eoreq	sl, sp, r4, asr ip
    44e8:	002daf08 	eoreq	sl, sp, r8, lsl #30
    44ec:	71000308 	tstvc	r0, r8, lsl #6
    44f0:	2daf9f7c 	stccs	15, cr9, [pc, #496]!	; 46e8 <_Min_Stack_Size+0x42e8>
    44f4:	2db00800 	ldccs	8, cr0, [r0]
    44f8:	00040800 	andeq	r0, r4, r0, lsl #16
    44fc:	9f5001f3 	svcls	0x005001f3
	...
    4508:	08002db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, sp}
    450c:	08002dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp, sp}
    4510:	c2500001 	subsgt	r0, r0, #1
    4514:	fc08002d 	stc2	0, cr0, [r8], {45}	; 0x2d
    4518:	0108002d 	tsteq	r8, sp, lsr #32
    451c:	2dfc5400 	cfldrdcs	mvd5, [ip]
    4520:	2dff0800 	ldclcs	8, cr0, [pc]	; 4528 <_Min_Stack_Size+0x4128>
    4524:	00030800 	andeq	r0, r3, r0, lsl #16
    4528:	ff9f7c71 			; <UNDEFINED> instruction: 0xff9f7c71
    452c:	0008002d 	andeq	r0, r8, sp, lsr #32
    4530:	0408002e 	streq	r0, [r8], #-46	; 0x2e
    4534:	5001f300 	andpl	pc, r1, r0, lsl #6
    4538:	002e009f 	mlaeq	lr, pc, r0, r0	; <UNPREDICTABLE>
    453c:	002e0208 	eoreq	r0, lr, r8, lsl #4
    4540:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    454c:	08002e20 	stmdaeq	r0, {r5, r9, sl, fp, sp}
    4550:	08002e6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, fp, sp}
    4554:	9f300002 	svcls	0x00300002
    4558:	08002e6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, fp, sp}
    455c:	08002e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp, sp}
    4560:	72500001 	subsvc	r0, r0, #1
    4564:	c608002e 	strgt	r0, [r8], -lr, lsr #32
    4568:	0208002e 	andeq	r0, r8, #46	; 0x2e
    456c:	cc9f3000 	ldcgt	0, cr3, [pc], {0}
    4570:	d208002e 	andle	r0, r8, #46	; 0x2e
    4574:	0208002e 	andeq	r0, r8, #46	; 0x2e
    4578:	009f3000 	addseq	r3, pc, r0
    457c:	00000000 	andeq	r0, r0, r0
    4580:	d4000000 	strle	r0, [r0], #-0
    4584:	e608002e 	str	r0, [r8], -lr, lsr #32
    4588:	0108002e 	tsteq	r8, lr, lsr #32
    458c:	2ee65000 	cdpcs	0, 14, cr5, cr6, cr0, {0}
    4590:	2f220800 	svccs	0x00220800
    4594:	00010800 	andeq	r0, r1, r0, lsl #16
    4598:	002f225b 	eoreq	r2, pc, fp, asr r2	; <UNPREDICTABLE>
    459c:	002f2508 	eoreq	r2, pc, r8, lsl #10
    45a0:	50000108 	andpl	r0, r0, r8, lsl #2
    45a4:	08002f25 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, fp, sp}
    45a8:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
    45ac:	005b0001 	subseq	r0, fp, r1
    45b0:	00000000 	andeq	r0, r0, r0
    45b4:	d4000000 	strle	r0, [r0], #-0
    45b8:	e908002e 	stmdb	r8, {r1, r2, r3, r5}
    45bc:	0108002e 	tsteq	r8, lr, lsr #32
    45c0:	2ee95100 	cdpcs	1, 14, cr5, cr9, cr0, {0}
    45c4:	2f220800 	svccs	0x00220800
    45c8:	00010800 	andeq	r0, r1, r0, lsl #16
    45cc:	002f2258 	eoreq	r2, pc, r8, asr r2	; <UNPREDICTABLE>
    45d0:	002f2508 	eoreq	r2, pc, r8, lsl #10
    45d4:	51000108 	tstpl	r0, r8, lsl #2
    45d8:	08002f25 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, fp, sp}
    45dc:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
    45e0:	00580001 	subseq	r0, r8, r1
    45e4:	00000000 	andeq	r0, r0, r0
    45e8:	d4000000 	strle	r0, [r0], #-0
    45ec:	e908002e 	stmdb	r8, {r1, r2, r3, r5}
    45f0:	0108002e 	tsteq	r8, lr, lsr #32
    45f4:	2ee95200 	cdpcs	2, 14, cr5, cr9, cr0, {0}
    45f8:	2f220800 	svccs	0x00220800
    45fc:	00010800 	andeq	r0, r1, r0, lsl #16
    4600:	002f225a 	eoreq	r2, pc, sl, asr r2	; <UNPREDICTABLE>
    4604:	002f2508 	eoreq	r2, pc, r8, lsl #10
    4608:	52000108 	andpl	r0, r0, #8, 2
    460c:	08002f25 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, fp, sp}
    4610:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
    4614:	005a0001 	subseq	r0, sl, r1
    4618:	00000000 	andeq	r0, r0, r0
    461c:	d4000000 	strle	r0, [r0], #-0
    4620:	e908002e 	stmdb	r8, {r1, r2, r3, r5}
    4624:	0108002e 	tsteq	r8, lr, lsr #32
    4628:	2ee95300 	cdpcs	3, 14, cr5, cr9, cr0, {0}
    462c:	2f220800 	svccs	0x00220800
    4630:	00010800 	andeq	r0, r1, r0, lsl #16
    4634:	002f2257 	eoreq	r2, pc, r7, asr r2	; <UNPREDICTABLE>
    4638:	002f2508 	eoreq	r2, pc, r8, lsl #10
    463c:	53000108 	movwpl	r0, #264	; 0x108
    4640:	08002f25 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, fp, sp}
    4644:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
    4648:	00570001 	subseq	r0, r7, r1
    464c:	00000000 	andeq	r0, r0, r0
    4650:	d4000000 	strle	r0, [r0], #-0
    4654:	2208002e 	andcs	r0, r8, #46	; 0x2e
    4658:	0208002f 	andeq	r0, r8, #47	; 0x2f
    465c:	22009100 	andcs	r9, r0, #0, 2
    4660:	8008002f 	andhi	r0, r8, pc, lsr #32
    4664:	0208002f 	andeq	r0, r8, #47	; 0x2f
    4668:	00009100 	andeq	r9, r0, r0, lsl #2
    466c:	00000000 	andeq	r0, r0, r0
    4670:	ea000000 	b	4678 <_Min_Stack_Size+0x4278>
    4674:	f908002e 			; <UNDEFINED> instruction: 0xf908002e
    4678:	0108002e 	tsteq	r8, lr, lsr #32
    467c:	2ef95000 	cdpcs	0, 15, cr5, cr9, cr0, {0}
    4680:	2f220800 	svccs	0x00220800
    4684:	00010800 	andeq	r0, r1, r0, lsl #16
    4688:	002f2254 	eoreq	r2, pc, r4, asr r2	; <UNPREDICTABLE>
    468c:	002f2808 	eoreq	r2, pc, r8, lsl #16
    4690:	30000208 	andcc	r0, r0, r8, lsl #4
    4694:	002f289f 	mlaeq	pc, pc, r8, r2	; <UNPREDICTABLE>
    4698:	002f8008 	eoreq	r8, pc, r8
    469c:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    46a8:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
    46ac:	08002f9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, fp, sp}
    46b0:	9e500001 	cdpls	0, 5, cr0, cr0, cr1, {0}
    46b4:	a508002f 	strge	r0, [r8, #-47]	; 0x2f
    46b8:	0208002f 	andeq	r0, r8, #47	; 0x2f
    46bc:	a56c9100 	strbge	r9, [ip, #-256]!	; 0x100
    46c0:	aa08002f 	bge	204784 <_Min_Stack_Size+0x204384>
    46c4:	0408002f 	streq	r0, [r8], #-47	; 0x2f
    46c8:	5001f300 	andpl	pc, r1, r0, lsl #6
    46cc:	002faa9f 	mlaeq	pc, pc, sl, sl	; <UNPREDICTABLE>
    46d0:	002fad08 	eoreq	sl, pc, r8, lsl #26
    46d4:	50000108 	andpl	r0, r0, r8, lsl #2
    46d8:	08002fad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, fp, sp}
    46dc:	08002fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, sp}
    46e0:	01f30004 	mvnseq	r0, r4
    46e4:	2fcc9f50 	svccs	0x00cc9f50
    46e8:	2fce0800 	svccs	0x00ce0800
    46ec:	00010800 	andeq	r0, r1, r0, lsl #16
    46f0:	002fce50 	eoreq	ip, pc, r0, asr lr	; <UNPREDICTABLE>
    46f4:	002fd208 	eoreq	sp, pc, r8, lsl #4
    46f8:	f3000408 	vshl.u8	d0, d8, d0
    46fc:	009f5001 	addseq	r5, pc, r1
    4700:	00000000 	andeq	r0, r0, r0
    4704:	80000000 	andhi	r0, r0, r0
    4708:	a008002f 	andge	r0, r8, pc, lsr #32
    470c:	0108002f 	tsteq	r8, pc, lsr #32
    4710:	2fa05100 	svccs	0x00a05100
    4714:	2fa50800 	svccs	0x00a50800
    4718:	00020800 	andeq	r0, r2, r0, lsl #16
    471c:	2fa50071 	svccs	0x00a50071
    4720:	2faa0800 	svccs	0x00aa0800
    4724:	00040800 	andeq	r0, r4, r0, lsl #16
    4728:	9f5101f3 	svcls	0x005101f3
    472c:	08002faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp, sp}
    4730:	08002fad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, fp, sp}
    4734:	ad510001 	ldclge	0, cr0, [r1, #-4]
    4738:	cc08002f 	stcgt	0, cr0, [r8], {47}	; 0x2f
    473c:	0408002f 	streq	r0, [r8], #-47	; 0x2f
    4740:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4744:	002fcc9f 	mlaeq	pc, pc, ip, ip	; <UNPREDICTABLE>
    4748:	002fd208 	eoreq	sp, pc, r8, lsl #4
    474c:	51000108 	tstpl	r0, r8, lsl #2
	...
    4758:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
    475c:	08002f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, sp}
    4760:	9c520001 	mrrcls	0, 0, r0, r2, cr1
    4764:	a508002f 	strge	r0, [r8, #-47]	; 0x2f
    4768:	0208002f 	andeq	r0, r8, #47	; 0x2f
    476c:	a5689100 	strbge	r9, [r8, #-256]!	; 0x100
    4770:	aa08002f 	bge	204834 <_Min_Stack_Size+0x204434>
    4774:	0408002f 	streq	r0, [r8], #-47	; 0x2f
    4778:	5201f300 	andpl	pc, r1, #0, 6
    477c:	002faa9f 	mlaeq	pc, pc, sl, sl	; <UNPREDICTABLE>
    4780:	002fad08 	eoreq	sl, pc, r8, lsl #26
    4784:	52000108 	andpl	r0, r0, #8, 2
    4788:	08002fad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, fp, sp}
    478c:	08002fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, sp}
    4790:	01f30004 	mvnseq	r0, r4
    4794:	2fcc9f52 	svccs	0x00cc9f52
    4798:	2fd20800 	svccs	0x00d20800
    479c:	00010800 	andeq	r0, r1, r0, lsl #16
    47a0:	00000052 	andeq	r0, r0, r2, asr r0
    47a4:	00000000 	andeq	r0, r0, r0
    47a8:	002f8000 	eoreq	r8, pc, r0
    47ac:	002fa208 	eoreq	sl, pc, r8, lsl #4
    47b0:	53000108 	movwpl	r0, #264	; 0x108
    47b4:	08002fa2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, fp, sp}
    47b8:	08002fa5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, sl, fp, sp}
    47bc:	a5520001 	ldrbge	r0, [r2, #-1]
    47c0:	aa08002f 	bge	204884 <_Min_Stack_Size+0x204484>
    47c4:	0408002f 	streq	r0, [r8], #-47	; 0x2f
    47c8:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    47cc:	002faa9f 	mlaeq	pc, pc, sl, sl	; <UNPREDICTABLE>
    47d0:	002fad08 	eoreq	sl, pc, r8, lsl #26
    47d4:	53000108 	movwpl	r0, #264	; 0x108
    47d8:	08002fad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, fp, sp}
    47dc:	08002fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, sp}
    47e0:	01f30004 	mvnseq	r0, r4
    47e4:	2fcc9f53 	svccs	0x00cc9f53
    47e8:	2fd20800 	svccs	0x00d20800
    47ec:	00010800 	andeq	r0, r1, r0, lsl #16
    47f0:	00000053 	andeq	r0, r0, r3, asr r0
    47f4:	00000000 	andeq	r0, r0, r0
    47f8:	002f8000 	eoreq	r8, pc, r0
    47fc:	002faa08 	eoreq	sl, pc, r8, lsl #20
    4800:	91000208 	tstls	r0, r8, lsl #4
    4804:	002faa00 	eoreq	sl, pc, r0, lsl #20
    4808:	002fd208 	eoreq	sp, pc, r8, lsl #4
    480c:	91000208 	tstls	r0, r8, lsl #4
	...
    4818:	002f8000 	eoreq	r8, pc, r0
    481c:	002fa608 	eoreq	sl, pc, r8, lsl #12
    4820:	30000208 	andcc	r0, r0, r8, lsl #4
    4824:	002fa69f 	mlaeq	pc, pc, r6, sl	; <UNPREDICTABLE>
    4828:	002faa08 	eoreq	sl, pc, r8, lsl #20
    482c:	50000108 	andpl	r0, r0, r8, lsl #2
    4830:	08002faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp, sp}
    4834:	08002fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, sp}
    4838:	9f300002 	svcls	0x00300002
    483c:	08002fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, sp}
    4840:	08002fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, sp}
    4844:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4848:	ce08002f 	cdpgt	0, 0, cr0, cr8, cr15, {1}
    484c:	0208002f 	andeq	r0, r8, #47	; 0x2f
    4850:	ce9f3000 	cdpgt	0, 9, cr3, cr15, cr0, {0}
    4854:	d208002f 	andle	r0, r8, #47	; 0x2f
    4858:	0108002f 	tsteq	r8, pc, lsr #32
    485c:	00005000 	andeq	r5, r0, r0
    4860:	00000000 	andeq	r0, r0, r0
    4864:	2fd40000 	svccs	0x00d40000
    4868:	2fdc0800 	svccs	0x00dc0800
    486c:	00010800 	andeq	r0, r1, r0, lsl #16
    4870:	002fdc50 	eoreq	sp, pc, r0, asr ip	; <UNPREDICTABLE>
    4874:	0032f008 	eorseq	pc, r2, r8
    4878:	f3000408 	vshl.u8	d0, d8, d0
    487c:	009f5001 	addseq	r5, pc, r1
    4880:	00000000 	andeq	r0, r0, r0
    4884:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4888:	54080030 	strpl	r0, [r8], #-48	; 0x30
    488c:	06080030 			; <UNDEFINED> instruction: 0x06080030
    4890:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    4894:	309f1aff 			; <UNDEFINED> instruction: 0x309f1aff
    4898:	3a080031 	bcc	204964 <_Min_Stack_Size+0x204564>
    489c:	06080031 			; <UNDEFINED> instruction: 0x06080031
    48a0:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    48a4:	7e9f1aff 	mrcvc	10, 4, r1, cr15, cr15, {7}
    48a8:	84080031 	strhi	r0, [r8], #-49	; 0x31
    48ac:	06080031 			; <UNDEFINED> instruction: 0x06080031
    48b0:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    48b4:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    48b8:	00000000 	andeq	r0, r0, r0
    48bc:	10000000 	andne	r0, r0, r0
    48c0:	54080030 	strpl	r0, [r8], #-48	; 0x30
    48c4:	06080030 			; <UNDEFINED> instruction: 0x06080030
    48c8:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    48cc:	309f1aff 			; <UNDEFINED> instruction: 0x309f1aff
    48d0:	3a080031 	bcc	20499c <_Min_Stack_Size+0x20459c>
    48d4:	06080031 			; <UNDEFINED> instruction: 0x06080031
    48d8:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    48dc:	7e9f1aff 	mrcvc	10, 4, r1, cr15, cr15, {7}
    48e0:	84080031 	strhi	r0, [r8], #-49	; 0x31
    48e4:	06080031 			; <UNDEFINED> instruction: 0x06080031
    48e8:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    48ec:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    48f0:	00000000 	andeq	r0, r0, r0
    48f4:	22000000 	andcs	r0, r0, #0
    48f8:	54080030 	strpl	r0, [r8], #-48	; 0x30
    48fc:	02080030 	andeq	r0, r8, #48	; 0x30
    4900:	f09f3000 			; <UNDEFINED> instruction: 0xf09f3000
    4904:	f8080030 			; <UNDEFINED> instruction: 0xf8080030
    4908:	02080030 	andeq	r0, r8, #48	; 0x30
    490c:	309f3100 	addscc	r3, pc, r0, lsl #2
    4910:	52080031 	andpl	r0, r8, #49	; 0x31
    4914:	02080031 	andeq	r0, r8, #49	; 0x31
    4918:	7e9f3000 	cdpvc	0, 9, cr3, cr15, cr0, {0}
    491c:	c6080031 			; <UNDEFINED> instruction: 0xc6080031
    4920:	02080031 	andeq	r0, r8, #49	; 0x31
    4924:	2a9f3000 	bcs	fe7d092c <_estack+0xde7a092c>
    4928:	48080032 	stmdami	r8, {r1, r4, r5}
    492c:	02080032 	andeq	r0, r8, #50	; 0x32
    4930:	009f3000 	addseq	r3, pc, r0
    4934:	00000000 	andeq	r0, r0, r0
    4938:	20000000 	andcs	r0, r0, r0
    493c:	34080030 	strcc	r0, [r8], #-48	; 0x30
    4940:	01080030 	tsteq	r8, r0, lsr r0
    4944:	30345000 	eorscc	r5, r4, r0
    4948:	30540800 	subscc	r0, r4, r0, lsl #16
    494c:	00010800 	andeq	r0, r1, r0, lsl #16
    4950:	0030b85a 	eorseq	fp, r0, sl, asr r8
    4954:	0030f808 	eorseq	pc, r0, r8, lsl #16
    4958:	5a000108 	bpl	4d80 <_Min_Stack_Size+0x4980>
    495c:	08003130 	stmdaeq	r0, {r4, r5, r8, ip, sp}
    4960:	0800314a 	stmdaeq	r0, {r1, r3, r6, r8, ip, sp}
    4964:	525a0001 	subspl	r0, sl, #1
    4968:	68080031 	stmdavs	r8, {r0, r4, r5}
    496c:	01080031 	tsteq	r8, r1, lsr r0
    4970:	317e5a00 	cmncc	lr, r0, lsl #20
    4974:	31940800 	orrscc	r0, r4, r0, lsl #16
    4978:	00010800 	andeq	r0, r1, r0, lsl #16
    497c:	0031c65a 	eorseq	ip, r1, sl, asr r6
    4980:	0031f808 	eorseq	pc, r1, r8, lsl #16
    4984:	5a000108 	bpl	4dac <_Min_Stack_Size+0x49ac>
    4988:	0800322a 	stmdaeq	r0, {r1, r3, r5, r9, ip, sp}
    498c:	0800323c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, sp}
    4990:	005a0001 	subseq	r0, sl, r1
    4994:	00000000 	andeq	r0, r0, r0
    4998:	c0000000 	andgt	r0, r0, r0
    499c:	d6080030 			; <UNDEFINED> instruction: 0xd6080030
    49a0:	01080030 	tsteq	r8, r0, lsr r0
    49a4:	31525900 	cmpcc	r2, r0, lsl #18
    49a8:	31680800 	cmncc	r8, r0, lsl #16
    49ac:	00010800 	andeq	r0, r1, r0, lsl #16
    49b0:	0031c659 	eorseq	ip, r1, r9, asr r6
    49b4:	0031f808 	eorseq	pc, r1, r8, lsl #16
    49b8:	59000108 	stmdbpl	r0, {r3, r8}
	...
    49c4:	08003156 	stmdaeq	r0, {r1, r2, r4, r6, r8, ip, sp}
    49c8:	08003165 	stmdaeq	r0, {r0, r2, r5, r6, r8, ip, sp}
    49cc:	c6530001 	ldrbgt	r0, [r3], -r1
    49d0:	c8080031 	stmdagt	r8, {r0, r4, r5}
    49d4:	01080031 	tsteq	r8, r1, lsr r0
    49d8:	31c85300 	biccc	r5, r8, r0, lsl #6
    49dc:	31ce0800 	biccc	r0, lr, r0, lsl #16
    49e0:	00070800 	andeq	r0, r7, r0, lsl #16
    49e4:	79061876 	stmdbvc	r6, {r1, r2, r4, r5, r6, fp, ip}
    49e8:	009f2200 	addseq	r2, pc, r0, lsl #4
    49ec:	00000000 	andeq	r0, r0, r0
    49f0:	e6000000 	str	r0, [r0], -r0
    49f4:	f5080030 			; <UNDEFINED> instruction: 0xf5080030
    49f8:	01080030 	tsteq	r8, r0, lsr r0
    49fc:	00005300 	andeq	r5, r0, r0, lsl #6
    4a00:	00000000 	andeq	r0, r0, r0
    4a04:	30c00000 	sbccc	r0, r0, r0
    4a08:	30d60800 	sbcscc	r0, r6, r0, lsl #16
    4a0c:	00010800 	andeq	r0, r1, r0, lsl #16
    4a10:	00315256 	eorseq	r5, r1, r6, asr r2
    4a14:	00316808 	eorseq	r6, r1, r8, lsl #16
    4a18:	56000108 	strpl	r0, [r0], -r8, lsl #2
    4a1c:	080031c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip, sp}
    4a20:	080031f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip, sp}
    4a24:	00560001 	subseq	r0, r6, r1
    4a28:	00000000 	andeq	r0, r0, r0
    4a2c:	52000000 	andpl	r0, r0, #0
    4a30:	68080031 	stmdavs	r8, {r0, r4, r5}
    4a34:	02080031 	andeq	r0, r8, #49	; 0x31
    4a38:	c69f3000 	ldrgt	r3, [pc], r0
    4a3c:	f8080031 			; <UNDEFINED> instruction: 0xf8080031
    4a40:	02080031 	andeq	r0, r8, #49	; 0x31
    4a44:	009f3000 	addseq	r3, pc, r0
    4a48:	00000000 	andeq	r0, r0, r0
    4a4c:	52000000 	andpl	r0, r0, #0
    4a50:	68080031 	stmdavs	r8, {r0, r4, r5}
    4a54:	01080031 	tsteq	r8, r1, lsr r0
    4a58:	31c65900 	biccc	r5, r6, r0, lsl #18
    4a5c:	31f80800 	mvnscc	r0, r0, lsl #16
    4a60:	00010800 	andeq	r0, r1, r0, lsl #16
    4a64:	00000059 	andeq	r0, r0, r9, asr r0
    4a68:	00000000 	andeq	r0, r0, r0
    4a6c:	00315200 	eorseq	r5, r1, r0, lsl #4
    4a70:	00316808 	eorseq	r6, r1, r8, lsl #16
    4a74:	56000108 	strpl	r0, [r0], -r8, lsl #2
    4a78:	080031c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip, sp}
    4a7c:	080031f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip, sp}
    4a80:	00560001 	subseq	r0, r6, r1
    4a84:	00000000 	andeq	r0, r0, r0
    4a88:	52000000 	andpl	r0, r0, #0
    4a8c:	68080031 	stmdavs	r8, {r0, r4, r5}
    4a90:	02080031 	andeq	r0, r8, #49	; 0x31
    4a94:	c69f3000 	ldrgt	r3, [pc], r0
    4a98:	ec080031 	stc	0, cr0, [r8], {49}	; 0x31
    4a9c:	02080031 	andeq	r0, r8, #49	; 0x31
    4aa0:	ec9f3000 	ldc	0, cr3, [pc], {0}
    4aa4:	f2080031 	vqadd.s8	d0, d8, d17
    4aa8:	01080031 	tsteq	r8, r1, lsr r0
    4aac:	00005000 	andeq	r5, r0, r0
    4ab0:	00000000 	andeq	r0, r0, r0
    4ab4:	31340000 	teqcc	r4, r0
    4ab8:	314a0800 	cmpcc	sl, r0, lsl #16
    4abc:	00010800 	andeq	r0, r1, r0, lsl #16
    4ac0:	0031845a 	eorseq	r8, r1, sl, asr r4
    4ac4:	00319408 	eorseq	r9, r1, r8, lsl #8
    4ac8:	5a000108 	bpl	4ef0 <_Min_Stack_Size+0x4af0>
    4acc:	0800322a 	stmdaeq	r0, {r1, r3, r5, r9, ip, sp}
    4ad0:	0800323c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, sp}
    4ad4:	005a0001 	subseq	r0, sl, r1
    4ad8:	00000000 	andeq	r0, r0, r0
    4adc:	3a000000 	bcc	4ae4 <_Min_Stack_Size+0x46e4>
    4ae0:	52080031 	andpl	r0, r8, #49	; 0x31
    4ae4:	01080031 	tsteq	r8, r1, lsr r0
    4ae8:	31845600 	orrcc	r5, r4, r0, lsl #12
    4aec:	31c60800 	biccc	r0, r6, r0, lsl #16
    4af0:	00010800 	andeq	r0, r1, r0, lsl #16
    4af4:	00322a56 	eorseq	r2, r2, r6, asr sl
    4af8:	00324808 	eorseq	r4, r2, r8, lsl #16
    4afc:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    4b08:	0800318a 	stmdaeq	r0, {r1, r3, r7, r8, ip, sp}
    4b0c:	08003194 	stmdaeq	r0, {r2, r4, r7, r8, ip, sp}
    4b10:	2a5a0001 	bcs	1684b1c <_Min_Stack_Size+0x168471c>
    4b14:	3c080032 	stccc	0, cr0, [r8], {50}	; 0x32
    4b18:	01080032 	tsteq	r8, r2, lsr r0
    4b1c:	00005a00 	andeq	r5, r0, r0, lsl #20
    4b20:	00000000 	andeq	r0, r0, r0
    4b24:	318a0000 	orrcc	r0, sl, r0
    4b28:	31c60800 	biccc	r0, r6, r0, lsl #16
    4b2c:	00010800 	andeq	r0, r1, r0, lsl #16
    4b30:	00322a56 	eorseq	r2, r2, r6, asr sl
    4b34:	00324808 	eorseq	r4, r2, r8, lsl #16
    4b38:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    4b44:	0800318a 	stmdaeq	r0, {r1, r3, r7, r8, ip, sp}
    4b48:	08003198 	stmdaeq	r0, {r3, r4, r7, r8, ip, sp}
    4b4c:	9f300002 	svcls	0x00300002
    4b50:	08003198 	stmdaeq	r0, {r3, r4, r7, r8, ip, sp}
    4b54:	080031c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip, sp}
    4b58:	9f310002 	svcls	0x00310002
    4b5c:	0800322a 	stmdaeq	r0, {r1, r3, r5, r9, ip, sp}
    4b60:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
    4b64:	9f300002 	svcls	0x00300002
	...
    4b70:	0800323c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, sp}
    4b74:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
    4b78:	00560001 	subseq	r0, r6, r1
    4b7c:	00000000 	andeq	r0, r0, r0
    4b80:	46000000 	strmi	r0, [r0], -r0
    4b84:	48080032 	stmdami	r8, {r1, r4, r5}
    4b88:	02080032 	andeq	r0, r8, #50	; 0x32
    4b8c:	009f3000 	addseq	r3, pc, r0
    4b90:	00000000 	andeq	r0, r0, r0
    4b94:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    4b98:	c6080031 			; <UNDEFINED> instruction: 0xc6080031
    4b9c:	02080031 	andeq	r0, r8, #49	; 0x31
    4ba0:	009f3000 	addseq	r3, pc, r0
    4ba4:	00000000 	andeq	r0, r0, r0
    4ba8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    4bac:	c6080031 			; <UNDEFINED> instruction: 0xc6080031
    4bb0:	01080031 	tsteq	r8, r1, lsr r0
    4bb4:	00005600 	andeq	r5, r0, r0, lsl #12
    4bb8:	00000000 	andeq	r0, r0, r0
    4bbc:	31980000 	orrscc	r0, r8, r0
    4bc0:	31bc0800 			; <UNDEFINED> instruction: 0x31bc0800
    4bc4:	00020800 	andeq	r0, r2, r0, lsl #16
    4bc8:	31bc9f30 			; <UNDEFINED> instruction: 0x31bc9f30
    4bcc:	31c00800 	biccc	r0, r0, r0, lsl #16
    4bd0:	00010800 	andeq	r0, r1, r0, lsl #16
    4bd4:	00000050 	andeq	r0, r0, r0, asr r0
    4bd8:	00000000 	andeq	r0, r0, r0
    4bdc:	00306e00 	eorseq	r6, r0, r0, lsl #28
    4be0:	0030b808 	eorseq	fp, r0, r8, lsl #16
    4be4:	59000108 	stmdbpl	r0, {r3, r8}
    4be8:	080030f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip, sp}
    4bec:	08003130 	stmdaeq	r0, {r4, r5, r8, ip, sp}
    4bf0:	68590001 	ldmdavs	r9, {r0}^
    4bf4:	7e080031 	mcrvc	0, 0, r0, cr8, cr1, {1}
    4bf8:	01080031 	tsteq	r8, r1, lsr r0
    4bfc:	31f85900 	mvnscc	r5, r0, lsl #18
    4c00:	322a0800 	eorcc	r0, sl, #0, 16
    4c04:	00010800 	andeq	r0, r1, r0, lsl #16
    4c08:	00324859 	eorseq	r4, r2, r9, asr r8
    4c0c:	0032f008 	eorseq	pc, r2, r8
    4c10:	59000108 	stmdbpl	r0, {r3, r8}
	...
    4c1c:	0800312c 	stmdaeq	r0, {r2, r3, r5, r8, ip, sp}
    4c20:	08003130 	stmdaeq	r0, {r4, r5, r8, ip, sp}
    4c24:	9f310002 	svcls	0x00310002
	...
    4c30:	0800328a 	stmdaeq	r0, {r1, r3, r7, r9, ip, sp}
    4c34:	08003293 	stmdaeq	r0, {r0, r1, r4, r7, r9, ip, sp}
    4c38:	00500001 	subseq	r0, r0, r1
    4c3c:	00000000 	andeq	r0, r0, r0
    4c40:	7c000000 	stcvc	0, cr0, [r0], {-0}
    4c44:	b8080030 	stmdalt	r8, {r4, r5}
    4c48:	06080030 			; <UNDEFINED> instruction: 0x06080030
    4c4c:	6d6df200 	sfmvs	f7, 3, [sp, #-0]
    4c50:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    4c54:	30080030 	andcc	r0, r8, r0, lsr r0
    4c58:	06080031 			; <UNDEFINED> instruction: 0x06080031
    4c5c:	6d6df200 	sfmvs	f7, 3, [sp, #-0]
    4c60:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4c64:	7e080031 	mcrvc	0, 0, r0, cr8, cr1, {1}
    4c68:	06080031 			; <UNDEFINED> instruction: 0x06080031
    4c6c:	6d6df200 	sfmvs	f7, 3, [sp, #-0]
    4c70:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    4c74:	2a080031 	bcs	204d40 <_Min_Stack_Size+0x204940>
    4c78:	06080032 			; <UNDEFINED> instruction: 0x06080032
    4c7c:	6d6df200 	sfmvs	f7, 3, [sp, #-0]
    4c80:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    4c84:	f0080032 			; <UNDEFINED> instruction: 0xf0080032
    4c88:	06080032 			; <UNDEFINED> instruction: 0x06080032
    4c8c:	6d6df200 	sfmvs	f7, 3, [sp, #-0]
	...
    4c98:	86000000 	strhi	r0, [r0], -r0
    4c9c:	8a080030 	bhi	204d64 <_Min_Stack_Size+0x204964>
    4ca0:	01080030 	tsteq	r8, r0, lsr r0
    4ca4:	308a5000 	addcc	r5, sl, r0
    4ca8:	30b80800 	adcscc	r0, r8, r0, lsl #16
    4cac:	00030800 	andeq	r0, r3, r0, lsl #16
    4cb0:	f87fb891 			; <UNDEFINED> instruction: 0xf87fb891
    4cb4:	30080030 	andcc	r0, r8, r0, lsr r0
    4cb8:	03080031 	movweq	r0, #32817	; 0x8031
    4cbc:	7fb89100 	svcvc	0x00b89100
    4cc0:	08003168 	stmdaeq	r0, {r3, r5, r6, r8, ip, sp}
    4cc4:	0800317e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, ip, sp}
    4cc8:	b8910003 	ldmlt	r1, {r0, r1}
    4ccc:	0031f87f 	eorseq	pc, r1, pc, ror r8	; <UNPREDICTABLE>
    4cd0:	00322a08 	eorseq	r2, r2, r8, lsl #20
    4cd4:	91000308 	tstls	r0, r8, lsl #6
    4cd8:	32487fb8 	subcc	r7, r8, #184, 30	; 0x2e0
    4cdc:	32f00800 	rscscc	r0, r0, #0, 16
    4ce0:	00030800 	andeq	r0, r3, r0, lsl #16
    4ce4:	007fb891 			; <UNDEFINED> instruction: 0x007fb891
	...
    4cf0:	16080031 			; <UNDEFINED> instruction: 0x16080031
    4cf4:	01080031 	tsteq	r8, r1, lsr r0
    4cf8:	31685a00 	cmncc	r8, r0, lsl #20
    4cfc:	317e0800 	cmncc	lr, r0, lsl #16
    4d00:	00010800 	andeq	r0, r1, r0, lsl #16
    4d04:	0031f85a 	eorseq	pc, r1, sl, asr r8	; <UNPREDICTABLE>
    4d08:	00322a08 	eorseq	r2, r2, r8, lsl #20
    4d0c:	5a000108 	bpl	5134 <_Min_Stack_Size+0x4d34>
	...
    4d18:	0800316c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, sp}
    4d1c:	0800317b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, ip, sp}
    4d20:	f8530001 			; <UNDEFINED> instruction: 0xf8530001
    4d24:	fa080031 	blx	204df0 <_Min_Stack_Size+0x2049f0>
    4d28:	01080031 	tsteq	r8, r1, lsr r0
    4d2c:	31fa5300 	mvnscc	r5, r0, lsl #6
    4d30:	32000800 	andcc	r0, r0, #0, 16
    4d34:	00070800 	andeq	r0, r7, r0, lsl #16
    4d38:	7a061876 	bvc	18af18 <_Min_Stack_Size+0x18ab18>
    4d3c:	009f2200 	addseq	r2, pc, r0, lsl #4
    4d40:	00000000 	andeq	r0, r0, r0
    4d44:	26000000 	strcs	r0, [r0], -r0
    4d48:	30080031 	andcc	r0, r8, r1, lsr r0
    4d4c:	01080031 	tsteq	r8, r1, lsr r0
    4d50:	00005300 	andeq	r5, r0, r0, lsl #6
    4d54:	00000000 	andeq	r0, r0, r0
    4d58:	31000000 	mrscc	r0, (UNDEF: 0)
    4d5c:	31160800 	tstcc	r6, r0, lsl #16
    4d60:	00010800 	andeq	r0, r1, r0, lsl #16
    4d64:	00316856 	eorseq	r6, r1, r6, asr r8
    4d68:	00317e08 	eorseq	r7, r1, r8, lsl #28
    4d6c:	56000108 	strpl	r0, [r0], -r8, lsl #2
    4d70:	080031f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip, sp}
    4d74:	0800322a 	stmdaeq	r0, {r1, r3, r5, r9, ip, sp}
    4d78:	00560001 	subseq	r0, r6, r1
    4d7c:	00000000 	andeq	r0, r0, r0
    4d80:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4d84:	7e080031 	mcrvc	0, 0, r0, cr8, cr1, {1}
    4d88:	02080031 	andeq	r0, r8, #49	; 0x31
    4d8c:	f89f3000 			; <UNDEFINED> instruction: 0xf89f3000
    4d90:	2a080031 	bcs	204e5c <_Min_Stack_Size+0x204a5c>
    4d94:	02080032 	andeq	r0, r8, #50	; 0x32
    4d98:	009f3000 	addseq	r3, pc, r0
    4d9c:	00000000 	andeq	r0, r0, r0
    4da0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4da4:	7e080031 	mcrvc	0, 0, r0, cr8, cr1, {1}
    4da8:	01080031 	tsteq	r8, r1, lsr r0
    4dac:	31f85a00 	mvnscc	r5, r0, lsl #20
    4db0:	322a0800 	eorcc	r0, sl, #0, 16
    4db4:	00010800 	andeq	r0, r1, r0, lsl #16
    4db8:	0000005a 	andeq	r0, r0, sl, asr r0
    4dbc:	00000000 	andeq	r0, r0, r0
    4dc0:	00316800 	eorseq	r6, r1, r0, lsl #16
    4dc4:	00317e08 	eorseq	r7, r1, r8, lsl #28
    4dc8:	56000108 	strpl	r0, [r0], -r8, lsl #2
    4dcc:	080031f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip, sp}
    4dd0:	0800322a 	stmdaeq	r0, {r1, r3, r5, r9, ip, sp}
    4dd4:	00560001 	subseq	r0, r6, r1
    4dd8:	00000000 	andeq	r0, r0, r0
    4ddc:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4de0:	7e080031 	mcrvc	0, 0, r0, cr8, cr1, {1}
    4de4:	02080031 	andeq	r0, r8, #49	; 0x31
    4de8:	f89f3000 			; <UNDEFINED> instruction: 0xf89f3000
    4dec:	1e080031 	mcrne	0, 0, r0, cr8, cr1, {1}
    4df0:	02080032 	andeq	r0, r8, #50	; 0x32
    4df4:	1e9f3000 	cdpne	0, 9, cr3, cr15, cr0, {0}
    4df8:	24080032 	strcs	r0, [r8], #-50	; 0x32
    4dfc:	01080032 	tsteq	r8, r2, lsr r0
    4e00:	00005000 	andeq	r5, r0, r0
    4e04:	00000000 	andeq	r0, r0, r0
    4e08:	32560000 	subscc	r0, r6, #0
    4e0c:	32600800 	rsbcc	r0, r0, #0, 16
    4e10:	00010800 	andeq	r0, r1, r0, lsl #16
    4e14:	0032be53 	eorseq	fp, r2, r3, asr lr
    4e18:	0032d908 	eorseq	sp, r2, r8, lsl #18
    4e1c:	53000108 	movwpl	r0, #264	; 0x108
	...
    4e28:	08003256 	stmdaeq	r0, {r1, r2, r4, r6, r9, ip, sp}
    4e2c:	08003296 	stmdaeq	r0, {r1, r2, r4, r7, r9, ip, sp}
    4e30:	b8910003 	ldmlt	r1, {r0, r1}
    4e34:	0032be7f 	eorseq	fp, r2, pc, ror lr
    4e38:	0032ea08 	eorseq	lr, r2, r8, lsl #20
    4e3c:	91000308 	tstls	r0, r8, lsl #6
    4e40:	00007fb8 			; <UNDEFINED> instruction: 0x00007fb8
    4e44:	00000000 	andeq	r0, r0, r0
    4e48:	32560000 	subscc	r0, r6, #0
    4e4c:	32600800 	rsbcc	r0, r0, #0, 16
    4e50:	00060800 	andeq	r0, r6, r0, lsl #16
    4e54:	00730071 	rsbseq	r0, r3, r1, ror r0
    4e58:	32be9f22 	adcscc	r9, lr, #34, 30	; 0x88
    4e5c:	32c40800 	sbccc	r0, r4, #0, 16
    4e60:	00060800 	andeq	r0, r6, r0, lsl #16
    4e64:	00730071 	rsbseq	r0, r3, r1, ror r0
    4e68:	32c49f22 	sbccc	r9, r4, #34, 30	; 0x88
    4e6c:	32d90800 	sbcscc	r0, r9, #0, 16
    4e70:	00070800 	andeq	r0, r7, r0, lsl #16
    4e74:	73061879 	movwvc	r1, #26745	; 0x6879
    4e78:	009f2200 	addseq	r2, pc, r0, lsl #4
    4e7c:	00000000 	andeq	r0, r0, r0
    4e80:	56000000 	strpl	r0, [r0], -r0
    4e84:	96080032 			; <UNDEFINED> instruction: 0x96080032
    4e88:	01080032 	tsteq	r8, r2, lsr r0
    4e8c:	32be5900 	adcscc	r5, lr, #0, 18
    4e90:	32ea0800 	rsccc	r0, sl, #0, 16
    4e94:	00010800 	andeq	r0, r1, r0, lsl #16
    4e98:	00000059 	andeq	r0, r0, r9, asr r0
    4e9c:	00000000 	andeq	r0, r0, r0
    4ea0:	00325600 	eorseq	r5, r2, r0, lsl #12
    4ea4:	00326408 	eorseq	r6, r2, r8, lsl #8
    4ea8:	30000208 	andcc	r0, r0, r8, lsl #4
    4eac:	0032649f 	mlaseq	r2, pc, r4, r6	; <UNPREDICTABLE>
    4eb0:	00329608 	eorseq	r9, r2, r8, lsl #12
    4eb4:	31000208 	tstcc	r0, r8, lsl #4
    4eb8:	0032be9f 	mlaseq	r2, pc, lr, fp	; <UNPREDICTABLE>
    4ebc:	0032ea08 	eorseq	lr, r2, r8, lsl #20
    4ec0:	30000208 	andcc	r0, r0, r8, lsl #4
    4ec4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ec8:	00000000 	andeq	r0, r0, r0
    4ecc:	0032dc00 	eorseq	sp, r2, r0, lsl #24
    4ed0:	0032ea08 	eorseq	lr, r2, r8, lsl #20
    4ed4:	91000308 	tstls	r0, r8, lsl #6
    4ed8:	00007fb8 			; <UNDEFINED> instruction: 0x00007fb8
    4edc:	00000000 	andeq	r0, r0, r0
    4ee0:	32dc0000 	sbcscc	r0, ip, #0
    4ee4:	32ea0800 	rsccc	r0, sl, #0, 16
    4ee8:	00010800 	andeq	r0, r1, r0, lsl #16
    4eec:	00000059 	andeq	r0, r0, r9, asr r0
    4ef0:	00000000 	andeq	r0, r0, r0
    4ef4:	0032e800 	eorseq	lr, r2, r0, lsl #16
    4ef8:	0032ea08 	eorseq	lr, r2, r8, lsl #20
    4efc:	30000208 	andcc	r0, r0, r8, lsl #4
    4f00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4f04:	00000000 	andeq	r0, r0, r0
    4f08:	0032a600 	eorseq	sl, r2, r0, lsl #12
    4f0c:	0032be08 	eorseq	fp, r2, r8, lsl #28
    4f10:	91000308 	tstls	r0, r8, lsl #6
    4f14:	00007fb8 			; <UNDEFINED> instruction: 0x00007fb8
    4f18:	00000000 	andeq	r0, r0, r0
    4f1c:	32a60000 	adccc	r0, r6, #0
    4f20:	32b00800 	adcscc	r0, r0, #0, 16
    4f24:	00010800 	andeq	r0, r1, r0, lsl #16
    4f28:	0032b053 	eorseq	fp, r2, r3, asr r0
    4f2c:	0032b808 	eorseq	fp, r2, r8, lsl #16
    4f30:	79000208 	stmdbvc	r0, {r3, r9}
    4f34:	0032b804 	eorseq	fp, r2, r4, lsl #16
    4f38:	0032bb08 	eorseq	fp, r2, r8, lsl #22
    4f3c:	71000208 	tstvc	r0, r8, lsl #4
	...
    4f48:	0032a600 	eorseq	sl, r2, r0, lsl #12
    4f4c:	0032be08 	eorseq	fp, r2, r8, lsl #28
    4f50:	59000108 	stmdbpl	r0, {r3, r8}
	...
    4f5c:	080032a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, ip, sp}
    4f60:	080032be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, ip, sp}
    4f64:	9f300002 	svcls	0x00300002
	...
    4f70:	080032f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, sp}
    4f74:	080032f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r9, ip, sp}
    4f78:	f7500001 			; <UNDEFINED> instruction: 0xf7500001
    4f7c:	fa080032 	blx	20504c <_Min_Stack_Size+0x204c4c>
    4f80:	01080032 	tsteq	r8, r2, lsr r0
    4f84:	32fa5400 	rscscc	r5, sl, #0, 8
    4f88:	33080800 	movwcc	r0, #34816	; 0x8800
    4f8c:	00040800 	andeq	r0, r4, r0, lsl #16
    4f90:	9f5001f3 	svcls	0x005001f3
	...
    4f9c:	080032f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip, sp}
    4fa0:	080032f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r9, ip, sp}
    4fa4:	f7500001 			; <UNDEFINED> instruction: 0xf7500001
    4fa8:	fa080032 	blx	205078 <_Min_Stack_Size+0x204c78>
    4fac:	01080032 	tsteq	r8, r2, lsr r0
    4fb0:	32fa5400 	rscscc	r5, sl, #0, 8
    4fb4:	33080800 	movwcc	r0, #34816	; 0x8800
    4fb8:	00040800 	andeq	r0, r4, r0, lsl #16
    4fbc:	9f5001f3 	svcls	0x005001f3
	...
    4fc8:	08003308 	stmdaeq	r0, {r3, r8, r9, ip, sp}
    4fcc:	0800330a 	stmdaeq	r0, {r1, r3, r8, r9, ip, sp}
    4fd0:	0a500001 	beq	1404fdc <_Min_Stack_Size+0x1404bdc>
    4fd4:	0c080033 	stceq	0, cr0, [r8], {51}	; 0x33
    4fd8:	04080033 	streq	r0, [r8], #-51	; 0x33
    4fdc:	5001f300 	andpl	pc, r1, r0, lsl #6
    4fe0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4fe4:	00000000 	andeq	r0, r0, r0
    4fe8:	00333c00 	eorseq	r3, r3, r0, lsl #24
    4fec:	00333c08 	eorseq	r3, r3, r8, lsl #24
    4ff0:	50000108 	andpl	r0, r0, r8, lsl #2
    4ff4:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
    4ff8:	08003352 	stmdaeq	r0, {r1, r4, r6, r8, r9, ip, sp}
    4ffc:	7c700003 	ldclvc	0, cr0, [r0], #-12
    5000:	0033529f 	mlaseq	r3, pc, r2, r5	; <UNPREDICTABLE>
    5004:	00336208 	eorseq	r6, r3, r8, lsl #4
    5008:	70000308 	andvc	r0, r0, r8, lsl #6
    500c:	33629f74 	cmncc	r2, #116, 30	; 0x1d0
    5010:	33660800 	cmncc	r6, #0, 16
    5014:	00040800 	andeq	r0, r4, r0, lsl #16
    5018:	9f7fbc70 	svcls	0x007fbc70
    501c:	08003366 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, ip, sp}
    5020:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
    5024:	00500001 	subseq	r0, r0, r1
    5028:	00000000 	andeq	r0, r0, r0
    502c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5030:	0e080034 	mcreq	0, 0, r0, cr8, cr4, {1}
    5034:	01080034 	tsteq	r8, r4, lsr r0
    5038:	340e5000 	strcc	r5, [lr], #-0
    503c:	340e0800 	strcc	r0, [lr], #-2048	; 0x800
    5040:	00040800 	andeq	r0, r4, r0, lsl #16
    5044:	9f5001f3 	svcls	0x005001f3
	...
    5050:	080035a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, ip, sp}
    5054:	080035e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, sl, ip, sp}
    5058:	e6510001 	ldrb	r0, [r1], -r1
    505c:	e9080035 	stmdb	r8, {r0, r2, r4, r5}
    5060:	01080035 	tsteq	r8, r5, lsr r0
    5064:	00005100 	andeq	r5, r0, r0, lsl #2
    5068:	00000000 	andeq	r0, r0, r0
    506c:	35bc0000 	ldrcc	r0, [ip, #0]!
    5070:	35c20800 	strbcc	r0, [r2, #2048]	; 0x800
    5074:	00010800 	andeq	r0, r1, r0, lsl #16
    5078:	0035e652 	eorseq	lr, r5, r2, asr r6
    507c:	0035e908 	eorseq	lr, r5, r8, lsl #18
    5080:	52000108 	andpl	r0, r0, #8, 2
	...
    508c:	080035ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, sp}
    5090:	080035fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, ip, sp}
    5094:	fa500001 	blx	14050a0 <_Min_Stack_Size+0x1404ca0>
    5098:	20080035 	andcs	r0, r8, r5, lsr r0
    509c:	01080036 	tsteq	r8, r6, lsr r0
    50a0:	36205400 	strtcc	r5, [r0], -r0, lsl #8
    50a4:	363e0800 	ldrtcc	r0, [lr], -r0, lsl #16
    50a8:	00390800 	eorseq	r0, r9, r0, lsl #16
    50ac:	095001f3 	ldmdbeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    50b0:	01f31af8 	ldrsheq	r1, [r3, #168]!	; 0xa8
    50b4:	5001f350 	andpl	pc, r1, r0, asr r3	; <UNPREDICTABLE>
    50b8:	2e30244d 	cdpcs	4, 3, cr2, cr0, cr13, {2}
    50bc:	16000128 	strne	r0, [r0], -r8, lsr #2
    50c0:	f3082313 	vcge.u8	d2, d8, d3
    50c4:	f8095001 			; <UNDEFINED> instruction: 0xf8095001
    50c8:	5001f31a 	andpl	pc, r1, sl, lsl r3	; <UNPREDICTABLE>
    50cc:	4d5001f3 	ldfmie	f0, [r0, #-972]	; 0xfffffc34
    50d0:	282e3024 	stmdacs	lr!, {r2, r5, ip, sp}
    50d4:	13160001 	tstne	r6, #1
    50d8:	4d5001f3 	ldfmie	f0, [r0, #-972]	; 0xfffffc34
    50dc:	282e3024 	stmdacs	lr!, {r2, r5, ip, sp}
    50e0:	13160001 	tstne	r6, #1
    50e4:	00363e9f 	mlaseq	r6, pc, lr, r3	; <UNPREDICTABLE>
    50e8:	00364c08 	eorseq	r4, r6, r8, lsl #24
    50ec:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    50f8:	080035ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, sp}
    50fc:	0800362a 	stmdaeq	r0, {r1, r3, r5, r9, sl, ip, sp}
    5100:	9f300002 	svcls	0x00300002
    5104:	0800362a 	stmdaeq	r0, {r1, r3, r5, r9, sl, ip, sp}
    5108:	08003634 	stmdaeq	r0, {r2, r4, r5, r9, sl, ip, sp}
    510c:	34550001 	ldrbcc	r0, [r5], #-1
    5110:	36080036 			; <UNDEFINED> instruction: 0x36080036
    5114:	02080036 	andeq	r0, r8, #54	; 0x36
    5118:	369f3000 	ldrcc	r3, [pc], r0
    511c:	3e080036 	mcrcc	0, 0, r0, cr8, cr6, {1}
    5120:	01080036 	tsteq	r8, r6, lsr r0
    5124:	363e5500 	ldrtcc	r5, [lr], -r0, lsl #10
    5128:	364c0800 	strbcc	r0, [ip], -r0, lsl #16
    512c:	00020800 	andeq	r0, r2, r0, lsl #16
    5130:	00009f30 	andeq	r9, r0, r0, lsr pc
    5134:	00000000 	andeq	r0, r0, r0
    5138:	364c0000 	strbcc	r0, [ip], -r0
    513c:	36530800 	ldrbcc	r0, [r3], -r0, lsl #16
    5140:	00010800 	andeq	r0, r1, r0, lsl #16
    5144:	00365350 	eorseq	r5, r6, r0, asr r3
    5148:	00365608 	eorseq	r5, r6, r8, lsl #12
    514c:	f3000408 	vshl.u8	d0, d8, d0
    5150:	569f5001 	ldrpl	r5, [pc], r1
    5154:	58080036 	stmdapl	r8, {r1, r2, r4, r5}
    5158:	01080036 	tsteq	r8, r6, lsr r0
    515c:	00005000 	andeq	r5, r0, r0
    5160:	00000000 	andeq	r0, r0, r0
    5164:	367c0000 	ldrbtcc	r0, [ip], -r0
    5168:	36840800 	strcc	r0, [r4], r0, lsl #16
    516c:	00010800 	andeq	r0, r1, r0, lsl #16
    5170:	00368450 	eorseq	r8, r6, r0, asr r4
    5174:	00369008 	eorseq	r9, r6, r8
    5178:	f3000408 	vshl.u8	d0, d8, d0
    517c:	009f5001 	addseq	r5, pc, r1
    5180:	00000000 	andeq	r0, r0, r0
    5184:	90000000 	andls	r0, r0, r0
    5188:	a6080036 			; <UNDEFINED> instruction: 0xa6080036
    518c:	01080036 	tsteq	r8, r6, lsr r0
    5190:	36a65000 	strtcc	r5, [r6], r0
    5194:	36b60800 	ldrtcc	r0, [r6], r0, lsl #16
    5198:	00040800 	andeq	r0, r4, r0, lsl #16
    519c:	9f5001f3 	svcls	0x005001f3
    51a0:	080036b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, ip, sp}
    51a4:	080036fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, ip, sp}
    51a8:	fe500001 	cdp2	0, 5, cr0, cr0, cr1, {0}
    51ac:	10080036 	andne	r0, r8, r6, lsr r0
    51b0:	04080037 	streq	r0, [r8], #-55	; 0x37
    51b4:	5001f300 	andpl	pc, r1, r0, lsl #6
    51b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    51bc:	00000000 	andeq	r0, r0, r0
    51c0:	00369000 	eorseq	r9, r6, r0
    51c4:	0036cc08 	eorseq	ip, r6, r8, lsl #24
    51c8:	30000208 	andcc	r0, r0, r8, lsl #4
    51cc:	0036cc9f 	mlaseq	r6, pc, ip, ip	; <UNPREDICTABLE>
    51d0:	0036dc08 	eorseq	sp, r6, r8, lsl #24
    51d4:	52000108 	andpl	r0, r0, #8, 2
    51d8:	080036de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, ip, sp}
    51dc:	080036e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, ip, sp}
    51e0:	e2510001 	subs	r0, r1, #1
    51e4:	ec080036 	stc	0, cr0, [r8], {54}	; 0x36
    51e8:	01080036 	tsteq	r8, r6, lsr r0
    51ec:	36ee5200 	strbtcc	r5, [lr], r0, lsl #4
    51f0:	36f40800 	ldrbtcc	r0, [r4], r0, lsl #16
    51f4:	00010800 	andeq	r0, r1, r0, lsl #16
    51f8:	00000052 	andeq	r0, r0, r2, asr r0
    51fc:	00000000 	andeq	r0, r0, r0
    5200:	00369000 	eorseq	r9, r6, r0
    5204:	0036cc08 	eorseq	ip, r6, r8, lsl #24
    5208:	30000208 	andcc	r0, r0, r8, lsl #4
    520c:	0036cc9f 	mlaseq	r6, pc, ip, ip	; <UNPREDICTABLE>
    5210:	0036dc08 	eorseq	sp, r6, r8, lsl #24
    5214:	34000508 	strcc	r0, [r0], #-1288	; 0x508
    5218:	9f1c0072 	svcls	0x001c0072
	...
    5224:	08003690 	stmdaeq	r0, {r4, r7, r9, sl, ip, sp}
    5228:	080036cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, sp}
    522c:	9f3f0002 	svcls	0x003f0002
    5230:	080036cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, sp}
    5234:	080036dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, sp}
    5238:	723f0005 	eorsvc	r0, pc, #5
    523c:	009f2600 	addseq	r2, pc, r0, lsl #12
    5240:	00000000 	andeq	r0, r0, r0
    5244:	10000000 	andne	r0, r0, r0
    5248:	22080037 	andcs	r0, r8, #55	; 0x37
    524c:	01080037 	tsteq	r8, r7, lsr r0
    5250:	37225000 	strcc	r5, [r2, -r0]!
    5254:	37260800 	strcc	r0, [r6, -r0, lsl #16]!
    5258:	00040800 	andeq	r0, r4, r0, lsl #16
    525c:	9f5001f3 	svcls	0x005001f3
	...
    5268:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
    526c:	08003714 	stmdaeq	r0, {r2, r4, r8, r9, sl, ip, sp}
    5270:	14510001 	ldrbne	r0, [r1], #-1
    5274:	26080037 			; <UNDEFINED> instruction: 0x26080037
    5278:	04080037 	streq	r0, [r8], #-55	; 0x37
    527c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5280:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5284:	00000000 	andeq	r0, r0, r0
    5288:	00372800 	eorseq	r2, r7, r0, lsl #16
    528c:	00373808 	eorseq	r3, r7, r8, lsl #16
    5290:	50000108 	andpl	r0, r0, r8, lsl #2
    5294:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
    5298:	0800373c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, sp}
    529c:	01f30004 	mvnseq	r0, r4
    52a0:	373c9f50 			; <UNDEFINED> instruction: 0x373c9f50
    52a4:	373e0800 	ldrcc	r0, [lr, -r0, lsl #16]!
    52a8:	00010800 	andeq	r0, r1, r0, lsl #16
    52ac:	00373e50 	eorseq	r3, r7, r0, asr lr
    52b0:	00374208 	eorseq	r4, r7, r8, lsl #4
    52b4:	f3000408 	vshl.u8	d0, d8, d0
    52b8:	009f5001 	addseq	r5, pc, r1
    52bc:	00000000 	andeq	r0, r0, r0
    52c0:	60000000 	andvs	r0, r0, r0
    52c4:	ea080037 	b	2053a8 <_Min_Stack_Size+0x204fa8>
    52c8:	01080037 	tsteq	r8, r7, lsr r0
    52cc:	37ea5000 	strbcc	r5, [sl, r0]!
    52d0:	37fe0800 	ldrbcc	r0, [lr, r0, lsl #16]!
    52d4:	00040800 	andeq	r0, r4, r0, lsl #16
    52d8:	9f5001f3 	svcls	0x005001f3
    52dc:	080037fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
    52e0:	08003800 	stmdaeq	r0, {fp, ip, sp}
    52e4:	00500001 	subseq	r0, r0, r1
    52e8:	12080038 	andne	r0, r8, #56	; 0x38
    52ec:	04080038 	streq	r0, [r8], #-56	; 0x38
    52f0:	5001f300 	andpl	pc, r1, r0, lsl #6
    52f4:	0038129f 	mlaseq	r8, pc, r2, r1	; <UNPREDICTABLE>
    52f8:	00381408 	eorseq	r1, r8, r8, lsl #8
    52fc:	50000108 	andpl	r0, r0, r8, lsl #2
    5300:	08003814 	stmdaeq	r0, {r2, r4, fp, ip, sp}
    5304:	08003826 	stmdaeq	r0, {r1, r2, r5, fp, ip, sp}
    5308:	01f30004 	mvnseq	r0, r4
    530c:	38269f50 	stmdacc	r6!, {r4, r6, r8, r9, sl, fp, ip, pc}
    5310:	38280800 	stmdacc	r8!, {fp}
    5314:	00010800 	andeq	r0, r1, r0, lsl #16
    5318:	00382850 	eorseq	r2, r8, r0, asr r8
    531c:	00383a08 	eorseq	r3, r8, r8, lsl #20
    5320:	f3000408 	vshl.u8	d0, d8, d0
    5324:	3a9f5001 	bcc	fe7d9330 <_estack+0xde7a9330>
    5328:	3c080038 	stccc	0, cr0, [r8], {56}	; 0x38
    532c:	01080038 	tsteq	r8, r8, lsr r0
    5330:	383c5000 	ldmdacc	ip!, {ip, lr}
    5334:	384e0800 	stmdacc	lr, {fp}^
    5338:	00040800 	andeq	r0, r4, r0, lsl #16
    533c:	9f5001f3 	svcls	0x005001f3
    5340:	0800384e 	stmdaeq	r0, {r1, r2, r3, r6, fp, ip, sp}
    5344:	08003850 	stmdaeq	r0, {r4, r6, fp, ip, sp}
    5348:	50500001 	subspl	r0, r0, r1
    534c:	62080038 	andvs	r0, r8, #56	; 0x38
    5350:	04080038 	streq	r0, [r8], #-56	; 0x38
    5354:	5001f300 	andpl	pc, r1, r0, lsl #6
    5358:	0038629f 	mlaseq	r8, pc, r2, r6	; <UNPREDICTABLE>
    535c:	00386408 	eorseq	r6, r8, r8, lsl #8
    5360:	50000108 	andpl	r0, r0, r8, lsl #2
    5364:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
    5368:	08003876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, ip, sp}
    536c:	01f30004 	mvnseq	r0, r4
    5370:	38769f50 	ldmdacc	r6!, {r4, r6, r8, r9, sl, fp, ip, pc}^
    5374:	38780800 	ldmdacc	r8!, {fp}^
    5378:	00010800 	andeq	r0, r1, r0, lsl #16
    537c:	00387850 	eorseq	r7, r8, r0, asr r8
    5380:	00388a08 	eorseq	r8, r8, r8, lsl #20
    5384:	f3000408 	vshl.u8	d0, d8, d0
    5388:	8a9f5001 	bhi	fe7d9394 <_estack+0xde7a9394>
    538c:	8c080038 	stchi	0, cr0, [r8], {56}	; 0x38
    5390:	01080038 	tsteq	r8, r8, lsr r0
    5394:	388c5000 	stmcc	ip, {ip, lr}
    5398:	389e0800 	ldmcc	lr, {fp}
    539c:	00040800 	andeq	r0, r4, r0, lsl #16
    53a0:	9f5001f3 	svcls	0x005001f3
    53a4:	0800389e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, ip, sp}
    53a8:	080038a2 	stmdaeq	r0, {r1, r5, r7, fp, ip, sp}
    53ac:	a2500001 	subsge	r0, r0, #1
    53b0:	b6080038 			; <UNDEFINED> instruction: 0xb6080038
    53b4:	04080038 	streq	r0, [r8], #-56	; 0x38
    53b8:	5001f300 	andpl	pc, r1, r0, lsl #6
    53bc:	0038b69f 	mlaseq	r8, pc, r6, fp	; <UNPREDICTABLE>
    53c0:	0038ba08 	eorseq	fp, r8, r8, lsl #20
    53c4:	50000108 	andpl	r0, r0, r8, lsl #2
    53c8:	080038ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, ip, sp}
    53cc:	080038ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, sp}
    53d0:	01f30004 	mvnseq	r0, r4
    53d4:	00009f50 	andeq	r9, r0, r0, asr pc
    53d8:	00000000 	andeq	r0, r0, r0
    53dc:	38d00000 	ldmcc	r0, {}^	; <UNPREDICTABLE>
    53e0:	38e20800 	stmiacc	r2!, {fp}^
    53e4:	00020800 	andeq	r0, r2, r0, lsl #16
    53e8:	38e29f30 	stmiacc	r2!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    53ec:	39900800 	ldmibcc	r0, {fp}
    53f0:	00010800 	andeq	r0, r1, r0, lsl #16
    53f4:	00000053 	andeq	r0, r0, r3, asr r0
    53f8:	00000000 	andeq	r0, r0, r0
    53fc:	0038d000 	eorseq	sp, r8, r0
    5400:	0038e208 	eorseq	lr, r8, r8, lsl #4
    5404:	30000208 	andcc	r0, r0, r8, lsl #4
    5408:	0038e29f 	mlaseq	r8, pc, r2, lr	; <UNPREDICTABLE>
    540c:	0038ec08 	eorseq	lr, r8, r8, lsl #24
    5410:	54000108 	strpl	r0, [r0], #-264	; 0x108
    5414:	080038f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, ip, sp}
    5418:	08003904 	stmdaeq	r0, {r2, r8, fp, ip, sp}
    541c:	04540001 	ldrbeq	r0, [r4], #-1
    5420:	3e080039 	mcrcc	0, 0, r0, cr8, cr9, {1}
    5424:	06080039 			; <UNDEFINED> instruction: 0x06080039
    5428:	73007700 	movwvc	r7, #1792	; 0x700
    542c:	3e9f2400 	cdpcc	4, 9, cr2, cr15, cr0, {0}
    5430:	4a080039 	bmi	20551c <_Min_Stack_Size+0x20511c>
    5434:	06080039 			; <UNDEFINED> instruction: 0x06080039
    5438:	73007700 	movwvc	r7, #1792	; 0x700
    543c:	509f247f 	addspl	r2, pc, pc, ror r4	; <UNPREDICTABLE>
    5440:	90080039 	andls	r0, r8, r9, lsr r0
    5444:	06080039 			; <UNDEFINED> instruction: 0x06080039
    5448:	73007700 	movwvc	r7, #1792	; 0x700
    544c:	009f2400 	addseq	r2, pc, r0, lsl #8
    5450:	00000000 	andeq	r0, r0, r0
    5454:	d0000000 	andle	r0, r0, r0
    5458:	e2080038 	and	r0, r8, #56	; 0x38
    545c:	02080038 	andeq	r0, r8, #56	; 0x38
    5460:	e29f3000 	adds	r3, pc, #0
    5464:	ec080038 	stc	0, cr0, [r8], {56}	; 0x38
    5468:	01080038 	tsteq	r8, r8, lsr r0
    546c:	38f45500 	ldmcc	r4!, {r8, sl, ip, lr}^
    5470:	392c0800 	stmdbcc	ip!, {fp}
    5474:	00010800 	andeq	r0, r1, r0, lsl #16
    5478:	00392c55 	eorseq	r2, r9, r5, asr ip
    547c:	00393e08 	eorseq	r3, r9, r8, lsl #28
    5480:	77000908 	strvc	r0, [r0, -r8, lsl #18]
    5484:	24007300 	strcs	r7, [r0], #-768	; 0x300
    5488:	9f1a0076 	svcls	0x001a0076
    548c:	0800393e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp, ip, sp}
    5490:	0800394a 	stmdaeq	r0, {r1, r3, r6, r8, fp, ip, sp}
    5494:	00770009 	rsbseq	r0, r7, r9
    5498:	76247f73 	qsub16vc	r7, r4, r3
    549c:	509f1a00 	addspl	r1, pc, r0, lsl #20
    54a0:	7c080039 	stcvc	0, cr0, [r8], {57}	; 0x39
    54a4:	01080039 	tsteq	r8, r9, lsr r0
    54a8:	397c5500 	ldmdbcc	ip!, {r8, sl, ip, lr}^
    54ac:	39900800 	ldmibcc	r0, {fp}
    54b0:	00090800 	andeq	r0, r9, r0, lsl #16
    54b4:	00730077 	rsbseq	r0, r3, r7, ror r0
    54b8:	1a007624 	bne	22d50 <_Min_Stack_Size+0x22950>
    54bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    54c0:	00000000 	andeq	r0, r0, r0
    54c4:	0039c800 	eorseq	ip, r9, r0, lsl #16
    54c8:	0039d208 	eorseq	sp, r9, r8, lsl #4
    54cc:	50000108 	andpl	r0, r0, r8, lsl #2
    54d0:	080039d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, fp, ip, sp}
    54d4:	080039d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp}
    54d8:	01f30004 	mvnseq	r0, r4
    54dc:	00009f50 	andeq	r9, r0, r0, asr pc
    54e0:	00000000 	andeq	r0, r0, r0
    54e4:	39c80000 	stmibcc	r8, {}^	; <UNPREDICTABLE>
    54e8:	39ca0800 	stmibcc	sl, {fp}^
    54ec:	00020800 	andeq	r0, r2, r0, lsl #16
    54f0:	39ca9f30 	stmibcc	sl, {r4, r5, r8, r9, sl, fp, ip, pc}^
    54f4:	39d40800 	ldmibcc	r4, {fp}^
    54f8:	000c0800 	andeq	r0, ip, r0, lsl #16
    54fc:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    5500:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    5504:	9f2e301a 	svcls	0x002e301a
	...
    5510:	080039d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp}
    5514:	080039d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, fp, ip, sp}
    5518:	d6500001 	ldrble	r0, [r0], -r1
    551c:	da080039 	ble	205608 <_Min_Stack_Size+0x205208>
    5520:	04080039 	streq	r0, [r8], #-57	; 0x39
    5524:	5001f300 	andpl	pc, r1, r0, lsl #6
    5528:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    552c:	00000000 	andeq	r0, r0, r0
    5530:	0039dc00 	eorseq	sp, r9, r0, lsl #24
    5534:	0039e608 	eorseq	lr, r9, r8, lsl #12
    5538:	50000108 	andpl	r0, r0, r8, lsl #2
    553c:	080039e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp, ip, sp}
    5540:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
    5544:	01f30004 	mvnseq	r0, r4
    5548:	00009f50 	andeq	r9, r0, r0, asr pc
    554c:	00000000 	andeq	r0, r0, r0
    5550:	39dc0000 	ldmibcc	ip, {}^	; <UNPREDICTABLE>
    5554:	39de0800 	ldmibcc	lr, {fp}^
    5558:	00020800 	andeq	r0, r2, r0, lsl #16
    555c:	39de9f30 	ldmibcc	lr, {r4, r5, r8, r9, sl, fp, ip, pc}^
    5560:	39e80800 	stmibcc	r8!, {fp}^
    5564:	000c0800 	andeq	r0, ip, r0, lsl #16
    5568:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    556c:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    5570:	9f2e301a 	svcls	0x002e301a
	...
    557c:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
    5580:	080039ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, fp, ip, sp}
    5584:	ea500001 	b	1405590 <_Min_Stack_Size+0x1405190>
    5588:	ee080039 	mcr	0, 0, r0, cr8, cr9, {1}
    558c:	04080039 	streq	r0, [r8], #-57	; 0x39
    5590:	5001f300 	andpl	pc, r1, r0, lsl #6
    5594:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5598:	00000000 	andeq	r0, r0, r0
    559c:	003a0800 	eorseq	r0, sl, r0, lsl #16
    55a0:	003a0c08 	eorseq	r0, sl, r8, lsl #24
    55a4:	51000108 	tstpl	r0, r8, lsl #2
    55a8:	08003a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip, sp}
    55ac:	08003a10 	stmdaeq	r0, {r4, r9, fp, ip, sp}
    55b0:	01f30004 	mvnseq	r0, r4
    55b4:	00009f51 	andeq	r9, r0, r1, asr pc
    55b8:	00000000 	andeq	r0, r0, r0
    55bc:	3a100000 	bcc	4055c4 <_Min_Stack_Size+0x4051c4>
    55c0:	3a160800 	bcc	5875c8 <_Min_Stack_Size+0x5871c8>
    55c4:	00010800 	andeq	r0, r1, r0, lsl #16
    55c8:	003a1650 	eorseq	r1, sl, r0, asr r6
    55cc:	003a3808 	eorseq	r3, sl, r8, lsl #16
    55d0:	f3000408 	vshl.u8	d0, d8, d0
    55d4:	009f5001 	addseq	r5, pc, r1
    55d8:	00000000 	andeq	r0, r0, r0
    55dc:	10000000 	andne	r0, r0, r0
    55e0:	1a08003a 	bne	2056d0 <_Min_Stack_Size+0x2052d0>
    55e4:	0108003a 	tsteq	r8, sl, lsr r0
    55e8:	3a1a5100 	bcc	6999f0 <_Min_Stack_Size+0x6995f0>
    55ec:	3a380800 	bcc	e075f4 <_Min_Stack_Size+0xe071f4>
    55f0:	00040800 	andeq	r0, r4, r0, lsl #16
    55f4:	9f5101f3 	svcls	0x005101f3
	...
    5600:	08003a10 	stmdaeq	r0, {r4, r9, fp, ip, sp}
    5604:	08003a32 	stmdaeq	r0, {r1, r4, r5, r9, fp, ip, sp}
    5608:	32520001 	subscc	r0, r2, #1
    560c:	3808003a 	stmdacc	r8, {r1, r3, r4, r5}
    5610:	0408003a 	streq	r0, [r8], #-58	; 0x3a
    5614:	5201f300 	andpl	pc, r1, #0, 6
    5618:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    561c:	00000000 	andeq	r0, r0, r0
    5620:	003a1000 	eorseq	r1, sl, r0
    5624:	003a1e08 	eorseq	r1, sl, r8, lsl #28
    5628:	30000208 	andcc	r0, r0, r8, lsl #4
    562c:	003a1e9f 	mlaseq	sl, pc, lr, r1	; <UNPREDICTABLE>
    5630:	003a3208 	eorseq	r3, sl, r8, lsl #4
    5634:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    5638:	1aff0800 	bne	fffc7640 <_estack+0xdff97640>
    563c:	9f240071 	svcls	0x00240071
    5640:	08003a32 	stmdaeq	r0, {r1, r4, r5, r9, fp, ip, sp}
    5644:	08003a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip, sp}
    5648:	01f3000a 	mvnseq	r0, sl
    564c:	1aff0852 	bne	fffc779c <_estack+0xdff9779c>
    5650:	9f240071 	svcls	0x00240071
	...
    565c:	08003a10 	stmdaeq	r0, {r4, r9, fp, ip, sp}
    5660:	08003a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, sp}
    5664:	9f300002 	svcls	0x00300002
    5668:	08003a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, sp}
    566c:	08003a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip, sp}
    5670:	00530001 	subseq	r0, r3, r1
    5674:	00000000 	andeq	r0, r0, r0
    5678:	a6000000 	strge	r0, [r0], -r0
    567c:	c808003a 	stmdagt	r8, {r1, r3, r4, r5}
    5680:	0208003a 	andeq	r0, r8, #58	; 0x3a
    5684:	c89f3000 	ldmgt	pc, {ip, sp}	; <UNPREDICTABLE>
    5688:	cc08003a 	stcgt	0, cr0, [r8], {58}	; 0x3a
    568c:	0708003a 	smladxeq	r8, sl, r0, r0
    5690:	41007000 	mrsmi	r7, (UNDEF: 0)
    5694:	9f1a3125 	svcls	0x001a3125
    5698:	08003ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, ip, sp}
    569c:	08003ada 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, fp, ip, sp}
    56a0:	9f300002 	svcls	0x00300002
	...
    56ac:	08003aa6 	stmdaeq	r0, {r1, r2, r5, r7, r9, fp, ip, sp}
    56b0:	08003aaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, fp, ip, sp}
    56b4:	9f300002 	svcls	0x00300002
	...
    56c0:	08003aaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, fp, ip, sp}
    56c4:	08003aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip, sp}
    56c8:	9f310002 	svcls	0x00310002
    56cc:	08003aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip, sp}
    56d0:	08003ada 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, fp, ip, sp}
    56d4:	9f410002 	svcls	0x00410002
	...
    56e0:	08003aaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, fp, ip, sp}
    56e4:	08003aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip, sp}
    56e8:	9f300002 	svcls	0x00300002
    56ec:	08003aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip, sp}
    56f0:	08003aae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, fp, ip, sp}
    56f4:	00530001 	subseq	r0, r3, r1
    56f8:	00000000 	andeq	r0, r0, r0
    56fc:	aa000000 	bge	5704 <_Min_Stack_Size+0x5304>
    5700:	be08003a 	mcrlt	0, 0, r0, cr8, cr10, {1}
    5704:	0208003a 	andeq	r0, r8, #58	; 0x3a
    5708:	d09f3000 	addsle	r3, pc, r0
    570c:	da08003a 	ble	2057fc <_Min_Stack_Size+0x2053fc>
    5710:	0208003a 	andeq	r0, r8, #58	; 0x3a
    5714:	009f3100 	addseq	r3, pc, r0, lsl #2
    5718:	00000000 	andeq	r0, r0, r0
    571c:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    5720:	d008003a 	andle	r0, r8, sl, lsr r0
    5724:	0308003a 	movweq	r0, #32826	; 0x803a
    5728:	9f310800 	svcls	0x00310800
	...
    5734:	08003abe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, fp, ip, sp}
    5738:	08003ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, ip, sp}
    573c:	9f310002 	svcls	0x00310002
    5740:	08003ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, ip, sp}
    5744:	08003ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, ip, sp}
    5748:	9f410002 	svcls	0x00410002
	...
    5754:	08003abe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, fp, ip, sp}
    5758:	08003ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, ip, sp}
    575c:	9f300002 	svcls	0x00300002
    5760:	08003ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, ip, sp}
    5764:	08003acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, ip, sp}
    5768:	00500001 	subseq	r0, r0, r1
    576c:	00000000 	andeq	r0, r0, r0
    5770:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    5774:	d008003a 	andle	r0, r8, sl, lsr r0
    5778:	0208003a 	andeq	r0, r8, #58	; 0x3a
    577c:	009f3000 	addseq	r3, pc, r0
    5780:	00000000 	andeq	r0, r0, r0
    5784:	dc000000 	stcle	0, cr0, [r0], {-0}
    5788:	ee08003a 	mcr	0, 0, r0, cr8, cr10, {1}
    578c:	0108003a 	tsteq	r8, sl, lsr r0
    5790:	3aee5000 	bcc	ffb99798 <_estack+0xdfb69798>
    5794:	3af20800 	bcc	ffc8779c <_estack+0xdfc5779c>
    5798:	00040800 	andeq	r0, r4, r0, lsl #16
    579c:	9f5001f3 	svcls	0x005001f3
	...
    57a8:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
    57ac:	08003ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp, ip, sp}
    57b0:	9f300002 	svcls	0x00300002
    57b4:	08003ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp, ip, sp}
    57b8:	08003aee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, fp, ip, sp}
    57bc:	ee520001 	cdp	0, 5, cr0, cr2, cr1, {0}
    57c0:	f208003a 	vqadd.s8	d0, d8, d26
    57c4:	0108003a 	tsteq	r8, sl, lsr r0
    57c8:	00005000 	andeq	r5, r0, r0
    57cc:	00000000 	andeq	r0, r0, r0
    57d0:	3b300000 	blcc	c057d8 <_Min_Stack_Size+0xc053d8>
    57d4:	3b380800 	blcc	e077dc <_Min_Stack_Size+0xe073dc>
    57d8:	00010800 	andeq	r0, r1, r0, lsl #16
    57dc:	003b3850 	eorseq	r3, fp, r0, asr r8
    57e0:	003b5608 	eorseq	r5, fp, r8, lsl #12
    57e4:	f3000408 	vshl.u8	d0, d8, d0
    57e8:	009f5001 	addseq	r5, pc, r1
    57ec:	00000000 	andeq	r0, r0, r0
    57f0:	30000000 	andcc	r0, r0, r0
    57f4:	3c08003b 	stccc	0, cr0, [r8], {59}	; 0x3b
    57f8:	0108003b 	tsteq	r8, fp, lsr r0
    57fc:	3b3c5100 	blcc	f19c04 <_Min_Stack_Size+0xf19804>
    5800:	3b560800 	blcc	1587808 <_Min_Stack_Size+0x1587408>
    5804:	00040800 	andeq	r0, r4, r0, lsl #16
    5808:	9f5101f3 	svcls	0x005101f3
	...
    5814:	08003b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip, sp}
    5818:	08003b4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, fp, ip, sp}
    581c:	4a520001 	bmi	1485828 <_Min_Stack_Size+0x1485428>
    5820:	5608003b 			; <UNDEFINED> instruction: 0x5608003b
    5824:	0408003b 	streq	r0, [r8], #-59	; 0x3b
    5828:	5201f300 	andpl	pc, r1, #0, 6
    582c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5830:	00000000 	andeq	r0, r0, r0
    5834:	003b3000 	eorseq	r3, fp, r0
    5838:	003b3a08 	eorseq	r3, fp, r8, lsl #20
    583c:	53000108 	movwpl	r0, #264	; 0x108
    5840:	08003b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, ip, sp}
    5844:	08003b56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, fp, ip, sp}
    5848:	01f30004 	mvnseq	r0, r4
    584c:	00009f53 	andeq	r9, r0, r3, asr pc
    5850:	00000000 	andeq	r0, r0, r0
    5854:	3b300000 	blcc	c0585c <_Min_Stack_Size+0xc0545c>
    5858:	3b500800 	blcc	1407860 <_Min_Stack_Size+0x1407460>
    585c:	00020800 	andeq	r0, r2, r0, lsl #16
    5860:	00000091 	muleq	r0, r1, r0
    5864:	00000000 	andeq	r0, r0, r0
    5868:	3b640000 	blcc	1905870 <_Min_Stack_Size+0x1905470>
    586c:	3b760800 	blcc	1d87874 <_Min_Stack_Size+0x1d87474>
    5870:	00010800 	andeq	r0, r1, r0, lsl #16
    5874:	003b7650 	eorseq	r7, fp, r0, asr r6
    5878:	003b7c08 	eorseq	r7, fp, r8, lsl #24
    587c:	f3000408 	vshl.u8	d0, d8, d0
    5880:	009f5001 	addseq	r5, pc, r1
    5884:	00000000 	andeq	r0, r0, r0
    5888:	64000000 	strvs	r0, [r0], #-0
    588c:	6e08003b 	mcrvs	0, 0, r0, cr8, cr11, {1}
    5890:	0108003b 	tsteq	r8, fp, lsr r0
    5894:	3b6e5100 	blcc	1b99c9c <_Min_Stack_Size+0x1b9989c>
    5898:	3b7c0800 	blcc	1f078a0 <_Min_Stack_Size+0x1f074a0>
    589c:	00040800 	andeq	r0, r4, r0, lsl #16
    58a0:	9f5101f3 	svcls	0x005101f3
	...
    58ac:	08003b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, sp}
    58b0:	08003b66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, fp, ip, sp}
    58b4:	66520001 	ldrbvs	r0, [r2], -r1
    58b8:	7c08003b 	stcvc	0, cr0, [r8], {59}	; 0x3b
    58bc:	0408003b 	streq	r0, [r8], #-59	; 0x3b
    58c0:	5201f300 	andpl	pc, r1, #0, 6
    58c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    58c8:	00000000 	andeq	r0, r0, r0
    58cc:	003b8800 	eorseq	r8, fp, r0, lsl #16
    58d0:	003b9a08 	eorseq	r9, fp, r8, lsl #20
    58d4:	50000108 	andpl	r0, r0, r8, lsl #2
    58d8:	08003b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp, ip, sp}
    58dc:	08003ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, ip, sp}
    58e0:	01f30004 	mvnseq	r0, r4
    58e4:	00009f50 	andeq	r9, r0, r0, asr pc
    58e8:	00000000 	andeq	r0, r0, r0
    58ec:	3b880000 	blcc	fe2058f4 <_estack+0xde1d58f4>
    58f0:	3b920800 	blcc	fe4878f8 <_estack+0xde4578f8>
    58f4:	00010800 	andeq	r0, r1, r0, lsl #16
    58f8:	003b9251 	eorseq	r9, fp, r1, asr r2
    58fc:	003ba008 	eorseq	sl, fp, r8
    5900:	f3000408 	vshl.u8	d0, d8, d0
    5904:	009f5101 	addseq	r5, pc, r1, lsl #2
    5908:	00000000 	andeq	r0, r0, r0
    590c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    5910:	8a08003b 	bhi	205a04 <_Min_Stack_Size+0x205604>
    5914:	0108003b 	tsteq	r8, fp, lsr r0
    5918:	3b8a5200 	blcc	fe29a120 <_estack+0xde26a120>
    591c:	3ba00800 	blcc	fe807924 <_estack+0xde7d7924>
    5920:	00040800 	andeq	r0, r4, r0, lsl #16
    5924:	9f5201f3 	svcls	0x005201f3
	...
    5930:	08003bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip, sp}
    5934:	08003bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp, ip, sp}
    5938:	ca500001 	bgt	1405944 <_Min_Stack_Size+0x1405544>
    593c:	ce08003b 	mcrgt	0, 0, r0, cr8, cr11, {1}
    5940:	0408003b 	streq	r0, [r8], #-59	; 0x3b
    5944:	5001f300 	andpl	pc, r1, r0, lsl #6
    5948:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    594c:	00000000 	andeq	r0, r0, r0
    5950:	003bb800 	eorseq	fp, fp, r0, lsl #16
    5954:	003bc808 	eorseq	ip, fp, r8, lsl #16
    5958:	51000108 	tstpl	r0, r8, lsl #2
    595c:	08003bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, ip, sp}
    5960:	08003bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp, ip, sp}
    5964:	01f30004 	mvnseq	r0, r4
    5968:	00009f51 	andeq	r9, r0, r1, asr pc
    596c:	00000000 	andeq	r0, r0, r0
    5970:	3bb80000 	blcc	fee05978 <_estack+0xdedd5978>
    5974:	3bc20800 	blcc	ff08797c <_estack+0xdf05797c>
    5978:	00020800 	andeq	r0, r2, r0, lsl #16
    597c:	3bc29f30 	blcc	ff0ad644 <_estack+0xdf07d644>
    5980:	3bc60800 	blcc	ff187988 <_estack+0xdf157988>
    5984:	00090800 	andeq	r0, r9, r0, lsl #16
    5988:	ff110072 			; <UNDEFINED> instruction: 0xff110072
    598c:	1a44ffff 	bne	1145990 <_Min_Stack_Size+0x1145590>
    5990:	003bc69f 	mlaseq	fp, pc, r6, ip	; <UNPREDICTABLE>
    5994:	003bca08 	eorseq	ip, fp, r8, lsl #20
    5998:	52000108 	andpl	r0, r0, #8, 2
    599c:	08003bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp, ip, sp}
    59a0:	08003bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp, ip, sp}
    59a4:	00500001 	subseq	r0, r0, r1
    59a8:	00000000 	andeq	r0, r0, r0
    59ac:	d0000000 	andle	r0, r0, r0
    59b0:	e208003b 	and	r0, r8, #59	; 0x3b
    59b4:	0108003b 	tsteq	r8, fp, lsr r0
    59b8:	3be25000 	blcc	ff8999c0 <_estack+0xdf8699c0>
    59bc:	3be60800 	blcc	ff9879c4 <_estack+0xdf9579c4>
    59c0:	00040800 	andeq	r0, r4, r0, lsl #16
    59c4:	9f5001f3 	svcls	0x005001f3
	...
    59d0:	08003bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, sp}
    59d4:	08003be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, ip, sp}
    59d8:	e0510001 	subs	r0, r1, r1
    59dc:	e608003b 			; <UNDEFINED> instruction: 0xe608003b
    59e0:	0408003b 	streq	r0, [r8], #-59	; 0x3b
    59e4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    59e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    59ec:	00000000 	andeq	r0, r0, r0
    59f0:	003bd000 	eorseq	sp, fp, r0
    59f4:	003bda08 	eorseq	sp, fp, r8, lsl #20
    59f8:	30000208 	andcc	r0, r0, r8, lsl #4
    59fc:	003bda9f 	mlaseq	fp, pc, sl, sp	; <UNPREDICTABLE>
    5a00:	003bde08 	eorseq	sp, fp, r8, lsl #28
    5a04:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    5a08:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    5a0c:	9f1a07ff 	svcls	0x001a07ff
    5a10:	08003bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, ip, sp}
    5a14:	08003be2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, fp, ip, sp}
    5a18:	e2520001 	subs	r0, r2, #1
    5a1c:	e608003b 			; <UNDEFINED> instruction: 0xe608003b
    5a20:	0108003b 	tsteq	r8, fp, lsr r0
    5a24:	00005000 	andeq	r5, r0, r0
    5a28:	00000000 	andeq	r0, r0, r0
    5a2c:	3be80000 	blcc	ffa05a34 <_estack+0xdf9d5a34>
    5a30:	3bf80800 	blcc	ffe07a38 <_estack+0xdfdd7a38>
    5a34:	00010800 	andeq	r0, r1, r0, lsl #16
    5a38:	003bf850 	eorseq	pc, fp, r0, asr r8	; <UNPREDICTABLE>
    5a3c:	003bfc08 	eorseq	pc, fp, r8, lsl #24
    5a40:	f3000408 	vshl.u8	d0, d8, d0
    5a44:	009f5001 	addseq	r5, pc, r1
    5a48:	00000000 	andeq	r0, r0, r0
    5a4c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    5a50:	f208003b 	vqadd.s8	d0, d8, d27
    5a54:	0208003b 	andeq	r0, r8, #59	; 0x3b
    5a58:	f29f3000 	vaddl.s16	<illegal reg q1.5>, d15, d0
    5a5c:	f808003b 			; <UNDEFINED> instruction: 0xf808003b
    5a60:	0108003b 	tsteq	r8, fp, lsr r0
    5a64:	3bf85200 	blcc	ffe1a26c <_estack+0xdfdea26c>
    5a68:	3bfc0800 	blcc	fff07a70 <_estack+0xdfed7a70>
    5a6c:	00010800 	andeq	r0, r1, r0, lsl #16
    5a70:	00000050 	andeq	r0, r0, r0, asr r0
    5a74:	00000000 	andeq	r0, r0, r0
    5a78:	003c0c00 	eorseq	r0, ip, r0, lsl #24
    5a7c:	003c1c08 	eorseq	r1, ip, r8, lsl #24
    5a80:	50000108 	andpl	r0, r0, r8, lsl #2
    5a84:	08003c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip, sp}
    5a88:	08003c20 	stmdaeq	r0, {r5, sl, fp, ip, sp}
    5a8c:	01f30004 	mvnseq	r0, r4
    5a90:	00009f50 	andeq	r9, r0, r0, asr pc
    5a94:	00000000 	andeq	r0, r0, r0
    5a98:	3c0c0000 	stccc	0, cr0, [ip], {-0}
    5a9c:	3c160800 	ldccc	8, cr0, [r6], {-0}
    5aa0:	00020800 	andeq	r0, r2, r0, lsl #16
    5aa4:	3c169f30 	ldccc	15, cr9, [r6], {48}	; 0x30
    5aa8:	3c1c0800 	ldccc	8, cr0, [ip], {-0}
    5aac:	00010800 	andeq	r0, r1, r0, lsl #16
    5ab0:	003c1c52 	eorseq	r1, ip, r2, asr ip
    5ab4:	003c2008 	eorseq	r2, ip, r8
    5ab8:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    5ac4:	08003c20 	stmdaeq	r0, {r5, sl, fp, ip, sp}
    5ac8:	08003c30 	stmdaeq	r0, {r4, r5, sl, fp, ip, sp}
    5acc:	30500001 	subscc	r0, r0, r1
    5ad0:	3408003c 	strcc	r0, [r8], #-60	; 0x3c
    5ad4:	0408003c 	streq	r0, [r8], #-60	; 0x3c
    5ad8:	5001f300 	andpl	pc, r1, r0, lsl #6
    5adc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5ae0:	00000000 	andeq	r0, r0, r0
    5ae4:	003c2000 	eorseq	r2, ip, r0
    5ae8:	003c2a08 	eorseq	r2, ip, r8, lsl #20
    5aec:	30000208 	andcc	r0, r0, r8, lsl #4
    5af0:	003c2a9f 	mlaseq	ip, pc, sl, r2	; <UNPREDICTABLE>
    5af4:	003c3008 	eorseq	r3, ip, r8
    5af8:	52000108 	andpl	r0, r0, #8, 2
    5afc:	08003c30 	stmdaeq	r0, {r4, r5, sl, fp, ip, sp}
    5b00:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
    5b04:	00500001 	subseq	r0, r0, r1
    5b08:	00000000 	andeq	r0, r0, r0
    5b0c:	34000000 	strcc	r0, [r0], #-0
    5b10:	4608003c 			; <UNDEFINED> instruction: 0x4608003c
    5b14:	0108003c 	tsteq	r8, ip, lsr r0
    5b18:	3c465000 	marcc	acc0, r5, r6
    5b1c:	3c4a0800 	mcrrcc	8, 0, r0, sl, cr0
    5b20:	00040800 	andeq	r0, r4, r0, lsl #16
    5b24:	9f5001f3 	svcls	0x005001f3
	...
    5b30:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
    5b34:	08003c3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sl, fp, ip, sp}
    5b38:	9f300002 	svcls	0x00300002
    5b3c:	08003c3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sl, fp, ip, sp}
    5b40:	08003c46 	stmdaeq	r0, {r1, r2, r6, sl, fp, ip, sp}
    5b44:	46520001 	ldrbmi	r0, [r2], -r1
    5b48:	4a08003c 	bmi	205c40 <_Min_Stack_Size+0x205840>
    5b4c:	0108003c 	tsteq	r8, ip, lsr r0
    5b50:	00005000 	andeq	r5, r0, r0
    5b54:	00000000 	andeq	r0, r0, r0
    5b58:	3c4c0000 	marcc	acc0, r0, ip
    5b5c:	3c580800 	mrrccc	8, 0, r0, r8, cr0
    5b60:	00020800 	andeq	r0, r2, r0, lsl #16
    5b64:	3c589f30 	mrrccc	15, 3, r9, r8, cr0
    5b68:	3c5c0800 	mrrccc	8, 0, r0, ip, cr0
    5b6c:	00050800 	andeq	r0, r5, r0, lsl #16
    5b70:	1a3c0072 	bne	f05d40 <_Min_Stack_Size+0xf05940>
    5b74:	003c5c9f 	mlaseq	ip, pc, ip, r5	; <UNPREDICTABLE>
    5b78:	003c6e08 	eorseq	r6, ip, r8, lsl #28
    5b7c:	52000108 	andpl	r0, r0, #8, 2
    5b80:	08003c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, sp}
    5b84:	08003c84 	stmdaeq	r0, {r2, r7, sl, fp, ip, sp}
    5b88:	00740006 	rsbseq	r0, r4, r6
    5b8c:	9f1af008 	svcls	0x001af008
    5b90:	08003c84 	stmdaeq	r0, {r2, r7, sl, fp, ip, sp}
    5b94:	08003c86 	stmdaeq	r0, {r1, r2, r7, sl, fp, ip, sp}
    5b98:	8c540001 	mrrchi	0, 0, r0, r4, cr1
    5b9c:	9008003c 	andls	r0, r8, ip, lsr r0
    5ba0:	0708003c 	smladxeq	r8, ip, r0, r0
    5ba4:	0a007400 	beq	22bac <_Min_Stack_Size+0x227ac>
    5ba8:	9f1a1c00 	svcls	0x001a1c00
    5bac:	08003c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, sp}
    5bb0:	08003c92 	stmdaeq	r0, {r1, r4, r7, sl, fp, ip, sp}
    5bb4:	9a540001 	bls	1505bc0 <_Min_Stack_Size+0x15057c0>
    5bb8:	a208003c 	andge	r0, r8, #60	; 0x3c
    5bbc:	0708003c 	smladxeq	r8, ip, r0, r0
    5bc0:	0a007200 	beq	223c8 <_Min_Stack_Size+0x21fc8>
    5bc4:	9f1ae000 	svcls	0x001ae000
    5bc8:	08003ca2 	stmdaeq	r0, {r1, r5, r7, sl, fp, ip, sp}
    5bcc:	08003cba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, fp, ip, sp}
    5bd0:	00520001 	subseq	r0, r2, r1
    5bd4:	00000000 	andeq	r0, r0, r0
    5bd8:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5bdc:	8608003c 			; <UNDEFINED> instruction: 0x8608003c
    5be0:	0208003c 	andeq	r0, r8, #60	; 0x3c
    5be4:	869f3000 	ldrhi	r3, [pc], r0
    5be8:	8c08003c 	stchi	0, cr0, [r8], {60}	; 0x3c
    5bec:	0608003c 			; <UNDEFINED> instruction: 0x0608003c
    5bf0:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    5bf4:	929f1aff 	addsls	r1, pc, #1044480	; 0xff000
    5bf8:	9608003c 			; <UNDEFINED> instruction: 0x9608003c
    5bfc:	0608003c 			; <UNDEFINED> instruction: 0x0608003c
    5c00:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    5c04:	a49f1aff 	ldrge	r1, [pc], #2815	; 5c0c <_Min_Stack_Size+0x580c>
    5c08:	aa08003c 	bge	205d00 <_Min_Stack_Size+0x205900>
    5c0c:	0608003c 			; <UNDEFINED> instruction: 0x0608003c
    5c10:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
    5c14:	aa9f1aff 	bge	fe7cc818 <_estack+0xde79c818>
    5c18:	fc08003c 	stc2	0, cr0, [r8], {60}	; 0x3c
    5c1c:	0208003c 	andeq	r0, r8, #60	; 0x3c
    5c20:	009f3000 	addseq	r3, pc, r0
    5c24:	00000000 	andeq	r0, r0, r0
    5c28:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5c2c:	6e08003c 	mcrvs	0, 0, r0, cr8, cr12, {1}
    5c30:	0208003c 	andeq	r0, r8, #60	; 0x3c
    5c34:	aa9f3000 	bge	fe7d1c3c <_estack+0xde7a1c3c>
    5c38:	f208003c 	vqadd.s8	d0, d8, d28
    5c3c:	0208003c 	andeq	r0, r8, #60	; 0x3c
    5c40:	f29f3000 	vaddl.s16	<illegal reg q1.5>, d15, d0
    5c44:	f808003c 			; <UNDEFINED> instruction: 0xf808003c
    5c48:	0108003c 	tsteq	r8, ip, lsr r0
    5c4c:	00005100 	andeq	r5, r0, r0, lsl #2
    5c50:	00000000 	andeq	r0, r0, r0
    5c54:	3c4c0000 	marcc	acc0, r0, ip
    5c58:	3c6e0800 	stclcc	8, cr0, [lr], #-0
    5c5c:	00020800 	andeq	r0, r2, r0, lsl #16
    5c60:	3caa9f32 	stccc	15, cr9, [sl], #200	; 0xc8
    5c64:	3cf20800 	ldclcc	8, cr0, [r2]
    5c68:	00020800 	andeq	r0, r2, r0, lsl #16
    5c6c:	00009f32 	andeq	r9, r0, r2, lsr pc
    5c70:	00000000 	andeq	r0, r0, r0
    5c74:	3c4c0000 	marcc	acc0, r0, ip
    5c78:	3c6e0800 	stclcc	8, cr0, [lr], #-0
    5c7c:	00020800 	andeq	r0, r2, r0, lsl #16
    5c80:	3caa9f30 	stccc	15, cr9, [sl], #192	; 0xc0
    5c84:	3cb80800 	ldccc	8, cr0, [r8]
    5c88:	00020800 	andeq	r0, r2, r0, lsl #16
    5c8c:	3cb89f30 	ldccc	15, cr9, [r8], #192	; 0xc0
    5c90:	3cc00800 	stclcc	8, cr0, [r0], {0}
    5c94:	00090800 	andeq	r0, r9, r0, lsl #16
    5c98:	42400074 	submi	r0, r0, #116	; 0x74
    5c9c:	25461a24 	strbcs	r1, [r6, #-2596]	; 0xa24
    5ca0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5ca4:	00000000 	andeq	r0, r0, r0
    5ca8:	003c4c00 	eorseq	r4, ip, r0, lsl #24
    5cac:	003c6e08 	eorseq	r6, ip, r8, lsl #28
    5cb0:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    5cb4:	003caa9f 	mlaseq	ip, pc, sl, sl	; <UNPREDICTABLE>
    5cb8:	003cd608 	eorseq	sp, ip, r8, lsl #12
    5cbc:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    5cc0:	003cd69f 	mlaseq	ip, pc, r6, sp	; <UNPREDICTABLE>
    5cc4:	003cfc08 	eorseq	pc, ip, r8, lsl #24
    5cc8:	52000108 	andpl	r0, r0, #8, 2
	...
    5cd4:	08003cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, ip, sp}
    5cd8:	08003d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, ip, sp}
    5cdc:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    5ce0:	3408003d 	strcc	r0, [r8], #-61	; 0x3d
    5ce4:	0408003d 	streq	r0, [r8], #-61	; 0x3d
    5ce8:	5001f300 	andpl	pc, r1, r0, lsl #6
    5cec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5cf0:	00000000 	andeq	r0, r0, r0
    5cf4:	003cfc00 	eorseq	pc, ip, r0, lsl #24
    5cf8:	003d1408 	eorseq	r1, sp, r8, lsl #8
    5cfc:	30000208 	andcc	r0, r0, r8, lsl #4
    5d00:	003d149f 	mlaseq	sp, pc, r4, r1	; <UNPREDICTABLE>
    5d04:	003d2008 	eorseq	r2, sp, r8
    5d08:	52000108 	andpl	r0, r0, #8, 2
	...
    5d14:	08003d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, sp}
    5d18:	08003d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp, ip, sp}
    5d1c:	62500001 	subsvs	r0, r0, #1
    5d20:	6c08003d 	stcvs	0, cr0, [r8], {61}	; 0x3d
    5d24:	0308003d 	movweq	r0, #32829	; 0x803d
    5d28:	9f017000 	svcls	0x00017000
    5d2c:	08003d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, ip, sp}
    5d30:	08003d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp, ip, sp}
    5d34:	01f30004 	mvnseq	r0, r4
    5d38:	00009f50 	andeq	r9, r0, r0, asr pc
    5d3c:	00000000 	andeq	r0, r0, r0
    5d40:	3d580000 	ldclcc	0, cr0, [r8, #-0]
    5d44:	3d660800 	stclcc	8, cr0, [r6, #-0]
    5d48:	00020800 	andeq	r0, r2, r0, lsl #16
    5d4c:	3d669f30 	stclcc	15, cr9, [r6, #-192]!	; 0xffffff40
    5d50:	3d6c0800 	stclcc	8, cr0, [ip, #-0]
    5d54:	00010800 	andeq	r0, r1, r0, lsl #16
    5d58:	003d6c52 	eorseq	r6, sp, r2, asr ip
    5d5c:	003d7208 	eorseq	r7, sp, r8, lsl #4
    5d60:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    5d6c:	08003d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip, sp}
    5d70:	08003d7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, fp, ip, sp}
    5d74:	7e500001 	cdpvc	0, 5, cr0, cr0, cr1, {0}
    5d78:	8a08003d 	bhi	205e74 <_Min_Stack_Size+0x205a74>
    5d7c:	0308003d 	movweq	r0, #32829	; 0x803d
    5d80:	9f017000 	svcls	0x00017000
    5d84:	08003d8a 	stmdaeq	r0, {r1, r3, r7, r8, sl, fp, ip, sp}
    5d88:	08003d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip, sp}
    5d8c:	01f30004 	mvnseq	r0, r4
    5d90:	00009f50 	andeq	r9, r0, r0, asr pc
    5d94:	00000000 	andeq	r0, r0, r0
    5d98:	3d740000 	ldclcc	0, cr0, [r4, #-0]
    5d9c:	3d820800 	stccc	8, cr0, [r2]
    5da0:	00020800 	andeq	r0, r2, r0, lsl #16
    5da4:	3d829f30 	stccc	15, cr9, [r2, #192]	; 0xc0
    5da8:	3d8a0800 	stccc	8, cr0, [sl]
    5dac:	00010800 	andeq	r0, r1, r0, lsl #16
    5db0:	003d8a52 	eorseq	r8, sp, r2, asr sl
    5db4:	003d9008 	eorseq	r9, sp, r8
    5db8:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    5dc4:	08003d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip, sp}
    5dc8:	08003da2 	stmdaeq	r0, {r1, r5, r7, r8, sl, fp, ip, sp}
    5dcc:	a2500001 	subsge	r0, r0, #1
    5dd0:	a808003d 	stmdage	r8, {r0, r2, r3, r4, r5}
    5dd4:	0408003d 	streq	r0, [r8], #-61	; 0x3d
    5dd8:	5001f300 	andpl	pc, r1, r0, lsl #6
    5ddc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5de0:	00000000 	andeq	r0, r0, r0
    5de4:	003d9000 	eorseq	r9, sp, r0
    5de8:	003d9c08 	eorseq	r9, sp, r8, lsl #24
    5dec:	30000208 	andcc	r0, r0, r8, lsl #4
    5df0:	003d9c9f 	mlaseq	sp, pc, ip, r9	; <UNPREDICTABLE>
    5df4:	003da208 	eorseq	sl, sp, r8, lsl #4
    5df8:	52000108 	andpl	r0, r0, #8, 2
    5dfc:	08003da2 	stmdaeq	r0, {r1, r5, r7, r8, sl, fp, ip, sp}
    5e00:	08003da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, sp}
    5e04:	00500001 	subseq	r0, r0, r1
    5e08:	00000000 	andeq	r0, r0, r0
    5e0c:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    5e10:	ba08003d 	blt	205f0c <_Min_Stack_Size+0x205b0c>
    5e14:	0108003d 	tsteq	r8, sp, lsr r0
    5e18:	3dba5000 	ldccc	0, cr5, [sl]
    5e1c:	3dc00800 	stclcc	8, cr0, [r0]
    5e20:	00040800 	andeq	r0, r4, r0, lsl #16
    5e24:	9f5001f3 	svcls	0x005001f3
	...
    5e30:	08003da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, sp}
    5e34:	08003db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp}
    5e38:	9f300002 	svcls	0x00300002
    5e3c:	08003db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp}
    5e40:	08003dba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, fp, ip, sp}
    5e44:	ba520001 	blt	1485e50 <_Min_Stack_Size+0x1485a50>
    5e48:	c008003d 	andgt	r0, r8, sp, lsr r0
    5e4c:	0108003d 	tsteq	r8, sp, lsr r0
    5e50:	00005000 	andeq	r5, r0, r0
    5e54:	00000000 	andeq	r0, r0, r0
    5e58:	3dc00000 	stclcc	0, cr0, [r0]
    5e5c:	3dd20800 	ldclcc	8, cr0, [r2]
    5e60:	00010800 	andeq	r0, r1, r0, lsl #16
    5e64:	003dd250 	eorseq	sp, sp, r0, asr r2
    5e68:	003dd808 	eorseq	sp, sp, r8, lsl #16
    5e6c:	f3000408 	vshl.u8	d0, d8, d0
    5e70:	009f5001 	addseq	r5, pc, r1
    5e74:	00000000 	andeq	r0, r0, r0
    5e78:	c0000000 	andgt	r0, r0, r0
    5e7c:	cc08003d 	stcgt	0, cr0, [r8], {61}	; 0x3d
    5e80:	0208003d 	andeq	r0, r8, #61	; 0x3d
    5e84:	cc9f3000 	ldcgt	0, cr3, [pc], {0}
    5e88:	d208003d 	andle	r0, r8, #61	; 0x3d
    5e8c:	0108003d 	tsteq	r8, sp, lsr r0
    5e90:	3dd25200 	lfmcc	f5, 2, [r2]
    5e94:	3dd80800 	ldclcc	8, cr0, [r8]
    5e98:	00010800 	andeq	r0, r1, r0, lsl #16
    5e9c:	00000050 	andeq	r0, r0, r0, asr r0
    5ea0:	00000000 	andeq	r0, r0, r0
    5ea4:	003de400 	eorseq	lr, sp, r0, lsl #8
    5ea8:	003df408 	eorseq	pc, sp, r8, lsl #8
    5eac:	50000108 	andpl	r0, r0, r8, lsl #2
    5eb0:	08003df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, ip, sp}
    5eb4:	08003df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
    5eb8:	01f30004 	mvnseq	r0, r4
    5ebc:	3df89f50 	ldclcc	15, cr9, [r8, #320]!	; 0x140
    5ec0:	3dfa0800 	ldclcc	8, cr0, [sl]
    5ec4:	00010800 	andeq	r0, r1, r0, lsl #16
    5ec8:	003dfa50 	eorseq	pc, sp, r0, asr sl	; <UNPREDICTABLE>
    5ecc:	003dfe08 	eorseq	pc, sp, r8, lsl #28
    5ed0:	f3000408 	vshl.u8	d0, d8, d0
    5ed4:	009f5001 	addseq	r5, pc, r1
	...
    5ee0:	1008003e 	andne	r0, r8, lr, lsr r0
    5ee4:	0108003e 	tsteq	r8, lr, lsr r0
    5ee8:	3e105000 	cdpcc	0, 1, cr5, cr0, cr0, {0}
    5eec:	3e140800 	cdpcc	8, 1, cr0, cr4, cr0, {0}
    5ef0:	00040800 	andeq	r0, r4, r0, lsl #16
    5ef4:	9f5001f3 	svcls	0x005001f3
    5ef8:	08003e14 	stmdaeq	r0, {r2, r4, r9, sl, fp, ip, sp}
    5efc:	08003e16 	stmdaeq	r0, {r1, r2, r4, r9, sl, fp, ip, sp}
    5f00:	16500001 	ldrbne	r0, [r0], -r1
    5f04:	1a08003e 	bne	206004 <_Min_Stack_Size+0x205c04>
    5f08:	0408003e 	streq	r0, [r8], #-62	; 0x3e
    5f0c:	5001f300 	andpl	pc, r1, r0, lsl #6
    5f10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5f14:	00000000 	andeq	r0, r0, r0
    5f18:	003e1c00 	eorseq	r1, lr, r0, lsl #24
    5f1c:	003e2c08 	eorseq	r2, lr, r8, lsl #24
    5f20:	50000108 	andpl	r0, r0, r8, lsl #2
    5f24:	08003e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, sp}
    5f28:	08003e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, ip, sp}
    5f2c:	01f30004 	mvnseq	r0, r4
    5f30:	3e309f50 	mrccc	15, 1, r9, cr0, cr0, {2}
    5f34:	3e320800 	cdpcc	8, 3, cr0, cr2, cr0, {0}
    5f38:	00010800 	andeq	r0, r1, r0, lsl #16
    5f3c:	003e3250 	eorseq	r3, lr, r0, asr r2
    5f40:	003e3608 	eorseq	r3, lr, r8, lsl #12
    5f44:	f3000408 	vshl.u8	d0, d8, d0
    5f48:	009f5001 	addseq	r5, pc, r1
    5f4c:	00000000 	andeq	r0, r0, r0
    5f50:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5f54:	4808003e 	stmdami	r8, {r1, r2, r3, r4, r5}
    5f58:	0108003e 	tsteq	r8, lr, lsr r0
    5f5c:	3e485000 	cdpcc	0, 4, cr5, cr8, cr0, {0}
    5f60:	3e4c0800 	cdpcc	8, 4, cr0, cr12, cr0, {0}
    5f64:	00040800 	andeq	r0, r4, r0, lsl #16
    5f68:	9f5001f3 	svcls	0x005001f3
    5f6c:	08003e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, ip, sp}
    5f70:	08003e4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, fp, ip, sp}
    5f74:	4e500001 	cdpmi	0, 5, cr0, cr0, cr1, {0}
    5f78:	5208003e 	andpl	r0, r8, #62	; 0x3e
    5f7c:	0408003e 	streq	r0, [r8], #-62	; 0x3e
    5f80:	5001f300 	andpl	pc, r1, r0, lsl #6
    5f84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5f88:	00000000 	andeq	r0, r0, r0
    5f8c:	003e5400 	eorseq	r5, lr, r0, lsl #8
    5f90:	003e6408 	eorseq	r6, lr, r8, lsl #8
    5f94:	50000108 	andpl	r0, r0, r8, lsl #2
    5f98:	08003e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, ip, sp}
    5f9c:	08003e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip, sp}
    5fa0:	01f30004 	mvnseq	r0, r4
    5fa4:	3e689f50 	mcrcc	15, 3, r9, cr8, cr0, {2}
    5fa8:	3e6a0800 	cdpcc	8, 6, cr0, cr10, cr0, {0}
    5fac:	00010800 	andeq	r0, r1, r0, lsl #16
    5fb0:	003e6a50 	eorseq	r6, lr, r0, asr sl
    5fb4:	003e6e08 	eorseq	r6, lr, r8, lsl #28
    5fb8:	f3000408 	vshl.u8	d0, d8, d0
    5fbc:	009f5001 	addseq	r5, pc, r1
    5fc0:	00000000 	andeq	r0, r0, r0
    5fc4:	70000000 	andvc	r0, r0, r0
    5fc8:	8008003e 	andhi	r0, r8, lr, lsr r0
    5fcc:	0108003e 	tsteq	r8, lr, lsr r0
    5fd0:	3e805000 	cdpcc	0, 8, cr5, cr0, cr0, {0}
    5fd4:	3e840800 	cdpcc	8, 8, cr0, cr4, cr0, {0}
    5fd8:	00040800 	andeq	r0, r4, r0, lsl #16
    5fdc:	9f5001f3 	svcls	0x005001f3
    5fe0:	08003e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, sp}
    5fe4:	08003e86 	stmdaeq	r0, {r1, r2, r7, r9, sl, fp, ip, sp}
    5fe8:	86500001 	ldrbhi	r0, [r0], -r1
    5fec:	8a08003e 	bhi	2060ec <_Min_Stack_Size+0x205cec>
    5ff0:	0408003e 	streq	r0, [r8], #-62	; 0x3e
    5ff4:	5001f300 	andpl	pc, r1, r0, lsl #6
    5ff8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5ffc:	00000000 	andeq	r0, r0, r0
    6000:	003e8c00 	eorseq	r8, lr, r0, lsl #24
    6004:	003e9c08 	eorseq	r9, lr, r8, lsl #24
    6008:	50000108 	andpl	r0, r0, r8, lsl #2
    600c:	08003e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, ip, sp}
    6010:	08003ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, sp}
    6014:	01f30004 	mvnseq	r0, r4
    6018:	3ea09f50 	mcrcc	15, 5, r9, cr0, cr0, {2}
    601c:	3ea20800 	cdpcc	8, 10, cr0, cr2, cr0, {0}
    6020:	00010800 	andeq	r0, r1, r0, lsl #16
    6024:	003ea250 	eorseq	sl, lr, r0, asr r2
    6028:	003ea608 	eorseq	sl, lr, r8, lsl #12
    602c:	f3000408 	vshl.u8	d0, d8, d0
    6030:	009f5001 	addseq	r5, pc, r1
    6034:	00000000 	andeq	r0, r0, r0
    6038:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    603c:	b808003e 	stmdalt	r8, {r1, r2, r3, r4, r5}
    6040:	0108003e 	tsteq	r8, lr, lsr r0
    6044:	3eb85000 	cdpcc	0, 11, cr5, cr8, cr0, {0}
    6048:	3ebc0800 	cdpcc	8, 11, cr0, cr12, cr0, {0}
    604c:	00040800 	andeq	r0, r4, r0, lsl #16
    6050:	9f5001f3 	svcls	0x005001f3
    6054:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
    6058:	08003ebe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
    605c:	be500001 	cdplt	0, 5, cr0, cr0, cr1, {0}
    6060:	c208003e 	andgt	r0, r8, #62	; 0x3e
    6064:	0408003e 	streq	r0, [r8], #-62	; 0x3e
    6068:	5001f300 	andpl	pc, r1, r0, lsl #6
    606c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6070:	00000000 	andeq	r0, r0, r0
    6074:	003ec400 	eorseq	ip, lr, r0, lsl #8
    6078:	003ed408 	eorseq	sp, lr, r8, lsl #8
    607c:	50000108 	andpl	r0, r0, r8, lsl #2
    6080:	08003ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip, sp}
    6084:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
    6088:	01f30004 	mvnseq	r0, r4
    608c:	3ed89f50 	mrccc	15, 6, r9, cr8, cr0, {2}
    6090:	3eda0800 	cdpcc	8, 13, cr0, cr10, cr0, {0}
    6094:	00010800 	andeq	r0, r1, r0, lsl #16
    6098:	003eda50 	eorseq	sp, lr, r0, asr sl
    609c:	003ede08 	eorseq	sp, lr, r8, lsl #28
    60a0:	f3000408 	vshl.u8	d0, d8, d0
    60a4:	009f5001 	addseq	r5, pc, r1
    60a8:	00000000 	andeq	r0, r0, r0
    60ac:	e0000000 	and	r0, r0, r0
    60b0:	f008003e 			; <UNDEFINED> instruction: 0xf008003e
    60b4:	0108003e 	tsteq	r8, lr, lsr r0
    60b8:	3ef05000 	cdpcc	0, 15, cr5, cr0, cr0, {0}
    60bc:	3ef40800 	cdpcc	8, 15, cr0, cr4, cr0, {0}
    60c0:	00040800 	andeq	r0, r4, r0, lsl #16
    60c4:	9f5001f3 	svcls	0x005001f3
    60c8:	08003ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, sp}
    60cc:	08003ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp, ip, sp}
    60d0:	f6500001 			; <UNDEFINED> instruction: 0xf6500001
    60d4:	fa08003e 	blx	2061d4 <_Min_Stack_Size+0x205dd4>
    60d8:	0408003e 	streq	r0, [r8], #-62	; 0x3e
    60dc:	5001f300 	andpl	pc, r1, r0, lsl #6
    60e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    60e4:	00000000 	andeq	r0, r0, r0
    60e8:	003efc00 	eorseq	pc, lr, r0, lsl #24
    60ec:	003f0c08 	eorseq	r0, pc, r8, lsl #24
    60f0:	50000108 	andpl	r0, r0, r8, lsl #2
    60f4:	08003f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip, sp}
    60f8:	08003f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, ip, sp}
    60fc:	01f30004 	mvnseq	r0, r4
    6100:	3f109f50 	svccc	0x00109f50
    6104:	3f120800 	svccc	0x00120800
    6108:	00010800 	andeq	r0, r1, r0, lsl #16
    610c:	003f1250 	eorseq	r1, pc, r0, asr r2	; <UNPREDICTABLE>
    6110:	003f1608 	eorseq	r1, pc, r8, lsl #12
    6114:	f3000408 	vshl.u8	d0, d8, d0
    6118:	009f5001 	addseq	r5, pc, r1
    611c:	00000000 	andeq	r0, r0, r0
    6120:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6124:	2808003f 	stmdacs	r8, {r0, r1, r2, r3, r4, r5}
    6128:	0108003f 	tsteq	r8, pc, lsr r0
    612c:	3f285000 	svccc	0x00285000
    6130:	3f2c0800 	svccc	0x002c0800
    6134:	00040800 	andeq	r0, r4, r0, lsl #16
    6138:	9f5001f3 	svcls	0x005001f3
    613c:	08003f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip, sp}
    6140:	08003f2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, fp, ip, sp}
    6144:	2e500001 	cdpcs	0, 5, cr0, cr0, cr1, {0}
    6148:	3208003f 	andcc	r0, r8, #63	; 0x3f
    614c:	0408003f 	streq	r0, [r8], #-63	; 0x3f
    6150:	5001f300 	andpl	pc, r1, r0, lsl #6
    6154:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6158:	00000000 	andeq	r0, r0, r0
    615c:	003f3400 	eorseq	r3, pc, r0, lsl #8
    6160:	003f4408 	eorseq	r4, pc, r8, lsl #8
    6164:	50000108 	andpl	r0, r0, r8, lsl #2
    6168:	08003f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip, sp}
    616c:	08003f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, sp}
    6170:	01f30004 	mvnseq	r0, r4
    6174:	3f489f50 	svccc	0x00489f50
    6178:	3f4a0800 	svccc	0x004a0800
    617c:	00010800 	andeq	r0, r1, r0, lsl #16
    6180:	003f4a50 	eorseq	r4, pc, r0, asr sl	; <UNPREDICTABLE>
    6184:	003f4e08 	eorseq	r4, pc, r8, lsl #28
    6188:	f3000408 	vshl.u8	d0, d8, d0
    618c:	009f5001 	addseq	r5, pc, r1
    6190:	00000000 	andeq	r0, r0, r0
    6194:	50000000 	andpl	r0, r0, r0
    6198:	6008003f 	andvs	r0, r8, pc, lsr r0
    619c:	0108003f 	tsteq	r8, pc, lsr r0
    61a0:	3f605000 	svccc	0x00605000
    61a4:	3f640800 	svccc	0x00640800
    61a8:	00040800 	andeq	r0, r4, r0, lsl #16
    61ac:	9f5001f3 	svcls	0x005001f3
    61b0:	08003f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, ip, sp}
    61b4:	08003f66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, fp, ip, sp}
    61b8:	66500001 	ldrbvs	r0, [r0], -r1
    61bc:	6a08003f 	bvs	2062c0 <_Min_Stack_Size+0x205ec0>
    61c0:	0408003f 	streq	r0, [r8], #-63	; 0x3f
    61c4:	5001f300 	andpl	pc, r1, r0, lsl #6
    61c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    61cc:	00000000 	andeq	r0, r0, r0
    61d0:	003f6c00 	eorseq	r6, pc, r0, lsl #24
    61d4:	003f7c08 	eorseq	r7, pc, r8, lsl #24
    61d8:	50000108 	andpl	r0, r0, r8, lsl #2
    61dc:	08003f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp}
    61e0:	08003f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip, sp}
    61e4:	01f30004 	mvnseq	r0, r4
    61e8:	3f809f50 	svccc	0x00809f50
    61ec:	3f820800 	svccc	0x00820800
    61f0:	00010800 	andeq	r0, r1, r0, lsl #16
    61f4:	003f8250 	eorseq	r8, pc, r0, asr r2	; <UNPREDICTABLE>
    61f8:	003f8608 	eorseq	r8, pc, r8, lsl #12
    61fc:	f3000408 	vshl.u8	d0, d8, d0
    6200:	009f5001 	addseq	r5, pc, r1
    6204:	00000000 	andeq	r0, r0, r0
    6208:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    620c:	9808003f 	stmdals	r8, {r0, r1, r2, r3, r4, r5}
    6210:	0108003f 	tsteq	r8, pc, lsr r0
    6214:	3f985000 	svccc	0x00985000
    6218:	3f9c0800 	svccc	0x009c0800
    621c:	00040800 	andeq	r0, r4, r0, lsl #16
    6220:	9f5001f3 	svcls	0x005001f3
    6224:	08003f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, sp}
    6228:	08003f9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, fp, ip, sp}
    622c:	9e500001 	cdpls	0, 5, cr0, cr0, cr1, {0}
    6230:	a208003f 	andge	r0, r8, #63	; 0x3f
    6234:	0408003f 	streq	r0, [r8], #-63	; 0x3f
    6238:	5001f300 	andpl	pc, r1, r0, lsl #6
    623c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6240:	00000000 	andeq	r0, r0, r0
    6244:	003fa400 	eorseq	sl, pc, r0, lsl #8
    6248:	003fb808 	eorseq	fp, pc, r8, lsl #16
    624c:	50000108 	andpl	r0, r0, r8, lsl #2
    6250:	08003fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp}
    6254:	08003fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, ip, sp}
    6258:	01f30004 	mvnseq	r0, r4
    625c:	3fc89f50 	svccc	0x00c89f50
    6260:	3fd40800 	svccc	0x00d40800
    6264:	00010800 	andeq	r0, r1, r0, lsl #16
    6268:	003fd450 	eorseq	sp, pc, r0, asr r4	; <UNPREDICTABLE>
    626c:	003fe008 	eorseq	lr, pc, r8
    6270:	f3000408 	vshl.u8	d0, d8, d0
    6274:	009f5001 	addseq	r5, pc, r1
    6278:	00000000 	andeq	r0, r0, r0
    627c:	a4000000 	strge	r0, [r0], #-0
    6280:	a608003f 			; <UNDEFINED> instruction: 0xa608003f
    6284:	0208003f 	andeq	r0, r8, #63	; 0x3f
    6288:	a69f3000 	ldrge	r3, [pc], r0
    628c:	b008003f 	andlt	r0, r8, pc, lsr r0
    6290:	0108003f 	tsteq	r8, pc, lsr r0
    6294:	3fb05300 	svccc	0x00b05300
    6298:	3fb80800 	svccc	0x00b80800
    629c:	00050800 	andeq	r0, r5, r0, lsl #16
    62a0:	25350070 	ldrcs	r0, [r5, #-112]!	; 0x70
    62a4:	003fc89f 	mlaseq	pc, pc, r8, ip	; <UNPREDICTABLE>
    62a8:	003fcc08 	eorseq	ip, pc, r8, lsl #24
    62ac:	53000108 	movwpl	r0, #264	; 0x108
    62b0:	08003fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip, sp}
    62b4:	08003fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, ip, sp}
    62b8:	00700005 	rsbseq	r0, r0, r5
    62bc:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    62c0:	00000000 	andeq	r0, r0, r0
    62c4:	a4000000 	strge	r0, [r0], #-0
    62c8:	bc08003f 	stclt	0, cr0, [r8], {63}	; 0x3f
    62cc:	0208003f 	andeq	r0, r8, #63	; 0x3f
    62d0:	bc9f3000 	ldclt	0, cr3, [pc], {0}
    62d4:	c808003f 	stmdagt	r8, {r0, r1, r2, r3, r4, r5}
    62d8:	0108003f 	tsteq	r8, pc, lsr r0
    62dc:	3fc85300 	svccc	0x00c85300
    62e0:	3fd60800 	svccc	0x00d60800
    62e4:	00020800 	andeq	r0, r2, r0, lsl #16
    62e8:	3fd69f30 	svccc	0x00d69f30
    62ec:	3fe00800 	svccc	0x00e00800
    62f0:	00010800 	andeq	r0, r1, r0, lsl #16
    62f4:	00000053 	andeq	r0, r0, r3, asr r0
    62f8:	00000000 	andeq	r0, r0, r0
    62fc:	003fa400 	eorseq	sl, pc, r0, lsl #8
    6300:	003fbe08 	eorseq	fp, pc, r8, lsl #28
    6304:	30000208 	andcc	r0, r0, r8, lsl #4
    6308:	003fc89f 	mlaseq	pc, pc, r8, ip	; <UNPREDICTABLE>
    630c:	003fd608 	eorseq	sp, pc, r8, lsl #12
    6310:	30000208 	andcc	r0, r0, r8, lsl #4
    6314:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6318:	00000000 	andeq	r0, r0, r0
    631c:	003ff400 	eorseq	pc, pc, r0, lsl #8
    6320:	00400608 	subeq	r0, r0, r8, lsl #12
    6324:	50000108 	andpl	r0, r0, r8, lsl #2
    6328:	08004006 	stmdaeq	r0, {r1, r2, lr}
    632c:	08004008 	stmdaeq	r0, {r3, lr}
    6330:	01f30004 	mvnseq	r0, r4
    6334:	00009f50 	andeq	r9, r0, r0, asr pc
    6338:	00000000 	andeq	r0, r0, r0
    633c:	3ff40000 	svccc	0x00f40000
    6340:	3ffe0800 	svccc	0x00fe0800
    6344:	00020800 	andeq	r0, r2, r0, lsl #16
    6348:	3ffe9f30 	svccc	0x00fe9f30
    634c:	40060800 	andmi	r0, r6, r0, lsl #16
    6350:	000b0800 	andeq	r0, fp, r0, lsl #16
    6354:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    6358:	1a00731a 	bne	22fc8 <_Min_Stack_Size+0x22bc8>
    635c:	069f2e30 			; <UNDEFINED> instruction: 0x069f2e30
    6360:	08080040 	stmdaeq	r8, {r6}
    6364:	0c080040 	stceq	0, cr0, [r8], {64}	; 0x40
    6368:	5001f300 	andpl	pc, r1, r0, lsl #6
    636c:	731aff08 	tstvc	sl, #8, 30
    6370:	2e301a00 	vaddcs.f32	s2, s0, s0
    6374:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6378:	00000000 	andeq	r0, r0, r0
    637c:	00401400 	subeq	r1, r0, r0, lsl #8
    6380:	00407c08 	subeq	r7, r0, r8, lsl #24
    6384:	50000108 	andpl	r0, r0, r8, lsl #2
    6388:	0800407c 	stmdaeq	r0, {r2, r3, r4, r5, r6, lr}
    638c:	08004090 	stmdaeq	r0, {r4, r7, lr}
    6390:	01f30004 	mvnseq	r0, r4
    6394:	40909f50 	addsmi	r9, r0, r0, asr pc
    6398:	40920800 	addsmi	r0, r2, r0, lsl #16
    639c:	00010800 	andeq	r0, r1, r0, lsl #16
    63a0:	00409250 	subeq	r9, r0, r0, asr r2
    63a4:	0040a408 	subeq	sl, r0, r8, lsl #8
    63a8:	f3000408 	vshl.u8	d0, d8, d0
    63ac:	a49f5001 	ldrge	r5, [pc], #1	; 63b4 <_Min_Stack_Size+0x5fb4>
    63b0:	a8080040 	stmdage	r8, {r6}
    63b4:	01080040 	tsteq	r8, r0, asr #32
    63b8:	40a85000 	adcmi	r5, r8, r0
    63bc:	40bc0800 	adcsmi	r0, ip, r0, lsl #16
    63c0:	00040800 	andeq	r0, r4, r0, lsl #16
    63c4:	9f5001f3 	svcls	0x005001f3
    63c8:	080040bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, lr}
    63cc:	080040c0 	stmdaeq	r0, {r6, r7, lr}
    63d0:	c0500001 	subsgt	r0, r0, r1
    63d4:	d4080040 	strle	r0, [r8], #-64	; 0x40
    63d8:	04080040 	streq	r0, [r8], #-64	; 0x40
    63dc:	5001f300 	andpl	pc, r1, r0, lsl #6
    63e0:	0040d49f 	umaaleq	sp, r0, pc, r4	; <UNPREDICTABLE>
    63e4:	0040d808 	subeq	sp, r0, r8, lsl #16
    63e8:	50000108 	andpl	r0, r0, r8, lsl #2
    63ec:	080040d8 	stmdaeq	r0, {r3, r4, r6, r7, lr}
    63f0:	080040ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, lr}
    63f4:	01f30004 	mvnseq	r0, r4
    63f8:	40ec9f50 	rscmi	r9, ip, r0, asr pc
    63fc:	40f00800 	rscsmi	r0, r0, r0, lsl #16
    6400:	00010800 	andeq	r0, r1, r0, lsl #16
    6404:	0040f050 	subeq	pc, r0, r0, asr r0	; <UNPREDICTABLE>
    6408:	00410408 	subeq	r0, r1, r8, lsl #8
    640c:	f3000408 	vshl.u8	d0, d8, d0
    6410:	049f5001 	ldreq	r5, [pc], #1	; 6418 <_Min_Stack_Size+0x6018>
    6414:	06080041 	streq	r0, [r8], -r1, asr #32
    6418:	01080041 	tsteq	r8, r1, asr #32
    641c:	41065000 	mrsmi	r5, (UNDEF: 6)
    6420:	41180800 	tstmi	r8, r0, lsl #16
    6424:	00040800 	andeq	r0, r4, r0, lsl #16
    6428:	9f5001f3 	svcls	0x005001f3
    642c:	08004118 	stmdaeq	r0, {r3, r4, r8, lr}
    6430:	0800411c 	stmdaeq	r0, {r2, r3, r4, r8, lr}
    6434:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    6438:	30080041 	andcc	r0, r8, r1, asr #32
    643c:	04080041 	streq	r0, [r8], #-65	; 0x41
    6440:	5001f300 	andpl	pc, r1, r0, lsl #6
    6444:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6448:	00000000 	andeq	r0, r0, r0
    644c:	00413000 	subeq	r3, r1, r0
    6450:	00414808 	subeq	r4, r1, r8, lsl #16
    6454:	50000108 	andpl	r0, r0, r8, lsl #2
    6458:	08004148 	stmdaeq	r0, {r3, r6, r8, lr}
    645c:	080041f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, lr}
    6460:	00540001 	subseq	r0, r4, r1
    6464:	00000000 	andeq	r0, r0, r0
    6468:	30000000 	andcc	r0, r0, r0
    646c:	4c080041 	stcmi	0, cr0, [r8], {65}	; 0x41
    6470:	01080041 	tsteq	r8, r1, asr #32
    6474:	414c5100 	mrsmi	r5, (UNDEF: 92)
    6478:	41c40800 	bicmi	r0, r4, r0, lsl #16
    647c:	00010800 	andeq	r0, r1, r0, lsl #16
    6480:	0041c455 	subeq	ip, r1, r5, asr r4
    6484:	0041f808 	subeq	pc, r1, r8, lsl #16
    6488:	f3000408 	vshl.u8	d0, d8, d0
    648c:	009f5101 	addseq	r5, pc, r1, lsl #2
    6490:	00000000 	andeq	r0, r0, r0
    6494:	30000000 	andcc	r0, r0, r0
    6498:	32080041 	andcc	r0, r8, #65	; 0x41
    649c:	02080041 	andeq	r0, r8, #65	; 0x41
    64a0:	329f3000 	addscc	r3, pc, #0
    64a4:	38080041 	stmdacc	r8, {r0, r6}
    64a8:	07080041 	streq	r0, [r8, -r1, asr #32]
    64ac:	0a007200 	beq	22cb4 <_Min_Stack_Size+0x228b4>
    64b0:	9f1affff 	svcls	0x001affff
    64b4:	08004150 	stmdaeq	r0, {r4, r6, r8, lr}
    64b8:	08004154 	stmdaeq	r0, {r2, r4, r6, r8, lr}
    64bc:	00730007 	rsbseq	r0, r3, r7
    64c0:	1affff0a 	bne	60f0 <_Min_Stack_Size+0x5cf0>
    64c4:	0041649f 	umaaleq	r6, r1, pc, r4	; <UNPREDICTABLE>
    64c8:	00416608 	subeq	r6, r1, r8, lsl #12
    64cc:	75001608 	strvc	r1, [r0, #-1544]	; 0x608
    64d0:	75029408 	strvc	r9, [r2, #-1032]	; 0x408
    64d4:	21029404 	tstcs	r2, r4, lsl #8
    64d8:	02940a75 	addseq	r0, r4, #479232	; 0x75000
    64dc:	ffff0a21 			; <UNDEFINED> instruction: 0xffff0a21
    64e0:	2100731a 	tstcs	r0, sl, lsl r3
    64e4:	00416a9f 	umaaleq	r6, r1, pc, sl	; <UNPREDICTABLE>
    64e8:	00416e08 	subeq	r6, r1, r8, lsl #28
    64ec:	73000708 	movwvc	r0, #1800	; 0x708
    64f0:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    64f4:	41729f1a 	cmnmi	r2, sl, lsl pc
    64f8:	41760800 	cmnmi	r6, r0, lsl #16
    64fc:	000c0800 	andeq	r0, ip, r0, lsl #16
    6500:	02940c75 	addseq	r0, r4, #29952	; 0x7500
    6504:	1affff0a 	bne	6134 <_Min_Stack_Size+0x5d34>
    6508:	9f210073 	svcls	0x00210073
    650c:	08004176 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, lr}
    6510:	0800417d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, lr}
    6514:	ca530001 	bgt	14c6520 <_Min_Stack_Size+0x14c6120>
    6518:	ee080041 	cdp	0, 0, cr0, cr8, cr1, {2}
    651c:	05080041 	streq	r0, [r8, #-65]	; 0x41
    6520:	34007100 	strcc	r7, [r0], #-256	; 0x100
    6524:	41ee9f24 	mvnmi	r9, r4, lsr #30
    6528:	41f20800 	mvnsmi	r0, r0, lsl #16
    652c:	00010800 	andeq	r0, r1, r0, lsl #16
    6530:	00000051 	andeq	r0, r0, r1, asr r0
    6534:	00000000 	andeq	r0, r0, r0
    6538:	00413000 	subeq	r3, r1, r0
    653c:	0041a008 	subeq	sl, r1, r8
    6540:	30000208 	andcc	r0, r0, r8, lsl #4
    6544:	0041a09f 	umaaleq	sl, r1, pc, r0	; <UNPREDICTABLE>
    6548:	0041aa08 	subeq	sl, r1, r8, lsl #20
    654c:	53000108 	movwpl	r0, #264	; 0x108
	...
    6558:	08004130 	stmdaeq	r0, {r4, r5, r8, lr}
    655c:	080041b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, lr}
    6560:	9f300002 	svcls	0x00300002
    6564:	080041b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, lr}
    6568:	080041d0 	stmdaeq	r0, {r4, r6, r7, r8, lr}
    656c:	00530001 	subseq	r0, r3, r1
    6570:	00000000 	andeq	r0, r0, r0
    6574:	30000000 	andcc	r0, r0, r0
    6578:	d0080041 	andle	r0, r8, r1, asr #32
    657c:	02080041 	andeq	r0, r8, #65	; 0x41
    6580:	d09f3000 	addsle	r3, pc, r0
    6584:	d4080041 	strle	r0, [r8], #-65	; 0x41
    6588:	01080041 	tsteq	r8, r1, asr #32
    658c:	00005300 	andeq	r5, r0, r0, lsl #6
    6590:	00000000 	andeq	r0, r0, r0
    6594:	42100000 	andsmi	r0, r0, #0
    6598:	421c0800 	andsmi	r0, ip, #0, 16
    659c:	00010800 	andeq	r0, r1, r0, lsl #16
    65a0:	00421c51 	subeq	r1, r2, r1, asr ip
    65a4:	00423408 	subeq	r3, r2, r8, lsl #8
    65a8:	f3000408 	vshl.u8	d0, d8, d0
    65ac:	009f5101 	addseq	r5, pc, r1, lsl #2
    65b0:	00000000 	andeq	r0, r0, r0
    65b4:	10000000 	andne	r0, r0, r0
    65b8:	1a080042 	bne	2066c8 <_Min_Stack_Size+0x2062c8>
    65bc:	02080042 	andeq	r0, r8, #66	; 0x42
    65c0:	1a9f3000 	bne	fe7d25c8 <_estack+0xde7a25c8>
    65c4:	24080042 	strcs	r0, [r8], #-66	; 0x42
    65c8:	07080042 	streq	r0, [r8, -r2, asr #32]
    65cc:	0a007300 	beq	231d4 <_Min_Stack_Size+0x22dd4>
    65d0:	9f1affff 	svcls	0x001affff
    65d4:	0800422c 	stmdaeq	r0, {r2, r3, r5, r9, lr}
    65d8:	0800422e 	stmdaeq	r0, {r1, r2, r3, r5, r9, lr}
    65dc:	01f30025 	mvnseq	r0, r5, lsr #32
    65e0:	94022351 	strls	r2, [r2], #-849	; 0x351
    65e4:	5101f302 	tstpl	r1, r2, lsl #6
    65e8:	f3210294 	vqsub.u32	d0, d17, d4
    65ec:	04235101 	strteq	r5, [r3], #-257	; 0x101
    65f0:	f3210294 	vqsub.u32	d0, d17, d4
    65f4:	06235101 	strteq	r5, [r3], -r1, lsl #2
    65f8:	0a210294 	beq	847050 <_Min_Stack_Size+0x846c50>
    65fc:	731affff 	tstvc	sl, #1020	; 0x3fc
    6600:	009f2100 	addseq	r2, pc, r0, lsl #2
    6604:	00000000 	andeq	r0, r0, r0
    6608:	5c000000 	stcpl	0, cr0, [r0], {-0}
    660c:	6a080042 	bvs	20671c <_Min_Stack_Size+0x20631c>
    6610:	01080042 	tsteq	r8, r2, asr #32
    6614:	426a5100 	rsbmi	r5, sl, #0, 2
    6618:	426e0800 	rsbmi	r0, lr, #0, 16
    661c:	00040800 	andeq	r0, r4, r0, lsl #16
    6620:	9f5101f3 	svcls	0x005101f3
	...
    662c:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
    6630:	080042ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, lr}
    6634:	ac510001 	mrrcge	0, 0, r0, r1, cr1
    6638:	b0080042 	andlt	r0, r8, r2, asr #32
    663c:	04080042 	streq	r0, [r8], #-66	; 0x42
    6640:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6644:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6648:	00000000 	andeq	r0, r0, r0
    664c:	0042b000 	subeq	fp, r2, r0
    6650:	0042b208 	subeq	fp, r2, r8, lsl #4
    6654:	50000108 	andpl	r0, r0, r8, lsl #2
    6658:	080042b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, lr}
    665c:	080042b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, lr}
    6660:	01f30004 	mvnseq	r0, r4
    6664:	00009f50 	andeq	r9, r0, r0, asr pc
    6668:	00000000 	andeq	r0, r0, r0
    666c:	42b80000 	adcsmi	r0, r8, #0
    6670:	42ca0800 	sbcmi	r0, sl, #0, 16
    6674:	00010800 	andeq	r0, r1, r0, lsl #16
    6678:	0042ca51 	subeq	ip, r2, r1, asr sl
    667c:	0042ce08 	subeq	ip, r2, r8, lsl #28
    6680:	f3000408 	vshl.u8	d0, d8, d0
    6684:	009f5101 	addseq	r5, pc, r1, lsl #2
    6688:	00000000 	andeq	r0, r0, r0
    668c:	ec000000 	stc	0, cr0, [r0], {-0}
    6690:	fe080042 	cdp2	0, 0, cr0, cr8, cr2, {2}
    6694:	01080042 	tsteq	r8, r2, asr #32
    6698:	42fe5100 	rscsmi	r5, lr, #0, 2
    669c:	43020800 	movwmi	r0, #10240	; 0x2800
    66a0:	00040800 	andeq	r0, r4, r0, lsl #16
    66a4:	9f5101f3 	svcls	0x005101f3
	...
    66b0:	08004304 	stmdaeq	r0, {r2, r8, r9, lr}
    66b4:	08004316 	stmdaeq	r0, {r1, r2, r4, r8, r9, lr}
    66b8:	16510001 	ldrbne	r0, [r1], -r1
    66bc:	1a080043 	bne	2067d0 <_Min_Stack_Size+0x2063d0>
    66c0:	04080043 	streq	r0, [r8], #-67	; 0x43
    66c4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    66c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    66cc:	00000000 	andeq	r0, r0, r0
    66d0:	00436000 	subeq	r6, r3, r0
    66d4:	00436e08 	subeq	r6, r3, r8, lsl #28
    66d8:	51000108 	tstpl	r0, r8, lsl #2
    66dc:	0800436e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, lr}
    66e0:	08004372 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, lr}
    66e4:	01f30004 	mvnseq	r0, r4
    66e8:	00009f51 	andeq	r9, r0, r1, asr pc
    66ec:	00000000 	andeq	r0, r0, r0
    66f0:	43ac0000 			; <UNDEFINED> instruction: 0x43ac0000
    66f4:	43be0800 			; <UNDEFINED> instruction: 0x43be0800
    66f8:	00010800 	andeq	r0, r1, r0, lsl #16
    66fc:	0043be51 	subeq	fp, r3, r1, asr lr
    6700:	0043c208 	subeq	ip, r3, r8, lsl #4
    6704:	f3000408 	vshl.u8	d0, d8, d0
    6708:	009f5101 	addseq	r5, pc, r1, lsl #2
    670c:	00000000 	andeq	r0, r0, r0
    6710:	e0000000 	and	r0, r0, r0
    6714:	ea080043 	b	206828 <_Min_Stack_Size+0x206428>
    6718:	01080043 	tsteq	r8, r3, asr #32
    671c:	43ea5100 	mvnmi	r5, #0, 2
    6720:	43ee0800 	mvnmi	r0, #0, 16
    6724:	00040800 	andeq	r0, r4, r0, lsl #16
    6728:	9f5101f3 	svcls	0x005101f3
    672c:	080043ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, lr}
    6730:	080043f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, lr}
    6734:	f0510001 			; <UNDEFINED> instruction: 0xf0510001
    6738:	f4080043 	vst4.16	{d0-d3}, [r8], r3
    673c:	04080043 	streq	r0, [r8], #-67	; 0x43
    6740:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6744:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6748:	00000000 	andeq	r0, r0, r0
    674c:	0043f400 	subeq	pc, r3, r0, lsl #8
    6750:	00440a08 	subeq	r0, r4, r8, lsl #20
    6754:	50000108 	andpl	r0, r0, r8, lsl #2
    6758:	0800440a 	stmdaeq	r0, {r1, r3, sl, lr}
    675c:	0800442e 	stmdaeq	r0, {r1, r2, r3, r5, sl, lr}
    6760:	01f30004 	mvnseq	r0, r4
    6764:	00009f50 	andeq	r9, r0, r0, asr pc
    6768:	00000000 	andeq	r0, r0, r0
    676c:	43f40000 	mvnsmi	r0, #0
    6770:	43fe0800 	mvnsmi	r0, #0, 16
    6774:	00010800 	andeq	r0, r1, r0, lsl #16
    6778:	0043fe51 	subeq	pc, r3, r1, asr lr	; <UNPREDICTABLE>
    677c:	00442e08 	subeq	r2, r4, r8, lsl #28
    6780:	f3000408 	vshl.u8	d0, d8, d0
    6784:	009f5101 	addseq	r5, pc, r1, lsl #2
    6788:	00000000 	andeq	r0, r0, r0
    678c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    6790:	00080043 	andeq	r0, r8, r3, asr #32
    6794:	02080044 	andeq	r0, r8, #68	; 0x44
    6798:	009f3000 	addseq	r3, pc, r0
    679c:	2e080044 	cdpcs	0, 0, cr0, cr8, cr4, {2}
    67a0:	01080044 	tsteq	r8, r4, asr #32
    67a4:	00005100 	andeq	r5, r0, r0, lsl #2
    67a8:	00000000 	andeq	r0, r0, r0
    67ac:	43f40000 	mvnsmi	r0, #0
    67b0:	44000800 	strmi	r0, [r0], #-2048	; 0x800
    67b4:	00020800 	andeq	r0, r2, r0, lsl #16
    67b8:	00009f30 	andeq	r9, r0, r0, lsr pc
    67bc:	00000000 	andeq	r0, r0, r0
    67c0:	43f40000 	mvnsmi	r0, #0
    67c4:	44060800 	strmi	r0, [r6], #-2048	; 0x800
    67c8:	00020800 	andeq	r0, r2, r0, lsl #16
    67cc:	44069f30 	strmi	r9, [r6], #-3888	; 0xf30
    67d0:	441c0800 	ldrmi	r0, [ip], #-2048	; 0x800
    67d4:	00010800 	andeq	r0, r1, r0, lsl #16
    67d8:	00442453 	subeq	r2, r4, r3, asr r4
    67dc:	00442608 	subeq	r2, r4, r8, lsl #12
    67e0:	53000108 	movwpl	r0, #264	; 0x108
	...
    67ec:	08004400 	stmdaeq	r0, {sl, lr}
    67f0:	0800440a 	stmdaeq	r0, {r1, r3, sl, lr}
    67f4:	0a500001 	beq	1406800 <_Min_Stack_Size+0x1406400>
    67f8:	12080044 	andne	r0, r8, #68	; 0x44
    67fc:	04080044 	streq	r0, [r8], #-68	; 0x44
    6800:	5001f300 	andpl	pc, r1, r0, lsl #6
    6804:	0044129f 	umaaleq	r1, r4, pc, r2	; <UNPREDICTABLE>
    6808:	00442e08 	subeq	r2, r4, r8, lsl #28
    680c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    6818:	08004430 	stmdaeq	r0, {r4, r5, sl, lr}
    681c:	0800443a 	stmdaeq	r0, {r1, r3, r4, r5, sl, lr}
    6820:	3a500001 	bcc	140682c <_Min_Stack_Size+0x140642c>
    6824:	3c080044 	stccc	0, cr0, [r8], {68}	; 0x44
    6828:	04080044 	streq	r0, [r8], #-68	; 0x44
    682c:	5001f300 	andpl	pc, r1, r0, lsl #6
    6830:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6834:	00000000 	andeq	r0, r0, r0
    6838:	00443000 	subeq	r3, r4, r0
    683c:	00443208 	subeq	r3, r4, r8, lsl #4
    6840:	30000208 	andcc	r0, r0, r8, lsl #4
    6844:	0044329f 	umaaleq	r3, r4, pc, r2	; <UNPREDICTABLE>
    6848:	00443c08 	subeq	r3, r4, r8, lsl #24
    684c:	71000a08 	tstvc	r0, r8, lsl #20
    6850:	1a007300 	bne	23458 <_Min_Stack_Size+0x23058>
    6854:	2e302440 	cfnegscs	mvf2, mvf0
    6858:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    685c:	00000000 	andeq	r0, r0, r0
    6860:	00443c00 	subeq	r3, r4, r0, lsl #24
    6864:	00443e08 	subeq	r3, r4, r8, lsl #28
    6868:	51000108 	tstpl	r0, r8, lsl #2
    686c:	0800443e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sl, lr}
    6870:	08004444 	stmdaeq	r0, {r2, r6, sl, lr}
    6874:	01f30004 	mvnseq	r0, r4
    6878:	00009f51 	andeq	r9, r0, r1, asr pc
    687c:	00000000 	andeq	r0, r0, r0
    6880:	44440000 	strbmi	r0, [r4], #-0
    6884:	44780800 	ldrbtmi	r0, [r8], #-2048	; 0x800
    6888:	00010800 	andeq	r0, r1, r0, lsl #16
    688c:	00447850 	subeq	r7, r4, r0, asr r8
    6890:	00448608 	subeq	r8, r4, r8, lsl #12
    6894:	f3000408 	vshl.u8	d0, d8, d0
    6898:	869f5001 	ldrhi	r5, [pc], r1
    689c:	8e080044 	cdphi	0, 0, cr0, cr8, cr4, {2}
    68a0:	01080044 	tsteq	r8, r4, asr #32
    68a4:	00005000 	andeq	r5, r0, r0
    68a8:	00000000 	andeq	r0, r0, r0
    68ac:	44440000 	strbmi	r0, [r4], #-0
    68b0:	446a0800 	strbtmi	r0, [sl], #-2048	; 0x800
    68b4:	00010800 	andeq	r0, r1, r0, lsl #16
    68b8:	00446a51 	subeq	r6, r4, r1, asr sl
    68bc:	00448608 	subeq	r8, r4, r8, lsl #12
    68c0:	f3000408 	vshl.u8	d0, d8, d0
    68c4:	869f5101 	ldrhi	r5, [pc], r1, lsl #2
    68c8:	8e080044 	cdphi	0, 0, cr0, cr8, cr4, {2}
    68cc:	01080044 	tsteq	r8, r4, asr #32
    68d0:	00005100 	andeq	r5, r0, r0, lsl #2
    68d4:	00000000 	andeq	r0, r0, r0
    68d8:	44440000 	strbmi	r0, [r4], #-0
    68dc:	44640800 	strbtmi	r0, [r4], #-2048	; 0x800
    68e0:	00020800 	andeq	r0, r2, r0, lsl #16
    68e4:	44649f30 	strbtmi	r9, [r4], #-3888	; 0xf30
    68e8:	446a0800 	strbtmi	r0, [sl], #-2048	; 0x800
    68ec:	00090800 	andeq	r0, r9, r0, lsl #16
    68f0:	25380071 	ldrcs	r0, [r8, #-113]!	; 0x71
    68f4:	1affff0a 	bne	6524 <_Min_Stack_Size+0x6124>
    68f8:	0044709f 	umaaleq	r7, r4, pc, r0	; <UNPREDICTABLE>
    68fc:	00448608 	subeq	r8, r4, r8, lsl #12
    6900:	73000a08 	movwvc	r0, #2568	; 0xa08
    6904:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    6908:	1a00711a 	bne	22d78 <_Min_Stack_Size+0x22978>
    690c:	0044869f 	umaaleq	r8, r4, pc, r6	; <UNPREDICTABLE>
    6910:	00448e08 	subeq	r8, r4, r8, lsl #28
    6914:	30000208 	andcc	r0, r0, r8, lsl #4
    6918:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    691c:	00000000 	andeq	r0, r0, r0
    6920:	00444400 	subeq	r4, r4, r0, lsl #8
    6924:	00444808 	subeq	r4, r4, r8, lsl #16
    6928:	30000208 	andcc	r0, r0, r8, lsl #4
    692c:	0044489f 	umaaleq	r4, r4, pc, r8	; <UNPREDICTABLE>
    6930:	00445608 	subeq	r5, r4, r8, lsl #12
    6934:	71000908 	tstvc	r0, r8, lsl #18
    6938:	0a1a4f00 	beq	69a540 <_Min_Stack_Size+0x69a140>
    693c:	9f1affff 	svcls	0x001affff
    6940:	08004456 	stmdaeq	r0, {r1, r2, r4, r6, sl, lr}
    6944:	08004464 	stmdaeq	r0, {r2, r5, r6, sl, lr}
    6948:	64540001 	ldrbvs	r0, [r4], #-1
    694c:	86080044 	strhi	r0, [r8], -r4, asr #32
    6950:	01080044 	tsteq	r8, r4, asr #32
    6954:	44865200 	strmi	r5, [r6], #512	; 0x200
    6958:	448c0800 	strmi	r0, [ip], #2048	; 0x800
    695c:	00010800 	andeq	r0, r1, r0, lsl #16
    6960:	00448c54 	subeq	r8, r4, r4, asr ip
    6964:	00448e08 	subeq	r8, r4, r8, lsl #28
    6968:	52000108 	andpl	r0, r0, #8, 2
	...
    6974:	08004444 	stmdaeq	r0, {r2, r6, sl, lr}
    6978:	08004448 	stmdaeq	r0, {r3, r6, sl, lr}
    697c:	9f300002 	svcls	0x00300002
    6980:	08004448 	stmdaeq	r0, {r3, r6, sl, lr}
    6984:	08004466 	stmdaeq	r0, {r1, r2, r5, r6, sl, lr}
    6988:	66530001 	ldrbvs	r0, [r3], -r1
    698c:	6a080044 	bvs	206aa4 <_Min_Stack_Size+0x2066a4>
    6990:	08080044 	stmdaeq	r8, {r2, r6}
    6994:	09007100 	stmdbeq	r0, {r8, ip, sp, lr}
    6998:	253124fc 	ldrcs	r2, [r1, #-1276]!	; 0x4fc
    699c:	0044869f 	umaaleq	r8, r4, pc, r6	; <UNPREDICTABLE>
    69a0:	00448e08 	subeq	r8, r4, r8, lsl #28
    69a4:	53000108 	movwpl	r0, #264	; 0x108
	...
    69b0:	08004444 	stmdaeq	r0, {r2, r6, sl, lr}
    69b4:	08004470 	stmdaeq	r0, {r4, r5, r6, sl, lr}
    69b8:	9f300002 	svcls	0x00300002
    69bc:	08004470 	stmdaeq	r0, {r4, r5, r6, sl, lr}
    69c0:	08004486 	stmdaeq	r0, {r1, r2, r7, sl, lr}
    69c4:	00720011 	rsbseq	r0, r2, r1, lsl r0
    69c8:	00732e30 	rsbseq	r2, r3, r0, lsr lr
    69cc:	1affff0a 	bne	65fc <_Min_Stack_Size+0x61fc>
    69d0:	301a0071 	andscc	r0, sl, r1, ror r0
    69d4:	869f1a2e 	ldrhi	r1, [pc], lr, lsr #20
    69d8:	8e080044 	cdphi	0, 0, cr0, cr8, cr4, {2}
    69dc:	02080044 	andeq	r0, r8, #68	; 0x44
    69e0:	009f3000 	addseq	r3, pc, r0
    69e4:	00000000 	andeq	r0, r0, r0
    69e8:	90000000 	andls	r0, r0, r0
    69ec:	92080044 	andls	r0, r8, #68	; 0x44
    69f0:	01080044 	tsteq	r8, r4, asr #32
    69f4:	44925100 	ldrmi	r5, [r2], #256	; 0x100
    69f8:	44a00800 	strtmi	r0, [r0], #2048	; 0x800
    69fc:	00040800 	andeq	r0, r4, r0, lsl #16
    6a00:	9f5101f3 	svcls	0x005101f3
	...
    6a0c:	08004490 	stmdaeq	r0, {r4, r7, sl, lr}
    6a10:	08004492 	stmdaeq	r0, {r1, r4, r7, sl, lr}
    6a14:	00710005 	rsbseq	r0, r1, r5
    6a18:	929f2538 	addsls	r2, pc, #56, 10	; 0xe000000
    6a1c:	a0080044 	andge	r0, r8, r4, asr #32
    6a20:	06080044 	streq	r0, [r8], -r4, asr #32
    6a24:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6a28:	009f2538 	addseq	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    6a2c:	00000000 	andeq	r0, r0, r0
    6a30:	d4000000 	strle	r0, [r0], #-0
    6a34:	fc080044 	stc2	0, cr0, [r8], {68}	; 0x44
    6a38:	01080044 	tsteq	r8, r4, asr #32
    6a3c:	44fc5000 	ldrbtmi	r5, [ip], #0
    6a40:	45020800 	strmi	r0, [r2, #-2048]	; 0x800
    6a44:	00040800 	andeq	r0, r4, r0, lsl #16
    6a48:	9f5001f3 	svcls	0x005001f3
	...
    6a54:	080044d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, lr}
    6a58:	080044e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, lr}
    6a5c:	e4510001 	ldrb	r0, [r1], #-1
    6a60:	02080044 	andeq	r0, r8, #68	; 0x44
    6a64:	04080045 	streq	r0, [r8], #-69	; 0x45
    6a68:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6a6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6a70:	00000000 	andeq	r0, r0, r0
    6a74:	0044d400 	subeq	sp, r4, r0, lsl #8
    6a78:	0044e808 	subeq	lr, r4, r8, lsl #16
    6a7c:	30000208 	andcc	r0, r0, r8, lsl #4
    6a80:	0044e89f 	umaaleq	lr, r4, pc, r8	; <UNPREDICTABLE>
    6a84:	0044ee08 	subeq	lr, r4, r8, lsl #28
    6a88:	3f000508 	svccc	0x00000508
    6a8c:	9f240071 	svcls	0x00240071
    6a90:	080044ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, lr}
    6a94:	080044f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, lr}
    6a98:	f2520001 	vhadd.s16	d16, d2, d1
    6a9c:	02080044 	andeq	r0, r8, #68	; 0x44
    6aa0:	05080045 	streq	r0, [r8, #-69]	; 0x45
    6aa4:	00713f00 	rsbseq	r3, r1, r0, lsl #30
    6aa8:	00009f24 	andeq	r9, r0, r4, lsr #30
    6aac:	00000000 	andeq	r0, r0, r0
    6ab0:	451c0000 	ldrmi	r0, [ip, #-0]
    6ab4:	45260800 	strmi	r0, [r6, #-2048]!	; 0x800
    6ab8:	00020800 	andeq	r0, r2, r0, lsl #16
    6abc:	45269f30 	strmi	r9, [r6, #-3888]!	; 0xf30
    6ac0:	452a0800 	strmi	r0, [sl, #-2048]!	; 0x800
    6ac4:	00090800 	andeq	r0, r9, r0, lsl #16
    6ac8:	000a0070 	andeq	r0, sl, r0, ror r0
    6acc:	2e301a01 	vaddcs.f32	s2, s0, s2
    6ad0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6ad4:	00000000 	andeq	r0, r0, r0
    6ad8:	00452c00 	subeq	r2, r5, r0, lsl #24
    6adc:	00455808 	subeq	r5, r5, r8, lsl #16
    6ae0:	50000108 	andpl	r0, r0, r8, lsl #2
    6ae4:	08004558 	stmdaeq	r0, {r3, r4, r6, r8, sl, lr}
    6ae8:	0800456c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, lr}
    6aec:	01f30004 	mvnseq	r0, r4
    6af0:	456c9f50 	strbmi	r9, [ip, #-3920]!	; 0xf50
    6af4:	45700800 	ldrbmi	r0, [r0, #-2048]!	; 0x800
    6af8:	00010800 	andeq	r0, r1, r0, lsl #16
    6afc:	00457050 	subeq	r7, r5, r0, asr r0
    6b00:	00458408 	subeq	r8, r5, r8, lsl #8
    6b04:	f3000408 	vshl.u8	d0, d8, d0
    6b08:	849f5001 	ldrhi	r5, [pc], #1	; 6b10 <_Min_Stack_Size+0x6710>
    6b0c:	88080045 	stmdahi	r8, {r0, r2, r6}
    6b10:	01080045 	tsteq	r8, r5, asr #32
    6b14:	45885000 	strmi	r5, [r8]
    6b18:	459c0800 	ldrmi	r0, [ip, #2048]	; 0x800
    6b1c:	00040800 	andeq	r0, r4, r0, lsl #16
    6b20:	9f5001f3 	svcls	0x005001f3
	...
    6b2c:	0800459c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, lr}
    6b30:	080045a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, lr}
    6b34:	a4500001 	ldrbge	r0, [r0], #-1
    6b38:	84080045 	strhi	r0, [r8], #-69	; 0x45
    6b3c:	01080046 	tsteq	r8, r6, asr #32
    6b40:	00005400 	andeq	r5, r0, r0, lsl #8
    6b44:	00000000 	andeq	r0, r0, r0
    6b48:	459c0000 	ldrmi	r0, [ip]
    6b4c:	45ab0800 	strmi	r0, [fp, #2048]!	; 0x800
    6b50:	00010800 	andeq	r0, r1, r0, lsl #16
    6b54:	0045ab51 	subeq	sl, r5, r1, asr fp
    6b58:	00468408 	subeq	r8, r6, r8, lsl #8
    6b5c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    6b68:	0800459c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, lr}
    6b6c:	080045a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, lr}
    6b70:	9f300002 	svcls	0x00300002
    6b74:	080045a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, lr}
    6b78:	080045c0 	stmdaeq	r0, {r6, r7, r8, sl, lr}
    6b7c:	c6560001 	ldrbgt	r0, [r6], -r1
    6b80:	e6080045 	str	r0, [r8], -r5, asr #32
    6b84:	01080045 	tsteq	r8, r5, asr #32
    6b88:	45e65600 	strbmi	r5, [r6, #1536]!	; 0x600
    6b8c:	45fa0800 	ldrbmi	r0, [sl, #2048]!	; 0x800
    6b90:	00020800 	andeq	r0, r2, r0, lsl #16
    6b94:	45fa9f30 	ldrbmi	r9, [sl, #3888]!	; 0xf30
    6b98:	46020800 	strmi	r0, [r2], -r0, lsl #16
    6b9c:	00010800 	andeq	r0, r1, r0, lsl #16
    6ba0:	00461453 	subeq	r1, r6, r3, asr r4
    6ba4:	00461808 	subeq	r1, r6, r8, lsl #16
    6ba8:	53000108 	movwpl	r0, #264	; 0x108
    6bac:	08004622 	stmdaeq	r0, {r1, r5, r9, sl, lr}
    6bb0:	08004624 	stmdaeq	r0, {r2, r5, r9, sl, lr}
    6bb4:	28530001 	ldmdacs	r3, {r0}^
    6bb8:	32080046 	andcc	r0, r8, #70	; 0x46
    6bbc:	01080046 	tsteq	r8, r6, asr #32
    6bc0:	46325300 	ldrtmi	r5, [r2], -r0, lsl #6
    6bc4:	46800800 	strmi	r0, [r0], r0, lsl #16
    6bc8:	00020800 	andeq	r0, r2, r0, lsl #16
    6bcc:	46809f30 			; <UNDEFINED> instruction: 0x46809f30
    6bd0:	46840800 	strmi	r0, [r4], r0, lsl #16
    6bd4:	00010800 	andeq	r0, r1, r0, lsl #16
    6bd8:	00000053 	andeq	r0, r0, r3, asr r0
    6bdc:	00000000 	andeq	r0, r0, r0
    6be0:	00459c00 	subeq	r9, r5, r0, lsl #24
    6be4:	0045ca08 	subeq	ip, r5, r8, lsl #20
    6be8:	30000208 	andcc	r0, r0, r8, lsl #4
    6bec:	0045ca9f 	umaaleq	ip, r5, pc, sl	; <UNPREDICTABLE>
    6bf0:	0045fe08 	subeq	pc, r5, r8, lsl #28
    6bf4:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    6bf8:	08004632 	stmdaeq	r0, {r1, r4, r5, r9, sl, lr}
    6bfc:	08004670 	stmdaeq	r0, {r4, r5, r6, r9, sl, lr}
    6c00:	70570001 	subsvc	r0, r7, r1
    6c04:	84080046 	strhi	r0, [r8], #-70	; 0x46
    6c08:	01080046 	tsteq	r8, r6, asr #32
    6c0c:	00005c00 	andeq	r5, r0, r0, lsl #24
    6c10:	00000000 	andeq	r0, r0, r0
    6c14:	459c0000 	ldrmi	r0, [ip]
    6c18:	45f00800 	ldrbmi	r0, [r0, #2048]!	; 0x800
    6c1c:	00020800 	andeq	r0, r2, r0, lsl #16
    6c20:	45f09f34 	ldrbmi	r9, [r0, #3892]!	; 0xf34
    6c24:	45fe0800 	ldrbmi	r0, [lr, #2048]!	; 0x800
    6c28:	00010800 	andeq	r0, r1, r0, lsl #16
    6c2c:	00463253 	subeq	r3, r6, r3, asr r2
    6c30:	00465608 	subeq	r5, r6, r8, lsl #12
    6c34:	34000208 	strcc	r0, [r0], #-520	; 0x208
    6c38:	0046569f 	umaaleq	r5, r6, pc, r6	; <UNPREDICTABLE>
    6c3c:	00468008 	subeq	r8, r6, r8
    6c40:	53000108 	movwpl	r0, #264	; 0x108
	...
    6c4c:	0800459c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, lr}
    6c50:	080045c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, lr}
    6c54:	000c0006 	andeq	r0, ip, r6
    6c58:	9f007a12 	svcls	0x00007a12
    6c5c:	080045c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, lr}
    6c60:	080045fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, lr}
    6c64:	fe510001 	cdp2	0, 5, cr0, cr1, cr1, {0}
    6c68:	32080045 	andcc	r0, r8, #69	; 0x45
    6c6c:	02080046 	andeq	r0, r8, #70	; 0x46
    6c70:	32609100 	rsbcc	r9, r0, #0, 2
    6c74:	68080046 	stmdavs	r8, {r1, r2, r6}
    6c78:	01080046 	tsteq	r8, r6, asr #32
    6c7c:	46685100 	strbtmi	r5, [r8], -r0, lsl #2
    6c80:	46840800 	strmi	r0, [r4], r0, lsl #16
    6c84:	00020800 	andeq	r0, r2, r0, lsl #16
    6c88:	00006091 	muleq	r0, r1, r0
    6c8c:	00000000 	andeq	r0, r0, r0
    6c90:	46e00000 	strbtmi	r0, [r0], r0
    6c94:	46ec0800 	strbtmi	r0, [ip], r0, lsl #16
    6c98:	00010800 	andeq	r0, r1, r0, lsl #16
    6c9c:	0046ec51 	subeq	lr, r6, r1, asr ip
    6ca0:	0046f408 	subeq	pc, r6, r8, lsl #8
    6ca4:	f3000408 	vshl.u8	d0, d8, d0
    6ca8:	009f5101 	addseq	r5, pc, r1, lsl #2
    6cac:	00000000 	andeq	r0, r0, r0
    6cb0:	e0000000 	and	r0, r0, r0
    6cb4:	e2080046 	and	r0, r8, #70	; 0x46
    6cb8:	02080046 	andeq	r0, r8, #70	; 0x46
    6cbc:	e29f3000 	adds	r3, pc, #0
    6cc0:	e6080046 	str	r0, [r8], -r6, asr #32
    6cc4:	06080046 	streq	r0, [r8], -r6, asr #32
    6cc8:	09007300 	stmdbeq	r0, {r8, r9, ip, sp, lr}
    6ccc:	f09f1af0 			; <UNDEFINED> instruction: 0xf09f1af0
    6cd0:	f4080046 	vst4.16	{d0-d3}, [r8], r6
    6cd4:	01080046 	tsteq	r8, r6, asr #32
    6cd8:	00005300 	andeq	r5, r0, r0, lsl #6
    6cdc:	00000000 	andeq	r0, r0, r0
    6ce0:	472c0000 	strmi	r0, [ip, -r0]!
    6ce4:	47320800 	ldrmi	r0, [r2, -r0, lsl #16]!
    6ce8:	00010800 	andeq	r0, r1, r0, lsl #16
    6cec:	00473251 	subeq	r3, r7, r1, asr r2
    6cf0:	00473e08 	subeq	r3, r7, r8, lsl #28
    6cf4:	51000108 	tstpl	r0, r8, lsl #2
	...
    6d00:	0800475c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, lr}
    6d04:	08004768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, lr}
    6d08:	68510001 	ldmdavs	r1, {r0}^
    6d0c:	70080047 	andvc	r0, r8, r7, asr #32
    6d10:	04080047 	streq	r0, [r8], #-71	; 0x47
    6d14:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6d18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6d1c:	00000000 	andeq	r0, r0, r0
    6d20:	00475c00 	subeq	r5, r7, r0, lsl #24
    6d24:	00475e08 	subeq	r5, r7, r8, lsl #28
    6d28:	30000208 	andcc	r0, r0, r8, lsl #4
    6d2c:	00475e9f 	umaaleq	r5, r7, pc, lr	; <UNPREDICTABLE>
    6d30:	00476208 	subeq	r6, r7, r8, lsl #4
    6d34:	73000708 	movwvc	r0, #1800	; 0x708
    6d38:	ff010b00 			; <UNDEFINED> instruction: 0xff010b00
    6d3c:	476c9f1a 			; <UNDEFINED> instruction: 0x476c9f1a
    6d40:	47700800 	ldrbmi	r0, [r0, -r0, lsl #16]!
    6d44:	00010800 	andeq	r0, r1, r0, lsl #16
    6d48:	00000053 	andeq	r0, r0, r3, asr r0
    6d4c:	00000000 	andeq	r0, r0, r0
    6d50:	00485400 	subeq	r5, r8, r0, lsl #8
    6d54:	00485608 	subeq	r5, r8, r8, lsl #12
    6d58:	50000108 	andpl	r0, r0, r8, lsl #2
    6d5c:	08004856 	stmdaeq	r0, {r1, r2, r4, r6, fp, lr}
    6d60:	0800485a 	stmdaeq	r0, {r1, r3, r4, r6, fp, lr}
    6d64:	01f30004 	mvnseq	r0, r4
    6d68:	00009f50 	andeq	r9, r0, r0, asr pc
    6d6c:	00000000 	andeq	r0, r0, r0
    6d70:	48b00000 	ldmmi	r0!, {}	; <UNPREDICTABLE>
    6d74:	48b20800 	ldmmi	r2!, {fp}
    6d78:	00010800 	andeq	r0, r1, r0, lsl #16
    6d7c:	0048b250 	subeq	fp, r8, r0, asr r2
    6d80:	0048b808 	subeq	fp, r8, r8, lsl #16
    6d84:	f3000408 	vshl.u8	d0, d8, d0
    6d88:	009f5001 	addseq	r5, pc, r1
    6d8c:	00000000 	andeq	r0, r0, r0
    6d90:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    6d94:	02080048 	andeq	r0, r8, #72	; 0x48
    6d98:	01080049 	tsteq	r8, r9, asr #32
    6d9c:	49025000 	stmdbmi	r2, {ip, lr}
    6da0:	49080800 	stmdbmi	r8, {fp}
    6da4:	00040800 	andeq	r0, r4, r0, lsl #16
    6da8:	9f5001f3 	svcls	0x005001f3
	...
    6db4:	080048f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, lr}
    6db8:	080048fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, lr}
    6dbc:	fc510001 	mrrc2	0, 0, r0, r1, cr1
    6dc0:	08080048 	stmdaeq	r8, {r3, r6}
    6dc4:	04080049 	streq	r0, [r8], #-73	; 0x49
    6dc8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6dcc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6dd0:	00000000 	andeq	r0, r0, r0
    6dd4:	00490800 	subeq	r0, r9, r0, lsl #16
    6dd8:	00491208 	subeq	r1, r9, r8, lsl #4
    6ddc:	51000108 	tstpl	r0, r8, lsl #2
    6de0:	08004912 	stmdaeq	r0, {r1, r4, r8, fp, lr}
    6de4:	08004916 	stmdaeq	r0, {r1, r2, r4, r8, fp, lr}
    6de8:	01f30004 	mvnseq	r0, r4
    6dec:	49169f51 	ldmdbmi	r6, {r0, r4, r6, r8, r9, sl, fp, ip, pc}
    6df0:	49180800 	ldmdbmi	r8, {fp}
    6df4:	00010800 	andeq	r0, r1, r0, lsl #16
    6df8:	00491851 	subeq	r1, r9, r1, asr r8
    6dfc:	00491c08 	subeq	r1, r9, r8, lsl #24
    6e00:	f3000408 	vshl.u8	d0, d8, d0
    6e04:	009f5101 	addseq	r5, pc, r1, lsl #2
    6e08:	00000000 	andeq	r0, r0, r0
    6e0c:	1c000000 	stcne	0, cr0, [r0], {-0}
    6e10:	22080049 	andcs	r0, r8, #73	; 0x49
    6e14:	01080049 	tsteq	r8, r9, asr #32
    6e18:	49225000 	stmdbmi	r2!, {ip, lr}
    6e1c:	49340800 	ldmdbmi	r4!, {fp}
    6e20:	00040800 	andeq	r0, r4, r0, lsl #16
    6e24:	9f5001f3 	svcls	0x005001f3
	...
    6e30:	0800491c 	stmdaeq	r0, {r2, r3, r4, r8, fp, lr}
    6e34:	08004922 	stmdaeq	r0, {r1, r5, r8, fp, lr}
    6e38:	9f300002 	svcls	0x00300002
    6e3c:	08004922 	stmdaeq	r0, {r1, r5, r8, fp, lr}
    6e40:	08004926 	stmdaeq	r0, {r1, r2, r5, r8, fp, lr}
    6e44:	00730016 	rsbseq	r0, r3, r6, lsl r0
    6e48:	1affff0a 	bne	6a78 <_Min_Stack_Size+0x6678>
    6e4c:	00702440 	rsbseq	r2, r0, r0, asr #8
    6e50:	1affff0a 	bne	6a80 <_Min_Stack_Size+0x6680>
    6e54:	ffff0c21 			; <UNDEFINED> instruction: 0xffff0c21
    6e58:	9f1a00ff 	svcls	0x001a00ff
    6e5c:	08004926 	stmdaeq	r0, {r1, r2, r5, r8, fp, lr}
    6e60:	0800492a 	stmdaeq	r0, {r1, r3, r5, r8, fp, lr}
    6e64:	00730016 	rsbseq	r0, r3, r6, lsl r0
    6e68:	1affff0a 	bne	6a98 <_Min_Stack_Size+0x6698>
    6e6c:	00722440 	rsbseq	r2, r2, r0, asr #8
    6e70:	1affff0a 	bne	6aa0 <_Min_Stack_Size+0x66a0>
    6e74:	ffff0c21 			; <UNDEFINED> instruction: 0xffff0c21
    6e78:	9f1a00ff 	svcls	0x001a00ff
	...
    6e84:	0800491c 	stmdaeq	r0, {r2, r3, r4, r8, fp, lr}
    6e88:	08004922 	stmdaeq	r0, {r1, r5, r8, fp, lr}
    6e8c:	9f300002 	svcls	0x00300002
    6e90:	08004922 	stmdaeq	r0, {r1, r5, r8, fp, lr}
    6e94:	08004926 	stmdaeq	r0, {r1, r2, r5, r8, fp, lr}
    6e98:	00700007 	rsbseq	r0, r0, r7
    6e9c:	1affff0a 	bne	6acc <_Min_Stack_Size+0x66cc>
    6ea0:	0049269f 	umaaleq	r2, r9, pc, r6	; <UNPREDICTABLE>
    6ea4:	00493408 	subeq	r3, r9, r8, lsl #8
    6ea8:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    6eac:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    6eb0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    6eb4:	00000000 	andeq	r0, r0, r0
    6eb8:	491c0000 	ldmdbmi	ip, {}	; <UNPREDICTABLE>
    6ebc:	49220800 	stmdbmi	r2!, {fp}
    6ec0:	00020800 	andeq	r0, r2, r0, lsl #16
    6ec4:	49229f30 	stmdbmi	r2!, {r4, r5, r8, r9, sl, fp, ip, pc}
    6ec8:	492a0800 	stmdbmi	sl!, {fp}
    6ecc:	00090800 	andeq	r0, r9, r0, lsl #16
    6ed0:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    6ed4:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    6ed8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6edc:	00000000 	andeq	r0, r0, r0
    6ee0:	00491c00 	subeq	r1, r9, r0, lsl #24
    6ee4:	00492208 	subeq	r2, r9, r8, lsl #4
    6ee8:	30000208 	andcc	r0, r0, r8, lsl #4
    6eec:	0049229f 	umaaleq	r2, r9, pc, r2	; <UNPREDICTABLE>
    6ef0:	00492608 	subeq	r2, r9, r8, lsl #12
    6ef4:	71001c08 	tstvc	r0, r8, lsl #24
    6ef8:	0a007300 	beq	23b00 <_Min_Stack_Size+0x23700>
    6efc:	401affff 			; <UNDEFINED> instruction: 0x401affff
    6f00:	0a007024 	beq	22f98 <_Min_Stack_Size+0x22b98>
    6f04:	211affff 			; <UNDEFINED> instruction: 0x211affff
    6f08:	0c1a0071 	ldceq	0, cr0, [sl], {113}	; 0x71
    6f0c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
    6f10:	269f291a 			; <UNDEFINED> instruction: 0x269f291a
    6f14:	2a080049 	bcs	207040 <_Min_Stack_Size+0x206c40>
    6f18:	1c080049 	stcne	0, cr0, [r8], {73}	; 0x49
    6f1c:	73007100 	movwvc	r7, #256	; 0x100
    6f20:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    6f24:	7224401a 	eorvc	r4, r4, #26
    6f28:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    6f2c:	0071211a 	rsbseq	r2, r1, sl, lsl r1
    6f30:	ffff0c1a 			; <UNDEFINED> instruction: 0xffff0c1a
    6f34:	291a00ff 	ldmdbcs	sl, {r0, r1, r2, r3, r4, r5, r6, r7}
    6f38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6f3c:	00000000 	andeq	r0, r0, r0
    6f40:	00493400 	subeq	r3, r9, r0, lsl #8
    6f44:	00493a08 	subeq	r3, r9, r8, lsl #20
    6f48:	50000108 	andpl	r0, r0, r8, lsl #2
    6f4c:	0800493a 	stmdaeq	r0, {r1, r3, r4, r5, r8, fp, lr}
    6f50:	08004944 	stmdaeq	r0, {r2, r6, r8, fp, lr}
    6f54:	01f30004 	mvnseq	r0, r4
    6f58:	00009f50 	andeq	r9, r0, r0, asr pc
    6f5c:	00000000 	andeq	r0, r0, r0
    6f60:	49340000 	ldmdbmi	r4!, {}	; <UNPREDICTABLE>
    6f64:	493a0800 	ldmdbmi	sl!, {fp}
    6f68:	00020800 	andeq	r0, r2, r0, lsl #16
    6f6c:	493a9f30 	ldmdbmi	sl!, {r4, r5, r8, r9, sl, fp, ip, pc}
    6f70:	493e0800 	ldmdbmi	lr!, {fp}
    6f74:	00160800 	andseq	r0, r6, r0, lsl #16
    6f78:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    6f7c:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    6f80:	ff0a0070 			; <UNDEFINED> instruction: 0xff0a0070
    6f84:	0c211aff 	stceq	10, cr1, [r1], #-1020	; 0xfffffc04
    6f88:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
    6f8c:	493e9f1a 	ldmdbmi	lr!, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    6f90:	49440800 	stmdbmi	r4, {fp}^
    6f94:	00160800 	andseq	r0, r6, r0, lsl #16
    6f98:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    6f9c:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    6fa0:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    6fa4:	0c211aff 	stceq	10, cr1, [r1], #-1020	; 0xfffffc04
    6fa8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
    6fac:	00009f1a 	andeq	r9, r0, sl, lsl pc
    6fb0:	00000000 	andeq	r0, r0, r0
    6fb4:	49340000 	ldmdbmi	r4!, {}	; <UNPREDICTABLE>
    6fb8:	493a0800 	ldmdbmi	sl!, {fp}
    6fbc:	00020800 	andeq	r0, r2, r0, lsl #16
    6fc0:	493a9f30 	ldmdbmi	sl!, {r4, r5, r8, r9, sl, fp, ip, pc}
    6fc4:	493e0800 	ldmdbmi	lr!, {fp}
    6fc8:	00070800 	andeq	r0, r7, r0, lsl #16
    6fcc:	ff0a0070 			; <UNDEFINED> instruction: 0xff0a0070
    6fd0:	3e9f1aff 	mrccc	10, 4, r1, cr15, cr15, {7}
    6fd4:	44080049 	strmi	r0, [r8], #-73	; 0x49
    6fd8:	07080049 	streq	r0, [r8, -r9, asr #32]
    6fdc:	0a007200 	beq	237e4 <_Min_Stack_Size+0x233e4>
    6fe0:	9f1affff 	svcls	0x001affff
	...
    6fec:	08004934 	stmdaeq	r0, {r2, r4, r5, r8, fp, lr}
    6ff0:	0800493a 	stmdaeq	r0, {r1, r3, r4, r5, r8, fp, lr}
    6ff4:	9f300002 	svcls	0x00300002
    6ff8:	0800493a 	stmdaeq	r0, {r1, r3, r4, r5, r8, fp, lr}
    6ffc:	08004944 	stmdaeq	r0, {r2, r6, r8, fp, lr}
    7000:	00730009 	rsbseq	r0, r3, r9
    7004:	1affff0a 	bne	6c34 <_Min_Stack_Size+0x6834>
    7008:	009f2440 	addseq	r2, pc, r0, asr #8
    700c:	00000000 	andeq	r0, r0, r0
    7010:	44000000 	strmi	r0, [r0], #-0
    7014:	6c080049 	stcvs	0, cr0, [r8], {73}	; 0x49
    7018:	01080049 	tsteq	r8, r9, asr #32
    701c:	496c5000 	stmdbmi	ip!, {ip, lr}^
    7020:	49700800 	ldmdbmi	r0!, {fp}^
    7024:	00040800 	andeq	r0, r4, r0, lsl #16
    7028:	9f5001f3 	svcls	0x005001f3
    702c:	08004970 	stmdaeq	r0, {r4, r5, r6, r8, fp, lr}
    7030:	0800497a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, fp, lr}
    7034:	00500001 	subseq	r0, r0, r1
    7038:	00000000 	andeq	r0, r0, r0
    703c:	44000000 	strmi	r0, [r0], #-0
    7040:	58080049 	stmdapl	r8, {r0, r3, r6}
    7044:	01080049 	tsteq	r8, r9, asr #32
    7048:	49585100 	ldmdbmi	r8, {r8, ip, lr}^
    704c:	497a0800 	ldmdbmi	sl!, {fp}^
    7050:	00010800 	andeq	r0, r1, r0, lsl #16
    7054:	00000051 	andeq	r0, r0, r1, asr r0
    7058:	00000000 	andeq	r0, r0, r0
    705c:	00494400 	subeq	r4, r9, r0, lsl #8
    7060:	00496408 	subeq	r6, r9, r8, lsl #8
    7064:	30000208 	andcc	r0, r0, r8, lsl #4
    7068:	0049649f 	umaaleq	r6, r9, pc, r4	; <UNPREDICTABLE>
    706c:	00497008 	subeq	r7, r9, r8
    7070:	71000808 	tstvc	r0, r8, lsl #16
    7074:	1a007300 	bne	23c7c <_Min_Stack_Size+0x2387c>
    7078:	709f2e30 	addsvc	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    707c:	7a080049 	bvc	2071a8 <_Min_Stack_Size+0x206da8>
    7080:	02080049 	andeq	r0, r8, #73	; 0x49
    7084:	009f3000 	addseq	r3, pc, r0
    7088:	00000000 	andeq	r0, r0, r0
    708c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    7090:	7e080049 	cdpvc	0, 0, cr0, cr8, cr9, {2}
    7094:	01080049 	tsteq	r8, r9, asr #32
    7098:	497e5100 	ldmdbmi	lr!, {r8, ip, lr}^
    709c:	49800800 	stmibmi	r0, {fp}
    70a0:	00040800 	andeq	r0, r4, r0, lsl #16
    70a4:	9f200071 	svcls	0x00200071
    70a8:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
    70ac:	08004984 	stmdaeq	r0, {r2, r7, r8, fp, lr}
    70b0:	01f30004 	mvnseq	r0, r4
    70b4:	00009f51 	andeq	r9, r0, r1, asr pc
    70b8:	00000000 	andeq	r0, r0, r0
    70bc:	497c0000 	ldmdbmi	ip!, {}^	; <UNPREDICTABLE>
    70c0:	497e0800 	ldmdbmi	lr!, {fp}^
    70c4:	00090800 	andeq	r0, r9, r0, lsl #16
    70c8:	ff0c0071 			; <UNDEFINED> instruction: 0xff0c0071
    70cc:	1a00ffff 	bne	470d0 <_Min_Stack_Size+0x46cd0>
    70d0:	00497e9f 	umaaleq	r7, r9, pc, lr	; <UNPREDICTABLE>
    70d4:	00498008 	subeq	r8, r9, r8
    70d8:	71000a08 	tstvc	r0, r8, lsl #20
    70dc:	ff0c2000 			; <UNDEFINED> instruction: 0xff0c2000
    70e0:	1a00ffff 	bne	470e4 <_Min_Stack_Size+0x46ce4>
    70e4:	0049809f 	umaaleq	r8, r9, pc, r0	; <UNPREDICTABLE>
    70e8:	00498408 	subeq	r8, r9, r8, lsl #8
    70ec:	f3000a08 	vpmax.u8	d0, d0, d8
    70f0:	ff0c5101 			; <UNDEFINED> instruction: 0xff0c5101
    70f4:	1a00ffff 	bne	470f8 <_Min_Stack_Size+0x46cf8>
    70f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    70fc:	00000000 	andeq	r0, r0, r0
    7100:	00498400 	subeq	r8, r9, r0, lsl #8
    7104:	00498808 	subeq	r8, r9, r8, lsl #16
    7108:	50000108 	andpl	r0, r0, r8, lsl #2
    710c:	08004988 	stmdaeq	r0, {r3, r7, r8, fp, lr}
    7110:	080049a0 	stmdaeq	r0, {r5, r7, r8, fp, lr}
    7114:	01f30004 	mvnseq	r0, r4
    7118:	00009f50 	andeq	r9, r0, r0, asr pc
    711c:	00000000 	andeq	r0, r0, r0
    7120:	49840000 	stmibmi	r4, {}	; <UNPREDICTABLE>
    7124:	498e0800 	stmibmi	lr, {fp}
    7128:	00010800 	andeq	r0, r1, r0, lsl #16
    712c:	00498e51 	subeq	r8, r9, r1, asr lr
    7130:	00499408 	subeq	r9, r9, r8, lsl #8
    7134:	71000908 	tstvc	r0, r8, lsl #18
    7138:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    713c:	9f1a00ff 	svcls	0x001a00ff
    7140:	08004994 	stmdaeq	r0, {r2, r4, r7, r8, fp, lr}
    7144:	080049a0 	stmdaeq	r0, {r5, r7, r8, fp, lr}
    7148:	01f3000a 	mvnseq	r0, sl
    714c:	ffff0c51 			; <UNDEFINED> instruction: 0xffff0c51
    7150:	9f1a00ff 	svcls	0x001a00ff
	...
    715c:	08004984 	stmdaeq	r0, {r2, r7, r8, fp, lr}
    7160:	0800499e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, fp, lr}
    7164:	9f300002 	svcls	0x00300002
    7168:	0800499e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, fp, lr}
    716c:	080049a0 	stmdaeq	r0, {r5, r7, r8, fp, lr}
    7170:	00500001 	subseq	r0, r0, r1
    7174:	00000000 	andeq	r0, r0, r0
    7178:	84000000 	strhi	r0, [r0], #-0
    717c:	8e080049 	cdphi	0, 0, cr0, cr8, cr9, {2}
    7180:	02080049 	andeq	r0, r8, #73	; 0x49
    7184:	8e9f3000 	cdphi	0, 9, cr3, cr15, cr0, {0}
    7188:	94080049 	strls	r0, [r8], #-73	; 0x49
    718c:	10080049 	andne	r0, r8, r9, asr #32
    7190:	4c007100 	stfmis	f7, [r0], {-0}
    7194:	401a2446 	andsmi	r2, sl, r6, asr #8
    7198:	0a007325 	beq	23e34 <_Min_Stack_Size+0x23a34>
    719c:	1a1affff 	bne	6c71a0 <_Min_Stack_Size+0x6c6da0>
    71a0:	0049949f 	umaaleq	r9, r9, pc, r4	; <UNPREDICTABLE>
    71a4:	00499808 	subeq	r9, r9, r8, lsl #16
    71a8:	71000c08 	tstvc	r0, r8, lsl #24
    71ac:	73254000 	teqvc	r5, #0
    71b0:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    71b4:	989f1a1a 	ldmls	pc, {r1, r3, r4, r9, fp, ip}	; <UNPREDICTABLE>
    71b8:	a0080049 	andge	r0, r8, r9, asr #32
    71bc:	11080049 	tstne	r8, r9, asr #32
    71c0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    71c4:	1a24464c 	bne	918afc <_Min_Stack_Size+0x9186fc>
    71c8:	00732540 	rsbseq	r2, r3, r0, asr #10
    71cc:	1affff0a 	bne	6dfc <_Min_Stack_Size+0x69fc>
    71d0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    71d4:	00000000 	andeq	r0, r0, r0
    71d8:	49a00000 	stmibmi	r0!, {}	; <UNPREDICTABLE>
    71dc:	49a20800 	stmibmi	r2!, {fp}
    71e0:	00010800 	andeq	r0, r1, r0, lsl #16
    71e4:	0049a251 	subeq	sl, r9, r1, asr r2
    71e8:	0049a408 	subeq	sl, r9, r8, lsl #8
    71ec:	71000408 	tstvc	r0, r8, lsl #8
    71f0:	a49f2000 	ldrge	r2, [pc], #0	; 71f8 <_Min_Stack_Size+0x6df8>
    71f4:	a8080049 	stmdage	r8, {r0, r3, r6}
    71f8:	04080049 	streq	r0, [r8], #-73	; 0x49
    71fc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7200:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7204:	00000000 	andeq	r0, r0, r0
    7208:	0049a000 	subeq	sl, r9, r0
    720c:	0049a208 	subeq	sl, r9, r8, lsl #4
    7210:	71000908 	tstvc	r0, r8, lsl #18
    7214:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    7218:	9f1a00ff 	svcls	0x001a00ff
    721c:	080049a2 	stmdaeq	r0, {r1, r5, r7, r8, fp, lr}
    7220:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
    7224:	0071000a 	rsbseq	r0, r1, sl
    7228:	ffff0c20 			; <UNDEFINED> instruction: 0xffff0c20
    722c:	9f1a00ff 	svcls	0x001a00ff
    7230:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
    7234:	080049a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, lr}
    7238:	01f3000a 	mvnseq	r0, sl
    723c:	ffff0c51 			; <UNDEFINED> instruction: 0xffff0c51
    7240:	9f1a00ff 	svcls	0x001a00ff
	...
    724c:	08004ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, lr}
    7250:	08004bfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, fp, lr}
    7254:	fa510001 	blx	1447260 <_Min_Stack_Size+0x1446e60>
    7258:	0a08004b 	beq	20738c <_Min_Stack_Size+0x206f8c>
    725c:	0408004c 	streq	r0, [r8], #-76	; 0x4c
    7260:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7264:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7268:	00000000 	andeq	r0, r0, r0
    726c:	004ba000 	subeq	sl, fp, r0
    7270:	004ba808 	subeq	sl, fp, r8, lsl #16
    7274:	30000208 	andcc	r0, r0, r8, lsl #4
    7278:	004ba89f 	umaaleq	sl, fp, pc, r8	; <UNPREDICTABLE>
    727c:	004bde08 	subeq	sp, fp, r8, lsl #28
    7280:	5c000108 	stfpls	f0, [r0], {8}
    7284:	08004be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, lr}
    7288:	08004bea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, fp, lr}
    728c:	ea560001 	b	1587298 <_Min_Stack_Size+0x1586e98>
    7290:	fc08004b 	stc2	0, cr0, [r8], {75}	; 0x4b
    7294:	0108004b 	tsteq	r8, fp, asr #32
    7298:	4bfc5500 	blmi	fff1c6a0 <_estack+0xdfeec6a0>
    729c:	4c0a0800 	stcmi	8, cr0, [sl], {-0}
    72a0:	00010800 	andeq	r0, r1, r0, lsl #16
    72a4:	00000051 	andeq	r0, r0, r1, asr r0
    72a8:	00000000 	andeq	r0, r0, r0
    72ac:	004c7000 	subeq	r7, ip, r0
    72b0:	004c7208 	subeq	r7, ip, r8, lsl #4
    72b4:	50000108 	andpl	r0, r0, r8, lsl #2
    72b8:	08004c72 	stmdaeq	r0, {r1, r4, r5, r6, sl, fp, lr}
    72bc:	08004c76 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, fp, lr}
    72c0:	01f30004 	mvnseq	r0, r4
    72c4:	00009f50 	andeq	r9, r0, r0, asr pc
    72c8:	00000000 	andeq	r0, r0, r0
    72cc:	4cb00000 	ldcmi	0, cr0, [r0]
    72d0:	4cb20800 	ldcmi	8, cr0, [r2]
    72d4:	00010800 	andeq	r0, r1, r0, lsl #16
    72d8:	004cb250 	subeq	fp, ip, r0, asr r2
    72dc:	004cb808 	subeq	fp, ip, r8, lsl #16
    72e0:	f3000408 	vshl.u8	d0, d8, d0
    72e4:	009f5001 	addseq	r5, pc, r1
    72e8:	00000000 	andeq	r0, r0, r0
    72ec:	b0000000 	andlt	r0, r0, r0
    72f0:	b208004c 	andlt	r0, r8, #76	; 0x4c
    72f4:	0208004c 	andeq	r0, r8, #76	; 0x4c
    72f8:	b29f3000 	addslt	r3, pc, #0
    72fc:	b608004c 	strlt	r0, [r8], -ip, asr #32
    7300:	0c08004c 	stceq	0, cr0, [r8], {76}	; 0x4c
    7304:	40007000 	andmi	r7, r0, r0
    7308:	301a243f 	andscc	r2, sl, pc, lsr r4
    730c:	1aff082e 	bne	fffc93cc <_estack+0xdff993cc>
    7310:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7314:	00000000 	andeq	r0, r0, r0
    7318:	004cb800 	subeq	fp, ip, r0, lsl #16
    731c:	004cba08 	subeq	fp, ip, r8, lsl #20
    7320:	50000108 	andpl	r0, r0, r8, lsl #2
    7324:	08004cba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, fp, lr}
    7328:	08004cc0 	stmdaeq	r0, {r6, r7, sl, fp, lr}
    732c:	01f30004 	mvnseq	r0, r4
    7330:	00009f50 	andeq	r9, r0, r0, asr pc
    7334:	00000000 	andeq	r0, r0, r0
    7338:	4cb80000 	ldcmi	0, cr0, [r8]
    733c:	4cba0800 	ldcmi	8, cr0, [sl]
    7340:	00020800 	andeq	r0, r2, r0, lsl #16
    7344:	4cba9f30 	ldcmi	15, cr9, [sl], #192	; 0xc0
    7348:	4cbe0800 	ldcmi	8, cr0, [lr]
    734c:	00050800 	andeq	r0, r5, r0, lsl #16
    7350:	1a310070 	bne	c47518 <_Min_Stack_Size+0xc47118>
    7354:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7358:	00000000 	andeq	r0, r0, r0
    735c:	004cc000 	subeq	ip, ip, r0
    7360:	004cc208 	subeq	ip, ip, r8, lsl #4
    7364:	50000108 	andpl	r0, r0, r8, lsl #2
    7368:	08004cc2 	stmdaeq	r0, {r1, r6, r7, sl, fp, lr}
    736c:	08004cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, lr}
    7370:	01f30004 	mvnseq	r0, r4
    7374:	00009f50 	andeq	r9, r0, r0, asr pc
    7378:	00000000 	andeq	r0, r0, r0
    737c:	4cc00000 	stclmi	0, cr0, [r0], {0}
    7380:	4cc20800 	stclmi	8, cr0, [r2], {0}
    7384:	00020800 	andeq	r0, r2, r0, lsl #16
    7388:	4cc29f30 	stclmi	15, cr9, [r2], {48}	; 0x30
    738c:	4cc60800 	stclmi	8, cr0, [r6], {0}
    7390:	00060800 	andeq	r0, r6, r0, lsl #16
    7394:	38080070 	stmdacc	r8, {r4, r5, r6}
    7398:	4cc69f1a 	stclmi	15, cr9, [r6], {26}
    739c:	4cc80800 	stclmi	8, cr0, [r8], {0}
    73a0:	00010800 	andeq	r0, r1, r0, lsl #16
    73a4:	00000050 	andeq	r0, r0, r0, asr r0
    73a8:	00000000 	andeq	r0, r0, r0
    73ac:	004cc800 	subeq	ip, ip, r0, lsl #16
    73b0:	004cea08 	subeq	lr, ip, r8, lsl #20
    73b4:	50000108 	andpl	r0, r0, r8, lsl #2
    73b8:	08004cea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, lr}
    73bc:	08004d08 	stmdaeq	r0, {r3, r8, sl, fp, lr}
    73c0:	01f30004 	mvnseq	r0, r4
    73c4:	00009f50 	andeq	r9, r0, r0, asr pc
    73c8:	00000000 	andeq	r0, r0, r0
    73cc:	4cc80000 	stclmi	0, cr0, [r8], {0}
    73d0:	4cfa0800 	ldclmi	8, cr0, [sl]
    73d4:	00010800 	andeq	r0, r1, r0, lsl #16
    73d8:	004cfa51 	subeq	pc, ip, r1, asr sl	; <UNPREDICTABLE>
    73dc:	004d0808 	subeq	r0, sp, r8, lsl #16
    73e0:	f3000408 	vshl.u8	d0, d8, d0
    73e4:	009f5101 	addseq	r5, pc, r1, lsl #2
    73e8:	00000000 	andeq	r0, r0, r0
    73ec:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    73f0:	f208004c 	vhadd.s8	q0, q4, q6
    73f4:	0208004c 	andeq	r0, r8, #76	; 0x4c
    73f8:	f29f3000 	vaddl.s16	<illegal reg q1.5>, d15, d0
    73fc:	fa08004c 	blx	207534 <_Min_Stack_Size+0x207134>
    7400:	0e08004c 	cdpeq	0, 0, cr0, cr8, cr12, {2}
    7404:	73007100 	movwvc	r7, #256	; 0x100
    7408:	7d0c1a00 	vstrvc	s2, [ip, #-0]
    740c:	1a0f7d0f 	bne	3e6850 <_Min_Stack_Size+0x3e6450>
    7410:	fa9f2e30 	blx	fe7d2cd8 <_estack+0xde7a2cd8>
    7414:	0808004c 	stmdaeq	r8, {r2, r3, r6}
    7418:	0f08004d 	svceq	0x0008004d
    741c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7420:	0c1a0073 	ldceq	0, cr0, [sl], {115}	; 0x73
    7424:	0f7d0f7d 	svceq	0x007d0f7d
    7428:	9f2e301a 	svcls	0x002e301a
	...
    7434:	08004cea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, lr}
    7438:	08004d06 	stmdaeq	r0, {r1, r2, r8, sl, fp, lr}
    743c:	00500001 	subseq	r0, r0, r1
    7440:	00000000 	andeq	r0, r0, r0
    7444:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    7448:	f008004c 			; <UNDEFINED> instruction: 0xf008004c
    744c:	0208004c 	andeq	r0, r8, #76	; 0x4c
    7450:	f09f3000 			; <UNDEFINED> instruction: 0xf09f3000
    7454:	f208004c 	vhadd.s8	q0, q4, q6
    7458:	0108004c 	tsteq	r8, ip, asr #32
    745c:	4cf25300 	ldclmi	3, cr5, [r2]
    7460:	4d080800 	stcmi	8, cr0, [r8, #-0]
    7464:	00090800 	andeq	r0, r9, r0, lsl #16
    7468:	7d0c0073 	stcvc	0, cr0, [ip, #-460]	; 0xfffffe34
    746c:	1a0f7d0f 	bne	3e68b0 <_Min_Stack_Size+0x3e64b0>
    7470:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7474:	00000000 	andeq	r0, r0, r0
    7478:	004d0800 	subeq	r0, sp, r0, lsl #16
    747c:	004d2a08 	subeq	r2, sp, r8, lsl #20
    7480:	50000108 	andpl	r0, r0, r8, lsl #2
    7484:	08004d2a 	stmdaeq	r0, {r1, r3, r5, r8, sl, fp, lr}
    7488:	08004d42 	stmdaeq	r0, {r1, r6, r8, sl, fp, lr}
    748c:	01f30004 	mvnseq	r0, r4
    7490:	00009f50 	andeq	r9, r0, r0, asr pc
    7494:	00000000 	andeq	r0, r0, r0
    7498:	4d080000 	stcmi	0, cr0, [r8, #-0]
    749c:	4d320800 	ldcmi	8, cr0, [r2, #-0]
    74a0:	00010800 	andeq	r0, r1, r0, lsl #16
    74a4:	004d3251 	subeq	r3, sp, r1, asr r2
    74a8:	004d4208 	subeq	r4, sp, r8, lsl #4
    74ac:	f3000408 	vshl.u8	d0, d8, d0
    74b0:	009f5101 	addseq	r5, pc, r1, lsl #2
    74b4:	00000000 	andeq	r0, r0, r0
    74b8:	44000000 	strmi	r0, [r0], #-0
    74bc:	5c08004d 	stcpl	0, cr0, [r8], {77}	; 0x4d
    74c0:	0108004d 	tsteq	r8, sp, asr #32
    74c4:	4d5c5100 	ldfmie	f5, [ip, #-0]
    74c8:	4d620800 	stclmi	8, cr0, [r2, #-0]
    74cc:	00040800 	andeq	r0, r4, r0, lsl #16
    74d0:	9f5101f3 	svcls	0x005101f3
    74d4:	08004d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp, lr}
    74d8:	08004d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, lr}
    74dc:	70510001 	subsvc	r0, r1, r1
    74e0:	7808004d 	stmdavc	r8, {r0, r2, r3, r6}
    74e4:	0408004d 	streq	r0, [r8], #-77	; 0x4d
    74e8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    74ec:	004d789f 	umaaleq	r7, sp, pc, r8	; <UNPREDICTABLE>
    74f0:	004d8408 	subeq	r8, sp, r8, lsl #8
    74f4:	51000108 	tstpl	r0, r8, lsl #2
	...
    7500:	08004d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, lr}
    7504:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
    7508:	c8500001 	ldmdagt	r0, {r0}^
    750c:	d408004d 	strle	r0, [r8], #-77	; 0x4d
    7510:	0408004d 	streq	r0, [r8], #-77	; 0x4d
    7514:	5001f300 	andpl	pc, r1, r0, lsl #6
    7518:	004dd49f 	umaaleq	sp, sp, pc, r4	; <UNPREDICTABLE>
    751c:	004ddc08 	subeq	sp, sp, r8, lsl #24
    7520:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    752c:	08004d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, lr}
    7530:	08004dba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, fp, lr}
    7534:	ba510001 	blt	1447540 <_Min_Stack_Size+0x1447140>
    7538:	d408004d 	strle	r0, [r8], #-77	; 0x4d
    753c:	0408004d 	streq	r0, [r8], #-77	; 0x4d
    7540:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7544:	004dd49f 	umaaleq	sp, sp, pc, r4	; <UNPREDICTABLE>
    7548:	004ddc08 	subeq	sp, sp, r8, lsl #24
    754c:	51000108 	tstpl	r0, r8, lsl #2
	...
    7558:	08004d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, lr}
    755c:	08004dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, lr}
    7560:	9f300002 	svcls	0x00300002
    7564:	08004dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, lr}
    7568:	08004dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, lr}
    756c:	d4500001 	ldrble	r0, [r0], #-1
    7570:	dc08004d 	stcle	0, cr0, [r8], {77}	; 0x4d
    7574:	0208004d 	andeq	r0, r8, #77	; 0x4d
    7578:	009f3000 	addseq	r3, pc, r0
    757c:	00000000 	andeq	r0, r0, r0
    7580:	ac000000 	stcge	0, cr0, [r0], {-0}
    7584:	be08004d 	cdplt	0, 0, cr0, cr8, cr13, {2}
    7588:	0108004d 	tsteq	r8, sp, asr #32
    758c:	4dd45200 	lfmmi	f5, 2, [r4]
    7590:	4ddc0800 	ldclmi	8, cr0, [ip]
    7594:	00010800 	andeq	r0, r1, r0, lsl #16
    7598:	00000052 	andeq	r0, r0, r2, asr r0
    759c:	00000000 	andeq	r0, r0, r0
    75a0:	004d8400 	subeq	r8, sp, r0, lsl #8
    75a4:	004dae08 	subeq	sl, sp, r8, lsl #28
    75a8:	30000208 	andcc	r0, r0, r8, lsl #4
    75ac:	004dae9f 	umaaleq	sl, sp, pc, lr	; <UNPREDICTABLE>
    75b0:	004db808 	subeq	fp, sp, r8, lsl #16
    75b4:	71000708 	tstvc	r0, r8, lsl #14
    75b8:	4e253b00 	vmulmi.f64	d3, d5, d0
    75bc:	4dbe9f1a 	ldcmi	15, cr9, [lr, #104]!	; 0x68
    75c0:	4dc00800 	stclmi	8, cr0, [r0]
    75c4:	00010800 	andeq	r0, r1, r0, lsl #16
    75c8:	004dc052 	subeq	ip, sp, r2, asr r0
    75cc:	004dd408 	subeq	sp, sp, r8, lsl #8
    75d0:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    75d4:	0f7d0c00 	svceq	0x007d0c00
    75d8:	9f1a0f7d 	svcls	0x001a0f7d
    75dc:	08004dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, lr}
    75e0:	08004ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, lr}
    75e4:	9f300002 	svcls	0x00300002
	...
    75f0:	08004d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, lr}
    75f4:	08004db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, lr}
    75f8:	9f300002 	svcls	0x00300002
    75fc:	08004db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, lr}
    7600:	08004dd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl, fp, lr}
    7604:	d4540001 	ldrble	r0, [r4], #-1
    7608:	da08004d 	ble	207744 <_Min_Stack_Size+0x207344>
    760c:	0208004d 	andeq	r0, r8, #77	; 0x4d
    7610:	da9f3000 	ble	fe7d3618 <_estack+0xde7a3618>
    7614:	dc08004d 	stcle	0, cr0, [r8], {77}	; 0x4d
    7618:	0108004d 	tsteq	r8, sp, asr #32
    761c:	00005400 	andeq	r5, r0, r0, lsl #8
    7620:	00000000 	andeq	r0, r0, r0
    7624:	4ddc0000 	ldclmi	0, cr0, [ip]
    7628:	4dfe0800 	ldclmi	8, cr0, [lr]
    762c:	00010800 	andeq	r0, r1, r0, lsl #16
    7630:	004dfe50 	subeq	pc, sp, r0, asr lr	; <UNPREDICTABLE>
    7634:	004e1608 	subeq	r1, lr, r8, lsl #12
    7638:	f3000408 	vshl.u8	d0, d8, d0
    763c:	009f5001 	addseq	r5, pc, r1
    7640:	00000000 	andeq	r0, r0, r0
    7644:	dc000000 	stcle	0, cr0, [r0], {-0}
    7648:	0608004d 	streq	r0, [r8], -sp, asr #32
    764c:	0108004e 	tsteq	r8, lr, asr #32
    7650:	4e065100 	adfmis	f5, f6, f0
    7654:	4e160800 	cdpmi	8, 1, cr0, cr6, cr0, {0}
    7658:	00040800 	andeq	r0, r4, r0, lsl #16
    765c:	9f5101f3 	svcls	0x005101f3
	...
    7668:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
    766c:	08004e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, lr}
    7670:	68500001 	ldmdavs	r0, {r0}^
    7674:	7c08004e 	stcvc	0, cr0, [r8], {78}	; 0x4e
    7678:	0408004e 	streq	r0, [r8], #-78	; 0x4e
    767c:	5001f300 	andpl	pc, r1, r0, lsl #6
    7680:	004e7c9f 	umaaleq	r7, lr, pc, ip	; <UNPREDICTABLE>
    7684:	004e8008 	subeq	r8, lr, r8
    7688:	50000108 	andpl	r0, r0, r8, lsl #2
    768c:	08004e80 	stmdaeq	r0, {r7, r9, sl, fp, lr}
    7690:	08004e94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp, lr}
    7694:	01f30004 	mvnseq	r0, r4
    7698:	4e949f50 	mrcmi	15, 4, r9, cr4, cr0, {2}
    769c:	4e980800 	cdpmi	8, 9, cr0, cr8, cr0, {0}
    76a0:	00010800 	andeq	r0, r1, r0, lsl #16
    76a4:	004e9850 	subeq	r9, lr, r0, asr r8
    76a8:	004eac08 	subeq	sl, lr, r8, lsl #24
    76ac:	f3000408 	vshl.u8	d0, d8, d0
    76b0:	ac9f5001 	ldcge	0, cr5, [pc], {1}
    76b4:	b008004e 	andlt	r0, r8, lr, asr #32
    76b8:	0108004e 	tsteq	r8, lr, asr #32
    76bc:	4eb05000 	cdpmi	0, 11, cr5, cr0, cr0, {0}
    76c0:	4ec40800 	cdpmi	8, 12, cr0, cr4, cr0, {0}
    76c4:	00040800 	andeq	r0, r4, r0, lsl #16
    76c8:	9f5001f3 	svcls	0x005001f3
    76cc:	08004ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, lr}
    76d0:	08004ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, lr}
    76d4:	c8500001 	ldmdagt	r0, {r0}^
    76d8:	dc08004e 	stcle	0, cr0, [r8], {78}	; 0x4e
    76dc:	0408004e 	streq	r0, [r8], #-78	; 0x4e
    76e0:	5001f300 	andpl	pc, r1, r0, lsl #6
    76e4:	004edc9f 	umaaleq	sp, lr, pc, ip	; <UNPREDICTABLE>
    76e8:	004ee008 	subeq	lr, lr, r8
    76ec:	50000108 	andpl	r0, r0, r8, lsl #2
    76f0:	08004ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, lr}
    76f4:	08004ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, lr}
    76f8:	01f30004 	mvnseq	r0, r4
    76fc:	00009f50 	andeq	r9, r0, r0, asr pc
    7700:	00000000 	andeq	r0, r0, r0
    7704:	4ef40000 	cdpmi	0, 15, cr0, cr4, cr0, {0}
    7708:	4f180800 	svcmi	0x00180800
    770c:	00010800 	andeq	r0, r1, r0, lsl #16
    7710:	004f1851 	subeq	r1, pc, r1, asr r8	; <UNPREDICTABLE>
    7714:	004f4608 	subeq	r4, pc, r8, lsl #12
    7718:	f3000408 	vshl.u8	d0, d8, d0
    771c:	009f5101 	addseq	r5, pc, r1, lsl #2
    7720:	00000000 	andeq	r0, r0, r0
    7724:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    7728:	1408004e 	strne	r0, [r8], #-78	; 0x4e
    772c:	0208004f 	andeq	r0, r8, #79	; 0x4f
    7730:	149f3000 	ldrne	r3, [pc], #0	; 7738 <_Min_Stack_Size+0x7338>
    7734:	2e08004f 	cdpcs	0, 0, cr0, cr8, cr15, {2}
    7738:	0108004f 	tsteq	r8, pc, asr #32
    773c:	4f305300 	svcmi	0x00305300
    7740:	4f340800 	svcmi	0x00340800
    7744:	00010800 	andeq	r0, r1, r0, lsl #16
    7748:	00000053 	andeq	r0, r0, r3, asr r0
    774c:	00000000 	andeq	r0, r0, r0
    7750:	004f4800 	subeq	r4, pc, r0, lsl #16
    7754:	00501808 	subseq	r1, r0, r8, lsl #16
    7758:	51000108 	tstpl	r0, r8, lsl #2
    775c:	08005018 	stmdaeq	r0, {r3, r4, ip, lr}
    7760:	08005032 	stmdaeq	r0, {r1, r4, r5, ip, lr}
    7764:	01f30004 	mvnseq	r0, r4
    7768:	50329f51 	eorspl	r9, r2, r1, asr pc
    776c:	50380800 	eorspl	r0, r8, r0, lsl #16
    7770:	00010800 	andeq	r0, r1, r0, lsl #16
    7774:	00000051 	andeq	r0, r0, r1, asr r0
    7778:	00000000 	andeq	r0, r0, r0
    777c:	004f4800 	subeq	r4, pc, r0, lsl #16
    7780:	004f6808 	subeq	r6, pc, r8, lsl #16
    7784:	30000208 	andcc	r0, r0, r8, lsl #4
    7788:	004f689f 	umaaleq	r6, pc, pc, r8	; <UNPREDICTABLE>
    778c:	00502608 	subseq	r2, r0, r8, lsl #12
    7790:	56000108 	strpl	r0, [r0], -r8, lsl #2
    7794:	08005026 	stmdaeq	r0, {r1, r2, r5, ip, lr}
    7798:	08005030 	stmdaeq	r0, {r4, r5, ip, lr}
    779c:	32540001 	subscc	r0, r4, #1
    77a0:	38080050 	stmdacc	r8, {r4, r6}
    77a4:	01080050 	qaddeq	r0, r0, r8
    77a8:	00005600 	andeq	r5, r0, r0, lsl #12
    77ac:	00000000 	andeq	r0, r0, r0
    77b0:	4f480000 	svcmi	0x00480000
    77b4:	50020800 	andpl	r0, r2, r0, lsl #16
    77b8:	00020800 	andeq	r0, r2, r0, lsl #16
    77bc:	50029f32 	andpl	r9, r2, r2, lsr pc
    77c0:	500a0800 	andpl	r0, sl, r0, lsl #16
    77c4:	00010800 	andeq	r0, r1, r0, lsl #16
    77c8:	00503255 	subseq	r3, r0, r5, asr r2
    77cc:	00503808 	subseq	r3, r0, r8, lsl #16
    77d0:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    77d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    77d8:	00000000 	andeq	r0, r0, r0
    77dc:	004f4800 	subeq	r4, pc, r0, lsl #16
    77e0:	004ff808 	subeq	pc, pc, r8, lsl #16
    77e4:	30000208 	andcc	r0, r0, r8, lsl #4
    77e8:	004ff89f 	umaaleq	pc, pc, pc, r8	; <UNPREDICTABLE>
    77ec:	00500208 	subseq	r0, r0, r8, lsl #4
    77f0:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
    77f4:	9f1a3100 	svcls	0x001a3100
    77f8:	08005002 	stmdaeq	r0, {r1, ip, lr}
    77fc:	0800500a 	stmdaeq	r0, {r1, r3, ip, lr}
    7800:	00720005 	rsbseq	r0, r2, r5
    7804:	329f2438 	addscc	r2, pc, #56, 8	; 0x38000000
    7808:	38080050 	stmdacc	r8, {r4, r6}
    780c:	02080050 	andeq	r0, r8, #80	; 0x50
    7810:	009f3000 	addseq	r3, pc, r0
    7814:	00000000 	andeq	r0, r0, r0
    7818:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    781c:	8208004f 	andhi	r0, r8, #79	; 0x4f
    7820:	0208004f 	andeq	r0, r8, #79	; 0x4f
    7824:	329f3100 	addscc	r3, pc, #0, 2
    7828:	38080050 	stmdacc	r8, {r4, r6}
    782c:	02080050 	andeq	r0, r8, #80	; 0x50
    7830:	009f3100 	addseq	r3, pc, r0, lsl #2
    7834:	00000000 	andeq	r0, r0, r0
    7838:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    783c:	f208004f 	vhadd.s8	q0, q4, <illegal reg q7.5>
    7840:	0208004f 	andeq	r0, r8, #79	; 0x4f
    7844:	f29f3000 	vaddl.s16	<illegal reg q1.5>, d15, d0
    7848:	f608004f 			; <UNDEFINED> instruction: 0xf608004f
    784c:	0108004f 	tsteq	r8, pc, asr #32
    7850:	4ff85200 	svcmi	0x00f85200
    7854:	50020800 	andpl	r0, r2, r0, lsl #16
    7858:	00010800 	andeq	r0, r1, r0, lsl #16
    785c:	00503252 	subseq	r3, r0, r2, asr r2
    7860:	00503808 	subseq	r3, r0, r8, lsl #16
    7864:	30000208 	andcc	r0, r0, r8, lsl #4
    7868:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    786c:	00000000 	andeq	r0, r0, r0
    7870:	004f4800 	subeq	r4, pc, r0, lsl #16
    7874:	004fc808 	subeq	ip, pc, r8, lsl #16
    7878:	30000208 	andcc	r0, r0, r8, lsl #4
    787c:	004fc89f 	umaaleq	ip, pc, pc, r8	; <UNPREDICTABLE>
    7880:	004fd008 	subeq	sp, pc, r8
    7884:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    7888:	08005032 	stmdaeq	r0, {r1, r4, r5, ip, lr}
    788c:	08005038 	stmdaeq	r0, {r3, r4, r5, ip, lr}
    7890:	9f300002 	svcls	0x00300002
	...
    789c:	08004f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, lr}
    78a0:	08004fa6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, fp, lr}
    78a4:	9f300002 	svcls	0x00300002
    78a8:	08004fa6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, fp, lr}
    78ac:	08004fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, lr}
    78b0:	00790006 	rsbseq	r0, r9, r6
    78b4:	9f1a3f08 	svcls	0x001a3f08
    78b8:	08004fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, lr}
    78bc:	0800500c 	stmdaeq	r0, {r2, r3, ip, lr}
    78c0:	32590001 	subscc	r0, r9, #1
    78c4:	38080050 	stmdacc	r8, {r4, r6}
    78c8:	02080050 	andeq	r0, r8, #80	; 0x50
    78cc:	009f3000 	addseq	r3, pc, r0
    78d0:	00000000 	andeq	r0, r0, r0
    78d4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    78d8:	9e08004f 	cdpls	0, 0, cr0, cr8, cr15, {2}
    78dc:	0208004f 	andeq	r0, r8, #79	; 0x4f
    78e0:	9e9f3000 	cdpls	0, 9, cr3, cr15, cr0, {0}
    78e4:	b808004f 	stmdalt	r8, {r0, r1, r2, r3, r6}
    78e8:	0908004f 	stmdbeq	r8, {r0, r1, r2, r3, r6}
    78ec:	0a007c00 	beq	268f4 <_Min_Stack_Size+0x264f4>
    78f0:	361a7fc0 	ldrcc	r7, [sl], -r0, asr #31
    78f4:	50329f25 	eorspl	r9, r2, r5, lsr #30
    78f8:	50380800 	eorspl	r0, r8, r0, lsl #16
    78fc:	00020800 	andeq	r0, r2, r0, lsl #16
    7900:	00009f30 	andeq	r9, r0, r0, lsr pc
    7904:	00000000 	andeq	r0, r0, r0
    7908:	4f480000 	svcmi	0x00480000
    790c:	4fa20800 	svcmi	0x00a20800
    7910:	00020800 	andeq	r0, r2, r0, lsl #16
    7914:	4fa29f30 	svcmi	0x00a29f30
    7918:	4fc00800 	svcmi	0x00c00800
    791c:	00090800 	andeq	r0, r9, r0, lsl #16
    7920:	4a4c0077 	bmi	1307b04 <_Min_Stack_Size+0x1307704>
    7924:	254c1a24 	strbcs	r1, [ip, #-2596]	; 0xa24
    7928:	0050329f 			; <UNDEFINED> instruction: 0x0050329f
    792c:	00503808 	subseq	r3, r0, r8, lsl #16
    7930:	30000208 	andcc	r0, r0, r8, lsl #4
    7934:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7938:	00000000 	andeq	r0, r0, r0
    793c:	00509800 	subseq	r9, r0, r0, lsl #16
    7940:	0050aa08 	subseq	sl, r0, r8, lsl #20
    7944:	51000108 	tstpl	r0, r8, lsl #2
    7948:	080050aa 	stmdaeq	r0, {r1, r3, r5, r7, ip, lr}
    794c:	080050ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, ip, lr}
    7950:	01f30004 	mvnseq	r0, r4
    7954:	00009f51 	andeq	r9, r0, r1, asr pc
    7958:	00000000 	andeq	r0, r0, r0
    795c:	51240000 	teqpl	r4, r0
    7960:	51440800 	cmppl	r4, r0, lsl #16
    7964:	00010800 	andeq	r0, r1, r0, lsl #16
    7968:	00514451 	subseq	r4, r1, r1, asr r4
    796c:	00516c08 	subseq	r6, r1, r8, lsl #24
    7970:	f3000408 	vshl.u8	d0, d8, d0
    7974:	009f5101 	addseq	r5, pc, r1, lsl #2
    7978:	00000000 	andeq	r0, r0, r0
    797c:	24000000 	strcs	r0, [r0], #-0
    7980:	46080051 			; <UNDEFINED> instruction: 0x46080051
    7984:	02080051 	andeq	r0, r8, #81	; 0x51
    7988:	469f3000 	ldrmi	r3, [pc], r0
    798c:	48080051 	stmdami	r8, {r0, r4, r6}
    7990:	01080051 	qaddeq	r0, r1, r8
    7994:	51665200 	cmnpl	r6, r0, lsl #4
    7998:	516c0800 	cmnpl	ip, r0, lsl #16
    799c:	00010800 	andeq	r0, r1, r0, lsl #16
    79a0:	00000053 	andeq	r0, r0, r3, asr r0
    79a4:	00000000 	andeq	r0, r0, r0
    79a8:	00512400 	subseq	r2, r1, r0, lsl #8
    79ac:	00516408 	subseq	r6, r1, r8, lsl #8
    79b0:	30000208 	andcc	r0, r0, r8, lsl #4
    79b4:	0051649f 			; <UNDEFINED> instruction: 0x0051649f
    79b8:	00516608 	subseq	r6, r1, r8, lsl #12
    79bc:	53000108 	movwpl	r0, #264	; 0x108
    79c0:	08005166 	stmdaeq	r0, {r1, r2, r5, r6, r8, ip, lr}
    79c4:	0800516c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, lr}
    79c8:	000a001f 	andeq	r0, sl, pc, lsl r0
    79cc:	01f33001 	mvnseq	r3, r1
    79d0:	0a029451 	beq	acb1c <_Min_Stack_Size+0xac71c>
    79d4:	0c1affff 	ldceq	15, cr15, [sl], {255}	; 0xff
    79d8:	fffffdff 			; <UNDEFINED> instruction: 0xfffffdff
    79dc:	4024401a 	eormi	r4, r4, sl, lsl r0
    79e0:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    79e4:	13160001 	tstne	r6, #1
    79e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    79ec:	00000000 	andeq	r0, r0, r0
    79f0:	00516c00 	subseq	r6, r1, r0, lsl #24
    79f4:	00516e08 	subseq	r6, r1, r8, lsl #28
    79f8:	50000108 	andpl	r0, r0, r8, lsl #2
    79fc:	0800516e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, ip, lr}
    7a00:	08005172 	stmdaeq	r0, {r1, r4, r5, r6, r8, ip, lr}
    7a04:	01f30004 	mvnseq	r0, r4
    7a08:	00009f50 	andeq	r9, r0, r0, asr pc
    7a0c:	00000000 	andeq	r0, r0, r0
    7a10:	51a00000 	movpl	r0, r0
    7a14:	51a60800 			; <UNDEFINED> instruction: 0x51a60800
    7a18:	00010800 	andeq	r0, r1, r0, lsl #16
    7a1c:	0051a650 	subseq	sl, r1, r0, asr r6
    7a20:	0051ac08 	subseq	sl, r1, r8, lsl #24
    7a24:	f3000408 	vshl.u8	d0, d8, d0
    7a28:	009f5001 	addseq	r5, pc, r1
    7a2c:	00000000 	andeq	r0, r0, r0
    7a30:	a0000000 	andge	r0, r0, r0
    7a34:	aa080051 	bge	207b80 <_Min_Stack_Size+0x207780>
    7a38:	02080051 	andeq	r0, r8, #81	; 0x51
    7a3c:	aa9f3000 	bge	fe7d3a44 <_estack+0xde7a3a44>
    7a40:	ac080051 	stcge	0, cr0, [r8], {81}	; 0x51
    7a44:	01080051 	qaddeq	r0, r1, r8
    7a48:	00005000 	andeq	r5, r0, r0
    7a4c:	00000000 	andeq	r0, r0, r0
    7a50:	51ac0000 			; <UNDEFINED> instruction: 0x51ac0000
    7a54:	51ae0800 			; <UNDEFINED> instruction: 0x51ae0800
    7a58:	00010800 	andeq	r0, r1, r0, lsl #16
    7a5c:	0051ae50 	subseq	sl, r1, r0, asr lr
    7a60:	0051b208 	subseq	fp, r1, r8, lsl #4
    7a64:	f3000408 	vshl.u8	d0, d8, d0
    7a68:	009f5001 	addseq	r5, pc, r1
    7a6c:	00000000 	andeq	r0, r0, r0
    7a70:	b4000000 	strlt	r0, [r0], #-0
    7a74:	be080051 	mcrlt	0, 0, r0, cr8, cr1, {2}
    7a78:	01080051 	qaddeq	r0, r1, r8
    7a7c:	51be5100 			; <UNDEFINED> instruction: 0x51be5100
    7a80:	51c20800 	bicpl	r0, r2, r0, lsl #16
    7a84:	00040800 	andeq	r0, r4, r0, lsl #16
    7a88:	9f5101f3 	svcls	0x005101f3
    7a8c:	080051c2 	stmdaeq	r0, {r1, r6, r7, r8, ip, lr}
    7a90:	080051c4 	stmdaeq	r0, {r2, r6, r7, r8, ip, lr}
    7a94:	c4510001 	ldrbgt	r0, [r1], #-1
    7a98:	c8080051 	stmdagt	r8, {r0, r4, r6}
    7a9c:	04080051 	streq	r0, [r8], #-81	; 0x51
    7aa0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7aa4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7aa8:	00000000 	andeq	r0, r0, r0
    7aac:	0051c800 	subseq	ip, r1, r0, lsl #16
    7ab0:	0051cc08 	subseq	ip, r1, r8, lsl #24
    7ab4:	51000108 	tstpl	r0, r8, lsl #2
    7ab8:	080051cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, lr}
    7abc:	080051e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, ip, lr}
    7ac0:	01f30004 	mvnseq	r0, r4
    7ac4:	00009f51 	andeq	r9, r0, r1, asr pc
    7ac8:	00000000 	andeq	r0, r0, r0
    7acc:	51c80000 	bicpl	r0, r8, r0
    7ad0:	51cc0800 	bicpl	r0, ip, r0, lsl #16
    7ad4:	00080800 	andeq	r0, r8, r0, lsl #16
    7ad8:	25340071 	ldrcs	r0, [r4, #-113]!	; 0x71
    7adc:	9f1aff08 	svcls	0x001aff08
    7ae0:	080051cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, lr}
    7ae4:	080051e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, ip, lr}
    7ae8:	01f30009 	mvnseq	r0, r9
    7aec:	08253451 	stmdaeq	r5!, {r0, r4, r6, sl, ip, sp}
    7af0:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    7af4:	00000000 	andeq	r0, r0, r0
    7af8:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    7afc:	d4080051 	strle	r0, [r8], #-81	; 0x51
    7b00:	02080051 	andeq	r0, r8, #81	; 0x51
    7b04:	d49f3000 	ldrle	r3, [pc], #0	; 7b0c <_Min_Stack_Size+0x770c>
    7b08:	dc080051 	stcle	0, cr0, [r8], {81}	; 0x51
    7b0c:	01080051 	qaddeq	r0, r1, r8
    7b10:	51e05100 	mvnpl	r5, r0, lsl #2
    7b14:	51e20800 	mvnpl	r0, r0, lsl #16
    7b18:	00010800 	andeq	r0, r1, r0, lsl #16
    7b1c:	00000051 	andeq	r0, r0, r1, asr r0
    7b20:	00000000 	andeq	r0, r0, r0
    7b24:	0051e800 	subseq	lr, r1, r0, lsl #16
    7b28:	0051f208 	subseq	pc, r1, r8, lsl #4
    7b2c:	50000108 	andpl	r0, r0, r8, lsl #2
    7b30:	080051f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, ip, lr}
    7b34:	080051f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, lr}
    7b38:	01f30004 	mvnseq	r0, r4
    7b3c:	00009f50 	andeq	r9, r0, r0, asr pc
    7b40:	00000000 	andeq	r0, r0, r0
    7b44:	51e80000 	mvnpl	r0, r0
    7b48:	51ea0800 	mvnpl	r0, r0, lsl #16
    7b4c:	00020800 	andeq	r0, r2, r0, lsl #16
    7b50:	51ea9f30 	mvnpl	r9, r0, lsr pc
    7b54:	51f40800 	mvnspl	r0, r0, lsl #16
    7b58:	000a0800 	andeq	r0, sl, r0, lsl #16
    7b5c:	00730071 	rsbseq	r0, r3, r1, ror r0
    7b60:	3024401a 	eorcc	r4, r4, sl, lsl r0
    7b64:	00009f2e 	andeq	r9, r0, lr, lsr #30
    7b68:	00000000 	andeq	r0, r0, r0
    7b6c:	51f40000 	mvnspl	r0, r0
    7b70:	51f60800 	mvnspl	r0, r0, lsl #16
    7b74:	00010800 	andeq	r0, r1, r0, lsl #16
    7b78:	0051f651 	subseq	pc, r1, r1, asr r6	; <UNPREDICTABLE>
    7b7c:	0051fc08 	subseq	pc, r1, r8, lsl #24
    7b80:	f3000408 	vshl.u8	d0, d8, d0
    7b84:	009f5101 	addseq	r5, pc, r1, lsl #2
    7b88:	00000000 	andeq	r0, r0, r0
    7b8c:	fc000000 	stc2	0, cr0, [r0], {-0}
    7b90:	02080051 	andeq	r0, r8, #81	; 0x51
    7b94:	01080052 	qaddeq	r0, r2, r8
    7b98:	52025000 	andpl	r5, r2, #0
    7b9c:	52260800 	eorpl	r0, r6, #0, 16
    7ba0:	00040800 	andeq	r0, r4, r0, lsl #16
    7ba4:	9f5001f3 	svcls	0x005001f3
	...
    7bb0:	080051fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip, lr}
    7bb4:	08005216 	stmdaeq	r0, {r1, r2, r4, r9, ip, lr}
    7bb8:	16510001 	ldrbne	r0, [r1], -r1
    7bbc:	26080052 			; <UNDEFINED> instruction: 0x26080052
    7bc0:	04080052 	streq	r0, [r8], #-82	; 0x52
    7bc4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7bc8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7bcc:	00000000 	andeq	r0, r0, r0
    7bd0:	0051fc00 	subseq	pc, r1, r0, lsl #24
    7bd4:	00522008 	subseq	r2, r2, r8
    7bd8:	30000208 	andcc	r0, r0, r8, lsl #4
    7bdc:	0052209f 			; <UNDEFINED> instruction: 0x0052209f
    7be0:	00522608 	subseq	r2, r2, r8, lsl #12
    7be4:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    7bf0:	080051fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip, lr}
    7bf4:	08005216 	stmdaeq	r0, {r1, r2, r4, r9, ip, lr}
    7bf8:	7131000a 	teqvc	r1, sl
    7bfc:	08253400 	stmdaeq	r5!, {sl, ip, sp}
    7c00:	9f241aff 	svcls	0x00241aff
	...
    7c0c:	080051fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip, lr}
    7c10:	08005212 	stmdaeq	r0, {r1, r4, r9, ip, lr}
    7c14:	9f300002 	svcls	0x00300002
    7c18:	08005212 	stmdaeq	r0, {r1, r4, r9, ip, lr}
    7c1c:	08005216 	stmdaeq	r0, {r1, r2, r4, r9, ip, lr}
    7c20:	7131000d 	teqvc	r1, sp
    7c24:	08253400 	stmdaeq	r5!, {sl, ip, sp}
    7c28:	74241aff 	strtvc	r1, [r4], #-2815	; 0xaff
    7c2c:	009f1a00 	addseq	r1, pc, r0, lsl #20
    7c30:	00000000 	andeq	r0, r0, r0
    7c34:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7c38:	2c080052 	stccs	0, cr0, [r8], {82}	; 0x52
    7c3c:	01080052 	qaddeq	r0, r2, r8
    7c40:	522c5100 	eorpl	r5, ip, #0, 2
    7c44:	523a0800 	eorspl	r0, sl, #0, 16
    7c48:	00040800 	andeq	r0, r4, r0, lsl #16
    7c4c:	9f5101f3 	svcls	0x005101f3
	...
    7c58:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
    7c5c:	08005290 	stmdaeq	r0, {r4, r7, r9, ip, lr}
    7c60:	90500001 	subsls	r0, r0, r1
    7c64:	b4080052 	strlt	r0, [r8], #-82	; 0x52
    7c68:	04080052 	streq	r0, [r8], #-82	; 0x52
    7c6c:	5001f300 	andpl	pc, r1, r0, lsl #6
    7c70:	0052b49f 			; <UNDEFINED> instruction: 0x0052b49f
    7c74:	0052cc08 	subseq	ip, r2, r8, lsl #24
    7c78:	50000108 	andpl	r0, r0, r8, lsl #2
    7c7c:	080052cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip, lr}
    7c80:	080052dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip, lr}
    7c84:	01f30004 	mvnseq	r0, r4
    7c88:	00009f50 	andeq	r9, r0, r0, asr pc
    7c8c:	00000000 	andeq	r0, r0, r0
    7c90:	525c0000 	subspl	r0, ip, #0
    7c94:	52860800 	addpl	r0, r6, #0, 16
    7c98:	00060800 	andeq	r0, r6, r0, lsl #16
    7c9c:	013c000c 	teqeq	ip, ip
    7ca0:	52869f40 	addpl	r9, r6, #64, 30	; 0x100
    7ca4:	52900800 	addspl	r0, r0, #0, 16
    7ca8:	000e0800 	andeq	r0, lr, r0, lsl #16
    7cac:	01940470 	orrseq	r0, r4, r0, ror r4
    7cb0:	231aff08 	tstcs	sl, #8, 30
    7cb4:	8084f880 	addhi	pc, r4, r0, lsl #17
    7cb8:	52909f04 	addspl	r9, r0, #4, 30
    7cbc:	52a20800 	adcpl	r0, r2, #0, 16
    7cc0:	00110800 	andseq	r0, r1, r0, lsl #16
    7cc4:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
    7cc8:	08019404 	stmdaeq	r1, {r2, sl, ip, pc}
    7ccc:	80231aff 	strdhi	r1, [r3], -pc	; <UNPREDICTABLE>
    7cd0:	048084f8 	streq	r8, [r0], #1272	; 0x4f8
    7cd4:	0052a29f 			; <UNDEFINED> instruction: 0x0052a29f
    7cd8:	0052b208 	subseq	fp, r2, r8, lsl #4
    7cdc:	75000c08 	strvc	r0, [r0, #-3080]	; 0xc08
    7ce0:	1aff0800 	bne	fffc9ce8 <_estack+0xdff99ce8>
    7ce4:	84f88023 	ldrbthi	r8, [r8], #35	; 0x23
    7ce8:	b29f0480 	addslt	r0, pc, #128, 8	; 0x80000000
    7cec:	b4080052 	strlt	r0, [r8], #-82	; 0x52
    7cf0:	11080052 	qaddne	r0, r2, r8
    7cf4:	5001f300 	andpl	pc, r1, r0, lsl #6
    7cf8:	01940523 	orrseq	r0, r4, r3, lsr #10
    7cfc:	231aff08 	tstcs	sl, #8, 30
    7d00:	8084f880 	addhi	pc, r4, r0, lsl #17
    7d04:	52b49f04 	adcspl	r9, r4, #4, 30
    7d08:	52ca0800 	sbcpl	r0, sl, #0, 16
    7d0c:	000e0800 	andeq	r0, lr, r0, lsl #16
    7d10:	01940470 	orrseq	r0, r4, r0, ror r4
    7d14:	231aff08 	tstcs	sl, #8, 30
    7d18:	8084f880 	addhi	pc, r4, r0, lsl #17
    7d1c:	52ca9f04 	sbcpl	r9, sl, #4, 30
    7d20:	52cc0800 	sbcpl	r0, ip, #0, 16
    7d24:	000c0800 	andeq	r0, ip, r0, lsl #16
    7d28:	ff080073 			; <UNDEFINED> instruction: 0xff080073
    7d2c:	f880231a 			; <UNDEFINED> instruction: 0xf880231a
    7d30:	9f048084 	svcls	0x00048084
    7d34:	080052cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip, lr}
    7d38:	080052dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip, lr}
    7d3c:	01f30011 	mvnseq	r0, r1, lsl r0
    7d40:	94042350 	strls	r2, [r4], #-848	; 0x350
    7d44:	1aff0801 	bne	fffc9d50 <_estack+0xdff99d50>
    7d48:	84f88023 	ldrbthi	r8, [r8], #35	; 0x23
    7d4c:	009f0480 	addseq	r0, pc, r0, lsl #9
    7d50:	00000000 	andeq	r0, r0, r0
    7d54:	ec000000 	stc	0, cr0, [r0], {-0}
    7d58:	f8080052 			; <UNDEFINED> instruction: 0xf8080052
    7d5c:	01080052 	qaddeq	r0, r2, r8
    7d60:	52f85000 	rscspl	r5, r8, #0
    7d64:	52fc0800 	rscspl	r0, ip, #0, 16
    7d68:	00040800 	andeq	r0, r4, r0, lsl #16
    7d6c:	9f5001f3 	svcls	0x005001f3
	...
    7d78:	080052fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip, lr}
    7d7c:	0800530e 	stmdaeq	r0, {r1, r2, r3, r8, r9, ip, lr}
    7d80:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
    7d84:	10080053 	andne	r0, r8, r3, asr r0
    7d88:	04080053 	streq	r0, [r8], #-83	; 0x53
    7d8c:	5001f300 	andpl	pc, r1, r0, lsl #6
    7d90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7d94:	00000000 	andeq	r0, r0, r0
    7d98:	0052fc00 	subseq	pc, r2, r0, lsl #24
    7d9c:	00530608 	subseq	r0, r3, r8, lsl #12
    7da0:	30000208 	andcc	r0, r0, r8, lsl #4
    7da4:	0053069f 			; <UNDEFINED> instruction: 0x0053069f
    7da8:	00530e08 	subseq	r0, r3, r8, lsl #28
    7dac:	70000808 	andvc	r0, r0, r8, lsl #16
    7db0:	1a007300 	bne	249b8 <_Min_Stack_Size+0x245b8>
    7db4:	0e9f2e30 	mrceq	14, 4, r2, cr15, cr0, {1}
    7db8:	10080053 	andne	r0, r8, r3, asr r0
    7dbc:	09080053 	stmdbeq	r8, {r0, r1, r4, r6}
    7dc0:	5001f300 	andpl	pc, r1, r0, lsl #6
    7dc4:	301a0073 	andscc	r0, sl, r3, ror r0
    7dc8:	00009f2e 	andeq	r9, r0, lr, lsr #30
    7dcc:	00000000 	andeq	r0, r0, r0
    7dd0:	531c0000 	tstpl	ip, #0
    7dd4:	532e0800 	teqpl	lr, #0, 16
    7dd8:	00010800 	andeq	r0, r1, r0, lsl #16
    7ddc:	00532e50 	subseq	r2, r3, r0, asr lr
    7de0:	00533008 	subseq	r3, r3, r8
    7de4:	f3000408 	vshl.u8	d0, d8, d0
    7de8:	009f5001 	addseq	r5, pc, r1
    7dec:	00000000 	andeq	r0, r0, r0
    7df0:	1c000000 	stcne	0, cr0, [r0], {-0}
    7df4:	26080053 			; <UNDEFINED> instruction: 0x26080053
    7df8:	02080053 	andeq	r0, r8, #83	; 0x53
    7dfc:	269f3000 	ldrcs	r3, [pc], r0
    7e00:	2e080053 	mcrcs	0, 0, r0, cr8, cr3, {2}
    7e04:	08080053 	stmdaeq	r8, {r0, r1, r4, r6}
    7e08:	73007000 	movwvc	r7, #0
    7e0c:	2e301a00 	vaddcs.f32	s2, s0, s0
    7e10:	00532e9f 			; <UNDEFINED> instruction: 0x00532e9f
    7e14:	00533008 	subseq	r3, r3, r8
    7e18:	f3000908 	vmls.i8	d0, d0, d8
    7e1c:	00735001 	rsbseq	r5, r3, r1
    7e20:	9f2e301a 	svcls	0x002e301a
	...
    7e2c:	08005358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, lr}
    7e30:	080053f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, lr}
    7e34:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
    7e38:	04080053 	streq	r0, [r8], #-83	; 0x53
    7e3c:	04080054 	streq	r0, [r8], #-84	; 0x54
    7e40:	5001f300 	andpl	pc, r1, r0, lsl #6
    7e44:	0054049f 			; <UNDEFINED> instruction: 0x0054049f
    7e48:	00540e08 	subseq	r0, r4, r8, lsl #28
    7e4c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    7e58:	08005358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, lr}
    7e5c:	08005394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip, lr}
    7e60:	9f300002 	svcls	0x00300002
    7e64:	08005394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip, lr}
    7e68:	08005402 	stmdaeq	r0, {r1, sl, ip, lr}
    7e6c:	04560001 	ldrbeq	r0, [r6], #-1
    7e70:	08080054 	stmdaeq	r8, {r2, r4, r6}
    7e74:	02080054 	andeq	r0, r8, #84	; 0x54
    7e78:	089f3000 	ldmeq	pc, {ip, sp}	; <UNPREDICTABLE>
    7e7c:	0e080054 	mcreq	0, 0, r0, cr8, cr4, {2}
    7e80:	01080054 	qaddeq	r0, r4, r8
    7e84:	00005600 	andeq	r5, r0, r0, lsl #12
    7e88:	00000000 	andeq	r0, r0, r0
    7e8c:	53580000 	cmppl	r8, #0
    7e90:	53960800 	orrspl	r0, r6, #0, 16
    7e94:	00020800 	andeq	r0, r2, r0, lsl #16
    7e98:	53969f30 	orrspl	r9, r6, #48, 30	; 0xc0
    7e9c:	54020800 	strpl	r0, [r2], #-2048	; 0x800
    7ea0:	00010800 	andeq	r0, r1, r0, lsl #16
    7ea4:	00540455 	subseq	r0, r4, r5, asr r4
    7ea8:	00540a08 	subseq	r0, r4, r8, lsl #20
    7eac:	30000208 	andcc	r0, r0, r8, lsl #4
    7eb0:	00540a9f 			; <UNDEFINED> instruction: 0x00540a9f
    7eb4:	00540e08 	subseq	r0, r4, r8, lsl #28
    7eb8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    7ec4:	08005358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, lr}
    7ec8:	080053b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, ip, lr}
    7ecc:	9f300002 	svcls	0x00300002
    7ed0:	080053b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, ip, lr}
    7ed4:	08005402 	stmdaeq	r0, {r1, sl, ip, lr}
    7ed8:	04540001 	ldrbeq	r0, [r4], #-1
    7edc:	0c080054 	stceq	0, cr0, [r8], {84}	; 0x54
    7ee0:	02080054 	andeq	r0, r8, #84	; 0x54
    7ee4:	0c9f3000 	ldceq	0, cr3, [pc], {0}
    7ee8:	0e080054 	mcreq	0, 0, r0, cr8, cr4, {2}
    7eec:	01080054 	qaddeq	r0, r4, r8
    7ef0:	00005400 	andeq	r5, r0, r0, lsl #8
    7ef4:	00000000 	andeq	r0, r0, r0
    7ef8:	53580000 	cmppl	r8, #0
    7efc:	53ee0800 	mvnpl	r0, #0, 16
    7f00:	00020800 	andeq	r0, r2, r0, lsl #16
    7f04:	53ee9f30 	mvnpl	r9, #48, 30	; 0xc0
    7f08:	54040800 	strpl	r0, [r4], #-2048	; 0x800
    7f0c:	00050800 	andeq	r0, r5, r0, lsl #16
    7f10:	24400071 	strbcs	r0, [r0], #-113	; 0x71
    7f14:	0054049f 			; <UNDEFINED> instruction: 0x0054049f
    7f18:	00540e08 	subseq	r0, r4, r8, lsl #28
    7f1c:	30000208 	andcc	r0, r0, r8, lsl #4
    7f20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7f24:	00000000 	andeq	r0, r0, r0
    7f28:	00546c00 	subseq	r6, r4, r0, lsl #24
    7f2c:	00549a08 	subseq	r9, r4, r8, lsl #20
    7f30:	30000208 	andcc	r0, r0, r8, lsl #4
    7f34:	00549a9f 			; <UNDEFINED> instruction: 0x00549a9f
    7f38:	0054ba08 	subseq	fp, r4, r8, lsl #20
    7f3c:	70000608 	andvc	r0, r0, r8, lsl #12
    7f40:	2434060c 	ldrtcs	r0, [r4], #-1548	; 0x60c
    7f44:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7f48:	00000000 	andeq	r0, r0, r0
    7f4c:	00546c00 	subseq	r6, r4, r0, lsl #24
    7f50:	00549a08 	subseq	r9, r4, r8, lsl #20
    7f54:	30000208 	andcc	r0, r0, r8, lsl #4
    7f58:	00549a9f 			; <UNDEFINED> instruction: 0x00549a9f
    7f5c:	0054ba08 	subseq	fp, r4, r8, lsl #20
    7f60:	70000608 	andvc	r0, r0, r8, lsl #12
    7f64:	24380610 	ldrtcs	r0, [r8], #-1552	; 0x610
    7f68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7f6c:	00000000 	andeq	r0, r0, r0
    7f70:	00546c00 	subseq	r6, r4, r0, lsl #24
    7f74:	00549a08 	subseq	r9, r4, r8, lsl #20
    7f78:	30000208 	andcc	r0, r0, r8, lsl #4
    7f7c:	00549a9f 			; <UNDEFINED> instruction: 0x00549a9f
    7f80:	0054ba08 	subseq	fp, r4, r8, lsl #20
    7f84:	70000608 	andvc	r0, r0, r8, lsl #12
    7f88:	24400614 	strbcs	r0, [r0], #-1556	; 0x614
    7f8c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7f90:	00000000 	andeq	r0, r0, r0
    7f94:	00546c00 	subseq	r6, r4, r0, lsl #24
    7f98:	00549a08 	subseq	r9, r4, r8, lsl #20
    7f9c:	30000208 	andcc	r0, r0, r8, lsl #4
    7fa0:	00549a9f 			; <UNDEFINED> instruction: 0x00549a9f
    7fa4:	0054ba08 	subseq	fp, r4, r8, lsl #20
    7fa8:	70000608 	andvc	r0, r0, r8, lsl #12
    7fac:	24480618 	strbcs	r0, [r8], #-1560	; 0x618
    7fb0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7fb4:	00000000 	andeq	r0, r0, r0
    7fb8:	00546c00 	subseq	r6, r4, r0, lsl #24
    7fbc:	0054c208 	subseq	ip, r4, r8, lsl #4
    7fc0:	30000208 	andcc	r0, r0, r8, lsl #4
    7fc4:	0054c29f 			; <UNDEFINED> instruction: 0x0054c29f
    7fc8:	0054d608 	subseq	sp, r4, r8, lsl #12
    7fcc:	70000608 	andvc	r0, r0, r8, lsl #12
    7fd0:	24380620 	ldrtcs	r0, [r8], #-1568	; 0x620
    7fd4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7fd8:	00000000 	andeq	r0, r0, r0
    7fdc:	00546c00 	subseq	r6, r4, r0, lsl #24
    7fe0:	0054c208 	subseq	ip, r4, r8, lsl #4
    7fe4:	30000208 	andcc	r0, r0, r8, lsl #4
    7fe8:	0054c29f 			; <UNDEFINED> instruction: 0x0054c29f
    7fec:	0054d608 	subseq	sp, r4, r8, lsl #12
    7ff0:	70000608 	andvc	r0, r0, r8, lsl #12
    7ff4:	24400624 	strbcs	r0, [r0], #-1572	; 0x624
    7ff8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7ffc:	00000000 	andeq	r0, r0, r0
    8000:	0054fc00 	subseq	pc, r4, r0, lsl #24
    8004:	00552a08 	subseq	r2, r5, r8, lsl #20
    8008:	30000208 	andcc	r0, r0, r8, lsl #4
    800c:	00552a9f 			; <UNDEFINED> instruction: 0x00552a9f
    8010:	00554a08 	subseq	r4, r5, r8, lsl #20
    8014:	70000608 	andvc	r0, r0, r8, lsl #12
    8018:	2434060c 	ldrtcs	r0, [r4], #-1548	; 0x60c
    801c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8020:	00000000 	andeq	r0, r0, r0
    8024:	0054fc00 	subseq	pc, r4, r0, lsl #24
    8028:	00552a08 	subseq	r2, r5, r8, lsl #20
    802c:	30000208 	andcc	r0, r0, r8, lsl #4
    8030:	00552a9f 			; <UNDEFINED> instruction: 0x00552a9f
    8034:	00554a08 	subseq	r4, r5, r8, lsl #20
    8038:	70000608 	andvc	r0, r0, r8, lsl #12
    803c:	24380610 	ldrtcs	r0, [r8], #-1552	; 0x610
    8040:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8044:	00000000 	andeq	r0, r0, r0
    8048:	0054fc00 	subseq	pc, r4, r0, lsl #24
    804c:	00552a08 	subseq	r2, r5, r8, lsl #20
    8050:	30000208 	andcc	r0, r0, r8, lsl #4
    8054:	00552a9f 			; <UNDEFINED> instruction: 0x00552a9f
    8058:	00554a08 	subseq	r4, r5, r8, lsl #20
    805c:	70000608 	andvc	r0, r0, r8, lsl #12
    8060:	24400614 	strbcs	r0, [r0], #-1556	; 0x614
    8064:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8068:	00000000 	andeq	r0, r0, r0
    806c:	0054fc00 	subseq	pc, r4, r0, lsl #24
    8070:	00552a08 	subseq	r2, r5, r8, lsl #20
    8074:	30000208 	andcc	r0, r0, r8, lsl #4
    8078:	00552a9f 			; <UNDEFINED> instruction: 0x00552a9f
    807c:	00554a08 	subseq	r4, r5, r8, lsl #20
    8080:	70000608 	andvc	r0, r0, r8, lsl #12
    8084:	24480618 	strbcs	r0, [r8], #-1560	; 0x618
    8088:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    808c:	00000000 	andeq	r0, r0, r0
    8090:	0054fc00 	subseq	pc, r4, r0, lsl #24
    8094:	00555208 	subseq	r5, r5, r8, lsl #4
    8098:	30000208 	andcc	r0, r0, r8, lsl #4
    809c:	0055529f 			; <UNDEFINED> instruction: 0x0055529f
    80a0:	00556608 	subseq	r6, r5, r8, lsl #12
    80a4:	70000608 	andvc	r0, r0, r8, lsl #12
    80a8:	24380620 	ldrtcs	r0, [r8], #-1568	; 0x620
    80ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    80b0:	00000000 	andeq	r0, r0, r0
    80b4:	0054fc00 	subseq	pc, r4, r0, lsl #24
    80b8:	00555208 	subseq	r5, r5, r8, lsl #4
    80bc:	30000208 	andcc	r0, r0, r8, lsl #4
    80c0:	0055529f 			; <UNDEFINED> instruction: 0x0055529f
    80c4:	00556608 	subseq	r6, r5, r8, lsl #12
    80c8:	70000608 	andvc	r0, r0, r8, lsl #12
    80cc:	24400624 	strbcs	r0, [r0], #-1572	; 0x624
    80d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    80d4:	00000000 	andeq	r0, r0, r0
    80d8:	0055c400 	subseq	ip, r5, r0, lsl #8
    80dc:	0055ec08 	subseq	lr, r5, r8, lsl #24
    80e0:	50000108 	andpl	r0, r0, r8, lsl #2
    80e4:	080055ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, lr}
    80e8:	080055f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, lr}
    80ec:	01f30004 	mvnseq	r0, r4
    80f0:	00009f50 	andeq	r9, r0, r0, asr pc
    80f4:	00000000 	andeq	r0, r0, r0
    80f8:	55e20000 	strbpl	r0, [r2, #0]!
    80fc:	55ec0800 	strbpl	r0, [ip, #2048]!	; 0x800
    8100:	00050800 	andeq	r0, r5, r0, lsl #16
    8104:	24380070 	ldrtcs	r0, [r8], #-112	; 0x70
    8108:	0055ec9f 			; <UNDEFINED> instruction: 0x0055ec9f
    810c:	0055f008 	subseq	pc, r5, r8
    8110:	f3000608 	vmax.u8	d0, d0, d8
    8114:	24385001 	ldrtcs	r5, [r8], #-1
    8118:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    811c:	00000000 	andeq	r0, r0, r0
    8120:	0055fc00 	subseq	pc, r5, r0, lsl #24
    8124:	00560c08 	subseq	r0, r6, r8, lsl #24
    8128:	50000108 	andpl	r0, r0, r8, lsl #2
    812c:	0800560c 	stmdaeq	r0, {r2, r3, r9, sl, ip, lr}
    8130:	08005610 	stmdaeq	r0, {r4, r9, sl, ip, lr}
    8134:	01f30004 	mvnseq	r0, r4
    8138:	56109f50 	ssaxpl	r9, r0, r0
    813c:	56120800 	ldrpl	r0, [r2], -r0, lsl #16
    8140:	00010800 	andeq	r0, r1, r0, lsl #16
    8144:	00561250 	subseq	r1, r6, r0, asr r2
    8148:	00561608 	subseq	r1, r6, r8, lsl #12
    814c:	f3000408 	vshl.u8	d0, d8, d0
    8150:	009f5001 	addseq	r5, pc, r1
    8154:	00000000 	andeq	r0, r0, r0
    8158:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    815c:	2a080056 	bcs	2082bc <_Min_Stack_Size+0x207ebc>
    8160:	01080056 	qaddeq	r0, r6, r8
    8164:	562a5000 	strtpl	r5, [sl], -r0
    8168:	562c0800 	strtpl	r0, [ip], -r0, lsl #16
    816c:	00040800 	andeq	r0, r4, r0, lsl #16
    8170:	9f5001f3 	svcls	0x005001f3
	...
    817c:	08005618 	stmdaeq	r0, {r3, r4, r9, sl, ip, lr}
    8180:	08005622 	stmdaeq	r0, {r1, r5, r9, sl, ip, lr}
    8184:	9f300002 	svcls	0x00300002
    8188:	08005622 	stmdaeq	r0, {r1, r5, r9, sl, ip, lr}
    818c:	0800562a 	stmdaeq	r0, {r1, r3, r5, r9, sl, ip, lr}
    8190:	00700008 	rsbseq	r0, r0, r8
    8194:	301a0073 	andscc	r0, sl, r3, ror r0
    8198:	562a9f2e 	strtpl	r9, [sl], -lr, lsr #30
    819c:	562c0800 	strtpl	r0, [ip], -r0, lsl #16
    81a0:	00090800 	andeq	r0, r9, r0, lsl #16
    81a4:	735001f3 	cmpvc	r0, #-1073741764	; 0xc000003c
    81a8:	2e301a00 	vaddcs.f32	s2, s0, s0
    81ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    81b0:	00000000 	andeq	r0, r0, r0
    81b4:	00563800 	subseq	r3, r6, r0, lsl #16
    81b8:	00564c08 	subseq	r4, r6, r8, lsl #24
    81bc:	50000108 	andpl	r0, r0, r8, lsl #2
    81c0:	0800564c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, lr}
    81c4:	08005654 	stmdaeq	r0, {r2, r4, r6, r9, sl, ip, lr}
    81c8:	01f30004 	mvnseq	r0, r4
    81cc:	56549f50 	usaxpl	r9, r4, r0
    81d0:	56560800 	ldrbpl	r0, [r6], -r0, lsl #16
    81d4:	00010800 	andeq	r0, r1, r0, lsl #16
    81d8:	00565650 	subseq	r5, r6, r0, asr r6
    81dc:	00565808 	subseq	r5, r6, r8, lsl #16
    81e0:	f3000408 	vshl.u8	d0, d8, d0
    81e4:	009f5001 	addseq	r5, pc, r1
    81e8:	00000000 	andeq	r0, r0, r0
    81ec:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    81f0:	42080056 	andmi	r0, r8, #86	; 0x56
    81f4:	02080056 	andeq	r0, r8, #86	; 0x56
    81f8:	429f3000 	addsmi	r3, pc, #0
    81fc:	4c080056 	stcmi	0, cr0, [r8], {86}	; 0x56
    8200:	0a080056 	beq	208360 <_Min_Stack_Size+0x207f60>
    8204:	38007000 	stmdacc	r0, {ip, sp, lr}
    8208:	1a007225 	bne	24aa4 <_Min_Stack_Size+0x246a4>
    820c:	4c9f2e30 	ldcmi	14, cr2, [pc], {48}	; 0x30
    8210:	54080056 	strpl	r0, [r8], #-86	; 0x56
    8214:	0b080056 	bleq	208374 <_Min_Stack_Size+0x207f74>
    8218:	5001f300 	andpl	pc, r1, r0, lsl #6
    821c:	00722538 	rsbseq	r2, r2, r8, lsr r5
    8220:	9f2e301a 	svcls	0x002e301a
    8224:	08005654 	stmdaeq	r0, {r2, r4, r6, r9, sl, ip, lr}
    8228:	08005656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip, lr}
    822c:	0070000a 	rsbseq	r0, r0, sl
    8230:	00722538 	rsbseq	r2, r2, r8, lsr r5
    8234:	9f2e301a 	svcls	0x002e301a
    8238:	08005656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip, lr}
    823c:	08005658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, lr}
    8240:	00500001 	subseq	r0, r0, r1
    8244:	00000000 	andeq	r0, r0, r0
    8248:	40000000 	andmi	r0, r0, r0
    824c:	4c080056 	stcmi	0, cr0, [r8], {86}	; 0x56
    8250:	05080056 	streq	r0, [r8, #-86]	; 0x56
    8254:	38007000 	stmdacc	r0, {ip, sp, lr}
    8258:	564c9f25 	strbpl	r9, [ip], -r5, lsr #30
    825c:	56540800 	ldrbpl	r0, [r4], -r0, lsl #16
    8260:	00060800 	andeq	r0, r6, r0, lsl #16
    8264:	385001f3 	ldmdacc	r0, {r0, r1, r4, r5, r6, r7, r8}^
    8268:	56549f25 	ldrbpl	r9, [r4], -r5, lsr #30
    826c:	56560800 	ldrbpl	r0, [r6], -r0, lsl #16
    8270:	00050800 	andeq	r0, r5, r0, lsl #16
    8274:	25380070 	ldrcs	r0, [r8, #-112]!	; 0x70
    8278:	0056569f 			; <UNDEFINED> instruction: 0x0056569f
    827c:	00565808 	subseq	r5, r6, r8, lsl #16
    8280:	f3000608 	vmax.u8	d0, d0, d8
    8284:	25385001 	ldrcs	r5, [r8, #-1]!
    8288:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    828c:	00000000 	andeq	r0, r0, r0
    8290:	00565800 	subseq	r5, r6, r0, lsl #16
    8294:	00566208 	subseq	r6, r6, r8, lsl #4
    8298:	50000108 	andpl	r0, r0, r8, lsl #2
    829c:	08005662 	stmdaeq	r0, {r1, r5, r6, r9, sl, ip, lr}
    82a0:	08005666 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, ip, lr}
    82a4:	00500001 	subseq	r0, r0, r1
    82a8:	00000000 	andeq	r0, r0, r0
    82ac:	84000000 	strhi	r0, [r0], #-0
    82b0:	18080056 	stmdane	r8, {r1, r2, r4, r6}
    82b4:	01080057 	qaddeq	r0, r7, r8
    82b8:	57185000 	ldrpl	r5, [r8, -r0]
    82bc:	57280800 	strpl	r0, [r8, -r0, lsl #16]!
    82c0:	00040800 	andeq	r0, r4, r0, lsl #16
    82c4:	9f5001f3 	svcls	0x005001f3
	...
    82d0:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
    82d4:	0800569c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, lr}
    82d8:	9f300002 	svcls	0x00300002
    82dc:	0800569c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, lr}
    82e0:	080056aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, ip, lr}
    82e4:	10700006 	rsbsne	r0, r0, r6
    82e8:	9f244006 	svcls	0x00244006
	...
    82f4:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
    82f8:	080056b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip, lr}
    82fc:	9f300002 	svcls	0x00300002
    8300:	080056b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip, lr}
    8304:	080056be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip, lr}
    8308:	18700006 	ldmdane	r0!, {r1, r2}^
    830c:	9f244006 	svcls	0x00244006
	...
    8318:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
    831c:	080056c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip, lr}
    8320:	9f300002 	svcls	0x00300002
    8324:	080056c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip, lr}
    8328:	080056d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, ip, lr}
    832c:	20700006 	rsbscs	r0, r0, r6
    8330:	9f244006 	svcls	0x00244006
	...
    833c:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
    8340:	080056d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, lr}
    8344:	9f300002 	svcls	0x00300002
    8348:	080056d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, lr}
    834c:	080056e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, ip, lr}
    8350:	28700006 	ldmdacs	r0!, {r1, r2}^
    8354:	9f244006 	svcls	0x00244006
	...
    8360:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
    8364:	0800570c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, lr}
    8368:	9f300002 	svcls	0x00300002
    836c:	0800570c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, lr}
    8370:	08005726 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, ip, lr}
    8374:	00740005 	rsbseq	r0, r4, r5
    8378:	009f2438 	addseq	r2, pc, r8, lsr r4	; <UNPREDICTABLE>
    837c:	00000000 	andeq	r0, r0, r0
    8380:	84000000 	strhi	r0, [r0], #-0
    8384:	0e080056 	mcreq	0, 0, r0, cr8, cr6, {2}
    8388:	02080057 	andeq	r0, r8, #87	; 0x57
    838c:	0e9f3000 	cdpeq	0, 9, cr3, cr15, cr0, {0}
    8390:	28080057 	stmdacs	r8, {r0, r1, r2, r4, r6}
    8394:	05080057 	streq	r0, [r8, #-87]	; 0x57
    8398:	40007100 	andmi	r7, r0, r0, lsl #2
    839c:	00009f24 	andeq	r9, r0, r4, lsr #30
    83a0:	00000000 	andeq	r0, r0, r0
    83a4:	579e0000 	ldrpl	r0, [lr, r0]
    83a8:	57a00800 	strpl	r0, [r0, r0, lsl #16]!
    83ac:	000b0800 	andeq	r0, fp, r0, lsl #16
    83b0:	25340074 	ldrcs	r0, [r4, #-116]!	; 0x74
    83b4:	939f1a37 	orrsls	r1, pc, #225280	; 0x37000
    83b8:	a0089304 	andge	r9, r8, r4, lsl #6
    83bc:	a2080057 	andge	r0, r8, #87	; 0x57
    83c0:	14080057 	strne	r0, [r8], #-87	; 0x57
    83c4:	34007400 	strcc	r7, [r0], #-1024	; 0x400
    83c8:	9f1a3725 	svcls	0x001a3725
    83cc:	00710493 			; <UNDEFINED> instruction: 0x00710493
    83d0:	1a372538 	bne	dd18b8 <_Min_Stack_Size+0xdd14b8>
    83d4:	9304939f 	movwls	r9, #17311	; 0x439f
    83d8:	0057a204 	subseq	sl, r7, r4, lsl #4
    83dc:	0057a608 	subseq	sl, r7, r8, lsl #12
    83e0:	74001b08 	strvc	r1, [r0], #-2824	; 0xb08
    83e4:	37253400 	strcc	r3, [r5, -r0, lsl #8]!
    83e8:	04939f1a 	ldreq	r9, [r3], #3866	; 0xf1a
    83ec:	25380071 	ldrcs	r0, [r8, #-113]!	; 0x71
    83f0:	939f1a37 	orrsls	r1, pc, #225280	; 0x37000
    83f4:	3c007204 	sfmcc	f7, 4, [r0], {4}
    83f8:	9f1a3725 	svcls	0x001a3725
    83fc:	57a60493 			; <UNDEFINED> instruction: 0x57a60493
    8400:	57aa0800 	strpl	r0, [sl, r0, lsl #16]!
    8404:	00140800 	andseq	r0, r4, r0, lsl #16
    8408:	00710493 			; <UNDEFINED> instruction: 0x00710493
    840c:	1a372538 	bne	dd18f4 <_Min_Stack_Size+0xdd14f4>
    8410:	7204939f 	andvc	r9, r4, #2080374786	; 0x7c000002
    8414:	37253c00 	strcc	r3, [r5, -r0, lsl #24]!
    8418:	04939f1a 	ldreq	r9, [r3], #3866	; 0xf1a
    841c:	080057aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, ip, lr}
    8420:	080057ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, ip, lr}
    8424:	0893000b 	ldmeq	r3, {r0, r1, r3}
    8428:	253c0072 	ldrcs	r0, [ip, #-114]!	; 0x72
    842c:	939f1a37 	orrsls	r1, pc, #225280	; 0x37000
    8430:	00000004 	andeq	r0, r0, r4
    8434:	00000000 	andeq	r0, r0, r0
    8438:	0057e000 	subseq	lr, r7, r0
    843c:	00588008 	subseq	r8, r8, r8
    8440:	51000108 	tstpl	r0, r8, lsl #2
    8444:	08005880 	stmdaeq	r0, {r7, fp, ip, lr}
    8448:	0800589c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, lr}
    844c:	01f30004 	mvnseq	r0, r4
    8450:	00009f51 	andeq	r9, r0, r1, asr pc
    8454:	00000000 	andeq	r0, r0, r0
    8458:	57e00000 	strbpl	r0, [r0, r0]!
    845c:	58800800 	stmpl	r0, {fp}
    8460:	00060800 	andeq	r0, r6, r0, lsl #16
    8464:	40060471 	andmi	r0, r6, r1, ror r4
    8468:	58809f24 	stmpl	r0, {r2, r5, r8, r9, sl, fp, ip, pc}
    846c:	589c0800 	ldmpl	ip, {fp}
    8470:	00090800 	andeq	r0, r9, r0, lsl #16
    8474:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    8478:	24400604 	strbcs	r0, [r0], #-1540	; 0x604
    847c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8480:	00000000 	andeq	r0, r0, r0
    8484:	0057e000 	subseq	lr, r7, r0
    8488:	0057fa08 	subseq	pc, r7, r8, lsl #20
    848c:	30000208 	andcc	r0, r0, r8, lsl #4
    8490:	0057fa9f 			; <UNDEFINED> instruction: 0x0057fa9f
    8494:	00589a08 	subseq	r9, r8, r8, lsl #20
    8498:	7a000508 	bvc	98c0 <_Min_Stack_Size+0x94c0>
    849c:	9f244000 	svcls	0x00244000
    84a0:	0800589a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip, lr}
    84a4:	0800589c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, lr}
    84a8:	01f30009 	mvnseq	r0, r9
    84ac:	060c2351 			; <UNDEFINED> instruction: 0x060c2351
    84b0:	009f2440 	addseq	r2, pc, r0, asr #8
    84b4:	00000000 	andeq	r0, r0, r0
    84b8:	e0000000 	and	r0, r0, r0
    84bc:	fa080057 	blx	208620 <_Min_Stack_Size+0x208220>
    84c0:	02080057 	andeq	r0, r8, #87	; 0x57
    84c4:	fa9f3000 	blx	fe7d44cc <_estack+0xde7a44cc>
    84c8:	34080057 	strcc	r0, [r8], #-87	; 0x57
    84cc:	05080058 	streq	r0, [r8, #-88]	; 0x58
    84d0:	38007c00 	stmdacc	r0, {sl, fp, ip, sp, lr}
    84d4:	58349f24 	ldmdapl	r4!, {r2, r5, r8, r9, sl, fp, ip, pc}
    84d8:	58800800 	stmpl	r0, {fp}
    84dc:	00060800 	andeq	r0, r6, r0, lsl #16
    84e0:	38061c71 	stmdacc	r6, {r0, r4, r5, r6, sl, fp, ip}
    84e4:	58809f24 	stmpl	r0, {r2, r5, r8, r9, sl, fp, ip, pc}
    84e8:	589c0800 	ldmpl	ip, {fp}
    84ec:	00090800 	andeq	r0, r9, r0, lsl #16
    84f0:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    84f4:	2438061c 	ldrtcs	r0, [r8], #-1564	; 0x61c
    84f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    84fc:	00000000 	andeq	r0, r0, r0
    8500:	0057e000 	subseq	lr, r7, r0
    8504:	00583008 	subseq	r3, r8, r8
    8508:	30000208 	andcc	r0, r0, r8, lsl #4
    850c:	0058309f 			; <UNDEFINED> instruction: 0x0058309f
    8510:	00589a08 	subseq	r9, r8, r8, lsl #20
    8514:	58000108 	stmdapl	r0, {r3, r8}
    8518:	0800589a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip, lr}
    851c:	0800589c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, lr}
    8520:	01f30009 	mvnseq	r0, r9
    8524:	06202351 			; <UNDEFINED> instruction: 0x06202351
    8528:	009f2440 	addseq	r2, pc, r0, asr #8
    852c:	00000000 	andeq	r0, r0, r0
    8530:	e0000000 	and	r0, r0, r0
    8534:	30080057 	andcc	r0, r8, r7, asr r0
    8538:	02080058 	andeq	r0, r8, #88	; 0x58
    853c:	309f3000 	addscc	r3, pc, r0
    8540:	42080058 	andmi	r0, r8, #88	; 0x58
    8544:	05080058 	streq	r0, [r8, #-88]	; 0x58
    8548:	48007600 	stmdami	r0, {r9, sl, ip, sp, lr}
    854c:	58429f24 	stmdapl	r2, {r2, r5, r8, r9, sl, fp, ip, pc}^
    8550:	58800800 	stmpl	r0, {fp}
    8554:	00060800 	andeq	r0, r6, r0, lsl #16
    8558:	48062471 	stmdami	r6, {r0, r4, r5, r6, sl, sp}
    855c:	58809f24 	stmpl	r0, {r2, r5, r8, r9, sl, fp, ip, pc}
    8560:	589c0800 	ldmpl	ip, {fp}
    8564:	00090800 	andeq	r0, r9, r0, lsl #16
    8568:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    856c:	24480624 	strbcs	r0, [r8], #-1572	; 0x624
    8570:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8574:	00000000 	andeq	r0, r0, r0
    8578:	0057e000 	subseq	lr, r7, r0
    857c:	00587408 	subseq	r7, r8, r8, lsl #8
    8580:	30000208 	andcc	r0, r0, r8, lsl #4
    8584:	0058749f 			; <UNDEFINED> instruction: 0x0058749f
    8588:	00589a08 	subseq	r9, r8, r8, lsl #20
    858c:	74000508 	strvc	r0, [r0], #-1288	; 0x508
    8590:	9f244000 	svcls	0x00244000
    8594:	0800589a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip, lr}
    8598:	0800589c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, lr}
    859c:	01f30009 	mvnseq	r0, r9
    85a0:	06382351 			; <UNDEFINED> instruction: 0x06382351
    85a4:	009f2440 	addseq	r2, pc, r0, asr #8
    85a8:	00000000 	andeq	r0, r0, r0
    85ac:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    85b0:	f6080058 			; <UNDEFINED> instruction: 0xf6080058
    85b4:	09080058 	stmdbeq	r8, {r3, r4, r6}
    85b8:	40007100 	andmi	r7, r0, r0, lsl #2
    85bc:	04939f25 	ldreq	r9, [r3], #3877	; 0xf25
    85c0:	58f60493 	ldmpl	r6!, {r0, r1, r4, r7, sl}^
    85c4:	58f80800 	ldmpl	r8!, {fp}^
    85c8:	00100800 	andseq	r0, r0, r0, lsl #16
    85cc:	25400071 	strbcs	r0, [r0, #-113]	; 0x71
    85d0:	7204939f 	andvc	r9, r4, #2080374786	; 0x7c000002
    85d4:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    85d8:	04939f1a 	ldreq	r9, [r3], #3866	; 0xf1a
    85dc:	080058f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, ip, lr}
    85e0:	080058fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, ip, lr}
    85e4:	9351000c 	cmpls	r1, #12
    85e8:	0a007204 	beq	24e00 <_Min_Stack_Size+0x24a00>
    85ec:	9f1affff 	svcls	0x001affff
    85f0:	58fa0493 	ldmpl	sl!, {r0, r1, r4, r7, sl}^
    85f4:	59000800 	stmdbpl	r0, {fp}
    85f8:	00050800 	andeq	r0, r5, r0, lsl #16
    85fc:	93049351 	movwls	r9, #17233	; 0x4351
    8600:	00000004 	andeq	r0, r0, r4
    8604:	00000000 	andeq	r0, r0, r0
    8608:	00590800 	subseq	r0, r9, r0, lsl #16
    860c:	00591a08 	subseq	r1, r9, r8, lsl #20
    8610:	50000108 	andpl	r0, r0, r8, lsl #2
    8614:	0800591a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip, lr}
    8618:	0800591c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, lr}
    861c:	01f30004 	mvnseq	r0, r4
    8620:	00009f50 	andeq	r9, r0, r0, asr pc
    8624:	00000000 	andeq	r0, r0, r0
    8628:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
    862c:	591a0800 	ldmdbpl	sl, {fp}
    8630:	00080800 	andeq	r0, r8, r0, lsl #16
    8634:	00730070 	rsbseq	r0, r3, r0, ror r0
    8638:	9f2e301a 	svcls	0x002e301a
    863c:	0800591a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip, lr}
    8640:	0800591c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, lr}
    8644:	01f30009 	mvnseq	r0, r9
    8648:	1a007350 	bne	25390 <_Min_Stack_Size+0x24f90>
    864c:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    8650:	00000000 	andeq	r0, r0, r0
    8654:	1c000000 	stcne	0, cr0, [r0], {-0}
    8658:	28080059 	stmdacs	r8, {r0, r3, r4, r6}
    865c:	01080059 	qaddeq	r0, r9, r8
    8660:	59285100 	stmdbpl	r8!, {r8, ip, lr}
    8664:	59380800 	ldmdbpl	r8!, {fp}
    8668:	00040800 	andeq	r0, r4, r0, lsl #16
    866c:	9f5101f3 	svcls	0x005101f3
    8670:	08005938 	stmdaeq	r0, {r3, r4, r5, r8, fp, ip, lr}
    8674:	08005944 	stmdaeq	r0, {r2, r6, r8, fp, ip, lr}
    8678:	44510001 	ldrbmi	r0, [r1], #-1
    867c:	5e080059 	mcrpl	0, 0, r0, cr8, cr9, {2}
    8680:	04080059 	streq	r0, [r8], #-89	; 0x59
    8684:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8688:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    868c:	00000000 	andeq	r0, r0, r0
    8690:	00591c00 	subseq	r1, r9, r0, lsl #24
    8694:	00592808 	subseq	r2, r9, r8, lsl #16
    8698:	52000108 	andpl	r0, r0, #8, 2
    869c:	08005928 	stmdaeq	r0, {r3, r5, r8, fp, ip, lr}
    86a0:	08005938 	stmdaeq	r0, {r3, r4, r5, r8, fp, ip, lr}
    86a4:	01f30004 	mvnseq	r0, r4
    86a8:	59389f52 	ldmdbpl	r8!, {r1, r4, r6, r8, r9, sl, fp, ip, pc}
    86ac:	593e0800 	ldmdbpl	lr!, {fp}
    86b0:	00010800 	andeq	r0, r1, r0, lsl #16
    86b4:	00593e52 	subseq	r3, r9, r2, asr lr
    86b8:	00595e08 	subseq	r5, r9, r8, lsl #28
    86bc:	f3000408 	vshl.u8	d0, d8, d0
    86c0:	009f5201 	addseq	r5, pc, r1, lsl #4
    86c4:	00000000 	andeq	r0, r0, r0
    86c8:	1c000000 	stcne	0, cr0, [r0], {-0}
    86cc:	28080059 	stmdacs	r8, {r0, r3, r4, r6}
    86d0:	02080059 	andeq	r0, r8, #89	; 0x59
    86d4:	389f3000 	ldmcc	pc, {ip, sp}	; <UNPREDICTABLE>
    86d8:	3c080059 	stccc	0, cr0, [r8], {89}	; 0x59
    86dc:	02080059 	andeq	r0, r8, #89	; 0x59
    86e0:	3c9f3000 	ldccc	0, cr3, [pc], {0}
    86e4:	5e080059 	mcrpl	0, 0, r0, cr8, cr9, {2}
    86e8:	05080059 	streq	r0, [r8, #-89]	; 0x59
    86ec:	38007400 	stmdacc	r0, {sl, ip, sp, lr}
    86f0:	00009f24 	andeq	r9, r0, r4, lsr #30
    86f4:	00000000 	andeq	r0, r0, r0
    86f8:	591c0000 	ldmdbpl	ip, {}	; <UNPREDICTABLE>
    86fc:	59280800 	stmdbpl	r8!, {fp}
    8700:	00020800 	andeq	r0, r2, r0, lsl #16
    8704:	59389f30 	ldmdbpl	r8!, {r4, r5, r8, r9, sl, fp, ip, pc}
    8708:	593e0800 	ldmdbpl	lr!, {fp}
    870c:	00020800 	andeq	r0, r2, r0, lsl #16
    8710:	593e9f30 	ldmdbpl	lr!, {r4, r5, r8, r9, sl, fp, ip, pc}
    8714:	595e0800 	ldmdbpl	lr, {fp}^
    8718:	00050800 	andeq	r0, r5, r0, lsl #16
    871c:	24400072 	strbcs	r0, [r0], #-114	; 0x72
    8720:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8724:	00000000 	andeq	r0, r0, r0
    8728:	00598c00 	subseq	r8, r9, r0, lsl #24
    872c:	0059a208 	subseq	sl, r9, r8, lsl #4
    8730:	71000608 	tstvc	r0, r8, lsl #12
    8734:	24380608 	ldrtcs	r0, [r8], #-1544	; 0x608
    8738:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    873c:	00000000 	andeq	r0, r0, r0
    8740:	00598c00 	subseq	r8, r9, r0, lsl #24
    8744:	0059a208 	subseq	sl, r9, r8, lsl #4
    8748:	71000608 	tstvc	r0, r8, lsl #12
    874c:	2440060c 	strbcs	r0, [r0], #-1548	; 0x60c
    8750:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8754:	00000000 	andeq	r0, r0, r0
    8758:	00598c00 	subseq	r8, r9, r0, lsl #24
    875c:	0059a208 	subseq	sl, r9, r8, lsl #4
    8760:	71000608 	tstvc	r0, r8, lsl #12
    8764:	24480600 	strbcs	r0, [r8], #-1536	; 0x600
    8768:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    876c:	00000000 	andeq	r0, r0, r0
    8770:	0059b400 	subseq	fp, r9, r0, lsl #8
    8774:	0059da08 	subseq	sp, r9, r8, lsl #20
    8778:	51000108 	tstpl	r0, r8, lsl #2
    877c:	080059da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip, lr}
    8780:	08005a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip, lr}
    8784:	01f30004 	mvnseq	r0, r4
    8788:	00009f51 	andeq	r9, r0, r1, asr pc
    878c:	00000000 	andeq	r0, r0, r0
    8790:	59b40000 	ldmibpl	r4!, {}	; <UNPREDICTABLE>
    8794:	59dc0800 	ldmibpl	ip, {fp}^
    8798:	00010800 	andeq	r0, r1, r0, lsl #16
    879c:	0059dc52 	subseq	sp, r9, r2, asr ip
    87a0:	005a2608 	subseq	r2, sl, r8, lsl #12
    87a4:	f3000408 	vshl.u8	d0, d8, d0
    87a8:	009f5201 	addseq	r5, pc, r1, lsl #4
    87ac:	00000000 	andeq	r0, r0, r0
    87b0:	d0000000 	andle	r0, r0, r0
    87b4:	d2080059 	andle	r0, r8, #89	; 0x59
    87b8:	01080059 	qaddeq	r0, r9, r8
    87bc:	59de5400 	ldmibpl	lr, {sl, ip, lr}^
    87c0:	59fa0800 	ldmibpl	sl!, {fp}^
    87c4:	00010800 	andeq	r0, r1, r0, lsl #16
    87c8:	0059fa53 	subseq	pc, r9, r3, asr sl	; <UNPREDICTABLE>
    87cc:	0059fc08 	subseq	pc, r9, r8, lsl #24
    87d0:	51000108 	tstpl	r0, r8, lsl #2
    87d4:	080059fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, lr}
    87d8:	08005a06 	stmdaeq	r0, {r1, r2, r9, fp, ip, lr}
    87dc:	22530001 	subscs	r0, r3, #1
    87e0:	2608005a 			; <UNDEFINED> instruction: 0x2608005a
    87e4:	0108005a 	qaddeq	r0, sl, r8
    87e8:	00005300 	andeq	r5, r0, r0, lsl #6
    87ec:	00000000 	andeq	r0, r0, r0
    87f0:	59f80000 	ldmibpl	r8!, {}^	; <UNPREDICTABLE>
    87f4:	5a0e0800 	bpl	38a7fc <_Min_Stack_Size+0x38a3fc>
    87f8:	00010800 	andeq	r0, r1, r0, lsl #16
    87fc:	00000055 	andeq	r0, r0, r5, asr r0
    8800:	00000000 	andeq	r0, r0, r0
    8804:	0059de00 	subseq	sp, r9, r0, lsl #28
    8808:	005a1608 	subseq	r1, sl, r8, lsl #12
    880c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    8810:	08005a16 	stmdaeq	r0, {r1, r2, r4, r9, fp, ip, lr}
    8814:	08005a20 	stmdaeq	r0, {r5, r9, fp, ip, lr}
    8818:	01750003 	cmneq	r5, r3
    881c:	005a229f 			; <UNDEFINED> instruction: 0x005a229f
    8820:	005a2608 	subseq	r2, sl, r8, lsl #12
    8824:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    8830:	080059fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, fp, ip, lr}
    8834:	08005a00 	stmdaeq	r0, {r9, fp, ip, lr}
    8838:	00710017 	rsbseq	r0, r1, r7, lsl r0
    883c:	1a1fff0a 	bne	80846c <_Min_Stack_Size+0x80806c>
    8840:	25f71c33 	ldrbcs	r1, [r7, #3123]!	; 0xc33
    8844:	25f70075 	ldrbcs	r0, [r7, #117]!	; 0x75
    8848:	7400f71b 	strvc	pc, [r0], #-1819	; 0x71b
    884c:	1c312200 	lfmne	f2, 4, [r1], #-0
    8850:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8854:	00000000 	andeq	r0, r0, r0
    8858:	0059de00 	subseq	sp, r9, r0, lsl #28
    885c:	005a1a08 	subseq	r1, sl, r8, lsl #20
    8860:	52000108 	andpl	r0, r0, #8, 2
    8864:	08005a22 	stmdaeq	r0, {r1, r5, r9, fp, ip, lr}
    8868:	08005a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip, lr}
    886c:	00520001 	subseq	r0, r2, r1
    8870:	00000000 	andeq	r0, r0, r0
    8874:	fc000000 	stc2	0, cr0, [r0], {-0}
    8878:	06080059 			; <UNDEFINED> instruction: 0x06080059
    887c:	0c08005a 	stceq	0, cr0, [r8], {90}	; 0x5a
    8880:	0a007300 	beq	25488 <_Min_Stack_Size+0x25088>
    8884:	721a07ff 	andsvc	r0, sl, #66846720	; 0x3fc0000
    8888:	1c312200 	lfmne	f2, 4, [r1], #-0
    888c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8890:	00000000 	andeq	r0, r0, r0
    8894:	005a3000 	subseq	r3, sl, r0
    8898:	005a6208 	subseq	r6, sl, r8, lsl #4
    889c:	51000108 	tstpl	r0, r8, lsl #2
    88a0:	08005a62 	stmdaeq	r0, {r1, r5, r6, r9, fp, ip, lr}
    88a4:	08005a7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, fp, ip, lr}
    88a8:	01f30004 	mvnseq	r0, r4
    88ac:	5a7e9f51 	bpl	1fb05f8 <_Min_Stack_Size+0x1fb01f8>
    88b0:	5a860800 	bpl	fe18a8b8 <_estack+0xde15a8b8>
    88b4:	00010800 	andeq	r0, r1, r0, lsl #16
    88b8:	00000051 	andeq	r0, r0, r1, asr r0
    88bc:	00000000 	andeq	r0, r0, r0
    88c0:	005a3200 	subseq	r3, sl, r0, lsl #4
    88c4:	005a3c08 	subseq	r3, sl, r8, lsl #24
    88c8:	53000108 	movwpl	r0, #264	; 0x108
    88cc:	08005a4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, fp, ip, lr}
    88d0:	08005a50 	stmdaeq	r0, {r4, r6, r9, fp, ip, lr}
    88d4:	54550001 	ldrbpl	r0, [r5], #-1
    88d8:	5808005a 	stmdapl	r8, {r1, r3, r4, r6}
    88dc:	0108005a 	qaddeq	r0, sl, r8
    88e0:	5a825400 	bpl	fe09d8e8 <_estack+0xde06d8e8>
    88e4:	5a840800 	bpl	fe10a8ec <_estack+0xde0da8ec>
    88e8:	00010800 	andeq	r0, r1, r0, lsl #16
    88ec:	00000053 	andeq	r0, r0, r3, asr r0
    88f0:	00000000 	andeq	r0, r0, r0
    88f4:	005a5400 	subseq	r5, sl, r0, lsl #8
    88f8:	005a6a08 	subseq	r6, sl, r8, lsl #20
    88fc:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    8908:	08005a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, ip, lr}
    890c:	08005a62 	stmdaeq	r0, {r1, r5, r6, r9, fp, ip, lr}
    8910:	00710008 	rsbseq	r0, r1, r8
    8914:	31220075 	teqcc	r2, r5, ror r0
    8918:	5a629f1c 	bpl	18b0590 <_Min_Stack_Size+0x18b0190>
    891c:	5a6a0800 	bpl	1a8a924 <_Min_Stack_Size+0x1a8a524>
    8920:	00090800 	andeq	r0, r9, r0, lsl #16
    8924:	01f30075 	mvnseq	r0, r5, ror r0
    8928:	1c312251 	lfmne	f2, 4, [r1], #-324	; 0xfffffebc
    892c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8930:	00000000 	andeq	r0, r0, r0
    8934:	005a5800 	subseq	r5, sl, r0, lsl #16
    8938:	005a6e08 	subseq	r6, sl, r8, lsl #28
    893c:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    8948:	08005a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip, lr}
    894c:	08005a6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, fp, ip, lr}
    8950:	00720008 	rsbseq	r0, r2, r8
    8954:	31220074 	teqcc	r2, r4, ror r0
    8958:	00009f1c 	andeq	r9, r0, ip, lsl pc
    895c:	00000000 	andeq	r0, r0, r0
    8960:	5a8a0000 	bpl	fe288968 <_estack+0xde258968>
    8964:	5aa00800 	bpl	fe80a96c <_estack+0xde7da96c>
    8968:	00010800 	andeq	r0, r1, r0, lsl #16
    896c:	005aa253 	subseq	sl, sl, r3, asr r2
    8970:	005ac808 	subseq	ip, sl, r8, lsl #16
    8974:	53000108 	movwpl	r0, #264	; 0x108
    8978:	08005ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, lr}
    897c:	08005ade 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, fp, ip, lr}
    8980:	00530001 	subseq	r0, r3, r1
    8984:	00000000 	andeq	r0, r0, r0
    8988:	e0000000 	and	r0, r0, r0
    898c:	f008005a 			; <UNDEFINED> instruction: 0xf008005a
    8990:	0108005a 	qaddeq	r0, sl, r8
    8994:	5af05000 	bpl	ffc1c99c <_estack+0xdfbec99c>
    8998:	5af40800 	bpl	ffd0a9a0 <_estack+0xdfcda9a0>
    899c:	00040800 	andeq	r0, r4, r0, lsl #16
    89a0:	9f5001f3 	svcls	0x005001f3
    89a4:	08005af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, lr}
    89a8:	08005af6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, fp, ip, lr}
    89ac:	f6500001 			; <UNDEFINED> instruction: 0xf6500001
    89b0:	fa08005a 	blx	208b20 <_Min_Stack_Size+0x208720>
    89b4:	0408005a 	streq	r0, [r8], #-90	; 0x5a
    89b8:	5001f300 	andpl	pc, r1, r0, lsl #6
    89bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    89c0:	00000000 	andeq	r0, r0, r0
    89c4:	005afc00 	subseq	pc, sl, r0, lsl #24
    89c8:	005b0e08 	subseq	r0, fp, r8, lsl #28
    89cc:	50000108 	andpl	r0, r0, r8, lsl #2
    89d0:	08005b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, ip, lr}
    89d4:	08005b10 	stmdaeq	r0, {r4, r8, r9, fp, ip, lr}
    89d8:	01f30004 	mvnseq	r0, r4
    89dc:	00009f50 	andeq	r9, r0, r0, asr pc
    89e0:	00000000 	andeq	r0, r0, r0
    89e4:	5afc0000 	bpl	fff089ec <_estack+0xdfed89ec>
    89e8:	5b060800 	blpl	18a9f0 <_Min_Stack_Size+0x18a5f0>
    89ec:	00020800 	andeq	r0, r2, r0, lsl #16
    89f0:	5b069f30 	blpl	1b06b8 <_Min_Stack_Size+0x1b02b8>
    89f4:	5b0e0800 	blpl	38a9fc <_Min_Stack_Size+0x38a5fc>
    89f8:	00080800 	andeq	r0, r8, r0, lsl #16
    89fc:	00730070 	rsbseq	r0, r3, r0, ror r0
    8a00:	9f2e301a 	svcls	0x002e301a
    8a04:	08005b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, ip, lr}
    8a08:	08005b10 	stmdaeq	r0, {r4, r8, r9, fp, ip, lr}
    8a0c:	01f30009 	mvnseq	r0, r9
    8a10:	1a007350 	bne	25758 <_Min_Stack_Size+0x25358>
    8a14:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    8a18:	00000000 	andeq	r0, r0, r0
    8a1c:	1c000000 	stcne	0, cr0, [r0], {-0}
    8a20:	3408005b 	strcc	r0, [r8], #-91	; 0x5b
    8a24:	0108005b 	qaddeq	r0, fp, r8
    8a28:	5b345000 	blpl	d1ca30 <_Min_Stack_Size+0xd1c630>
    8a2c:	5b360800 	blpl	d8aa34 <_Min_Stack_Size+0xd8a634>
    8a30:	00040800 	andeq	r0, r4, r0, lsl #16
    8a34:	9f5001f3 	svcls	0x005001f3
    8a38:	08005b36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, fp, ip, lr}
    8a3c:	08005b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip, lr}
    8a40:	38500001 	ldmdacc	r0, {r0}^
    8a44:	3a08005b 	bcc	208bb8 <_Min_Stack_Size+0x2087b8>
    8a48:	0408005b 	streq	r0, [r8], #-91	; 0x5b
    8a4c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8a50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8a54:	00000000 	andeq	r0, r0, r0
    8a58:	005b1c00 	subseq	r1, fp, r0, lsl #24
    8a5c:	005b2608 	subseq	r2, fp, r8, lsl #12
    8a60:	30000208 	andcc	r0, r0, r8, lsl #4
    8a64:	005b269f 			; <UNDEFINED> instruction: 0x005b269f
    8a68:	005b3408 	subseq	r3, fp, r8, lsl #8
    8a6c:	70000808 	andvc	r0, r0, r8, lsl #16
    8a70:	1a007200 	bne	25278 <_Min_Stack_Size+0x24e78>
    8a74:	349f2e30 	ldrcc	r2, [pc], #3632	; 8a7c <_Min_Stack_Size+0x867c>
    8a78:	3608005b 			; <UNDEFINED> instruction: 0x3608005b
    8a7c:	0908005b 	stmdbeq	r8, {r0, r1, r3, r4, r6}
    8a80:	5001f300 	andpl	pc, r1, r0, lsl #6
    8a84:	301a0072 	andscc	r0, sl, r2, ror r0
    8a88:	5b369f2e 	blpl	db0748 <_Min_Stack_Size+0xdb0348>
    8a8c:	5b380800 	blpl	e0aa94 <_Min_Stack_Size+0xe0a694>
    8a90:	00080800 	andeq	r0, r8, r0, lsl #16
    8a94:	00720070 	rsbseq	r0, r2, r0, ror r0
    8a98:	9f2e301a 	svcls	0x002e301a
    8a9c:	08005b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip, lr}
    8aa0:	08005b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, ip, lr}
    8aa4:	00500001 	subseq	r0, r0, r1
    8aa8:	00000000 	andeq	r0, r0, r0
    8aac:	80000000 	andhi	r0, r0, r0
    8ab0:	6c08005b 	stcvs	0, cr0, [r8], {91}	; 0x5b
    8ab4:	0108005c 	qaddeq	r0, ip, r8
    8ab8:	5c6c5000 	stclpl	0, cr5, [ip], #-0
    8abc:	5c920800 	ldcpl	8, cr0, [r2], {0}
    8ac0:	00040800 	andeq	r0, r4, r0, lsl #16
    8ac4:	9f5001f3 	svcls	0x005001f3
	...
    8ad0:	08005b80 	stmdaeq	r0, {r7, r8, r9, fp, ip, lr}
    8ad4:	08005be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, ip, lr}
    8ad8:	9f300002 	svcls	0x00300002
    8adc:	08005c32 	stmdaeq	r0, {r1, r4, r5, sl, fp, ip, lr}
    8ae0:	08005c40 	stmdaeq	r0, {r6, sl, fp, ip, lr}
    8ae4:	9f300002 	svcls	0x00300002
    8ae8:	08005c40 	stmdaeq	r0, {r6, sl, fp, ip, lr}
    8aec:	08005c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp, ip, lr}
    8af0:	00710009 	rsbseq	r0, r1, r9
    8af4:	bfffff11 	svclt	0x00ffff11
    8af8:	569f1a78 			; <UNDEFINED> instruction: 0x569f1a78
    8afc:	5c08005c 	stcpl	0, cr0, [r8], {92}	; 0x5c
    8b00:	0108005c 	qaddeq	r0, ip, r8
    8b04:	00005100 	andeq	r5, r0, r0, lsl #2
    8b08:	00000000 	andeq	r0, r0, r0
    8b0c:	5cec0000 	stclpl	0, cr0, [ip]
    8b10:	5cee0800 	stclpl	8, cr0, [lr]
    8b14:	00010800 	andeq	r0, r1, r0, lsl #16
    8b18:	005cee50 	subseq	lr, ip, r0, asr lr
    8b1c:	005d0e08 	subseq	r0, sp, r8, lsl #28
    8b20:	f3000408 	vshl.u8	d0, d8, d0
    8b24:	009f5001 	addseq	r5, pc, r1
    8b28:	00000000 	andeq	r0, r0, r0
    8b2c:	10000000 	andne	r0, r0, r0
    8b30:	2208005d 	andcs	r0, r8, #93	; 0x5d
    8b34:	0108005d 	qaddeq	r0, sp, r8
    8b38:	5d225000 	stcpl	0, cr5, [r2, #-0]
    8b3c:	5d2e0800 	stcpl	8, cr0, [lr, #-0]
    8b40:	00040800 	andeq	r0, r4, r0, lsl #16
    8b44:	9f5001f3 	svcls	0x005001f3
	...
    8b50:	08005d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, lr}
    8b54:	08005d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp, ip, lr}
    8b58:	62500001 	subsvs	r0, r0, #1
    8b5c:	a808005d 	stmdage	r8, {r0, r2, r3, r4, r6}
    8b60:	0408005d 	streq	r0, [r8], #-93	; 0x5d
    8b64:	5001f300 	andpl	pc, r1, r0, lsl #6
    8b68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8b6c:	00000000 	andeq	r0, r0, r0
    8b70:	005d3000 	subseq	r3, sp, r0
    8b74:	005d9808 	subseq	r9, sp, r8, lsl #16
    8b78:	30000208 	andcc	r0, r0, r8, lsl #4
    8b7c:	005d989f 			; <UNDEFINED> instruction: 0x005d989f
    8b80:	005da608 	subseq	sl, sp, r8, lsl #12
    8b84:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    8b90:	08005d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, lr}
    8b94:	08005d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip, lr}
    8b98:	9f300002 	svcls	0x00300002
    8b9c:	08005d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip, lr}
    8ba0:	08005da6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, fp, ip, lr}
    8ba4:	00570001 	subseq	r0, r7, r1
    8ba8:	00000000 	andeq	r0, r0, r0
    8bac:	30000000 	andcc	r0, r0, r0
    8bb0:	9c08005d 	stcls	0, cr0, [r8], {93}	; 0x5d
    8bb4:	0208005d 	andeq	r0, r8, #93	; 0x5d
    8bb8:	9c9f3000 	ldcls	0, cr3, [pc], {0}
    8bbc:	a608005d 			; <UNDEFINED> instruction: 0xa608005d
    8bc0:	0108005d 	qaddeq	r0, sp, r8
    8bc4:	5da65500 	cfstr32pl	mvfx5, [r6]
    8bc8:	5da80800 	stcpl	8, cr0, [r8]
    8bcc:	00020800 	andeq	r0, r2, r0, lsl #16
    8bd0:	00000c73 	andeq	r0, r0, r3, ror ip
    8bd4:	00000000 	andeq	r0, r0, r0
    8bd8:	5dd80000 	ldclpl	0, cr0, [r8]
    8bdc:	5e020800 	cdppl	8, 0, cr0, cr2, cr0, {0}
    8be0:	00010800 	andeq	r0, r1, r0, lsl #16
    8be4:	005e0251 	subseq	r0, lr, r1, asr r2
    8be8:	005e0c08 	subseq	r0, lr, r8, lsl #24
    8bec:	f3000408 	vshl.u8	d0, d8, d0
    8bf0:	009f5101 	addseq	r5, pc, r1, lsl #2
    8bf4:	00000000 	andeq	r0, r0, r0
    8bf8:	0c000000 	stceq	0, cr0, [r0], {-0}
    8bfc:	3608005e 			; <UNDEFINED> instruction: 0x3608005e
    8c00:	0108005e 	qaddeq	r0, lr, r8
    8c04:	5e365100 	rsfpls	f5, f6, f0
    8c08:	5e400800 	cdppl	8, 4, cr0, cr0, cr0, {0}
    8c0c:	00040800 	andeq	r0, r4, r0, lsl #16
    8c10:	9f5101f3 	svcls	0x005101f3
	...
    8c1c:	08005e40 	stmdaeq	r0, {r6, r9, sl, fp, ip, lr}
    8c20:	08005e4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, fp, ip, lr}
    8c24:	4e500001 	cdpmi	0, 5, cr0, cr0, cr1, {0}
    8c28:	5008005e 	andpl	r0, r8, lr, asr r0
    8c2c:	0408005e 	streq	r0, [r8], #-94	; 0x5e
    8c30:	5001f300 	andpl	pc, r1, r0, lsl #6
    8c34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8c38:	00000000 	andeq	r0, r0, r0
    8c3c:	005e4000 	subseq	r4, lr, r0
    8c40:	005e4e08 	subseq	r4, lr, r8, lsl #28
    8c44:	30000208 	andcc	r0, r0, r8, lsl #4
    8c48:	005e4e9f 			; <UNDEFINED> instruction: 0x005e4e9f
    8c4c:	005e5008 	subseq	r5, lr, r8
    8c50:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    8c5c:	08005e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, lr}
    8c60:	08005e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, lr}
    8c64:	80500001 	subshi	r0, r0, r1
    8c68:	d008005e 	andle	r0, r8, lr, asr r0
    8c6c:	0408005e 	streq	r0, [r8], #-94	; 0x5e
    8c70:	5001f300 	andpl	pc, r1, r0, lsl #6
    8c74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8c78:	00000000 	andeq	r0, r0, r0
    8c7c:	005f2800 	subseq	r2, pc, r0, lsl #16
    8c80:	005f2c08 	subseq	r2, pc, r8, lsl #24
    8c84:	50000108 	andpl	r0, r0, r8, lsl #2
    8c88:	08005f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip, lr}
    8c8c:	08005f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}
    8c90:	01f30004 	mvnseq	r0, r4
    8c94:	00009f50 	andeq	r9, r0, r0, asr pc
    8c98:	00000000 	andeq	r0, r0, r0
    8c9c:	5f540000 	svcpl	0x00540000
    8ca0:	5f9a0800 	svcpl	0x009a0800
    8ca4:	00010800 	andeq	r0, r1, r0, lsl #16
    8ca8:	005f9a50 	subseq	r9, pc, r0, asr sl	; <UNPREDICTABLE>
    8cac:	005fca08 	subseq	ip, pc, r8, lsl #20
    8cb0:	f3000408 	vshl.u8	d0, d8, d0
    8cb4:	ca9f5001 	bgt	fe7dccc0 <_estack+0xde7accc0>
    8cb8:	ee08005f 	mcr	0, 0, r0, cr8, cr15, {2}
    8cbc:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8cc0:	5fee5000 	svcpl	0x00ee5000
    8cc4:	60280800 	eorvs	r0, r8, r0, lsl #16
    8cc8:	00040800 	andeq	r0, r4, r0, lsl #16
    8ccc:	9f5001f3 	svcls	0x005001f3
	...
    8cd8:	08005f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}
    8cdc:	08005f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip, lr}
    8ce0:	9f300002 	svcls	0x00300002
    8ce4:	08005f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip, lr}
    8ce8:	08005f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, ip, lr}
    8cec:	96540001 	ldrbls	r0, [r4], -r1
    8cf0:	c408005f 	strgt	r0, [r8], #-95	; 0x5f
    8cf4:	0208005f 	andeq	r0, r8, #95	; 0x5f
    8cf8:	ca007200 	bgt	25500 <_Min_Stack_Size+0x25100>
    8cfc:	2608005f 			; <UNDEFINED> instruction: 0x2608005f
    8d00:	01080060 	tsteq	r8, r0, rrx
    8d04:	00005400 	andeq	r5, r0, r0, lsl #8
    8d08:	00000000 	andeq	r0, r0, r0
    8d0c:	5f540000 	svcpl	0x00540000
    8d10:	5fc20800 	svcpl	0x00c20800
    8d14:	00020800 	andeq	r0, r2, r0, lsl #16
    8d18:	5fc29f30 	svcpl	0x00c29f30
    8d1c:	5fca0800 	svcpl	0x00ca0800
    8d20:	00010800 	andeq	r0, r1, r0, lsl #16
    8d24:	005fca53 	subseq	ip, pc, r3, asr sl	; <UNPREDICTABLE>
    8d28:	00601808 	rsbeq	r1, r0, r8, lsl #16
    8d2c:	30000208 	andcc	r0, r0, r8, lsl #4
    8d30:	0060189f 	mlseq	r0, pc, r8, r1	; <UNPREDICTABLE>
    8d34:	00602808 	rsbeq	r2, r0, r8, lsl #16
    8d38:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    8d44:	08005f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}
    8d48:	08005fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, ip, lr}
    8d4c:	9f300002 	svcls	0x00300002
    8d50:	08005fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, ip, lr}
    8d54:	08005fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8d58:	ec550001 	mrrc	0, 0, r0, r5, cr1
    8d5c:	1c08005f 	stcne	0, cr0, [r8], {95}	; 0x5f
    8d60:	02080060 	andeq	r0, r8, #96	; 0x60
    8d64:	00007100 	andeq	r7, r0, r0, lsl #2
    8d68:	00000000 	andeq	r0, r0, r0
    8d6c:	54000000 	strpl	r0, [r0], #-0
    8d70:	1808005f 	stmdane	r8, {r0, r1, r2, r3, r4, r6}
    8d74:	02080060 	andeq	r0, r8, #96	; 0x60
    8d78:	189f3000 	ldmne	pc, {ip, sp}	; <UNPREDICTABLE>
    8d7c:	26080060 	strcs	r0, [r8], -r0, rrx
    8d80:	01080060 	tsteq	r8, r0, rrx
    8d84:	00005500 	andeq	r5, r0, r0, lsl #10
    8d88:	00000000 	andeq	r0, r0, r0
    8d8c:	60600000 	rsbvs	r0, r0, r0
    8d90:	607e0800 	rsbsvs	r0, lr, r0, lsl #16
    8d94:	00020800 	andeq	r0, r2, r0, lsl #16
    8d98:	607e9f30 	rsbsvs	r9, lr, r0, lsr pc
    8d9c:	60840800 	addvs	r0, r4, r0, lsl #16
    8da0:	00010800 	andeq	r0, r1, r0, lsl #16
    8da4:	00000052 	andeq	r0, r0, r2, asr r0
    8da8:	00000000 	andeq	r0, r0, r0
    8dac:	00608400 	rsbeq	r8, r0, r0, lsl #8
    8db0:	00609008 	rsbeq	r9, r0, r8
    8db4:	50000108 	andpl	r0, r0, r8, lsl #2
    8db8:	08006090 	stmdaeq	r0, {r4, r7, sp, lr}
    8dbc:	08006098 	stmdaeq	r0, {r3, r4, r7, sp, lr}
    8dc0:	01f30004 	mvnseq	r0, r4
    8dc4:	60989f50 	addsvs	r9, r8, r0, asr pc
    8dc8:	609a0800 	addsvs	r0, sl, r0, lsl #16
    8dcc:	00010800 	andeq	r0, r1, r0, lsl #16
    8dd0:	00609a50 	rsbeq	r9, r0, r0, asr sl
    8dd4:	0060a008 	rsbeq	sl, r0, r8
    8dd8:	f3000408 	vshl.u8	d0, d8, d0
    8ddc:	009f5001 	addseq	r5, pc, r1
    8de0:	00000000 	andeq	r0, r0, r0
    8de4:	84000000 	strhi	r0, [r0], #-0
    8de8:	96080060 	strls	r0, [r8], -r0, rrx
    8dec:	02080060 	andeq	r0, r8, #96	; 0x60
    8df0:	969f3000 	ldrls	r3, [pc], r0
    8df4:	98080060 	stmdals	r8, {r5, r6}
    8df8:	01080060 	tsteq	r8, r0, rrx
    8dfc:	60985000 	addsvs	r5, r8, r0
    8e00:	609e0800 	addsvs	r0, lr, r0, lsl #16
    8e04:	00020800 	andeq	r0, r2, r0, lsl #16
    8e08:	609e9f30 	addsvs	r9, lr, r0, lsr pc
    8e0c:	60a00800 	adcvs	r0, r0, r0, lsl #16
    8e10:	00010800 	andeq	r0, r1, r0, lsl #16
    8e14:	00000050 	andeq	r0, r0, r0, asr r0
    8e18:	00000000 	andeq	r0, r0, r0
    8e1c:	0060a000 	rsbeq	sl, r0, r0
    8e20:	0060ae08 	rsbeq	sl, r0, r8, lsl #28
    8e24:	50000108 	andpl	r0, r0, r8, lsl #2
    8e28:	080060ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sp, lr}
    8e2c:	080060b2 	stmdaeq	r0, {r1, r4, r5, r7, sp, lr}
    8e30:	01f30004 	mvnseq	r0, r4
    8e34:	00009f50 	andeq	r9, r0, r0, asr pc
    8e38:	00000000 	andeq	r0, r0, r0
    8e3c:	60b40000 	adcsvs	r0, r4, r0
    8e40:	60c20800 	sbcvs	r0, r2, r0, lsl #16
    8e44:	00010800 	andeq	r0, r1, r0, lsl #16
    8e48:	0060c250 	rsbeq	ip, r0, r0, asr r2
    8e4c:	0060c608 	rsbeq	ip, r0, r8, lsl #12
    8e50:	f3000408 	vshl.u8	d0, d8, d0
    8e54:	009f5001 	addseq	r5, pc, r1
    8e58:	00000000 	andeq	r0, r0, r0
    8e5c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    8e60:	ca080060 	bgt	208fe8 <_Min_Stack_Size+0x208be8>
    8e64:	01080060 	tsteq	r8, r0, rrx
    8e68:	60ca5000 	sbcvs	r5, sl, r0
    8e6c:	60ee0800 	rscvs	r0, lr, r0, lsl #16
    8e70:	00040800 	andeq	r0, r4, r0, lsl #16
    8e74:	9f5001f3 	svcls	0x005001f3
	...
    8e80:	080060f0 	stmdaeq	r0, {r4, r5, r6, r7, sp, lr}
    8e84:	08006118 	stmdaeq	r0, {r3, r4, r8, sp, lr}
    8e88:	18510001 	ldmdane	r1, {r0}^
    8e8c:	22080061 	andcs	r0, r8, #97	; 0x61
    8e90:	04080061 	streq	r0, [r8], #-97	; 0x61
    8e94:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8e98:	0061229f 	mlseq	r1, pc, r2, r2	; <UNPREDICTABLE>
    8e9c:	00614a08 	rsbeq	r4, r1, r8, lsl #20
    8ea0:	51000108 	tstpl	r0, r8, lsl #2
    8ea4:	0800614a 	stmdaeq	r0, {r1, r3, r6, r8, sp, lr}
    8ea8:	08006156 	stmdaeq	r0, {r1, r2, r4, r6, r8, sp, lr}
    8eac:	01f30004 	mvnseq	r0, r4
    8eb0:	61569f51 	cmpvs	r6, r1, asr pc
    8eb4:	61620800 	cmnvs	r2, r0, lsl #16
    8eb8:	00010800 	andeq	r0, r1, r0, lsl #16
    8ebc:	00616251 	rsbeq	r6, r1, r1, asr r2
    8ec0:	00616608 	rsbeq	r6, r1, r8, lsl #12
    8ec4:	f3000408 	vshl.u8	d0, d8, d0
    8ec8:	669f5101 	ldrvs	r5, [pc], r1, lsl #2
    8ecc:	70080061 	andvc	r0, r8, r1, rrx
    8ed0:	01080061 	tsteq	r8, r1, rrx
    8ed4:	61705100 	cmnvs	r0, r0, lsl #2
    8ed8:	61740800 	cmnvs	r4, r0, lsl #16
    8edc:	00040800 	andeq	r0, r4, r0, lsl #16
    8ee0:	9f5101f3 	svcls	0x005101f3
    8ee4:	08006174 	stmdaeq	r0, {r2, r4, r5, r6, r8, sp, lr}
    8ee8:	0800617e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sp, lr}
    8eec:	7e510001 	cdpvc	0, 5, cr0, cr1, cr1, {0}
    8ef0:	82080061 	andhi	r0, r8, #97	; 0x61
    8ef4:	04080061 	streq	r0, [r8], #-97	; 0x61
    8ef8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8efc:	0061829f 	mlseq	r1, pc, r2, r8	; <UNPREDICTABLE>
    8f00:	00618e08 	rsbeq	r8, r1, r8, lsl #28
    8f04:	51000108 	tstpl	r0, r8, lsl #2
    8f08:	0800618e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sp, lr}
    8f0c:	08006192 	stmdaeq	r0, {r1, r4, r7, r8, sp, lr}
    8f10:	01f30004 	mvnseq	r0, r4
    8f14:	00009f51 	andeq	r9, r0, r1, asr pc
    8f18:	00000000 	andeq	r0, r0, r0
    8f1c:	60f00000 	rscsvs	r0, r0, r0
    8f20:	61140800 	tstvs	r4, r0, lsl #16
    8f24:	00010800 	andeq	r0, r1, r0, lsl #16
    8f28:	00611452 	rsbeq	r1, r1, r2, asr r4
    8f2c:	00612208 	rsbeq	r2, r1, r8, lsl #4
    8f30:	f3000408 	vshl.u8	d0, d8, d0
    8f34:	229f5201 	addscs	r5, pc, #268435456	; 0x10000000
    8f38:	44080061 	strmi	r0, [r8], #-97	; 0x61
    8f3c:	01080061 	tsteq	r8, r1, rrx
    8f40:	61445200 	mrsvs	r5, (UNDEF: 100)
    8f44:	61560800 	cmpvs	r6, r0, lsl #16
    8f48:	00040800 	andeq	r0, r4, r0, lsl #16
    8f4c:	9f5201f3 	svcls	0x005201f3
    8f50:	08006156 	stmdaeq	r0, {r1, r2, r4, r6, r8, sp, lr}
    8f54:	0800615e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sp, lr}
    8f58:	5e520001 	cdppl	0, 5, cr0, cr2, cr1, {0}
    8f5c:	66080061 	strvs	r0, [r8], -r1, rrx
    8f60:	04080061 	streq	r0, [r8], #-97	; 0x61
    8f64:	5201f300 	andpl	pc, r1, #0, 6
    8f68:	0061669f 	mlseq	r1, pc, r6, r6	; <UNPREDICTABLE>
    8f6c:	00616e08 	rsbeq	r6, r1, r8, lsl #28
    8f70:	52000108 	andpl	r0, r0, #8, 2
    8f74:	0800616e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sp, lr}
    8f78:	08006174 	stmdaeq	r0, {r2, r4, r5, r6, r8, sp, lr}
    8f7c:	01f30004 	mvnseq	r0, r4
    8f80:	61749f52 	cmnvs	r4, r2, asr pc
    8f84:	617c0800 	cmnvs	ip, r0, lsl #16
    8f88:	00010800 	andeq	r0, r1, r0, lsl #16
    8f8c:	00617c52 	rsbeq	r7, r1, r2, asr ip
    8f90:	00618208 	rsbeq	r8, r1, r8, lsl #4
    8f94:	f3000408 	vshl.u8	d0, d8, d0
    8f98:	829f5201 	addshi	r5, pc, #268435456	; 0x10000000
    8f9c:	8a080061 	bhi	209128 <_Min_Stack_Size+0x208d28>
    8fa0:	01080061 	tsteq	r8, r1, rrx
    8fa4:	618a5200 	orrvs	r5, sl, r0, lsl #4
    8fa8:	61920800 	orrsvs	r0, r2, r0, lsl #16
    8fac:	00040800 	andeq	r0, r4, r0, lsl #16
    8fb0:	9f5201f3 	svcls	0x005201f3
	...
    8fbc:	08006194 	stmdaeq	r0, {r2, r4, r7, r8, sp, lr}
    8fc0:	080061b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sp, lr}
    8fc4:	b6500001 	ldrblt	r0, [r0], -r1
    8fc8:	c2080061 	andgt	r0, r8, #97	; 0x61
    8fcc:	04080061 	streq	r0, [r8], #-97	; 0x61
    8fd0:	5001f300 	andpl	pc, r1, r0, lsl #6
    8fd4:	0061c29f 	mlseq	r1, pc, r2, ip	; <UNPREDICTABLE>
    8fd8:	0061ca08 	rsbeq	ip, r1, r8, lsl #20
    8fdc:	50000108 	andpl	r0, r0, r8, lsl #2
    8fe0:	080061ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sp, lr}
    8fe4:	080061cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp, lr}
    8fe8:	01f30004 	mvnseq	r0, r4
    8fec:	61cc9f50 	bicvs	r9, ip, r0, asr pc
    8ff0:	61d40800 	bicsvs	r0, r4, r0, lsl #16
    8ff4:	00010800 	andeq	r0, r1, r0, lsl #16
    8ff8:	0061d450 	rsbeq	sp, r1, r0, asr r4
    8ffc:	0061d608 	rsbeq	sp, r1, r8, lsl #12
    9000:	f3000408 	vshl.u8	d0, d8, d0
    9004:	009f5001 	addseq	r5, pc, r1
    9008:	00000000 	andeq	r0, r0, r0
    900c:	94000000 	strls	r0, [r0], #-0
    9010:	b8080061 	stmdalt	r8, {r0, r5, r6}
    9014:	02080061 	andeq	r0, r8, #97	; 0x61
    9018:	b89f3000 	ldmlt	pc, {ip, sp}	; <UNPREDICTABLE>
    901c:	ba080061 	blt	2091a8 <_Min_Stack_Size+0x208da8>
    9020:	09080061 	stmdbeq	r8, {r0, r5, r6}
    9024:	70007100 	andvc	r7, r0, r0, lsl #2
    9028:	1a007100 	bne	25430 <_Min_Stack_Size+0x25030>
    902c:	61c29f29 	bicvs	r9, r2, r9, lsr #30
    9030:	61d60800 	bicsvs	r0, r6, r0, lsl #16
    9034:	00020800 	andeq	r0, r2, r0, lsl #16
    9038:	00009f30 	andeq	r9, r0, r0, lsr pc
    903c:	00000000 	andeq	r0, r0, r0
    9040:	61940000 	orrsvs	r0, r4, r0
    9044:	61b60800 			; <UNDEFINED> instruction: 0x61b60800
    9048:	00020800 	andeq	r0, r2, r0, lsl #16
    904c:	61b69f30 			; <UNDEFINED> instruction: 0x61b69f30
    9050:	61ba0800 			; <UNDEFINED> instruction: 0x61ba0800
    9054:	00010800 	andeq	r0, r1, r0, lsl #16
    9058:	0061c250 	rsbeq	ip, r1, r0, asr r2
    905c:	0061ca08 	rsbeq	ip, r1, r8, lsl #20
    9060:	30000208 	andcc	r0, r0, r8, lsl #4
    9064:	0061ca9f 	mlseq	r1, pc, sl, ip	; <UNPREDICTABLE>
    9068:	0061cc08 	rsbeq	ip, r1, r8, lsl #24
    906c:	50000108 	andpl	r0, r0, r8, lsl #2
    9070:	080061cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp, lr}
    9074:	080061d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sp, lr}
    9078:	9f300002 	svcls	0x00300002
    907c:	080061d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sp, lr}
    9080:	080061d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sp, lr}
    9084:	00500001 	subseq	r0, r0, r1
    9088:	00000000 	andeq	r0, r0, r0
    908c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    9090:	00080061 	andeq	r0, r8, r1, rrx
    9094:	01080062 	tsteq	r8, r2, rrx
    9098:	62005100 	andvs	r5, r0, #0, 2
    909c:	620c0800 	andvs	r0, ip, #0, 16
    90a0:	00040800 	andeq	r0, r4, r0, lsl #16
    90a4:	9f5101f3 	svcls	0x005101f3
    90a8:	0800620c 	stmdaeq	r0, {r2, r3, r9, sp, lr}
    90ac:	08006218 	stmdaeq	r0, {r3, r4, r9, sp, lr}
    90b0:	18510001 	ldmdane	r1, {r0}^
    90b4:	1c080062 	stcne	0, cr0, [r8], {98}	; 0x62
    90b8:	04080062 	streq	r0, [r8], #-98	; 0x62
    90bc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    90c0:	00621c9f 	mlseq	r2, pc, ip, r1	; <UNPREDICTABLE>
    90c4:	00622808 	rsbeq	r2, r2, r8, lsl #16
    90c8:	51000108 	tstpl	r0, r8, lsl #2
    90cc:	08006228 	stmdaeq	r0, {r3, r5, r9, sp, lr}
    90d0:	0800622c 	stmdaeq	r0, {r2, r3, r5, r9, sp, lr}
    90d4:	01f30004 	mvnseq	r0, r4
    90d8:	00009f51 	andeq	r9, r0, r1, asr pc
    90dc:	00000000 	andeq	r0, r0, r0
    90e0:	622c0000 	eorvs	r0, ip, #0
    90e4:	62640800 	rsbvs	r0, r4, #0, 16
    90e8:	00010800 	andeq	r0, r1, r0, lsl #16
    90ec:	00626450 	rsbeq	r6, r2, r0, asr r4
    90f0:	00626a08 	rsbeq	r6, r2, r8, lsl #20
    90f4:	f3000408 	vshl.u8	d0, d8, d0
    90f8:	6a9f5001 	bvs	fe7dd104 <_estack+0xde7ad104>
    90fc:	98080062 	stmdals	r8, {r1, r5, r6}
    9100:	01080062 	tsteq	r8, r2, rrx
    9104:	00005000 	andeq	r5, r0, r0
    9108:	00000000 	andeq	r0, r0, r0
    910c:	622c0000 	eorvs	r0, ip, #0
    9110:	62560800 	subsvs	r0, r6, #0, 16
    9114:	00010800 	andeq	r0, r1, r0, lsl #16
    9118:	00625651 	rsbeq	r5, r2, r1, asr r6
    911c:	00626a08 	rsbeq	r6, r2, r8, lsl #20
    9120:	f3000408 	vshl.u8	d0, d8, d0
    9124:	6a9f5101 	bvs	fe7dd530 <_estack+0xde7ad530>
    9128:	76080062 	strvc	r0, [r8], -r2, rrx
    912c:	01080062 	tsteq	r8, r2, rrx
    9130:	62765100 	rsbsvs	r5, r6, #0, 2
    9134:	627c0800 	rsbsvs	r0, ip, #0, 16
    9138:	00040800 	andeq	r0, r4, r0, lsl #16
    913c:	9f5101f3 	svcls	0x005101f3
    9140:	0800627c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sp, lr}
    9144:	0800628c 	stmdaeq	r0, {r2, r3, r7, r9, sp, lr}
    9148:	8c510001 	mrrchi	0, 0, r0, r1, cr1
    914c:	8e080062 	cdphi	0, 0, cr0, cr8, cr2, {3}
    9150:	04080062 	streq	r0, [r8], #-98	; 0x62
    9154:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    9158:	00628e9f 	mlseq	r2, pc, lr, r8	; <UNPREDICTABLE>
    915c:	00629808 	rsbeq	r9, r2, r8, lsl #16
    9160:	51000108 	tstpl	r0, r8, lsl #2
	...
    916c:	0800622c 	stmdaeq	r0, {r2, r3, r5, r9, sp, lr}
    9170:	08006258 	stmdaeq	r0, {r3, r4, r6, r9, sp, lr}
    9174:	9f300002 	svcls	0x00300002
    9178:	08006258 	stmdaeq	r0, {r3, r4, r6, r9, sp, lr}
    917c:	0800626a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sp, lr}
    9180:	0072000a 	rsbseq	r0, r2, sl
    9184:	00712e30 	rsbseq	r2, r1, r0, lsr lr
    9188:	9f1a2e30 	svcls	0x001a2e30
    918c:	0800626a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sp, lr}
    9190:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    9194:	9f300002 	svcls	0x00300002
	...
    91a0:	0800622c 	stmdaeq	r0, {r2, r3, r5, r9, sp, lr}
    91a4:	0800624a 	stmdaeq	r0, {r1, r3, r6, r9, sp, lr}
    91a8:	9f300002 	svcls	0x00300002
    91ac:	0800624a 	stmdaeq	r0, {r1, r3, r6, r9, sp, lr}
    91b0:	0800626a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sp, lr}
    91b4:	6a530001 	bvs	14c91c0 <_Min_Stack_Size+0x14c8dc0>
    91b8:	72080062 	andvc	r0, r8, #98	; 0x62
    91bc:	02080062 	andeq	r0, r8, #98	; 0x62
    91c0:	729f3000 	addsvc	r3, pc, #0
    91c4:	7c080062 	stcvc	0, cr0, [r8], {98}	; 0x62
    91c8:	01080062 	tsteq	r8, r2, rrx
    91cc:	627c5300 	rsbsvs	r5, ip, #0, 6
    91d0:	62840800 	addvs	r0, r4, #0, 16
    91d4:	00020800 	andeq	r0, r2, r0, lsl #16
    91d8:	62849f30 	addvs	r9, r4, #48, 30	; 0xc0
    91dc:	628e0800 	addvs	r0, lr, #0, 16
    91e0:	00010800 	andeq	r0, r1, r0, lsl #16
    91e4:	00628e53 	rsbeq	r8, r2, r3, asr lr
    91e8:	00629608 	rsbeq	r9, r2, r8, lsl #12
    91ec:	30000208 	andcc	r0, r0, r8, lsl #4
    91f0:	0062969f 	mlseq	r2, pc, r6, r9	; <UNPREDICTABLE>
    91f4:	00629808 	rsbeq	r9, r2, r8, lsl #16
    91f8:	53000108 	movwpl	r0, #264	; 0x108
	...
    9204:	0800622c 	stmdaeq	r0, {r2, r3, r5, r9, sp, lr}
    9208:	0800624c 	stmdaeq	r0, {r2, r3, r6, r9, sp, lr}
    920c:	9f300002 	svcls	0x00300002
    9210:	0800624c 	stmdaeq	r0, {r2, r3, r6, r9, sp, lr}
    9214:	08006258 	stmdaeq	r0, {r3, r4, r6, r9, sp, lr}
    9218:	6a540001 	bvs	1509224 <_Min_Stack_Size+0x1508e24>
    921c:	76080062 	strvc	r0, [r8], -r2, rrx
    9220:	02080062 	andeq	r0, r8, #98	; 0x62
    9224:	7c9f3000 	ldcvc	0, cr3, [pc], {0}
    9228:	88080062 	stmdahi	r8, {r1, r5, r6}
    922c:	02080062 	andeq	r0, r8, #98	; 0x62
    9230:	8e9f3000 	cdphi	0, 9, cr3, cr15, cr0, {0}
    9234:	98080062 	stmdals	r8, {r1, r5, r6}
    9238:	02080062 	andeq	r0, r8, #98	; 0x62
    923c:	009f3000 	addseq	r3, pc, r0
    9240:	00000000 	andeq	r0, r0, r0
    9244:	2c000000 	stccs	0, cr0, [r0], {-0}
    9248:	58080062 	stmdapl	r8, {r1, r5, r6}
    924c:	02080062 	andeq	r0, r8, #98	; 0x62
    9250:	589f3000 	ldmpl	pc, {ip, sp}	; <UNPREDICTABLE>
    9254:	6a080062 	bvs	2093e4 <_Min_Stack_Size+0x208fe4>
    9258:	01080062 	tsteq	r8, r2, rrx
    925c:	626a5100 	rsbvs	r5, sl, #0, 2
    9260:	627a0800 	rsbsvs	r0, sl, #0, 16
    9264:	00020800 	andeq	r0, r2, r0, lsl #16
    9268:	627a9f30 	rsbsvs	r9, sl, #48, 30	; 0xc0
    926c:	627c0800 	rsbsvs	r0, ip, #0, 16
    9270:	00010800 	andeq	r0, r1, r0, lsl #16
    9274:	00627c51 	rsbeq	r7, r2, r1, asr ip
    9278:	00628c08 	rsbeq	r8, r2, r8, lsl #24
    927c:	30000208 	andcc	r0, r0, r8, lsl #4
    9280:	00628c9f 	mlseq	r2, pc, ip, r8	; <UNPREDICTABLE>
    9284:	00628e08 	rsbeq	r8, r2, r8, lsl #28
    9288:	51000108 	tstpl	r0, r8, lsl #2
    928c:	0800628e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sp, lr}
    9290:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    9294:	9f300002 	svcls	0x00300002
	...
    92a0:	0800622c 	stmdaeq	r0, {r2, r3, r5, r9, sp, lr}
    92a4:	08006250 	stmdaeq	r0, {r4, r6, r9, sp, lr}
    92a8:	9f300002 	svcls	0x00300002
    92ac:	08006250 	stmdaeq	r0, {r4, r6, r9, sp, lr}
    92b0:	0800626a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sp, lr}
    92b4:	6a520001 	bvs	14892c0 <_Min_Stack_Size+0x1488ec0>
    92b8:	76080062 	strvc	r0, [r8], -r2, rrx
    92bc:	02080062 	andeq	r0, r8, #98	; 0x62
    92c0:	769f3000 	ldrvc	r3, [pc], r0
    92c4:	7c080062 	stcvc	0, cr0, [r8], {98}	; 0x62
    92c8:	01080062 	tsteq	r8, r2, rrx
    92cc:	627c5200 	rsbsvs	r5, ip, #0, 4
    92d0:	62880800 	addvs	r0, r8, #0, 16
    92d4:	00020800 	andeq	r0, r2, r0, lsl #16
    92d8:	62889f30 	addvs	r9, r8, #48, 30	; 0xc0
    92dc:	628e0800 	addvs	r0, lr, #0, 16
    92e0:	00010800 	andeq	r0, r1, r0, lsl #16
    92e4:	00628e52 	rsbeq	r8, r2, r2, asr lr
    92e8:	00629808 	rsbeq	r9, r2, r8, lsl #16
    92ec:	30000208 	andcc	r0, r0, r8, lsl #4
    92f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    92f4:	00000000 	andeq	r0, r0, r0
    92f8:	00629800 	rsbeq	r9, r2, r0, lsl #16
    92fc:	0062c008 	rsbeq	ip, r2, r8
    9300:	51000108 	tstpl	r0, r8, lsl #2
    9304:	080062c0 	stmdaeq	r0, {r6, r7, r9, sp, lr}
    9308:	080062cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sp, lr}
    930c:	01f30004 	mvnseq	r0, r4
    9310:	62cc9f51 	sbcvs	r9, ip, #324	; 0x144
    9314:	62d80800 	sbcsvs	r0, r8, #0, 16
    9318:	00010800 	andeq	r0, r1, r0, lsl #16
    931c:	0062d851 	rsbeq	sp, r2, r1, asr r8
    9320:	0062dc08 	rsbeq	sp, r2, r8, lsl #24
    9324:	f3000408 	vshl.u8	d0, d8, d0
    9328:	dc9f5101 	ldfles	f5, [pc], {1}
    932c:	e8080062 	stmda	r8, {r1, r5, r6}
    9330:	01080062 	tsteq	r8, r2, rrx
    9334:	62e85100 	rscvs	r5, r8, #0, 2
    9338:	62ec0800 	rscvs	r0, ip, #0, 16
    933c:	00040800 	andeq	r0, r4, r0, lsl #16
    9340:	9f5101f3 	svcls	0x005101f3
	...
    934c:	08006348 	stmdaeq	r0, {r3, r6, r8, r9, sp, lr}
    9350:	0800635a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sp, lr}
    9354:	5a500001 	bpl	1409360 <_Min_Stack_Size+0x1408f60>
    9358:	5c080063 	stcpl	0, cr0, [r8], {99}	; 0x63
    935c:	04080063 	streq	r0, [r8], #-99	; 0x63
    9360:	5001f300 	andpl	pc, r1, r0, lsl #6
    9364:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9368:	00000000 	andeq	r0, r0, r0
    936c:	00634800 	rsbeq	r4, r3, r0, lsl #16
    9370:	00635208 	rsbeq	r5, r3, r8, lsl #4
    9374:	30000208 	andcc	r0, r0, r8, lsl #4
    9378:	0063529f 	mlseq	r3, pc, r2, r5	; <UNPREDICTABLE>
    937c:	00635a08 	rsbeq	r5, r3, r8, lsl #20
    9380:	70000b08 	andvc	r0, r0, r8, lsl #22
    9384:	1aff0800 	bne	fffcb38c <_estack+0xdff9b38c>
    9388:	301a0073 	andscc	r0, sl, r3, ror r0
    938c:	635a9f2e 	cmpvs	sl, #46, 30	; 0xb8
    9390:	635c0800 	cmpvs	ip, #0, 16
    9394:	000c0800 	andeq	r0, ip, r0, lsl #16
    9398:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    939c:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    93a0:	9f2e301a 	svcls	0x002e301a
	...
    93ac:	0800635c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, lr}
    93b0:	08006368 	stmdaeq	r0, {r3, r5, r6, r8, r9, sp, lr}
    93b4:	68500001 	ldmdavs	r0, {r0}^
    93b8:	6c080063 	stcvs	0, cr0, [r8], {99}	; 0x63
    93bc:	04080063 	streq	r0, [r8], #-99	; 0x63
    93c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    93c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    93c8:	00000000 	andeq	r0, r0, r0
    93cc:	00636c00 	rsbeq	r6, r3, r0, lsl #24
    93d0:	00637e08 	rsbeq	r7, r3, r8, lsl #28
    93d4:	50000108 	andpl	r0, r0, r8, lsl #2
    93d8:	0800637e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sp, lr}
    93dc:	08006380 	stmdaeq	r0, {r7, r8, r9, sp, lr}
    93e0:	01f30004 	mvnseq	r0, r4
    93e4:	00009f50 	andeq	r9, r0, r0, asr pc
    93e8:	00000000 	andeq	r0, r0, r0
    93ec:	636c0000 	cmnvs	ip, #0
    93f0:	63760800 	cmnvs	r6, #0, 16
    93f4:	00020800 	andeq	r0, r2, r0, lsl #16
    93f8:	63769f30 	cmnvs	r6, #48, 30	; 0xc0
    93fc:	637e0800 	cmnvs	lr, #0, 16
    9400:	000b0800 	andeq	r0, fp, r0, lsl #16
    9404:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    9408:	1a00731a 	bne	26078 <_Min_Stack_Size+0x25c78>
    940c:	7e9f2e30 	mrcvc	14, 4, r2, cr15, cr0, {1}
    9410:	80080063 	andhi	r0, r8, r3, rrx
    9414:	0c080063 	stceq	0, cr0, [r8], {99}	; 0x63
    9418:	5001f300 	andpl	pc, r1, r0, lsl #6
    941c:	731aff08 	tstvc	sl, #8, 30
    9420:	2e301a00 	vaddcs.f32	s2, s0, s0
    9424:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9428:	00000000 	andeq	r0, r0, r0
    942c:	00638000 	rsbeq	r8, r3, r0
    9430:	00638608 	rsbeq	r8, r3, r8, lsl #12
    9434:	50000108 	andpl	r0, r0, r8, lsl #2
    9438:	08006386 	stmdaeq	r0, {r1, r2, r7, r8, r9, sp, lr}
    943c:	08006390 	stmdaeq	r0, {r4, r7, r8, r9, sp, lr}
    9440:	01f30004 	mvnseq	r0, r4
    9444:	00009f50 	andeq	r9, r0, r0, asr pc
    9448:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	31424841 	cmpcc	r2, r1, asr #16
       4:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
       8:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
       c:	4746434c 	strbmi	r4, [r6, -ip, asr #6]
      10:	50410052 	subpl	r0, r1, r2, asr r0
      14:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
      18:	41005254 	tstmi	r0, r4, asr r2
      1c:	45324248 	ldrmi	r4, [r2, #-584]!	; 0x248
      20:	4100524e 	tstmi	r0, lr, asr #4
      24:	52324248 	eorspl	r4, r2, #72, 4	; 0x80000004
      28:	00525453 	subseq	r5, r2, r3, asr r4
      2c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
      30:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
      34:	43444200 	movtmi	r4, #16896	; 0x4200
      38:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
      3c:	5332494c 	teqpl	r2, #76, 18	; 0x130000
      40:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
      44:	52575000 	subspl	r5, r7, #0
      48:	7079545f 	rsbsvc	r5, r9, pc, asr r4
      4c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
      50:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff158 <_estack+0xdffcf158>
      54:	33746e69 	cmncc	r4, #1680	; 0x690
      58:	00745f32 	rsbseq	r5, r4, r2, lsr pc
      5c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      60:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
      64:	5300745f 	movwpl	r7, #1119	; 0x45f
      68:	52474353 	subpl	r4, r7, #1275068417	; 0x4c000001
      6c:	45534800 	ldrbmi	r4, [r3, #-2048]	; 0x800
      70:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
      74:	43007375 	movwmi	r7, #885	; 0x375
      78:	44495550 	strbmi	r5, [r9], #-1360	; 0x550
      7c:	42484100 	submi	r4, r8, #0, 2
      80:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
      84:	48410052 	stmdami	r1, {r1, r4, r6}^
      88:	504c3342 	subpl	r3, ip, r2, asr #6
      8c:	00524e45 	subseq	r4, r2, r5, asr #28
      90:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
      94:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
      98:	43530033 	cmpmi	r3, #51	; 0x33
      9c:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
      a0:	41006570 	tstmi	r0, r0, ror r5
      a4:	45314250 	ldrmi	r4, [r1, #-592]!	; 0x250
      a8:	4400524e 	strmi	r5, [r0], #-590	; 0x24e
      ac:	46434b43 	strbmi	r4, [r3], -r3, asr #22
      b0:	49005247 	stmdbmi	r0, {r0, r1, r2, r6, r9, ip, lr}
      b4:	00525343 	subseq	r5, r2, r3, asr #6
      b8:	4b54504f 	blmi	15141fc <_Min_Stack_Size+0x1513dfc>
      bc:	00525945 	subseq	r5, r2, r5, asr #18
      c0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      c4:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
      c8:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
      cc:	46420074 			; <UNDEFINED> instruction: 0x46420074
      d0:	52005241 	andpl	r5, r0, #268435460	; 0x10000004
      d4:	545f4343 	ldrbpl	r4, [pc], #-835	; dc <_Min_Heap_Size+0xdc>
      d8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
      dc:	73006665 	movwvc	r6, #1637	; 0x665
      e0:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
      e4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
      e8:	42504100 	subsmi	r4, r0, #0, 2
      ec:	54535232 	ldrbpl	r5, [r3], #-562	; 0x232
      f0:	5f5f0052 	svcpl	0x005f0052
      f4:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
      f8:	00745f38 	rsbseq	r5, r4, r8, lsr pc
      fc:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
     100:	6f682f00 	svcvs	0x00682f00
     104:	682f656d 	stmdavs	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	; <UNPREDICTABLE>
     108:	2f736470 	svccs	0x00736470
     10c:	6b726f77 	blvs	1c9bef0 <_Min_Stack_Size+0x1c9baf0>
     110:	63617073 	cmnvs	r1, #115	; 0x73
     114:	72662f65 	rsbvc	r2, r6, #404	; 0x194
     118:	74726565 	ldrbtvc	r6, [r2], #-1381	; 0x565
     11c:	732d736f 	teqvc	sp, #-1140850687	; 0xbc000001
     120:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     124:	54504f00 	ldrbpl	r4, [r0], #-3840	; 0xf00
     128:	00315243 	eorseq	r5, r1, r3, asr #4
     12c:	736c6c70 	cmnvc	ip, #112, 24	; 0x7000
     130:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     134:	48410065 	stmdami	r1, {r0, r2, r5, r6}^
     138:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
     13c:	6c700052 	ldclvs	0, cr0, [r0], #-328	; 0xfffffeb8
     140:	70006d6c 	andvc	r6, r0, ip, ror #26
     144:	00706c6c 	rsbseq	r6, r0, ip, ror #24
     148:	43524941 	cmpmi	r2, #1064960	; 0x104000
     14c:	6e750052 	mrcvs	0, 3, r0, cr5, cr2, {2}
     150:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     154:	63206465 	teqvs	r0, #1694498816	; 0x65000000
     158:	00726168 	rsbseq	r6, r2, r8, ror #2
     15c:	32425041 	subcc	r5, r2, #65	; 0x41
     160:	00524e45 	subseq	r4, r2, r5, asr #28
     164:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     168:	43705574 	cmnmi	r0, #116, 10	; 0x1d000000
     16c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     170:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
     174:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     178:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     17c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     180:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     184:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     188:	4f430074 	svcmi	0x00430074
     18c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     190:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     194:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     198:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     19c:	6174732f 	cmnvs	r4, pc, lsr #6
     1a0:	70757472 	rsbsvc	r7, r5, r2, ror r4
     1a4:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     1a8:	5f6d6574 	svcpl	0x006d6574
     1ac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     1b0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     1b4:	00632e78 	rsbeq	r2, r3, r8, ror lr
     1b8:	53434853 	movtpl	r4, #14419	; 0x3853
     1bc:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
     1c0:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     1c4:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xf43
     1c8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     1cc:	6470556b 	ldrbtvs	r5, [r0], #-1387	; 0x56b
     1d0:	00657461 	rsbeq	r7, r5, r1, ror #8
     1d4:	41464d4d 	cmpmi	r6, sp, asr #26
     1d8:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
     1dc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     1e0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     1e4:	6f687300 	svcvs	0x00687300
     1e8:	75207472 	strvc	r7, [r0, #-1138]!	; 0x472
     1ec:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     1f0:	2064656e 	rsbcs	r6, r4, lr, ror #10
     1f4:	00746e69 	rsbseq	r6, r4, r9, ror #28
     1f8:	31425041 	cmpcc	r2, r1, asr #32
     1fc:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     200:	6c700052 	ldclvs	0, cr0, [r0], #-328	; 0xfffffeb8
     204:	6f63766c 	svcvs	0x0063766c
     208:	4f545600 	svcmi	0x00545600
     20c:	53490052 	movtpl	r0, #36946	; 0x9052
     210:	44005241 	strmi	r5, [r0], #-577	; 0x241
     214:	00525346 	subseq	r5, r2, r6, asr #6
     218:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
     21c:	6f436d65 	svcvs	0x00436d65
     220:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     224:	006b636f 	rsbeq	r6, fp, pc, ror #6
     228:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     22c:	42484100 	submi	r4, r8, #0, 2
     230:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xc32
     234:	4d00524e 	sfmmi	f5, 4, [r0, #-312]	; 0xfffffec8
     238:	0052464d 	subseq	r4, r2, sp, asr #12
     23c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     240:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     244:	45520030 	ldrbmi	r0, [r2, #-48]	; 0x30
     248:	56524553 			; <UNDEFINED> instruction: 0x56524553
     24c:	00314445 	eorseq	r4, r1, r5, asr #8
     250:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     254:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     258:	65530032 	ldrbvs	r0, [r3, #-50]	; 0x32
     25c:	73795374 	cmnvc	r9, #116, 6	; 0xd0000001
     260:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     264:	4552006b 	ldrbmi	r0, [r2, #-107]	; 0x6b
     268:	56524553 			; <UNDEFINED> instruction: 0x56524553
     26c:	00344445 	eorseq	r4, r4, r5, asr #8
     270:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     274:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     278:	45520035 	ldrbmi	r0, [r2, #-53]	; 0x35
     27c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     280:	00364445 	eorseq	r4, r6, r5, asr #8
     284:	20554e47 	subscs	r4, r5, r7, asr #28
     288:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     28c:	20322e38 	eorscs	r2, r2, r8, lsr lr
     290:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
     294:	6f633d75 	svcvs	0x00633d75
     298:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
     29c:	20346d2d 	eorscs	r6, r4, sp, lsr #26
     2a0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     2a4:	613d6863 	teqvs	sp, r3, ror #16
     2a8:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
     2ac:	206d2d65 	rsbcs	r2, sp, r5, ror #26
     2b0:	75746d2d 	ldrbvc	r6, [r4, #-3373]!	; 0xd2d
     2b4:	633d656e 	teqvs	sp, #461373440	; 0x1b800000
     2b8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     2bc:	346d2d78 	strbtcc	r2, [sp], #-3448	; 0xd78
     2c0:	6c6d2d20 	stclvs	13, cr2, [sp], #-128	; 0xffffff80
     2c4:	6c747469 	cfldrdvs	mvd7, [r4], #-420	; 0xfffffe5c
     2c8:	6e652d65 	cdpvs	13, 6, cr2, cr5, cr5, {3}
     2cc:	6e616964 	cdpvs	9, 6, cr6, cr1, cr4, {3}
     2d0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     2d4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     2d8:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
     2dc:	663d7570 			; <UNDEFINED> instruction: 0x663d7570
     2e0:	2d347670 	ldccs	6, cr7, [r4, #-448]!	; 0xfffffe40
     2e4:	642d7073 	strtvs	r7, [sp], #-115	; 0x73
     2e8:	2d203631 	stccs	6, cr3, [r0, #-196]!	; 0xffffff3c
     2ec:	6f6c666d 	svcvs	0x006c666d
     2f0:	612d7461 	teqvs	sp, r1, ror #8
     2f4:	733d6962 	teqvc	sp, #1605632	; 0x188000
     2f8:	6674666f 	ldrbtvs	r6, [r4], -pc, ror #12
     2fc:	672d2070 			; <UNDEFINED> instruction: 0x672d2070
     300:	334f2d20 	movtcc	r2, #64800	; 0xfd20
     304:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xd20
     308:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
     30c:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
     310:	74736166 	ldrbtvc	r6, [r3], #-358	; 0x166
     314:	74616d2d 	strbtvc	r6, [r1], #-3373	; 0xd2d
     318:	662d2068 	strtvs	r2, [sp], -r8, rrx
     31c:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     320:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     324:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     328:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     32c:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     330:	61746164 	cmnvs	r4, r4, ror #2
     334:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     338:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     33c:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     340:	632d6f6e 	teqvs	sp, #440	; 0x1b8
     344:	6f6d6d6f 	svcvs	0x006d6d6f
     348:	2d2d206e 	stccs	0, cr2, [sp, #-440]!	; 0xfffffe48
     34c:	61726170 	cmnvs	r2, r0, ror r1
     350:	616d206d 	cmnvs	sp, sp, rrx
     354:	6e692d78 	mcrvs	13, 3, r2, cr9, cr8, {3}
     358:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
     35c:	736e692d 	cmnvc	lr, #737280	; 0xb4000
     360:	732d736e 	teqvc	sp, #-1207959551	; 0xb8000001
     364:	6c676e69 	stclvs	14, cr6, [r7], #-420	; 0xfffffe5c
     368:	30313d65 	eorscc	r3, r1, r5, ror #26
     36c:	41003030 	tstmi	r0, r0, lsr r0
     370:	45314248 	ldrmi	r4, [r1, #-584]!	; 0x248
     374:	5f00524e 	svcpl	0x0000524e
     378:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     37c:	745f3233 	ldrbvc	r3, [pc], #-563	; 384 <_Min_Heap_Size+0x384>
     380:	53464100 	movtpl	r4, #24832	; 0x6100
     384:	48410052 	stmdami	r1, {r1, r4, r6}^
     388:	53523342 	cmppl	r2, #134217729	; 0x8000001
     38c:	46005254 			; <UNDEFINED> instruction: 0x46005254
     390:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     394:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     398:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     39c:	4d544900 	ldclmi	9, cr4, [r4, #-0]
     3a0:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
     3a4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
     3a8:	4c500072 	mrrcmi	0, 7, r0, r0, cr2	; <UNPREDICTABLE>
     3ac:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     3b0:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     3b4:	41504300 	cmpmi	r0, r0, lsl #6
     3b8:	41005243 	tstmi	r0, r3, asr #4
     3bc:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
     3c0:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     3c4:	54504f00 	ldrbpl	r4, [r0], #-3840	; 0xf00
     3c8:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
     3cc:	5f434454 	svcpl	0x00434454
     3d0:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     3d4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     3d8:	44505550 	ldrbmi	r5, [r0], #-1360	; 0x550
     3dc:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
     3e0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     3e4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     3e8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     3ec:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
     3f0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     3f4:	58525f31 	ldmdapl	r2, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     3f8:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     3fc:	50006e51 	andpl	r6, r0, r1, asr lr
     400:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     404:	006e5152 	rsbeq	r5, lr, r2, asr r1
     408:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     40c:	3058525f 	subscc	r5, r8, pc, asr r2
     410:	5152495f 	cmppl	r2, pc, asr r9
     414:	7273006e 	rsbsvc	r0, r3, #110	; 0x6e
     418:	616d2f63 	cmnvs	sp, r3, ror #30
     41c:	632e6e69 	teqvs	lr, #1680	; 0x690
     420:	43324900 	teqmi	r2, #0, 18
     424:	52455f33 	subpl	r5, r5, #51, 30	; 0xcc
     428:	5152495f 	cmppl	r2, pc, asr r9
     42c:	4155006e 	cmpmi	r5, lr, rrx
     430:	5f385452 	svcpl	0x00385452
     434:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     438:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     43c:	694c5f49 	stmdbvs	ip, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
     440:	6d43656e 	cfstr64vs	mvdx6, [r3, #-440]	; 0xfffffe48
     444:	32490064 	subcc	r0, r9, #100	; 0x64
     448:	455f3143 	ldrbmi	r3, [pc, #-323]	; 30d <_Min_Heap_Size+0x30d>
     44c:	52495f56 	subpl	r5, r9, #344	; 0x158
     450:	4f006e51 	svcmi	0x00006e51
     454:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     458:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
     45c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     460:	61657274 	smcvs	22308	; 0x5724
     464:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     468:	006e5152 	rsbeq	r5, lr, r2, asr r1
     46c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     470:	6972545f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
     474:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
     478:	7369525f 	cmnvc	r9, #-268435451	; 0xf0000005
     47c:	5f676e69 	svcpl	0x00676e69
     480:	6c6c6146 	stfvse	f6, [ip], #-280	; 0xfffffee8
     484:	00676e69 	rsbeq	r6, r7, r9, ror #28
     488:	41534944 	cmpmi	r3, r4, asr #18
     48c:	00454c42 	subeq	r4, r5, r2, asr #24
     490:	4f495047 	svcmi	0x00495047
     494:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     498:	505f6570 	subspl	r6, pc, r0, ror r5	; <UNPREDICTABLE>
     49c:	50530050 	subspl	r0, r3, r0, asr r0
     4a0:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     4a4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     4a8:	4f495047 	svcmi	0x00495047
     4ac:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 4b4 <_Min_Stack_Size+0xb4>
     4b0:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     4b4:	43545200 	cmpmi	r4, #0, 4
     4b8:	616c415f 	cmnvs	ip, pc, asr r1
     4bc:	495f6d72 	ldmdbmi	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     4c0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     4c4:	4f495047 	svcmi	0x00495047
     4c8:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     4cc:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
     4d0:	5f324332 	svcpl	0x00324332
     4d4:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     4d8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     4dc:	4f495047 	svcmi	0x00495047
     4e0:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 4e8 <_Min_Stack_Size+0xe8>
     4e4:	4e415f65 	cdpmi	15, 4, cr5, cr1, cr5, {3}
     4e8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     4ec:	6f4c5f4f 	svcvs	0x004c5f4f
     4f0:	70535f77 	subsvc	r5, r3, r7, ror pc
     4f4:	00646565 	rsbeq	r6, r4, r5, ror #10
     4f8:	5f435452 	svcpl	0x00435452
     4fc:	50554b57 	subspl	r4, r5, r7, asr fp
     500:	5152495f 	cmppl	r2, pc, asr r9
     504:	5757006e 	ldrbpl	r0, [r7, -lr, rrx]
     508:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     50c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     510:	4f494453 	svcmi	0x00494453
     514:	5152495f 	cmppl	r2, pc, asr r9
     518:	5047006e 	subpl	r0, r7, lr, rrx
     51c:	544f4f49 	strbpl	r4, [pc], #-3913	; 524 <_Min_Stack_Size+0x124>
     520:	5f657079 	svcpl	0x00657079
     524:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     528:	00666544 	rsbeq	r6, r6, r4, asr #10
     52c:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     530:	5f43435f 	svcpl	0x0043435f
     534:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     538:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     53c:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     540:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     544:	47006e51 	smlsdmi	r0, r1, lr, r6
     548:	5f4f4950 	svcpl	0x004f4950
     54c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     550:	004e495f 	subeq	r4, lr, pc, asr r9
     554:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     558:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     55c:	366d6165 	strbtcc	r6, [sp], -r5, ror #2
     560:	5152495f 	cmppl	r2, pc, asr r9
     564:	5047006e 	subpl	r0, r7, lr, rrx
     568:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     56c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     570:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     574:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     578:	43324900 	teqmi	r2, #0, 18
     57c:	56455f32 			; <UNDEFINED> instruction: 0x56455f32
     580:	5152495f 	cmppl	r2, pc, asr r9
     584:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     588:	6f4d4954 	svcvs	0x004d4954
     58c:	545f6564 	ldrbpl	r6, [pc], #-1380	; 594 <_Min_Stack_Size+0x194>
     590:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     594:	53006665 	movwpl	r6, #1637	; 0x665
     598:	5f354950 	svcpl	0x00354950
     59c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     5a0:	414d4400 	cmpmi	sp, r0, lsl #8
     5a4:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
     5a8:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     5ac:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     5b0:	45006e51 	strmi	r6, [r0, #-3665]	; 0xe51
     5b4:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
     5b8:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     5bc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5c0:	42414e45 	submi	r4, r1, #1104	; 0x450
     5c4:	4500454c 	strmi	r4, [r0, #-1356]	; 0x54c
     5c8:	5f495458 	svcpl	0x00495458
     5cc:	61656c43 	cmnvs	r5, r3, asr #24
     5d0:	50544972 	subspl	r4, r4, r2, ror r9
     5d4:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     5d8:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     5dc:	54450074 	strbpl	r0, [r5], #-116	; 0x74
     5e0:	4b575f48 	blmi	15d8308 <_Min_Stack_Size+0x15d7f08>
     5e4:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     5e8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5ec:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     5f0:	6972545f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
     5f4:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
     5f8:	6c61465f 	stclvs	6, cr4, [r1], #-380	; 0xfffffe84
     5fc:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
     600:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     604:	41445f36 	cmpmi	r4, r6, lsr pc
     608:	52495f43 	subpl	r5, r9, #268	; 0x10c
     60c:	55006e51 	strpl	r6, [r0, #-3665]	; 0xe51
     610:	34545241 	ldrbcc	r5, [r4], #-577	; 0x241
     614:	5152495f 	cmppl	r2, pc, asr r9
     618:	544f006e 	strbpl	r0, [pc], #-110	; 620 <_Min_Stack_Size+0x220>
     61c:	53465f47 	movtpl	r5, #28487	; 0x6f47
     620:	554b575f 	strbpl	r5, [fp, #-1887]	; 0x75f
     624:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     628:	47006e51 	smlsdmi	r0, r1, lr, r6
     62c:	5f4f4950 	svcpl	0x004f4950
     630:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     634:	00666544 	rsbeq	r6, r6, r4, asr #10
     638:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     63c:	5f50555f 	svcpl	0x0050555f
     640:	314d4954 	cmpcc	sp, r4, asr r9
     644:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     648:	4f006e51 	svcmi	0x00006e51
     64c:	45455053 	strbmi	r5, [r5, #-83]	; 0x53
     650:	42005244 	andmi	r5, r0, #68, 4	; 0x40000004
     654:	61467375 	hvcvs	26421	; 0x6735
     658:	5f746c75 	svcpl	0x00746c75
     65c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     660:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     664:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xf4f
     668:	6d756964 	ldclvs	9, cr6, [r5, #-400]!	; 0xfffffe70
     66c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     670:	50006465 	andpl	r6, r0, r5, ror #8
     674:	53646e65 	cmnpl	r4, #1616	; 0x650
     678:	52495f56 	subpl	r5, r9, #344	; 0x158
     67c:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
     680:	5f32414d 	svcpl	0x0032414d
     684:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
     688:	5f376d61 	svcpl	0x00376d61
     68c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     690:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     694:	6570534f 	ldrbvs	r5, [r0, #-847]!	; 0x34f
     698:	545f6465 	ldrbpl	r6, [pc], #-1125	; 6a0 <_Min_Stack_Size+0x2a0>
     69c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     6a0:	47006665 	strmi	r6, [r0, -r5, ror #12]
     6a4:	5f4f4950 	svcpl	0x004f4950
     6a8:	006e6950 	rsbeq	r6, lr, r0, asr r9
     6ac:	4349564e 	movtmi	r5, #38478	; 0x964e
     6b0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     6b4:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     6b8:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     6bc:	45006572 	strmi	r6, [r0, #-1394]	; 0x572
     6c0:	5f495458 	svcpl	0x00495458
     6c4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     6c8:	414d4400 	cmpmi	sp, r0, lsl #8
     6cc:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
     6d0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     6d4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     6d8:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
     6dc:	5f31414d 	svcpl	0x0031414d
     6e0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
     6e4:	5f366d61 	svcpl	0x00366d61
     6e8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6ec:	6d654d00 	stclvs	13, cr4, [r5, #-0]
     6f0:	4d79726f 	lfmmi	f7, 2, [r9, #-444]!	; 0xfffffe44
     6f4:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     6f8:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
     6fc:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     700:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     704:	5f334332 	svcpl	0x00334332
     708:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     70c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     710:	31494153 	cmpcc	r9, r3, asr r1
     714:	5152495f 	cmppl	r2, pc, asr r9
     718:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     71c:	475f4954 			; <UNDEFINED> instruction: 0x475f4954
     720:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     724:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
     728:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     72c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     730:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
     734:	4c006e51 	stcmi	14, cr6, [r0], {81}	; 0x51
     738:	00524b43 	subseq	r4, r2, r3, asr #22
     73c:	5f47544f 	svcpl	0x0047544f
     740:	455f5348 	ldrbmi	r5, [pc, #-840]	; 400 <_Min_Stack_Size>
     744:	4f5f3150 	svcmi	0x005f3150
     748:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     74c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     750:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     754:	455f4746 	ldrbmi	r4, [pc, #-1862]	; 16 <_Min_Heap_Size+0x16>
     758:	4c495458 	cfstrdmi	mvd5, [r9], {88}	; 0x58
     75c:	43656e69 	cmnmi	r5, #1680	; 0x690
     760:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     764:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
     768:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     76c:	61657274 	smcvs	22308	; 0x5724
     770:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     774:	006e5152 	rsbeq	r5, lr, r2, asr r1
     778:	314e4143 	cmpcc	lr, r3, asr #2
     77c:	5f58545f 	svcpl	0x0058545f
     780:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     784:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     788:	5f353149 	svcpl	0x00353149
     78c:	495f3031 	ldmdbmi	pc, {r0, r4, r5, ip, sp}^	; <UNPREDICTABLE>
     790:	006e5152 	rsbeq	r5, lr, r2, asr r1
     794:	4f495047 	svcmi	0x00495047
     798:	64507550 	ldrbvs	r7, [r0], #-1360	; 0x550
     79c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     7a0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     7a4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     7a8:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     7ac:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
     7b0:	5f31414d 	svcpl	0x0031414d
     7b4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
     7b8:	5f316d61 	svcpl	0x00316d61
     7bc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7c0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     7c4:	52495f43 	subpl	r5, r9, #268	; 0x10c
     7c8:	61684351 	cmnvs	r8, r1, asr r3
     7cc:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     7d0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     7d4:	52425f38 	subpl	r5, r2, #56, 30	; 0xe0
     7d8:	49545f4b 	ldmdbmi	r4, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     7dc:	5f32314d 	svcpl	0x0032314d
     7e0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7e4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     7e8:	52495f43 	subpl	r5, r9, #268	; 0x10c
     7ec:	61684351 	cmnvs	r8, r1, asr r3
     7f0:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     7f4:	65657250 	strbvs	r7, [r5, #-592]!	; 0x250
     7f8:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     7fc:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
     800:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     804:	53007974 	movwpl	r7, #2420	; 0x974
     808:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     80c:	495f6b63 	ldmdbmi	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     810:	006e5152 	rsbeq	r5, lr, r2, asr r1
     814:	314d4954 	cmpcc	sp, r4, asr r9
     818:	5f43435f 	svcpl	0x0043435f
     81c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     820:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     824:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xf4f
     828:	4e5f6450 	mrcmi	4, 2, r6, cr15, cr0, {2}
     82c:	4c55504f 	mrrcmi	0, 4, r5, r5, cr15	; <UNPREDICTABLE>
     830:	5845004c 	stmdapl	r5, {r2, r3, r6}^
     834:	5f304954 	svcpl	0x00304954
     838:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     83c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     840:	54007265 	strpl	r7, [r0], #-613	; 0x265
     844:	5f384d49 	svcpl	0x00384d49
     848:	5f475254 	svcpl	0x00475254
     84c:	5f4d4f43 	svcpl	0x004d4f43
     850:	314d4954 	cmpcc	sp, r4, asr r9
     854:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     858:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
     85c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
     860:	5152495f 	cmppl	r2, pc, asr r9
     864:	5047006e 	subpl	r0, r7, lr, rrx
     868:	4f5f4f49 	svcmi	0x005f4f49
     86c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     870:	48544500 	ldmdami	r4, {r8, sl, lr}^
     874:	5152495f 	cmppl	r2, pc, asr r9
     878:	5047006e 	subpl	r0, r7, lr, rrx
     87c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     880:	0074696e 	rsbseq	r6, r4, lr, ror #18
     884:	61435653 	cmpvs	r3, r3, asr r6
     888:	495f6c6c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     88c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     890:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     894:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     898:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
     89c:	5152495f 	cmppl	r2, pc, asr r9
     8a0:	564e006e 	strbpl	r0, [lr], -lr, rrx
     8a4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     8a8:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
     8ac:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     8b0:	44006665 	strmi	r6, [r0], #-1637	; 0x665
     8b4:	5f31414d 	svcpl	0x0031414d
     8b8:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
     8bc:	5f346d61 	svcpl	0x00346d61
     8c0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8c4:	41535500 	cmpmi	r3, r0, lsl #10
     8c8:	5f365452 	svcpl	0x00365452
     8cc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8d0:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     8d4:	694c5f49 	stmdbvs	ip, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
     8d8:	5400656e 	strpl	r6, [r0], #-1390	; 0x56e
     8dc:	5f354d49 	svcpl	0x00354d49
     8e0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8e4:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     8e8:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     8ec:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8f0:	32495053 	subcc	r5, r9, #83	; 0x53
     8f4:	5152495f 	cmppl	r2, pc, asr r9
     8f8:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     8fc:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     900:	61657274 	smcvs	22308	; 0x5724
     904:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     908:	006e5152 	rsbeq	r5, lr, r2, asr r1
     90c:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     910:	5f58545f 	svcpl	0x0058545f
     914:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     918:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     91c:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     920:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     924:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     928:	75460066 	strbvc	r0, [r6, #-102]	; 0x66
     92c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     930:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
     934:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     938:	4f4d0065 	svcmi	0x004d0065
     93c:	00524544 	subseq	r4, r2, r4, asr #10
     940:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     944:	6972545f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
     948:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
     94c:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     950:	5f53485f 	svcpl	0x0053485f
     954:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     958:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     95c:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
     960:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     964:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     968:	00657275 	rsbeq	r7, r5, r5, ror r2
     96c:	4344544c 	movtmi	r5, #17484	; 0x444c
     970:	5152495f 	cmppl	r2, pc, asr r9
     974:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     978:	4d5f4954 	ldclmi	9, cr4, [pc, #-336]	; 830 <_Min_Stack_Size+0x430>
     97c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     980:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     984:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 98c <_Min_Stack_Size+0x58c>
     988:	6e495f65 	cdpvs	15, 4, cr5, cr9, cr5, {3}
     98c:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     990:	00747075 	rsbseq	r7, r4, r5, ror r0
     994:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     998:	495f3154 	ldmdbmi	pc, {r2, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     99c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9a0:	33495053 	movtcc	r5, #36947	; 0x9053
     9a4:	5152495f 	cmppl	r2, pc, asr r9
     9a8:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     9ac:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     9b0:	61657274 	smcvs	22308	; 0x5724
     9b4:	495f346d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     9b8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9bc:	314d4954 	cmpcc	sp, r4, asr r9
     9c0:	4b52425f 	blmi	1491344 <_Min_Stack_Size+0x1490f44>
     9c4:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     9c8:	52495f39 	subpl	r5, r9, #57, 30	; 0xe4
     9cc:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
     9d0:	5f314d49 	svcpl	0x00314d49
     9d4:	545f5055 	ldrbpl	r5, [pc], #-85	; 9dc <_Min_Stack_Size+0x5dc>
     9d8:	30314d49 	eorscc	r4, r1, r9, asr #26
     9dc:	5152495f 	cmppl	r2, pc, asr r9
     9e0:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     9e4:	5f344954 	svcpl	0x00344954
     9e8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9ec:	53414800 	movtpl	r4, #6144	; 0x1800
     9f0:	4e525f48 	cdpmi	15, 5, cr5, cr2, cr8, {2}
     9f4:	52495f47 	subpl	r5, r9, #284	; 0x11c
     9f8:	47006e51 	smlsdmi	r0, r1, lr, r6
     9fc:	5f4f4950 	svcpl	0x004f4950
     a00:	74736146 	ldrbtvc	r6, [r3], #-326	; 0x146
     a04:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     a08:	55006465 	strpl	r6, [r0, #-1125]	; 0x465
     a0c:	35545241 	ldrbcc	r5, [r4, #-577]	; 0x241
     a10:	5152495f 	cmppl	r2, pc, asr r9
     a14:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     a18:	545f314d 	ldrbpl	r3, [pc], #-333	; a20 <_Min_Stack_Size+0x620>
     a1c:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     a20:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; a28 <_Min_Stack_Size+0x628>
     a24:	31314d49 	teqcc	r1, r9, asr #26
     a28:	5152495f 	cmppl	r2, pc, asr r9
     a2c:	4d46006e 	stclmi	0, cr0, [r6, #-440]	; 0xfffffe48
     a30:	52495f43 	subpl	r5, r9, #268	; 0x10c
     a34:	52006e51 	andpl	r6, r0, #1296	; 0x510
     a38:	415f4343 	cmpmi	pc, r3, asr #6
     a3c:	50314248 	eorspl	r4, r1, r8, asr #4
     a40:	70697265 	rsbvc	r7, r9, r5, ror #4
     a44:	6f6c4368 	svcvs	0x006c4368
     a48:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     a4c:	58450064 	stmdapl	r5, {r2, r5, r6}^
     a50:	5f324954 	svcpl	0x00324954
     a54:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a58:	43435200 	movtmi	r5, #12800	; 0x3200
     a5c:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     a60:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     a64:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     a68:	49006e6f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     a6c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     a70:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     a74:	6f435f73 	svcvs	0x00435f73
     a78:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     a7c:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     a80:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     a84:	53414c46 	movtpl	r4, #7238	; 0x1c46
     a88:	52495f48 	subpl	r5, r9, #72, 30	; 0x120
     a8c:	4f006e51 	svcmi	0x00006e51
     a90:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     a94:	52495f53 	subpl	r5, r9, #332	; 0x14c
     a98:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     a9c:	5f434956 	svcpl	0x00434956
     aa0:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     aa4:	6e6e6168 	powvsez	f6, f6, #0.0
     aa8:	75536c65 	ldrbvc	r6, [r3, #-3173]	; 0xc65
     aac:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
     ab0:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     ab4:	53550079 	cmppl	r5, #121	; 0x79
     ab8:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
     abc:	5152495f 	cmppl	r2, pc, asr r9
     ac0:	7355006e 	cmpvc	r5, #110	; 0x6e
     ac4:	46656761 	strbtmi	r6, [r5], -r1, ror #14
     ac8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     acc:	5152495f 	cmppl	r2, pc, asr r9
     ad0:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     ad4:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     ad8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     adc:	31414d44 	cmpcc	r1, r4, asr #26
     ae0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     ae4:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
     ae8:	5152495f 	cmppl	r2, pc, asr r9
     aec:	5047006e 	subpl	r0, r7, lr, rrx
     af0:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 9d4 <_Min_Stack_Size+0x5d4>
     af4:	5f65646f 	svcpl	0x0065646f
     af8:	0054554f 	subseq	r5, r4, pc, asr #10
     afc:	4f495047 	svcmi	0x00495047
     b00:	5075505f 	rsbspl	r5, r5, pc, asr r0
     b04:	52430064 	subpl	r0, r3, #100	; 0x64
     b08:	495f5059 	ldmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     b0c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b10:	374d4954 	smlsldcc	r4, sp, r4, r9
     b14:	5152495f 	cmppl	r2, pc, asr r9
     b18:	544f006e 	strbpl	r0, [pc], #-110	; b20 <_Min_Stack_Size+0x720>
     b1c:	53485f47 	movtpl	r5, #36679	; 0x8f47
     b20:	3150455f 	cmpcc	r0, pc, asr r5
     b24:	5f4e495f 	svcpl	0x004e495f
     b28:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b2c:	6e6f4e00 	cdpvs	14, 6, cr4, cr15, cr0, {0}
     b30:	6b73614d 	blvs	1cd906c <_Min_Stack_Size+0x1cd8c6c>
     b34:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     b38:	5f746e49 	svcpl	0x00746e49
     b3c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b40:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     b44:	69725449 	ldmdbvs	r2!, {r0, r3, r6, sl, ip, lr}^
     b48:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
     b4c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     b50:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     b54:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b58:	6f4d5f4f 	svcvs	0x004d5f4f
     b5c:	45006564 	strmi	r6, [r0, #-1380]	; 0x564
     b60:	5f495458 	svcpl	0x00495458
     b64:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     b68:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     b6c:	00666544 	rsbeq	r6, r6, r4, asr #10
     b70:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     b74:	6972545f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
     b78:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
     b7c:	7369525f 	cmnvc	r9, #-268435451	; 0xf0000005
     b80:	00676e69 	rsbeq	r6, r7, r9, ror #28
     b84:	504d4154 	subpl	r4, sp, r4, asr r1
     b88:	4154535f 	cmpmi	r4, pc, asr r3
     b8c:	495f504d 	ldmdbmi	pc, {r0, r2, r3, r6, ip, lr}^	; <UNPREDICTABLE>
     b90:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b94:	75626544 	strbvc	r6, [r2, #-1348]!	; 0x544
     b98:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
     b9c:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
     ba0:	5152495f 	cmppl	r2, pc, asr r9
     ba4:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     ba8:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     bac:	61657274 	smcvs	22308	; 0x5724
     bb0:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
     bb4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     bb8:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     bbc:	5355004c 	cmppl	r5, #76	; 0x4c
     bc0:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     bc4:	5152495f 	cmppl	r2, pc, asr r9
     bc8:	5047006e 	subpl	r0, r7, lr, rrx
     bcc:	4f5f4f49 	svcmi	0x005f4f49
     bd0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     bd4:	00444f5f 	subeq	r4, r4, pc, asr pc
     bd8:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     bdc:	5152495f 	cmppl	r2, pc, asr r9
     be0:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     be4:	5f304954 	svcpl	0x00304954
     be8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     bec:	52534200 	subspl	r4, r3, #0, 4
     bf0:	47004852 	smlsdmi	r0, r2, r8, r4
     bf4:	5f4f4950 	svcpl	0x004f4950
     bf8:	64507550 	ldrbvs	r7, [r0], #-1360	; 0x550
     bfc:	574f445f 	smlsldpl	r4, pc, pc, r4	; <UNPREDICTABLE>
     c00:	4344004e 	movtmi	r0, #16462	; 0x404e
     c04:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
     c08:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c0c:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
     c10:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     c14:	45006e51 	strmi	r6, [r0, #-3665]	; 0xe51
     c18:	5f495458 	svcpl	0x00495458
     c1c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     c20:	6576455f 	ldrbvs	r4, [r6, #-1375]!	; 0x55f
     c24:	4700746e 	strmi	r7, [r0, -lr, ror #8]
     c28:	5f4f4950 	svcpl	0x004f4950
     c2c:	64507550 	ldrbvs	r7, [r0], #-1360	; 0x550
     c30:	0050555f 	subseq	r5, r0, pc, asr r5
     c34:	5f555046 	svcpl	0x00555046
     c38:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c3c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c40:	6f435f4f 	svcvs	0x00435f4f
     c44:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     c48:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     c4c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     c50:	4f495047 	svcmi	0x00495047
     c54:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     c58:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     c5c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     c60:	43324900 	teqmi	r2, #0, 18
     c64:	52455f31 	subpl	r5, r5, #49, 30	; 0xc4
     c68:	5152495f 	cmppl	r2, pc, asr r9
     c6c:	4441006e 	strbmi	r0, [r1], #-110	; 0x6e
     c70:	52495f43 	subpl	r5, r9, #268	; 0x10c
     c74:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
     c78:	5f32414d 	svcpl	0x0032414d
     c7c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
     c80:	5f316d61 	svcpl	0x00316d61
     c84:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c88:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c8c:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     c90:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     c94:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     c98:	5f657275 	svcpl	0x00657275
     c9c:	616d0062 	cmnvs	sp, r2, rrx
     ca0:	43006e69 	movwmi	r6, #3689	; 0xe69
     ca4:	5f314e41 	svcpl	0x00314e41
     ca8:	5f315852 	svcpl	0x00315852
     cac:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     cb0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     cb4:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     cb8:	47007469 	strmi	r7, [r0, -r9, ror #8]
     cbc:	5f4f4950 	svcpl	0x004f4950
     cc0:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     cc4:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     cc8:	43006465 	movwmi	r6, #1125	; 0x465
     ccc:	5f314e41 	svcpl	0x00314e41
     cd0:	5f454353 	svcpl	0x00454353
     cd4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     cd8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     cdc:	43535f32 	cmpmi	r3, #50, 30	; 0xc8
     ce0:	52495f45 	subpl	r5, r9, #276	; 0x114
     ce4:	52006e51 	andpl	r6, r0, #1296	; 0x510
     ce8:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     cec:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cf0:	5f47544f 	svcpl	0x0047544f
     cf4:	575f5348 	ldrbpl	r5, [pc, -r8, asr #6]
     cf8:	5f50554b 	svcpl	0x0050554b
     cfc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d00:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     d04:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     d08:	45006e51 	strmi	r6, [r0, #-3665]	; 0xe51
     d0c:	31495458 	cmpcc	r9, r8, asr r4
     d10:	5152495f 	cmppl	r2, pc, asr r9
     d14:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     d18:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     d1c:	61657274 	smcvs	22308	; 0x5724
     d20:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
     d24:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d28:	76457870 			; <UNDEFINED> instruction: 0x76457870
     d2c:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
     d30:	00747369 	rsbseq	r7, r4, r9, ror #6
     d34:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     d38:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     d3c:	7243656e 	subvc	r6, r3, #461373440	; 0x1b800000
     d40:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
     d44:	76727000 	ldrbtvc	r7, [r2], -r0
     d48:	63656843 	cmnvs	r5, #4390912	; 0x430000
     d4c:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	; 0xfffffe54
     d50:	64657961 	strbtvs	r7, [r5], #-2401	; 0x961
     d54:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     d58:	43787000 	cmnmi	r8, #0
     d5c:	756f526f 	strbvc	r5, [pc, #-623]!	; af5 <_Min_Stack_Size+0x6f5>
     d60:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     d64:	43787000 	cmnmi	r8, #0
     d68:	756f526f 	strbvc	r5, [pc, #-623]!	; b01 <_Min_Stack_Size+0x701>
     d6c:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     d70:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xf43
     d74:	44787000 	ldrbtmi	r7, [r8], #-0
     d78:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     d7c:	6f436465 	svcvs	0x00436465
     d80:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     d84:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     d88:	00747369 	rsbseq	r7, r4, r9, ror #6
     d8c:	6f506c75 	svcvs	0x00506c75
     d90:	65537472 	ldrbvs	r7, [r3, #-1138]	; 0x472
     d94:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
     d98:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     d9c:	614d7470 	hvcvs	55104	; 0xd740
     da0:	76006b73 			; <UNDEFINED> instruction: 0x76006b73
     da4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     da8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     dac:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     db0:	76006573 			; <UNDEFINED> instruction: 0x76006573
     db4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     db8:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xe49
     dbc:	73007472 	movwvc	r7, #1138	; 0x472
     dc0:	5f657a69 	svcpl	0x00657a69
     dc4:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     dc8:	76657250 			; <UNDEFINED> instruction: 0x76657250
     dcc:	73756f69 	cmnvc	r5, #420	; 0x1a4
     dd0:	6f437800 	svcvs	0x00437800
     dd4:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     dd8:	52656e69 	rsbpl	r6, r5, #1680	; 0x690
     ddc:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     de0:	6f724665 	svcvs	0x00724665
     de4:	6576456d 	ldrbvs	r4, [r6, #-1389]!	; 0x56d
     de8:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     dec:	75007473 	strvc	r7, [r0, #-1139]	; 0x473
     df0:	646e4978 	strbtvs	r4, [lr], #-2424	; 0x978
     df4:	70007865 	andvc	r7, r0, r5, ror #16
     df8:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     dfc:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     e00:	7546656e 	strbvc	r6, [r6, #-1390]	; 0x56e
     e04:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     e08:	70006e6f 	andvc	r6, r0, pc, ror #28
     e0c:	626e5578 	rsbvs	r5, lr, #120, 10	; 0x1e000000
     e10:	6b636f6c 	blvs	18dcbc8 <_Min_Stack_Size+0x18dc7c8>
     e14:	52436465 	subpl	r6, r3, #1694498816	; 0x65000000
     e18:	78004243 	stmdavc	r0, {r0, r1, r6, r9, lr}
     e1c:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
     e20:	4c636972 	stclmi	9, cr6, [r3], #-456	; 0xfffffe38
     e24:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     e28:	006d6574 	rsbeq	r6, sp, r4, ror r5
     e2c:	774f7670 	smlsldxvc	r7, pc, r0, r6	; <UNPREDICTABLE>
     e30:	0072656e 	rsbseq	r6, r2, lr, ror #10
     e34:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
     e38:	6f54736b 	svcvs	0x0054736b
     e3c:	616c6544 	cmnvs	ip, r4, asr #10
     e40:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
     e44:	706d6554 	rsbvc	r6, sp, r4, asr r5
     e48:	6f507600 	svcvs	0x00507600
     e4c:	6c437472 	cfstrdvs	mvd7, [r3], {114}	; 0x72
     e50:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     e54:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     e58:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     e5c:	6b73614d 	blvs	1cd9398 <_Min_Stack_Size+0x1cd8f98>
     e60:	6e694d00 	cdpvs	13, 6, cr4, cr9, cr0, {0}
     e64:	73694c69 	cmnvc	r9, #26880	; 0x6900
     e68:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0x974
     e6c:	00745f6d 	rsbseq	r5, r4, sp, ror #30
     e70:	6b636954 	blvs	18db3c8 <_Min_Stack_Size+0x18dafc8>
     e74:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     e78:	7000745f 	andvc	r7, r0, pc, asr r4
     e7c:	6e6f4378 	mcrvs	3, 3, r4, cr15, cr8, {3}
     e80:	694c7473 	stmdbvs	ip, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     e84:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     e88:	5453494c 	ldrbpl	r4, [r3], #-2380	; 0x94c
     e8c:	74497800 	strbvc	r7, [r9], #-2048	; 0x800
     e90:	61566d65 	cmpvs	r6, r5, ror #26
     e94:	0065756c 	rsbeq	r7, r5, ip, ror #10
     e98:	52437870 	subpl	r7, r3, #112, 16	; 0x700000
     e9c:	78004243 	stmdavc	r0, {r0, r1, r6, r9, lr}
     ea0:	6b736154 	blvs	1cd93f8 <_Min_Stack_Size+0x1cd8ff8>
     ea4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0x547
     ea8:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     eac:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     eb0:	494c7800 	stmdbmi	ip, {fp, ip, sp, lr}^
     eb4:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     eb8:	004d4554 	subeq	r4, sp, r4, asr r5
     ebc:	43767270 	cmnmi	r6, #112, 4
     ec0:	6b636568 	blvs	18da468 <_Min_Stack_Size+0x18da068>
     ec4:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
     ec8:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
     ecc:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     ed0:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     ed4:	526f4300 	rsbpl	r4, pc, #0, 6
     ed8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     edc:	6148656e 	cmpvs	r8, lr, ror #10
     ee0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     ee4:	7600745f 			; <UNDEFINED> instruction: 0x7600745f
     ee8:	6f526f43 	svcvs	0x00526f43
     eec:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     ef0:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
     ef4:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     ef8:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     efc:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     f00:	50780065 	rsbspl	r0, r8, r5, rrx
     f04:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0x361
     f08:	63695464 	cmnvs	r9, #100, 8	; 0x64000000
     f0c:	7000736b 	andvc	r7, r0, fp, ror #6
     f10:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
     f14:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     f18:	6f526f43 	svcvs	0x00526f43
     f1c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     f20:	76700065 	ldrbtvc	r0, [r0], -r5, rrx
     f24:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
     f28:	656e6961 	strbvs	r6, [lr, #-2401]!	; 0x961
     f2c:	50780072 	rsbspl	r0, r8, r2, ror r0
     f30:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     f34:	6552676e 	ldrbvs	r6, [r2, #-1902]	; 0x76e
     f38:	43796461 	cmnmi	r9, #1627389952	; 0x61000000
     f3c:	756f526f 	strbvc	r5, [pc, #-623]!	; cd5 <_Min_Stack_Size+0x8d5>
     f40:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     f44:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     f48:	6f437600 	svcvs	0x00437600
     f4c:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     f50:	41656e69 	cmnmi	r5, r9, ror #28
     f54:	6f546464 	svcvs	0x00546464
     f58:	616c6544 	cmnvs	ip, r4, asr #10
     f5c:	4c646579 	cfstr64mi	mvdx6, [r4], #-484	; 0xfffffe1c
     f60:	00747369 	rsbseq	r7, r4, r9, ror #6
     f64:	4f437263 	svcmi	0x00437263
     f68:	54554f52 	ldrbpl	r4, [r5], #-3922	; 0xf52
     f6c:	5f454e49 	svcpl	0x00454e49
     f70:	45444f43 	strbmi	r4, [r4, #-3907]	; 0xf43
     f74:	73694c00 	cmnvc	r9, #0, 24
     f78:	00745f74 	rsbseq	r5, r4, r4, ror pc
     f7c:	694c7875 	stmdbvs	ip, {r0, r2, r4, r5, r6, fp, ip, sp, lr}^
     f80:	65527473 	ldrbvs	r7, [r2, #-1139]	; 0x473
     f84:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xf6d
     f88:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     f8c:	00747865 	rsbseq	r7, r4, r5, ror #16
     f90:	42435243 	submi	r5, r3, #805306372	; 0x30000004
     f94:	7000745f 	andvc	r7, r0, pc, asr r4
     f98:	65764f78 	ldrbvs	r4, [r6, #-3960]!	; 0xf78
     f9c:	6f6c6672 	svcvs	0x006c6672
     fa0:	6c654477 	cfstrdvs	mvd4, [r5], #-476	; 0xfffffe24
     fa4:	64657961 	strbtvs	r7, [r5], #-2401	; 0x961
     fa8:	6f526f43 	svcvs	0x00526f43
     fac:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     fb0:	73694c65 	cmnvc	r9, #25856	; 0x6500
     fb4:	4c760074 	ldclmi	0, cr0, [r6], #-464	; 0xfffffe30
     fb8:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     fbc:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
     fc0:	646e4574 	strbtvs	r4, [lr], #-1396	; 0x574
     fc4:	726f6300 	rsbvc	r6, pc, #0, 6
     fc8:	6f526f43 	svcvs	0x00526f43
     fcc:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     fd0:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     fd4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; e0c <_Min_Stack_Size+0xa0c>
     fd8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     fdc:	4255006b 	subsmi	r0, r5, #107	; 0x6b
     fe0:	54657361 	strbtpl	r7, [r5], #-865	; 0x361
     fe4:	5f657079 	svcpl	0x00657079
     fe8:	44780074 	ldrbtmi	r0, [r8], #-116	; 0x74
     fec:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     ff0:	6f436465 	svcvs	0x00436465
     ff4:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     ff8:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     ffc:	31747369 	cmncc	r4, r9, ror #6
    1000:	65447800 	strbvs	r7, [r4, #-2048]	; 0x800
    1004:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0x16c
    1008:	526f4364 	rsbpl	r4, pc, #100, 6	; 0x90000001
    100c:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    1010:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    1014:	00327473 	eorseq	r7, r2, r3, ror r4
    1018:	754e7875 	strbvc	r7, [lr, #-2165]	; 0x875
    101c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1020:	7449664f 	strbvc	r6, [r9], #-1615	; 0x64f
    1024:	00736d65 	rsbseq	r6, r3, r5, ror #26
    1028:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    102c:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    1030:	73696c61 	cmnvc	r9, #24832	; 0x6100
    1034:	526f4365 	rsbpl	r4, pc, #-1811939327	; 0x94000001
    1038:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    103c:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    1040:	00737473 	rsbseq	r7, r3, r3, ror r4
    1044:	65527870 	ldrbvs	r7, [r2, #-2160]	; 0x870
    1048:	43796461 	cmnmi	r9, #1627389952	; 0x61000000
    104c:	756f526f 	strbvc	r5, [pc, #-623]!	; de5 <_Min_Stack_Size+0x9e5>
    1050:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
    1054:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    1058:	4c780073 	ldclmi	0, cr0, [r8], #-460	; 0xfffffe34
    105c:	54747361 	ldrbtpl	r7, [r4], #-865	; 0x361
    1060:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
    1064:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1068:	6f437800 	svcvs	0x00437800
    106c:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
    1070:	54656e69 	strbtpl	r6, [r5], #-3689	; 0xe69
    1074:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
    1078:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    107c:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0x500
    1080:	6f43706f 	svcvs	0x0043706f
    1084:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
    1088:	52656e69 	rsbpl	r6, r5, #1680	; 0x690
    108c:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1090:	6f697250 	svcvs	0x00697250
    1094:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1098:	65724600 	ldrbvs	r4, [r2, #-1536]!	; 0x600
    109c:	4f545265 	svcmi	0x00545265
    10a0:	72632f53 	rsbvc	r2, r3, #332	; 0x14c
    10a4:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    10a8:	632e656e 	teqvs	lr, #461373440	; 0x1b800000
    10ac:	50787500 	rsbspl	r7, r8, r0, lsl #10
    10b0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    10b4:	00797469 	rsbseq	r7, r9, r9, ror #8
    10b8:	6e497870 	mcrvs	8, 2, r7, cr9, cr0, {3}
    10bc:	00786564 	rsbseq	r6, r8, r4, ror #10
    10c0:	4e494d78 	mcrmi	13, 2, r4, cr9, cr8, {3}
    10c4:	494c5f49 	stmdbmi	ip, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    10c8:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    10cc:	004d4554 	subeq	r4, sp, r4, asr r5
    10d0:	6f507670 	svcvs	0x00507670
    10d4:	614d7472 	hvcvs	55106	; 0xd742
    10d8:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    10dc:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    10e0:	6f54656d 	svcvs	0x0054656d
    10e4:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    10e8:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
    10ec:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
    10f0:	61697469 	cmnvs	r9, r9, ror #8
    10f4:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
    10f8:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    10fc:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0x500
    1100:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
    1104:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    1108:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    110c:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0x974
    1110:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    1114:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    1118:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    111c:	6f724774 	svcvs	0x00724774
    1120:	75007075 	strvc	r7, [r0, #-117]	; 0x75
    1124:	65764578 	ldrbvs	r4, [r6, #-1400]!	; 0x578
    1128:	7247746e 	subvc	r7, r7, #1845493760	; 0x6e000000
    112c:	4770756f 	ldrbmi	r7, [r0, -pc, ror #10]!
    1130:	754e7465 	strbvc	r7, [lr, #-1125]	; 0x465
    1134:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1138:	65764500 	ldrbvs	r4, [r6, #-1280]!	; 0x500
    113c:	6942746e 	stmdbvs	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1140:	745f7374 	ldrbvc	r7, [pc], #-884	; 1148 <_Min_Stack_Size+0xd48>
    1144:	6c417800 	mcrrvs	8, 0, r7, r1, cr0
    1148:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    114c:	65695979 	strbvs	r5, [r9, #-2425]!	; 0x979
    1150:	6465646c 	strbtvs	r6, [r5], #-1132	; 0x46c
    1154:	426c7500 	rsbmi	r7, ip, #0, 10
    1158:	54737469 	ldrbtpl	r7, [r3], #-1129	; 0x469
    115c:	7465536f 	strbtvc	r5, [r5], #-879	; 0x36f
    1160:	65764500 	ldrbvs	r4, [r6, #-1280]!	; 0x500
    1164:	7247746e 	subvc	r7, r7, #1845493760	; 0x6e000000
    1168:	5f70756f 	svcpl	0x0070756f
    116c:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
    1170:	6b736154 	blvs	1cd96c8 <_Min_Stack_Size+0x1cd92c8>
    1174:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    1178:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    117c:	42726f46 	rsbsmi	r6, r2, #280	; 0x118
    1180:	00737469 	rsbseq	r7, r3, r9, ror #8
    1184:	6f437875 	svcvs	0x00437875
    1188:	6f72746e 	svcvs	0x0072746e
    118c:	7469426c 	strbtvc	r4, [r9], #-620	; 0x26c
    1190:	54780073 	ldrbtpl	r0, [r8], #-115	; 0x73
    1194:	6f656d69 	svcvs	0x00656d69
    1198:	634f7475 	movtvs	r7, #62581	; 0xf475
    119c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    11a0:	45006465 	strmi	r6, [r0, #-1125]	; 0x465
    11a4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    11a8:	756f7247 	strbvc	r7, [pc, #-583]!	; f69 <_Min_Stack_Size+0xb69>
    11ac:	6e614870 	mcrvs	8, 3, r4, cr1, cr0, {3}
    11b0:	5f656c64 	svcpl	0x00656c64
    11b4:	45780074 	ldrbmi	r0, [r8, #-116]!	; 0x74
    11b8:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    11bc:	756f7247 	strbvc	r7, [pc, #-583]!	; f7d <_Min_Stack_Size+0xb7d>
    11c0:	74655370 	strbtvc	r5, [r5], #-880	; 0x370
    11c4:	73746942 	cmnvc	r4, #1081344	; 0x108000
    11c8:	4c787000 	ldclmi	0, cr7, [r8], #-0
    11cc:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
    11d0:	006d6574 	rsbeq	r6, sp, r4, ror r5
    11d4:	76457870 			; <UNDEFINED> instruction: 0x76457870
    11d8:	42746e65 	rsbsmi	r6, r4, #1616	; 0x650
    11dc:	00737469 	rsbseq	r7, r3, r9, ror #8
    11e0:	65764578 	ldrbvs	r4, [r6, #-1400]!	; 0x578
    11e4:	7247746e 	subvc	r7, r7, #1845493760	; 0x6e000000
    11e8:	5370756f 	cmnpl	r0, #465567744	; 0x1bc00000
    11ec:	00636e79 	rsbeq	r6, r3, r9, ror lr
    11f0:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    11f4:	534f5452 	movtpl	r5, #62546	; 0xf452
    11f8:	6576652f 	ldrbvs	r6, [r6, #-1327]!	; 0x52f
    11fc:	675f746e 	ldrbvs	r7, [pc, -lr, ror #8]
    1200:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1204:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1208:	65764578 	ldrbvs	r4, [r6, #-1400]!	; 0x578
    120c:	7247746e 	subvc	r7, r7, #1845493760	; 0x6e000000
    1210:	4470756f 	ldrbtmi	r7, [r0], #-1391	; 0x56f
    1214:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
    1218:	6f697469 	svcvs	0x00697469
    121c:	7875006e 	ldmdavc	r5!, {r1, r2, r3, r5, r6}^
    1220:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1224:	45746e65 	ldrbmi	r6, [r4, #-3685]!	; 0xe65
    1228:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    122c:	73746942 	cmnvc	r4, #1081344	; 0x108000
    1230:	61547600 	cmpvs	r4, r0, lsl #12
    1234:	6c506b73 	mrrcvs	11, 7, r6, r0, cr3
    1238:	4f656361 	svcmi	0x00656361
    123c:	6f6e556e 	svcvs	0x006e556e
    1240:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
    1244:	76456465 	strbvc	r6, [r5], -r5, ror #8
    1248:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
    124c:	00747369 	rsbseq	r7, r4, r9, ror #6
    1250:	65527875 	ldrbvs	r7, [r2, #-2165]	; 0x875
    1254:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    1258:	6f507600 	svcvs	0x00507600
    125c:	72467472 	subvc	r7, r6, #1912602624	; 0x72000000
    1260:	75006565 	strvc	r6, [r0, #-1381]	; 0x565
    1264:	74694278 	strbtvc	r4, [r9], #-632	; 0x278
    1268:	576f5473 			; <UNDEFINED> instruction: 0x576f5473
    126c:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
    1270:	7600726f 	strvc	r7, [r0], -pc, ror #4
    1274:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    1278:	6f724774 	svcvs	0x00724774
    127c:	65537075 	ldrbvs	r7, [r3, #-117]	; 0x75
    1280:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
    1284:	6c614373 	stclvs	3, cr4, [r1], #-460	; 0xfffffe34
    1288:	6361626c 	cmnvs	r1, #108, 4	; 0xc0000006
    128c:	7875006b 	ldmdavc	r5!, {r0, r1, r3, r5, r6}^
    1290:	73746942 	cmnvc	r4, #1081344	; 0x108000
    1294:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    1298:	6f466465 	svcvs	0x00466465
    129c:	76700072 			; <UNDEFINED> instruction: 0x76700072
    12a0:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    12a4:	6f724774 	svcvs	0x00724774
    12a8:	70007075 	andvc	r7, r0, r5, ror r0
    12ac:	65547672 	ldrbvs	r7, [r4, #-1650]	; 0x672
    12b0:	61577473 	cmpvs	r7, r3, ror r4
    12b4:	6f437469 	svcvs	0x00437469
    12b8:	7469646e 	strbtvc	r6, [r9], #-1134	; 0x46e
    12bc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    12c0:	656c4378 	strbvs	r4, [ip, #-888]!	; 0x378
    12c4:	6e4f7261 	cdpvs	2, 4, cr7, cr15, cr1, {3}
    12c8:	74697845 	strbtvc	r7, [r9], #-2117	; 0x845
    12cc:	76457800 	strbvc	r7, [r5], -r0, lsl #16
    12d0:	47746e65 	ldrbmi	r6, [r4, -r5, ror #28]!
    12d4:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    12d8:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    12dc:	73746942 	cmnvc	r4, #1081344	; 0x108000
    12e0:	45787500 	ldrbmi	r7, [r8, #-1280]!	; 0x500
    12e4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    12e8:	756f7247 	strbvc	r7, [pc, #-583]!	; 10a9 <_Min_Stack_Size+0xca9>
    12ec:	6d754e70 	ldclvs	14, cr4, [r5, #-448]!	; 0xfffffe40
    12f0:	00726562 	rsbseq	r6, r2, r2, ror #10
    12f4:	65764578 	ldrbvs	r4, [r6, #-1400]!	; 0x578
    12f8:	7247746e 	subvc	r7, r7, #1845493760	; 0x6e000000
    12fc:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
    1300:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1304:	73746942 	cmnvc	r4, #1081344	; 0x108000
    1308:	76457800 	strbvc	r7, [r5], -r0, lsl #16
    130c:	47746e65 	ldrbmi	r6, [r4, -r5, ror #28]!
    1310:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1314:	61656c43 	cmnvs	r5, r3, asr #24
    1318:	74694272 	strbtvc	r4, [r9], #-626	; 0x272
    131c:	6f724673 	svcvs	0x00724673
    1320:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    1324:	61547800 	cmpvs	r4, r0, lsl #16
    1328:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xb73
    132c:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
    1330:	006c6c41 	rsbeq	r6, ip, r1, asr #24
    1334:	69427875 	stmdbvs	r2, {r0, r2, r4, r5, r6, fp, ip, sp, lr}^
    1338:	6f547374 	svcvs	0x00547374
    133c:	61656c43 	cmnvs	r5, r3, asr #24
    1340:	54780072 	ldrbtpl	r0, [r8], #-114	; 0x72
    1344:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
    1348:	63537465 	cmpvs	r3, #1694498816	; 0x65000000
    134c:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
    1350:	5372656c 	cmnpl	r2, #108, 10	; 0x1b000000
    1354:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    1358:	53787500 	cmnpl	r8, #0, 10
    135c:	64657661 	strbtvs	r7, [r5], #-1633	; 0x661
    1360:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    1364:	70757272 	rsbsvc	r7, r5, r2, ror r2
    1368:	61745374 	cmnvs	r4, r4, ror r3
    136c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1370:	74614d78 	strbtvc	r4, [r1], #-3448	; 0xd78
    1374:	6f466863 	svcvs	0x00466863
    1378:	00646e75 	rsbeq	r6, r4, r5, ror lr
    137c:	694c7870 	stmdbvs	ip, {r4, r5, r6, fp, ip, sp, lr}^
    1380:	76007473 			; <UNDEFINED> instruction: 0x76007473
    1384:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    1388:	74697845 	strbtvc	r7, [r9], #-2117	; 0x845
    138c:	74697243 	strbtvc	r7, [r9], #-579	; 0x243
    1390:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
    1394:	45787500 	ldrbmi	r7, [r8, #-1280]!	; 0x500
    1398:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    139c:	73746942 	cmnvc	r4, #1081344	; 0x108000
    13a0:	76457600 	strbvc	r7, [r5], -r0, lsl #12
    13a4:	47746e65 	ldrbmi	r6, [r4, -r5, ror #28]!
    13a8:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    13ac:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0x544
    13b0:	76006574 			; <UNDEFINED> instruction: 0x76006574
    13b4:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    13b8:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xe45
    13bc:	69724372 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, lr}^
    13c0:	61636974 	smcvs	13972	; 0x3694
    13c4:	7875006c 	ldmdavc	r5!, {r2, r3, r5, r6}^
    13c8:	73746942 	cmnvc	r4, #1081344	; 0x108000
    13cc:	65536f54 	ldrbvs	r6, [r3, #-3924]	; 0xf54
    13d0:	50760074 	rsbspl	r0, r6, r4, ror r0
    13d4:	5974726f 	ldmdbpl	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    13d8:	646c6569 	strbtvs	r6, [ip], #-1385	; 0x569
    13dc:	61547600 	cmpvs	r4, r0, lsl #12
    13e0:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xb73
    13e4:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    13e8:	6c6c4164 	stfvse	f4, [ip], #-400	; 0xfffffe70
    13ec:	4f787500 	svcmi	0x00787500
    13f0:	69676972 	stmdbvs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    13f4:	426c616e 	rsbmi	r6, ip, #-2147483621	; 0x8000001b
    13f8:	61567469 	cmpvs	r6, r9, ror #8
    13fc:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1400:	69615778 	stmdbvs	r1!, {r3, r4, r5, r6, r8, r9, sl, ip, lr}^
    1404:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
    1408:	426c6c41 	rsbmi	r6, ip, #16640	; 0x4100
    140c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1410:	69615778 	stmdbvs	r1!, {r3, r4, r5, r6, r8, r9, sl, ip, lr}^
    1414:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1418:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
    141c:	654d6e6f 	strbvs	r6, [sp, #-3695]	; 0xe6f
    1420:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
    1424:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    1428:	00646e45 	rsbeq	r6, r4, r5, asr #28
    142c:	65764578 	ldrbvs	r4, [r6, #-1400]!	; 0x578
    1430:	7247746e 	subvc	r7, r7, #1845493760	; 0x6e000000
    1434:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
    1438:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
    143c:	54780065 	ldrbtpl	r0, [r8], #-101	; 0x65
    1440:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
    1444:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
    1448:	6f724665 	svcvs	0x00724665
    144c:	6f6e556d 	svcvs	0x006e556d
    1450:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
    1454:	76456465 	strbvc	r6, [r5], -r5, ror #8
    1458:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
    145c:	00747369 	rsbseq	r7, r4, r9, ror #6
    1460:	74497870 	strbvc	r7, [r9], #-2160	; 0x870
    1464:	6f546d65 	svcvs	0x00546d65
    1468:	6f6d6552 	svcvs	0x006d6552
    146c:	78006576 	stmdavc	r0, {r1, r2, r4, r5, r6, r8, sl, sp, lr}
    1470:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    1474:	49664f65 	stmdbmi	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, lr}^
    1478:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    147c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1480:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
    1484:	006d6574 	rsbeq	r6, sp, r4, ror r5
    1488:	74497870 	strbvc	r7, [r9], #-2160	; 0x870
    148c:	74617265 	strbtvc	r7, [r1], #-613	; 0x265
    1490:	4600726f 	strmi	r7, [r0], -pc, ror #4
    1494:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1498:	2f534f54 	svccs	0x00534f54
    149c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    14a0:	7000632e 	andvc	r6, r0, lr, lsr #6
    14a4:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
    14a8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    14ac:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    14b0:	51637500 	cmnpl	r3, r0, lsl #10
    14b4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    14b8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    14bc:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0x800
    14c0:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
    14c4:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    14c8:	65536369 	ldrbvs	r6, [r3, #-873]	; 0x369
    14cc:	7246646e 	subvc	r6, r6, #1845493760	; 0x6e000000
    14d0:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    14d4:	63750052 	cmnvs	r5, #82	; 0x52
    14d8:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    14dc:	74654765 	strbtvc	r4, [r5], #-1893	; 0x765
    14e0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    14e4:	70795465 	rsbsvc	r5, r9, r5, ror #8
    14e8:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    14ec:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    14f0:	73654d65 	cmnvc	r5, #6464	; 0x1940
    14f4:	65676173 	strbvs	r6, [r7, #-371]!	; 0x173
    14f8:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    14fc:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    1500:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
    1504:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xf65
    1508:	7800745f 	stmdavc	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    150c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1510:	65724365 	ldrbvs	r4, [r2, #-869]!	; 0x365
    1514:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    1518:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    151c:	53676e69 	cmnpl	r7, #1680	; 0x690
    1520:	70616d65 	rsbvc	r6, r1, r5, ror #26
    1524:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xf68
    1528:	48787000 	ldmdami	r8!, {ip, sp, lr}^
    152c:	65686769 	strbvs	r6, [r8, #-1897]!	; 0x769
    1530:	69725072 	ldmdbvs	r2!, {r1, r4, r5, r6, ip, lr}^
    1534:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1538:	73615479 	cmnvc	r1, #2030043136	; 0x79000000
    153c:	6b6f576b 	blvs	1bd72f0 <_Min_Stack_Size+0x1bd6ef0>
    1540:	78006e65 	stmdavc	r0, {r0, r2, r5, r6, r9, sl, fp, sp, lr}
    1544:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1548:	51734965 	cmnpl	r3, r5, ror #18
    154c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1550:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xd45
    1554:	6f724679 	svcvs	0x00724679
    1558:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    155c:	75517600 	ldrbvc	r7, [r1, #-1536]	; 0x600
    1560:	53657565 	cmnpl	r5, #423624704	; 0x19400000
    1564:	75517465 	ldrbvc	r7, [r1, #-1125]	; 0x465
    1568:	4e657565 	cdpmi	5, 6, cr7, cr5, cr5, {3}
    156c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    1570:	51780072 	cmnpl	r8, r2, ror r0
    1574:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1578:	6b656550 	blvs	195aac0 <_Min_Stack_Size+0x195a6c0>
    157c:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 146c <_Min_Stack_Size+0x106c>
    1580:	00525349 	subseq	r5, r2, r9, asr #6
    1584:	43767270 	cmnmi	r6, #112, 4
    1588:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
    158c:	46617461 	strbtmi	r7, [r1], -r1, ror #8
    1590:	516d6f72 	smcpl	55026	; 0xd6f2
    1594:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1598:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    159c:	75517765 	ldrbvc	r7, [r1, #-1893]	; 0x765
    15a0:	00657565 	rsbeq	r7, r5, r5, ror #10
    15a4:	43767270 	cmnmi	r6, #112, 4
    15a8:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
    15ac:	54617461 	strbtpl	r7, [r1], #-1121	; 0x461
    15b0:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0x16f
    15b4:	5f006575 	svcpl	0x00006575
    15b8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    15bc:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    15c0:	4d495478 	cfstrdmi	mvd5, [r9, #-480]	; 0xfffffe20
    15c4:	554f5f45 	strbpl	r5, [pc, #-3909]	; 687 <_Min_Stack_Size+0x287>
    15c8:	51780054 	cmnpl	r8, r4, asr r0
    15cc:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    15d0:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
    15d4:	52636972 	rsbpl	r6, r3, #1867776	; 0x1c8000
    15d8:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    15dc:	76006576 			; <UNDEFINED> instruction: 0x76006576
    15e0:	6b736154 	blvs	1cd9b38 <_Min_Stack_Size+0x1cd9738>
    15e4:	6f697250 	svcvs	0x00697250
    15e8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    15ec:	65686e49 	strbvs	r6, [r8, #-3657]!	; 0xe49
    15f0:	00746972 	rsbseq	r6, r4, r2, ror r9
    15f4:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
    15f8:	65526575 	ldrbvs	r6, [r2, #-1397]	; 0x575
    15fc:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    1600:	74497972 	strbvc	r7, [r9], #-2418	; 0x972
    1604:	70006d65 	andvc	r6, r0, r5, ror #26
    1608:	69724f63 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, r9, sl, fp, lr}^
    160c:	616e6967 	cmnvs	lr, r7, ror #18
    1610:	6165526c 	cmnvs	r5, ip, ror #4
    1614:	736f5064 	cmnvc	pc, #100	; 0x64
    1618:	6f697469 	svcvs	0x00697469
    161c:	6154006e 	cmpvs	r4, lr, rrx
    1620:	61486b73 	hvcvs	34483	; 0x86b3
    1624:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1628:	6d00745f 	cfstrsvs	mvf7, [r0, #-380]	; 0xfffffe84
    162c:	70636d65 	rsbvc	r6, r3, r5, ror #26
    1630:	78750079 	ldmdavc	r5!, {r0, r3, r4, r5, r6}^
    1634:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1638:	6d754e65 	ldclvs	14, cr4, [r5, #-404]!	; 0xfffffe6c
    163c:	00726562 	rsbseq	r6, r2, r2, ror #10
    1640:	65526370 	ldrbvs	r6, [r2, #-880]	; 0x370
    1644:	72466461 	subvc	r6, r6, #1627389952	; 0x61000000
    1648:	78006d6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    164c:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    1650:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
    1654:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1658:	51760074 	cmnpl	r6, r4, ror r0
    165c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1660:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0x544
    1664:	75006574 	strvc	r6, [r0, #-1396]	; 0x574
    1668:	6e654c78 	mcrvs	12, 3, r4, cr5, cr8, {3}
    166c:	00687467 	rsbeq	r7, r8, r7, ror #8
    1670:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1674:	616c506b 	cmnvs	ip, fp, rrx
    1678:	6e4f6563 	cdpvs	5, 4, cr6, cr15, cr3, {3}
    167c:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    1680:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
    1684:	63700074 	cmnvs	r0, #116	; 0x74
    1688:	64616548 	strbtvs	r6, [r1], #-1352	; 0x548
    168c:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0x800
    1690:	54657565 	strbtpl	r7, [r5], #-1381	; 0x565
    1694:	4d656b61 	fstmdbxmi	r5!, {d22-d69}	;@ Deprecated
    1698:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    169c:	75636552 	strbvc	r6, [r3, #-1362]!	; 0x552
    16a0:	76697372 			; <UNDEFINED> instruction: 0x76697372
    16a4:	54780065 	ldrbtpl	r0, [r8], #-101	; 0x65
    16a8:	4f656d69 	svcmi	0x00656d69
    16ac:	746e456e 	strbtvc	r4, [lr], #-1390	; 0x56e
    16b0:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
    16b4:	4a780067 	bmi	1e01858 <_Min_Stack_Size+0x1e01458>
    16b8:	50747375 	rsbspl	r7, r4, r5, ror r3
    16bc:	696b6565 	stmdbvs	fp!, {r0, r2, r5, r6, r8, sl, sp, lr}^
    16c0:	7000676e 	andvc	r6, r0, lr, ror #14
    16c4:	73497672 	movtvc	r7, #38514	; 0x9672
    16c8:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    16cc:	706d4565 	rsbvc	r4, sp, r5, ror #10
    16d0:	76007974 			; <UNDEFINED> instruction: 0x76007974
    16d4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    16d8:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
    16dc:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xf54
    16e0:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    16e4:	78007972 	stmdavc	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
    16e8:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    16ec:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
    16f0:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
    16f4:	646e6553 	strbtvs	r6, [lr], #-1363	; 0x553
    16f8:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0x800
    16fc:	43657565 	cmnmi	r5, #423624704	; 0x19400000
    1700:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
    1704:	74754d65 	ldrbtvc	r4, [r5], #-3429	; 0xd65
    1708:	78007865 	stmdavc	r0, {r0, r2, r5, r6, fp, ip, sp, lr}
    170c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1710:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
    1714:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    1718:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1608 <_Min_Stack_Size+0x1208>
    171c:	00525349 	subseq	r5, r2, r9, asr #6
    1720:	754d7870 	strbvc	r7, [sp, #-2160]	; 0x870
    1724:	00786574 	rsbseq	r6, r8, r4, ror r5
    1728:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    172c:	534f5452 	movtpl	r5, #62546	; 0xf452
    1730:	6575712f 	ldrbvs	r7, [r5, #-303]!	; 0x12f
    1734:	632e6575 	teqvs	lr, #490733568	; 0x1d400000
    1738:	61547600 	cmpvs	r4, r0, lsl #12
    173c:	72506b73 	subsvc	r6, r0, #117760	; 0x1cc00
    1740:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1744:	69447974 	stmdbvs	r4, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    1748:	686e6973 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    174c:	74697265 	strbtvc	r7, [r9], #-613	; 0x265
    1750:	61547800 	cmpvs	r4, r0, lsl #16
    1754:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xb73
    1758:	72754374 	rsbsvc	r4, r5, #116, 6	; 0xd0000001
    175c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    1760:	6b736154 	blvs	1cd9cb8 <_Min_Stack_Size+0x1cd98b8>
    1764:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1768:	5100656c 	tstpl	r0, ip, ror #10
    176c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1770:	7500745f 	strvc	r7, [r0, #-1119]	; 0x45f
    1774:	78614d78 	stmdavc	r1!, {r3, r4, r5, r6, r8, sl, fp, lr}^
    1778:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    177c:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    1780:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1784:	6e654c65 	cdpvs	12, 6, cr4, cr5, cr5, {3}
    1788:	00687467 	rsbeq	r7, r8, r7, ror #8
    178c:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1790:	6157736b 	cmpvs	r7, fp, ror #6
    1794:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    1798:	526f5467 	rsbpl	r5, pc, #1728053248	; 0x67000000
    179c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    17a0:	75006576 	strvc	r6, [r0, #-1398]	; 0x576
    17a4:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
    17a8:	654d6575 	strbvs	r6, [sp, #-1397]	; 0x575
    17ac:	67617373 			; <UNDEFINED> instruction: 0x67617373
    17b0:	61577365 	cmpvs	r7, r5, ror #6
    17b4:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    17b8:	6f724667 	svcvs	0x00724667
    17bc:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    17c0:	49767000 	ldmdbmi	r6!, {ip, sp, lr}^
    17c4:	546d6574 	strbtpl	r6, [sp], #-1396	; 0x574
    17c8:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0x16f
    17cc:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    17d0:	55455551 	strbpl	r5, [r5, #-1361]	; 0x551
    17d4:	45780045 	ldrbmi	r0, [r8, #-69]!	; 0x45
    17d8:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    17dc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    17e0:	00746553 	rsbseq	r6, r4, r3, asr r5
    17e4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    17e8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    17ec:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    17f0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    17f4:	65527875 	ldrbvs	r7, [r2, #-2165]	; 0x875
    17f8:	73727563 	cmnvc	r2, #415236096	; 0x18c00000
    17fc:	43657669 	cmnmi	r5, #110100480	; 0x6900000
    1800:	436c6c61 	cmnmi	ip, #24832	; 0x6100
    1804:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1808:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0x800
    180c:	49657565 	stmdbmi	r5!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
    1810:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0x173
    1814:	75466575 	strbvc	r6, [r6, #-1397]	; 0x575
    1818:	72466c6c 	subvc	r6, r6, #108, 24	; 0x6c00
    181c:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    1820:	55510052 	ldrbpl	r0, [r1, #-82]	; 0x52
    1824:	5f455545 	svcpl	0x00455545
    1828:	49474552 	stmdbmi	r7, {r1, r4, r6, r8, sl, lr}^
    182c:	59525453 	ldmdbpl	r2, {r0, r1, r4, r6, sl, ip, lr}^
    1830:	4554495f 	ldrbmi	r4, [r4, #-2399]	; 0x95f
    1834:	5478004d 	ldrbtpl	r0, [r8], #-77	; 0x4d
    1838:	636f4c78 	cmnvs	pc, #120, 24	; 0x7800
    183c:	5178006b 	cmnpl	r8, fp, rrx
    1840:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1844:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
    1848:	43636972 	cmnmi	r3, #1867776	; 0x1c8000
    184c:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
    1850:	51780065 	cmnpl	r8, r5, rrx
    1854:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1858:	65766947 	ldrbvs	r6, [r6, #-2375]!	; 0x947
    185c:	6574754d 	ldrbvs	r7, [r4, #-1357]!	; 0x54d
    1860:	63655278 	cmnvs	r5, #120, 4	; 0x80000007
    1864:	69737275 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, ip, sp, lr}^
    1868:	76006576 			; <UNDEFINED> instruction: 0x76006576
    186c:	6b736154 	blvs	1cd9dc4 <_Min_Stack_Size+0x1cd99c4>
    1870:	7373694d 	cmnvc	r3, #1261568	; 0x134000
    1874:	69596465 	ldmdbvs	r9, {r0, r2, r5, r6, sl, sp, lr}^
    1878:	00646c65 	rsbeq	r6, r4, r5, ror #24
    187c:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1880:	6d65526b 	sfmvs	f5, 2, [r5, #-428]!	; 0xfffffe54
    1884:	4665766f 	strbtmi	r7, [r5], -pc, ror #12
    1888:	456d6f72 	strbmi	r6, [sp, #-3954]!	; 0xf72
    188c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    1890:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    1894:	76727000 	ldrbtvc	r7, [r2], -r0
    1898:	75517349 	ldrbvc	r7, [r1, #-841]	; 0x349
    189c:	46657565 	strbtmi	r7, [r5], -r5, ror #10
    18a0:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    18a4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    18a8:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
    18ac:	5f656c64 	svcpl	0x00656c64
    18b0:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    18b4:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    18b8:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    18bc:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    18c0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    18c4:	75427670 	strbvc	r7, [r2, #-1648]	; 0x670
    18c8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    18cc:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0x800
    18d0:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
    18d4:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    18d8:	65526369 	ldrbvs	r6, [r2, #-873]	; 0x369
    18dc:	00746573 	rsbseq	r6, r4, r3, ror r5
    18e0:	706f4378 	rsbvc	r4, pc, r8, ror r3	; <UNPREDICTABLE>
    18e4:	736f5079 	cmnvc	pc, #121	; 0x79
    18e8:	6f697469 	svcvs	0x00697469
    18ec:	6370006e 	cmnvs	r0, #110	; 0x6e
    18f0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    18f4:	6d614e65 	stclvs	14, cr4, [r1, #-404]!	; 0xfffffe6c
    18f8:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    18fc:	6c6e5576 	cfstr64vs	mvdx5, [lr], #-472	; 0xfffffe28
    1900:	516b636f 	cmnpl	fp, pc, ror #6
    1904:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1908:	78527800 	ldmdavc	r2, {fp, ip, sp, lr}^
    190c:	6b636f4c 	blvs	18dd644 <_Min_Stack_Size+0x18dd244>
    1910:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0x800
    1914:	52657565 	rsbpl	r7, r5, #423624704	; 0x19400000
    1918:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    191c:	00797274 	rsbseq	r7, r9, r4, ror r2
    1920:	61546370 	cmpvs	r4, r0, ror r3
    1924:	78006c69 	stmdavc	r0, {r0, r3, r5, r6, sl, fp, sp, lr}
    1928:	6b736154 	blvs	1cd9e80 <_Min_Stack_Size+0x1cd9a80>
    192c:	63656843 	cmnvs	r5, #4390912	; 0x430000
    1930:	726f466b 	rsbvc	r4, pc, #112197632	; 0x6b00000
    1934:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1938:	0074754f 	rsbseq	r7, r4, pc, asr #10
    193c:	65755176 	ldrbvs	r5, [r5, #-374]!	; 0x176
    1940:	6e556575 	mrcvs	5, 2, r6, cr5, cr5, {3}
    1944:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1948:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    194c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1950:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    1954:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1958:	74654765 	strbtvc	r4, [r5], #-1893	; 0x765
    195c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1960:	6d754e65 	ldclvs	14, cr4, [r5, #-404]!	; 0xfffffe6c
    1964:	00726562 	rsbseq	r6, r2, r2, ror #10
    1968:	736f5078 	cmnvc	pc, #120	; 0x78
    196c:	6f697469 	svcvs	0x00697469
    1970:	7875006e 	ldmdavc	r5!, {r1, r2, r3, r5, r6}^
    1974:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1978:	436c6169 	cmnmi	ip, #1073741850	; 0x4000001a
    197c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1980:	65755100 	ldrbvs	r5, [r5, #-256]!	; 0x100
    1984:	65526575 	ldrbvs	r6, [r2, #-1397]	; 0x575
    1988:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    198c:	74497972 	strbvc	r7, [r9], #-2418	; 0x972
    1990:	745f6d65 	ldrbvc	r6, [pc], #-3429	; 1998 <_Min_Stack_Size+0x1598>
    1994:	61547800 	cmpvs	r4, r0, lsl #16
    1998:	57736b73 			; <UNDEFINED> instruction: 0x57736b73
    199c:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
    19a0:	6f54676e 	svcvs	0x0054676e
    19a4:	646e6553 	strbtvs	r6, [lr], #-1363	; 0x553
    19a8:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0x800
    19ac:	53657565 	cmnpl	r5, #423624704	; 0x19400000
    19b0:	49657a69 	stmdbmi	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
    19b4:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0x26e
    19b8:	70007365 	andvc	r7, r0, r5, ror #6
    19bc:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
    19c0:	70006575 	andvc	r6, r0, r5, ror r5
    19c4:	69725763 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, r9, sl, ip, lr}^
    19c8:	6f546574 	svcvs	0x00546574
    19cc:	49787500 	ldmdbmi	r8!, {r8, sl, ip, sp, lr}^
    19d0:	536d6574 	cmnpl	sp, #116, 10	; 0x1d000000
    19d4:	00657a69 	rsbeq	r7, r5, r9, ror #20
    19d8:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    19dc:	616c506b 	cmnvs	ip, fp, rrx
    19e0:	6e4f6563 	cdpvs	5, 4, cr6, cr15, cr3, {3}
    19e4:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    19e8:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
    19ec:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
    19f0:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
    19f4:	00646574 	rsbeq	r6, r4, r4, ror r5
    19f8:	65755176 	ldrbvs	r5, [r5, #-374]!	; 0x176
    19fc:	61576575 	cmpvs	r7, r5, ror r5
    1a00:	6f467469 	svcvs	0x00467469
    1a04:	73654d72 	cmnvc	r5, #7296	; 0x1c80
    1a08:	65676173 	strbvs	r6, [r7, #-371]!	; 0x173
    1a0c:	74736552 	ldrbtvc	r6, [r3], #-1362	; 0x552
    1a10:	74636972 	strbtvc	r6, [r3], #-2418	; 0x972
    1a14:	75006465 	strvc	r6, [r0, #-1125]	; 0x465
    1a18:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
    1a1c:	70536575 	subsvc	r6, r3, r5, ror r5
    1a20:	73656361 	cmnvc	r5, #-2080374783	; 0x84000001
    1a24:	69617641 	stmdbvs	r1!, {r0, r6, r9, sl, ip, sp, lr}^
    1a28:	6c62616c 	stfvse	f6, [r2], #-432	; 0xfffffe50
    1a2c:	54760065 	ldrbtpl	r0, [r6], #-101	; 0x65
    1a30:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
    1a34:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1a38:	754f656d 	strbvc	r6, [pc, #-1389]	; 14d3 <_Min_Stack_Size+0x10d3>
    1a3c:	61745374 	cmnvs	r4, r4, ror r3
    1a40:	76006574 			; <UNDEFINED> instruction: 0x76006574
    1a44:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    1a48:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
    1a4c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
    1a50:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    1a54:	70757272 	rsbsvc	r7, r5, r2, ror r2
    1a58:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
    1a5c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1a60:	63700079 	cmnvs	r0, #121	; 0x79
    1a64:	6b736154 	blvs	1cd9fbc <_Min_Stack_Size+0x1cd9bbc>
    1a68:	656d614e 	strbvs	r6, [sp, #-334]!	; 0x14e
    1a6c:	6f507800 	svcvs	0x00507800
    1a70:	74537472 	ldrbvc	r7, [r3], #-1138	; 0x472
    1a74:	53747261 	cmnpl	r4, #268435462	; 0x10000006
    1a78:	64656863 	strbtvs	r6, [r5], #-2147	; 0x863
    1a7c:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    1a80:	75536500 	ldrbvc	r6, [r3, #-1280]	; 0x500
    1a84:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    1a88:	00646564 	rsbeq	r6, r4, r4, ror #10
    1a8c:	546b7374 	strbtpl	r7, [fp], #-884	; 0x374
    1a90:	436b7361 	cmnmi	fp, #-2080374783	; 0x84000001
    1a94:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1a98:	6c426c6f 	mcrrvs	12, 6, r6, r2, cr15
    1a9c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1aa0:	61547875 	cmpvs	r4, r5, ror r8
    1aa4:	75006b73 	strvc	r6, [r0, #-2931]	; 0xb73
    1aa8:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1aac:	7465476b 	strbtvc	r4, [r5], #-1899	; 0x76b
    1ab0:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    1ab4:	664f7265 	strbvs	r7, [pc], -r5, ror #4
    1ab8:	6b736154 	blvs	1cda010 <_Min_Stack_Size+0x1cd9c10>
    1abc:	78750073 	ldmdavc	r5!, {r0, r1, r4, r5, r6}^
    1ac0:	52706f54 	rsbspl	r6, r0, #84, 30	; 0x150
    1ac4:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1ac8:	6f697250 	svcvs	0x00697250
    1acc:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1ad0:	63537800 	cmpvs	r3, #0, 16
    1ad4:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
    1ad8:	5272656c 	rsbspl	r6, r2, #108, 10	; 0x1b000000
    1adc:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    1ae0:	5300676e 	movwpl	r6, #1902	; 0x76e
    1ae4:	6b636174 	blvs	18da0bc <_Min_Stack_Size+0x18d9cbc>
    1ae8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1aec:	7000745f 	andvc	r7, r0, pc, asr r4
    1af0:	61655278 	smcvs	21800	; 0x5528
    1af4:	61547964 	cmpvs	r4, r4, ror #18
    1af8:	4c736b73 	ldclmi	11, cr6, [r3], #-460	; 0xfffffe34
    1afc:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
    1b00:	6c757000 	ldclvs	0, cr7, [r5], #-0
    1b04:	61746f54 	cmnvs	r4, r4, asr pc
    1b08:	6e75526c 	cdpvs	2, 7, cr5, cr5, cr12, {3}
    1b0c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1b10:	63757000 	cmnvs	r5, #0
    1b14:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
    1b18:	7479426b 	ldrbtvc	r4, [r9], #-619	; 0x26b
    1b1c:	44780065 	ldrbtmi	r0, [r8], #-101	; 0x65
    1b20:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1b24:	61546465 	cmpvs	r4, r5, ror #8
    1b28:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    1b2c:	00317473 	eorseq	r7, r1, r3, ror r4
    1b30:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
    1b34:	64657961 	strbtvs	r7, [r5], #-2401	; 0x961
    1b38:	6b736154 	blvs	1cda090 <_Min_Stack_Size+0x1cd9c90>
    1b3c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    1b40:	78750032 	ldmdavc	r5!, {r1, r4, r5}^
    1b44:	4e424354 	mcrmi	3, 2, r4, cr2, cr4, {2}
    1b48:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    1b4c:	6c750072 	ldclvs	0, cr0, [r5], #-456	; 0xfffffe38
    1b50:	61726150 	cmnvs	r2, r0, asr r1
    1b54:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0x56d
    1b58:	70007372 	andvc	r7, r0, r2, ror r3
    1b5c:	6c417672 	mcrrvs	6, 7, r7, r1, cr2
    1b60:	61636f6c 	cmnvs	r3, ip, ror #30
    1b64:	43546574 	cmpmi	r4, #116, 10	; 0x1d000000
    1b68:	646e4142 	strbtvs	r4, [lr], #-322	; 0x142
    1b6c:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
    1b70:	5478006b 	ldrbtpl	r0, [r8], #-107	; 0x6b
    1b74:	546b7361 	strbtpl	r7, [fp], #-865	; 0x361
    1b78:	7365526f 	cmnvc	r5, #-268435450	; 0xf0000006
    1b7c:	00656d75 	rsbeq	r6, r5, r5, ror sp
    1b80:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
    1b84:	72437265 	subvc	r7, r3, #1342177286	; 0x50000006
    1b88:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
    1b8c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1b90:	73615472 	cmnvc	r1, #1912602624	; 0x72000000
    1b94:	7374006b 	cmnvc	r4, #107	; 0x6b
    1b98:	4243546b 	submi	r5, r3, #1795162112	; 0x6b000000
    1b9c:	69597800 	ldmdbvs	r9, {fp, ip, sp, lr}^
    1ba0:	52646c65 	rsbpl	r6, r4, #25856	; 0x6500
    1ba4:	69757165 	ldmdbvs	r5!, {r0, r2, r5, r6, r8, ip, sp, lr}^
    1ba8:	00646572 	rsbeq	r6, r4, r2, ror r5
    1bac:	6e557870 	mrcvs	8, 2, r7, cr5, cr0, {3}
    1bb0:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    1bb4:	5464656b 	strbtpl	r6, [r4], #-1387	; 0x56b
    1bb8:	75004243 	strvc	r4, [r0, #-579]	; 0x243
    1bbc:	61745373 	cmnvs	r4, r3, ror r3
    1bc0:	65446b63 	strbvs	r6, [r4, #-2915]	; 0xb63
    1bc4:	00687470 	rsbeq	r7, r8, r0, ror r4
    1bc8:	73755378 	cmnvc	r5, #120, 6	; 0xe0000001
    1bcc:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    1bd0:	61546465 	cmpvs	r4, r5, ror #8
    1bd4:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    1bd8:	70007473 	andvc	r7, r0, r3, ror r4
    1bdc:	694c7672 	stmdbvs	ip, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
    1be0:	61547473 	cmpvs	r4, r3, ror r4
    1be4:	69576b73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    1be8:	6e696874 	mcrvs	8, 3, r6, cr9, cr4, {3}
    1bec:	676e6953 			; <UNDEFINED> instruction: 0x676e6953
    1bf0:	694c656c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl, sp, lr}^
    1bf4:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    1bf8:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1bfc:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
    1c00:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1c04:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    1c08:	61547800 	cmpvs	r4, r0, lsl #16
    1c0c:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xb73
    1c10:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
    1c14:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1b04 <_Min_Stack_Size+0x1704>
    1c18:	00525349 	subseq	r5, r2, r9, asr #6
    1c1c:	654e7870 	strbvs	r7, [lr, #-2160]	; 0x870
    1c20:	43547478 	cmpmi	r4, #120, 8	; 0x78000000
    1c24:	54780042 	ldrbtpl	r0, [r8], #-66	; 0x42
    1c28:	496b7361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1c2c:	6572636e 	ldrbvs	r6, [r2, #-878]!	; 0x36e
    1c30:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    1c34:	6b636954 	blvs	18dc18c <_Min_Stack_Size+0x18dbd8c>
    1c38:	73615400 	cmnvc	r1, #0, 8
    1c3c:	6174536b 	cmnvs	r4, fp, ror #6
    1c40:	5f737574 	svcpl	0x00737574
    1c44:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
    1c48:	6b636954 	blvs	18dc1a0 <_Min_Stack_Size+0x18dbda0>
    1c4c:	576f5473 			; <UNDEFINED> instruction: 0x576f5473
    1c50:	00746961 	rsbseq	r6, r4, r1, ror #18
    1c54:	61547875 	cmpvs	r4, r5, ror r8
    1c58:	44736b73 	ldrbtmi	r6, [r3], #-2931	; 0xb73
    1c5c:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
    1c60:	78006465 	stmdavc	r0, {r0, r2, r5, r6, sl, sp, lr}
    1c64:	6b636954 	blvs	18dc1bc <_Min_Stack_Size+0x18dbdbc>
    1c68:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1c6c:	54760074 	ldrbtpl	r0, [r6], #-116	; 0x74
    1c70:	456b7361 	strbmi	r7, [fp, #-865]!	; 0x361
    1c74:	6353646e 	cmpvs	r3, #1845493760	; 0x6e000000
    1c78:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
    1c7c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1c80:	61547875 	cmpvs	r4, r5, ror r8
    1c84:	72506b73 	subsvc	r6, r0, #117760	; 0x1cc00
    1c88:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1c8c:	65477974 	strbvs	r7, [r7, #-2420]	; 0x974
    1c90:	43780074 	cmnmi	r8, #116	; 0x74
    1c94:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xe6f
    1c98:	6b636954 	blvs	18dc1f0 <_Min_Stack_Size+0x18dbdf0>
    1c9c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1ca0:	63700074 	cmnvs	r0, #116	; 0x74
    1ca4:	656d614e 	strbvs	r6, [sp, #-334]!	; 0x14e
    1ca8:	4f787000 	svcmi	0x00787000
    1cac:	66726576 			; <UNDEFINED> instruction: 0x66726576
    1cb0:	44776f6c 	ldrbtmi	r6, [r7], #-3948	; 0xf6c
    1cb4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1cb8:	61546465 	cmpvs	r4, r5, ror #8
    1cbc:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    1cc0:	76007473 			; <UNDEFINED> instruction: 0x76007473
    1cc4:	6b736154 	blvs	1cda21c <_Min_Stack_Size+0x1cd9e1c>
    1cc8:	616c6544 	cmnvs	ip, r4, asr #10
    1ccc:	78750079 	ldmdavc	r5!, {r0, r3, r4, r5, r6}^
    1cd0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1cd4:	50746e65 	rsbspl	r6, r4, r5, ror #28
    1cd8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1cdc:	00797469 	rsbseq	r7, r9, r9, ror #8
    1ce0:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1ce4:	6157736b 	cmpvs	r7, fp, ror #6
    1ce8:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    1cec:	72655467 	rsbvc	r5, r5, #1728053248	; 0x67000000
    1cf0:	616e696d 	cmnvs	lr, sp, ror #18
    1cf4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1cf8:	76727000 	ldrbtvc	r7, [r2], -r0
    1cfc:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0x449
    1d00:	6b736154 	blvs	1cda258 <_Min_Stack_Size+0x1cd9e58>
    1d04:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
    1d08:	73497473 	movtvc	r7, #38003	; 0x9473
    1d0c:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xd45
    1d10:	52650079 	rsbpl	r0, r5, #121	; 0x79
    1d14:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1d18:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    1d1c:	43547765 	cmpmi	r4, #26476544	; 0x1940000
    1d20:	78750042 	ldmdavc	r5!, {r1, r6}^
    1d24:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1d28:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    1d2c:	6b736154 	blvs	1cda284 <_Min_Stack_Size+0x1cd9e84>
    1d30:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xf43
    1d34:	6d654d00 	stclvs	13, cr4, [r5, #-0]
    1d38:	5279726f 	rsbspl	r7, r9, #-268435450	; 0xf0000006
    1d3c:	6f696765 	svcvs	0x00696765
    1d40:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    1d44:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
    1d48:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
    1d4c:	626e556b 	rsbvs	r5, lr, #448790528	; 0x1ac00000
    1d50:	6b636f6c 	blvs	18ddb08 <_Min_Stack_Size+0x18dd708>
    1d54:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1d58:	50787000 	rsbspl	r7, r8, r0
    1d5c:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    1d60:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    1d64:	73696c61 	cmnvc	r9, #24832	; 0x6100
    1d68:	61745365 	cmnvs	r4, r5, ror #6
    1d6c:	65006b63 	strvs	r6, [r0, #-2915]	; 0xb63
    1d70:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0x544
    1d74:	00646574 	rsbeq	r6, r4, r4, ror r5
    1d78:	61547875 	cmpvs	r4, r5, ror r8
    1d7c:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xb73
    1d80:	73795374 	cmnvc	r9, #116, 6	; 0xd0000001
    1d84:	536d6574 	cmnpl	sp, #116, 10	; 0x1d000000
    1d88:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    1d8c:	4c6c7500 	cfstr64mi	mvdx7, [ip], #-0
    1d90:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1d94:	426e4968 	rsbmi	r4, lr, #104, 18	; 0x1a0000
    1d98:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    1d9c:	76727000 	ldrbtvc	r7, [r2], -r0
    1da0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    1da4:	78654e74 	stmdavc	r5!, {r2, r4, r5, r6, r9, sl, fp, lr}^
    1da8:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
    1dac:	626e556b 	rsbvs	r5, lr, #448790528	; 0x1ac00000
    1db0:	6b636f6c 	blvs	18ddb68 <_Min_Stack_Size+0x18dd768>
    1db4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1db8:	4e787500 	cdpmi	5, 7, cr7, cr8, cr0, {0}
    1dbc:	72507765 	subsvc	r7, r0, #26476544	; 0x1940000
    1dc0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1dc4:	54007974 	strpl	r7, [r0], #-2420	; 0x974
    1dc8:	466b7361 	strbtmi	r7, [fp], -r1, ror #6
    1dcc:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
    1dd0:	5f6e6f69 	svcpl	0x006e6f69
    1dd4:	656d0074 	strbvs	r0, [sp, #-116]!	; 0x74
    1dd8:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
    1ddc:	54787000 	ldrbtpl	r7, [r8], #-0
    1de0:	4f656d69 	svcmi	0x00656d69
    1de4:	75007475 	strvc	r7, [r0, #-1141]	; 0x475
    1de8:	756f436c 	strbvc	r4, [pc, #-876]!	; 1a84 <_Min_Stack_Size+0x1684>
    1dec:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
    1df0:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1df4:	6d754e6b 	ldclvs	14, cr4, [r5, #-428]!	; 0xfffffe54
    1df8:	00726562 	rsbseq	r6, r2, r2, ror #10
    1dfc:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1e00:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
    1e04:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1e08:	74655379 	strbtvc	r5, [r5], #-889	; 0x379
    1e0c:	61546500 	cmpvs	r4, r0, lsl #10
    1e10:	74536b73 	ldrbvc	r6, [r3], #-2931	; 0xb73
    1e14:	00657461 	rsbeq	r7, r5, r1, ror #8
    1e18:	6f685378 	svcvs	0x00685378
    1e1c:	44646c75 	strbtmi	r6, [r4], #-3189	; 0xc75
    1e20:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1e24:	76727000 	ldrbtvc	r7, [r2], -r0
    1e28:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1e2c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    1e30:	43546573 	cmpmi	r4, #482344960	; 0x1cc00000
    1e34:	72615642 	rsbvc	r5, r1, #69206016	; 0x4200000
    1e38:	6c626169 	stfvse	f6, [r2], #-420	; 0xfffffe5c
    1e3c:	78007365 	stmdavc	r0, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1e40:	4f4d454d 	svcmi	0x004d454d
    1e44:	525f5952 	subspl	r5, pc, #1343488	; 0x148000
    1e48:	4f494745 	svcmi	0x00494745
    1e4c:	5476004e 	ldrbtpl	r0, [r6], #-78	; 0x4e
    1e50:	446b7361 	strbtmi	r7, [fp], #-865	; 0x361
    1e54:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
    1e58:	54780065 	ldrbtpl	r0, [r8], #-101	; 0x65
    1e5c:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
    1e60:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    1e64:	72436369 	subvc	r6, r3, #-1543503871	; 0xa4000001
    1e68:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
    1e6c:	61547600 	cmpvs	r4, r0, lsl #12
    1e70:	77536b73 			; <UNDEFINED> instruction: 0x77536b73
    1e74:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1e78:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
    1e7c:	00747865 	rsbseq	r7, r4, r5, ror #16
    1e80:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	; 0xfffffe20
    1e84:	764f664f 	strbvc	r6, [pc], -pc, asr #12
    1e88:	6c667265 	sfmvs	f7, 2, [r6], #-404	; 0xfffffe6c
    1e8c:	0073776f 	rsbseq	r7, r3, pc, ror #14
    1e90:	75437870 	strbvc	r7, [r3, #-2160]	; 0x870
    1e94:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1e98:	42435474 	submi	r5, r3, #116, 8	; 0x74000000
    1e9c:	65724600 	ldrbvs	r4, [r2, #-1536]!	; 0x600
    1ea0:	4f545265 	svcmi	0x00545265
    1ea4:	61742f53 	cmnvs	r4, r3, asr pc
    1ea8:	2e736b73 	vmovcs.s8	r6, d3[7]
    1eac:	43650063 	cmnmi	r5, #99	; 0x63
    1eb0:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    1eb4:	7453746e 	ldrbvc	r7, [r3], #-1134	; 0x46e
    1eb8:	00657461 	rsbeq	r7, r5, r1, ror #8
    1ebc:	61507670 	cmpvs	r0, r0, ror r6
    1ec0:	656d6172 	strbvs	r6, [sp, #-370]!	; 0x172
    1ec4:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
    1ec8:	41547800 	cmpmi	r4, r0, lsl #16
    1ecc:	535f4b53 	cmppl	pc, #84992	; 0x14c00
    1ed0:	55544154 	ldrbpl	r4, [r4, #-340]	; 0x154
    1ed4:	78700053 	ldmdavc	r0!, {r0, r1, r4, r6}^
    1ed8:	616c6544 	cmnvs	ip, r4, asr #10
    1edc:	54646579 	strbtpl	r6, [r4], #-1401	; 0x579
    1ee0:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    1ee4:	00747369 	rsbseq	r7, r4, r9, ror #6
    1ee8:	54767270 	ldrbtpl	r7, [r6], #-624	; 0x270
    1eec:	496b7361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1ef0:	73615473 	cmnvc	r1, #1929379840	; 0x73000000
    1ef4:	7375536b 	cmnvc	r5, #-1409286143	; 0xac000001
    1ef8:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    1efc:	76006465 	strvc	r6, [r0], -r5, ror #8
    1f00:	6b736154 	blvs	1cda458 <_Min_Stack_Size+0x1cda058>
    1f04:	54746553 	ldrbtpl	r6, [r4], #-1363	; 0x553
    1f08:	4e6b7361 	cdpmi	3, 6, cr7, cr11, cr1, {3}
    1f0c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    1f10:	53780072 	cmnpl	r8, #114	; 0x72
    1f14:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    1f18:	71655268 	cmnvc	r5, r8, ror #4
    1f1c:	65726975 	ldrbvs	r6, [r2, #-2421]!	; 0x975
    1f20:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
    1f24:	6574754d 	ldrbvs	r7, [r4, #-1357]!	; 0x54d
    1f28:	6c6f4878 	stclvs	8, cr4, [pc], #-480	; 1d50 <_Min_Stack_Size+0x1950>
    1f2c:	00726564 	rsbseq	r6, r2, r4, ror #10
    1f30:	74537870 	ldrbvc	r7, [r3], #-2160	; 0x870
    1f34:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1f38:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1f3c:	446f546b 	strbtmi	r5, [pc], #-1131	; 1f44 <_Min_Stack_Size+0x1b44>
    1f40:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
    1f44:	54780065 	ldrbtpl	r0, [r8], #-101	; 0x65
    1f48:	546b7361 	strbtpl	r7, [fp], #-865	; 0x361
    1f4c:	7375536f 	cmnvc	r5, #-1140850687	; 0xbc000001
    1f50:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    1f54:	6f507600 	svcvs	0x00507600
    1f58:	6e457472 	mcrvs	4, 2, r7, cr5, cr2, {3}
    1f5c:	68635364 	stmdavs	r3!, {r2, r5, r6, r8, r9, ip, lr}^
    1f60:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    1f64:	70007265 	andvc	r7, r0, r5, ror #4
    1f68:	65725078 	ldrbvs	r5, [r2, #-120]!	; 0x78
    1f6c:	756f6976 	strbvc	r6, [pc, #-2422]!	; 15fe <_Min_Stack_Size+0x11fe>
    1f70:	6b615773 	blvs	1857d44 <_Min_Stack_Size+0x1857944>
    1f74:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
    1f78:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    1f7c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1f80:	69546465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, sp, lr}^
    1f84:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1f88:	61745365 	cmnvs	r4, r5, ror #6
    1f8c:	70006574 	andvc	r6, r0, r4, ror r5
    1f90:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1f94:	6174536b 	cmnvs	r4, fp, ror #6
    1f98:	41737574 	cmnmi	r3, r4, ror r5
    1f9c:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    1fa0:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    1fa4:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1fa8:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1fac:	6174536b 	cmnvs	r4, fp, ror #6
    1fb0:	63537472 	cmpvs	r3, #1912602624	; 0x72000000
    1fb4:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
    1fb8:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1fbc:	72417875 	subvc	r7, r1, #7667712	; 0x750000
    1fc0:	53796172 	cmnpl	r9, #-2147483620	; 0x8000001c
    1fc4:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1fc8:	6e755265 	cdpvs	2, 7, cr5, cr5, cr5, {3}
    1fcc:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    1fd0:	526c7500 	rsbpl	r7, ip, #0, 10
    1fd4:	69546e75 	ldmdbvs	r4, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    1fd8:	6f43656d 	svcvs	0x0043656d
    1fdc:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    1fe0:	76700072 			; <UNDEFINED> instruction: 0x76700072
    1fe4:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    1fe8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1fec:	00737365 	rsbseq	r7, r3, r5, ror #6
    1ff0:	61427875 	hvcvs	10117	; 0x2785
    1ff4:	72506573 	subsvc	r6, r0, #482344960	; 0x1cc00000
    1ff8:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1ffc:	76007974 			; <UNDEFINED> instruction: 0x76007974
    2000:	6b736154 	blvs	1cda558 <_Min_Stack_Size+0x1cda158>
    2004:	616c6544 	cmnvs	ip, r4, asr #10
    2008:	746e5579 	strbtvc	r5, [lr], #-1401	; 0x579
    200c:	75006c69 	strvc	r6, [r0, #-3177]	; 0xc69
    2010:	69725078 	ldmdbvs	r2!, {r3, r4, r5, r6, ip, lr}^
    2014:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    2018:	65735579 	ldrbvs	r5, [r3, #-1401]!	; 0x579
    201c:	456e4f64 	strbmi	r4, [lr, #-3940]!	; 0xf64
    2020:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    2024:	42435400 	submi	r5, r3, #0, 8
    2028:	7000745f 	andvc	r7, r0, pc, asr r4
    202c:	65447672 	strbvs	r7, [r4, #-1650]	; 0x672
    2030:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0x56c
    2034:	00424354 	subeq	r4, r2, r4, asr r3
    2038:	6f6c4265 	svcvs	0x006c4265
    203c:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xb63
    2040:	61547600 	cmpvs	r4, r0, lsl #12
    2044:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xb73
    2048:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    204c:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
    2050:	73726946 	cmnvc	r2, #1146880	; 0x118000
    2054:	42435474 	submi	r5, r3, #116, 8	; 0x74000000
    2058:	76727000 	ldrbtvc	r7, [r2], -r0
    205c:	6b736154 	blvs	1cda5b4 <_Min_Stack_Size+0x1cda1b4>
    2060:	63656843 	cmnvs	r5, #4390912	; 0x430000
    2064:	6572466b 	ldrbvs	r4, [r2, #-1643]!	; 0x66b
    2068:	61745365 	cmnvs	r4, r5, ror #6
    206c:	70536b63 	subsvc	r6, r3, r3, ror #22
    2070:	00656361 	rsbeq	r6, r5, r1, ror #6
    2074:	61547875 	cmpvs	r4, r5, ror r8
    2078:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xb73
    207c:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
    2080:	6d754e6b 	ldclvs	14, cr4, [r5, #-428]!	; 0xfffffe54
    2084:	00726562 	rsbseq	r6, r2, r2, ror #10
    2088:	67655278 			; <UNDEFINED> instruction: 0x67655278
    208c:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2090:	76727000 	ldrbtvc	r7, [r2], -r0
    2094:	43646441 	cmnmi	r4, #1090519040	; 0x41000000
    2098:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    209c:	6154746e 	cmpvs	r4, lr, ror #8
    20a0:	6f546b73 	svcvs	0x00546b73
    20a4:	616c6544 	cmnvs	ip, r4, asr #10
    20a8:	4c646579 	cfstr64mi	mvdx6, [r4], #-484	; 0xfffffe1c
    20ac:	00747369 	rsbseq	r7, r4, r9, ror #6
    20b0:	74537375 	ldrbvc	r7, [r3], #-885	; 0x375
    20b4:	486b6361 	stmdami	fp!, {r0, r5, r6, r8, r9, sp, lr}^
    20b8:	57686769 	strbpl	r6, [r8, -r9, ror #14]!
    20bc:	72657461 	rsbvc	r7, r5, #1627389952	; 0x61000000
    20c0:	6b72614d 	blvs	1c9a5fc <_Min_Stack_Size+0x1c9a1fc>
    20c4:	43787500 	cmnmi	r8, #0, 10
    20c8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    20cc:	754e746e 	strbvc	r7, [lr, #-1134]	; 0x46e
    20d0:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    20d4:	6154664f 	cmpvs	r4, pc, asr #12
    20d8:	00736b73 	rsbseq	r6, r3, r3, ror fp
    20dc:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
    20e0:	636e4965 	cmnvs	lr, #1654784	; 0x194000
    20e4:	656d6572 	strbvs	r6, [sp, #-1394]!	; 0x572
    20e8:	7000746e 	andvc	r7, r0, lr, ror #8
    20ec:	42435478 	submi	r5, r3, #120, 8	; 0x78000000
    20f0:	53787500 	cmnpl	r8, #0, 10
    20f4:	64656863 	strbtvs	r6, [r5], #-2147	; 0x863
    20f8:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    20fc:	70737553 	rsbsvc	r7, r3, r3, asr r5
    2100:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xe65
    2104:	75700064 	ldrbvc	r0, [r0, #-100]!	; 0x64
    2108:	61745378 	cmnvs	r4, r8, ror r3
    210c:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xb63
    2110:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    2114:	61547800 	cmpvs	r4, r0, lsl #16
    2118:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xb73
    211c:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
    2120:	756f436b 	strbvc	r4, [pc, #-875]!	; 1dbd <_Min_Stack_Size+0x19bd>
    2124:	7246746e 	subvc	r7, r6, #1845493760	; 0x6e000000
    2128:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    212c:	78700052 	ldmdavc	r0!, {r1, r4, r6}^
    2130:	4f706f54 	svcmi	0x00706f54
    2134:	61745366 	cmnvs	r4, r6, ror #6
    2138:	76006b63 	strvc	r6, [r0], -r3, ror #22
    213c:	6b736154 	blvs	1cda694 <_Min_Stack_Size+0x1cda294>
    2140:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
    2144:	7000656d 	andvc	r6, r0, sp, ror #10
    2148:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
    214c:	61697469 	cmnvs	r9, r9, ror #8
    2150:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
    2154:	6b736154 	blvs	1cda6ac <_Min_Stack_Size+0x1cda2ac>
    2158:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    215c:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
    2160:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    2164:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
    2168:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0x974
    216c:	7870006d 	ldmdavc	r0!, {r0, r2, r3, r5, r6}^
    2170:	61657243 	cmnvs	r5, r3, asr #4
    2174:	54646574 	strbtpl	r6, [r4], #-1396	; 0x574
    2178:	006b7361 	rsbeq	r7, fp, r1, ror #6
    217c:	43767270 	cmnmi	r6, #112, 4
    2180:	6b636568 	blvs	18db728 <_Min_Stack_Size+0x18db328>
    2184:	6b736154 	blvs	1cda6dc <_Min_Stack_Size+0x1cda2dc>
    2188:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    218c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    2190:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
    2194:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xe69
    2198:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    219c:	61487875 	hvcvs	34693	; 0x8785
    21a0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    21a4:	43787500 	cmnmi	r8, #0, 10
    21a8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    21ac:	6142746e 	cmpvs	r2, lr, ror #8
    21b0:	72506573 	subsvc	r6, r0, #482344960	; 0x1cc00000
    21b4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    21b8:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
    21bc:	6c656959 	stclvs	9, cr6, [r5], #-356	; 0xfffffe9c
    21c0:	6e655064 	cdpvs	0, 6, cr5, cr5, cr4, {3}
    21c4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    21c8:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    21cc:	5172656d 	cmnpl	r2, sp, ror #10
    21d0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    21d4:	41787500 	cmnmi	r8, r0, lsl #10
    21d8:	526f7475 	rsbpl	r7, pc, #1962934272	; 0x75000000
    21dc:	616f6c65 	cmnvs	pc, r5, ror #24
    21e0:	72700064 	rsbsvc	r0, r0, #100	; 0x64
    21e4:	65684376 	strbvs	r4, [r8, #-886]!	; 0x376
    21e8:	6f466b63 	svcvs	0x00466b63
    21ec:	6c615672 	stclvs	6, cr5, [r1], #-456	; 0xfffffe38
    21f0:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
    21f4:	6e417473 	mcrvs	4, 2, r7, cr1, cr3, {3}
    21f8:	65755164 	ldrbvs	r5, [r5, #-356]!	; 0x164
    21fc:	70006575 	andvc	r6, r0, r5, ror r5
    2200:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
    2204:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2208:	69540072 	ldmdbvs	r4, {r1, r4, r5, r6}^
    220c:	5072656d 	rsbspl	r6, r2, sp, ror #10
    2210:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2214:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    2218:	7000745f 	andvc	r7, r0, pc, asr r4
    221c:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
    2220:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2224:	57737473 			; <UNDEFINED> instruction: 0x57737473
    2228:	53657265 	cmnpl	r5, #1342177286	; 0x50000006
    222c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    2230:	00646568 	rsbeq	r6, r4, r8, ror #10
    2234:	54726d74 	ldrbtpl	r6, [r2], #-3444	; 0xd74
    2238:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    223c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
    2240:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    2244:	74634178 	strbtvc	r4, [r3], #-376	; 0x178
    2248:	54657669 	strbtpl	r7, [r5], #-1641	; 0x669
    224c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    2250:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    2254:	72700032 	rsbsvc	r0, r0, #50	; 0x32
    2258:	736e4976 	cmnvc	lr, #1933312	; 0x1d8000
    225c:	54747265 	ldrbtpl	r7, [r4], #-613	; 0x265
    2260:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    2264:	63416e49 	movtvs	r6, #7753	; 0x1e49
    2268:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    226c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    2270:	43787000 	cmnmi	r8, #0
    2274:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    2278:	6954746e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    227c:	4c72656d 	cfldr64mi	mvdx6, [r2], #-436	; 0xfffffe4c
    2280:	00747369 	rsbseq	r7, r4, r9, ror #6
    2284:	53767270 	cmnpl	r6, #112, 4
    2288:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    228c:	6d695468 	cfstrdvs	mvd5, [r9, #-416]!	; 0xfffffe60
    2290:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2294:	00737473 	rsbseq	r7, r3, r3, ror r4
    2298:	6f725078 	svcvs	0x00725078
    229c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    22a0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    22a4:	776f4e72 			; <UNDEFINED> instruction: 0x776f4e72
    22a8:	76727000 	ldrbtvc	r7, [r2], -r0
    22ac:	706d6153 	rsbvc	r6, sp, r3, asr r1
    22b0:	6954656c 	ldmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
    22b4:	6f4e656d 	svcvs	0x004e656d
    22b8:	41780077 	cmnmi	r8, r7, ror r0
    22bc:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    22c0:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
    22c4:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
    22c8:	00317473 	eorseq	r7, r1, r3, ror r4
    22cc:	54726d74 	ldrbtpl	r6, [r2], #-3444	; 0xd74
    22d0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    22d4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    22d8:	73654d65 	cmnvc	r5, #6464	; 0x1940
    22dc:	65676173 	strbvs	r6, [r7, #-371]!	; 0x173
    22e0:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    22e4:	5072656d 	rsbspl	r6, r2, sp, ror #10
    22e8:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    22ec:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    22f0:	61440073 	hvcvs	16387	; 0x4003
    22f4:	6e6f6d65 	cdpvs	13, 6, cr6, cr15, cr5, {3}
    22f8:	6b736154 	blvs	1cda850 <_Min_Stack_Size+0x1cda450>
    22fc:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    2300:	5f656761 	svcpl	0x00656761
    2304:	54780074 	ldrbtpl	r0, [r8], #-116	; 0x74
    2308:	52454d49 	subpl	r4, r5, #4672	; 0x1240
    230c:	726d7400 	rsbvc	r7, sp, #0, 8
    2310:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2314:	72615072 	rsbvc	r5, r1, #114	; 0x72
    2318:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xd61
    231c:	00737265 	rsbseq	r7, r3, r5, ror #4
    2320:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
    2324:	65507265 	ldrbvs	r7, [r0, #-613]	; 0x265
    2328:	646f6972 	strbtvs	r6, [pc], #-2418	; 2330 <_Min_Stack_Size+0x1f30>
    232c:	69546e49 	ldmdbvs	r4, {r0, r3, r6, r9, sl, fp, sp, lr}^
    2330:	00736b63 	rsbseq	r6, r3, r3, ror #22
    2334:	73654d78 	cmnvc	r5, #120, 26	; 0x1e00
    2338:	65676173 	strbvs	r6, [r7, #-371]!	; 0x173
    233c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    2340:	69540065 	ldmdbvs	r4, {r0, r2, r5, r6}^
    2344:	4872656d 	ldmdami	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    2348:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    234c:	00745f65 	rsbseq	r5, r4, r5, ror #30
    2350:	6c655278 	sfmvs	f5, 2, [r5], #-480	; 0xfffffe20
    2354:	5464616f 	strbtpl	r6, [r4], #-367	; 0x16f
    2358:	00656d69 	rsbeq	r6, r5, r9, ror #26
    235c:	69546370 	ldmdbvs	r4, {r4, r5, r6, r8, r9, sp, lr}^
    2360:	4e72656d 	cdpmi	5, 7, cr6, cr2, cr13, {3}
    2364:	00656d61 	rsbeq	r6, r5, r1, ror #26
    2368:	764f7870 			; <UNDEFINED> instruction: 0x764f7870
    236c:	6c667265 	sfmvs	f7, 2, [r6], #-404	; 0xfffffe6c
    2370:	6954776f 	ldmdbvs	r4, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    2374:	4c72656d 	cfldr64mi	mvdx6, [r2], #-436	; 0xfffffe4c
    2378:	00747369 	rsbseq	r7, r4, r9, ror #6
    237c:	6d6f4378 	stclvs	3, cr4, [pc, #-480]!	; 21a4 <_Min_Stack_Size+0x1da4>
    2380:	646e616d 	strbtvs	r6, [lr], #-365	; 0x16d
    2384:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2388:	65724600 	ldrbvs	r4, [r2, #-1536]!	; 0x600
    238c:	4f545265 	svcmi	0x00545265
    2390:	69742f53 	ldmdbvs	r4!, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2394:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
    2398:	7000632e 	andvc	r6, r0, lr, lsr #6
    239c:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
    23a0:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    23a4:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0x54e
    23a8:	69707845 	ldmdbvs	r0!, {r0, r2, r6, fp, ip, sp, lr}^
    23ac:	69547972 	ldmdbvs	r4, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    23b0:	7000656d 	andvc	r6, r0, sp, ror #10
    23b4:	6d695476 	cfstrdvs	mvd5, [r9, #-472]!	; 0xfffffe28
    23b8:	44497265 	strbmi	r7, [r9], #-613	; 0x265
    23bc:	76727000 	ldrbtvc	r7, [r2], -r0
    23c0:	4e746547 	cdpmi	5, 7, cr6, cr4, cr7, {2}
    23c4:	45747865 	ldrbmi	r7, [r4, #-2149]!	; 0x865
    23c8:	72697078 	rsbvc	r7, r9, #120	; 0x78
    23cc:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
    23d0:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    23d4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    23d8:	6d754e72 	ldclvs	14, cr4, [r5, #-456]!	; 0xfffffe38
    23dc:	00726562 	rsbseq	r6, r2, r2, ror #10
    23e0:	50767270 	rsbspl	r7, r6, r0, ror r2
    23e4:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    23e8:	65527373 	ldrbvs	r7, [r2, #-883]	; 0x373
    23ec:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    23f0:	6f436465 	svcvs	0x00436465
    23f4:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    23f8:	78007364 	stmdavc	r0, {r2, r5, r6, r8, r9, ip, sp, lr}
    23fc:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    2400:	49646e61 	stmdbmi	r4!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    2404:	54780044 	ldrbtpl	r0, [r8], #-68	; 0x44
    2408:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    240c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    2410:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    2414:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    2418:	6f4e656d 	svcvs	0x004e656d
    241c:	76700077 			; <UNDEFINED> instruction: 0x76700077
    2420:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2424:	74654772 	strbtvc	r4, [r5], #-1906	; 0x772
    2428:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    242c:	00444972 	subeq	r4, r4, r2, ror r9
    2430:	73655278 	cmnvc	r5, #120, 4	; 0x80000007
    2434:	00746c75 	rsbseq	r6, r4, r5, ror ip
    2438:	694c7870 	stmdbvs	ip, {r4, r5, r6, fp, ip, sp, lr}^
    243c:	61577473 	cmpvs	r7, r3, ror r4
    2440:	706d4573 	rsbvc	r4, sp, r3, ror r5
    2444:	70007974 	andvc	r7, r0, r4, ror r9
    2448:	72507672 	subsvc	r7, r0, #119537664	; 0x7200000
    244c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    2450:	6d695473 	cfstrdvs	mvd5, [r9, #-460]!	; 0xfffffe34
    2454:	724f7265 	subvc	r7, pc, #1342177286	; 0x50000006
    2458:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    245c:	7361546b 	cmnvc	r1, #1795162112	; 0x6b000000
    2460:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
    2464:	6f725076 	svcvs	0x00725076
    2468:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    246c:	69707845 	ldmdbvs	r0!, {r0, r2, r6, fp, ip, sp, lr}^
    2470:	54646572 	strbtpl	r6, [r4], #-1394	; 0x572
    2474:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    2478:	654d7800 	strbvs	r7, [sp, #-2048]	; 0x800
    247c:	67617373 			; <UNDEFINED> instruction: 0x67617373
    2480:	69540065 	ldmdbvs	r4, {r0, r2, r5, r6}^
    2484:	4372656d 	cmnmi	r2, #457179136	; 0x1b400000
    2488:	626c6c61 	rsbvs	r6, ip, #24832	; 0x6100
    248c:	466b6361 	strbtmi	r6, [fp], -r1, ror #6
    2490:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
    2494:	5f6e6f69 	svcpl	0x006e6f69
    2498:	54780074 	ldrbtpl	r0, [r8], #-116	; 0x74
    249c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    24a0:	6e497349 	cdpvs	3, 4, cr7, cr9, cr9, {2}
    24a4:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    24a8:	694c6576 	stmdbvs	ip, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    24ac:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    24b0:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    24b4:	49656761 	stmdbmi	r5!, {r0, r5, r6, r8, r9, sl, sp, lr}^
    24b8:	54780044 	ldrbtpl	r0, [r8], #-68	; 0x44
    24bc:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    24c0:	61657243 	cmnvs	r5, r3, asr #4
    24c4:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    24c8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    24cc:	6e654772 	mcrvs	7, 3, r4, cr5, cr2, {3}
    24d0:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
    24d4:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    24d8:	00646e61 	rsbeq	r6, r4, r1, ror #28
    24dc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    24e0:	00745f72 	rsbseq	r5, r4, r2, ror pc
    24e4:	54767270 	ldrbtpl	r7, [r6], #-624	; 0x270
    24e8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    24ec:	6b736154 	blvs	1cdaa44 <_Min_Stack_Size+0x1cda644>
    24f0:	43787000 	cmnmi	r8, #0
    24f4:	626c6c61 	rsbvs	r6, ip, #24832	; 0x6100
    24f8:	466b6361 	strbtmi	r6, [fp], -r1, ror #6
    24fc:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
    2500:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2504:	74704f78 	ldrbtvc	r4, [r0], #-3960	; 0xf78
    2508:	616e6f69 	cmnvs	lr, r9, ror #30
    250c:	6c61566c 	stclvs	6, cr5, [r1], #-432	; 0xfffffe50
    2510:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    2514:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
    2518:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    251c:	654e7800 	strbvs	r7, [lr, #-2048]	; 0x800
    2520:	78457478 	stmdavc	r5, {r3, r4, r5, r6, sl, ip, sp, lr}^
    2524:	65726970 	ldrbvs	r6, [r2, #-2416]!	; 0x970
    2528:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    252c:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    2530:	4972656d 	ldmdbmi	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    2534:	6d695473 	cfstrdvs	mvd5, [r9, #-460]!	; 0xfffffe34
    2538:	63417265 	movtvs	r7, #4709	; 0x1265
    253c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    2540:	76727000 	ldrbtvc	r7, [r2], -r0
    2544:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    2548:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    254c:	72694674 	rsbvc	r4, r9, #116, 12	; 0x7400000
    2550:	61547473 	cmpvs	r4, r3, ror r4
    2554:	70006b73 	andvc	r6, r0, r3, ror fp
    2558:	61547672 	cmpvs	r4, r2, ror r6
    255c:	78456b73 	stmdavc	r5, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    2560:	72457469 	subvc	r7, r5, #1761607680	; 0x69000000
    2564:	00726f72 	rsbseq	r6, r2, r2, ror pc
    2568:	724f6c75 	subvc	r6, pc, #29952	; 0x7500
    256c:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
    2570:	72506c61 	subsvc	r6, r0, #24832	; 0x6100
    2574:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2578:	70007974 	andvc	r7, r0, r4, ror r9
    257c:	646f4378 	strbtvs	r4, [pc], #-888	; 2584 <_Min_Stack_Size+0x2184>
    2580:	75700065 	ldrbvc	r0, [r0, #-101]!	; 0x65
    2584:	72694663 	rsbvc	r4, r9, #103809024	; 0x6300000
    2588:	73557473 	cmpvc	r5, #1929379840	; 0x73000000
    258c:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
    2590:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2594:	65527974 	ldrbvs	r7, [r2, #-2420]	; 0x974
    2598:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    259c:	75007265 	strvc	r7, [r0, #-613]	; 0x265
    25a0:	69724378 	ldmdbvs	r2!, {r3, r4, r5, r6, r8, r9, lr}^
    25a4:	61636974 	smcvs	13972	; 0x3694
    25a8:	73654e6c 	cmnvc	r5, #108, 28	; 0x6c0
    25ac:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    25b0:	4d637500 	cfstr64mi	mvdx7, [r3, #-0]
    25b4:	79537861 	ldmdbvc	r3, {r0, r5, r6, fp, ip, sp, lr}^
    25b8:	6c614373 	stclvs	3, cr4, [r1], #-460	; 0xfffffe34
    25bc:	6972506c 	ldmdbvs	r2!, {r2, r3, r5, r6, ip, lr}^
    25c0:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    25c4:	6c750079 	ldclvs	0, cr0, [r5], #-484	; 0xfffffe1c
    25c8:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    25cc:	49746e65 	ldmdbmi	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    25d0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    25d4:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    25d8:	65724600 	ldrbvs	r4, [r2, #-1536]!	; 0x600
    25dc:	4f545265 	svcmi	0x00545265
    25e0:	6f702f53 	svcvs	0x00702f53
    25e4:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    25e8:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
    25ec:	412f4343 	teqmi	pc, r3, asr #6
    25f0:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    25f4:	2f46344d 	svccs	0x0046344d
    25f8:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
    25fc:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
    2600:	72754363 	rsbsvc	r4, r5, #-1946157055	; 0x8c000001
    2604:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    2608:	6f697250 	svcvs	0x00697250
    260c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2610:	43565300 	cmpmi	r6, #0, 6
    2614:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    2618:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    261c:	6f507600 	svcvs	0x00507600
    2620:	65537472 	ldrbvs	r7, [r3, #-1138]	; 0x472
    2624:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0x574
    2628:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    262c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    2630:	70757272 	rsbsvc	r7, r5, r2, ror r2
    2634:	6c750074 	ldclvs	0, cr0, [r5], #-464	; 0xfffffe30
    2638:	5078614d 	rsbspl	r6, r8, sp, asr #2
    263c:	52474952 	subpl	r4, r7, #1343488	; 0x148000
    2640:	5650554f 	ldrbpl	r5, [r0], -pc, asr #10
    2644:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    2648:	4e6c7500 	cdpmi	5, 6, cr7, cr12, cr0, {0}
    264c:	614d7765 	cmpvs	sp, r5, ror #14
    2650:	61566b73 	cmpvs	r6, r3, ror fp
    2654:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2658:	6e496370 	mcrvs	3, 2, r6, cr9, cr0, {3}
    265c:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    2660:	50747075 	rsbspl	r7, r4, r5, ror r0
    2664:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    2668:	52797469 	rsbspl	r7, r9, #1761607680	; 0x69000000
    266c:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    2670:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
    2674:	73795300 	cmnvc	r9, #0, 6
    2678:	6b636954 	blvs	18dcbd0 <_Min_Stack_Size+0x18dc7d0>
    267c:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    2680:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    2684:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    2688:	5f565364 	svcpl	0x00565364
    268c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    2690:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2694:	614d6375 	hvcvs	54837	; 0xd635
    2698:	69725078 	ldmdbvs	r2!, {r3, r4, r5, r6, ip, lr}^
    269c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    26a0:	6c615679 	stclvs	6, cr5, [r1], #-484	; 0xfffffe1c
    26a4:	76006575 			; <UNDEFINED> instruction: 0x76006575
    26a8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    26ac:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    26b0:	4656656c 	ldrbmi	r6, [r6], -ip, ror #10
    26b4:	50780050 	rsbspl	r0, r8, r0, asr r0
    26b8:	4774726f 	ldrbmi	r7, [r4, -pc, ror #4]!
    26bc:	72467465 	subvc	r7, r6, #1694498816	; 0x65000000
    26c0:	65486565 	strbvs	r6, [r8, #-1381]	; 0x565
    26c4:	69537061 	ldmdbvs	r3, {r0, r5, r6, ip, sp, lr}^
    26c8:	7000657a 	andvc	r6, r0, sl, ror r5
    26cc:	74655276 	strbtvc	r5, [r5], #-630	; 0x276
    26d0:	006e7275 	rsbeq	r7, lr, r5, ror r2
    26d4:	65486375 	strbvs	r6, [r8, #-885]	; 0x375
    26d8:	76007061 	strvc	r7, [r0], -r1, rrx
    26dc:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    26e0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    26e4:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    26e8:	6c426573 	cfstr64vs	mvdx6, [r2], {115}	; 0x73
    26ec:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    26f0:	61577800 	cmpvs	r7, r0, lsl #16
    26f4:	6465746e 	strbtvs	r7, [r5], #-1134	; 0x46e
    26f8:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    26fc:	63757000 	cmnvs	r5, #0
    2700:	67696c41 	strbvs	r6, [r9, -r1, asr #24]!
    2704:	4864656e 	stmdami	r4!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    2708:	00706165 	rsbseq	r6, r0, r5, ror #2
    270c:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    2710:	534f5452 	movtpl	r5, #62546	; 0xf452
    2714:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
    2718:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    271c:	654d2f65 	strbvs	r2, [sp, #-3941]	; 0xf65
    2720:	6e614d6d 	cdpvs	13, 6, cr4, cr1, cr13, {3}
    2724:	65682f67 	strbvs	r2, [r8, #-3943]!	; 0xf67
    2728:	315f7061 	cmpcc	pc, r1, rrx
    272c:	7800632e 	stmdavc	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    2730:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0x54e
    2734:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    2738:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    273c:	42414900 	submi	r4, r1, #0, 18
    2740:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
    2744:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    2748:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    274c:	756f534b 	strbvc	r5, [pc, #-843]!	; 2409 <_Min_Stack_Size+0x2009>
    2750:	00656372 	rsbeq	r6, r5, r2, ror r3
    2754:	4349564e 	movtmi	r5, #38478	; 0x964e
    2758:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    275c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2760:	00746375 	rsbseq	r6, r4, r5, ror r3
    2764:	4349564e 	movtmi	r5, #38478	; 0x964e
    2768:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    276c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    2770:	6f724779 	svcvs	0x00724779
    2774:	74007075 	strvc	r7, [r0], #-117	; 0x75
    2778:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    277c:	53490065 	movtpl	r0, #36965	; 0x9065
    2780:	4e005245 	cdpmi	2, 0, cr5, cr0, cr5, {2}
    2784:	74537765 	ldrbvc	r7, [r3], #-1893	; 0x765
    2788:	00657461 	rsbeq	r7, r5, r1, ror #8
    278c:	52495453 	subpl	r5, r9, #1392508928	; 0x53000000
    2790:	45535200 	ldrbmi	r5, [r3, #-512]	; 0x200
    2794:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    2798:	54430031 	strbpl	r0, [r3], #-49	; 0x31
    279c:	4e004c52 	mcrmi	12, 0, r4, cr0, cr2, {2}
    27a0:	5f434956 	svcpl	0x00434956
    27a4:	56746553 			; <UNDEFINED> instruction: 0x56746553
    27a8:	6f746365 	svcvs	0x00746365
    27ac:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
    27b0:	4900656c 	stmdbmi	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    27b4:	00525043 	subseq	r5, r2, r3, asr #32
    27b8:	494c4143 	stmdbmi	ip, {r0, r1, r6, r8, lr}^
    27bc:	43490042 	movtmi	r0, #36930	; 0x9042
    27c0:	74005245 	strvc	r5, [r0], #-581	; 0x245
    27c4:	7573706d 	ldrbvc	r7, [r3, #-109]!	; 0x6d
    27c8:	564e0062 	strbpl	r0, [lr], -r2, rrx
    27cc:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    27d0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    27d4:	43504c6d 	cmpmi	r0, #27904	; 0x6d00
    27d8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    27dc:	79530067 	ldmdbvc	r3, {r0, r1, r2, r5, r6}^
    27e0:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    27e4:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    27e8:	756f534b 	strbvc	r5, [pc, #-843]!	; 24a5 <_Min_Stack_Size+0x20a5>
    27ec:	43656372 	cmnmi	r5, #-939524095	; 0xc8000001
    27f0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    27f4:	79530067 	ldmdbvc	r3, {r0, r1, r2, r5, r6}^
    27f8:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    27fc:	79545f6b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    2800:	74006570 	strvc	r6, [r0], #-1392	; 0x570
    2804:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    2808:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    280c:	49007974 	stmdbmi	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
    2810:	00525053 	subseq	r5, r2, r3, asr r0
    2814:	4349564e 	movtmi	r5, #38478	; 0x964e
    2818:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    281c:	4f430065 	svcmi	0x00430065
    2820:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2824:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2828:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    282c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2830:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2834:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2838:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    283c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2840:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2844:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2848:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    284c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 2854 <_Min_Stack_Size+0x2454>
    2850:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    2854:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    2858:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    285c:	632e6373 	teqvs	lr, #-872415231	; 0xcc000001
    2860:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2864:	65565f43 	ldrbvs	r5, [r6, #-3907]	; 0xf43
    2868:	61547463 	cmpvs	r4, r3, ror #8
    286c:	4f4c0062 	svcmi	0x004c0062
    2870:	4c004441 	cfstrsmi	mvf4, [r0], {65}	; 0x41
    2874:	6f50776f 	svcvs	0x0050776f
    2878:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
    287c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2880:	4349564e 	movtmi	r5, #38478	; 0x964e
    2884:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    2888:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    288c:	6f724779 	svcvs	0x00724779
    2890:	6f437075 	svcvs	0x00437075
    2894:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2898:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    289c:	00736f70 	rsbseq	r6, r3, r0, ror pc
    28a0:	5f746942 	svcpl	0x00746942
    28a4:	00544553 	subseq	r4, r4, r3, asr r5
    28a8:	4f495047 	svcmi	0x00495047
    28ac:	6165525f 	cmnvs	r5, pc, asr r2
    28b0:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xf64
    28b4:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
    28b8:	00617461 	rsbeq	r7, r1, r1, ror #8
    28bc:	4f495047 	svcmi	0x00495047
    28c0:	0046415f 	subeq	r4, r6, pc, asr r1
    28c4:	706d6574 	rsbvc	r6, sp, r4, ror r5
    28c8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    28cc:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xf4f
    28d0:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    28d4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    28d8:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
    28dc:	006c6156 	rsbeq	r6, ip, r6, asr r1
    28e0:	5f746942 	svcpl	0x00746942
    28e4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    28e8:	50470054 	subpl	r0, r7, r4, asr r0
    28ec:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    28f0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    28f4:	00746942 	rsbseq	r6, r4, r2, asr #18
    28f8:	4f495047 	svcmi	0x00495047
    28fc:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    2900:	73746942 	cmnvc	r4, #1081344	; 0x108000
    2904:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2908:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
    290c:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
    2910:	00737469 	rsbseq	r7, r3, r9, ror #8
    2914:	4f495047 	svcmi	0x00495047
    2918:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    291c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2920:	4f495047 	svcmi	0x00495047
    2924:	6165525f 	cmnvs	r5, pc, asr r2
    2928:	706e4964 	rsbvc	r4, lr, r4, ror #18
    292c:	61447475 	hvcvs	18245	; 0x4745
    2930:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    2934:	4f430074 	svcmi	0x00430074
    2938:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    293c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2940:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2944:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2948:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    294c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2950:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2954:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2958:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    295c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2960:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2964:	445f6870 	ldrbmi	r6, [pc], #-2160	; 296c <_Min_Stack_Size+0x256c>
    2968:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    296c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    2970:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    2974:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2978:	5f787834 	svcpl	0x00787834
    297c:	6f697067 	svcvs	0x00697067
    2980:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
    2984:	74737469 	ldrbtvc	r7, [r3], #-1129	; 0x469
    2988:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    298c:	43435200 	movtmi	r5, #12800	; 0x3200
    2990:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2994:	72655031 	rsbvc	r5, r5, #49	; 0x31
    2998:	52687069 	rsbpl	r7, r8, #105	; 0x69
    299c:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    29a0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    29a4:	4f495047 	svcmi	0x00495047
    29a8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    29ac:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    29b0:	00746375 	rsbseq	r6, r4, r5, ror r3
    29b4:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    29b8:	006c6156 	rsbeq	r6, ip, r6, asr r1
    29bc:	4f495047 	svcmi	0x00495047
    29c0:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    29c4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    29c8:	47006563 	strmi	r6, [r0, -r3, ror #10]
    29cc:	5f4f4950 	svcpl	0x004f4950
    29d0:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    29d4:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xe49
    29d8:	74614474 	strbtvc	r4, [r1], #-1140	; 0x474
    29dc:	50470061 	subpl	r0, r7, r1, rrx
    29e0:	505f4f49 	subspl	r4, pc, r9, asr #30
    29e4:	6f4c6e69 	svcvs	0x004c6e69
    29e8:	6f436b63 	svcvs	0x00436b63
    29ec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    29f0:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
    29f4:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    29f8:	63006e6f 	movwvs	r6, #3695	; 0xe6f
    29fc:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    2a00:	6970746e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    2a04:	5047006e 	subpl	r0, r7, lr, rrx
    2a08:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    2a0c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    2a10:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2a14:	6f545f4f 	svcvs	0x00545f4f
    2a18:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0x767
    2a1c:	73746942 	cmnvc	r4, #1081344	; 0x108000
    2a20:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2a24:	00325f70 	eorseq	r5, r2, r0, ror pc
    2a28:	4f495047 	svcmi	0x00495047
    2a2c:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    2a30:	6f434641 	svcvs	0x00434641
    2a34:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2a38:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2a3c:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
    2a40:	754f6461 	strbvc	r6, [pc, #-1121]	; 25e7 <_Min_Stack_Size+0x21e7>
    2a44:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    2a48:	61746144 	cmnvs	r4, r4, asr #2
    2a4c:	00746942 	rsbseq	r6, r4, r2, asr #18
    2a50:	5f434352 	svcpl	0x00434352
    2a54:	4b4c4348 	blmi	131377c <_Min_Stack_Size+0x131337c>
    2a58:	43435200 	movtmi	r5, #12800	; 0x3200
    2a5c:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xc5f
    2a60:	43435200 	movtmi	r5, #12800	; 0x3200
    2a64:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    2a68:	43494153 	movtmi	r4, #37203	; 0x9153
    2a6c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    2a70:	505f4343 	subspl	r4, pc, r3, asr #6
    2a74:	41534c4c 	cmpmi	r3, ip, asr #24
    2a78:	76694449 	strbtvc	r4, [r9], -r9, asr #8
    2a7c:	43520051 	cmpmi	r2, #81	; 0x51
    2a80:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    2a84:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    2a88:	52766944 	rsbspl	r6, r6, #68, 18	; 0x110000
    2a8c:	61747300 	cmnvs	r4, r0, lsl #6
    2a90:	72737574 	rsbsvc	r7, r3, #116, 10	; 0x1d000000
    2a94:	53006765 	movwpl	r6, #1893	; 0x765
    2a98:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    2a9c:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    2aa0:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    2aa4:	0079636e 	rsbseq	r6, r9, lr, ror #6
    2aa8:	5f434352 	svcpl	0x00434352
    2aac:	314f434d 	cmpcc	pc, sp, asr #6
    2ab0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2ab4:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    2ab8:	415f4343 	cmpmi	pc, r3, asr #6
    2abc:	50314250 	eorspl	r4, r1, r0, asr r2
    2ac0:	70697265 	rsbvc	r7, r9, r5, ror #4
    2ac4:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    2ac8:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    2acc:	4c500064 	mrrcmi	0, 6, r0, r0, cr4	; <UNPREDICTABLE>
    2ad0:	52004e4c 	andpl	r4, r0, #76, 28	; 0x4c0
    2ad4:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    2ad8:	4c504941 	mrrcmi	9, 4, r4, r0, cr1
    2adc:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    2ae0:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xc43
    2ae4:	6f437669 	svcvs	0x00437669
    2ae8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2aec:	4c4c5000 	marmi	acc0, r5, ip
    2af0:	4c500050 	mrrcmi	0, 5, r0, r0, cr0	; <UNPREDICTABLE>
    2af4:	5200514c 	andpl	r5, r0, #76, 2
    2af8:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2afc:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2b00:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    2b04:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    2b08:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    2b0c:	4c4c5000 	marmi	acc0, r5, ip
    2b10:	4352004d 	cmpmi	r2, #77	; 0x4d
    2b14:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2b18:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
    2b1c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2b20:	43435200 	movtmi	r5, #12800	; 0x3200
    2b24:	6f6c435f 	svcvs	0x006c435f
    2b28:	00736b63 	rsbseq	r6, r3, r3, ror #22
    2b2c:	5f434352 	svcpl	0x00434352
    2b30:	32425041 	subcc	r5, r2, #65	; 0x41
    2b34:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2b38:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    2b3c:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    2b40:	646f4d50 	strbtvs	r4, [pc], #-3408	; 2b48 <_Min_Stack_Size+0x2748>
    2b44:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
    2b48:	43435200 	movtmi	r5, #12800	; 0x3200
    2b4c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    2b50:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    2b54:	52006761 	andpl	r6, r0, #25427968	; 0x1840000
    2b58:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2b5c:	6d740054 	ldclvs	0, cr0, [r4, #-336]!	; 0xfffffeb0
    2b60:	67657270 			; <UNDEFINED> instruction: 0x67657270
    2b64:	4c435000 	marmi	acc0, r5, r3
    2b68:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
    2b6c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0x572
    2b70:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2b74:	43435200 	movtmi	r5, #12800	; 0x3200
    2b78:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2b7c:	72655032 	rsbvc	r5, r5, #50	; 0x32
    2b80:	43687069 	cmnmi	r8, #105	; 0x69
    2b84:	6b636f6c 	blvs	18de93c <_Min_Stack_Size+0x18de53c>
    2b88:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2b8c:	5f434352 	svcpl	0x00434352
    2b90:	4b4c4350 	blmi	13138d8 <_Min_Stack_Size+0x13134d8>
    2b94:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    2b98:	00676966 	rsbeq	r6, r7, r6, ror #18
    2b9c:	5f434352 	svcpl	0x00434352
    2ba0:	33424841 	movtcc	r4, #10305	; 0x2841
    2ba4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2ba8:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0x870
    2bac:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    2bb0:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    2bb4:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    2bb8:	6c424941 	mcrrvs	9, 4, r4, r2, cr1
    2bbc:	416b636f 	cmnmi	fp, pc, ror #6
    2bc0:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    2bc4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2bc8:	43520067 	cmpmi	r2, #103	; 0x67
    2bcc:	43485f43 	movtmi	r5, #36675	; 0x8f43
    2bd0:	6f434b4c 	svcvs	0x00434b4c
    2bd4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2bd8:	43435200 	movtmi	r5, #12800	; 0x3200
    2bdc:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    2be0:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    2be4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2be8:	43520067 	cmpmi	r2, #103	; 0x67
    2bec:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    2bf0:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    2bf4:	00676966 	rsbeq	r6, r7, r6, ror #18
    2bf8:	5f434352 	svcpl	0x00434352
    2bfc:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    2c00:	43435200 	movtmi	r5, #12800	; 0x3200
    2c04:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    2c08:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
    2c0c:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    2c10:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2c14:	6f727245 	svcvs	0x00727245
    2c18:	61745372 	cmnvs	r4, r2, ror r3
    2c1c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2c20:	5f434352 	svcpl	0x00434352
    2c24:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    2c28:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2c2c:	43520065 	cmpmi	r2, #101	; 0x65
    2c30:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2c34:	53595374 	cmppl	r9, #116, 6	; 0xd0000001
    2c38:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    2c3c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2c40:	43520065 	cmpmi	r2, #101	; 0x65
    2c44:	61575f43 	cmpvs	r7, r3, asr #30
    2c48:	6f467469 	svcvs	0x00467469
    2c4c:	45534872 	ldrbmi	r4, [r3, #-2162]	; 0x872
    2c50:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2c54:	00705574 	rsbseq	r5, r0, r4, ror r5
    2c58:	4b4c4348 	blmi	1313980 <_Min_Stack_Size+0x1313580>
    2c5c:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    2c60:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2c64:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    2c68:	415f4343 	cmpmi	pc, r3, asr #6
    2c6c:	50314250 	eorspl	r4, r1, r0, asr r2
    2c70:	70697265 	rsbvc	r7, r9, r5, ror #4
    2c74:	43520068 	cmpmi	r2, #104	; 0x68
    2c78:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xf43
    2c7c:	4b4c4343 	blmi	1313990 <_Min_Stack_Size+0x1313590>
    2c80:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2c84:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    2c88:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 2b84 <_Min_Stack_Size+0x2784>
    2c8c:	43314f43 	teqmi	r1, #268	; 0x10c
    2c90:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c94:	43520067 	cmpmi	r2, #103	; 0x67
    2c98:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2c9c:	4b4c4353 	blmi	13139f0 <_Min_Stack_Size+0x13135f0>
    2ca0:	43435200 	movtmi	r5, #12800	; 0x3200
    2ca4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    2ca8:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    2cac:	7000646d 	andvc	r6, r0, sp, ror #8
    2cb0:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2cb4:	43435200 	movtmi	r5, #12800	; 0x3200
    2cb8:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    2cbc:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    2cc0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2cc4:	43520065 	cmpmi	r2, #101	; 0x65
    2cc8:	41535f43 	cmpmi	r3, r3, asr #30
    2ccc:	6f6c4249 	svcvs	0x006c4249
    2cd0:	43416b63 	movtmi	r6, #7011	; 0x1b63
    2cd4:	6f534b4c 	svcvs	0x00534b4c
    2cd8:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2cdc:	43435200 	movtmi	r5, #12800	; 0x3200
    2ce0:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2ce4:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    2ce8:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
    2cec:	756f534b 	strbvc	r5, [pc, #-843]!	; 29a9 <_Min_Stack_Size+0x25a9>
    2cf0:	00656372 	rsbeq	r6, r5, r2, ror r3
    2cf4:	5f434352 	svcpl	0x00434352
    2cf8:	4344544c 	movtmi	r5, #17484	; 0x444c
    2cfc:	444b4c43 	strbmi	r4, [fp], #-3139	; 0xc43
    2d00:	6f437669 	svcvs	0x00437669
    2d04:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2d08:	43435200 	movtmi	r5, #12800	; 0x3200
    2d0c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2d10:	72655032 	rsbvc	r5, r5, #50	; 0x32
    2d14:	43687069 	cmnmi	r8, #105	; 0x69
    2d18:	6b636f6c 	blvs	18dead0 <_Min_Stack_Size+0x18de6d0>
    2d1c:	6f4d504c 	svcvs	0x004d504c
    2d20:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    2d24:	43520064 	cmpmi	r2, #100	; 0x64
    2d28:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    2d2c:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    2d30:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2d34:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    2d38:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2d3c:	6d434953 	stclvs	9, cr4, [r3, #-332]	; 0xfffffeb4
    2d40:	43520064 	cmpmi	r2, #100	; 0x64
    2d44:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2d48:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
    2d4c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2d50:	43435200 	movtmi	r5, #12800	; 0x3200
    2d54:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2d58:	72655033 	rsbvc	r5, r5, #51	; 0x33
    2d5c:	00687069 	rsbeq	r7, r8, r9, rrx
    2d60:	5f434352 	svcpl	0x00434352
    2d64:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
    2d68:	00766944 	rsbseq	r6, r6, r4, asr #18
    2d6c:	5f434352 	svcpl	0x00434352
    2d70:	50494153 	subpl	r4, r9, r3, asr r1
    2d74:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    2d78:	6b6c4353 	blvs	1b13acc <_Min_Stack_Size+0x1b136cc>
    2d7c:	43766944 	cmnmi	r6, #68, 18	; 0x110000
    2d80:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2d84:	43520067 	cmpmi	r2, #103	; 0x67
    2d88:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xf43
    2d8c:	4b4c4343 	blmi	1313aa0 <_Min_Stack_Size+0x13136a0>
    2d90:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2d94:	4f525245 	svcmi	0x00525245
    2d98:	43520052 	cmpmi	r2, #82	; 0x52
    2d9c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    2da0:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    2da4:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
    2da8:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
    2dac:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    2db0:	646d436d 	strbtvs	r4, [sp], #-877	; 0x36d
    2db4:	43435200 	movtmi	r5, #12800	; 0x3200
    2db8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    2dbc:	44533249 	ldrbmi	r3, [r3], #-585	; 0x249
    2dc0:	00517669 	subseq	r7, r1, r9, ror #12
    2dc4:	5f434352 	svcpl	0x00434352
    2dc8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    2dcc:	6f434941 	svcvs	0x00434941
    2dd0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2dd4:	43435200 	movtmi	r5, #12800	; 0x3200
    2dd8:	4f434d5f 	svcmi	0x00434d5f
    2ddc:	76694431 			; <UNDEFINED> instruction: 0x76694431
    2de0:	43435200 	movtmi	r5, #12800	; 0x3200
    2de4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    2de8:	72655032 	rsbvc	r5, r5, #50	; 0x32
    2dec:	52687069 	rsbpl	r7, r8, #105	; 0x69
    2df0:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    2df4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2df8:	5f434352 	svcpl	0x00434352
    2dfc:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
    2e00:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2e04:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    2e08:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2e0c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
    2e10:	756f534b 	strbvc	r5, [pc, #-843]!	; 2acd <_Min_Stack_Size+0x26cd>
    2e14:	00656372 	rsbeq	r6, r5, r2, ror r3
    2e18:	5f434352 	svcpl	0x00434352
    2e1c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2e20:	5367616c 	cmnpl	r7, #108, 2
    2e24:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2e28:	43520073 	cmpmi	r2, #115	; 0x73
    2e2c:	53485f43 	movtpl	r5, #36675	; 0x8f43
    2e30:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    2e34:	00676966 	rsbeq	r6, r7, r6, ror #18
    2e38:	5f434352 	svcpl	0x00434352
    2e3c:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
    2e40:	6b636f6c 	blvs	18debf8 <_Min_Stack_Size+0x18de7f8>
    2e44:	4b4c4342 	blmi	1313b54 <_Min_Stack_Size+0x1313754>
    2e48:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2e4c:	50006769 	andpl	r6, r0, r9, ror #14
    2e50:	41534c4c 	cmpmi	r3, ip, asr #24
    2e54:	50004e49 	andpl	r4, r0, r9, asr #28
    2e58:	41534c4c 	cmpmi	r3, ip, asr #24
    2e5c:	50005149 	andpl	r5, r0, r9, asr #2
    2e60:	41534c4c 	cmpmi	r3, ip, asr #24
    2e64:	52005249 	andpl	r5, r0, #-1879048188	; 0x90000004
    2e68:	545f4343 	ldrbpl	r4, [pc], #-835	; 2e70 <_Min_Stack_Size+0x2a70>
    2e6c:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
    2e70:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0x4b
    2e74:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2e78:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    2e7c:	505f4343 	subspl	r4, pc, r3, asr #6
    2e80:	6d434c4c 	stclvs	12, cr4, [r3, #-304]	; 0xfffffed0
    2e84:	43520064 	cmpmi	r2, #100	; 0x64
    2e88:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2e8c:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
    2e90:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2e94:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    2e98:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
    2e9c:	43435200 	movtmi	r5, #12800	; 0x3200
    2ea0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    2ea4:	72655031 	rsbvc	r5, r5, #49	; 0x31
    2ea8:	43687069 	cmnmi	r8, #105	; 0x69
    2eac:	6b636f6c 	blvs	18dec64 <_Min_Stack_Size+0x18de864>
    2eb0:	6f4d504c 	svcvs	0x004d504c
    2eb4:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    2eb8:	43520064 	cmpmi	r2, #100	; 0x64
    2ebc:	43505f43 	cmpmi	r0, #268	; 0x10c
    2ec0:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
    2ec4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2ec8:	43520067 	cmpmi	r2, #103	; 0x67
    2ecc:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2ed0:	4b4c4353 	blmi	1313c24 <_Min_Stack_Size+0x1313824>
    2ed4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2ed8:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    2edc:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2ee0:	50004553 	andpl	r4, r0, r3, asr r5
    2ee4:	314b4c43 	cmpcc	fp, r3, asr #24
    2ee8:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    2eec:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2ef0:	41007963 	tstmi	r0, r3, ror #18
    2ef4:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
    2ef8:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0x42
    2efc:	61546373 	cmpvs	r4, r3, ror r3
    2f00:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2f04:	5f434352 	svcpl	0x00434352
    2f08:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0x441
    2f0c:	53487473 	movtpl	r7, #33907	; 0x8473
    2f10:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
    2f14:	61726269 	cmnvs	r2, r9, ror #4
    2f18:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2f1c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    2f20:	73680065 	cmnvc	r8, #101	; 0x65
    2f24:	61747365 	cmnvs	r4, r5, ror #6
    2f28:	00737574 	rsbseq	r7, r3, r4, ror r5
    2f2c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    2f30:	004e5332 	subeq	r5, lr, r2, lsr r3
    2f34:	5f434352 	svcpl	0x00434352
    2f38:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2f3c:	6b636f6c 	blvs	18decf4 <_Min_Stack_Size+0x18de8f4>
    2f40:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0x673
    2f44:	43520071 	cmpmi	r2, #113	; 0x71
    2f48:	50415f43 	subpl	r5, r1, r3, asr #30
    2f4c:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
    2f50:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2f54:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2f58:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
    2f5c:	43435200 	movtmi	r5, #12800	; 0x3200
    2f60:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2f64:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2f68:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    2f6c:	00515332 	subseq	r5, r1, r2, lsr r3
    2f70:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    2f74:	00525332 	subseq	r5, r2, r2, lsr r3
    2f78:	5f434352 	svcpl	0x00434352
    2f7c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    2f80:	61745354 	cmnvs	r4, r4, asr r3
    2f84:	00737574 	rsbseq	r7, r3, r4, ror r5
    2f88:	5f434352 	svcpl	0x00434352
    2f8c:	33424841 	movtcc	r4, #10305	; 0x2841
    2f90:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2f94:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    2f98:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    2f9c:	646f4d50 	strbtvs	r4, [pc], #-3408	; 2fa4 <_Min_Stack_Size+0x2ba4>
    2fa0:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
    2fa4:	61747300 	cmnvs	r4, r0, lsl #6
    2fa8:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2fac:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    2fb0:	00726574 	rsbseq	r6, r2, r4, ror r5
    2fb4:	5f434352 	svcpl	0x00434352
    2fb8:	32425041 	subcc	r5, r2, #65	; 0x41
    2fbc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2fc0:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
    2fc4:	545f4343 	ldrbpl	r4, [pc], #-835	; 2fcc <_Min_Stack_Size+0x2bcc>
    2fc8:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
    2fcc:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0x4b
    2fd0:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
    2fd4:	00676966 	rsbeq	r6, r7, r6, ror #18
    2fd8:	5f434352 	svcpl	0x00434352
    2fdc:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    2fe0:	6f434b4c 	svcvs	0x00434b4c
    2fe4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2fe8:	43435200 	movtmi	r5, #12800	; 0x3200
    2fec:	4f434d5f 	svcmi	0x00434d5f
    2ff0:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    2ff4:	00676966 	rsbeq	r6, r7, r6, ror #18
    2ff8:	5f434352 	svcpl	0x00434352
    2ffc:	4349534c 	movtmi	r5, #37708	; 0x934c
    3000:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    3004:	415f4343 	cmpmi	pc, r3, asr #6
    3008:	50314250 	eorspl	r4, r1, r0, asr r2
    300c:	70697265 	rsbvc	r7, r9, r5, ror #4
    3010:	6f6c4368 	svcvs	0x006c4368
    3014:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    3018:	43520064 	cmpmi	r2, #100	; 0x64
    301c:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    3020:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3024:	43006769 	movwmi	r6, #1897	; 0x769
    3028:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    302c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3030:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3034:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3038:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    303c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3040:	2f736569 	svccs	0x00736569
    3044:	334d5453 	movtcc	r5, #54355	; 0xd453
    3048:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    304c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    3050:	72655064 	rsbvc	r5, r5, #100	; 0x64
    3054:	5f687069 	svcpl	0x00687069
    3058:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    305c:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    3060:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    3064:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3068:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    306c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    3070:	5300632e 	movwpl	r6, #814	; 0x32e
    3074:	45434355 	strbmi	r4, [r3, #-853]	; 0x355
    3078:	52005353 	andpl	r5, r0, #1275068417	; 0x4c000001
    307c:	505f4343 	subspl	r4, pc, r3, asr #6
    3080:	6f434c4c 	svcvs	0x00434c4c
    3084:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3088:	43435200 	movtmi	r5, #12800	; 0x3200
    308c:	6f6c435f 	svcvs	0x006c435f
    3090:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xb63
    3094:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3098:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    309c:	415f4343 	cmpmi	pc, r3, asr #6
    30a0:	50314248 	eorspl	r4, r1, r8, asr #4
    30a4:	70697265 	rsbvc	r7, r9, r5, ror #4
    30a8:	6f6c4368 	svcvs	0x006c4368
    30ac:	504c6b63 	subpl	r6, ip, r3, ror #22
    30b0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    30b4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    30b8:	5f434352 	svcpl	0x00434352
    30bc:	33424841 	movtcc	r4, #10305	; 0x2841
    30c0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    30c4:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    30c8:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    30cc:	6900646d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    30d0:	6765746e 	strbvs	r7, [r5, -lr, ror #8]!
    30d4:	69647265 	stmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    30d8:	65646976 	strbvs	r6, [r4, #-2422]!	; 0x976
    30dc:	4f430072 	svcmi	0x00430072
    30e0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    30e4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    30e8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    30ec:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    30f0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    30f4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    30f8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    30fc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3100:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3104:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    3108:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    310c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3114 <_Min_Stack_Size+0x2d14>
    3110:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3114:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    3118:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    311c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3120:	5f787834 	svcpl	0x00787834
    3124:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    3128:	00632e74 	rsbeq	r2, r3, r4, ror lr
    312c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3130:	50435f54 	subpl	r5, r3, r4, asr pc
    3134:	47004148 	strmi	r4, [r0, -r8, asr #2]
    3138:	00525054 	subseq	r5, r2, r4, asr r0
    313c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3140:	65525f54 	ldrbvs	r5, [r2, #-3924]	; 0xf54
    3144:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    3148:	61577265 	cmpvs	r7, r5, ror #4
    314c:	7055656b 	subsvc	r6, r5, fp, ror #10
    3150:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3154:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3158:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    315c:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0x74
    3160:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    3164:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    3168:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    316c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3170:	53550074 	cmppl	r5, #116	; 0x74
    3174:	5f545241 	svcpl	0x00545241
    3178:	424e494c 	submi	r4, lr, #76, 18	; 0x130000
    317c:	6b616572 	blvs	185c74c <_Min_Stack_Size+0x185c34c>
    3180:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0x544
    3184:	654c7463 	strbvs	r7, [ip, #-1123]	; 0x463
    3188:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    318c:	41535500 	cmpmi	r3, r0, lsl #10
    3190:	545f5452 	ldrbpl	r5, [pc], #-1106	; 3198 <_Min_Stack_Size+0x2d98>
    3194:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3198:	55006665 	strpl	r6, [r0, #-1637]	; 0x665
    319c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    31a0:	6f74535f 	svcvs	0x0074535f
    31a4:	74694270 	strbtvc	r4, [r9], #-624	; 0x270
    31a8:	53550073 	cmppl	r5, #115	; 0x73
    31ac:	5f545241 	svcpl	0x00545241
    31b0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    31b4:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    31b8:	70795474 	rsbsvc	r5, r9, r4, ror r4
    31bc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    31c0:	41535500 	cmpmi	r3, r0, lsl #10
    31c4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    31c8:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    31cc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    31d0:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    31d4:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
    31d8:	53550061 	cmppl	r5, #97	; 0x61
    31dc:	5f545241 	svcpl	0x00545241
    31e0:	55005449 	strpl	r5, [r0, #-1097]	; 0x449
    31e4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    31e8:	6b61575f 	blvs	1858f6c <_Min_Stack_Size+0x1858b6c>
    31ec:	00705565 	rsbseq	r5, r0, r5, ror #10
    31f0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    31f4:	6f575f54 	svcvs	0x00575f54
    31f8:	654c6472 	strbvs	r6, [ip, #-1138]	; 0x472
    31fc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    3200:	41535500 	cmpmi	r3, r0, lsl #10
    3204:	445f5452 	ldrbmi	r5, [pc], #-1106	; 320c <_Min_Stack_Size+0x2e0c>
    3208:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    320c:	53550064 	cmppl	r5, #100	; 0x64
    3210:	5f545241 	svcpl	0x00545241
    3214:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
    3218:	00746942 	rsbseq	r6, r4, r2, asr #18
    321c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3220:	61425f54 	cmpvs	r2, r4, asr pc
    3224:	61526475 	cmpvs	r2, r5, ror r4
    3228:	55006574 	strpl	r6, [r0, #-1396]	; 0x574
    322c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    3230:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    3234:	646f4d41 	strbtvs	r4, [pc], #-3393	; 323c <_Min_Stack_Size+0x2e3c>
    3238:	70610065 	rsbvc	r0, r1, r5, rrx
    323c:	6f6c6362 	svcvs	0x006c6362
    3240:	55006b63 	strpl	r6, [r0, #-2915]	; 0xb63
    3244:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    3248:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    324c:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    3250:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    3254:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    3258:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    325c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    3260:	6175475f 	cmnvs	r5, pc, asr r7
    3264:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    3268:	5500656d 	strpl	r6, [r0, #-1389]	; 0x56d
    326c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    3270:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    3274:	61657242 	cmnvs	r5, r2, asr #4
    3278:	7465446b 	strbtvc	r4, [r5], #-1131	; 0x46b
    327c:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    3280:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    3284:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    3288:	00676966 	rsbeq	r6, r7, r6, ror #18
    328c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3290:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    3294:	55004741 	strpl	r4, [r0, #-1857]	; 0x741
    3298:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    329c:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    32a0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    32a4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    32a8:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    32ac:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    32b0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    32b4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    32b8:	53550074 	cmppl	r5, #116	; 0x74
    32bc:	5f545241 	svcpl	0x00545241
    32c0:	69726150 	ldmdbvs	r2!, {r4, r6, r8, sp, lr}^
    32c4:	55007974 	strpl	r7, [r0, #-2420]	; 0x974
    32c8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    32cc:	6f6c435f 	svcvs	0x006c435f
    32d0:	74536b63 	ldrbvc	r6, [r3], #-2915	; 0xb63
    32d4:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    32d8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    32dc:	61737500 	cmnvs	r3, r0, lsl #10
    32e0:	62787472 	rsbsvs	r7, r8, #1912602624	; 0x72000000
    32e4:	00657361 	rsbeq	r7, r5, r1, ror #6
    32e8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    32ec:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    32f0:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    32f4:	0067616c 	rsbeq	r6, r7, ip, ror #2
    32f8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    32fc:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    3300:	64644174 	strbtvs	r4, [r4], #-372	; 0x174
    3304:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    3308:	41535500 	cmpmi	r3, r0, lsl #10
    330c:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    3310:	75477465 	strbvc	r7, [r7, #-1125]	; 0x465
    3314:	54647261 	strbtpl	r7, [r4], #-609	; 0x261
    3318:	00656d69 	rsbeq	r6, r5, r9, ror #26
    331c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3320:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    3324:	7242646e 	subvc	r6, r2, #1845493760	; 0x6e000000
    3328:	006b6165 	rsbeq	r6, fp, r5, ror #2
    332c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3330:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    3334:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3338:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    333c:	53550066 	cmppl	r5, #102	; 0x66
    3340:	5f545241 	svcpl	0x00545241
    3344:	6f435449 	svcvs	0x00435449
    3348:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    334c:	41535500 	cmpmi	r3, r0, lsl #10
    3350:	445f5452 	ldrbmi	r5, [pc], #-1106	; 3358 <_Min_Stack_Size+0x2f58>
    3354:	6552414d 	ldrbvs	r4, [r2, #-333]	; 0x14d
    3358:	53550071 	cmppl	r5, #113	; 0x71
    335c:	78545241 	ldmdavc	r4, {r0, r6, r9, ip, lr}^
    3360:	41535500 	cmpmi	r3, r0, lsl #10
    3364:	4f5f5452 	svcmi	0x005f5452
    3368:	6942656e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    336c:	74654d74 	strbtvc	r4, [r5], #-3444	; 0xd74
    3370:	43646f68 	cmnmi	r4, #104, 30	; 0x1a0
    3374:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    3378:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    337c:	7261485f 	rsbvc	r4, r1, #6225920	; 0x5f0000
    3380:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
    3384:	6f6c4665 	svcvs	0x006c4665
    3388:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
    338c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 31c4 <_Min_Stack_Size+0x2dc4>
    3390:	41535500 	cmpmi	r3, r0, lsl #10
    3394:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    3398:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0x16d
    339c:	64726143 	ldrbtvs	r6, [r2], #-323	; 0x143
    33a0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    33a4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    33a8:	6f4d5f54 	svcvs	0x004d5f54
    33ac:	55006564 	strpl	r6, [r0, #-1380]	; 0x564
    33b0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    33b4:	6464415f 	strbtvs	r4, [r4], #-351	; 0x15f
    33b8:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    33bc:	74696200 	strbtvc	r6, [r9], #-512	; 0x200
    33c0:	00736f70 	rsbseq	r6, r3, r0, ror pc
    33c4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    33c8:	764f5f54 			; <UNDEFINED> instruction: 0x764f5f54
    33cc:	61537265 	cmpvs	r3, r5, ror #4
    33d0:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    33d4:	4338676e 	teqmi	r8, #28835840	; 0x1b80000
    33d8:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    33dc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    33e0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    33e4:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    33e8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    33ec:	41535500 	cmpmi	r3, r0, lsl #10
    33f0:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    33f4:	6d434e49 	stclvs	14, cr4, [r3, #-292]	; 0xfffffedc
    33f8:	53550064 	cmppl	r5, #100	; 0x64
    33fc:	5f545241 	svcpl	0x00545241
    3400:	41447249 	cmpmi	r4, r9, asr #4
    3404:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3408:	55006769 	strpl	r6, [r0, #-1897]	; 0x769
    340c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    3410:	6f6c435f 	svcvs	0x006c435f
    3414:	55006b63 	strpl	r6, [r0, #-2915]	; 0xb63
    3418:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    341c:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    3420:	646d4341 	strbtvs	r4, [sp], #-833	; 0x341
    3424:	61726600 	cmnvs	r2, r0, lsl #12
    3428:	6f697463 	svcvs	0x00697463
    342c:	646c616e 	strbtvs	r6, [ip], #-366	; 0x16e
    3430:	64697669 	strbtvs	r7, [r9], #-1641	; 0x669
    3434:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    3438:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    343c:	616d535f 	cmnvs	sp, pc, asr r3
    3440:	61437472 	hvcvs	14146	; 0x3742
    3444:	414e6472 	hvcmi	58946	; 0xe642
    3448:	6d434b43 	vstrvs	d20, [r3, #-268]	; 0xfffffef4
    344c:	53550064 	cmppl	r5, #100	; 0x64
    3450:	5f545241 	svcpl	0x00545241
    3454:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    3458:	5367616c 	cmnpl	r7, #108, 2
    345c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    3460:	53550073 	cmppl	r5, #115	; 0x73
    3464:	5f545241 	svcpl	0x00545241
    3468:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    346c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3470:	52007463 	andpl	r7, r0, #1660944384	; 0x63000000
    3474:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    3478:	6b636f6c 	blvs	18df230 <_Min_Stack_Size+0x18dee30>
    347c:	61745373 	cmnvs	r4, r3, ror r3
    3480:	00737574 	rsbseq	r7, r3, r4, ror r5
    3484:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3488:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    348c:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    3490:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3494:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3498:	61575f54 	cmpvs	r7, r4, asr pc
    349c:	7055656b 	subsvc	r6, r5, fp, ror #10
    34a0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    34a4:	55006769 	strpl	r6, [r0, #-1897]	; 0x769
    34a8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    34ac:	6c61485f 	stclvs	8, cr4, [r1], #-380	; 0xfffffe84
    34b0:	70754466 	rsbsvc	r4, r5, r6, ror #8
    34b4:	4378656c 	cmnmi	r8, #108, 10	; 0x1b000000
    34b8:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    34bc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    34c0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    34c4:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    34c8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    34cc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    34d0:	72505f54 	subsvc	r5, r0, #84, 30	; 0x150
    34d4:	61637365 	cmnvs	r3, r5, ror #6
    34d8:	0072656c 	rsbseq	r6, r2, ip, ror #10
    34dc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    34e0:	50435f54 	subpl	r5, r3, r4, asr pc
    34e4:	69004c4f 	stmdbvs	r0, {r0, r1, r2, r3, r6, sl, fp, lr}
    34e8:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
    34ec:	5355006b 	cmppl	r5, #107	; 0x6b
    34f0:	5f545241 	svcpl	0x00545241
    34f4:	65636552 	strbvs	r6, [r3, #-1362]!	; 0x552
    34f8:	44657669 	strbtmi	r7, [r5], #-1641	; 0x669
    34fc:	00617461 	rsbeq	r7, r1, r1, ror #8
    3500:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    3504:	67657274 			; <UNDEFINED> instruction: 0x67657274
    3508:	53595300 	cmppl	r9, #0, 6
    350c:	5f474643 	svcpl	0x00474643
    3510:	6f6d654d 	svcvs	0x006d654d
    3514:	77537972 			; <UNDEFINED> instruction: 0x77537972
    3518:	69707061 	ldmdbvs	r0!, {r0, r5, r6, ip, sp, lr}^
    351c:	6142676e 	cmpvs	r2, lr, ror #14
    3520:	53006b6e 	movwpl	r6, #2926	; 0xb6e
    3524:	46435359 			; <UNDEFINED> instruction: 0x46435359
    3528:	6f435f47 	svcvs	0x00435f47
    352c:	6e65706d 	cdpvs	0, 6, cr7, cr5, cr13, {3}
    3530:	69746173 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, sp, lr}^
    3534:	65436e6f 	strbvs	r6, [r3, #-3695]	; 0xe6f
    3538:	6d436c6c 	stclvs	12, cr6, [r3, #-432]	; 0xfffffe50
    353c:	59530064 	ldmdbpl	r3, {r2, r5, r6}^
    3540:	47464353 	smlsldmi	r4, r6, r3, r3
    3544:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    3548:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    354c:	61736e65 	cmnvs	r3, r5, ror #28
    3550:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    3554:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
    3558:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    355c:	43007375 	movwmi	r7, #885	; 0x375
    3560:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3564:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3568:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    356c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3570:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3574:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3578:	2f736569 	svccs	0x00736569
    357c:	334d5453 	movtcc	r5, #54355	; 0xd453
    3580:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    3584:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    3588:	72655064 	rsbvc	r5, r5, #100	; 0x64
    358c:	5f687069 	svcpl	0x00687069
    3590:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3594:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    3598:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    359c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    35a0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    35a4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    35a8:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    35ac:	4d430063 	stclmi	0, cr0, [r3, #-396]	; 0xfffffe74
    35b0:	00524350 	subseq	r4, r2, r0, asr r3
    35b4:	524d454d 	subpl	r4, sp, #322961408	; 0x13400000
    35b8:	5300504d 	movwpl	r5, #77	; 0x4d
    35bc:	46435359 			; <UNDEFINED> instruction: 0x46435359
    35c0:	54455f47 	strbpl	r5, [r5], #-3911	; 0xf47
    35c4:	654d5f48 	strbvs	r5, [sp, #-3912]	; 0xf48
    35c8:	49616964 	stmdbmi	r1!, {r2, r5, r6, r8, fp, sp, lr}^
    35cc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    35d0:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    35d4:	53455200 	movtpl	r5, #20992	; 0x5200
    35d8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    35dc:	58450044 	stmdapl	r5, {r2, r6}^
    35e0:	52434954 	subpl	r4, r3, #84, 18	; 0x150000
    35e4:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    35e8:	69505f49 	ldmdbvs	r0, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    35ec:	756f536e 	strbvc	r5, [pc, #-878]!	; 3286 <_Min_Stack_Size+0x2e86>
    35f0:	78656372 	stmdavc	r5!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    35f4:	53595300 	cmppl	r9, #0, 6
    35f8:	5f474643 	svcpl	0x00474643
    35fc:	5f485445 	svcpl	0x00485445
    3600:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    3604:	746e4961 	strbtvc	r4, [lr], #-2401	; 0x961
    3608:	61667265 	cmnvs	r6, r5, ror #4
    360c:	6f436563 	svcvs	0x00436563
    3610:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3614:	53595300 	cmppl	r9, #0, 6
    3618:	5f474643 	svcpl	0x00474643
    361c:	6f6d654d 	svcvs	0x006d654d
    3620:	65527972 	ldrbvs	r7, [r2, #-2418]	; 0x972
    3624:	0070616d 	rsbseq	r6, r0, sp, ror #2
    3628:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    362c:	545f4746 	ldrbpl	r4, [pc], #-1862	; 3634 <_Min_Stack_Size+0x3234>
    3630:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3634:	45006665 	strmi	r6, [r0, #-1637]	; 0x665
    3638:	5f495458 	svcpl	0x00495458
    363c:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    3640:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    3644:	50476563 	subpl	r6, r7, r3, ror #10
    3648:	00784f49 	rsbseq	r4, r8, r9, asr #30
    364c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    3650:	445f4746 	ldrbmi	r4, [pc], #-1862	; 3658 <_Min_Stack_Size+0x3258>
    3654:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    3658:	59530074 	ldmdbpl	r3, {r2, r4, r5, r6}^
    365c:	47464353 	smlsldmi	r4, r6, r3, r3
    3660:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    3664:	5279726f 	rsbspl	r7, r9, #-268435450	; 0xf0000006
    3668:	70616d65 	rsbvc	r6, r1, r5, ror #26
    366c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3670:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    3674:	435f4332 	cmpmi	pc, #-939524096	; 0xc8000000
    3678:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    367c:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    3680:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    3684:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    3688:	43324900 	teqmi	r2, #0, 18
    368c:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    3690:	74617265 	strbtvc	r7, [r1], #-613	; 0x265
    3694:	41545365 	cmpmi	r4, r5, ror #6
    3698:	49005452 	stmdbmi	r0, {r1, r4, r6, sl, ip, lr}
    369c:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    36a0:	45507465 	ldrbmi	r7, [r0, #-1125]	; 0x465
    36a4:	32490043 	subcc	r0, r9, #67	; 0x43
    36a8:	74535f43 	ldrbvc	r5, [r3], #-3907	; 0xf43
    36ac:	63746572 	cmnvs	r4, #478150656	; 0x1c800000
    36b0:	6f6c4368 	svcvs	0x006c4368
    36b4:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    36b8:	32490064 	subcc	r0, r9, #100	; 0x64
    36bc:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    36c0:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    36c4:	54007265 	strpl	r7, [r0], #-613	; 0x265
    36c8:	45534952 	ldrbmi	r4, [r3, #-2386]	; 0x952
    36cc:	43324900 	teqmi	r2, #0, 18
    36d0:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    36d4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    36d8:	32490067 	subcc	r0, r9, #103	; 0x67
    36dc:	414e5f43 	cmpmi	lr, r3, asr #30
    36e0:	6f504b43 	svcvs	0x00504b43
    36e4:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    36e8:	6f436e6f 	svcvs	0x00436e6f
    36ec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    36f0:	43324900 	teqmi	r2, #0, 18
    36f4:	6e774f5f 	mrcvs	15, 3, r4, cr7, cr15, {2}
    36f8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    36fc:	32737365 	rsbscc	r7, r3, #-1811939327	; 0x94000001
    3700:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3704:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    3708:	495f4332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, lr}^	; <UNPREDICTABLE>
    370c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    3710:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3714:	72660074 	rsbvc	r0, r6, #116	; 0x74
    3718:	61727165 	cmnvs	r2, r5, ror #2
    371c:	0065676e 	rsbeq	r6, r5, lr, ror #14
    3720:	5f433249 	svcpl	0x00433249
    3724:	646e6553 	strbtvs	r6, [lr], #-1363	; 0x553
    3728:	61746144 	cmnvs	r4, r4, asr #2
    372c:	43324900 	teqmi	r2, #0, 18
    3730:	6c61435f 	stclvs	3, cr4, [r1], #-380	; 0xfffffe84
    3734:	616c7563 	cmnvs	ip, r3, ror #10
    3738:	45506574 	ldrbmi	r6, [r0, #-1396]	; 0x574
    373c:	32490043 	subcc	r0, r9, #67	; 0x43
    3740:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    3744:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    3748:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
    374c:	43324900 	teqmi	r2, #0, 18
    3750:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 3758 <_Min_Stack_Size+0x3358>
    3754:	32490065 	subcc	r0, r9, #101	; 0x65
    3758:	74535f43 	ldrbvc	r5, [r3], #-3907	; 0xf43
    375c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3760:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3764:	52414f00 	subpl	r4, r1, #0, 30
    3768:	4c460031 	mcrrmi	0, 3, r0, r6, cr1
    376c:	49005254 	stmdbmi	r0, {r2, r4, r6, r9, ip, lr}
    3770:	445f4332 	ldrbmi	r4, [pc], #-818	; 3778 <_Min_Stack_Size+0x3378>
    3774:	614c414d 	cmpvs	ip, sp, asr #2
    3778:	72547473 	subsvc	r7, r4, #1929379840	; 0x73000000
    377c:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    3780:	6d437265 	sfmvs	f7, 2, [r3, #-404]	; 0xfffffe6c
    3784:	32490064 	subcc	r0, r9, #100	; 0x64
    3788:	4d535f43 	ldclmi	15, cr5, [r3, #-268]	; 0xfffffef4
    378c:	41737542 	cmnmi	r3, r2, asr #10
    3790:	7472656c 	ldrbtvc	r6, [r2], #-1388	; 0x56c
    3794:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3798:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    379c:	545f4332 	ldrbpl	r4, [pc], #-818	; 37a4 <_Min_Stack_Size+0x33a4>
    37a0:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    37a4:	49006665 	stmdbmi	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
    37a8:	445f4332 	ldrbmi	r4, [pc], #-818	; 37b0 <_Min_Stack_Size+0x33b0>
    37ac:	74696769 	strbtvc	r6, [r9], #-1897	; 0x769
    37b0:	69466c61 	stmdbvs	r6, {r0, r5, r6, sl, fp, sp, lr}^
    37b4:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    37b8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    37bc:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    37c0:	505f4332 	subspl	r4, pc, r2, lsr r3	; <UNPREDICTABLE>
    37c4:	6f504345 	svcvs	0x00504345
    37c8:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    37cc:	6f436e6f 	svcvs	0x00436e6f
    37d0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    37d4:	616c6600 	cmnvs	ip, r0, lsl #12
    37d8:	736f7067 	cmnvc	pc, #103	; 0x67
    37dc:	43324900 	teqmi	r2, #0, 18
    37e0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    37e4:	32490074 	subcc	r0, r9, #116	; 0x74
    37e8:	52415f43 	subpl	r5, r1, #268	; 0x10c
    37ec:	646d4350 	strbtvs	r4, [sp], #-848	; 0x350
    37f0:	43324900 	teqmi	r2, #0, 18
    37f4:	7475445f 	ldrbtvc	r4, [r5], #-1119	; 0x45f
    37f8:	63794379 	cmnvs	r9, #-469762047	; 0xe4000001
    37fc:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    3800:	65726332 	ldrbvs	r6, [r2, #-818]!	; 0x332
    3804:	32490067 	subcc	r0, r9, #103	; 0x67
    3808:	72545f43 	subsvc	r5, r4, #268	; 0x10c
    380c:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
    3810:	45507469 	ldrbmi	r7, [r0, #-1129]	; 0x469
    3814:	32490043 	subcc	r0, r9, #67	; 0x43
    3818:	4d535f43 	ldclmi	15, cr5, [r3, #-268]	; 0xfffffef4
    381c:	41737542 	cmnmi	r3, r2, asr #10
    3820:	7472656c 	ldrbtvc	r6, [r2], #-1388	; 0x56c
    3824:	43324900 	teqmi	r2, #0, 18
    3828:	32490078 	subcc	r0, r9, #120	; 0x78
    382c:	69445f43 	stmdbvs	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    3830:	74636572 	strbtvc	r6, [r3], #-1394	; 0x572
    3834:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3838:	5f433249 	svcpl	0x00433249
    383c:	4b43414e 	blmi	10d3d7c <_Min_Stack_Size+0x10d397c>
    3840:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    3844:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    3848:	43324900 	teqmi	r2, #0, 18
    384c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    3850:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
    3854:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    3858:	32490074 	subcc	r0, r9, #116	; 0x74
    385c:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
    3860:	49004741 	stmdbmi	r0, {r0, r6, r8, r9, sl, lr}
    3864:	445f4332 	ldrbmi	r4, [pc], #-818	; 386c <_Min_Stack_Size+0x346c>
    3868:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    386c:	32490074 	subcc	r0, r9, #116	; 0x74
    3870:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    3874:	6172656e 	cmnvs	r2, lr, ror #10
    3878:	6c61436c 	stclvs	3, cr4, [r1], #-432	; 0xfffffe50
    387c:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
    3880:	43324900 	teqmi	r2, #0, 18
    3884:	6568435f 	strbvs	r4, [r8, #-863]!	; 0x35f
    3888:	76456b63 	strbvc	r6, [r5], -r3, ror #22
    388c:	00746e65 	rsbseq	r6, r4, r5, ror #28
    3890:	5f433249 	svcpl	0x00433249
    3894:	43414d44 	movtmi	r4, #7492	; 0x1d44
    3898:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    389c:	495f4332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, lr}^	; <UNPREDICTABLE>
    38a0:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    38a4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    38a8:	49006665 	stmdbmi	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
    38ac:	495f4332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, lr}^	; <UNPREDICTABLE>
    38b0:	63700054 	cmnvs	r0, #84	; 0x54
    38b4:	00316b6c 	eorseq	r6, r1, ip, ror #22
    38b8:	5f433249 	svcpl	0x00433249
    38bc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    38c0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    38c4:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    38c8:	45520037 	ldrbmi	r0, [r2, #-55]	; 0x37
    38cc:	56524553 			; <UNDEFINED> instruction: 0x56524553
    38d0:	00384445 	eorseq	r4, r8, r5, asr #8
    38d4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    38d8:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    38dc:	32490039 	subcc	r0, r9, #57	; 0x39
    38e0:	774f5f43 	strbvc	r5, [pc, -r3, asr #30]
    38e4:	6464416e 	strbtvs	r4, [r4], #-366	; 0x16e
    38e8:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    38ec:	4f430031 	svcmi	0x00430031
    38f0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    38f4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    38f8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    38fc:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3900:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3904:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3908:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    390c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3910:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3914:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    3918:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    391c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3924 <_Min_Stack_Size+0x3524>
    3920:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3924:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    3928:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    392c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3930:	5f787834 	svcpl	0x00787834
    3934:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    3938:	63720063 	cmnvs	r2, #99	; 0x63
    393c:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
    3940:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    3944:	43324900 	teqmi	r2, #0, 18
    3948:	6b63415f 	blvs	18d3ecc <_Min_Stack_Size+0x18d3acc>
    394c:	43324900 	teqmi	r2, #0, 18
    3950:	4556455f 	ldrbmi	r4, [r6, #-1375]	; 0x55f
    3954:	4900544e 	stmdbmi	r0, {r1, r2, r3, r6, sl, ip, lr}
    3958:	525f4332 	subspl	r4, pc, #-939524096	; 0xc8000000
    395c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    3960:	61446576 	hvcvs	18006	; 0x4656
    3964:	49006174 	stmdbmi	r0, {r2, r4, r5, r6, r8, sp, lr}
    3968:	435f4332 	cmpmi	pc, #-939524096	; 0xc8000000
    396c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    3970:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    3974:	43324900 	teqmi	r2, #0, 18
    3978:	6b63415f 	blvs	18d3efc <_Min_Stack_Size+0x18d3afc>
    397c:	6c776f6e 	ldclvs	15, cr6, [r7], #-440	; 0xfffffe48
    3980:	65676465 	strbvs	r6, [r7, #-1125]!	; 0x465
    3984:	64644164 	strbtvs	r4, [r4], #-356	; 0x164
    3988:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    398c:	43324900 	teqmi	r2, #0, 18
    3990:	6165525f 	cmnvs	r5, pc, asr r2
    3994:	67655264 	strbvs	r5, [r5, -r4, ror #4]!
    3998:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0x369
    399c:	32490072 	subcc	r0, r9, #114	; 0x72
    39a0:	61465f43 	cmpvs	r6, r3, asr #30
    39a4:	6f4d7473 	svcvs	0x004d7473
    39a8:	75446564 	strbvc	r6, [r4, #-1380]	; 0x564
    39ac:	79437974 	stmdbvc	r3, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    39b0:	43656c63 	cmnmi	r5, #25344	; 0x6300
    39b4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    39b8:	32490067 	subcc	r0, r9, #103	; 0x67
    39bc:	75445f43 	strbvc	r5, [r4, #-3907]	; 0xf43
    39c0:	64416c61 	strbvs	r6, [r1], #-3169	; 0xc61
    39c4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    39c8:	646d4373 	strbtvs	r4, [sp], #-883	; 0x373
    39cc:	616c6600 	cmnvs	ip, r0, lsl #12
    39d0:	66003167 	strvs	r3, [r0], -r7, ror #2
    39d4:	3267616c 	rsbcc	r6, r7, #108, 2
    39d8:	616e6500 	cmnvs	lr, r0, lsl #10
    39dc:	73656c62 	cmnvc	r5, #25088	; 0x6200
    39e0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    39e4:	32490073 	subcc	r0, r9, #115	; 0x73
    39e8:	63415f43 	movtvs	r5, #8003	; 0x1f43
    39ec:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    39f0:	6764656c 	strbvs	r6, [r4, -ip, ror #10]!
    39f4:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    39f8:	00676966 	rsbeq	r6, r7, r6, ror #18
    39fc:	5f433249 	svcpl	0x00433249
    3a00:	50434550 	subpl	r4, r3, r0, asr r5
    3a04:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    3a08:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3a0c:	5f433249 	svcpl	0x00433249
    3a10:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    3a14:	5367616c 	cmnpl	r7, #108, 2
    3a18:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    3a1c:	616c0073 	smcvs	49155	; 0xc003
    3a20:	76657473 			; <UNDEFINED> instruction: 0x76657473
    3a24:	00746e65 	rsbseq	r6, r4, r5, ror #28
    3a28:	5f433249 	svcpl	0x00433249
    3a2c:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xf53
    3a30:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    3a34:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    3a38:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
    3a3c:	43324900 	teqmi	r2, #0, 18
    3a40:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    3a44:	69623764 	stmdbvs	r2!, {r2, r5, r6, r8, r9, sl, ip, sp}^
    3a48:	64644174 	strbtvs	r4, [r4], #-372	; 0x174
    3a4c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    3a50:	63326900 	teqvs	r2, #0, 18
    3a54:	73616278 	cmnvc	r1, #120, 4	; 0x80000007
    3a58:	414f0065 	cmpmi	pc, r5, rrx
    3a5c:	49003252 	stmdbmi	r0, {r1, r4, r6, r9, ip, sp}
    3a60:	445f4332 	ldrbmi	r4, [pc], #-818	; 3a68 <_Min_Stack_Size+0x3668>
    3a64:	74696769 	strbtvc	r6, [r9], #-1897	; 0x769
    3a68:	69466c61 	stmdbvs	r6, {r0, r5, r6, sl, fp, sp, lr}^
    3a6c:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    3a70:	43324900 	teqmi	r2, #0, 18
    3a74:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    3a78:	74617265 	strbtvc	r7, [r1], #-613	; 0x265
    3a7c:	4f545365 	svcmi	0x00545365
    3a80:	32490050 	subcc	r0, r9, #80	; 0x50
    3a84:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    3a88:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    3a8c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    3a90:	32490073 	subcc	r0, r9, #115	; 0x73
    3a94:	6e415f43 	cdpvs	15, 4, cr5, cr1, cr3, {2}
    3a98:	676f6c61 	strbvs	r6, [pc, -r1, ror #24]!
    3a9c:	746c6946 	strbtvc	r6, [ip], #-2374	; 0x946
    3aa0:	6d437265 	sfmvs	f7, 2, [r3, #-404]	; 0xfffffe6c
    3aa4:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0x64
    3aa8:	746c7573 	strbtvc	r7, [ip], #-1395	; 0x573
    3aac:	414d4400 	cmpmi	sp, r0, lsl #8
    3ab0:	7275435f 	rsbsvc	r4, r5, #2080374785	; 0x7c000001
    3ab4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    3ab8:	6f6d654d 	svcvs	0x006d654d
    3abc:	44007972 	strmi	r7, [r0], #-2418	; 0x972
    3ac0:	435f414d 	cmpmi	pc, #1073741843	; 0x40000013
    3ac4:	4400646d 	strmi	r6, [r0], #-1133	; 0x46d
    3ac8:	535f414d 	cmppl	pc, #1073741843	; 0x40000013
    3acc:	61657274 	smcvs	22308	; 0x5724
    3ad0:	79545f6d 	ldmdbvc	r4, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3ad4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3ad8:	74730066 	ldrbtvc	r0, [r3], #-102	; 0x66
    3adc:	00657461 	rsbeq	r7, r5, r1, ror #8
    3ae0:	5f414d44 	svcpl	0x00414d44
    3ae4:	6f697250 	svcvs	0x00697250
    3ae8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3aec:	414d4400 	cmpmi	sp, r0, lsl #8
    3af0:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    3af4:	4279726f 	rsbsmi	r7, r9, #-268435450	; 0xf0000006
    3af8:	74737275 	ldrbtvc	r7, [r3], #-629	; 0x275
    3afc:	414d4400 	cmpmi	sp, r0, lsl #8
    3b00:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    3b04:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    3b08:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3b0c:	5f414d44 	svcpl	0x00414d44
    3b10:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3b14:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
    3b18:	75426c61 	strbvc	r6, [r2, #-3169]	; 0xc61
    3b1c:	00747372 	rsbseq	r7, r4, r2, ror r3
    3b20:	5f414d44 	svcpl	0x00414d44
    3b24:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    3b28:	534f4649 	movtpl	r4, #63049	; 0xf649
    3b2c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    3b30:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
    3b34:	79545f41 	ldmdbvc	r4, {r0, r6, r8, r9, sl, fp, ip, lr}^
    3b38:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3b3c:	4d440066 	stclmi	0, cr0, [r4, #-408]	; 0xfffffe68
    3b40:	65475f41 	strbvs	r5, [r7, #-3905]	; 0xf41
    3b44:	72754374 	rsbsvc	r4, r5, #116, 6	; 0xd0000001
    3b48:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    3b4c:	6f6d654d 	svcvs	0x006d654d
    3b50:	61547972 	cmpvs	r4, r2, ror r9
    3b54:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
    3b58:	414d4400 	cmpmi	sp, r0, lsl #8
    3b5c:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    3b60:	5479726f 	ldrbtpl	r7, [r9], #-623	; 0x26f
    3b64:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
    3b68:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    3b6c:	44007941 	strmi	r7, [r0], #-2369	; 0x941
    3b70:	5f79414d 	svcpl	0x0079414d
    3b74:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    3b78:	00786d61 	rsbseq	r6, r8, r1, ror #26
    3b7c:	5f414d44 	svcpl	0x00414d44
    3b80:	00524944 	subseq	r4, r2, r4, asr #18
    3b84:	5f414d44 	svcpl	0x00414d44
    3b88:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3b8c:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
    3b90:	61426c61 	cmpvs	r2, r1, ror #24
    3b94:	64416573 	strbvs	r6, [r1], #-1395	; 0x573
    3b98:	44007264 	strmi	r7, [r0], #-612	; 0x264
    3b9c:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 3a70 <_Min_Stack_Size+0x3670>
    3ba0:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    3ba4:	636e4979 	cmnvs	lr, #1982464	; 0x1e4000
    3ba8:	414d4400 	cmpmi	sp, r0, lsl #8
    3bac:	6f6c465f 	svcvs	0x006c465f
    3bb0:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
    3bb4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 39ec <_Min_Stack_Size+0x35ec>
    3bb8:	4372656c 	cmnmi	r2, #108, 10	; 0x1b000000
    3bbc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3bc0:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    3bc4:	654d5f41 	strbvs	r5, [sp, #-3905]	; 0xf41
    3bc8:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3bcc:	67726154 			; <UNDEFINED> instruction: 0x67726154
    3bd0:	6f437465 	svcvs	0x00437465
    3bd4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3bd8:	414d4400 	cmpmi	sp, r0, lsl #8
    3bdc:	7265505f 	rsbvc	r5, r5, #95	; 0x5f
    3be0:	65687069 	strbvs	r7, [r8, #-105]!	; 0x69
    3be4:	496c6172 	stmdbmi	ip!, {r1, r4, r5, r6, r8, sp, lr}^
    3be8:	4400636e 	strmi	r6, [r0], #-878	; 0x36e
    3bec:	445f414d 	ldrbmi	r4, [pc], #-333	; 3bf4 <_Min_Stack_Size+0x37f4>
    3bf0:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    3bf4:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    3bf8:	4d726566 	cfldr64mi	mvdx6, [r2, #-408]!	; 0xfffffe68
    3bfc:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    3c00:	4400646d 	strmi	r6, [r0], #-1133	; 0x46d
    3c04:	495f414d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, lr}^	; <UNPREDICTABLE>
    3c08:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3c0c:	5253494c 	subspl	r4, r3, #76, 18	; 0x130000
    3c10:	414d4400 	cmpmi	sp, r0, lsl #8
    3c14:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    3c18:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    3c1c:	44006761 	strmi	r6, [r0], #-1889	; 0x761
    3c20:	535f414d 	cmppl	pc, #1073741843	; 0x40000013
    3c24:	75437465 	strbvc	r7, [r3, #-1125]	; 0x465
    3c28:	61447272 	hvcvs	18210	; 0x4722
    3c2c:	6f436174 	svcvs	0x00436174
    3c30:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    3c34:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
    3c38:	65505f41 	ldrbvs	r5, [r0, #-3905]	; 0xf41
    3c3c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3c40:	6c617265 	sfmvs	f7, 2, [r1], #-404	; 0xfffffe6c
    3c44:	61746144 	cmnvs	r4, r4, asr #2
    3c48:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    3c4c:	414d4400 	cmpmi	sp, r0, lsl #8
    3c50:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3c54:	70795474 	rsbsvc	r5, r9, r4, ror r4
    3c58:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3c5c:	414d4400 	cmpmi	sp, r0, lsl #8
    3c60:	6675425f 			; <UNDEFINED> instruction: 0x6675425f
    3c64:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    3c68:	00657a69 	rsbeq	r7, r5, r9, ror #20
    3c6c:	5f414d44 	svcpl	0x00414d44
    3c70:	62756f44 	rsbsvs	r6, r5, #68, 30	; 0x110
    3c74:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    3c78:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    3c7c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    3c80:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3c84:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    3c88:	465f414d 	ldrbmi	r4, [pc], -sp, asr #2
    3c8c:	544f4649 	strbpl	r4, [pc], #-1609	; 3c94 <_Min_Stack_Size+0x3894>
    3c90:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    3c94:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xf68
    3c98:	414d4400 	cmpmi	sp, r0, lsl #8
    3c9c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    3ca0:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    3ca4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3ca8:	53494800 	movtpl	r4, #38912	; 0x9800
    3cac:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    3cb0:	6e495f41 	cdpvs	15, 4, cr5, cr9, cr1, {2}
    3cb4:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    3cb8:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3cbc:	414d4400 	cmpmi	sp, r0, lsl #8
    3cc0:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    3cc4:	00736f63 	rsbseq	r6, r3, r3, ror #30
    3cc8:	5241314d 	subpl	r3, r1, #1073741843	; 0x40000013
    3ccc:	414d4400 	cmpmi	sp, r0, lsl #8
    3cd0:	6f6c465f 	svcvs	0x006c465f
    3cd4:	72744377 	rsbsvc	r4, r4, #-603979775	; 0xdc000001
    3cd8:	4d44006c 	stclmi	0, cr0, [r4, #-432]	; 0xfffffe50
    3cdc:	4c465f41 	mcrrmi	15, 4, r5, r6, cr1
    3ce0:	44004741 	strmi	r4, [r0], #-1857	; 0x741
    3ce4:	435f414d 	cmpmi	pc, #1073741843	; 0x40000013
    3ce8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    3cec:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    3cf0:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    3cf4:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    3cf8:	414d4400 	cmpmi	sp, r0, lsl #8
    3cfc:	7265505f 	rsbvc	r5, r5, #95	; 0x5f
    3d00:	49687069 	stmdbmi	r8!, {r0, r3, r5, r6, ip, sp, lr}^
    3d04:	664f636e 	strbvs	r6, [pc], -lr, ror #6
    3d08:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    3d0c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    3d10:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3d14:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    3d18:	445f414d 	ldrbmi	r4, [pc], #-333	; 3d20 <_Min_Stack_Size+0x3920>
    3d1c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    3d20:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    3d24:	65475f41 	strbvs	r5, [r7, #-3905]	; 0xf41
    3d28:	616c4674 	smcvs	50276	; 0xc464
    3d2c:	61745367 	cmnvs	r4, r7, ror #6
    3d30:	00737574 	rsbseq	r7, r3, r4, ror r5
    3d34:	4346494c 	movtmi	r4, #26956	; 0x694c
    3d38:	304d0052 	subcc	r0, sp, r2, asr r0
    3d3c:	4e005241 	cdpmi	2, 0, cr5, cr0, cr1, {2}
    3d40:	00525444 	subseq	r5, r2, r4, asr #8
    3d44:	6f6d654d 	svcvs	0x006d654d
    3d48:	42317972 	eorsmi	r7, r1, #1867776	; 0x1c8000
    3d4c:	41657361 	cmnmi	r5, r1, ror #6
    3d50:	00726464 	rsbseq	r6, r2, r4, ror #8
    3d54:	5f414d44 	svcpl	0x00414d44
    3d58:	4f464946 	svcmi	0x00464946
    3d5c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    3d60:	414d4400 	cmpmi	sp, r0, lsl #8
    3d64:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    3d68:	53646d43 	cmnpl	r4, #4288	; 0x10c0
    3d6c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    3d70:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
    3d74:	68435f41 	stmdavs	r3, {r0, r6, r8, r9, sl, fp, ip, lr}^
    3d78:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    3d7c:	654d006c 	strbvs	r0, [sp, #-108]	; 0x6c
    3d80:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3d84:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    3d88:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    3d8c:	46494800 	strbmi	r4, [r9], -r0, lsl #16
    3d90:	44005243 	strmi	r5, [r0], #-579	; 0x243
    3d94:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 3c68 <_Min_Stack_Size+0x3868>
    3d98:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    3d9c:	61423079 	hvcvs	8969	; 0x2309
    3da0:	64416573 	strbvs	r6, [r1], #-1395	; 0x573
    3da4:	43007264 	movwmi	r7, #612	; 0x264
    3da8:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3dac:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3db0:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3db4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3db8:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3dbc:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3dc0:	2f736569 	svccs	0x00736569
    3dc4:	334d5453 	movtcc	r5, #54355	; 0xd453
    3dc8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    3dcc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    3dd0:	72655064 	rsbvc	r5, r5, #100	; 0x64
    3dd4:	5f687069 	svcpl	0x00687069
    3dd8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3ddc:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    3de0:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    3de4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3de8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3dec:	616d645f 	cmnvs	sp, pc, asr r4
    3df0:	4400632e 	strmi	r6, [r0], #-814	; 0x32e
    3df4:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 3cc8 <_Min_Stack_Size+0x38c8>
    3df8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    3dfc:	5f414d44 	svcpl	0x00414d44
    3e00:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    3e04:	44727275 	ldrbtmi	r7, [r2], #-629	; 0x275
    3e08:	43617461 	cmnmi	r1, #1627389952	; 0x61000000
    3e0c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    3e10:	44007265 	strmi	r7, [r0], #-613	; 0x265
    3e14:	495f414d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, lr}^	; <UNPREDICTABLE>
    3e18:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    3e1c:	00676966 	rsbeq	r6, r7, r6, ror #18
    3e20:	5f414d44 	svcpl	0x00414d44
    3e24:	44005449 	strmi	r5, [r0], #-1097	; 0x449
    3e28:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 3cfc <_Min_Stack_Size+0x38fc>
    3e2c:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    3e30:	74614479 	strbtvc	r4, [r1], #-1145	; 0x479
    3e34:	7a695361 	bvc	1a58bc0 <_Min_Stack_Size+0x1a587c0>
    3e38:	4f430065 	svcmi	0x00430065
    3e3c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3e40:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3e44:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3e48:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3e4c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3e50:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3e54:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3e58:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3e5c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3e60:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    3e64:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3e68:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3e70 <_Min_Stack_Size+0x3a70>
    3e6c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3e70:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    3e74:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    3e78:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3e7c:	5f787834 	svcpl	0x00787834
    3e80:	2e697073 	mcrcs	0, 3, r7, cr9, cr3, {3}
    3e84:	58520063 	ldmdapl	r2, {r0, r1, r5, r6}^
    3e88:	52435243 	subpl	r5, r3, #805306372	; 0x30000004
    3e8c:	6c6c7000 	stclvs	0, cr7, [ip], #-0
    3e90:	5053006e 	subspl	r0, r3, lr, rrx
    3e94:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    3e98:	70007469 	andvc	r7, r0, r9, ror #8
    3e9c:	00726c6c 	rsbseq	r6, r2, ip, ror #24
    3ea0:	5f533249 	svcpl	0x00533249
    3ea4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3ea8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3eac:	43007463 	movwmi	r7, #1123	; 0x463
    3eb0:	52504352 	subspl	r4, r0, #1207959553	; 0x48000001
    3eb4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3eb8:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    3ebc:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    3ec0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3ec4:	32490067 	subcc	r0, r9, #103	; 0x67
    3ec8:	6e495f53 	mcrvs	15, 2, r5, cr9, cr3, {2}
    3ecc:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3ed0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3ed4:	50530066 	subspl	r0, r3, r6, rrx
    3ed8:	32495f49 	subcc	r5, r9, #292	; 0x124
    3edc:	65445f53 	strbvs	r5, [r4, #-3923]	; 0xf53
    3ee0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3ee4:	53324900 	teqpl	r2, #0, 18
    3ee8:	6174535f 	cmnvs	r4, pc, asr r3
    3eec:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    3ef0:	50530064 	subspl	r0, r3, r4, rrx
    3ef4:	69425f49 	stmdbvs	r2, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    3ef8:	65726944 	ldrbvs	r6, [r2, #-2372]!	; 0x944
    3efc:	6f697463 	svcvs	0x00697463
    3f00:	4c6c616e 	stfmie	f6, [ip], #-440	; 0xfffffe48
    3f04:	43656e69 	cmnmi	r5, #1680	; 0x690
    3f08:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3f0c:	50530067 	subspl	r0, r3, r7, rrx
    3f10:	65475f49 	strbvs	r5, [r7, #-3913]	; 0xf49
    3f14:	43524374 	cmpmi	r2, #116, 6	; 0xd0000001
    3f18:	796c6f50 	stmdbvc	ip!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    3f1c:	696d6f6e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3f20:	63006c61 	movwvs	r6, #3169	; 0xc61
    3f24:	65726372 	ldrbvs	r6, [r2, #-882]!	; 0x372
    3f28:	50530067 	subspl	r0, r3, r7, rrx
    3f2c:	32495f49 	subcc	r5, r9, #292	; 0x124
    3f30:	4d445f53 	stclmi	15, cr5, [r4, #-332]	; 0xfffffeb4
    3f34:	646d4341 	strbtvs	r4, [sp], #-833	; 0x341
    3f38:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3f3c:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    3f40:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    3f44:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    3f48:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3f4c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3f50:	53534e5f 	cmppl	r3, #1520	; 0x5f0
    3f54:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    3f58:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    3f5c:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xf53
    3f60:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    3f64:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3f68:	53006769 	movwpl	r6, #1897	; 0x769
    3f6c:	535f4950 	cmppl	pc, #80, 18	; 0x140000
    3f70:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3f74:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    3f78:	50530074 	subspl	r0, r3, r4, ror r0
    3f7c:	32495f49 	subcc	r5, r9, #292	; 0x124
    3f80:	65475f53 	strbvs	r5, [r7, #-3923]	; 0xf53
    3f84:	616c4674 	smcvs	50276	; 0xc464
    3f88:	61745367 	cmnvs	r4, r7, ror #6
    3f8c:	00737574 	rsbseq	r7, r3, r4, ror r5
    3f90:	5f495053 	svcpl	0x00495053
    3f94:	754f5353 	strbvc	r5, [pc, #-851]	; 3c49 <_Min_Stack_Size+0x3849>
    3f98:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    3f9c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3fa0:	78533249 	ldmdavc	r3, {r0, r3, r6, r9, ip, sp}^
    3fa4:	00747865 	rsbseq	r7, r4, r5, ror #16
    3fa8:	52435854 	subpl	r5, r3, #84, 16	; 0x540000
    3fac:	53005243 	movwpl	r5, #579	; 0x243
    3fb0:	445f4950 	ldrbmi	r4, [pc], #-2384	; 3fb8 <_Min_Stack_Size+0x3bb8>
    3fb4:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    3fb8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    3fbc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3fc0:	4352435f 	cmpmi	r2, #2080374785	; 0x7c000001
    3fc4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3fc8:	53534e5f 	cmppl	r3, #1520	; 0x5f0
    3fcc:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    3fd0:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    3fd4:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xf53
    3fd8:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3fdc:	6172545f 	cmnvs	r2, pc, asr r4
    3fe0:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3fe4:	43524374 	cmpmi	r2, #116, 6	; 0xd0000001
    3fe8:	53324900 	teqpl	r2, #0, 18
    3fec:	4c434d5f 	mcrrmi	13, 5, r4, r3, cr15
    3ff0:	74754f4b 	ldrbtvc	r4, [r5], #-3915	; 0xf4b
    3ff4:	00747570 	rsbseq	r7, r4, r0, ror r5
    3ff8:	5f495053 	svcpl	0x00495053
    3ffc:	5f533249 	svcpl	0x00533249
    4000:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    4004:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    4008:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    400c:	0054495f 	subseq	r4, r4, pc, asr r9
    4010:	5f495053 	svcpl	0x00495053
    4014:	61746144 	cmnvs	r4, r4, asr #2
    4018:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    401c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    4020:	53006769 	movwpl	r6, #1897	; 0x769
    4024:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    4028:	6f504352 	svcvs	0x00504352
    402c:	6f6e796c 	svcvs	0x006e796c
    4030:	6c61696d 	stclvs	9, cr6, [r1], #-436	; 0xfffffe4c
    4034:	53324900 	teqpl	r2, #0, 18
    4038:	4f50435f 	svcmi	0x0050435f
    403c:	5053004c 	subspl	r0, r3, ip, asr #32
    4040:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    4044:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    4048:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    404c:	50530066 	subspl	r0, r3, r6, rrx
    4050:	32495f49 	subcc	r5, r9, #292	; 0x124
    4054:	4d445f53 	stclmi	15, cr5, [r4, #-332]	; 0xfffffeb4
    4058:	71655241 	cmnvc	r5, r1, asr #4
    405c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    4060:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    4064:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    4068:	00746375 	rsbseq	r6, r4, r5, ror r3
    406c:	5f495053 	svcpl	0x00495053
    4070:	6f4d4954 	svcvs	0x004d4954
    4074:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    4078:	32490064 	subcc	r0, r9, #100	; 0x64
    407c:	61445f53 	cmpvs	r4, r3, asr pc
    4080:	6f466174 	svcvs	0x00466174
    4084:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xd72
    4088:	53324900 	teqpl	r2, #0, 18
    408c:	53005250 	movwpl	r5, #592	; 0x250
    4090:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    4094:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    4098:	4d5f5332 	ldclmi	3, cr5, [pc, #-200]	; 3fd8 <_Min_Stack_Size+0x3bd8>
    409c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    40a0:	5f495053 	svcpl	0x00495053
    40a4:	5f533249 	svcpl	0x00533249
    40a8:	61656c43 	cmnvs	r5, r3, asr #24
    40ac:	50544972 	subspl	r4, r4, r2, ror r9
    40b0:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    40b4:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    40b8:	32690074 	rsbcc	r0, r9, #116	; 0x74
    40bc:	76696473 			; <UNDEFINED> instruction: 0x76696473
    40c0:	53324900 	teqpl	r2, #0, 18
    40c4:	6475415f 	ldrbtvs	r4, [r5], #-351	; 0x15f
    40c8:	72466f69 	subvc	r6, r6, #420	; 0x1a4
    40cc:	53007165 	movwpl	r7, #357	; 0x165
    40d0:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    40d4:	004c4f50 	subeq	r4, ip, r0, asr pc
    40d8:	5f533249 	svcpl	0x00533249
    40dc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    40e0:	5f495053 	svcpl	0x00495053
    40e4:	73726946 	cmnvc	r2, #1146880	; 0x118000
    40e8:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
    40ec:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    40f0:	4850435f 	ldmdami	r0, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    40f4:	50530041 	subspl	r0, r3, r1, asr #32
    40f8:	53007849 	movwpl	r7, #2121	; 0x849
    40fc:	425f4950 	subsmi	r4, pc, #80, 18	; 0x140000
    4100:	52647561 	rsbpl	r7, r4, #406847488	; 0x18400000
    4104:	50657461 	rsbpl	r7, r5, r1, ror #8
    4108:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    410c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    4110:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    4114:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    4118:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    411c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    4120:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 4128 <_Min_Stack_Size+0x3d28>
    4124:	50530065 	subspl	r0, r3, r5, rrx
    4128:	32495f49 	subcc	r5, r9, #292	; 0x124
    412c:	6c435f53 	mcrrvs	15, 5, r5, r3, cr3
    4130:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    4134:	0067616c 	rsbeq	r6, r7, ip, ror #2
    4138:	5f495053 	svcpl	0x00495053
    413c:	0053534e 	subseq	r5, r3, lr, asr #6
    4140:	5f495053 	svcpl	0x00495053
    4144:	636c6143 	cmnvs	ip, #-1073741808	; 0xc0000010
    4148:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
    414c:	43524365 	cmpmi	r2, #-1811939327	; 0x94000001
    4150:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    4154:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    4158:	00435243 	subeq	r5, r3, r3, asr #4
    415c:	5f533249 	svcpl	0x00533249
    4160:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4164:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    4168:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    416c:	495f5332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    4170:	0074696e 	rsbseq	r6, r4, lr, ror #18
    4174:	5f533249 	svcpl	0x00533249
    4178:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
    417c:	6c707544 	cfldr64vs	mvdx7, [r0], #-272	; 0xfffffef0
    4180:	6f437865 	svcvs	0x00437865
    4184:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4188:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    418c:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
    4190:	7a695361 	bvc	1a58f1c <_Min_Stack_Size+0x1a58b1c>
    4194:	32690065 	rsbcc	r0, r9, #101	; 0x65
    4198:	64646f73 	strbtvs	r6, [r4], #-3955	; 0xf73
    419c:	63617000 	cmnvs	r1, #0
    41a0:	6c74656b 	cfldr64vs	mvdx6, [r4], #-428	; 0xfffffe54
    41a4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    41a8:	50530068 	subspl	r0, r3, r8, rrx
    41ac:	32495f49 	subcc	r5, r9, #292	; 0x124
    41b0:	65535f53 	ldrbvs	r5, [r3, #-3923]	; 0xf53
    41b4:	6144646e 	cmpvs	r4, lr, ror #8
    41b8:	53006174 	movwpl	r6, #372	; 0x174
    41bc:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    41c0:	525f5332 	subspl	r5, pc, #-939524096	; 0xc8000000
    41c4:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    41c8:	61446576 	hvcvs	18006	; 0x4656
    41cc:	69006174 	stmdbvs	r0, {r2, r4, r5, r6, r8, sp, lr}
    41d0:	6c637332 	stclvs	3, cr7, [r3], #-200	; 0xffffff38
    41d4:	5845006b 	stmdapl	r5, {r0, r1, r3, r5, r6}^
    41d8:	475f4954 			; <UNDEFINED> instruction: 0x475f4954
    41dc:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    41e0:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    41e4:	746e4957 	strbtvc	r4, [lr], #-2391	; 0x957
    41e8:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    41ec:	45007470 	strmi	r7, [r0, #-1136]	; 0x470
    41f0:	5f495458 	svcpl	0x00495458
    41f4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    41f8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    41fc:	45007463 	strmi	r7, [r0, #-1123]	; 0x463
    4200:	5f495458 	svcpl	0x00495458
    4204:	61656c43 	cmnvs	r5, r3, asr #24
    4208:	616c4672 	smcvs	50274	; 0xc462
    420c:	58450067 	stmdapl	r5, {r0, r1, r2, r5, r6}^
    4210:	545f4954 	ldrbpl	r4, [pc], #-2388	; 4218 <_Min_Stack_Size+0x3e18>
    4214:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    4218:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    421c:	00525354 	subseq	r5, r2, r4, asr r3
    4220:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    4224:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    4228:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    422c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    4230:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    4234:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 4128 <_Min_Stack_Size+0x3d28>
    4238:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    423c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4240:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 4130 <_Min_Stack_Size+0x3d30>
    4244:	61726269 	cmnvs	r2, r9, ror #4
    4248:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    424c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    4250:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    4254:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    4258:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    425c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    4260:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    4264:	2f726576 	svccs	0x00726576
    4268:	2f637273 	svccs	0x00637273
    426c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4270:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    4274:	78655f78 	stmdavc	r5!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4278:	632e6974 	teqvs	lr, #116, 18	; 0x1d0000
    427c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    4280:	65475f49 	strbvs	r5, [r7, #-3913]	; 0xf49
    4284:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    4288:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    428c:	54460073 	strbpl	r0, [r6], #-115	; 0x73
    4290:	53005253 	movwpl	r5, #595	; 0x253
    4294:	52454957 	subpl	r4, r5, #1425408	; 0x15c000
    4298:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    429c:	65445f49 	strbvs	r5, [r4, #-3913]	; 0xf49
    42a0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    42a4:	414d4400 	cmpmi	sp, r0, lsl #8
    42a8:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    42ac:	61745347 	cmnvs	r4, r7, asr #6
    42b0:	44007472 	strmi	r7, [r0], #-1138	; 0x472
    42b4:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    42b8:	5047465f 	subpl	r4, r7, pc, asr r6
    42bc:	415f4346 	cmpmi	pc, r6, asr #6
    42c0:	4148504c 	cmpmi	r8, ip, asr #32
    42c4:	4c41565f 	mcrrmi	6, 5, r5, r1, cr15
    42c8:	44004555 	strmi	r4, [r0], #-1365	; 0x555
    42cc:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    42d0:	5f47465f 	svcpl	0x0047465f
    42d4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    42d8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    42dc:	00666544 	rsbeq	r6, r6, r4, asr #10
    42e0:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    42e4:	754f5f44 	strbvc	r5, [pc, #-3908]	; 33a8 <_Min_Stack_Size+0x2fa8>
    42e8:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    42ec:	65756c42 	ldrbvs	r6, [r5, #-3138]!	; 0xc42
    42f0:	414d4400 	cmpmi	sp, r0, lsl #8
    42f4:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    42f8:	525f4347 	subspl	r4, pc, #469762049	; 0x1c000001
    42fc:	44004445 	strmi	r4, [r0], #-1093	; 0x445
    4300:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    4304:	5347465f 	movtpl	r4, #30303	; 0x765f
    4308:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    430c:	414d4400 	cmpmi	sp, r0, lsl #8
    4310:	435f4432 	cmpmi	pc, #838860800	; 0x32000000
    4314:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    4318:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    431c:	414d4400 	cmpmi	sp, r0, lsl #8
    4320:	495f4432 	ldmdbmi	pc, {r1, r4, r5, sl, lr}^	; <UNPREDICTABLE>
    4324:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    4328:	44004741 	strmi	r4, [r0], #-1857	; 0x741
    432c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    4330:	5f47425f 	svcpl	0x0047425f
    4334:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    4338:	004d435f 	subeq	r4, sp, pc, asr r3
    433c:	4c434746 	mcrrmi	7, 4, r4, r3, cr6
    4340:	44005455 	strmi	r5, [r0], #-1109	; 0x455
    4344:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    4348:	5f47465f 	svcpl	0x0047465f
    434c:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    4350:	004d435f 	subeq	r4, sp, pc, asr r3
    4354:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    4358:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    435c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    4360:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    4364:	0074696e 	rsbseq	r6, r4, lr, ror #18
    4368:	615f6766 	cmpvs	pc, r6, ror #14
    436c:	6168706c 	cmnvs	r8, ip, rrx
    4370:	756c6176 	strbvc	r6, [ip, #-374]!	; 0x176
    4374:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    4378:	5f443241 	svcpl	0x00443241
    437c:	7461574c 	strbtvc	r5, [r1], #-1868	; 0x74c
    4380:	616d7265 	cmnvs	sp, r5, ror #4
    4384:	6f436b72 	svcvs	0x00436b72
    4388:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    438c:	414d4400 	cmpmi	sp, r0, lsl #8
    4390:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    4394:	6e495f47 	cdpvs	15, 4, cr5, cr9, cr7, {2}
    4398:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    439c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    43a0:	414d4400 	cmpmi	sp, r0, lsl #8
    43a4:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    43a8:	00414d47 	subeq	r4, r1, r7, asr #26
    43ac:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    43b0:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    43b4:	4d44004f 	stclmi	0, cr0, [r4, #-316]	; 0xfffffec4
    43b8:	5f443241 	svcpl	0x00443241
    43bc:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    43c0:	5f54554c 	svcpl	0x0054554c
    43c4:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0x953
    43c8:	414d4400 	cmpmi	sp, r0, lsl #8
    43cc:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    43d0:	414d4347 	cmpmi	sp, r7, asr #6
    43d4:	4d410052 	stclmi	0, cr0, [r1, #-328]	; 0xfffffeb8
    43d8:	00524354 	subseq	r4, r2, r4, asr r3
    43dc:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    43e0:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    43e4:	5f434650 	svcpl	0x00434650
    43e8:	48504c41 	ldmdami	r0, {r0, r6, sl, fp, lr}^
    43ec:	41565f41 	cmpmi	r6, r1, asr #30
    43f0:	0045554c 	subeq	r5, r5, ip, asr #10
    43f4:	6774756f 	ldrbvs	r7, [r4, -pc, ror #10]!
    43f8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    43fc:	414d4400 	cmpmi	sp, r0, lsl #8
    4400:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    4404:	475f4347 	ldrbmi	r4, [pc, -r7, asr #6]
    4408:	4e454552 	mcrmi	5, 2, r4, cr5, cr2, {2}
    440c:	414d4400 	cmpmi	sp, r0, lsl #8
    4410:	505f4432 	subspl	r4, pc, r2, lsr r4	; <UNPREDICTABLE>
    4414:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    4418:	4c726550 	cfldr64mi	mvdx6, [r2], #-320	; 0xfffffec0
    441c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    4420:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    4424:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    4428:	4c425f43 	mcrrmi	15, 4, r5, r2, cr3
    442c:	44004555 	strmi	r4, [r0], #-1365	; 0x555
    4430:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    4434:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 443c <_Min_Stack_Size+0x403c>
    4438:	67620065 	strbvs	r0, [r2, -r5, rrx]!
    443c:	6c6f635f 	stclvs	3, cr6, [pc], #-380	; 42c8 <_Min_Stack_Size+0x3ec8>
    4440:	7267726f 	rsbvc	r7, r7, #-268435450	; 0xf0000006
    4444:	006e6565 	rsbeq	r6, lr, r5, ror #10
    4448:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    444c:	65445f44 	strbvs	r5, [r4, #-3908]	; 0xf44
    4450:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4454:	414d4400 	cmpmi	sp, r0, lsl #8
    4458:	495f4432 	ldmdbmi	pc, {r1, r4, r5, sl, lr}^	; <UNPREDICTABLE>
    445c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    4460:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    4464:	47420074 	smlsldxmi	r0, r2, r4, r0
    4468:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    446c:	414d4400 	cmpmi	sp, r0, lsl #8
    4470:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    4474:	6e6f4347 	cdpvs	3, 6, cr4, cr15, cr7, {2}
    4478:	00676966 	rsbeq	r6, r7, r6, ror #18
    447c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    4480:	74535f44 	ldrbvc	r5, [r3], #-3908	; 0xf44
    4484:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    4488:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    448c:	43474600 	movtmi	r4, #30208	; 0x7600
    4490:	00524c4f 	subseq	r4, r2, pc, asr #24
    4494:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    4498:	65445f44 	strbvs	r5, [r4, #-3908]	; 0xf44
    449c:	69546461 	ldmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
    44a0:	4600656d 	strmi	r6, [r0], -sp, ror #10
    44a4:	52414d47 	subpl	r4, r1, #4544	; 0x11c0
    44a8:	414d4400 	cmpmi	sp, r0, lsl #8
    44ac:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    44b0:	43465047 	movtmi	r5, #24647	; 0x6047
    44b4:	504c415f 	subpl	r4, ip, pc, asr r1
    44b8:	4d5f4148 	ldfmie	f4, [pc, #-288]	; 43a0 <_Min_Stack_Size+0x3fa0>
    44bc:	0045444f 	subeq	r4, r5, pc, asr #8
    44c0:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    44c4:	4d435f44 	stclmi	15, cr5, [r3, #-272]	; 0xfffffef0
    44c8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    44cc:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    44d0:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    44d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    44d8:	62006769 	andvs	r6, r0, #27525120	; 0x1a40000
    44dc:	6c635f67 	stclvs	15, cr5, [r3], #-412	; 0xfffffe64
    44e0:	69737475 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    44e4:	4400657a 	strmi	r6, [r0], #-1402	; 0x57a
    44e8:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    44ec:	6d754e5f 	ldclvs	14, cr4, [r5, #-380]!	; 0xfffffe84
    44f0:	4f726562 	svcmi	0x00726562
    44f4:	6e694c66 	cdpvs	12, 6, cr4, cr9, cr6, {3}
    44f8:	67660065 	strbvs	r0, [r6, -r5, rrx]!
    44fc:	756c635f 	strbvc	r6, [ip, #-863]!	; 0x35f
    4500:	6c6f6374 	stclvs	3, cr6, [pc], #-464	; 4338 <_Min_Stack_Size+0x3f38>
    4504:	6f6d726f 	svcvs	0x006d726f
    4508:	46006564 	strmi	r6, [r0], -r4, ror #10
    450c:	00524f47 	subseq	r4, r2, r7, asr #30
    4510:	6174756f 	cmnvs	r4, pc, ror #10
    4514:	6168706c 	cmnvs	r8, ip, rrx
    4518:	414d4400 	cmpmi	sp, r0, lsl #8
    451c:	535f4432 	cmppl	pc, #838860800	; 0x32000000
    4520:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0x375
    4524:	4400646e 	strmi	r6, [r0], #-1134	; 0x46e
    4528:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    452c:	5f47465f 	svcpl	0x0047465f
    4530:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4534:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    4538:	44007469 	strmi	r7, [r0], #-1129	; 0x469
    453c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    4540:	6f62415f 	svcvs	0x0062415f
    4544:	72547472 	subsvc	r7, r4, #1912602624	; 0x72000000
    4548:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    454c:	44007265 	strmi	r7, [r0], #-613	; 0x265
    4550:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    4554:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    4558:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    455c:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    4560:	5f443241 	svcpl	0x00443241
    4564:	62005449 	andvs	r5, r0, #1224736768	; 0x49000000
    4568:	6c615f67 	stclvs	15, cr5, [r1], #-412	; 0xfffffe64
    456c:	76616870 			; <UNDEFINED> instruction: 0x76616870
    4570:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    4574:	5f676600 	svcpl	0x00676600
    4578:	74756c63 	ldrbtvc	r6, [r5], #-3171	; 0xc63
    457c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    4580:	414d4f00 	cmpmi	sp, r0, lsl #30
    4584:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    4588:	5f443241 	svcpl	0x00443241
    458c:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    4590:	65746157 	ldrbvs	r6, [r4, #-343]!	; 0x157
    4594:	72616d72 	rsbvc	r6, r1, #7296	; 0x1c80
    4598:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    459c:	00676966 	rsbeq	r6, r7, r6, ror #18
    45a0:	635f6762 	cmpvs	pc, #25690112	; 0x1880000
    45a4:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    45a8:	00646572 	rsbeq	r6, r4, r2, ror r5
    45ac:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    45b0:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    45b4:	44004d43 	strmi	r4, [r0], #-3395	; 0xd43
    45b8:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    45bc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    45c0:	67660074 			; <UNDEFINED> instruction: 0x67660074
    45c4:	706c615f 	rsbvc	r6, ip, pc, asr r1
    45c8:	6d5f6168 	ldfvse	f6, [pc, #-416]	; 4430 <_Min_Stack_Size+0x4030>
    45cc:	0065646f 	rsbeq	r6, r5, pc, ror #8
    45d0:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    45d4:	6e495f44 	cdpvs	15, 4, cr5, cr9, cr4, {2}
    45d8:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    45dc:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    45e0:	434f0066 	movtmi	r0, #61542	; 0xf066
    45e4:	00524c4f 	subseq	r4, r2, pc, asr #24
    45e8:	4f434742 	svcmi	0x00434742
    45ec:	4400524c 	strmi	r5, [r0], #-588	; 0x24c
    45f0:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    45f4:	4d47425f 	sfmmi	f4, 2, [r7, #-380]	; 0xfffffe84
    45f8:	4d440041 	stclmi	0, cr0, [r4, #-260]	; 0xfffffefc
    45fc:	5f443241 	svcpl	0x00443241
    4600:	5f434742 	svcpl	0x00434742
    4604:	45554c42 	ldrbmi	r4, [r5, #-3138]	; 0xc42
    4608:	414d4400 	cmpmi	sp, r0, lsl #8
    460c:	535f4432 	cmppl	pc, #838860800	; 0x32000000
    4610:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    4614:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    4618:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    461c:	414d4400 	cmpmi	sp, r0, lsl #8
    4620:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    4624:	0047414c 	subeq	r4, r7, ip, asr #2
    4628:	4346504f 	movtmi	r5, #24655	; 0x604f
    462c:	44005243 	strmi	r5, [r0], #-579	; 0x243
    4630:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    4634:	5f47425f 	svcpl	0x0047425f
    4638:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    463c:	5a49535f 	bpl	12593c0 <_Min_Stack_Size+0x1258fc0>
    4640:	47420045 	strbmi	r0, [r2, -r5, asr #32]
    4644:	43434650 	movtmi	r4, #13904	; 0x3650
    4648:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    464c:	5f443241 	svcpl	0x00443241
    4650:	64616544 	strbtvs	r6, [r1], #-1348	; 0x544
    4654:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    4658:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    465c:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    4660:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    4664:	5f47465f 	svcpl	0x0047465f
    4668:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    466c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4670:	43007463 	movwmi	r7, #1123	; 0x463
    4674:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    4678:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    467c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    4680:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4684:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    4688:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    468c:	2f736569 	svccs	0x00736569
    4690:	334d5453 	movtcc	r5, #54355	; 0xd453
    4694:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    4698:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    469c:	72655064 	rsbvc	r5, r5, #100	; 0x64
    46a0:	5f687069 	svcpl	0x00687069
    46a4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    46a8:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    46ac:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    46b0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    46b4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    46b8:	616d645f 	cmnvs	sp, pc, asr r4
    46bc:	632e6432 	teqvs	lr, #838860800	; 0x32000000
    46c0:	414d4400 	cmpmi	sp, r0, lsl #8
    46c4:	435f4432 	cmpmi	pc, #838860800	; 0x32000000
    46c8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    46cc:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    46d0:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    46d4:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    46d8:	50474600 	subpl	r4, r7, r0, lsl #12
    46dc:	52434346 	subpl	r4, r3, #402653185	; 0x18000001
    46e0:	414d4400 	cmpmi	sp, r0, lsl #8
    46e4:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    46e8:	475f4347 	ldrbmi	r4, [pc, -r7, asr #6]
    46ec:	4e454552 	mcrmi	5, 2, r4, cr5, cr2, {2}
    46f0:	414d4400 	cmpmi	sp, r0, lsl #8
    46f4:	4f5f4432 	svcmi	0x005f4432
    46f8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    46fc:	6d654d74 	stclvs	13, cr4, [r5, #-464]!	; 0xfffffe30
    4700:	4179726f 	cmnmi	r9, pc, ror #4
    4704:	70006464 	andvc	r6, r0, r4, ror #8
    4708:	696c7869 	stmdbvs	ip!, {r0, r3, r5, r6, fp, ip, sp, lr}^
    470c:	6f00656e 	svcvs	0x0000656e
    4710:	65727475 	ldrbvs	r7, [r2, #-1141]!	; 0x475
    4714:	4d440064 	stclmi	0, cr0, [r4, #-400]	; 0xfffffe70
    4718:	5f443241 	svcpl	0x00443241
    471c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    4720:	65527475 	ldrbvs	r7, [r2, #-1141]	; 0x475
    4724:	67660064 	strbvs	r0, [r6, -r4, rrx]!
    4728:	6c6f635f 	stclvs	3, cr6, [pc], #-380	; 45b4 <_Min_Stack_Size+0x41b4>
    472c:	7267726f 	rsbvc	r7, r7, #-268435450	; 0xf0000006
    4730:	006e6565 	rsbeq	r6, lr, r5, ror #10
    4734:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    4738:	754f5f44 	strbvc	r5, [pc, #-3908]	; 37fc <_Min_Stack_Size+0x33fc>
    473c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    4740:	65657247 	strbvs	r7, [r5, #-583]!	; 0x247
    4744:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    4748:	5f443241 	svcpl	0x00443241
    474c:	4d434746 	stclmi	7, cr4, [r3, #-280]	; 0xfffffee8
    4750:	414d4400 	cmpmi	sp, r0, lsl #8
    4754:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    4758:	6e495f47 	cdpvs	15, 4, cr5, cr9, cr7, {2}
    475c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    4760:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    4764:	47420066 	strbmi	r0, [r2, -r6, rrx]
    4768:	0052414d 	subseq	r4, r2, sp, asr #2
    476c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    4770:	79545f44 	ldmdbvc	r4, {r2, r6, r8, r9, sl, fp, ip, lr}^
    4774:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    4778:	4d440066 	stclmi	0, cr0, [r4, #-408]	; 0xfffffe68
    477c:	5f443241 	svcpl	0x00443241
    4780:	004f4742 	subeq	r4, pc, r2, asr #14
    4784:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    4788:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    478c:	5f434650 	svcpl	0x00434650
    4790:	48504c41 	ldmdami	r0, {r0, r6, sl, fp, lr}^
    4794:	4f4d5f41 	svcmi	0x004d5f41
    4798:	44004544 	strmi	r4, [r0], #-1348	; 0x544
    479c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    47a0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    47a4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    47a8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    47ac:	42007375 	andmi	r7, r0, #-738197503	; 0xd4000001
    47b0:	00524f47 	subseq	r4, r2, r7, asr #30
    47b4:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    47b8:	754f5f44 	strbvc	r5, [pc, #-3908]	; 387c <_Min_Stack_Size+0x347c>
    47bc:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    47c0:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    47c4:	44007465 	strmi	r7, [r0], #-1125	; 0x465
    47c8:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    47cc:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    47d0:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    47d4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    47d8:	414d4400 	cmpmi	sp, r0, lsl #8
    47dc:	4f5f4432 	svcmi	0x005f4432
    47e0:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    47e4:	706c4174 	rsbvc	r4, ip, r4, ror r1
    47e8:	44006168 	strmi	r6, [r0], #-360	; 0x168
    47ec:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    47f0:	4347425f 	movtmi	r4, #29279	; 0x725f
    47f4:	4445525f 	strbmi	r5, [r5], #-607	; 0x25f
    47f8:	5f676600 	svcpl	0x00676600
    47fc:	6f6c6f63 	svcvs	0x006c6f63
    4800:	64657272 	strbtvs	r7, [r5], #-626	; 0x272
    4804:	414d4400 	cmpmi	sp, r0, lsl #8
    4808:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    480c:	414d4347 	cmpmi	sp, r7, asr #6
    4810:	67620052 			; <UNDEFINED> instruction: 0x67620052
    4814:	756c635f 	strbvc	r6, [ip, #-863]!	; 0x35f
    4818:	6c6f6374 	stclvs	3, cr6, [pc], #-464	; 4650 <_Min_Stack_Size+0x4250>
    481c:	6f6d726f 	svcvs	0x006d726f
    4820:	62006564 	andvs	r6, r0, #100, 10	; 0x19000000
    4824:	6c615f67 	stclvs	15, cr5, [r1], #-412	; 0xfffffe64
    4828:	5f616870 	svcpl	0x00616870
    482c:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xf6d
    4830:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4834:	614c5f43 	cmpvs	ip, r3, asr #30
    4838:	5f726579 	svcpl	0x00726579
    483c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4840:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    4844:	00666544 	rsbeq	r6, r6, r4, asr #10
    4848:	4c424643 	mcrrmi	6, 4, r4, r2, cr3
    484c:	4c00524e 	sfmmi	f5, 4, [r0], {78}	; 0x4e
    4850:	5f434454 	svcpl	0x00434454
    4854:	6f6c6f43 	svcvs	0x006c6f43
    4858:	79654b72 	stmdbvc	r5!, {r1, r4, r5, r6, r8, r9, fp, lr}^
    485c:	43676e69 	cmnmi	r7, #1680	; 0x690
    4860:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4864:	65480067 	strbvs	r0, [r8, #-103]	; 0x67
    4868:	74686769 	strbtvc	r6, [r8], #-1897	; 0x769
    486c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4870:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xf43
    4874:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4878:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    487c:	4c435f43 	mcrrmi	15, 4, r5, r3, cr3
    4880:	6e495455 	mcrvs	4, 2, r5, cr9, cr5, {2}
    4884:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
    4888:	00524343 	subseq	r4, r2, r3, asr #6
    488c:	4c424643 	mcrrmi	6, 4, r4, r2, cr3
    4890:	63610052 	cmnvs	r1, #82	; 0x52
    4894:	756d7563 	strbvc	r7, [sp, #-1379]!	; 0x563
    4898:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    489c:	74636164 	strbtvc	r6, [r3], #-356	; 0x164
    48a0:	57657669 	strbpl	r7, [r5, -r9, ror #12]!
    48a4:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    48a8:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    48ac:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    48b0:	0067616c 	rsbeq	r6, r7, ip, ror #2
    48b4:	4344544c 	movtmi	r5, #17484	; 0x444c
    48b8:	6c6f635f 	stclvs	3, cr6, [pc], #-380	; 4744 <_Min_Stack_Size+0x4344>
    48bc:	656b726f 	strbvs	r7, [fp, #-623]!	; 0x26f
    48c0:	676e6979 			; <UNDEFINED> instruction: 0x676e6979
    48c4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    48c8:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    48cc:	00746375 	rsbseq	r6, r4, r5, ror r3
    48d0:	4344544c 	movtmi	r5, #17484	; 0x444c
    48d4:	4246435f 	submi	r4, r6, #2080374785	; 0x7c000001
    48d8:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    48dc:	72644174 	rsbvc	r4, r4, #116, 2
    48e0:	00737365 	rsbseq	r7, r3, r5, ror #6
    48e4:	4344544c 	movtmi	r5, #17484	; 0x444c
    48e8:	6665445f 			; <UNDEFINED> instruction: 0x6665445f
    48ec:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    48f0:	6f6c6f43 	svcvs	0x006c6f43
    48f4:	64655272 	strbtvs	r5, [r5], #-626	; 0x272
    48f8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    48fc:	65565f43 	ldrbvs	r5, [r6, #-3907]	; 0xf43
    4900:	63697472 	cmnvs	r9, #1912602624	; 0x72000000
    4904:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xc61
    4908:	00747261 	rsbseq	r7, r4, r1, ror #4
    490c:	4344544c 	movtmi	r5, #17484	; 0x444c
    4910:	6363415f 	cmnvs	r3, #-1073741801	; 0xc0000017
    4914:	6c756d75 	ldclvs	13, cr6, [r5], #-468	; 0xfffffe2c
    4918:	64657461 	strbtvs	r7, [r5], #-1121	; 0x461
    491c:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    4920:	00486576 	subeq	r6, r8, r6, ror r5
    4924:	4344544c 	movtmi	r5, #17484	; 0x444c
    4928:	79614c5f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    492c:	69507265 	ldmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4930:	466c6578 			; <UNDEFINED> instruction: 0x466c6578
    4934:	616d726f 	cmnvs	sp, pc, ror #4
    4938:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    493c:	545f4344 	ldrbpl	r4, [pc], #-836	; 4944 <_Min_Stack_Size+0x4544>
    4940:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    4944:	4c006665 	stcmi	6, cr6, [r0], {101}	; 0x65
    4948:	5f434454 	svcpl	0x00434454
    494c:	6f50494c 	svcvs	0x0050494c
    4950:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    4954:	6f436e6f 	svcvs	0x00436e6f
    4958:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    495c:	50565700 	subspl	r5, r6, r0, lsl #14
    4960:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
    4964:	5f434454 	svcpl	0x00434454
    4968:	6f505348 	svcvs	0x00505348
    496c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    4970:	4c007974 	stcmi	9, cr7, [r0], {116}	; 0x74
    4974:	5f434454 	svcpl	0x00434454
    4978:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    497c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4980:	4c007463 	cfstrsmi	mvf7, [r0], {99}	; 0x63
    4984:	5f434454 	svcpl	0x00434454
    4988:	6b636142 	blvs	18dce98 <_Min_Stack_Size+0x18dca98>
    498c:	756f7267 	strbvc	r7, [pc, #-615]!	; 472d <_Min_Stack_Size+0x432d>
    4990:	7247646e 	subvc	r6, r7, #1845493760	; 0x6e000000
    4994:	566e6565 	strbtpl	r6, [lr], -r5, ror #10
    4998:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    499c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    49a0:	63415f43 	movtvs	r5, #8003	; 0x1f43
    49a4:	756d7563 	strbvc	r7, [sp, #-1379]!	; 0x563
    49a8:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    49ac:	50425664 	subpl	r5, r2, r4, ror #12
    49b0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    49b4:	614c5f43 	cmpvs	ip, r3, asr #30
    49b8:	49726579 	ldmdbmi	r2!, {r0, r3, r4, r5, r6, r8, sl, sp, lr}^
    49bc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    49c0:	6c616364 	stclvs	3, cr6, [r1], #-400	; 0xfffffe70
    49c4:	00616870 	rsbeq	r6, r1, r0, ror r8
    49c8:	4344544c 	movtmi	r5, #17484	; 0x444c
    49cc:	6363415f 	cmnvs	r3, #-1073741801	; 0xc0000017
    49d0:	6c756d75 	ldclvs	13, cr6, [r5], #-468	; 0xfffffe2c
    49d4:	64657461 	strbtvs	r7, [r5], #-1121	; 0x461
    49d8:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    49dc:	00576576 	subseq	r6, r7, r6, ror r5
    49e0:	4344544c 	movtmi	r5, #17484	; 0x444c
    49e4:	79614c5f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    49e8:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
    49ec:	7600657a 			; <UNDEFINED> instruction: 0x7600657a
    49f0:	69747265 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    49f4:	5f6c6163 	svcpl	0x006c6163
    49f8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    49fc:	6f680074 	svcvs	0x00680074
    4a00:	6f7a6972 	svcvs	0x007a6972
    4a04:	6c61746e 	cfstrdvs	mvd7, [r1], #-440	; 0xfffffe48
    4a08:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
    4a0c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4a10:	6d435f43 	stclvs	15, cr5, [r3, #-268]	; 0xfffffef4
    4a14:	63640064 	cmnvs	r4, #100	; 0x64
    4a18:	00646572 	rsbeq	r6, r4, r2, ror r5
    4a1c:	6b636162 	blvs	18dcfac <_Min_Stack_Size+0x18dcbac>
    4a20:	00646572 	rsbeq	r6, r4, r2, ror r5
    4a24:	70737677 	rsbsvc	r7, r3, r7, ror r6
    4a28:	00736f70 	rsbseq	r6, r3, r0, ror pc
    4a2c:	4344544c 	movtmi	r5, #17484	; 0x444c
    4a30:	726f485f 	rsbvc	r4, pc, #6225920	; 0x5f0000
    4a34:	6e6f7a69 	vnmulvs.f32	s15, s30, s19
    4a38:	536c6174 	cmnpl	ip, #116, 2
    4a3c:	00636e79 	rsbeq	r6, r3, r9, ror lr
    4a40:	4344544c 	movtmi	r5, #17484	; 0x444c
    4a44:	79614c5f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    4a48:	545f7265 	ldrbpl	r7, [pc], #-613	; 4a50 <_Min_Stack_Size+0x4650>
    4a4c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    4a50:	4c006665 	stcmi	6, cr6, [r0], {101}	; 0x65
    4a54:	5f434454 	svcpl	0x00434454
    4a58:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    4a5c:	43007872 	movwmi	r7, #2162	; 0x872
    4a60:	00524341 	subseq	r4, r2, r1, asr #6
    4a64:	4344544c 	movtmi	r5, #17484	; 0x444c
    4a68:	756c425f 	strbvc	r4, [ip, #-607]!	; 0x25f
    4a6c:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    4a70:	4c006575 	cfstr32mi	mvfx6, [r0], {117}	; 0x75
    4a74:	5f434454 	svcpl	0x00434454
    4a78:	6f6c6f43 	svcvs	0x006c6f43
    4a7c:	79654b72 	stmdbvc	r5!, {r1, r4, r5, r6, r8, r9, fp, lr}^
    4a80:	65657247 	strbvs	r7, [r5, #-583]!	; 0x247
    4a84:	544c006e 	strbpl	r0, [ip], #-110	; 0x6e
    4a88:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    4a8c:	44437465 	strbmi	r7, [r3], #-1125	; 0x465
    4a90:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    4a94:	68007375 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    4a98:	7a69726f 	bvc	1a6145c <_Min_Stack_Size+0x1a6105c>
    4a9c:	61746e6f 	cmnvs	r4, pc, ror #28
    4aa0:	74735f6c 	ldrbtvc	r5, [r3], #-3948	; 0xf6c
    4aa4:	6200706f 	andvs	r7, r0, #111	; 0x6f
    4aa8:	676b6361 	strbvs	r6, [fp, -r1, ror #6]!
    4aac:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    4ab0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4ab4:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xf43
    4ab8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    4abc:	6c6f4374 	stclvs	3, cr4, [pc], #-464	; 48f4 <_Min_Stack_Size+0x44f4>
    4ac0:	6c42726f 	sfmvs	f7, 2, [r2], {111}	; 0x6f
    4ac4:	4c006575 	cfstr32mi	mvfx6, [r0], {117}	; 0x75
    4ac8:	5f434454 	svcpl	0x00434454
    4acc:	4c424643 	mcrrmi	6, 4, r4, r2, cr3
    4ad0:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
    4ad4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    4ad8:	544c0068 	strbpl	r0, [ip], #-104	; 0x68
    4adc:	565f4344 	ldrbpl	r4, [pc], -r4, asr #6
    4ae0:	69747265 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4ae4:	536c6163 	cmnpl	ip, #-1073741800	; 0xc0000018
    4ae8:	00636e79 	rsbeq	r6, r3, r9, ror lr
    4aec:	4344544c 	movtmi	r5, #17484	; 0x444c
    4af0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    4af4:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    4af8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    4afc:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4b00:	6f485f43 	svcvs	0x00485f43
    4b04:	6f7a6972 	svcvs	0x007a6972
    4b08:	6c61746e 	cfstrdvs	mvd7, [r1], #-440	; 0xfffffe48
    4b0c:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
    4b10:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4b14:	74535f43 	ldrbvc	r5, [r3], #-3907	; 0xf43
    4b18:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    4b1c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4b20:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4b24:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    4b28:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    4b2c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    4b30:	4c006769 	stcmi	7, cr6, [r0], {105}	; 0x69
    4b34:	5f434454 	svcpl	0x00434454
    4b38:	6b636142 	blvs	18dd048 <_Min_Stack_Size+0x18dcc48>
    4b3c:	756f7267 	strbvc	r7, [pc, #-615]!	; 48dd <_Min_Stack_Size+0x44dd>
    4b40:	6c42646e 	cfstrdvs	mvd6, [r2], {110}	; 0x6e
    4b44:	61566575 	cmpvs	r6, r5, ror r5
    4b48:	0065756c 	rsbeq	r7, r5, ip, ror #10
    4b4c:	4344544c 	movtmi	r5, #17484	; 0x444c
    4b50:	756c425f 	strbvc	r4, [ip, #-607]!	; 0x25f
    4b54:	64695765 	strbtvs	r5, [r9], #-1893	; 0x765
    4b58:	57006874 	smlsdxpl	r0, r4, r8, r6
    4b5c:	52435048 	subpl	r5, r3, #72	; 0x48
    4b60:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4b64:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xf43
    4b68:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    4b6c:	6c6f4374 	stclvs	3, cr4, [pc], #-464	; 49a4 <_Min_Stack_Size+0x45a4>
    4b70:	7247726f 	subvc	r7, r7, #-268435450	; 0xf0000006
    4b74:	006e6565 	rsbeq	r6, lr, r5, ror #10
    4b78:	4344544c 	movtmi	r5, #17484	; 0x444c
    4b7c:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    4b80:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    4b84:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    4b88:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    4b8c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4b90:	65565f43 	ldrbvs	r5, [r6, #-3907]	; 0xf43
    4b94:	63697472 	cmnvs	r9, #1912602624	; 0x72000000
    4b98:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xc61
    4b9c:	4c00706f 	stcmi	0, cr7, [r0], {111}	; 0x6f
    4ba0:	5f434454 	svcpl	0x00434454
    4ba4:	6f6c6f43 	svcvs	0x006c6f43
    4ba8:	79654b72 	stmdbvc	r5!, {r1, r4, r5, r6, r8, r9, fp, lr}^
    4bac:	5f676e69 	svcpl	0x00676e69
    4bb0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4bb4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    4bb8:	00666544 	rsbeq	r6, r6, r4, asr #10
    4bbc:	4344544c 	movtmi	r5, #17484	; 0x444c
    4bc0:	726f485f 	rsbvc	r4, pc, #6225920	; 0x5f0000
    4bc4:	6e6f7a69 	vnmulvs.f32	s15, s30, s19
    4bc8:	536c6174 	cmnpl	ip, #116, 2
    4bcc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    4bd0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4bd4:	61425f43 	cmpvs	r2, r3, asr #30
    4bd8:	72676b63 	rsbvc	r6, r7, #101376	; 0x18c00
    4bdc:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
    4be0:	56646552 			; <UNDEFINED> instruction: 0x56646552
    4be4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    4be8:	746f7400 	strbtvc	r7, [pc], #-1024	; 4bf0 <_Min_Stack_Size+0x47f0>
    4bec:	69776c61 	ldmdbvs	r7!, {r0, r5, r6, sl, fp, sp, lr}^
    4bf0:	00687464 	rsbeq	r7, r8, r4, ror #8
    4bf4:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    4bf8:	43005257 	movwmi	r5, #599	; 0x257
    4bfc:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    4c00:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    4c04:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    4c08:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4c0c:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    4c10:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    4c14:	2f736569 	svccs	0x00736569
    4c18:	334d5453 	movtcc	r5, #54355	; 0xd453
    4c1c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    4c20:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    4c24:	72655064 	rsbvc	r5, r5, #100	; 0x64
    4c28:	5f687069 	svcpl	0x00687069
    4c2c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    4c30:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    4c34:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    4c38:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4c3c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    4c40:	64746c5f 	ldrbtvs	r6, [r4], #-3167	; 0xc5f
    4c44:	00632e63 	rsbeq	r2, r3, r3, ror #28
    4c48:	52435754 	subpl	r5, r3, #84, 14	; 0x1500000
    4c4c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4c50:	6f545f43 	svcvs	0x00545f43
    4c54:	576c6174 			; <UNDEFINED> instruction: 0x576c6174
    4c58:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    4c5c:	43525300 	cmpmi	r2, #0, 6
    4c60:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    4c64:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    4c68:	4b430054 	blmi	10c4dc0 <_Min_Stack_Size+0x10c49c0>
    4c6c:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
    4c70:	5f434454 	svcpl	0x00434454
    4c74:	6f504350 	svcvs	0x00504350
    4c78:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    4c7c:	4c007974 	stcmi	9, cr7, [r0], {116}	; 0x74
    4c80:	5f434454 	svcpl	0x00434454
    4c84:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    4c88:	00646d43 	rsbeq	r6, r4, r3, asr #26
    4c8c:	52434642 	subpl	r4, r3, #69206016	; 0x4200000
    4c90:	63636100 	cmnvs	r3, #0, 2
    4c94:	6c756d75 	ldclvs	13, cr6, [r5], #-468	; 0xfffffe2c
    4c98:	64657461 	strbtvs	r7, [r5], #-1121	; 0x461
    4c9c:	00504248 	subseq	r4, r0, r8, asr #4
    4ca0:	4344544c 	movtmi	r5, #17484	; 0x444c
    4ca4:	736f505f 	cmnvc	pc, #95	; 0x5f
    4ca8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    4cac:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    4cb0:	00746375 	rsbseq	r6, r4, r5, ror r3
    4cb4:	4344544c 	movtmi	r5, #17484	; 0x444c
    4cb8:	736f505f 	cmnvc	pc, #95	; 0x5f
    4cbc:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4cc0:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    4cc4:	41007469 	tstmi	r0, r9, ror #8
    4cc8:	00524357 	subseq	r4, r2, r7, asr r3
    4ccc:	4344544c 	movtmi	r5, #17484	; 0x444c
    4cd0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    4cd4:	53736f50 	cmnpl	r3, #80, 30	; 0x140
    4cd8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    4cdc:	544c0073 	strbpl	r0, [ip], #-115	; 0x73
    4ce0:	525f4344 	subspl	r4, pc, #68, 6	; 0x10000001
    4ce4:	69576465 	ldmdbvs	r7, {r0, r2, r5, r6, sl, sp, lr}^
    4ce8:	00687464 	rsbeq	r7, r8, r4, ror #8
    4cec:	4344544c 	movtmi	r5, #17484	; 0x444c
    4cf0:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    4cf4:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
    4cf8:	706c4174 	rsbvc	r4, ip, r4, ror r1
    4cfc:	4c006168 	stfmis	f6, [r0], {104}	; 0x68
    4d00:	5f434454 	svcpl	0x00434454
    4d04:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    4d08:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    4d0c:	70795474 	rsbsvc	r5, r9, r4, ror r4
    4d10:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    4d14:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4d18:	4f505f43 	svcmi	0x00505f43
    4d1c:	4c005853 	stcmi	8, cr5, [r0], {83}	; 0x53
    4d20:	5f434454 	svcpl	0x00434454
    4d24:	59534f50 	ldmdbpl	r3, {r4, r6, r8, r9, sl, fp, lr}^
    4d28:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4d2c:	614c5f43 	cmpvs	ip, r3, asr #30
    4d30:	53726579 	cmnpl	r2, #507510784	; 0x1e400000
    4d34:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    4d38:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    4d3c:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    4d40:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    4d44:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    4d48:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    4d4c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    4d50:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4d54:	69445f43 	stmdbvs	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    4d58:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
    4d5c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    4d60:	4344544c 	movtmi	r5, #17484	; 0x444c
    4d64:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    4d68:	72745354 	rsbsvc	r5, r4, #84, 6	; 0x50000001
    4d6c:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    4d70:	0074696e 	rsbseq	r6, r4, lr, ror #18
    4d74:	4344544c 	movtmi	r5, #17484	; 0x444c
    4d78:	79614c5f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    4d7c:	6c417265 	sfmvs	f7, 2, [r1], {101}	; 0x65
    4d80:	00616870 	rsbeq	r6, r1, r0, ror r8
    4d84:	41424643 	cmpmi	r2, r3, asr #12
    4d88:	6c630052 	stclvs	0, cr0, [r3], #-328	; 0xfffffeb8
    4d8c:	64617475 	strbtvs	r7, [r1], #-1141	; 0x475
    4d90:	544c0064 	strbpl	r0, [ip], #-100	; 0x64
    4d94:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    4d98:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    4d9c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    4da0:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    4da4:	00746375 	rsbseq	r6, r4, r5, ror r3
    4da8:	4344544c 	movtmi	r5, #17484	; 0x444c
    4dac:	6572475f 	ldrbvs	r4, [r2, #-1887]!	; 0x75f
    4db0:	61566e65 	cmpvs	r6, r5, ror #28
    4db4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    4db8:	4344544c 	movtmi	r5, #17484	; 0x444c
    4dbc:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    4dc0:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    4dc4:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    4dc8:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    4dcc:	63007469 	movwvs	r7, #1129	; 0x469
    4dd0:	00706266 	rsbseq	r6, r0, r6, ror #4
    4dd4:	4344544c 	movtmi	r5, #17484	; 0x444c
    4dd8:	4247525f 	submi	r5, r7, #-268435451	; 0xf0000005
    4ddc:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4de0:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    4de4:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    4de8:	5f434454 	svcpl	0x00434454
    4dec:	4c004443 	cfstrsmi	mvf4, [r0], {67}	; 0x43
    4df0:	5f434454 	svcpl	0x00434454
    4df4:	61666544 	cmnvs	r6, r4, asr #10
    4df8:	43746c75 	cmnmi	r4, #29952	; 0x7500
    4dfc:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    4e00:	68706c41 	ldmdavs	r0!, {r0, r6, sl, fp, sp, lr}^
    4e04:	494c0061 	stmdbmi	ip, {r0, r5, r6}^
    4e08:	00524350 	subseq	r4, r2, r0, asr r3
    4e0c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    4e10:	00676572 	rsbeq	r6, r7, r2, ror r5
    4e14:	4344544c 	movtmi	r5, #17484	; 0x444c
    4e18:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    4e1c:	72644154 	rsbvc	r4, r4, #84, 2
    4e20:	00737365 	rsbseq	r7, r3, r5, ror #6
    4e24:	4344544c 	movtmi	r5, #17484	; 0x444c
    4e28:	79614c5f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    4e2c:	64417265 	strbvs	r7, [r1], #-613	; 0x265
    4e30:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    4e34:	544c0073 	strbpl	r0, [ip], #-115	; 0x73
    4e38:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    4e3c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    4e40:	4344544c 	movtmi	r5, #17484	; 0x444c
    4e44:	4246435f 	submi	r4, r6, #2080374785	; 0x7c000001
    4e48:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    4e4c:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    4e50:	43007265 	movwmi	r7, #613	; 0x265
    4e54:	00525350 	subseq	r5, r2, r0, asr r3
    4e58:	52435042 	subpl	r5, r3, #66	; 0x42
    4e5c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4e60:	72475f43 	subvc	r5, r7, #268	; 0x10c
    4e64:	576e6565 	strbpl	r6, [lr, -r5, ror #10]!
    4e68:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    4e6c:	66664f00 	strbtvs	r4, [r6], -r0, lsl #30
    4e70:	58746573 	ldmdapl	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    4e74:	66664f00 	strbtvs	r4, [r6], -r0, lsl #30
    4e78:	59746573 	ldmdbpl	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    4e7c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4e80:	6f435f43 	svcvs	0x00435f43
    4e84:	4b726f6c 	blmi	1ca0c3c <_Min_Stack_Size+0x1ca083c>
    4e88:	65527965 	ldrbvs	r7, [r2, #-2405]	; 0x965
    4e8c:	6f680064 	svcvs	0x00680064
    4e90:	6f7a6972 	svcvs	0x007a6972
    4e94:	6c61746e 	cfstrdvs	mvd7, [r1], #-440	; 0xfffffe48
    4e98:	6174735f 	cmnvs	r4, pc, asr r3
    4e9c:	4c007472 	cfstrsmi	mvf7, [r0], {114}	; 0x72
    4ea0:	5f434454 	svcpl	0x00434454
    4ea4:	75636341 	strbvc	r6, [r3, #-833]!	; 0x341
    4ea8:	616c756d 	cmnvs	ip, sp, ror #10
    4eac:	48646574 	stmdami	r4!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4eb0:	4c005042 	stcmi	0, cr5, [r0], {66}	; 0x42
    4eb4:	5f434454 	svcpl	0x00434454
    4eb8:	61746f54 	cmnvs	r4, r4, asr pc
    4ebc:	6965486c 	stmdbvs	r5!, {r2, r3, r5, r6, fp, lr}^
    4ec0:	77006867 	strvc	r6, [r0, -r7, ror #16]
    4ec4:	70707368 	rsbsvc	r7, r0, r8, ror #6
    4ec8:	4c00736f 	stcmi	3, cr7, [r0], {111}	; 0x6f
    4ecc:	5f434454 	svcpl	0x00434454
    4ed0:	6f6c6f43 	svcvs	0x006c6f43
    4ed4:	79654b72 	stmdbvc	r5!, {r1, r4, r5, r6, r8, r9, fp, lr}^
    4ed8:	65756c42 	ldrbvs	r6, [r5, #-3138]!	; 0xc42
    4edc:	43535300 	cmpmi	r3, #0, 6
    4ee0:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    4ee4:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    4ee8:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    4eec:	6979654b 	ldmdbvs	r9!, {r0, r1, r3, r6, r8, sl, sp, lr}^
    4ef0:	7453676e 	ldrbvc	r6, [r3], #-1902	; 0x76e
    4ef4:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    4ef8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4efc:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4f00:	45445f43 	strbmi	r5, [r4, #-3907]	; 0xf43
    4f04:	616c6f50 	cmnvs	ip, r0, asr pc
    4f08:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    4f0c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4f10:	69505f43 	ldmdbvs	r0, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    4f14:	466c6578 			; <UNDEFINED> instruction: 0x466c6578
    4f18:	616d726f 	cmnvs	sp, pc, ror #4
    4f1c:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    4f20:	465f4344 	ldrbmi	r4, [pc], -r4, asr #6
    4f24:	0047414c 	subeq	r4, r7, ip, asr #2
    4f28:	4344544c 	movtmi	r5, #17484	; 0x444c
    4f2c:	736f505f 	cmnvc	pc, #95	; 0x5f
    4f30:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    4f34:	00666544 	rsbeq	r6, r6, r4, asr #10
    4f38:	4344544c 	movtmi	r5, #17484	; 0x444c
    4f3c:	6c65525f 	sfmvs	f5, 2, [r5], #-380	; 0xfffffe84
    4f40:	0064616f 	rsbeq	r6, r4, pc, ror #2
    4f44:	4344544c 	movtmi	r5, #17484	; 0x444c
    4f48:	656c425f 	strbvs	r4, [ip, #-607]!	; 0x25f
    4f4c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    4f50:	63614667 	cmnvs	r1, #108003328	; 0x6700000
    4f54:	5f726f74 	svcpl	0x00726f74
    4f58:	544c0031 	strbpl	r0, [ip], #-49	; 0x31
    4f5c:	425f4344 	subsmi	r4, pc, #68, 6	; 0x10000001
    4f60:	646e656c 	strbtvs	r6, [lr], #-1388	; 0x56c
    4f64:	46676e69 	strbtmi	r6, [r7], -r9, ror #28
    4f68:	6f746361 	svcvs	0x00746361
    4f6c:	00325f72 	eorseq	r5, r2, r2, ror pc
    4f70:	52434344 	subpl	r4, r3, #68, 6	; 0x10000001
    4f74:	72657600 	rsbvc	r7, r5, #0, 12
    4f78:	61636974 	smcvs	13972	; 0x3694
    4f7c:	74735f6c 	ldrbtvc	r5, [r3], #-3948	; 0xf6c
    4f80:	4c00706f 	stcmi	0, cr7, [r0], {111}	; 0x6f
    4f84:	5f434454 	svcpl	0x00434454
    4f88:	4350494c 	cmpmi	r0, #76, 18	; 0x130000
    4f8c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4f90:	544c0067 	strbpl	r0, [ip], #-103	; 0x67
    4f94:	525f4344 	subspl	r4, pc, #68, 6	; 0x10000001
    4f98:	79544247 	ldmdbvc	r4, {r0, r1, r2, r6, r9, lr}^
    4f9c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    4fa0:	44430066 	strbmi	r0, [r3], #-102	; 0x66
    4fa4:	4c005253 	sfmmi	f5, 4, [r0], {83}	; 0x53
    4fa8:	5f434454 	svcpl	0x00434454
    4fac:	56646552 			; <UNDEFINED> instruction: 0x56646552
    4fb0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    4fb4:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    4fb8:	614c5f43 	cmpvs	ip, r3, asr #30
    4fbc:	43726579 	cmnmi	r2, #507510784	; 0x1e400000
    4fc0:	4c00646d 	cfstrsmi	mvf6, [r0], {109}	; 0x6d
    4fc4:	5f434454 	svcpl	0x00434454
    4fc8:	5f424752 	svcpl	0x00424752
    4fcc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4fd0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4fd4:	4c007463 	cfstrsmi	mvf7, [r0], {99}	; 0x63
    4fd8:	5f434454 	svcpl	0x00434454
    4fdc:	6f505356 	svcvs	0x00505356
    4fe0:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    4fe4:	4c007974 	stcmi	9, cr7, [r0], {116}	; 0x74
    4fe8:	5f434454 	svcpl	0x00434454
    4fec:	50424643 	subpl	r4, r2, r3, asr #12
    4ff0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    4ff4:	67636400 	strbvs	r6, [r3, -r0, lsl #8]!
    4ff8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    4ffc:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    5000:	614c5f43 	cmpvs	ip, r3, asr #30
    5004:	50726579 	rsbspl	r6, r2, r9, ror r5
    5008:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    500c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    5010:	4344544c 	movtmi	r5, #17484	; 0x444c
    5014:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    5018:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    501c:	46500067 	ldrbmi	r0, [r0], -r7, rrx
    5020:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
    5024:	5f434454 	svcpl	0x00434454
    5028:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    502c:	69574247 	ldmdbvs	r7, {r0, r1, r2, r6, r9, lr}^
    5030:	00687464 	rsbeq	r7, r8, r4, ror #8
    5034:	4344544c 	movtmi	r5, #17484	; 0x444c
    5038:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    503c:	70795474 	rsbsvc	r5, r9, r4, ror r4
    5040:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    5044:	454d5000 	strbmi	r5, [sp, #-0]
    5048:	4600324d 	strmi	r3, [r0], -sp, asr #4
    504c:	455f434d 	ldrbmi	r4, [pc, #-845]	; 4d07 <_Min_Stack_Size+0x4907>
    5050:	6e657478 	mcrvs	4, 3, r7, cr5, cr8, {3}
    5054:	4d646564 	cfstr64mi	mvdx6, [r4, #-400]!	; 0xfffffe70
    5058:	0065646f 	rsbeq	r6, r5, pc, ror #8
    505c:	5f434d46 	svcpl	0x00434d46
    5060:	61656c43 	cmnvs	r5, r3, asr #24
    5064:	616c4672 	smcvs	50274	; 0xc462
    5068:	44530067 	ldrbmi	r0, [r3], #-103	; 0x67
    506c:	46005243 	strmi	r5, [r0], -r3, asr #4
    5070:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    5074:	356b6e61 	strbcc	r6, [fp, #-3681]!	; 0xe61
    5078:	545f365f 	ldrbpl	r3, [pc], #-1631	; 5080 <_Min_Stack_Size+0x4c80>
    507c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    5080:	46006665 	strmi	r6, [r0], -r5, ror #12
    5084:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    5088:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    508c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    5090:	434d4600 	movtmi	r4, #54784	; 0xd600
    5094:	5341435f 	movtpl	r4, #4959	; 0x135f
    5098:	6574614c 	ldrbvs	r6, [r4, #-332]!	; 0x14c
    509c:	0079636e 	rsbseq	r6, r9, lr, ror #6
    50a0:	76636365 	strbtvc	r6, [r3], -r5, ror #6
    50a4:	46006c61 	strmi	r6, [r0], -r1, ror #24
    50a8:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    50ac:	52666c65 	rsbpl	r6, r6, #25856	; 0x6500
    50b0:	65726665 	ldrbvs	r6, [r2, #-1637]!	; 0x665
    50b4:	69546873 	ldmdbvs	r4, {r0, r1, r4, r5, r6, fp, sp, lr}^
    50b8:	5000656d 	andpl	r6, r0, sp, ror #10
    50bc:	334d454d 	movtcc	r4, #54605	; 0xd54d
    50c0:	454d5000 	strbmi	r5, [sp, #-0]
    50c4:	4600344d 	strmi	r3, [r0], -sp, asr #8
    50c8:	575f434d 	ldrbpl	r4, [pc, -sp, asr #6]
    50cc:	53746961 	cmnpl	r4, #1589248	; 0x184000
    50d0:	616e6769 	cmnvs	lr, r9, ror #14
    50d4:	6c6f506c 	stclvs	0, cr5, [pc], #-432	; 4f2c <_Min_Stack_Size+0x4b2c>
    50d8:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    50dc:	4d460079 	stclmi	0, cr0, [r6, #-484]	; 0xfffffe1c
    50e0:	6f4d5f43 	svcvs	0x004d5f43
    50e4:	65526564 	ldrbvs	r6, [r2, #-1380]	; 0x564
    50e8:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    50ec:	65447265 	strbvs	r7, [r4, #-613]	; 0x265
    50f0:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    50f4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    50f8:	52445300 	subpl	r5, r4, #0, 6
    50fc:	46005254 			; <UNDEFINED> instruction: 0x46005254
    5100:	435f434d 	cmpmi	pc, #872415233	; 0x34000001
    5104:	6f6d6d6f 	svcvs	0x006d6d6f
    5108:	6170536e 	cmnvs	r0, lr, ror #6
    510c:	69546563 	ldmdbvs	r4, {r0, r1, r5, r6, r8, sl, sp, lr}^
    5110:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    5114:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    5118:	46007463 	strmi	r7, [r0], -r3, ror #8
    511c:	435f434d 	cmpmi	pc, #872415233	; 0x34000001
    5120:	69746e6f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    5124:	73756f6e 	cmnvc	r5, #440	; 0x1b8
    5128:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    512c:	4d46006b 	stclmi	0, cr0, [r6, #-428]	; 0xfffffe54
    5130:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    5134:	494d4152 	stmdbmi	sp, {r1, r4, r6, r8, lr}^
    5138:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    513c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    5140:	46006665 	strmi	r6, [r0], -r5, ror #12
    5144:	575f434d 	ldrbpl	r4, [pc, -sp, asr #6]
    5148:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    514c:	6f636552 	svcvs	0x00636552
    5150:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    5154:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    5158:	434d4600 	movtmi	r4, #54784	; 0xd600
    515c:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    5160:	6e494d41 	cdpvs	13, 4, cr4, cr9, cr1, {2}
    5164:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    5168:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    516c:	434d4600 	movtmi	r4, #54784	; 0xd600
    5170:	6e61425f 	mcrvs	2, 3, r4, cr1, cr15, {2}
    5174:	545f316b 	ldrbpl	r3, [pc], #-363	; 517c <_Min_Stack_Size+0x4d7c>
    5178:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    517c:	53006665 	movwpl	r6, #1637	; 0x665
    5180:	00525344 	subseq	r5, r2, r4, asr #6
    5184:	52544453 	subspl	r4, r4, #1392508928	; 0x53000000
    5188:	434d4600 	movtmi	r4, #54784	; 0xd600
    518c:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
    5190:	4d415253 	sfmmi	f5, 2, [r1, #-332]	; 0xfffffeb4
    5194:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    5198:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    519c:	00666544 	rsbeq	r6, r6, r4, asr #10
    51a0:	5f434d46 	svcpl	0x00434d46
    51a4:	535a6948 	cmppl	sl, #72, 18	; 0x120000
    51a8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    51ac:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    51b0:	434d4600 	movtmi	r4, #54784	; 0xd600
    51b4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    51b8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    51bc:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    51c0:	45007375 	strmi	r7, [r0, #-885]	; 0x375
    51c4:	33524343 	cmpcc	r2, #201326593	; 0xc000001
    51c8:	434d4600 	movtmi	r4, #54784	; 0xd600
    51cc:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
    51d0:	4d415253 	sfmmi	f5, 2, [r1, #-332]	; 0xfffffeb4
    51d4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    51d8:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    51dc:	46007469 	strmi	r7, [r0], -r9, ror #8
    51e0:	505f434d 	subspl	r4, pc, sp, asr #6
    51e4:	52414343 	subpl	r4, r1, #201326593	; 0xc000001
    51e8:	49654444 	stmdbmi	r5!, {r2, r6, sl, lr}^
    51ec:	0074696e 	rsbseq	r6, r4, lr, ror #18
    51f0:	52434345 	subpl	r4, r3, #335544321	; 0x14000001
    51f4:	4d460032 	stclmi	0, cr0, [r6, #-200]	; 0xffffff38
    51f8:	4f4e5f43 	svcmi	0x004e5f43
    51fc:	41525352 	cmpmi	r2, r2, asr r3
    5200:	4965444d 	stmdbmi	r5!, {r0, r2, r3, r6, sl, lr}^
    5204:	0074696e 	rsbseq	r6, r4, lr, ror #18
    5208:	5f434d46 	svcpl	0x00434d46
    520c:	444e414e 	strbmi	r4, [lr], #-334	; 0x14e
    5210:	4343505f 	movtmi	r5, #12383	; 0x305f
    5214:	54445241 	strbpl	r5, [r4], #-577	; 0x241
    5218:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    521c:	696e4967 	stmdbvs	lr!, {r0, r1, r2, r5, r6, r8, fp, lr}^
    5220:	70795474 	rsbsvc	r5, r9, r4, ror r4
    5224:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    5228:	434d4600 	movtmi	r4, #54784	; 0xd600
    522c:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    5230:	69546574 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sl, sp, lr}^
    5234:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    5238:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    523c:	46007463 	strmi	r7, [r0], -r3, ror #8
    5240:	455f434d 	ldrbmi	r4, [pc, #-845]	; 4efb <_Min_Stack_Size+0x4afb>
    5244:	53746978 	cmnpl	r4, #120, 18	; 0x1e0000
    5248:	52666c65 	rsbpl	r6, r6, #25856	; 0x6500
    524c:	65726665 	ldrbvs	r6, [r2, #-1637]!	; 0x665
    5250:	65446873 	strbvs	r6, [r4, #-2163]	; 0x873
    5254:	0079616c 	rsbseq	r6, r9, ip, ror #2
    5258:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    525c:	00747461 	rsbseq	r7, r4, r1, ror #8
    5260:	5f434d46 	svcpl	0x00434d46
    5264:	41524453 	cmpmi	r2, r3, asr r4
    5268:	646d434d 	strbtvs	r4, [sp], #-845	; 0x34d
    526c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    5270:	46006769 	strmi	r6, [r0], -r9, ror #14
    5274:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    5278:	6d654d44 	stclvs	13, cr4, [r5, #-272]!	; 0xfffffef0
    527c:	4479726f 	ldrbtmi	r7, [r9], #-623	; 0x26f
    5280:	57617461 	strbpl	r7, [r1, -r1, ror #8]!
    5284:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    5288:	434d4600 	movtmi	r4, #54784	; 0xd600
    528c:	4343505f 	movtmi	r5, #12383	; 0x305f
    5290:	49445241 	stmdbmi	r4, {r0, r6, r9, ip, lr}^
    5294:	0074696e 	rsbseq	r6, r4, lr, ror #18
    5298:	5f434d46 	svcpl	0x00434d46
    529c:	72747441 	rsbsvc	r7, r4, #1090519040	; 0x41000000
    52a0:	74756269 	ldrbtvc	r6, [r5], #-617	; 0x269
    52a4:	61705365 	cmnvs	r0, r5, ror #6
    52a8:	69546563 	ldmdbvs	r4, {r0, r1, r5, r6, r8, sl, sp, lr}^
    52ac:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    52b0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    52b4:	46007463 	strmi	r7, [r0], -r3, ror #8
    52b8:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    52bc:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    52c0:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    52c4:	6f725065 	svcvs	0x00725065
    52c8:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    52cc:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    52d0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    52d4:	4f430067 	svcmi	0x00430067
    52d8:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    52dc:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    52e0:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    52e4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    52e8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    52ec:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    52f0:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    52f4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    52f8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    52fc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    5300:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    5304:	445f6870 	ldrbmi	r6, [pc], #-2160	; 530c <_Min_Stack_Size+0x4f0c>
    5308:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    530c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    5310:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    5314:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    5318:	5f787834 	svcpl	0x00787834
    531c:	2e636d66 	cdpcs	13, 6, cr6, cr3, cr6, {3}
    5320:	4d460063 	stclmi	0, cr0, [r6, #-396]	; 0xfffffe74
    5324:	4f4e5f43 	svcmi	0x004e5f43
    5328:	41525352 	cmpmi	r2, r2, asr r3
    532c:	696e494d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, fp, lr}^
    5330:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    5334:	00746375 	rsbseq	r6, r4, r5, ror r3
    5338:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    533c:	434d4600 	movtmi	r4, #54784	; 0xd600
    5340:	7475415f 	ldrbtvc	r4, [r5], #-351	; 0x15f
    5344:	6665526f 	strbtvs	r5, [r5], -pc, ror #4
    5348:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    534c:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    5350:	46007265 	strmi	r7, [r0], -r5, ror #4
    5354:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    5358:	326b6e61 	rsbcc	r6, fp, #1552	; 0x610
    535c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    5360:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    5364:	434d4600 	movtmi	r4, #54784	; 0xd600
    5368:	4c43545f 	cfstrdmi	mvd5, [r3], {95}	; 0x5f
    536c:	74655352 	strbtvc	r5, [r5], #-850	; 0x352
    5370:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    5374:	4600656d 	strmi	r6, [r0], -sp, ror #10
    5378:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    537c:	74737275 	ldrbtvc	r7, [r3], #-629	; 0x275
    5380:	65636341 	strbvs	r6, [r3, #-833]!	; 0x341
    5384:	6f4d7373 	svcvs	0x004d7373
    5388:	46006564 	strmi	r6, [r0], -r4, ror #10
    538c:	525f434d 	subspl	r4, pc, #872415233	; 0x34000001
    5390:	50646165 	rsbpl	r6, r4, r5, ror #2
    5394:	44657069 	strbtmi	r7, [r5], #-105	; 0x69
    5398:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    539c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    53a0:	00726370 	rsbseq	r6, r2, r0, ror r3
    53a4:	4d434453 	cfstrdmi	mvd4, [r3, #-332]	; 0xfffffeb4
    53a8:	4d460052 	stclmi	0, cr0, [r6, #-328]	; 0xfffffeb8
    53ac:	43525f43 	cmpmi	r2, #268	; 0x10c
    53b0:	6c654444 	cfstrdvs	mvd4, [r5], #-272	; 0xfffffef0
    53b4:	46007961 	strmi	r7, [r0], -r1, ror #18
    53b8:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    53bc:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0x465
    53c0:	73657266 	cmnvc	r5, #1610612742	; 0x60000006
    53c4:	756f4368 	strbvc	r4, [pc, #-872]!	; 5064 <_Min_Stack_Size+0x4c64>
    53c8:	4600746e 	strmi	r7, [r0], -lr, ror #8
    53cc:	575f434d 	ldrbpl	r4, [pc, -sp, asr #6]
    53d0:	53746961 	cmnpl	r4, #1589248	; 0x184000
    53d4:	616e6769 	cmnvs	lr, r9, ror #14
    53d8:	7463416c 	strbtvc	r4, [r3], #-364	; 0x16c
    53dc:	00657669 	rsbeq	r7, r5, r9, ror #12
    53e0:	5f434d46 	svcpl	0x00434d46
    53e4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    53e8:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    53ec:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    53f0:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
    53f4:	74754174 	ldrbtvc	r4, [r5], #-372	; 0x174
    53f8:	6665526f 	strbtvs	r5, [r5], -pc, ror #4
    53fc:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    5400:	6d754e5f 	ldclvs	14, cr4, [r5, #-380]!	; 0xfffffe84
    5404:	00726562 	rsbseq	r6, r2, r2, ror #10
    5408:	5f434d46 	svcpl	0x00434d46
    540c:	444e414e 	strbmi	r4, [lr], #-334	; 0x14e
    5410:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    5414:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    5418:	46007469 	strmi	r7, [r0], -r9, ror #8
    541c:	545f434d 	ldrbpl	r4, [pc], #-845	; 5424 <_Min_Stack_Size+0x5024>
    5420:	65535241 	ldrbvs	r5, [r3, #-577]	; 0x241
    5424:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0x574
    5428:	00656d69 	rsbeq	r6, r5, r9, ror #26
    542c:	5f434d46 	svcpl	0x00434d46
    5430:	43776f52 	cmnmi	r7, #328	; 0x148
    5434:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    5438:	616c6544 	cmnvs	ip, r4, asr #10
    543c:	4d460079 	stclmi	0, cr0, [r6, #-484]	; 0xfffffe1c
    5440:	4f4e5f43 	svcmi	0x004e5f43
    5444:	41525352 	cmpmi	r2, r2, asr r3
    5448:	646d434d 	strbtvs	r4, [sp], #-845	; 0x34d
    544c:	434d4600 	movtmi	r4, #54784	; 0xd600
    5450:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    5454:	65444d41 	strbvs	r4, [r4, #-3393]	; 0xd41
    5458:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    545c:	434d4600 	movtmi	r4, #54784	; 0xd600
    5460:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    5464:	704f6574 	subvc	r6, pc, r4, ror r5	; <UNPREDICTABLE>
    5468:	74617265 	strbtvc	r7, [r1], #-613	; 0x265
    546c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    5470:	5f434d46 	svcpl	0x00434d46
    5474:	444e414e 	strbmi	r4, [lr], #-334	; 0x14e
    5478:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    547c:	434d4600 	movtmi	r4, #54784	; 0xd600
    5480:	7375425f 	cmnvc	r5, #-268435451	; 0xf0000005
    5484:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
    5488:	756f7241 	strbvc	r7, [pc, #-577]!	; 524f <_Min_Stack_Size+0x4e4f>
    548c:	7544646e 	strbvc	r6, [r4, #-1134]	; 0x46e
    5490:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    5494:	46006e6f 	strmi	r6, [r0], -pc, ror #28
    5498:	495f434d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    549c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    54a0:	426c616e 	rsbmi	r6, ip, #-2147483621	; 0x8000001b
    54a4:	4e6b6e61 	cdpmi	14, 6, cr6, cr11, cr1, {3}
    54a8:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    54ac:	6d740072 	ldclvs	0, cr0, [r4, #-456]!	; 0xfffffe38
    54b0:	656d7070 	strbvs	r7, [sp, #-112]!	; 0x70
    54b4:	4d46006d 	stclmi	0, cr0, [r6, #-436]	; 0xfffffe4c
    54b8:	61575f43 	cmpvs	r7, r3, asr #30
    54bc:	69537469 	ldmdbvs	r3, {r0, r3, r5, r6, sl, ip, sp, lr}^
    54c0:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
    54c4:	434d4600 	movtmi	r4, #54784	; 0xd600
    54c8:	6464415f 	strbtvs	r4, [r4], #-351	; 0x15f
    54cc:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    54d0:	646c6f48 	strbtvs	r6, [ip], #-3912	; 0xf48
    54d4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    54d8:	434d4600 	movtmi	r4, #54784	; 0xd600
    54dc:	6d754e5f 	ldclvs	14, cr4, [r5, #-380]!	; 0xfffffe84
    54e0:	00726562 	rsbseq	r6, r2, r2, ror #10
    54e4:	32524350 	subscc	r4, r2, #80, 6	; 0x40000001
    54e8:	52435000 	subpl	r5, r3, #0
    54ec:	43500033 	cmpmi	r0, #51	; 0x33
    54f0:	46003452 			; <UNDEFINED> instruction: 0x46003452
    54f4:	505f434d 	subspl	r4, pc, sp, asr #6
    54f8:	52414343 	subpl	r4, r1, #201326593	; 0xc000001
    54fc:	696e4944 	stmdbvs	lr!, {r2, r6, r8, fp, lr}^
    5500:	70795474 	rsbsvc	r5, r9, r4, ror r4
    5504:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    5508:	434d4600 	movtmi	r4, #54784	; 0xd600
    550c:	4450525f 	ldrbmi	r5, [r0], #-607	; 0x25f
    5510:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    5514:	434d4600 	movtmi	r4, #54784	; 0xd600
    5518:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    551c:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    5520:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    5524:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    5528:	74003172 	strvc	r3, [r0], #-370	; 0x172
    552c:	3272706d 	rsbscc	r7, r2, #109	; 0x6d
    5530:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    5534:	46003372 			; <UNDEFINED> instruction: 0x46003372
    5538:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    553c:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    5540:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    5544:	53646e61 	cmnpl	r4, #1552	; 0x610
    5548:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    554c:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    5550:	61445f43 	cmpvs	r4, r3, asr #30
    5554:	65536174 	ldrbvs	r6, [r3, #-372]	; 0x174
    5558:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0x574
    555c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    5560:	54544150 	ldrbpl	r4, [r4], #-336	; 0x150
    5564:	41500032 	cmpmi	r0, r2, lsr r0
    5568:	00335454 	eorseq	r5, r3, r4, asr r4
    556c:	5f434d46 	svcpl	0x00434d46
    5570:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xf43
    5574:	69426e6d 	stmdbvs	r2, {r0, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    5578:	754e7374 	strbvc	r7, [lr, #-884]	; 0x374
    557c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    5580:	434d4600 	movtmi	r4, #54784	; 0xd600
    5584:	6363415f 	cmnvs	r3, #-1073741801	; 0xc0000017
    5588:	4d737365 	ldclmi	3, cr7, [r3, #-404]!	; 0xfffffe6c
    558c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    5590:	5f434d46 	svcpl	0x00434d46
    5594:	53524f4e 	cmppl	r2, #312	; 0x138
    5598:	494d4152 	stmdbmi	sp, {r1, r4, r6, r8, lr}^
    559c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    55a0:	5f434d46 	svcpl	0x00434d46
    55a4:	53524f4e 	cmppl	r2, #312	; 0x138
    55a8:	544d4152 	strbpl	r4, [sp], #-338	; 0x152
    55ac:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    55b0:	696e4967 	stmdbvs	lr!, {r0, r1, r2, r5, r6, r8, fp, lr}^
    55b4:	70795474 	rsbsvc	r5, r9, r4, ror r4
    55b8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    55bc:	434d4600 	movtmi	r4, #54784	; 0xd600
    55c0:	6e61425f 	mcrvs	2, 3, r4, cr1, cr15, {2}
    55c4:	545f336b 	ldrbpl	r3, [pc], #-875	; 55cc <_Min_Stack_Size+0x51cc>
    55c8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    55cc:	46006665 	strmi	r6, [r0], -r5, ror #12
    55d0:	575f434d 	ldrbpl	r4, [pc, -sp, asr #6]
    55d4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    55d8:	73727542 	cmnvc	r2, #276824064	; 0x10800000
    55dc:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    55e0:	414e5f43 	cmpmi	lr, r3, asr #30
    55e4:	6e49444e 	cdpvs	4, 4, cr4, cr9, cr14, {2}
    55e8:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    55ec:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    55f0:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    55f4:	61425f43 	cmpvs	r2, r3, asr #30
    55f8:	45316b6e 	ldrmi	r6, [r1, #-2926]!	; 0xb6e
    55fc:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    5600:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    5604:	434d4600 	movtmi	r4, #54784	; 0xd600
    5608:	4343505f 	movtmi	r5, #12383	; 0x305f
    560c:	53445241 	movtpl	r5, #16961	; 0x4241
    5610:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    5614:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    5618:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    561c:	61425f43 	cmpvs	r2, r3, asr #30
    5620:	46006b6e 	strmi	r6, [r0], -lr, ror #22
    5624:	575f434d 	ldrbpl	r4, [pc, -sp, asr #6]
    5628:	4d706172 	ldfmie	f6, [r0, #-456]!	; 0xfffffe38
    562c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    5630:	5f434d46 	svcpl	0x00434d46
    5634:	6b6e6142 	blvs	1b9db44 <_Min_Stack_Size+0x1b9d744>
    5638:	79545f34 	ldmdbvc	r4, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    563c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    5640:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    5644:	6f485f43 	svcvs	0x00485f43
    5648:	6553646c 	ldrbvs	r6, [r3, #-1132]	; 0x46c
    564c:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0x574
    5650:	00656d69 	rsbeq	r6, r5, r9, ror #26
    5654:	5f434d46 	svcpl	0x00434d46
    5658:	444e414e 	strbmi	r4, [lr], #-334	; 0x14e
    565c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    5660:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    5664:	46007463 	strmi	r7, [r0], -r3, ror #8
    5668:	505f434d 	subspl	r4, pc, sp, asr #6
    566c:	52414343 	subpl	r4, r1, #201326593	; 0xc000001
    5670:	646d4344 	strbtvs	r4, [sp], #-836	; 0x344
    5674:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    5678:	00327273 	eorseq	r7, r2, r3, ror r2
    567c:	5f434d46 	svcpl	0x00434d46
    5680:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    5684:	54646e61 	strbtpl	r6, [r4], #-3681	; 0xe61
    5688:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
    568c:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    5690:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    5694:	616c4674 	smcvs	50276	; 0xc464
    5698:	61745367 	cmnvs	r4, r7, ror #6
    569c:	00737574 	rsbseq	r7, r3, r4, ror r5
    56a0:	5f434d46 	svcpl	0x00434d46
    56a4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    56a8:	53737365 	cmnpl	r3, #-1811939327	; 0x94000001
    56ac:	70757465 	rsbsvc	r7, r5, r5, ror #8
    56b0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    56b4:	434d4600 	movtmi	r4, #54784	; 0xd600
    56b8:	776f525f 			; <UNDEFINED> instruction: 0x776f525f
    56bc:	73746942 	cmnvc	r4, #1081344	; 0x108000
    56c0:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    56c4:	50007265 	andpl	r7, r0, r5, ror #4
    56c8:	34545441 	ldrbcc	r5, [r4], #-1089	; 0x441
    56cc:	434d4600 	movtmi	r4, #54784	; 0xd600
    56d0:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    56d4:	5479726f 	ldrbtpl	r7, [r9], #-623	; 0x26f
    56d8:	00657079 	rsbeq	r7, r5, r9, ror r0
    56dc:	5f434d46 	svcpl	0x00434d46
    56e0:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    56e4:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    56e8:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
    56ec:	53676e69 	cmnpl	r7, #1680	; 0x690
    56f0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    56f4:	57420074 	smlsldxpl	r0, r2, r4, r0
    56f8:	46005254 			; <UNDEFINED> instruction: 0x46005254
    56fc:	435f434d 	cmpmi	pc, #872415233	; 0x34000001
    5700:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    5704:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    5708:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    570c:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    5710:	434d4600 	movtmi	r4, #54784	; 0xd600
    5714:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    5718:	49654444 	stmdbmi	r5!, {r2, r6, sl, lr}^
    571c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    5720:	5f434d46 	svcpl	0x00434d46
    5724:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    5728:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    572c:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    5730:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    5734:	414e5f43 	cmpmi	lr, r3, asr #30
    5738:	4345444e 	movtmi	r4, #21582	; 0x544e
    573c:	646d4343 	strbtvs	r4, [sp], #-835	; 0x343
    5740:	434d4600 	movtmi	r4, #54784	; 0xd600
    5744:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
    5748:	74614c61 	strbtvc	r4, [r1], #-3169	; 0xc61
    574c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    5750:	434d4600 	movtmi	r4, #54784	; 0xd600
    5754:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    5758:	6f434d41 	svcvs	0x00434d41
    575c:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    5760:	70795464 	rsbsvc	r5, r9, r4, ror #8
    5764:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    5768:	434d4600 	movtmi	r4, #54784	; 0xd600
    576c:	616f4c5f 	cmnvs	pc, pc, asr ip	; <UNPREDICTABLE>
    5770:	416f5464 	cmnmi	pc, r4, ror #8
    5774:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    5778:	6c654465 	cfstrdvs	mvd4, [r5], #-404	; 0xfffffe6c
    577c:	46007961 	strmi	r7, [r0], -r1, ror #18
    5780:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    5784:	6f6c4344 	svcvs	0x006c4344
    5788:	65506b63 	ldrbvs	r6, [r0, #-2915]	; 0xb63
    578c:	646f6972 	strbtvs	r6, [pc], #-2418	; 5794 <_Min_Stack_Size+0x5394>
    5790:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    5794:	46007273 			; <UNDEFINED> instruction: 0x46007273
    5798:	475f434d 	ldrbmi	r4, [pc, -sp, asr #6]
    579c:	43457465 	movtmi	r7, #21605	; 0x5465
    57a0:	4d460043 	stclmi	0, cr0, [r6, #-268]	; 0xfffffef4
    57a4:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    57a8:	75426461 	strbvc	r6, [r2, #-1121]	; 0x461
    57ac:	00747372 	rsbseq	r7, r4, r2, ror r3
    57b0:	5f434d46 	svcpl	0x00434d46
    57b4:	50434345 	subpl	r4, r3, r5, asr #6
    57b8:	53656761 	cmnpl	r5, #25427968	; 0x1840000
    57bc:	00657a69 	rsbeq	r7, r5, r9, ror #20
    57c0:	5f434d46 	svcpl	0x00434d46
    57c4:	6f435449 	svcvs	0x00435449
    57c8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    57cc:	434d4600 	movtmi	r4, #54784	; 0xd600
    57d0:	4343505f 	movtmi	r5, #12383	; 0x305f
    57d4:	49445241 	stmdbmi	r4, {r0, r6, r9, ip, lr}^
    57d8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    57dc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    57e0:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    57e4:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    57e8:	544d4152 	strbpl	r4, [sp], #-338	; 0x152
    57ec:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    57f0:	696e4967 	stmdbvs	lr!, {r0, r1, r2, r5, r6, r8, fp, lr}^
    57f4:	70795474 	rsbsvc	r5, r9, r4, ror r4
    57f8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    57fc:	434d4600 	movtmi	r4, #54784	; 0xd600
    5800:	4343455f 	movtmi	r4, #13663	; 0x355f
    5804:	434d4600 	movtmi	r4, #54784	; 0xd600
    5808:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    580c:	4479726f 	ldrbtmi	r7, [r9], #-623	; 0x26f
    5810:	57617461 	strbpl	r7, [r1, -r1, ror #8]!
    5814:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    5818:	434d4600 	movtmi	r4, #54784	; 0xd600
    581c:	756f435f 	strbvc	r4, [pc, #-863]!	; 54c5 <_Min_Stack_Size+0x50c5>
    5820:	7400746e 	strvc	r7, [r0], #-1134	; 0x46e
    5824:	3472706d 	ldrbtcc	r7, [r2], #-109	; 0x6d
    5828:	434d4600 	movtmi	r4, #54784	; 0xd600
    582c:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    5830:	74534d41 	ldrbvc	r4, [r3], #-3393	; 0xd41
    5834:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    5838:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    583c:	434d4600 	movtmi	r4, #54784	; 0xd600
    5840:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    5844:	72506574 	subsvc	r6, r0, #116, 10	; 0x1d000000
    5848:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    584c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    5850:	434d4600 	movtmi	r4, #54784	; 0xd600
    5854:	0054495f 	subseq	r4, r4, pc, asr r9
    5858:	5f434d46 	svcpl	0x00434d46
    585c:	6e797341 	cdpvs	3, 7, cr7, cr9, cr1, {2}
    5860:	6f726863 	svcvs	0x00726863
    5864:	73756f6e 	cmnvc	r5, #440	; 0x1b8
    5868:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    586c:	434d4600 	movtmi	r4, #54784	; 0xd600
    5870:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 56fc <_Min_Stack_Size+0x52fc>
    5874:	646e616d 	strbtvs	r6, [lr], #-365	; 0x16d
    5878:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    587c:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0x900
    5880:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    5884:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    5888:	4f495f43 	svcmi	0x00495f43
    588c:	63617053 	cmnvs	r1, #83	; 0x53
    5890:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
    5894:	53676e69 	cmnpl	r7, #1680	; 0x690
    5898:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    589c:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    58a0:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    58a4:	544d4152 	strbpl	r4, [sp], #-338	; 0x152
    58a8:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    58ac:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    58b0:	00746375 	rsbseq	r6, r4, r5, ror r3
    58b4:	5f434d46 	svcpl	0x00434d46
    58b8:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    58bc:	434d4600 	movtmi	r4, #54784	; 0xd600
    58c0:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    58c4:	646d4344 	strbtvs	r4, [sp], #-836	; 0x344
    58c8:	52445300 	subpl	r5, r4, #0, 6
    58cc:	425f4d41 	subsmi	r4, pc, #4160	; 0x1040
    58d0:	006b6e61 	rsbeq	r6, fp, r1, ror #28
    58d4:	5f434d46 	svcpl	0x00434d46
    58d8:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    58dc:	74616566 	strbtvc	r6, [r1], #-1382	; 0x566
    58e0:	00657275 	rsbeq	r7, r5, r5, ror r2
    58e4:	344f4950 	strbcc	r4, [pc], #-2384	; 58ec <_Min_Stack_Size+0x54ec>
    58e8:	434d4600 	movtmi	r4, #54784	; 0xd600
    58ec:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
    58f0:	64644161 	strbtvs	r4, [r4], #-353	; 0x161
    58f4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    58f8:	0078754d 	rsbseq	r7, r8, sp, asr #10
    58fc:	5f434d46 	svcpl	0x00434d46
    5900:	444b4c43 	strbmi	r4, [fp], #-3139	; 0xc43
    5904:	73697669 	cmnvc	r9, #110100480	; 0x6900000
    5908:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    590c:	52435442 	subpl	r5, r3, #1107296256	; 0x42000000
    5910:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    5914:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    5918:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    591c:	4e520067 	cdpmi	0, 5, cr0, cr2, cr7, {3}
    5920:	6d435f47 	stclvs	15, cr5, [r3, #-284]	; 0xfffffee4
    5924:	4e520064 	cdpmi	0, 5, cr0, cr2, cr4, {3}
    5928:	54495f47 	strbpl	r5, [r9], #-3911	; 0xf47
    592c:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    5930:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    5934:	646e6152 	strbtvs	r6, [lr], #-338	; 0x152
    5938:	754e6d6f 	strbvc	r6, [lr, #-3439]	; 0xd6f
    593c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    5940:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    5944:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    5948:	0074696e 	rsbseq	r6, r4, lr, ror #18
    594c:	5f474e52 	svcpl	0x00474e52
    5950:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    5954:	00666544 	rsbeq	r6, r6, r4, asr #10
    5958:	5f474e52 	svcpl	0x00474e52
    595c:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    5960:	524f4300 	subpl	r4, pc, #0, 6
    5964:	5f584554 	svcpl	0x00584554
    5968:	5f46344d 	svcpl	0x0046344d
    596c:	334d5453 	movtcc	r5, #54355	; 0xd453
    5970:	2f344632 	svccs	0x00344632
    5974:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    5978:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    597c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    5980:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    5984:	5f787834 	svcpl	0x00787834
    5988:	50647453 	rsbpl	r7, r4, r3, asr r4
    598c:	70697265 	rsbvc	r7, r9, r5, ror #4
    5990:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    5994:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    5998:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    599c:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    59a0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    59a4:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    59a8:	632e676e 	teqvs	lr, #28835840	; 0x1b80000
    59ac:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    59b0:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    59b4:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    59b8:	52006761 	andpl	r6, r0, #25427968	; 0x1840000
    59bc:	475f474e 	ldrbmi	r4, [pc, -lr, asr #14]
    59c0:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    59c4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    59c8:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
    59cc:	435f474e 	cmpmi	pc, #20447232	; 0x1380000
    59d0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    59d4:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    59d8:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    59dc:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    59e0:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    59e4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    59e8:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    59ec:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    59f0:	Address 0x00000000000059f0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0924>
   4:	2e342820 	cdpcs	8, 3, cr2, cr4, cr0, {1}
   8:	2d322e38 	ldccs	14, cr2, [r2, #-224]!	; 0xffffff20
   c:	62753431 	rsbsvs	r3, r5, #822083584	; 0x31000000
  10:	75746e75 	ldrbvc	r6, [r4, #-3701]!	; 0xe75
  14:	29362b31 	ldmdbcs	r6!, {r0, r4, r5, r8, r9, fp, sp}
  18:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
  1c:	Address 0x000000000000001c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000010 	andeq	r0, r0, r0, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
      1c:	00000122 	andeq	r0, r0, r2, lsr #2
      20:	00080e61 	andeq	r0, r8, r1, ror #28
      24:	0000000c 	andeq	r0, r0, ip
      28:	00000000 	andeq	r0, r0, r0
      2c:	08000460 	stmdaeq	r0, {r5, r6, sl}
      30:	00000092 	muleq	r0, r2, r0
      34:	0000000c 	andeq	r0, r0, ip
      38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      3c:	7c020001 	stcvc	0, cr0, [r2], {1}
      40:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      44:	00000014 	andeq	r0, r0, r4, lsl r0
      48:	00000034 	andeq	r0, r0, r4, lsr r0
      4c:	080004f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl}
      50:	00000016 	andeq	r0, r0, r6, lsl r0
      54:	83080e41 	movwhi	r0, #36417	; 0x8e41
      58:	00018e02 	andeq	r8, r1, r2, lsl #28
      5c:	00000018 	andeq	r0, r0, r8, lsl r0
      60:	00000034 	andeq	r0, r0, r4, lsr r0
      64:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
      68:	00000056 	andeq	r0, r0, r6, asr r0
      6c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
      70:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      74:	200e4301 	andcs	r4, lr, r1, lsl #6
      78:	00000018 	andeq	r0, r0, r8, lsl r0
      7c:	00000034 	andeq	r0, r0, r4, lsr r0
      80:	08000564 	stmdaeq	r0, {r2, r5, r6, r8, sl}
      84:	00000044 	andeq	r0, r0, r4, asr #32
      88:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      8c:	42018e02 	andmi	r8, r1, #2, 28
      90:	0000180e 	andeq	r1, r0, lr, lsl #16
      94:	00000014 	andeq	r0, r0, r4, lsl r0
      98:	00000034 	andeq	r0, r0, r4, lsr r0
      9c:	080005a8 	stmdaeq	r0, {r3, r5, r7, r8, sl}
      a0:	0000002a 	andeq	r0, r0, sl, lsr #32
      a4:	83080e41 	movwhi	r0, #36417	; 0x8e41
      a8:	00018e02 	andeq	r8, r1, r2, lsl #28
      ac:	00000014 	andeq	r0, r0, r4, lsl r0
      b0:	00000034 	andeq	r0, r0, r4, lsr r0
      b4:	080005d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl}
      b8:	0000000c 	andeq	r0, r0, ip
      bc:	83080e41 	movwhi	r0, #36417	; 0x8e41
      c0:	00018e02 	andeq	r8, r1, r2, lsl #28
      c4:	0000000c 	andeq	r0, r0, ip
      c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      cc:	7c020001 	stcvc	0, cr0, [r2], {1}
      d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      d4:	00000020 	andeq	r0, r0, r0, lsr #32
      d8:	000000c4 	andeq	r0, r0, r4, asr #1
      dc:	080005e0 	stmdaeq	r0, {r5, r6, r7, r8, sl}
      e0:	000000e0 	andeq	r0, r0, r0, ror #1
      e4:	83200e42 	teqhi	r0, #1056	; 0x420
      e8:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
      ec:	87058606 	strhi	r8, [r5, -r6, lsl #12]
      f0:	89038804 	stmdbhi	r3, {r2, fp, pc}
      f4:	00018e02 	andeq	r8, r1, r2, lsl #28
      f8:	0000001c 	andeq	r0, r0, ip, lsl r0
      fc:	000000c4 	andeq	r0, r0, r4, asr #1
     100:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
     104:	00000054 	andeq	r0, r0, r4, asr r0
     108:	83180e41 	tsthi	r8, #1040	; 0x410
     10c:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     110:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     114:	00018e02 	andeq	r8, r1, r2, lsl #28
     118:	00000024 	andeq	r0, r0, r4, lsr #32
     11c:	000000c4 	andeq	r0, r0, r4, asr #1
     120:	08000714 	stmdaeq	r0, {r2, r4, r8, r9, sl}
     124:	000001ee 	andeq	r0, r0, lr, ror #3
     128:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
     12c:	86088509 	strhi	r8, [r8], -r9, lsl #10
     130:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     134:	8a048905 	bhi	122550 <_Min_Stack_Size+0x122150>
     138:	8e028b03 	vmlahi.f64	d8, d2, d3
     13c:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     140:	00000018 	andeq	r0, r0, r8, lsl r0
     144:	000000c4 	andeq	r0, r0, r4, asr #1
     148:	08000904 	stmdaeq	r0, {r2, r8, fp}
     14c:	00000036 	andeq	r0, r0, r6, lsr r0
     150:	83100e41 	tsthi	r0, #1040	; 0x410
     154:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     158:	00018e02 	andeq	r8, r1, r2, lsl #28
     15c:	0000000c 	andeq	r0, r0, ip
     160:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     164:	7c020001 	stcvc	0, cr0, [r2], {1}
     168:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     16c:	00000014 	andeq	r0, r0, r4, lsl r0
     170:	0000015c 	andeq	r0, r0, ip, asr r1
     174:	0800093c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp}
     178:	0000001a 	andeq	r0, r0, sl, lsl r0
     17c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     180:	00018e02 	andeq	r8, r1, r2, lsl #28
     184:	00000020 	andeq	r0, r0, r0, lsr #32
     188:	0000015c 	andeq	r0, r0, ip, asr r1
     18c:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
     190:	000000ce 	andeq	r0, r0, lr, asr #1
     194:	83200e42 	teqhi	r0, #1056	; 0x420
     198:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
     19c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     1a0:	89038804 	stmdbhi	r3, {r2, fp, pc}
     1a4:	00018e02 	andeq	r8, r1, r2, lsl #28
     1a8:	00000018 	andeq	r0, r0, r8, lsl r0
     1ac:	0000015c 	andeq	r0, r0, ip, asr r1
     1b0:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
     1b4:	00000026 	andeq	r0, r0, r6, lsr #32
     1b8:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xe43
     1bc:	86038504 	strhi	r8, [r3], -r4, lsl #10
     1c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     1c4:	00000018 	andeq	r0, r0, r8, lsl r0
     1c8:	0000015c 	andeq	r0, r0, ip, asr r1
     1cc:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
     1d0:	00000026 	andeq	r0, r0, r6, lsr #32
     1d4:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xe43
     1d8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     1dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1e4:	0000015c 	andeq	r0, r0, ip, asr r1
     1e8:	08000a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp}
     1ec:	00000070 	andeq	r0, r0, r0, ror r0
     1f0:	83180e41 	tsthi	r8, #1040	; 0x410
     1f4:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     1f8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     1fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     200:	0000001c 	andeq	r0, r0, ip, lsl r0
     204:	0000015c 	andeq	r0, r0, ip, asr r1
     208:	08000ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp}
     20c:	000000b2 	strheq	r0, [r0], -r2
     210:	83180e43 	tsthi	r8, #1072	; 0x430
     214:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     218:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     21c:	00018e02 	andeq	r8, r1, r2, lsl #28
     220:	00000018 	andeq	r0, r0, r8, lsl r0
     224:	0000015c 	andeq	r0, r0, ip, asr r1
     228:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
     22c:	00000040 	andeq	r0, r0, r0, asr #32
     230:	83100e41 	tsthi	r0, #1040	; 0x410
     234:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     238:	00018e02 	andeq	r8, r1, r2, lsl #28
     23c:	0000001c 	andeq	r0, r0, ip, lsl r0
     240:	0000015c 	andeq	r0, r0, ip, asr r1
     244:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
     248:	0000007a 	andeq	r0, r0, sl, ror r0
     24c:	83180e41 	tsthi	r8, #1040	; 0x410
     250:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     254:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     258:	00018e02 	andeq	r8, r1, r2, lsl #28
     25c:	0000000c 	andeq	r0, r0, ip
     260:	0000015c 	andeq	r0, r0, ip, asr r1
     264:	08000c58 	stmdaeq	r0, {r3, r4, r6, sl, fp}
     268:	00000006 	andeq	r0, r0, r6
     26c:	0000000c 	andeq	r0, r0, ip
     270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     274:	7c020001 	stcvc	0, cr0, [r2], {1}
     278:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     27c:	0000000c 	andeq	r0, r0, ip
     280:	0000026c 	andeq	r0, r0, ip, ror #4
     284:	08000c60 	stmdaeq	r0, {r5, r6, sl, fp}
     288:	00000016 	andeq	r0, r0, r6, lsl r0
     28c:	0000000c 	andeq	r0, r0, ip
     290:	0000026c 	andeq	r0, r0, ip, ror #4
     294:	08000c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp}
     298:	00000006 	andeq	r0, r0, r6
     29c:	00000014 	andeq	r0, r0, r4, lsl r0
     2a0:	0000026c 	andeq	r0, r0, ip, ror #4
     2a4:	08000c80 	stmdaeq	r0, {r7, sl, fp}
     2a8:	0000001e 	andeq	r0, r0, lr, lsl r0
     2ac:	84040e43 	strhi	r0, [r4], #-3651	; 0xe43
     2b0:	00000001 	andeq	r0, r0, r1
     2b4:	00000014 	andeq	r0, r0, r4, lsl r0
     2b8:	0000026c 	andeq	r0, r0, ip, ror #4
     2bc:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
     2c0:	00000034 	andeq	r0, r0, r4, lsr r0
     2c4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     2c8:	00018502 	andeq	r8, r1, r2, lsl #10
     2cc:	00000014 	andeq	r0, r0, r4, lsl r0
     2d0:	0000026c 	andeq	r0, r0, ip, ror #4
     2d4:	08000cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp}
     2d8:	00000028 	andeq	r0, r0, r8, lsr #32
     2dc:	84040e44 	strhi	r0, [r4], #-3652	; 0xe44
     2e0:	00000001 	andeq	r0, r0, r1
     2e4:	0000000c 	andeq	r0, r0, ip
     2e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2ec:	7c020001 	stcvc	0, cr0, [r2], {1}
     2f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2f4:	00000014 	andeq	r0, r0, r4, lsl r0
     2f8:	000002e4 	andeq	r0, r0, r4, ror #5
     2fc:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
     300:	00000026 	andeq	r0, r0, r6, lsr #32
     304:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     308:	00018502 	andeq	r8, r1, r2, lsl #10
     30c:	00000018 	andeq	r0, r0, r8, lsl r0
     310:	000002e4 	andeq	r0, r0, r4, ror #5
     314:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
     318:	00000084 	andeq	r0, r0, r4, lsl #1
     31c:	83100e41 	tsthi	r0, #1040	; 0x410
     320:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     324:	00018e02 	andeq	r8, r1, r2, lsl #28
     328:	00000018 	andeq	r0, r0, r8, lsl r0
     32c:	000002e4 	andeq	r0, r0, r4, ror #5
     330:	08000da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp}
     334:	00000072 	andeq	r0, r0, r2, ror r0
     338:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     33c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     340:	00018e02 	andeq	r8, r1, r2, lsl #28
     344:	0000001c 	andeq	r0, r0, ip, lsl r0
     348:	000002e4 	andeq	r0, r0, r4, ror #5
     34c:	08000e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp}
     350:	00000076 	andeq	r0, r0, r6, ror r0
     354:	83180e41 	tsthi	r8, #1040	; 0x410
     358:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     35c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     360:	00018e02 	andeq	r8, r1, r2, lsl #28
     364:	0000001c 	andeq	r0, r0, ip, lsl r0
     368:	000002e4 	andeq	r0, r0, r4, ror #5
     36c:	08000e94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp}
     370:	00000084 	andeq	r0, r0, r4, lsl #1
     374:	83180e41 	tsthi	r8, #1040	; 0x410
     378:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     37c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     380:	00018e02 	andeq	r8, r1, r2, lsl #28
     384:	00000024 	andeq	r0, r0, r4, lsr #32
     388:	000002e4 	andeq	r0, r0, r4, ror #5
     38c:	08000f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp}
     390:	00000280 	andeq	r0, r0, r0, lsl #5
     394:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
     398:	86088509 	strhi	r8, [r8], -r9, lsl #10
     39c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     3a0:	8a048905 	bhi	1227bc <_Min_Stack_Size+0x1223bc>
     3a4:	8e028b03 	vmlahi.f64	d8, d2, d3
     3a8:	380e4101 	stmdacc	lr, {r0, r8, lr}
     3ac:	00000018 	andeq	r0, r0, r8, lsl r0
     3b0:	000002e4 	andeq	r0, r0, r4, ror #5
     3b4:	08001198 	stmdaeq	r0, {r3, r4, r7, r8, ip}
     3b8:	00000050 	andeq	r0, r0, r0, asr r0
     3bc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     3c0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     3c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     3c8:	00000018 	andeq	r0, r0, r8, lsl r0
     3cc:	000002e4 	andeq	r0, r0, r4, ror #5
     3d0:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
     3d4:	00000034 	andeq	r0, r0, r4, lsr r0
     3d8:	83100e41 	tsthi	r0, #1040	; 0x410
     3dc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     3e0:	00018e02 	andeq	r8, r1, r2, lsl #28
     3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3e8:	000002e4 	andeq	r0, r0, r4, ror #5
     3ec:	0800121c 	stmdaeq	r0, {r2, r3, r4, r9, ip}
     3f0:	00000124 	andeq	r0, r0, r4, lsr #2
     3f4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
     3f8:	86058506 	strhi	r8, [r5], -r6, lsl #10
     3fc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     400:	00018e02 	andeq	r8, r1, r2, lsl #28
     404:	00000024 	andeq	r0, r0, r4, lsr #32
     408:	000002e4 	andeq	r0, r0, r4, ror #5
     40c:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
     410:	0000023e 	andeq	r0, r0, lr, lsr r2
     414:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
     418:	86088509 	strhi	r8, [r8], -r9, lsl #10
     41c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     420:	8a048905 	bhi	12283c <_Min_Stack_Size+0x12243c>
     424:	8e028b03 	vmlahi.f64	d8, d2, d3
     428:	380e4101 	stmdacc	lr, {r0, r8, lr}
     42c:	00000018 	andeq	r0, r0, r8, lsl r0
     430:	000002e4 	andeq	r0, r0, r4, ror #5
     434:	08001580 	stmdaeq	r0, {r7, r8, sl, ip}
     438:	0000003a 	andeq	r0, r0, sl, lsr r0
     43c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     440:	86038504 	strhi	r8, [r3], -r4, lsl #10
     444:	00018e02 	andeq	r8, r1, r2, lsl #28
     448:	0000001c 	andeq	r0, r0, ip, lsl r0
     44c:	000002e4 	andeq	r0, r0, r4, ror #5
     450:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
     454:	00000082 	andeq	r0, r0, r2, lsl #1
     458:	83180e41 	tsthi	r8, #1040	; 0x410
     45c:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     460:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     464:	00018e02 	andeq	r8, r1, r2, lsl #28
     468:	0000001c 	andeq	r0, r0, ip, lsl r0
     46c:	000002e4 	andeq	r0, r0, r4, ror #5
     470:	08001640 	stmdaeq	r0, {r6, r9, sl, ip}
     474:	00000052 	andeq	r0, r0, r2, asr r0
     478:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
     47c:	86058506 	strhi	r8, [r5], -r6, lsl #10
     480:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     484:	00018e02 	andeq	r8, r1, r2, lsl #28
     488:	00000014 	andeq	r0, r0, r4, lsl r0
     48c:	000002e4 	andeq	r0, r0, r4, ror #5
     490:	08001694 	stmdaeq	r0, {r2, r4, r7, r9, sl, ip}
     494:	0000001a 	andeq	r0, r0, sl, lsl r0
     498:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     49c:	00018e02 	andeq	r8, r1, r2, lsl #28
     4a0:	00000014 	andeq	r0, r0, r4, lsl r0
     4a4:	000002e4 	andeq	r0, r0, r4, ror #5
     4a8:	080016b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip}
     4ac:	0000001e 	andeq	r0, r0, lr, lsl r0
     4b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     4b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4b8:	00000014 	andeq	r0, r0, r4, lsl r0
     4bc:	000002e4 	andeq	r0, r0, r4, ror #5
     4c0:	080016d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip}
     4c4:	0000000e 	andeq	r0, r0, lr
     4c8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     4cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d0:	00000014 	andeq	r0, r0, r4, lsl r0
     4d4:	000002e4 	andeq	r0, r0, r4, ror #5
     4d8:	080016e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip}
     4dc:	00000094 	muleq	r0, r4, r0
     4e0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     4e4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4e8:	0000000c 	andeq	r0, r0, ip
     4ec:	000002e4 	andeq	r0, r0, r4, ror #5
     4f0:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
     4f4:	00000004 	andeq	r0, r0, r4
     4f8:	0000000c 	andeq	r0, r0, ip
     4fc:	000002e4 	andeq	r0, r0, r4, ror #5
     500:	08001778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip}
     504:	00000004 	andeq	r0, r0, r4
     508:	0000000c 	andeq	r0, r0, ip
     50c:	000002e4 	andeq	r0, r0, r4, ror #5
     510:	0800177c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip}
     514:	00000006 	andeq	r0, r0, r6
     518:	00000014 	andeq	r0, r0, r4, lsl r0
     51c:	000002e4 	andeq	r0, r0, r4, ror #5
     520:	08001784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip}
     524:	00000016 	andeq	r0, r0, r6, lsl r0
     528:	83080e41 	movwhi	r0, #36417	; 0x8e41
     52c:	00018e02 	andeq	r8, r1, r2, lsl #28
     530:	00000014 	andeq	r0, r0, r4, lsl r0
     534:	000002e4 	andeq	r0, r0, r4, ror #5
     538:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
     53c:	00000016 	andeq	r0, r0, r6, lsl r0
     540:	83080e41 	movwhi	r0, #36417	; 0x8e41
     544:	00018e02 	andeq	r8, r1, r2, lsl #28
     548:	00000014 	andeq	r0, r0, r4, lsl r0
     54c:	000002e4 	andeq	r0, r0, r4, ror #5
     550:	080017b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip}
     554:	0000005a 	andeq	r0, r0, sl, asr r0
     558:	84040e45 	strhi	r0, [r4], #-3653	; 0xe45
     55c:	00000001 	andeq	r0, r0, r1
     560:	0000000c 	andeq	r0, r0, ip
     564:	000002e4 	andeq	r0, r0, r4, ror #5
     568:	08001810 	stmdaeq	r0, {r4, fp, ip}
     56c:	00000060 	andeq	r0, r0, r0, rrx
     570:	00000018 	andeq	r0, r0, r8, lsl r0
     574:	000002e4 	andeq	r0, r0, r4, ror #5
     578:	08001870 	stmdaeq	r0, {r4, r5, r6, fp, ip}
     57c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     580:	83100e41 	tsthi	r0, #1040	; 0x410
     584:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     588:	00018e02 	andeq	r8, r1, r2, lsl #28
     58c:	0000000c 	andeq	r0, r0, ip
     590:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     594:	7c020001 	stcvc	0, cr0, [r2], {1}
     598:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     59c:	00000018 	andeq	r0, r0, r8, lsl r0
     5a0:	0000058c 	andeq	r0, r0, ip, lsl #11
     5a4:	08001920 	stmdaeq	r0, {r5, r8, fp, ip}
     5a8:	0000006e 	andeq	r0, r0, lr, rrx
     5ac:	83100e41 	tsthi	r0, #1040	; 0x410
     5b0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     5b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     5b8:	00000024 	andeq	r0, r0, r4, lsr #32
     5bc:	0000058c 	andeq	r0, r0, ip, lsl #11
     5c0:	08001990 	stmdaeq	r0, {r4, r7, r8, fp, ip}
     5c4:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     5c8:	83280e42 	teqhi	r8, #1056	; 0x420
     5cc:	8509840a 	strhi	r8, [r9, #-1034]	; 0x40a
     5d0:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     5d4:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     5d8:	8b038a04 	blhi	e2df0 <_Min_Stack_Size+0xe29f0>
     5dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     5e0:	00000018 	andeq	r0, r0, r8, lsl r0
     5e4:	0000058c 	andeq	r0, r0, ip, lsl #11
     5e8:	08001b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip}
     5ec:	000000c0 	andeq	r0, r0, r0, asr #1
     5f0:	83100e41 	tsthi	r0, #1040	; 0x410
     5f4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     5f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5fc:	00000014 	andeq	r0, r0, r4, lsl r0
     600:	0000058c 	andeq	r0, r0, ip, lsl #11
     604:	08001c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip}
     608:	00000028 	andeq	r0, r0, r8, lsr #32
     60c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     610:	00018e02 	andeq	r8, r1, r2, lsl #28
     614:	0000001c 	andeq	r0, r0, ip, lsl r0
     618:	0000058c 	andeq	r0, r0, ip, lsl #11
     61c:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
     620:	000000c0 	andeq	r0, r0, r0, asr #1
     624:	83180e42 	tsthi	r8, #1056	; 0x420
     628:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     62c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     630:	00018e02 	andeq	r8, r1, r2, lsl #28
     634:	0000001c 	andeq	r0, r0, ip, lsl r0
     638:	0000058c 	andeq	r0, r0, ip, lsl #11
     63c:	08001cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip}
     640:	00000152 	andeq	r0, r0, r2, asr r1
     644:	83180e41 	tsthi	r8, #1040	; 0x410
     648:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     64c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     650:	00018e02 	andeq	r8, r1, r2, lsl #28
     654:	00000018 	andeq	r0, r0, r8, lsl r0
     658:	0000058c 	andeq	r0, r0, ip, lsl #11
     65c:	08001e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip}
     660:	00000088 	andeq	r0, r0, r8, lsl #1
     664:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     668:	86038504 	strhi	r8, [r3], -r4, lsl #10
     66c:	00018e02 	andeq	r8, r1, r2, lsl #28
     670:	0000001c 	andeq	r0, r0, ip, lsl r0
     674:	0000058c 	andeq	r0, r0, ip, lsl #11
     678:	08001ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip}
     67c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     680:	83180e41 	tsthi	r8, #1040	; 0x410
     684:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     688:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     68c:	00018e02 	andeq	r8, r1, r2, lsl #28
     690:	0000001c 	andeq	r0, r0, ip, lsl r0
     694:	0000058c 	andeq	r0, r0, ip, lsl #11
     698:	08001f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip}
     69c:	0000014a 	andeq	r0, r0, sl, asr #2
     6a0:	83180e41 	tsthi	r8, #1040	; 0x410
     6a4:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     6a8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     6ac:	00018e02 	andeq	r8, r1, r2, lsl #28
     6b0:	00000014 	andeq	r0, r0, r4, lsl r0
     6b4:	0000058c 	andeq	r0, r0, ip, lsl #11
     6b8:	080020cc 	stmdaeq	r0, {r2, r3, r6, r7, sp}
     6bc:	0000001a 	andeq	r0, r0, sl, lsl r0
     6c0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     6c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     6c8:	0000000c 	andeq	r0, r0, ip
     6cc:	0000058c 	andeq	r0, r0, ip, lsl #11
     6d0:	080020e8 	stmdaeq	r0, {r3, r5, r6, r7, sp}
     6d4:	00000010 	andeq	r0, r0, r0, lsl r0
     6d8:	00000014 	andeq	r0, r0, r4, lsl r0
     6dc:	0000058c 	andeq	r0, r0, ip, lsl #11
     6e0:	080020f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp}
     6e4:	00000018 	andeq	r0, r0, r8, lsl r0
     6e8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     6ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     6f0:	00000014 	andeq	r0, r0, r4, lsl r0
     6f4:	0000058c 	andeq	r0, r0, ip, lsl #11
     6f8:	08002110 	stmdaeq	r0, {r4, r8, sp}
     6fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     700:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     704:	00018e02 	andeq	r8, r1, r2, lsl #28
     708:	0000000c 	andeq	r0, r0, ip
     70c:	0000058c 	andeq	r0, r0, ip, lsl #11
     710:	0800212c 	stmdaeq	r0, {r2, r3, r5, r8, sp}
     714:	0000000c 	andeq	r0, r0, ip
     718:	00000024 	andeq	r0, r0, r4, lsr #32
     71c:	0000058c 	andeq	r0, r0, ip, lsl #11
     720:	08002138 	stmdaeq	r0, {r3, r4, r5, r8, sp}
     724:	0000017c 	andeq	r0, r0, ip, ror r1
     728:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
     72c:	86088509 	strhi	r8, [r8], -r9, lsl #10
     730:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     734:	8a048905 	bhi	122b50 <_Min_Stack_Size+0x122750>
     738:	8e028b03 	vmlahi.f64	d8, d2, d3
     73c:	300e4501 	andcc	r4, lr, r1, lsl #10
     740:	00000024 	andeq	r0, r0, r4, lsr #32
     744:	0000058c 	andeq	r0, r0, ip, lsl #11
     748:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
     74c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     750:	83280e42 	teqhi	r8, #1056	; 0x420
     754:	8509840a 	strhi	r8, [r9, #-1034]	; 0x40a
     758:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     75c:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     760:	8b038a04 	blhi	e2f78 <_Min_Stack_Size+0xe2b78>
     764:	00018e02 	andeq	r8, r1, r2, lsl #28
     768:	00000018 	andeq	r0, r0, r8, lsl r0
     76c:	0000058c 	andeq	r0, r0, ip, lsl #11
     770:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
     774:	000000bc 	strheq	r0, [r0], -ip
     778:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     77c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     780:	00018e02 	andeq	r8, r1, r2, lsl #28
     784:	00000018 	andeq	r0, r0, r8, lsl r0
     788:	0000058c 	andeq	r0, r0, ip, lsl #11
     78c:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
     790:	0000008c 	andeq	r0, r0, ip, lsl #1
     794:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     798:	86038504 	strhi	r8, [r3], -r4, lsl #10
     79c:	00018e02 	andeq	r8, r1, r2, lsl #28
     7a0:	00000018 	andeq	r0, r0, r8, lsl r0
     7a4:	0000058c 	andeq	r0, r0, ip, lsl #11
     7a8:	080024ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, sp}
     7ac:	00000092 	muleq	r0, r2, r0
     7b0:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
     7b4:	8e028b03 	vmlahi.f64	d8, d2, d3
     7b8:	180e4301 	stmdane	lr, {r0, r8, r9, lr}
     7bc:	00000024 	andeq	r0, r0, r4, lsr #32
     7c0:	0000058c 	andeq	r0, r0, ip, lsl #11
     7c4:	08002580 	stmdaeq	r0, {r7, r8, sl, sp}
     7c8:	0000037c 	andeq	r0, r0, ip, ror r3
     7cc:	84240e46 	strthi	r0, [r4], #-3654	; 0xe46
     7d0:	86088509 	strhi	r8, [r8], -r9, lsl #10
     7d4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     7d8:	8a048905 	bhi	122bf4 <_Min_Stack_Size+0x1227f4>
     7dc:	8e028b03 	vmlahi.f64	d8, d2, d3
     7e0:	380e4901 	stmdacc	lr, {r0, r8, fp, lr}
     7e4:	00000014 	andeq	r0, r0, r4, lsl r0
     7e8:	0000058c 	andeq	r0, r0, ip, lsl #11
     7ec:	080028fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp}
     7f0:	00000096 	muleq	r0, r6, r0
     7f4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     7f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     7fc:	00000018 	andeq	r0, r0, r8, lsl r0
     800:	0000058c 	andeq	r0, r0, ip, lsl #11
     804:	08002994 	stmdaeq	r0, {r2, r4, r7, r8, fp, sp}
     808:	0000008e 	andeq	r0, r0, lr, lsl #1
     80c:	83100e41 	tsthi	r0, #1040	; 0x410
     810:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     814:	00018e02 	andeq	r8, r1, r2, lsl #28
     818:	00000018 	andeq	r0, r0, r8, lsl r0
     81c:	0000058c 	andeq	r0, r0, ip, lsl #11
     820:	08002a24 	stmdaeq	r0, {r2, r5, r9, fp, sp}
     824:	000000aa 	andeq	r0, r0, sl, lsr #1
     828:	83100e41 	tsthi	r0, #1040	; 0x410
     82c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     830:	00018e02 	andeq	r8, r1, r2, lsl #28
     834:	00000018 	andeq	r0, r0, r8, lsl r0
     838:	0000058c 	andeq	r0, r0, ip, lsl #11
     83c:	08002ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, sp}
     840:	00000074 	andeq	r0, r0, r4, ror r0
     844:	83100e41 	tsthi	r0, #1040	; 0x410
     848:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     84c:	00018e02 	andeq	r8, r1, r2, lsl #28
     850:	00000018 	andeq	r0, r0, r8, lsl r0
     854:	0000058c 	andeq	r0, r0, ip, lsl #11
     858:	08002b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, sp}
     85c:	0000008a 	andeq	r0, r0, sl, lsl #1
     860:	83100e41 	tsthi	r0, #1040	; 0x410
     864:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     868:	00018e02 	andeq	r8, r1, r2, lsl #28
     86c:	00000018 	andeq	r0, r0, r8, lsl r0
     870:	0000058c 	andeq	r0, r0, ip, lsl #11
     874:	08002bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, sp}
     878:	0000007e 	andeq	r0, r0, lr, ror r0
     87c:	83100e41 	tsthi	r0, #1040	; 0x410
     880:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     884:	00018e02 	andeq	r8, r1, r2, lsl #28
     888:	00000014 	andeq	r0, r0, r4, lsl r0
     88c:	0000058c 	andeq	r0, r0, ip, lsl #11
     890:	08002c50 	stmdaeq	r0, {r4, r6, sl, fp, sp}
     894:	00000024 	andeq	r0, r0, r4, lsr #32
     898:	83080e41 	movwhi	r0, #36417	; 0x8e41
     89c:	00018e02 	andeq	r8, r1, r2, lsl #28
     8a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     8a4:	0000058c 	andeq	r0, r0, ip, lsl #11
     8a8:	08002c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, sp}
     8ac:	00000074 	andeq	r0, r0, r4, ror r0
     8b0:	83180e41 	tsthi	r8, #1040	; 0x410
     8b4:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     8b8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     8bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     8c0:	0000000c 	andeq	r0, r0, ip
     8c4:	0000058c 	andeq	r0, r0, ip, lsl #11
     8c8:	08002ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, sp}
     8cc:	0000000e 	andeq	r0, r0, lr
     8d0:	0000000c 	andeq	r0, r0, ip
     8d4:	0000058c 	andeq	r0, r0, ip, lsl #11
     8d8:	08002cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, sp}
     8dc:	00000006 	andeq	r0, r0, r6
     8e0:	0000000c 	andeq	r0, r0, ip
     8e4:	0000058c 	andeq	r0, r0, ip, lsl #11
     8e8:	08002d00 	stmdaeq	r0, {r8, sl, fp, sp}
     8ec:	00000006 	andeq	r0, r0, r6
     8f0:	0000000c 	andeq	r0, r0, ip
     8f4:	0000058c 	andeq	r0, r0, ip, lsl #11
     8f8:	08002d08 	stmdaeq	r0, {r3, r8, sl, fp, sp}
     8fc:	0000000c 	andeq	r0, r0, ip
     900:	0000000c 	andeq	r0, r0, ip
     904:	0000058c 	andeq	r0, r0, ip, lsl #11
     908:	08002d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, sp}
     90c:	00000024 	andeq	r0, r0, r4, lsr #32
     910:	0000001c 	andeq	r0, r0, ip, lsl r0
     914:	0000058c 	andeq	r0, r0, ip, lsl #11
     918:	08002d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, sp}
     91c:	00000078 	andeq	r0, r0, r8, ror r0
     920:	83180e41 	tsthi	r8, #1040	; 0x410
     924:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     928:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     92c:	00018e02 	andeq	r8, r1, r2, lsl #28
     930:	00000018 	andeq	r0, r0, r8, lsl r0
     934:	0000058c 	andeq	r0, r0, ip, lsl #11
     938:	08002db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, sp}
     93c:	00000052 	andeq	r0, r0, r2, asr r0
     940:	83100e41 	tsthi	r0, #1040	; 0x410
     944:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     948:	00018e02 	andeq	r8, r1, r2, lsl #28
     94c:	0000000c 	andeq	r0, r0, ip
     950:	0000058c 	andeq	r0, r0, ip, lsl #11
     954:	08002e04 	stmdaeq	r0, {r2, r9, sl, fp, sp}
     958:	0000001a 	andeq	r0, r0, sl, lsl r0
     95c:	0000000c 	andeq	r0, r0, ip
     960:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     964:	7c020001 	stcvc	0, cr0, [r2], {1}
     968:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     96c:	00000020 	andeq	r0, r0, r0, lsr #32
     970:	0000095c 	andeq	r0, r0, ip, asr r9
     974:	08002e20 	stmdaeq	r0, {r5, r9, sl, fp, sp}
     978:	000000b2 	strheq	r0, [r0], -r2
     97c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
     980:	86058506 	strhi	r8, [r5], -r6, lsl #10
     984:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     988:	45018e02 	strmi	r8, [r1, #-3586]	; 0xe02
     98c:	0000280e 	andeq	r2, r0, lr, lsl #16
     990:	00000024 	andeq	r0, r0, r4, lsr #32
     994:	0000095c 	andeq	r0, r0, ip, asr r9
     998:	08002ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, sp}
     99c:	000000ac 	andeq	r0, r0, ip, lsr #1
     9a0:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
     9a4:	86088509 	strhi	r8, [r8], -r9, lsl #10
     9a8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     9ac:	8a048905 	bhi	122dc8 <_Min_Stack_Size+0x1229c8>
     9b0:	8e028b03 	vmlahi.f64	d8, d2, d3
     9b4:	300e4201 	andcc	r4, lr, r1, lsl #4
     9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9bc:	0000095c 	andeq	r0, r0, ip, asr r9
     9c0:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
     9c4:	00000052 	andeq	r0, r0, r2, asr r0
     9c8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     9cc:	86038504 	strhi	r8, [r3], -r4, lsl #10
     9d0:	45018e02 	strmi	r8, [r1, #-3586]	; 0xe02
     9d4:	0000200e 	andeq	r2, r0, lr
     9d8:	00000024 	andeq	r0, r0, r4, lsr #32
     9dc:	0000095c 	andeq	r0, r0, ip, asr r9
     9e0:	08002fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, sp}
     9e4:	0000031c 	andeq	r0, r0, ip, lsl r3
     9e8:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
     9ec:	86088509 	strhi	r8, [r8], -r9, lsl #10
     9f0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     9f4:	8a048905 	bhi	122e10 <_Min_Stack_Size+0x122a10>
     9f8:	8e028b03 	vmlahi.f64	d8, d2, d3
     9fc:	500e4301 	andpl	r4, lr, r1, lsl #6
     a00:	00000014 	andeq	r0, r0, r4, lsl r0
     a04:	0000095c 	andeq	r0, r0, ip, asr r9
     a08:	080032f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, sp}
     a0c:	00000018 	andeq	r0, r0, r8, lsl r0
     a10:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     a14:	00018e02 	andeq	r8, r1, r2, lsl #28
     a18:	0000000c 	andeq	r0, r0, ip
     a1c:	0000095c 	andeq	r0, r0, ip, asr r9
     a20:	08003308 	stmdaeq	r0, {r3, r8, r9, ip, sp}
     a24:	00000004 	andeq	r0, r0, r4
     a28:	0000000c 	andeq	r0, r0, ip
     a2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a30:	7c020001 	stcvc	0, cr0, [r2], {1}
     a34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a38:	0000000c 	andeq	r0, r0, ip
     a3c:	00000a28 	andeq	r0, r0, r8, lsr #20
     a40:	0800330c 	stmdaeq	r0, {r2, r3, r8, r9, ip, sp}
     a44:	00000018 	andeq	r0, r0, r8, lsl r0
     a48:	0000000c 	andeq	r0, r0, ip
     a4c:	00000a28 	andeq	r0, r0, r8, lsr #20
     a50:	08003328 	stmdaeq	r0, {r3, r5, r8, r9, ip, sp}
     a54:	0000000e 	andeq	r0, r0, lr
     a58:	00000014 	andeq	r0, r0, r4, lsl r0
     a5c:	00000a28 	andeq	r0, r0, r8, lsr #20
     a60:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
     a64:	0000002c 	andeq	r0, r0, ip, lsr #32
     a68:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     a6c:	00018502 	andeq	r8, r1, r2, lsl #10
     a70:	0000000c 	andeq	r0, r0, ip
     a74:	00000a28 	andeq	r0, r0, r8, lsr #20
     a78:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
     a7c:	00000020 	andeq	r0, r0, r0, lsr #32
     a80:	0000000c 	andeq	r0, r0, ip
     a84:	00000a28 	andeq	r0, r0, r8, lsr #20
     a88:	08003388 	stmdaeq	r0, {r3, r7, r8, r9, ip, sp}
     a8c:	00000018 	andeq	r0, r0, r8, lsl r0
     a90:	0000000c 	andeq	r0, r0, ip
     a94:	00000a28 	andeq	r0, r0, r8, lsr #20
     a98:	080033a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp}
     a9c:	00000010 	andeq	r0, r0, r0, lsl r0
     aa0:	00000014 	andeq	r0, r0, r4, lsl r0
     aa4:	00000a28 	andeq	r0, r0, r8, lsr #20
     aa8:	080033b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, sp}
     aac:	0000001c 	andeq	r0, r0, ip, lsl r0
     ab0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     ab4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ab8:	00000014 	andeq	r0, r0, r4, lsl r0
     abc:	00000a28 	andeq	r0, r0, r8, lsr #20
     ac0:	080033cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp}
     ac4:	0000001a 	andeq	r0, r0, sl, lsl r0
     ac8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     acc:	00018e02 	andeq	r8, r1, r2, lsl #28
     ad0:	00000014 	andeq	r0, r0, r4, lsl r0
     ad4:	00000a28 	andeq	r0, r0, r8, lsr #20
     ad8:	080033e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip, sp}
     adc:	0000001e 	andeq	r0, r0, lr, lsl r0
     ae0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     ae4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ae8:	0000000c 	andeq	r0, r0, ip
     aec:	00000a28 	andeq	r0, r0, r8, lsr #20
     af0:	08003408 	stmdaeq	r0, {r3, sl, ip, sp}
     af4:	00000006 	andeq	r0, r0, r6
     af8:	00000014 	andeq	r0, r0, r4, lsl r0
     afc:	00000a28 	andeq	r0, r0, r8, lsr #20
     b00:	08003410 	stmdaeq	r0, {r4, sl, ip, sp}
     b04:	00000024 	andeq	r0, r0, r4, lsr #32
     b08:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b0c:	00018e02 	andeq	r8, r1, r2, lsl #28
     b10:	0000000c 	andeq	r0, r0, ip
     b14:	00000a28 	andeq	r0, r0, r8, lsr #20
     b18:	08003434 	stmdaeq	r0, {r2, r4, r5, sl, ip, sp}
     b1c:	00000058 	andeq	r0, r0, r8, asr r0
     b20:	00000014 	andeq	r0, r0, r4, lsl r0
     b24:	00000a28 	andeq	r0, r0, r8, lsr #20
     b28:	0800348c 	stmdaeq	r0, {r2, r3, r7, sl, ip, sp}
     b2c:	00000024 	andeq	r0, r0, r4, lsr #32
     b30:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b34:	00018e02 	andeq	r8, r1, r2, lsl #28
     b38:	0000000c 	andeq	r0, r0, ip
     b3c:	00000a28 	andeq	r0, r0, r8, lsr #20
     b40:	080034b0 	stmdaeq	r0, {r4, r5, r7, sl, ip, sp}
     b44:	00000032 	andeq	r0, r0, r2, lsr r0
     b48:	00000018 	andeq	r0, r0, r8, lsl r0
     b4c:	00000a28 	andeq	r0, r0, r8, lsr #20
     b50:	080034e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, sp}
     b54:	000000bc 	strheq	r0, [r0], -ip
     b58:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     b5c:	45018e02 	strmi	r8, [r1, #-3586]	; 0xe02
     b60:	0000100e 	andeq	r1, r0, lr
     b64:	00000014 	andeq	r0, r0, r4, lsl r0
     b68:	00000a28 	andeq	r0, r0, r8, lsr #20
     b6c:	080035a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, sp}
     b70:	0000004c 	andeq	r0, r0, ip, asr #32
     b74:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b78:	00018e02 	andeq	r8, r1, r2, lsl #28
     b7c:	0000000c 	andeq	r0, r0, ip
     b80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b84:	7c020001 	stcvc	0, cr0, [r2], {1}
     b88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b8c:	00000018 	andeq	r0, r0, r8, lsl r0
     b90:	00000b7c 	andeq	r0, r0, ip, ror fp
     b94:	080035ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, sp}
     b98:	00000060 	andeq	r0, r0, r0, rrx
     b9c:	83100e41 	tsthi	r0, #1040	; 0x410
     ba0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     ba4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ba8:	00000014 	andeq	r0, r0, r4, lsl r0
     bac:	00000b7c 	andeq	r0, r0, ip, ror fp
     bb0:	0800364c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp}
     bb4:	0000000c 	andeq	r0, r0, ip
     bb8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bbc:	00018e02 	andeq	r8, r1, r2, lsl #28
     bc0:	0000000c 	andeq	r0, r0, ip
     bc4:	00000b7c 	andeq	r0, r0, ip, ror fp
     bc8:	08003658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, sp}
     bcc:	0000000e 	andeq	r0, r0, lr
     bd0:	0000000c 	andeq	r0, r0, ip
     bd4:	00000b7c 	andeq	r0, r0, ip, ror fp
     bd8:	08003668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, sp}
     bdc:	00000014 	andeq	r0, r0, r4, lsl r0
     be0:	0000000c 	andeq	r0, r0, ip
     be4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     be8:	7c020001 	stcvc	0, cr0, [r2], {1}
     bec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bf0:	0000000c 	andeq	r0, r0, ip
     bf4:	00000be0 	andeq	r0, r0, r0, ror #23
     bf8:	0800367c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip, sp}
     bfc:	00000014 	andeq	r0, r0, r4, lsl r0
     c00:	00000018 	andeq	r0, r0, r8, lsl r0
     c04:	00000be0 	andeq	r0, r0, r0, ror #23
     c08:	08003690 	stmdaeq	r0, {r4, r7, r9, sl, ip, sp}
     c0c:	00000080 	andeq	r0, r0, r0, lsl #1
     c10:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
     c14:	86028503 	strhi	r8, [r2], -r3, lsl #10
     c18:	00000001 	andeq	r0, r0, r1
     c1c:	0000000c 	andeq	r0, r0, ip
     c20:	00000be0 	andeq	r0, r0, r0, ror #23
     c24:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
     c28:	00000016 	andeq	r0, r0, r6, lsl r0
     c2c:	0000000c 	andeq	r0, r0, ip
     c30:	00000be0 	andeq	r0, r0, r0, ror #23
     c34:	08003728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp}
     c38:	0000001a 	andeq	r0, r0, sl, lsl r0
     c3c:	0000000c 	andeq	r0, r0, ip
     c40:	00000be0 	andeq	r0, r0, r0, ror #23
     c44:	08003744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip, sp}
     c48:	0000001a 	andeq	r0, r0, sl, lsl r0
     c4c:	0000000c 	andeq	r0, r0, ip
     c50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c54:	7c020001 	stcvc	0, cr0, [r2], {1}
     c58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c5c:	00000014 	andeq	r0, r0, r4, lsl r0
     c60:	00000c4c 	andeq	r0, r0, ip, asr #24
     c64:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
     c68:	0000016e 	andeq	r0, r0, lr, ror #2
     c6c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c70:	00018e02 	andeq	r8, r1, r2, lsl #28
     c74:	00000020 	andeq	r0, r0, r0, lsr #32
     c78:	00000c4c 	andeq	r0, r0, ip, asr #24
     c7c:	080038d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, sp}
     c80:	000000c0 	andeq	r0, r0, r0, asr #1
     c84:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xe43
     c88:	86068507 	strhi	r8, [r6], -r7, lsl #10
     c8c:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     c90:	8a028903 	bhi	a30a4 <_Min_Stack_Size+0xa2ca4>
     c94:	00000001 	andeq	r0, r0, r1
     c98:	0000000c 	andeq	r0, r0, ip
     c9c:	00000c4c 	andeq	r0, r0, ip, asr #24
     ca0:	08003990 	stmdaeq	r0, {r4, r7, r8, fp, ip, sp}
     ca4:	00000012 	andeq	r0, r0, r2, lsl r0
     ca8:	00000010 	andeq	r0, r0, r0, lsl r0
     cac:	00000c4c 	andeq	r0, r0, ip, asr #24
     cb0:	080039a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, ip, sp}
     cb4:	00000024 	andeq	r0, r0, r4, lsr #32
     cb8:	00080e41 	andeq	r0, r8, r1, asr #28
     cbc:	0000000c 	andeq	r0, r0, ip
     cc0:	00000c4c 	andeq	r0, r0, ip, asr #24
     cc4:	080039c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip, sp}
     cc8:	0000000c 	andeq	r0, r0, ip
     ccc:	0000000c 	andeq	r0, r0, ip
     cd0:	00000c4c 	andeq	r0, r0, ip, asr #24
     cd4:	080039d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp}
     cd8:	00000006 	andeq	r0, r0, r6
     cdc:	0000000c 	andeq	r0, r0, ip
     ce0:	00000c4c 	andeq	r0, r0, ip, asr #24
     ce4:	080039dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, ip, sp}
     ce8:	0000000c 	andeq	r0, r0, ip
     cec:	0000000c 	andeq	r0, r0, ip
     cf0:	00000c4c 	andeq	r0, r0, ip, asr #24
     cf4:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
     cf8:	00000006 	andeq	r0, r0, r6
     cfc:	0000000c 	andeq	r0, r0, ip
     d00:	00000c4c 	andeq	r0, r0, ip, asr #24
     d04:	080039f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, sp}
     d08:	00000004 	andeq	r0, r0, r4
     d0c:	0000000c 	andeq	r0, r0, ip
     d10:	00000c4c 	andeq	r0, r0, ip, asr #24
     d14:	080039f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, sp}
     d18:	00000004 	andeq	r0, r0, r4
     d1c:	0000000c 	andeq	r0, r0, ip
     d20:	00000c4c 	andeq	r0, r0, ip, asr #24
     d24:	080039f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, sp}
     d28:	0000000a 	andeq	r0, r0, sl
     d2c:	0000000c 	andeq	r0, r0, ip
     d30:	00000c4c 	andeq	r0, r0, ip, asr #24
     d34:	08003a04 	stmdaeq	r0, {r2, r9, fp, ip, sp}
     d38:	00000004 	andeq	r0, r0, r4
     d3c:	0000000c 	andeq	r0, r0, ip
     d40:	00000c4c 	andeq	r0, r0, ip, asr #24
     d44:	08003a08 	stmdaeq	r0, {r3, r9, fp, ip, sp}
     d48:	00000008 	andeq	r0, r0, r8
     d4c:	00000014 	andeq	r0, r0, r4, lsl r0
     d50:	00000c4c 	andeq	r0, r0, ip, asr #24
     d54:	08003a10 	stmdaeq	r0, {r4, r9, fp, ip, sp}
     d58:	00000028 	andeq	r0, r0, r8, lsr #32
     d5c:	84040e46 	strhi	r0, [r4], #-3654	; 0xe46
     d60:	00000001 	andeq	r0, r0, r1
     d64:	0000000c 	andeq	r0, r0, ip
     d68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d6c:	7c020001 	stcvc	0, cr0, [r2], {1}
     d70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d74:	00000014 	andeq	r0, r0, r4, lsl r0
     d78:	00000d64 	andeq	r0, r0, r4, ror #26
     d7c:	08003a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip, sp}
     d80:	00000054 	andeq	r0, r0, r4, asr r0
     d84:	84080e49 	strhi	r0, [r8], #-3657	; 0xe49
     d88:	00018502 	andeq	r8, r1, r2, lsl #10
     d8c:	0000000c 	andeq	r0, r0, ip
     d90:	00000d64 	andeq	r0, r0, r4, ror #26
     d94:	08003a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, sp}
     d98:	00000010 	andeq	r0, r0, r0, lsl r0
     d9c:	00000010 	andeq	r0, r0, r0, lsl r0
     da0:	00000d64 	andeq	r0, r0, r4, ror #26
     da4:	08003a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip, sp}
     da8:	0000003e 	andeq	r0, r0, lr, lsr r0
     dac:	00080e41 	andeq	r0, r8, r1, asr #28
     db0:	0000000c 	andeq	r0, r0, ip
     db4:	00000d64 	andeq	r0, r0, r4, ror #26
     db8:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
     dbc:	00000016 	andeq	r0, r0, r6, lsl r0
     dc0:	0000000c 	andeq	r0, r0, ip
     dc4:	00000d64 	andeq	r0, r0, r4, ror #26
     dc8:	08003af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, sp}
     dcc:	0000000a 	andeq	r0, r0, sl
     dd0:	0000000c 	andeq	r0, r0, ip
     dd4:	00000d64 	andeq	r0, r0, r4, ror #26
     dd8:	08003b00 	stmdaeq	r0, {r8, r9, fp, ip, sp}
     ddc:	00000022 	andeq	r0, r0, r2, lsr #32
     de0:	0000000c 	andeq	r0, r0, ip
     de4:	00000d64 	andeq	r0, r0, r4, ror #26
     de8:	08003b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip, sp}
     dec:	0000000c 	andeq	r0, r0, ip
     df0:	00000014 	andeq	r0, r0, r4, lsl r0
     df4:	00000d64 	andeq	r0, r0, r4, ror #26
     df8:	08003b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip, sp}
     dfc:	00000026 	andeq	r0, r0, r6, lsr #32
     e00:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
     e04:	00000001 	andeq	r0, r0, r1
     e08:	0000000c 	andeq	r0, r0, ip
     e0c:	00000d64 	andeq	r0, r0, r4, ror #26
     e10:	08003b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip, sp}
     e14:	0000000a 	andeq	r0, r0, sl
     e18:	0000000c 	andeq	r0, r0, ip
     e1c:	00000d64 	andeq	r0, r0, r4, ror #26
     e20:	08003b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, sp}
     e24:	00000018 	andeq	r0, r0, r8, lsl r0
     e28:	0000000c 	andeq	r0, r0, ip
     e2c:	00000d64 	andeq	r0, r0, r4, ror #26
     e30:	08003b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, sp}
     e34:	0000000a 	andeq	r0, r0, sl
     e38:	0000000c 	andeq	r0, r0, ip
     e3c:	00000d64 	andeq	r0, r0, r4, ror #26
     e40:	08003b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip, sp}
     e44:	00000018 	andeq	r0, r0, r8, lsl r0
     e48:	0000000c 	andeq	r0, r0, ip
     e4c:	00000d64 	andeq	r0, r0, r4, ror #26
     e50:	08003ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, ip, sp}
     e54:	0000000a 	andeq	r0, r0, sl
     e58:	0000000c 	andeq	r0, r0, ip
     e5c:	00000d64 	andeq	r0, r0, r4, ror #26
     e60:	08003bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip, sp}
     e64:	0000000a 	andeq	r0, r0, sl
     e68:	0000000c 	andeq	r0, r0, ip
     e6c:	00000d64 	andeq	r0, r0, r4, ror #26
     e70:	08003bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, ip, sp}
     e74:	00000016 	andeq	r0, r0, r6, lsl r0
     e78:	0000000c 	andeq	r0, r0, ip
     e7c:	00000d64 	andeq	r0, r0, r4, ror #26
     e80:	08003bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, sp}
     e84:	00000016 	andeq	r0, r0, r6, lsl r0
     e88:	0000000c 	andeq	r0, r0, ip
     e8c:	00000d64 	andeq	r0, r0, r4, ror #26
     e90:	08003be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, ip, sp}
     e94:	00000014 	andeq	r0, r0, r4, lsl r0
     e98:	0000000c 	andeq	r0, r0, ip
     e9c:	00000d64 	andeq	r0, r0, r4, ror #26
     ea0:	08003bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
     ea4:	00000010 	andeq	r0, r0, r0, lsl r0
     ea8:	0000000c 	andeq	r0, r0, ip
     eac:	00000d64 	andeq	r0, r0, r4, ror #26
     eb0:	08003c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip, sp}
     eb4:	00000014 	andeq	r0, r0, r4, lsl r0
     eb8:	0000000c 	andeq	r0, r0, ip
     ebc:	00000d64 	andeq	r0, r0, r4, ror #26
     ec0:	08003c20 	stmdaeq	r0, {r5, sl, fp, ip, sp}
     ec4:	00000014 	andeq	r0, r0, r4, lsl r0
     ec8:	0000000c 	andeq	r0, r0, ip
     ecc:	00000d64 	andeq	r0, r0, r4, ror #26
     ed0:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
     ed4:	00000016 	andeq	r0, r0, r6, lsl r0
     ed8:	00000014 	andeq	r0, r0, r4, lsl r0
     edc:	00000d64 	andeq	r0, r0, r4, ror #26
     ee0:	08003c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, sp}
     ee4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     ee8:	84040e45 	strhi	r0, [r4], #-3653	; 0xe45
     eec:	00000001 	andeq	r0, r0, r1
     ef0:	0000000c 	andeq	r0, r0, ip
     ef4:	00000d64 	andeq	r0, r0, r4, ror #26
     ef8:	08003cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, ip, sp}
     efc:	00000038 	andeq	r0, r0, r8, lsr r0
     f00:	0000000c 	andeq	r0, r0, ip
     f04:	00000d64 	andeq	r0, r0, r4, ror #26
     f08:	08003d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp, ip, sp}
     f0c:	0000000c 	andeq	r0, r0, ip
     f10:	0000000c 	andeq	r0, r0, ip
     f14:	00000d64 	andeq	r0, r0, r4, ror #26
     f18:	08003d40 	stmdaeq	r0, {r6, r8, sl, fp, ip, sp}
     f1c:	0000000c 	andeq	r0, r0, ip
     f20:	0000000c 	andeq	r0, r0, ip
     f24:	00000d64 	andeq	r0, r0, r4, ror #26
     f28:	08003d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip, sp}
     f2c:	0000000c 	andeq	r0, r0, ip
     f30:	0000000c 	andeq	r0, r0, ip
     f34:	00000d64 	andeq	r0, r0, r4, ror #26
     f38:	08003d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, sp}
     f3c:	0000001a 	andeq	r0, r0, sl, lsl r0
     f40:	0000000c 	andeq	r0, r0, ip
     f44:	00000d64 	andeq	r0, r0, r4, ror #26
     f48:	08003d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip, sp}
     f4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f50:	0000000c 	andeq	r0, r0, ip
     f54:	00000d64 	andeq	r0, r0, r4, ror #26
     f58:	08003d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip, sp}
     f5c:	00000018 	andeq	r0, r0, r8, lsl r0
     f60:	0000000c 	andeq	r0, r0, ip
     f64:	00000d64 	andeq	r0, r0, r4, ror #26
     f68:	08003da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, sp}
     f6c:	00000018 	andeq	r0, r0, r8, lsl r0
     f70:	0000000c 	andeq	r0, r0, ip
     f74:	00000d64 	andeq	r0, r0, r4, ror #26
     f78:	08003dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, sp}
     f7c:	00000018 	andeq	r0, r0, r8, lsl r0
     f80:	0000000c 	andeq	r0, r0, ip
     f84:	00000d64 	andeq	r0, r0, r4, ror #26
     f88:	08003dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, sp}
     f8c:	0000000c 	andeq	r0, r0, ip
     f90:	0000000c 	andeq	r0, r0, ip
     f94:	00000d64 	andeq	r0, r0, r4, ror #26
     f98:	08003de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, sp}
     f9c:	0000001a 	andeq	r0, r0, sl, lsl r0
     fa0:	0000000c 	andeq	r0, r0, ip
     fa4:	00000d64 	andeq	r0, r0, r4, ror #26
     fa8:	08003e00 	stmdaeq	r0, {r9, sl, fp, ip, sp}
     fac:	0000001a 	andeq	r0, r0, sl, lsl r0
     fb0:	0000000c 	andeq	r0, r0, ip
     fb4:	00000d64 	andeq	r0, r0, r4, ror #26
     fb8:	08003e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, ip, sp}
     fbc:	0000001a 	andeq	r0, r0, sl, lsl r0
     fc0:	0000000c 	andeq	r0, r0, ip
     fc4:	00000d64 	andeq	r0, r0, r4, ror #26
     fc8:	08003e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip, sp}
     fcc:	0000001a 	andeq	r0, r0, sl, lsl r0
     fd0:	0000000c 	andeq	r0, r0, ip
     fd4:	00000d64 	andeq	r0, r0, r4, ror #26
     fd8:	08003e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, sp}
     fdc:	0000001a 	andeq	r0, r0, sl, lsl r0
     fe0:	0000000c 	andeq	r0, r0, ip
     fe4:	00000d64 	andeq	r0, r0, r4, ror #26
     fe8:	08003e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, ip, sp}
     fec:	0000001a 	andeq	r0, r0, sl, lsl r0
     ff0:	0000000c 	andeq	r0, r0, ip
     ff4:	00000d64 	andeq	r0, r0, r4, ror #26
     ff8:	08003e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, ip, sp}
     ffc:	0000001a 	andeq	r0, r0, sl, lsl r0
    1000:	0000000c 	andeq	r0, r0, ip
    1004:	00000d64 	andeq	r0, r0, r4, ror #26
    1008:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
    100c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1010:	0000000c 	andeq	r0, r0, ip
    1014:	00000d64 	andeq	r0, r0, r4, ror #26
    1018:	08003ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, ip, sp}
    101c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1020:	0000000c 	andeq	r0, r0, ip
    1024:	00000d64 	andeq	r0, r0, r4, ror #26
    1028:	08003ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, sp}
    102c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1030:	0000000c 	andeq	r0, r0, ip
    1034:	00000d64 	andeq	r0, r0, r4, ror #26
    1038:	08003efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
    103c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1040:	0000000c 	andeq	r0, r0, ip
    1044:	00000d64 	andeq	r0, r0, r4, ror #26
    1048:	08003f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, sp}
    104c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1050:	0000000c 	andeq	r0, r0, ip
    1054:	00000d64 	andeq	r0, r0, r4, ror #26
    1058:	08003f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, ip, sp}
    105c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1060:	0000000c 	andeq	r0, r0, ip
    1064:	00000d64 	andeq	r0, r0, r4, ror #26
    1068:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
    106c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1070:	0000000c 	andeq	r0, r0, ip
    1074:	00000d64 	andeq	r0, r0, r4, ror #26
    1078:	08003f6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, ip, sp}
    107c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1080:	0000000c 	andeq	r0, r0, ip
    1084:	00000d64 	andeq	r0, r0, r4, ror #26
    1088:	08003f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip, sp}
    108c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1090:	0000000c 	andeq	r0, r0, ip
    1094:	00000d64 	andeq	r0, r0, r4, ror #26
    1098:	08003fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip, sp}
    109c:	0000003c 	andeq	r0, r0, ip, lsr r0
    10a0:	0000000c 	andeq	r0, r0, ip
    10a4:	00000d64 	andeq	r0, r0, r4, ror #26
    10a8:	08003fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, sp}
    10ac:	00000012 	andeq	r0, r0, r2, lsl r0
    10b0:	0000000c 	andeq	r0, r0, ip
    10b4:	00000d64 	andeq	r0, r0, r4, ror #26
    10b8:	08003ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    10bc:	00000014 	andeq	r0, r0, r4, lsl r0
    10c0:	0000000c 	andeq	r0, r0, ip
    10c4:	00000d64 	andeq	r0, r0, r4, ror #26
    10c8:	08004008 	stmdaeq	r0, {r3, lr}
    10cc:	0000000c 	andeq	r0, r0, ip
    10d0:	0000000c 	andeq	r0, r0, ip
    10d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10d8:	7c020001 	stcvc	0, cr0, [r2], {1}
    10dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10e0:	00000014 	andeq	r0, r0, r4, lsl r0
    10e4:	000010d0 	ldrdeq	r1, [r0], -r0
    10e8:	08004014 	stmdaeq	r0, {r2, r4, lr}
    10ec:	0000011c 	andeq	r0, r0, ip, lsl r1
    10f0:	83080e41 	movwhi	r0, #36417	; 0x8e41
    10f4:	00018e02 	andeq	r8, r1, r2, lsl #28
    10f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    10fc:	000010d0 	ldrdeq	r1, [r0], -r0
    1100:	08004130 	stmdaeq	r0, {r4, r5, r8, lr}
    1104:	000000c8 	andeq	r0, r0, r8, asr #1
    1108:	84140e46 	ldrhi	r0, [r4], #-3654	; 0xe46
    110c:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1110:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1114:	280e5c01 	stmdacs	lr, {r0, sl, fp, ip, lr}
    1118:	0000000c 	andeq	r0, r0, ip
    111c:	000010d0 	ldrdeq	r1, [r0], -r0
    1120:	080041f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, lr}
    1124:	00000016 	andeq	r0, r0, r6, lsl r0
    1128:	00000014 	andeq	r0, r0, r4, lsl r0
    112c:	000010d0 	ldrdeq	r1, [r0], -r0
    1130:	08004210 	stmdaeq	r0, {r4, r9, lr}
    1134:	00000024 	andeq	r0, r0, r4, lsr #32
    1138:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    113c:	00018502 	andeq	r8, r1, r2, lsl #10
    1140:	0000000c 	andeq	r0, r0, ip
    1144:	000010d0 	ldrdeq	r1, [r0], -r0
    1148:	08004234 	stmdaeq	r0, {r2, r4, r5, r9, lr}
    114c:	0000000c 	andeq	r0, r0, ip
    1150:	0000000c 	andeq	r0, r0, ip
    1154:	000010d0 	ldrdeq	r1, [r0], -r0
    1158:	08004240 	stmdaeq	r0, {r6, r9, lr}
    115c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1160:	0000000c 	andeq	r0, r0, ip
    1164:	000010d0 	ldrdeq	r1, [r0], -r0
    1168:	0800425c 	stmdaeq	r0, {r2, r3, r4, r6, r9, lr}
    116c:	00000012 	andeq	r0, r0, r2, lsl r0
    1170:	0000000c 	andeq	r0, r0, ip
    1174:	000010d0 	ldrdeq	r1, [r0], -r0
    1178:	08004270 	stmdaeq	r0, {r4, r5, r6, r9, lr}
    117c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1180:	0000000c 	andeq	r0, r0, ip
    1184:	000010d0 	ldrdeq	r1, [r0], -r0
    1188:	0800428c 	stmdaeq	r0, {r2, r3, r7, r9, lr}
    118c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1190:	0000000c 	andeq	r0, r0, ip
    1194:	000010d0 	ldrdeq	r1, [r0], -r0
    1198:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
    119c:	00000008 	andeq	r0, r0, r8
    11a0:	0000000c 	andeq	r0, r0, ip
    11a4:	000010d0 	ldrdeq	r1, [r0], -r0
    11a8:	080042b0 	stmdaeq	r0, {r4, r5, r7, r9, lr}
    11ac:	00000008 	andeq	r0, r0, r8
    11b0:	0000000c 	andeq	r0, r0, ip
    11b4:	000010d0 	ldrdeq	r1, [r0], -r0
    11b8:	080042b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, lr}
    11bc:	00000016 	andeq	r0, r0, r6, lsl r0
    11c0:	0000000c 	andeq	r0, r0, ip
    11c4:	000010d0 	ldrdeq	r1, [r0], -r0
    11c8:	080042d0 	stmdaeq	r0, {r4, r6, r7, r9, lr}
    11cc:	0000001a 	andeq	r0, r0, sl, lsl r0
    11d0:	0000000c 	andeq	r0, r0, ip
    11d4:	000010d0 	ldrdeq	r1, [r0], -r0
    11d8:	080042ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, lr}
    11dc:	00000016 	andeq	r0, r0, r6, lsl r0
    11e0:	0000000c 	andeq	r0, r0, ip
    11e4:	000010d0 	ldrdeq	r1, [r0], -r0
    11e8:	08004304 	stmdaeq	r0, {r2, r8, r9, lr}
    11ec:	00000016 	andeq	r0, r0, r6, lsl r0
    11f0:	0000000c 	andeq	r0, r0, ip
    11f4:	000010d0 	ldrdeq	r1, [r0], -r0
    11f8:	0800431c 	stmdaeq	r0, {r2, r3, r4, r8, r9, lr}
    11fc:	0000001a 	andeq	r0, r0, sl, lsl r0
    1200:	0000000c 	andeq	r0, r0, ip
    1204:	000010d0 	ldrdeq	r1, [r0], -r0
    1208:	08004338 	stmdaeq	r0, {r3, r4, r5, r8, r9, lr}
    120c:	0000000c 	andeq	r0, r0, ip
    1210:	0000000c 	andeq	r0, r0, ip
    1214:	000010d0 	ldrdeq	r1, [r0], -r0
    1218:	08004344 	stmdaeq	r0, {r2, r6, r8, r9, lr}
    121c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1220:	0000000c 	andeq	r0, r0, ip
    1224:	000010d0 	ldrdeq	r1, [r0], -r0
    1228:	08004360 	stmdaeq	r0, {r5, r6, r8, r9, lr}
    122c:	00000012 	andeq	r0, r0, r2, lsl r0
    1230:	0000000c 	andeq	r0, r0, ip
    1234:	000010d0 	ldrdeq	r1, [r0], -r0
    1238:	08004374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, lr}
    123c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1240:	0000000c 	andeq	r0, r0, ip
    1244:	000010d0 	ldrdeq	r1, [r0], -r0
    1248:	08004390 	stmdaeq	r0, {r4, r7, r8, r9, lr}
    124c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1250:	0000000c 	andeq	r0, r0, ip
    1254:	000010d0 	ldrdeq	r1, [r0], -r0
    1258:	080043ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, lr}
    125c:	00000016 	andeq	r0, r0, r6, lsl r0
    1260:	0000000c 	andeq	r0, r0, ip
    1264:	000010d0 	ldrdeq	r1, [r0], -r0
    1268:	080043c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, lr}
    126c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1270:	0000000c 	andeq	r0, r0, ip
    1274:	000010d0 	ldrdeq	r1, [r0], -r0
    1278:	080043e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, lr}
    127c:	00000014 	andeq	r0, r0, r4, lsl r0
    1280:	00000014 	andeq	r0, r0, r4, lsl r0
    1284:	000010d0 	ldrdeq	r1, [r0], -r0
    1288:	080043f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, lr}
    128c:	0000003a 	andeq	r0, r0, sl, lsr r0
    1290:	84040e43 	strhi	r0, [r4], #-3651	; 0xe43
    1294:	00000001 	andeq	r0, r0, r1
    1298:	0000000c 	andeq	r0, r0, ip
    129c:	000010d0 	ldrdeq	r1, [r0], -r0
    12a0:	08004430 	stmdaeq	r0, {r4, r5, sl, lr}
    12a4:	0000000c 	andeq	r0, r0, ip
    12a8:	0000000c 	andeq	r0, r0, ip
    12ac:	000010d0 	ldrdeq	r1, [r0], -r0
    12b0:	0800443c 	stmdaeq	r0, {r2, r3, r4, r5, sl, lr}
    12b4:	00000008 	andeq	r0, r0, r8
    12b8:	00000014 	andeq	r0, r0, r4, lsl r0
    12bc:	000010d0 	ldrdeq	r1, [r0], -r0
    12c0:	08004444 	stmdaeq	r0, {r2, r6, sl, lr}
    12c4:	0000004a 	andeq	r0, r0, sl, asr #32
    12c8:	84080e43 	strhi	r0, [r8], #-3651	; 0xe43
    12cc:	00018502 	andeq	r8, r1, r2, lsl #10
    12d0:	0000000c 	andeq	r0, r0, ip
    12d4:	000010d0 	ldrdeq	r1, [r0], -r0
    12d8:	08004490 	stmdaeq	r0, {r4, r7, sl, lr}
    12dc:	00000010 	andeq	r0, r0, r0, lsl r0
    12e0:	0000000c 	andeq	r0, r0, ip
    12e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12e8:	7c020001 	stcvc	0, cr0, [r2], {1}
    12ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12f0:	00000014 	andeq	r0, r0, r4, lsl r0
    12f4:	000012e0 	andeq	r1, r0, r0, ror #5
    12f8:	080044a0 	stmdaeq	r0, {r5, r7, sl, lr}
    12fc:	0000001a 	andeq	r0, r0, sl, lsl r0
    1300:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1304:	00018e02 	andeq	r8, r1, r2, lsl #28
    1308:	0000000c 	andeq	r0, r0, ip
    130c:	000012e0 	andeq	r1, r0, r0, ror #5
    1310:	080044bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, lr}
    1314:	0000000c 	andeq	r0, r0, ip
    1318:	0000000c 	andeq	r0, r0, ip
    131c:	000012e0 	andeq	r1, r0, r0, ror #5
    1320:	080044c8 	stmdaeq	r0, {r3, r6, r7, sl, lr}
    1324:	0000000a 	andeq	r0, r0, sl
    1328:	00000014 	andeq	r0, r0, r4, lsl r0
    132c:	000012e0 	andeq	r1, r0, r0, ror #5
    1330:	080044d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, lr}
    1334:	0000002e 	andeq	r0, r0, lr, lsr #32
    1338:	84040e49 	strhi	r0, [r4], #-3657	; 0xe49
    133c:	00000001 	andeq	r0, r0, r1
    1340:	0000000c 	andeq	r0, r0, ip
    1344:	000012e0 	andeq	r1, r0, r0, ror #5
    1348:	08004504 	stmdaeq	r0, {r2, r8, sl, lr}
    134c:	0000000a 	andeq	r0, r0, sl
    1350:	0000000c 	andeq	r0, r0, ip
    1354:	000012e0 	andeq	r1, r0, r0, ror #5
    1358:	08004510 	stmdaeq	r0, {r4, r8, sl, lr}
    135c:	0000000c 	andeq	r0, r0, ip
    1360:	0000000c 	andeq	r0, r0, ip
    1364:	000012e0 	andeq	r1, r0, r0, ror #5
    1368:	0800451c 	stmdaeq	r0, {r2, r3, r4, r8, sl, lr}
    136c:	00000010 	andeq	r0, r0, r0, lsl r0
    1370:	0000000c 	andeq	r0, r0, ip
    1374:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1378:	7c020001 	stcvc	0, cr0, [r2], {1}
    137c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1380:	00000014 	andeq	r0, r0, r4, lsl r0
    1384:	00001370 	andeq	r1, r0, r0, ror r3
    1388:	0800452c 	stmdaeq	r0, {r2, r3, r5, r8, sl, lr}
    138c:	00000070 	andeq	r0, r0, r0, ror r0
    1390:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
    1398:	0000001c 	andeq	r0, r0, ip, lsl r0
    139c:	00001370 	andeq	r1, r0, r0, ror r3
    13a0:	0800459c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, lr}
    13a4:	000000e8 	andeq	r0, r0, r8, ror #1
    13a8:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xe41
    13ac:	86048505 	strhi	r8, [r4], -r5, lsl #10
    13b0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    13b4:	280e4201 	stmdacs	lr, {r0, r9, lr}
    13b8:	00000014 	andeq	r0, r0, r4, lsl r0
    13bc:	00001370 	andeq	r1, r0, r0, ror r3
    13c0:	08004684 	stmdaeq	r0, {r2, r7, r9, sl, lr}
    13c4:	00000022 	andeq	r0, r0, r2, lsr #32
    13c8:	84040e42 	strhi	r0, [r4], #-3650	; 0xe42
    13cc:	00000001 	andeq	r0, r0, r1
    13d0:	0000000c 	andeq	r0, r0, ip
    13d4:	00001370 	andeq	r1, r0, r0, ror r3
    13d8:	080046a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, lr}
    13dc:	0000001a 	andeq	r0, r0, sl, lsl r0
    13e0:	0000000c 	andeq	r0, r0, ip
    13e4:	00001370 	andeq	r1, r0, r0, ror r3
    13e8:	080046c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, lr}
    13ec:	0000001a 	andeq	r0, r0, sl, lsl r0
    13f0:	0000000c 	andeq	r0, r0, ip
    13f4:	00001370 	andeq	r1, r0, r0, ror r3
    13f8:	080046e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, lr}
    13fc:	00000014 	andeq	r0, r0, r4, lsl r0
    1400:	0000000c 	andeq	r0, r0, ip
    1404:	00001370 	andeq	r1, r0, r0, ror r3
    1408:	080046f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, lr}
    140c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1410:	0000000c 	andeq	r0, r0, ip
    1414:	00001370 	andeq	r1, r0, r0, ror r3
    1418:	08004710 	stmdaeq	r0, {r4, r8, r9, sl, lr}
    141c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1420:	0000000c 	andeq	r0, r0, ip
    1424:	00001370 	andeq	r1, r0, r0, ror r3
    1428:	0800472c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, lr}
    142c:	00000012 	andeq	r0, r0, r2, lsl r0
    1430:	0000000c 	andeq	r0, r0, ip
    1434:	00001370 	andeq	r1, r0, r0, ror r3
    1438:	08004740 	stmdaeq	r0, {r6, r8, r9, sl, lr}
    143c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1440:	0000000c 	andeq	r0, r0, ip
    1444:	00001370 	andeq	r1, r0, r0, ror r3
    1448:	0800475c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, lr}
    144c:	00000014 	andeq	r0, r0, r4, lsl r0
    1450:	0000000c 	andeq	r0, r0, ip
    1454:	00001370 	andeq	r1, r0, r0, ror r3
    1458:	08004770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, lr}
    145c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1460:	0000000c 	andeq	r0, r0, ip
    1464:	00001370 	andeq	r1, r0, r0, ror r3
    1468:	0800478c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, lr}
    146c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1470:	0000000c 	andeq	r0, r0, ip
    1474:	00001370 	andeq	r1, r0, r0, ror r3
    1478:	080047a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, lr}
    147c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1480:	0000000c 	andeq	r0, r0, ip
    1484:	00001370 	andeq	r1, r0, r0, ror r3
    1488:	080047c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, lr}
    148c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1490:	0000000c 	andeq	r0, r0, ip
    1494:	00001370 	andeq	r1, r0, r0, ror r3
    1498:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
    149c:	0000001c 	andeq	r0, r0, ip, lsl r0
    14a0:	0000000c 	andeq	r0, r0, ip
    14a4:	00001370 	andeq	r1, r0, r0, ror r3
    14a8:	080047fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    14ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    14b0:	0000000c 	andeq	r0, r0, ip
    14b4:	00001370 	andeq	r1, r0, r0, ror r3
    14b8:	08004818 	stmdaeq	r0, {r3, r4, fp, lr}
    14bc:	0000001c 	andeq	r0, r0, ip, lsl r0
    14c0:	0000000c 	andeq	r0, r0, ip
    14c4:	00001370 	andeq	r1, r0, r0, ror r3
    14c8:	08004834 	stmdaeq	r0, {r2, r4, r5, fp, lr}
    14cc:	0000001a 	andeq	r0, r0, sl, lsl r0
    14d0:	0000000c 	andeq	r0, r0, ip
    14d4:	00001370 	andeq	r1, r0, r0, ror r3
    14d8:	08004850 	stmdaeq	r0, {r4, r6, fp, lr}
    14dc:	00000004 	andeq	r0, r0, r4
    14e0:	0000000c 	andeq	r0, r0, ip
    14e4:	00001370 	andeq	r1, r0, r0, ror r3
    14e8:	08004854 	stmdaeq	r0, {r2, r4, r6, fp, lr}
    14ec:	00000006 	andeq	r0, r0, r6
    14f0:	0000000c 	andeq	r0, r0, ip
    14f4:	00001370 	andeq	r1, r0, r0, ror r3
    14f8:	0800485c 	stmdaeq	r0, {r2, r3, r4, r6, fp, lr}
    14fc:	0000001a 	andeq	r0, r0, sl, lsl r0
    1500:	0000000c 	andeq	r0, r0, ip
    1504:	00001370 	andeq	r1, r0, r0, ror r3
    1508:	08004878 	stmdaeq	r0, {r3, r4, r5, r6, fp, lr}
    150c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1510:	0000000c 	andeq	r0, r0, ip
    1514:	00001370 	andeq	r1, r0, r0, ror r3
    1518:	08004894 	stmdaeq	r0, {r2, r4, r7, fp, lr}
    151c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1520:	0000000c 	andeq	r0, r0, ip
    1524:	00001370 	andeq	r1, r0, r0, ror r3
    1528:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
    152c:	00000008 	andeq	r0, r0, r8
    1530:	0000000c 	andeq	r0, r0, ip
    1534:	00001370 	andeq	r1, r0, r0, ror r3
    1538:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
    153c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1540:	0000000c 	andeq	r0, r0, ip
    1544:	00001370 	andeq	r1, r0, r0, ror r3
    1548:	080048d4 	stmdaeq	r0, {r2, r4, r6, r7, fp, lr}
    154c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1550:	00000010 	andeq	r0, r0, r0, lsl r0
    1554:	00001370 	andeq	r1, r0, r0, ror r3
    1558:	080048f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, lr}
    155c:	00000018 	andeq	r0, r0, r8, lsl r0
    1560:	00080e41 	andeq	r0, r8, r1, asr #28
    1564:	0000000c 	andeq	r0, r0, ip
    1568:	00001370 	andeq	r1, r0, r0, ror r3
    156c:	08004908 	stmdaeq	r0, {r3, r8, fp, lr}
    1570:	00000014 	andeq	r0, r0, r4, lsl r0
    1574:	0000000c 	andeq	r0, r0, ip
    1578:	00001370 	andeq	r1, r0, r0, ror r3
    157c:	0800491c 	stmdaeq	r0, {r2, r3, r4, r8, fp, lr}
    1580:	00000018 	andeq	r0, r0, r8, lsl r0
    1584:	0000000c 	andeq	r0, r0, ip
    1588:	00001370 	andeq	r1, r0, r0, ror r3
    158c:	08004934 	stmdaeq	r0, {r2, r4, r5, r8, fp, lr}
    1590:	00000010 	andeq	r0, r0, r0, lsl r0
    1594:	00000010 	andeq	r0, r0, r0, lsl r0
    1598:	00001370 	andeq	r1, r0, r0, ror r3
    159c:	08004944 	stmdaeq	r0, {r2, r6, r8, fp, lr}
    15a0:	00000036 	andeq	r0, r0, r6, lsr r0
    15a4:	00080e41 	andeq	r0, r8, r1, asr #28
    15a8:	0000000c 	andeq	r0, r0, ip
    15ac:	00001370 	andeq	r1, r0, r0, ror r3
    15b0:	0800497c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, lr}
    15b4:	00000008 	andeq	r0, r0, r8
    15b8:	0000000c 	andeq	r0, r0, ip
    15bc:	00001370 	andeq	r1, r0, r0, ror r3
    15c0:	08004984 	stmdaeq	r0, {r2, r7, r8, fp, lr}
    15c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    15c8:	0000000c 	andeq	r0, r0, ip
    15cc:	00001370 	andeq	r1, r0, r0, ror r3
    15d0:	080049a0 	stmdaeq	r0, {r5, r7, r8, fp, lr}
    15d4:	00000008 	andeq	r0, r0, r8
    15d8:	0000000c 	andeq	r0, r0, ip
    15dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15e0:	7c020001 	stcvc	0, cr0, [r2], {1}
    15e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15e8:	00000014 	andeq	r0, r0, r4, lsl r0
    15ec:	000015d8 	ldrdeq	r1, [r0], -r8
    15f0:	080049a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, lr}
    15f4:	000001f6 	strdeq	r0, [r0], -r6
    15f8:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
    15fc:	00000001 	andeq	r0, r0, r1
    1600:	0000001c 	andeq	r0, r0, ip, lsl r0
    1604:	000015d8 	ldrdeq	r1, [r0], -r8
    1608:	08004ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, lr}
    160c:	0000006a 	andeq	r0, r0, sl, rrx
    1610:	84140e46 	ldrhi	r0, [r4], #-3654	; 0xe46
    1614:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1618:	88028703 	stmdahi	r2, {r0, r1, r8, r9, sl, pc}
    161c:	00000001 	andeq	r0, r0, r1
    1620:	0000000c 	andeq	r0, r0, ip
    1624:	000015d8 	ldrdeq	r1, [r0], -r8
    1628:	08004c0c 	stmdaeq	r0, {r2, r3, sl, fp, lr}
    162c:	00000022 	andeq	r0, r0, r2, lsr #32
    1630:	0000000c 	andeq	r0, r0, ip
    1634:	000015d8 	ldrdeq	r1, [r0], -r8
    1638:	08004c30 	stmdaeq	r0, {r4, r5, sl, fp, lr}
    163c:	00000014 	andeq	r0, r0, r4, lsl r0
    1640:	0000000c 	andeq	r0, r0, ip
    1644:	000015d8 	ldrdeq	r1, [r0], -r8
    1648:	08004c44 	stmdaeq	r0, {r2, r6, sl, fp, lr}
    164c:	00000014 	andeq	r0, r0, r4, lsl r0
    1650:	0000000c 	andeq	r0, r0, ip
    1654:	000015d8 	ldrdeq	r1, [r0], -r8
    1658:	08004c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, lr}
    165c:	00000014 	andeq	r0, r0, r4, lsl r0
    1660:	0000000c 	andeq	r0, r0, ip
    1664:	000015d8 	ldrdeq	r1, [r0], -r8
    1668:	08004c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, lr}
    166c:	00000004 	andeq	r0, r0, r4
    1670:	0000000c 	andeq	r0, r0, ip
    1674:	000015d8 	ldrdeq	r1, [r0], -r8
    1678:	08004c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, lr}
    167c:	00000006 	andeq	r0, r0, r6
    1680:	0000000c 	andeq	r0, r0, ip
    1684:	000015d8 	ldrdeq	r1, [r0], -r8
    1688:	08004c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp, lr}
    168c:	00000018 	andeq	r0, r0, r8, lsl r0
    1690:	0000000c 	andeq	r0, r0, ip
    1694:	000015d8 	ldrdeq	r1, [r0], -r8
    1698:	08004c90 	stmdaeq	r0, {r4, r7, sl, fp, lr}
    169c:	00000014 	andeq	r0, r0, r4, lsl r0
    16a0:	0000000c 	andeq	r0, r0, ip
    16a4:	000015d8 	ldrdeq	r1, [r0], -r8
    16a8:	08004ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, lr}
    16ac:	0000000a 	andeq	r0, r0, sl
    16b0:	0000000c 	andeq	r0, r0, ip
    16b4:	000015d8 	ldrdeq	r1, [r0], -r8
    16b8:	08004cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, lr}
    16bc:	00000008 	andeq	r0, r0, r8
    16c0:	0000000c 	andeq	r0, r0, ip
    16c4:	000015d8 	ldrdeq	r1, [r0], -r8
    16c8:	08004cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, lr}
    16cc:	00000008 	andeq	r0, r0, r8
    16d0:	0000000c 	andeq	r0, r0, ip
    16d4:	000015d8 	ldrdeq	r1, [r0], -r8
    16d8:	08004cc0 	stmdaeq	r0, {r6, r7, sl, fp, lr}
    16dc:	00000008 	andeq	r0, r0, r8
    16e0:	00000014 	andeq	r0, r0, r4, lsl r0
    16e4:	000015d8 	ldrdeq	r1, [r0], -r8
    16e8:	08004cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, lr}
    16ec:	00000040 	andeq	r0, r0, r0, asr #32
    16f0:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
    16f4:	00000001 	andeq	r0, r0, r1
    16f8:	00000014 	andeq	r0, r0, r4, lsl r0
    16fc:	000015d8 	ldrdeq	r1, [r0], -r8
    1700:	08004d08 	stmdaeq	r0, {r3, r8, sl, fp, lr}
    1704:	0000003a 	andeq	r0, r0, sl, lsr r0
    1708:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
    170c:	00000001 	andeq	r0, r0, r1
    1710:	0000000c 	andeq	r0, r0, ip
    1714:	000015d8 	ldrdeq	r1, [r0], -r8
    1718:	08004d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, lr}
    171c:	00000040 	andeq	r0, r0, r0, asr #32
    1720:	00000018 	andeq	r0, r0, r8, lsl r0
    1724:	000015d8 	ldrdeq	r1, [r0], -r8
    1728:	08004d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, lr}
    172c:	00000058 	andeq	r0, r0, r8, asr r0
    1730:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1734:	86028503 	strhi	r8, [r2], -r3, lsl #10
    1738:	00000001 	andeq	r0, r0, r1
    173c:	00000014 	andeq	r0, r0, r4, lsl r0
    1740:	000015d8 	ldrdeq	r1, [r0], -r8
    1744:	08004ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, lr}
    1748:	0000003a 	andeq	r0, r0, sl, lsr r0
    174c:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
    1750:	00000001 	andeq	r0, r0, r1
    1754:	0000000c 	andeq	r0, r0, ip
    1758:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    175c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1760:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1764:	00000014 	andeq	r0, r0, r4, lsl r0
    1768:	00001754 	andeq	r1, r0, r4, asr r7
    176c:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
    1770:	000000dc 	ldrdeq	r0, [r0], -ip
    1774:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1778:	00018e02 	andeq	r8, r1, r2, lsl #28
    177c:	00000020 	andeq	r0, r0, r0, lsr #32
    1780:	00001754 	andeq	r1, r0, r4, asr r7
    1784:	08004ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, lr}
    1788:	00000052 	andeq	r0, r0, r2, asr r0
    178c:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
    1790:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1794:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1798:	8a028903 	bhi	a3bac <_Min_Stack_Size+0xa37ac>
    179c:	00000001 	andeq	r0, r0, r1
    17a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    17a4:	00001754 	andeq	r1, r0, r4, asr r7
    17a8:	08004f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, lr}
    17ac:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    17b0:	84180e49 	ldrhi	r0, [r8], #-3657	; 0xe49
    17b4:	86058506 	strhi	r8, [r5], -r6, lsl #10
    17b8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    17bc:	00018902 	andeq	r8, r1, r2, lsl #18
    17c0:	0000000c 	andeq	r0, r0, ip
    17c4:	00001754 	andeq	r1, r0, r4, asr r7
    17c8:	08005038 	stmdaeq	r0, {r3, r4, r5, ip, lr}
    17cc:	00000018 	andeq	r0, r0, r8, lsl r0
    17d0:	0000000c 	andeq	r0, r0, ip
    17d4:	00001754 	andeq	r1, r0, r4, asr r7
    17d8:	08005050 	stmdaeq	r0, {r4, r6, ip, lr}
    17dc:	0000000e 	andeq	r0, r0, lr
    17e0:	0000000c 	andeq	r0, r0, ip
    17e4:	00001754 	andeq	r1, r0, r4, asr r7
    17e8:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
    17ec:	0000001a 	andeq	r0, r0, sl, lsl r0
    17f0:	0000000c 	andeq	r0, r0, ip
    17f4:	00001754 	andeq	r1, r0, r4, asr r7
    17f8:	0800507c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip, lr}
    17fc:	0000001a 	andeq	r0, r0, sl, lsl r0
    1800:	0000000c 	andeq	r0, r0, ip
    1804:	00001754 	andeq	r1, r0, r4, asr r7
    1808:	08005098 	stmdaeq	r0, {r3, r4, r7, ip, lr}
    180c:	00000016 	andeq	r0, r0, r6, lsl r0
    1810:	0000000c 	andeq	r0, r0, ip
    1814:	00001754 	andeq	r1, r0, r4, asr r7
    1818:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
    181c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1820:	0000000c 	andeq	r0, r0, ip
    1824:	00001754 	andeq	r1, r0, r4, asr r7
    1828:	080050cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, lr}
    182c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1830:	0000000c 	andeq	r0, r0, ip
    1834:	00001754 	andeq	r1, r0, r4, asr r7
    1838:	080050ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, lr}
    183c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1840:	0000000c 	andeq	r0, r0, ip
    1844:	00001754 	andeq	r1, r0, r4, asr r7
    1848:	08005108 	stmdaeq	r0, {r3, r8, ip, lr}
    184c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1850:	00000014 	andeq	r0, r0, r4, lsl r0
    1854:	00001754 	andeq	r1, r0, r4, asr r7
    1858:	08005124 	stmdaeq	r0, {r2, r5, r8, ip, lr}
    185c:	00000048 	andeq	r0, r0, r8, asr #32
    1860:	84080e4d 	strhi	r0, [r8], #-3661	; 0xe4d
    1864:	00018502 	andeq	r8, r1, r2, lsl #10
    1868:	0000000c 	andeq	r0, r0, ip
    186c:	00001754 	andeq	r1, r0, r4, asr r7
    1870:	0800516c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, lr}
    1874:	00000006 	andeq	r0, r0, r6
    1878:	0000000c 	andeq	r0, r0, ip
    187c:	00001754 	andeq	r1, r0, r4, asr r7
    1880:	08005174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip, lr}
    1884:	00000004 	andeq	r0, r0, r4
    1888:	0000000c 	andeq	r0, r0, ip
    188c:	00001754 	andeq	r1, r0, r4, asr r7
    1890:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
    1894:	0000001a 	andeq	r0, r0, sl, lsl r0
    1898:	0000000c 	andeq	r0, r0, ip
    189c:	00001754 	andeq	r1, r0, r4, asr r7
    18a0:	08005194 	stmdaeq	r0, {r2, r4, r7, r8, ip, lr}
    18a4:	0000000c 	andeq	r0, r0, ip
    18a8:	0000000c 	andeq	r0, r0, ip
    18ac:	00001754 	andeq	r1, r0, r4, asr r7
    18b0:	080051a0 	stmdaeq	r0, {r5, r7, r8, ip, lr}
    18b4:	0000000c 	andeq	r0, r0, ip
    18b8:	0000000c 	andeq	r0, r0, ip
    18bc:	00001754 	andeq	r1, r0, r4, asr r7
    18c0:	080051ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, lr}
    18c4:	00000006 	andeq	r0, r0, r6
    18c8:	0000000c 	andeq	r0, r0, ip
    18cc:	00001754 	andeq	r1, r0, r4, asr r7
    18d0:	080051b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, lr}
    18d4:	00000014 	andeq	r0, r0, r4, lsl r0
    18d8:	0000000c 	andeq	r0, r0, ip
    18dc:	00001754 	andeq	r1, r0, r4, asr r7
    18e0:	080051c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, lr}
    18e4:	0000001e 	andeq	r0, r0, lr, lsl r0
    18e8:	0000000c 	andeq	r0, r0, ip
    18ec:	00001754 	andeq	r1, r0, r4, asr r7
    18f0:	080051e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip, lr}
    18f4:	0000000c 	andeq	r0, r0, ip
    18f8:	0000000c 	andeq	r0, r0, ip
    18fc:	00001754 	andeq	r1, r0, r4, asr r7
    1900:	080051f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, lr}
    1904:	00000008 	andeq	r0, r0, r8
    1908:	00000014 	andeq	r0, r0, r4, lsl r0
    190c:	00001754 	andeq	r1, r0, r4, asr r7
    1910:	080051fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip, lr}
    1914:	0000002a 	andeq	r0, r0, sl, lsr #32
    1918:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
    191c:	00000001 	andeq	r0, r0, r1
    1920:	0000000c 	andeq	r0, r0, ip
    1924:	00001754 	andeq	r1, r0, r4, asr r7
    1928:	08005228 	stmdaeq	r0, {r3, r5, r9, ip, lr}
    192c:	00000012 	andeq	r0, r0, r2, lsl r0
    1930:	0000000c 	andeq	r0, r0, ip
    1934:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1938:	7c020001 	stcvc	0, cr0, [r2], {1}
    193c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1940:	0000000c 	andeq	r0, r0, ip
    1944:	00001930 	andeq	r1, r0, r0, lsr r9
    1948:	0800523c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, lr}
    194c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1950:	00000018 	andeq	r0, r0, r8, lsl r0
    1954:	00001930 	andeq	r1, r0, r0, lsr r9
    1958:	0800525c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, lr}
    195c:	00000080 	andeq	r0, r0, r0, lsl #1
    1960:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    1964:	86028503 	strhi	r8, [r2], -r3, lsl #10
    1968:	00000001 	andeq	r0, r0, r1
    196c:	0000000c 	andeq	r0, r0, ip
    1970:	00001930 	andeq	r1, r0, r0, lsr r9
    1974:	080052dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip, lr}
    1978:	0000000e 	andeq	r0, r0, lr
    197c:	0000000c 	andeq	r0, r0, ip
    1980:	00001930 	andeq	r1, r0, r0, lsr r9
    1984:	080052ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip, lr}
    1988:	00000010 	andeq	r0, r0, r0, lsl r0
    198c:	0000000c 	andeq	r0, r0, ip
    1990:	00001930 	andeq	r1, r0, r0, lsr r9
    1994:	080052fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip, lr}
    1998:	00000014 	andeq	r0, r0, r4, lsl r0
    199c:	0000000c 	andeq	r0, r0, ip
    19a0:	00001930 	andeq	r1, r0, r0, lsr r9
    19a4:	08005310 	stmdaeq	r0, {r4, r8, r9, ip, lr}
    19a8:	0000000c 	andeq	r0, r0, ip
    19ac:	0000000c 	andeq	r0, r0, ip
    19b0:	00001930 	andeq	r1, r0, r0, lsr r9
    19b4:	0800531c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip, lr}
    19b8:	00000014 	andeq	r0, r0, r4, lsl r0
    19bc:	0000000c 	andeq	r0, r0, ip
    19c0:	00001930 	andeq	r1, r0, r0, lsr r9
    19c4:	08005330 	stmdaeq	r0, {r4, r5, r8, r9, ip, lr}
    19c8:	0000000c 	andeq	r0, r0, ip
    19cc:	0000000c 	andeq	r0, r0, ip
    19d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    19d4:	7c020001 	stcvc	0, cr0, [r2], {1}
    19d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    19dc:	00000014 	andeq	r0, r0, r4, lsl r0
    19e0:	000019cc 	andeq	r1, r0, ip, asr #19
    19e4:	0800533c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, lr}
    19e8:	0000001a 	andeq	r0, r0, sl, lsl r0
    19ec:	83080e41 	movwhi	r0, #36417	; 0x8e41
    19f0:	00018e02 	andeq	r8, r1, r2, lsl #28
    19f4:	00000018 	andeq	r0, r0, r8, lsl r0
    19f8:	000019cc 	andeq	r1, r0, ip, asr #19
    19fc:	08005358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, lr}
    1a00:	000000b6 	strheq	r0, [r0], -r6
    1a04:	840c0e45 	strhi	r0, [ip], #-3653	; 0xe45
    1a08:	86028503 	strhi	r8, [r2], -r3, lsl #10
    1a0c:	00000001 	andeq	r0, r0, r1
    1a10:	0000000c 	andeq	r0, r0, ip
    1a14:	000019cc 	andeq	r1, r0, ip, asr #19
    1a18:	08005410 	stmdaeq	r0, {r4, sl, ip, lr}
    1a1c:	00000018 	andeq	r0, r0, r8, lsl r0
    1a20:	0000000c 	andeq	r0, r0, ip
    1a24:	000019cc 	andeq	r1, r0, ip, asr #19
    1a28:	08005428 	stmdaeq	r0, {r3, r5, sl, ip, lr}
    1a2c:	00000012 	andeq	r0, r0, r2, lsl r0
    1a30:	0000000c 	andeq	r0, r0, ip
    1a34:	000019cc 	andeq	r1, r0, ip, asr #19
    1a38:	0800543c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, lr}
    1a3c:	00000012 	andeq	r0, r0, r2, lsl r0
    1a40:	0000000c 	andeq	r0, r0, ip
    1a44:	000019cc 	andeq	r1, r0, ip, asr #19
    1a48:	08005450 	stmdaeq	r0, {r4, r6, sl, ip, lr}
    1a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1a50:	00000018 	andeq	r0, r0, r8, lsl r0
    1a54:	000019cc 	andeq	r1, r0, ip, asr #19
    1a58:	0800546c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, lr}
    1a5c:	00000072 	andeq	r0, r0, r2, ror r0
    1a60:	84100e46 	ldrhi	r0, [r0], #-3654	; 0xe46
    1a64:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1a68:	00018702 	andeq	r8, r1, r2, lsl #14
    1a6c:	0000000c 	andeq	r0, r0, ip
    1a70:	000019cc 	andeq	r1, r0, ip, asr #19
    1a74:	080054e0 	stmdaeq	r0, {r5, r6, r7, sl, ip, lr}
    1a78:	0000001a 	andeq	r0, r0, sl, lsl r0
    1a7c:	00000018 	andeq	r0, r0, r8, lsl r0
    1a80:	000019cc 	andeq	r1, r0, ip, asr #19
    1a84:	080054fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, lr}
    1a88:	00000072 	andeq	r0, r0, r2, ror r0
    1a8c:	84100e46 	ldrhi	r0, [r0], #-3654	; 0xe46
    1a90:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1a94:	00018702 	andeq	r8, r1, r2, lsl #14
    1a98:	0000000c 	andeq	r0, r0, ip
    1a9c:	000019cc 	andeq	r1, r0, ip, asr #19
    1aa0:	08005570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip, lr}
    1aa4:	0000001a 	andeq	r0, r0, sl, lsl r0
    1aa8:	0000000c 	andeq	r0, r0, ip
    1aac:	000019cc 	andeq	r1, r0, ip, asr #19
    1ab0:	0800558c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip, lr}
    1ab4:	0000001c 	andeq	r0, r0, ip, lsl r0
    1ab8:	0000000c 	andeq	r0, r0, ip
    1abc:	000019cc 	andeq	r1, r0, ip, asr #19
    1ac0:	080055a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, ip, lr}
    1ac4:	0000001c 	andeq	r0, r0, ip, lsl r0
    1ac8:	0000000c 	andeq	r0, r0, ip
    1acc:	000019cc 	andeq	r1, r0, ip, asr #19
    1ad0:	080055c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, lr}
    1ad4:	0000002c 	andeq	r0, r0, ip, lsr #32
    1ad8:	0000000c 	andeq	r0, r0, ip
    1adc:	000019cc 	andeq	r1, r0, ip, asr #19
    1ae0:	080055f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, lr}
    1ae4:	0000000c 	andeq	r0, r0, ip
    1ae8:	0000000c 	andeq	r0, r0, ip
    1aec:	000019cc 	andeq	r1, r0, ip, asr #19
    1af0:	080055fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, ip, lr}
    1af4:	0000001a 	andeq	r0, r0, sl, lsl r0
    1af8:	0000000c 	andeq	r0, r0, ip
    1afc:	000019cc 	andeq	r1, r0, ip, asr #19
    1b00:	08005618 	stmdaeq	r0, {r3, r4, r9, sl, ip, lr}
    1b04:	00000014 	andeq	r0, r0, r4, lsl r0
    1b08:	0000000c 	andeq	r0, r0, ip
    1b0c:	000019cc 	andeq	r1, r0, ip, asr #19
    1b10:	0800562c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, lr}
    1b14:	0000000c 	andeq	r0, r0, ip
    1b18:	0000000c 	andeq	r0, r0, ip
    1b1c:	000019cc 	andeq	r1, r0, ip, asr #19
    1b20:	08005638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip, lr}
    1b24:	00000020 	andeq	r0, r0, r0, lsr #32
    1b28:	0000000c 	andeq	r0, r0, ip
    1b2c:	000019cc 	andeq	r1, r0, ip, asr #19
    1b30:	08005658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, lr}
    1b34:	0000000e 	andeq	r0, r0, lr
    1b38:	0000000c 	andeq	r0, r0, ip
    1b3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1b40:	7c020001 	stcvc	0, cr0, [r2], {1}
    1b44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1b48:	00000014 	andeq	r0, r0, r4, lsl r0
    1b4c:	00001b38 	andeq	r1, r0, r8, lsr fp
    1b50:	08005668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, lr}
    1b54:	0000001a 	andeq	r0, r0, sl, lsl r0
    1b58:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1b5c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1b60:	00000018 	andeq	r0, r0, r8, lsl r0
    1b64:	00001b38 	andeq	r1, r0, r8, lsr fp
    1b68:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
    1b6c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1b70:	840c0e4b 	strhi	r0, [ip], #-3659	; 0xe4b
    1b74:	86028503 	strhi	r8, [r2], -r3, lsl #10
    1b78:	00000001 	andeq	r0, r0, r1
    1b7c:	0000000c 	andeq	r0, r0, ip
    1b80:	00001b38 	andeq	r1, r0, r8, lsr fp
    1b84:	08005728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, lr}
    1b88:	00000022 	andeq	r0, r0, r2, lsr #32
    1b8c:	0000000c 	andeq	r0, r0, ip
    1b90:	00001b38 	andeq	r1, r0, r8, lsr fp
    1b94:	0800574c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, lr}
    1b98:	0000001c 	andeq	r0, r0, ip, lsl r0
    1b9c:	0000000c 	andeq	r0, r0, ip
    1ba0:	00001b38 	andeq	r1, r0, r8, lsr fp
    1ba4:	08005768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, lr}
    1ba8:	0000001c 	andeq	r0, r0, ip, lsl r0
    1bac:	00000014 	andeq	r0, r0, r4, lsl r0
    1bb0:	00001b38 	andeq	r1, r0, r8, lsr fp
    1bb4:	08005784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip, lr}
    1bb8:	00000036 	andeq	r0, r0, r6, lsr r0
    1bbc:	84040e4b 	strhi	r0, [r4], #-3659	; 0xe4b
    1bc0:	00000001 	andeq	r0, r0, r1
    1bc4:	0000000c 	andeq	r0, r0, ip
    1bc8:	00001b38 	andeq	r1, r0, r8, lsr fp
    1bcc:	080057bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    1bd0:	0000000a 	andeq	r0, r0, sl
    1bd4:	0000000c 	andeq	r0, r0, ip
    1bd8:	00001b38 	andeq	r1, r0, r8, lsr fp
    1bdc:	080057c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip, lr}
    1be0:	0000000c 	andeq	r0, r0, ip
    1be4:	0000000c 	andeq	r0, r0, ip
    1be8:	00001b38 	andeq	r1, r0, r8, lsr fp
    1bec:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
    1bf0:	0000000c 	andeq	r0, r0, ip
    1bf4:	00000024 	andeq	r0, r0, r4, lsr #32
    1bf8:	00001b38 	andeq	r1, r0, r8, lsr fp
    1bfc:	080057e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, lr}
    1c00:	000000bc 	strheq	r0, [r0], -ip
    1c04:	84200e45 	strthi	r0, [r0], #-3653	; 0xe45
    1c08:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1c0c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1c10:	8a038904 	bhi	e4028 <_Min_Stack_Size+0xe3c28>
    1c14:	02018b02 	andeq	r8, r1, #2048	; 0x800
    1c18:	00280e53 	eoreq	r0, r8, r3, asr lr
    1c1c:	00000014 	andeq	r0, r0, r4, lsl r0
    1c20:	00001b38 	andeq	r1, r0, r8, lsr fp
    1c24:	0800589c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, lr}
    1c28:	00000032 	andeq	r0, r0, r2, lsr r0
    1c2c:	84040e42 	strhi	r0, [r4], #-3650	; 0xe42
    1c30:	00000001 	andeq	r0, r0, r1
    1c34:	0000000c 	andeq	r0, r0, ip
    1c38:	00001b38 	andeq	r1, r0, r8, lsr fp
    1c3c:	080058d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, lr}
    1c40:	00000014 	andeq	r0, r0, r4, lsl r0
    1c44:	0000000c 	andeq	r0, r0, ip
    1c48:	00001b38 	andeq	r1, r0, r8, lsr fp
    1c4c:	080058e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, lr}
    1c50:	0000001c 	andeq	r0, r0, ip, lsl r0
    1c54:	0000000c 	andeq	r0, r0, ip
    1c58:	00001b38 	andeq	r1, r0, r8, lsr fp
    1c5c:	08005900 	stmdaeq	r0, {r8, fp, ip, lr}
    1c60:	00000008 	andeq	r0, r0, r8
    1c64:	0000000c 	andeq	r0, r0, ip
    1c68:	00001b38 	andeq	r1, r0, r8, lsr fp
    1c6c:	08005908 	stmdaeq	r0, {r3, r8, fp, ip, lr}
    1c70:	00000014 	andeq	r0, r0, r4, lsl r0
    1c74:	00000014 	andeq	r0, r0, r4, lsl r0
    1c78:	00001b38 	andeq	r1, r0, r8, lsr fp
    1c7c:	0800591c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, lr}
    1c80:	00000042 	andeq	r0, r0, r2, asr #32
    1c84:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1c88:	00018502 	andeq	r8, r1, r2, lsl #10
    1c8c:	0000000c 	andeq	r0, r0, ip
    1c90:	00001b38 	andeq	r1, r0, r8, lsr fp
    1c94:	08005960 	stmdaeq	r0, {r5, r6, r8, fp, ip, lr}
    1c98:	0000000a 	andeq	r0, r0, sl
    1c9c:	0000000c 	andeq	r0, r0, ip
    1ca0:	00001b38 	andeq	r1, r0, r8, lsr fp
    1ca4:	0800596c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, ip, lr}
    1ca8:	00000020 	andeq	r0, r0, r0, lsr #32
    1cac:	00000014 	andeq	r0, r0, r4, lsl r0
    1cb0:	00001b38 	andeq	r1, r0, r8, lsr fp
    1cb4:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
    1cb8:	0000001a 	andeq	r0, r0, sl, lsl r0
    1cbc:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1cc0:	00018502 	andeq	r8, r1, r2, lsl #10
    1cc4:	0000000c 	andeq	r0, r0, ip
    1cc8:	00001b38 	andeq	r1, r0, r8, lsr fp
    1ccc:	080059a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, ip, lr}
    1cd0:	0000000c 	andeq	r0, r0, ip
    1cd4:	00000014 	andeq	r0, r0, r4, lsl r0
    1cd8:	00001b38 	andeq	r1, r0, r8, lsr fp
    1cdc:	080059b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip, lr}
    1ce0:	00000072 	andeq	r0, r0, r2, ror r0
    1ce4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1ce8:	00018502 	andeq	r8, r1, r2, lsl #10
    1cec:	0000000c 	andeq	r0, r0, ip
    1cf0:	00001b38 	andeq	r1, r0, r8, lsr fp
    1cf4:	08005a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, lr}
    1cf8:	00000004 	andeq	r0, r0, r4
    1cfc:	0000000c 	andeq	r0, r0, ip
    1d00:	00001b38 	andeq	r1, r0, r8, lsr fp
    1d04:	08005a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, lr}
    1d08:	00000004 	andeq	r0, r0, r4
    1d0c:	00000018 	andeq	r0, r0, r8, lsl r0
    1d10:	00001b38 	andeq	r1, r0, r8, lsr fp
    1d14:	08005a30 	stmdaeq	r0, {r4, r5, r9, fp, ip, lr}
    1d18:	00000056 	andeq	r0, r0, r6, asr r0
    1d1c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    1d20:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1d24:	00018702 	andeq	r8, r1, r2, lsl #14
    1d28:	0000000c 	andeq	r0, r0, ip
    1d2c:	00001b38 	andeq	r1, r0, r8, lsr fp
    1d30:	08005a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, lr}
    1d34:	00000056 	andeq	r0, r0, r6, asr r0
    1d38:	0000000c 	andeq	r0, r0, ip
    1d3c:	00001b38 	andeq	r1, r0, r8, lsr fp
    1d40:	08005ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, ip, lr}
    1d44:	0000001a 	andeq	r0, r0, sl, lsl r0
    1d48:	0000000c 	andeq	r0, r0, ip
    1d4c:	00001b38 	andeq	r1, r0, r8, lsr fp
    1d50:	08005afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, ip, lr}
    1d54:	00000014 	andeq	r0, r0, r4, lsl r0
    1d58:	0000000c 	andeq	r0, r0, ip
    1d5c:	00001b38 	andeq	r1, r0, r8, lsr fp
    1d60:	08005b10 	stmdaeq	r0, {r4, r8, r9, fp, ip, lr}
    1d64:	0000000c 	andeq	r0, r0, ip
    1d68:	0000000c 	andeq	r0, r0, ip
    1d6c:	00001b38 	andeq	r1, r0, r8, lsr fp
    1d70:	08005b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, ip, lr}
    1d74:	0000001e 	andeq	r0, r0, lr, lsl r0
    1d78:	0000000c 	andeq	r0, r0, ip
    1d7c:	00001b38 	andeq	r1, r0, r8, lsr fp
    1d80:	08005b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip, lr}
    1d84:	0000000c 	andeq	r0, r0, ip
    1d88:	0000000c 	andeq	r0, r0, ip
    1d8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1d90:	7c020001 	stcvc	0, cr0, [r2], {1}
    1d94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1d98:	00000014 	andeq	r0, r0, r4, lsl r0
    1d9c:	00001d88 	andeq	r1, r0, r8, lsl #27
    1da0:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
    1da4:	00000038 	andeq	r0, r0, r8, lsr r0
    1da8:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
    1dac:	00000001 	andeq	r0, r0, r1
    1db0:	00000020 	andeq	r0, r0, r0, lsr #32
    1db4:	00001d88 	andeq	r1, r0, r8, lsl #27
    1db8:	08005b80 	stmdaeq	r0, {r7, r8, r9, fp, ip, lr}
    1dbc:	00000112 	andeq	r0, r0, r2, lsl r1
    1dc0:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
    1dc4:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1dc8:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1dcc:	8a028903 	bhi	a41e0 <_Min_Stack_Size+0xa3de0>
    1dd0:	00000001 	andeq	r0, r0, r1
    1dd4:	00000018 	andeq	r0, r0, r8, lsl r0
    1dd8:	00001d88 	andeq	r1, r0, r8, lsl #27
    1ddc:	08005c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, ip, lr}
    1de0:	00000058 	andeq	r0, r0, r8, asr r0
    1de4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    1de8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1dec:	00018702 	andeq	r8, r1, r2, lsl #14
    1df0:	0000000c 	andeq	r0, r0, ip
    1df4:	00001d88 	andeq	r1, r0, r8, lsl #27
    1df8:	08005cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip, lr}
    1dfc:	00000022 	andeq	r0, r0, r2, lsr #32
    1e00:	0000000c 	andeq	r0, r0, ip
    1e04:	00001d88 	andeq	r1, r0, r8, lsl #27
    1e08:	08005d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, lr}
    1e0c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1e10:	00000020 	andeq	r0, r0, r0, lsr #32
    1e14:	00001d88 	andeq	r1, r0, r8, lsl #27
    1e18:	08005d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, lr}
    1e1c:	00000078 	andeq	r0, r0, r8, ror r0
    1e20:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
    1e24:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1e28:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1e2c:	8a038904 	bhi	e4244 <_Min_Stack_Size+0xe3e44>
    1e30:	00018b02 	andeq	r8, r1, r2, lsl #22
    1e34:	00000014 	andeq	r0, r0, r4, lsl r0
    1e38:	00001d88 	andeq	r1, r0, r8, lsl #27
    1e3c:	08005da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, lr}
    1e40:	0000002e 	andeq	r0, r0, lr, lsr #32
    1e44:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1e48:	00018502 	andeq	r8, r1, r2, lsl #10
    1e4c:	0000000c 	andeq	r0, r0, ip
    1e50:	00001d88 	andeq	r1, r0, r8, lsl #27
    1e54:	08005dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, lr}
    1e58:	00000034 	andeq	r0, r0, r4, lsr r0
    1e5c:	0000000c 	andeq	r0, r0, ip
    1e60:	00001d88 	andeq	r1, r0, r8, lsl #27
    1e64:	08005e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, lr}
    1e68:	00000034 	andeq	r0, r0, r4, lsr r0
    1e6c:	0000000c 	andeq	r0, r0, ip
    1e70:	00001d88 	andeq	r1, r0, r8, lsl #27
    1e74:	08005e40 	stmdaeq	r0, {r6, r9, sl, fp, ip, lr}
    1e78:	00000010 	andeq	r0, r0, r0, lsl r0
    1e7c:	0000000c 	andeq	r0, r0, ip
    1e80:	00001d88 	andeq	r1, r0, r8, lsl #27
    1e84:	08005e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, lr}
    1e88:	0000001a 	andeq	r0, r0, sl, lsl r0
    1e8c:	00000018 	andeq	r0, r0, r8, lsl r0
    1e90:	00001d88 	andeq	r1, r0, r8, lsl #27
    1e94:	08005e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, lr}
    1e98:	00000064 	andeq	r0, r0, r4, rrx
    1e9c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    1ea0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1ea4:	00018702 	andeq	r8, r1, r2, lsl #14
    1ea8:	00000014 	andeq	r0, r0, r4, lsl r0
    1eac:	00001d88 	andeq	r1, r0, r8, lsl #27
    1eb0:	08005ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip, lr}
    1eb4:	0000002e 	andeq	r0, r0, lr, lsr #32
    1eb8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1ebc:	00018502 	andeq	r8, r1, r2, lsl #10
    1ec0:	0000000c 	andeq	r0, r0, ip
    1ec4:	00001d88 	andeq	r1, r0, r8, lsl #27
    1ec8:	08005f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, lr}
    1ecc:	00000028 	andeq	r0, r0, r8, lsr #32
    1ed0:	00000014 	andeq	r0, r0, r4, lsl r0
    1ed4:	00001d88 	andeq	r1, r0, r8, lsl #27
    1ed8:	08005f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp, ip, lr}
    1edc:	0000002c 	andeq	r0, r0, ip, lsr #32
    1ee0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1ee4:	00018502 	andeq	r8, r1, r2, lsl #10
    1ee8:	0000001c 	andeq	r0, r0, ip, lsl r0
    1eec:	00001d88 	andeq	r1, r0, r8, lsl #27
    1ef0:	08005f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}
    1ef4:	000000d4 	ldrdeq	r0, [r0], -r4
    1ef8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
    1efc:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1f00:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1f04:	00018902 	andeq	r8, r1, r2, lsl #18
    1f08:	00000014 	andeq	r0, r0, r4, lsl r0
    1f0c:	00001d88 	andeq	r1, r0, r8, lsl #27
    1f10:	08006028 	stmdaeq	r0, {r3, r5, sp, lr}
    1f14:	00000036 	andeq	r0, r0, r6, lsr r0
    1f18:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1f1c:	00018502 	andeq	r8, r1, r2, lsl #10
    1f20:	00000014 	andeq	r0, r0, r4, lsl r0
    1f24:	00001d88 	andeq	r1, r0, r8, lsl #27
    1f28:	08006060 	stmdaeq	r0, {r5, r6, sp, lr}
    1f2c:	00000024 	andeq	r0, r0, r4, lsr #32
    1f30:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1f34:	00018502 	andeq	r8, r1, r2, lsl #10
    1f38:	0000000c 	andeq	r0, r0, ip
    1f3c:	00001d88 	andeq	r1, r0, r8, lsl #27
    1f40:	08006084 	stmdaeq	r0, {r2, r7, sp, lr}
    1f44:	0000001c 	andeq	r0, r0, ip, lsl r0
    1f48:	0000000c 	andeq	r0, r0, ip
    1f4c:	00001d88 	andeq	r1, r0, r8, lsl #27
    1f50:	080060a0 	stmdaeq	r0, {r5, r7, sp, lr}
    1f54:	00000012 	andeq	r0, r0, r2, lsl r0
    1f58:	0000000c 	andeq	r0, r0, ip
    1f5c:	00001d88 	andeq	r1, r0, r8, lsl #27
    1f60:	080060b4 	stmdaeq	r0, {r2, r4, r5, r7, sp, lr}
    1f64:	00000012 	andeq	r0, r0, r2, lsl r0
    1f68:	0000000c 	andeq	r0, r0, ip
    1f6c:	00001d88 	andeq	r1, r0, r8, lsl #27
    1f70:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
    1f74:	00000026 	andeq	r0, r0, r6, lsr #32
    1f78:	0000000c 	andeq	r0, r0, ip
    1f7c:	00001d88 	andeq	r1, r0, r8, lsl #27
    1f80:	080060f0 	stmdaeq	r0, {r4, r5, r6, r7, sp, lr}
    1f84:	000000a2 	andeq	r0, r0, r2, lsr #1
    1f88:	0000000c 	andeq	r0, r0, ip
    1f8c:	00001d88 	andeq	r1, r0, r8, lsl #27
    1f90:	08006194 	stmdaeq	r0, {r2, r4, r7, r8, sp, lr}
    1f94:	00000042 	andeq	r0, r0, r2, asr #32
    1f98:	0000000c 	andeq	r0, r0, ip
    1f9c:	00001d88 	andeq	r1, r0, r8, lsl #27
    1fa0:	080061d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sp, lr}
    1fa4:	00000054 	andeq	r0, r0, r4, asr r0
    1fa8:	00000014 	andeq	r0, r0, r4, lsl r0
    1fac:	00001d88 	andeq	r1, r0, r8, lsl #27
    1fb0:	0800622c 	stmdaeq	r0, {r2, r3, r5, r9, sp, lr}
    1fb4:	0000006c 	andeq	r0, r0, ip, rrx
    1fb8:	84040e42 	strhi	r0, [r4], #-3650	; 0xe42
    1fbc:	00000001 	andeq	r0, r0, r1
    1fc0:	0000000c 	andeq	r0, r0, ip
    1fc4:	00001d88 	andeq	r1, r0, r8, lsl #27
    1fc8:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    1fcc:	00000054 	andeq	r0, r0, r4, asr r0
    1fd0:	0000000c 	andeq	r0, r0, ip
    1fd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1fd8:	7c020001 	stcvc	0, cr0, [r2], {1}
    1fdc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1fe0:	00000014 	andeq	r0, r0, r4, lsl r0
    1fe4:	00001fd0 	ldrdeq	r1, [r0], -r0
    1fe8:	080062ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sp, lr}
    1fec:	00000016 	andeq	r0, r0, r6, lsl r0
    1ff0:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1ff4:	00018e02 	andeq	r8, r1, r2, lsl #28
    1ff8:	0000000c 	andeq	r0, r0, ip
    1ffc:	00001fd0 	ldrdeq	r1, [r0], -r0
    2000:	08006304 	stmdaeq	r0, {r2, r8, r9, sp, lr}
    2004:	0000001c 	andeq	r0, r0, ip, lsl r0
    2008:	0000000c 	andeq	r0, r0, ip
    200c:	00001fd0 	ldrdeq	r1, [r0], -r0
    2010:	08006320 	stmdaeq	r0, {r5, r8, r9, sp, lr}
    2014:	0000000c 	andeq	r0, r0, ip
    2018:	0000000c 	andeq	r0, r0, ip
    201c:	00001fd0 	ldrdeq	r1, [r0], -r0
    2020:	0800632c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp, lr}
    2024:	0000001c 	andeq	r0, r0, ip, lsl r0
    2028:	0000000c 	andeq	r0, r0, ip
    202c:	00001fd0 	ldrdeq	r1, [r0], -r0
    2030:	08006348 	stmdaeq	r0, {r3, r6, r8, r9, sp, lr}
    2034:	00000014 	andeq	r0, r0, r4, lsl r0
    2038:	0000000c 	andeq	r0, r0, ip
    203c:	00001fd0 	ldrdeq	r1, [r0], -r0
    2040:	0800635c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, lr}
    2044:	00000010 	andeq	r0, r0, r0, lsl r0
    2048:	0000000c 	andeq	r0, r0, ip
    204c:	00001fd0 	ldrdeq	r1, [r0], -r0
    2050:	0800636c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sp, lr}
    2054:	00000014 	andeq	r0, r0, r4, lsl r0
    2058:	0000000c 	andeq	r0, r0, ip
    205c:	00001fd0 	ldrdeq	r1, [r0], -r0
    2060:	08006380 	stmdaeq	r0, {r7, r8, r9, sp, lr}
    2064:	00000010 	andeq	r0, r0, r0, lsl r0
