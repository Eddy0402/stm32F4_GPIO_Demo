
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003014  080001ac  080001ac  000081ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000024  20000000  080031c0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  20000024  20000024  00010024  2**0
                  ALLOC
  4 ._user_heap_stack 00000400  20000028  20000028  00010024  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010024  2**0
                  CONTENTS, READONLY
  6 .debug_line   00003742  00000000  00000000  0001004e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000081f1  00000000  00000000  00013790  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a34  00000000  00000000  0001b981  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a78  00000000  00000000  0001d3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009b0  00000000  00000000  0001de30  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004415  00000000  00000000  0001e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003fe1  00000000  00000000  00022bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      0000001f  00000000  00000000  00026bd6  2**0
                  CONTENTS, READONLY
 14 .debug_frame  0000154c  00000000  00000000  00026bf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20030000 	andcs	r0, r3, r0
 8000004:	080001c1 	stmdaeq	r0, {r0, r6, r7, r8}
 8000008:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800000c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000010:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000014:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000018:	08000205 	stmdaeq	r0, {r0, r2, r9}
	...
 800002c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000030:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800003c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000040:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000044:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000048:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800004c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000050:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000054:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000058:	08000475 	stmdaeq	r0, {r0, r2, r4, r5, r6, sl}
 800005c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000060:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000064:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000068:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800006c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000070:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000074:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000078:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800007c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000080:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000084:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000088:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800008c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000090:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000094:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000098:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800009c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000a0:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000a4:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000a8:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000ac:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000b0:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000b4:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000b8:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000bc:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000c0:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000c4:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000c8:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000cc:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000d0:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000d4:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000d8:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000dc:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000e0:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000e4:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000e8:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000ec:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000f0:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000f4:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000f8:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80000fc:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000100:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000104:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000108:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800010c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000110:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000114:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000118:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800011c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000120:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000124:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000128:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800012c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000130:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000134:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000138:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800013c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000140:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000144:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000148:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800014c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000150:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000154:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000158:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800015c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000160:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000164:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000168:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800016c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000170:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000174:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000178:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800017c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000180:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000184:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000188:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800018c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000190:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000194:	08000205 	stmdaeq	r0, {r0, r2, r9}
 8000198:	08000205 	stmdaeq	r0, {r0, r2, r9}
 800019c:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80001a0:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80001a4:	08000205 	stmdaeq	r0, {r0, r2, r9}
 80001a8:	08000205 	stmdaeq	r0, {r0, r2, r9}

Disassembly of section .text:

080001ac <Reset_Handler-0x14>:
 80001ac:	080031c0 	stmdaeq	r0, {r6, r7, r8, ip, sp}
 80001b0:	20000000 	andcs	r0, r0, r0
 80001b4:	20000024 	andcs	r0, r0, r4, lsr #32
 80001b8:	20000024 	andcs	r0, r0, r4, lsr #32
 80001bc:	20000028 	andcs	r0, r0, r8, lsr #32

080001c0 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001c2:	e003      	b.n	80001cc <LoopCopyDataInit>

080001c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001c4:	4b0a      	ldr	r3, [pc, #40]	; (80001f0 <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 80001c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001ca:	3104      	adds	r1, #4

080001cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001cc:	4809      	ldr	r0, [pc, #36]	; (80001f4 <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 80001ce:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 80001d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001d4:	d3f6      	bcc.n	80001c4 <CopyDataInit>
  ldr  r2, =_sbss
 80001d6:	4a09      	ldr	r2, [pc, #36]	; (80001fc <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 80001d8:	e002      	b.n	80001e0 <LoopFillZerobss>

080001da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001dc:	f842 3b04 	str.w	r3, [r2], #4

080001e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001e0:	4b07      	ldr	r3, [pc, #28]	; (8000200 <LoopFillZerobss+0x20>)
  cmp  r2, r3
 80001e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001e4:	d3f9      	bcc.n	80001da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001e6:	f000 f80f 	bl	8000208 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 80001ea:	f000 f959 	bl	80004a0 <main>
  bx  lr    
 80001ee:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80001f0:	080031c0 	stmdaeq	r0, {r6, r7, r8, ip, sp}
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001f4:	20000000 	andcs	r0, r0, r0
  ldr  r3, =_edata
 80001f8:	20000024 	andcs	r0, r0, r4, lsr #32
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80001fc:	20000024 	andcs	r0, r0, r4, lsr #32
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000200:	20000028 	andcs	r0, r0, r8, lsr #32

08000204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000204:	e7fe      	b.n	8000204 <ADC_IRQHandler>
	...

08000208 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000208:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800020c:	f2ce 0200 	movt	r2, #57344	; 0xe000
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000210:	f44f 5360 	mov.w	r3, #14336	; 0x3800
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000214:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000218:	f2c4 0302 	movt	r3, #16386	; 0x4002
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800021c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000220:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000224:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000226:	2200      	movs	r2, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000228:	f041 0101 	orr.w	r1, r1, #1
 800022c:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800022e:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000230:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000232:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000236:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800023a:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800023e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8000242:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000244:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000246:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000248:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800024a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800024e:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000250:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000252:	9200      	str	r2, [sp, #0]
 8000254:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800025c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800025e:	461a      	mov	r2, r3
 8000260:	e003      	b.n	800026a <SystemInit+0x62>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000262:	9b00      	ldr	r3, [sp, #0]
 8000264:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000268:	d009      	beq.n	800027e <SystemInit+0x76>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800026a:	6813      	ldr	r3, [r2, #0]
 800026c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000270:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8000272:	9b00      	ldr	r3, [sp, #0]
 8000274:	3301      	adds	r3, #1
 8000276:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d0f1      	beq.n	8000262 <SystemInit+0x5a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800027e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000282:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800028c:	bf18      	it	ne
 800028e:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000290:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000292:	9b01      	ldr	r3, [sp, #4]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d008      	beq.n	80002aa <SystemInit+0xa2>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000298:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800029c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80002a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002a4:	609a      	str	r2, [r3, #8]
#endif
}
 80002a6:	b002      	add	sp, #8
 80002a8:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_VOS;
 80002b2:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80002b8:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002bc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80002c0:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80002c2:	6811      	ldr	r1, [r2, #0]
 80002c4:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80002c8:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002ca:	689a      	ldr	r2, [r3, #8]
 80002cc:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002ce:	689a      	ldr	r2, [r3, #8]
 80002d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80002d4:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002d6:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002d8:	f644 3219 	movw	r2, #19225	; 0x4b19
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002dc:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002e0:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002e4:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002e6:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002ee:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002f0:	4619      	mov	r1, r3
 80002f2:	680a      	ldr	r2, [r1, #0]
 80002f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002f8:	0192      	lsls	r2, r2, #6
 80002fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002fe:	d5f8      	bpl.n	80002f2 <SystemInit+0xea>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 8000300:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8000304:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000308:	f240 6104 	movw	r1, #1540	; 0x604
 800030c:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800030e:	689a      	ldr	r2, [r3, #8]
 8000310:	f022 0203 	bic.w	r2, r2, #3
 8000314:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000316:	689a      	ldr	r2, [r3, #8]
 8000318:	f042 0202 	orr.w	r2, r2, #2
 800031c:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800031e:	689a      	ldr	r2, [r3, #8]
 8000320:	f002 020c 	and.w	r2, r2, #12
 8000324:	2a08      	cmp	r2, #8
 8000326:	d1fa      	bne.n	800031e <SystemInit+0x116>
 8000328:	e7b6      	b.n	8000298 <SystemInit+0x90>
 800032a:	bf00      	nop

0800032c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800032c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000330:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000334:	689a      	ldr	r2, [r3, #8]
 8000336:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 800033a:	2a04      	cmp	r2, #4
 800033c:	d03a      	beq.n	80003b4 <SystemCoreClockUpdate+0x88>
 800033e:	2a08      	cmp	r2, #8
 8000340:	d016      	beq.n	8000370 <SystemCoreClockUpdate+0x44>
 8000342:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000346:	f2c0 01f4 	movt	r1, #244	; 0xf4
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800034a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800034e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000352:	f240 0200 	movw	r2, #0
 8000356:	6898      	ldr	r0, [r3, #8]
 8000358:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800035c:	f3c0 1003 	ubfx	r0, r0, #4, #4
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000360:	f240 0310 	movw	r3, #16
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000364:	5c12      	ldrb	r2, [r2, r0]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000366:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800036a:	40d1      	lsrs	r1, r2
 800036c:	6019      	str	r1, [r3, #0]
 800036e:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000370:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000372:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8000374:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000378:	6858      	ldr	r0, [r3, #4]
 800037a:	bf15      	itete	ne
 800037c:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000380:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000384:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000388:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800038c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000390:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000394:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000398:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800039c:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80003a6:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80003a8:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80003ac:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 80003ae:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 80003b2:	e7ca      	b.n	800034a <SystemCoreClockUpdate+0x1e>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 80003b4:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80003b8:	f2c0 017a 	movt	r1, #122	; 0x7a
 80003bc:	e7c5      	b.n	800034a <SystemCoreClockUpdate+0x1e>
 80003be:	bf00      	nop

080003c0 <RCC_Configuration>:
#include "stm32f4xx.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_syscfg.h"

void RCC_Configuration(void)
{
 80003c0:	b508      	push	{r3, lr}
	/* GPIOA clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80003c2:	2040      	movs	r0, #64	; 0x40
 80003c4:	2101      	movs	r1, #1
 80003c6:	f000 fc25 	bl	8000c14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80003ca:	2001      	movs	r0, #1
 80003cc:	4601      	mov	r1, r0
}
 80003ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void RCC_Configuration(void)
{
	/* GPIOA clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80003d2:	f000 bc1f 	b.w	8000c14 <RCC_AHB1PeriphClockCmd>
 80003d6:	bf00      	nop

080003d8 <GPIO_Configuration>:
}

void GPIO_Configuration(void)
{
 80003d8:	b530      	push	{r4, r5, lr}
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOG, &GPIO_InitStructure);
 80003da:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
}

void GPIO_Configuration(void)
{
 80003de:	b085      	sub	sp, #20
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80003e0:	2400      	movs	r4, #0
}

void GPIO_Configuration(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 80003e2:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80003e6:	2301      	movs	r3, #1
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80003e8:	2503      	movs	r5, #3
	GPIO_Init(GPIOG, &GPIO_InitStructure);
 80003ea:	4669      	mov	r1, sp
 80003ec:	f2c4 0002 	movt	r0, #16386	; 0x4002
}

void GPIO_Configuration(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 80003f0:	9200      	str	r2, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80003f2:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80003f6:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003fa:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80003fe:	f88d 5005 	strb.w	r5, [sp, #5]
	GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000402:	f000 f97d 	bl	8000700 <GPIO_Init>
	GPIO_InitStructure_b.GPIO_Pin = GPIO_Pin_10;
	GPIO_InitStructure_b.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure_b.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure_b.GPIO_PuPd = GPIO_PuPd_DOWN;
	GPIO_InitStructure_b.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure_b);
 8000406:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOG, &GPIO_InitStructure);


	GPIO_InitTypeDef GPIO_InitStructure_b;
	GPIO_InitStructure_b.GPIO_Pin = GPIO_Pin_10;
 8000408:	f44f 6280 	mov.w	r2, #1024	; 0x400
	GPIO_InitStructure_b.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure_b.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure_b.GPIO_PuPd = GPIO_PuPd_DOWN;
 800040c:	2302      	movs	r3, #2
	GPIO_InitStructure_b.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure_b);
 800040e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000412:	a902      	add	r1, sp, #8
	GPIO_Init(GPIOG, &GPIO_InitStructure);


	GPIO_InitTypeDef GPIO_InitStructure_b;
	GPIO_InitStructure_b.GPIO_Pin = GPIO_Pin_10;
	GPIO_InitStructure_b.GPIO_Mode = GPIO_Mode_IN;
 8000414:	f88d 400c 	strb.w	r4, [sp, #12]
	GPIO_InitStructure_b.GPIO_OType = GPIO_OType_PP;
 8000418:	f88d 400e 	strb.w	r4, [sp, #14]
	GPIO_InitStructure_b.GPIO_PuPd = GPIO_PuPd_DOWN;
	GPIO_InitStructure_b.GPIO_Speed = GPIO_Speed_100MHz;
 800041c:	f88d 500d 	strb.w	r5, [sp, #13]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOG, &GPIO_InitStructure);


	GPIO_InitTypeDef GPIO_InitStructure_b;
	GPIO_InitStructure_b.GPIO_Pin = GPIO_Pin_10;
 8000420:	9202      	str	r2, [sp, #8]
	GPIO_InitStructure_b.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure_b.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure_b.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000422:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure_b.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure_b);
 8000426:	f000 f96b 	bl	8000700 <GPIO_Init>
}
 800042a:	b005      	add	sp, #20
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	bf00      	nop

08000430 <Interrupts_Configuration>:

void Interrupts_Configuration(void)
{
 8000430:	b510      	push	{r4, lr}
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	 
	/* Connect EXTI Line 0 to the button GPIO Pin */
   	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, GPIO_PinSource0);
 8000432:	2000      	movs	r0, #0
	GPIO_InitStructure_b.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure_b);
}

void Interrupts_Configuration(void)
{
 8000434:	b084      	sub	sp, #16
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	 
	/* Connect EXTI Line 0 to the button GPIO Pin */
   	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, GPIO_PinSource0);
 8000436:	4601      	mov	r1, r0
 8000438:	f000 ff64 	bl	8001304 <SYSCFG_EXTILineConfig>
 
	/* Configure the EXTI line to generate an interrupt when the button is
	 * pressed.  The button pin is high when pressed, so it needs to trigger
	 * when rising from low to high. */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 800043c:	2401      	movs	r4, #1
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800043e:	2200      	movs	r2, #0
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000440:	2310      	movs	r3, #16
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);
 8000442:	a802      	add	r0, sp, #8
 
	/* Configure the EXTI line to generate an interrupt when the button is
	 * pressed.  The button pin is high when pressed, so it needs to trigger
	 * when rising from low to high. */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000444:	f88d 200c 	strb.w	r2, [sp, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000448:	f88d 300d 	strb.w	r3, [sp, #13]
   	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, GPIO_PinSource0);
 
	/* Configure the EXTI line to generate an interrupt when the button is
	 * pressed.  The button pin is high when pressed, so it needs to trigger
	 * when rising from low to high. */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 800044c:	9402      	str	r4, [sp, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800044e:	f88d 400e 	strb.w	r4, [sp, #14]
	EXTI_Init(&EXTI_InitStructure);
 8000452:	f001 fe1b 	bl	800208c <EXTI_Init>
	 
	/* Enable and set Button EXTI Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000456:	230f      	movs	r3, #15
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);
	 
	/* Enable and set Button EXTI Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8000458:	2206      	movs	r2, #6
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800045a:	a801      	add	r0, sp, #4
	 
	/* Enable and set Button EXTI Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800045c:	f88d 4007 	strb.w	r4, [sp, #7]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);
	 
	/* Enable and set Button EXTI Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8000460:	f88d 2004 	strb.w	r2, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000464:	f88d 3005 	strb.w	r3, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8000468:	f88d 3006 	strb.w	r3, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800046c:	f000 f828 	bl	80004c0 <NVIC_Init>

}
 8000470:	b004      	add	sp, #16
 8000472:	bd10      	pop	{r4, pc}

08000474 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000474:	b508      	push	{r3, lr}
	if(EXTI_GetFlagStatus(EXTI_Line0) != RESET)
 8000476:	2001      	movs	r0, #1
 8000478:	f001 fe58 	bl	800212c <EXTI_GetFlagStatus>
 800047c:	b900      	cbnz	r0, 8000480 <EXTI0_IRQHandler+0xc>
 800047e:	bd08      	pop	{r3, pc}
	{
		//GPIO_ToggleBits(GPIOG, GPIO_Pin_13);

		GPIOG->ODR = GPIOA->IDR << 13;		
 8000480:	2200      	movs	r2, #0
 8000482:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000486:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800048a:	6912      	ldr	r2, [r2, #16]
 800048c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000490:	0352      	lsls	r2, r2, #13
 8000492:	615a      	str	r2, [r3, #20]
		EXTI_ClearITPendingBit(EXTI_Line0);
 8000494:	2001      	movs	r0, #1
	}
}
 8000496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if(EXTI_GetFlagStatus(EXTI_Line0) != RESET)
	{
		//GPIO_ToggleBits(GPIOG, GPIO_Pin_13);

		GPIOG->ODR = GPIOA->IDR << 13;		
		EXTI_ClearITPendingBit(EXTI_Line0);
 800049a:	f001 be61 	b.w	8002160 <EXTI_ClearITPendingBit>
 800049e:	bf00      	nop

080004a0 <main>:
}

uint8_t status = 0;

int main()
{
 80004a0:	b508      	push	{r3, lr}
	RCC_Configuration();
 80004a2:	f7ff ff8d 	bl	80003c0 <RCC_Configuration>
	GPIO_Configuration();
 80004a6:	f7ff ff97 	bl	80003d8 <GPIO_Configuration>
 80004aa:	e7fe      	b.n	80004aa <main+0xa>

080004ac <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80004ac:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80004b0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80004b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80004b8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80004bc:	60d8      	str	r0, [r3, #12]
 80004be:	4770      	bx	lr

080004c0 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80004c0:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80004c2:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80004c4:	b97b      	cbnz	r3, 80004e6 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004c6:	7802      	ldrb	r2, [r0, #0]
 80004c8:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80004cc:	0951      	lsrs	r1, r2, #5
 80004ce:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004d0:	f002 021f 	and.w	r2, r2, #31
 80004d4:	2001      	movs	r0, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004da:	fa00 f202 	lsl.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80004e2:	bc70      	pop	{r4, r5, r6}
 80004e4:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80004e6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80004ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80004ee:	7846      	ldrb	r6, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80004f0:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80004f2:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80004f4:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80004f6:	43d2      	mvns	r2, r2
 80004f8:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80004fc:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;
 8000500:	250f      	movs	r5, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000502:	b2c9      	uxtb	r1, r1
 8000504:	fa06 f101 	lsl.w	r1, r6, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000508:	fa45 f202 	asr.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800050c:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800050e:	4022      	ands	r2, r4
 8000510:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000512:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000516:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 800051a:	0112      	lsls	r2, r2, #4
 800051c:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800051e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000522:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000524:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000528:	f002 011f 	and.w	r1, r2, #31
 800052c:	2001      	movs	r0, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800052e:	0952      	lsrs	r2, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000530:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000534:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800053c:	bc70      	pop	{r4, r5, r6}
 800053e:	4770      	bx	lr

08000540 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000540:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000544:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000548:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800054c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000550:	4308      	orrs	r0, r1
 8000552:	6098      	str	r0, [r3, #8]
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000558:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800055c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000560:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000562:	b919      	cbnz	r1, 800056c <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000564:	ea22 0000 	bic.w	r0, r2, r0
 8000568:	6118      	str	r0, [r3, #16]
 800056a:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800056c:	4310      	orrs	r0, r2
 800056e:	6118      	str	r0, [r3, #16]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000574:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000578:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800057c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	bf0c      	ite	eq
 8000582:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000586:	f022 0204 	bicne.w	r2, r2, #4
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000590:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000592:	2300      	movs	r3, #0
 8000594:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000598:	4298      	cmp	r0, r3
 800059a:	d048      	beq.n	800062e <GPIO_DeInit+0x9e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 800059c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005a4:	4298      	cmp	r0, r3
 80005a6:	d04c      	beq.n	8000642 <GPIO_DeInit+0xb2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 80005a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005b0:	4298      	cmp	r0, r3
 80005b2:	d050      	beq.n	8000656 <GPIO_DeInit+0xc6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 80005b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005bc:	4298      	cmp	r0, r3
 80005be:	d054      	beq.n	800066a <GPIO_DeInit+0xda>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005c8:	4298      	cmp	r0, r3
 80005ca:	d058      	beq.n	800067e <GPIO_DeInit+0xee>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 80005cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005d4:	4298      	cmp	r0, r3
 80005d6:	d05c      	beq.n	8000692 <GPIO_DeInit+0x102>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 80005d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005e0:	4298      	cmp	r0, r3
 80005e2:	d060      	beq.n	80006a6 <GPIO_DeInit+0x116>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 80005e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80005e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005ec:	4298      	cmp	r0, r3
 80005ee:	d064      	beq.n	80006ba <GPIO_DeInit+0x12a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 80005f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005f8:	4298      	cmp	r0, r3
 80005fa:	d068      	beq.n	80006ce <GPIO_DeInit+0x13e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 80005fc:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000600:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000604:	4298      	cmp	r0, r3
 8000606:	d06e      	beq.n	80006e6 <GPIO_DeInit+0x156>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 8000608:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800060c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000610:	4298      	cmp	r0, r3
 8000612:	d000      	beq.n	8000616 <GPIO_DeInit+0x86>
 8000614:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 8000616:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800061a:	2101      	movs	r1, #1
 800061c:	f000 fb40 	bl	8000ca0 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 8000620:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000624:	2100      	movs	r1, #0
    }
  }
}
 8000626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 800062a:	f000 bb39 	b.w	8000ca0 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800062e:	2001      	movs	r0, #1
 8000630:	4601      	mov	r1, r0
 8000632:	f000 fb35 	bl	8000ca0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000636:	2001      	movs	r0, #1
 8000638:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800063a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800063e:	f000 bb2f 	b.w	8000ca0 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000642:	2002      	movs	r0, #2
 8000644:	2101      	movs	r1, #1
 8000646:	f000 fb2b 	bl	8000ca0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800064a:	2002      	movs	r0, #2
 800064c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800064e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000652:	f000 bb25 	b.w	8000ca0 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000656:	2004      	movs	r0, #4
 8000658:	2101      	movs	r1, #1
 800065a:	f000 fb21 	bl	8000ca0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800065e:	2004      	movs	r0, #4
 8000660:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000662:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000666:	f000 bb1b 	b.w	8000ca0 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800066a:	2008      	movs	r0, #8
 800066c:	2101      	movs	r1, #1
 800066e:	f000 fb17 	bl	8000ca0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000672:	2008      	movs	r0, #8
 8000674:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000676:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800067a:	f000 bb11 	b.w	8000ca0 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800067e:	2010      	movs	r0, #16
 8000680:	2101      	movs	r1, #1
 8000682:	f000 fb0d 	bl	8000ca0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000686:	2010      	movs	r0, #16
 8000688:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800068a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800068e:	f000 bb07 	b.w	8000ca0 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000692:	2020      	movs	r0, #32
 8000694:	2101      	movs	r1, #1
 8000696:	f000 fb03 	bl	8000ca0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800069a:	2020      	movs	r0, #32
 800069c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800069e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80006a2:	f000 bafd 	b.w	8000ca0 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80006a6:	2040      	movs	r0, #64	; 0x40
 80006a8:	2101      	movs	r1, #1
 80006aa:	f000 faf9 	bl	8000ca0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80006ae:	2040      	movs	r0, #64	; 0x40
 80006b0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80006b6:	f000 baf3 	b.w	8000ca0 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80006ba:	2080      	movs	r0, #128	; 0x80
 80006bc:	2101      	movs	r1, #1
 80006be:	f000 faef 	bl	8000ca0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80006c2:	2080      	movs	r0, #128	; 0x80
 80006c4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80006ca:	f000 bae9 	b.w	8000ca0 <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80006ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006d2:	2101      	movs	r1, #1
 80006d4:	f000 fae4 	bl	8000ca0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80006d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006dc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80006e2:	f000 badd 	b.w	8000ca0 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 80006e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ea:	2101      	movs	r1, #1
 80006ec:	f000 fad8 	bl	8000ca0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 80006f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 80006fa:	f000 bad1 	b.w	8000ca0 <RCC_AHB1PeriphResetCmd>
 80006fe:	bf00      	nop

08000700 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000700:	2200      	movs	r2, #0
 8000702:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000706:	4613      	mov	r3, r2
 8000708:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 800070a:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800070c:	f04f 0803 	mov.w	r8, #3
 8000710:	e004      	b.n	800071c <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000712:	3301      	adds	r3, #1
 8000714:	2b10      	cmp	r3, #16
 8000716:	f102 0202 	add.w	r2, r2, #2
 800071a:	d02e      	beq.n	800077a <GPIO_Init+0x7a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800071c:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000720:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 8000724:	42a5      	cmp	r5, r4
 8000726:	d1f4      	bne.n	8000712 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000728:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800072c:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000730:	fa08 f402 	lsl.w	r4, r8, r2
 8000734:	43e4      	mvns	r4, r4
 8000736:	ea04 0909 	and.w	r9, r4, r9
 800073a:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800073e:	f8d0 9000 	ldr.w	r9, [r0]
 8000742:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000746:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800074a:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800074e:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000752:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000756:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800075a:	d911      	bls.n	8000780 <GPIO_Init+0x80>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800075c:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800075e:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000762:	402c      	ands	r4, r5
 8000764:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000766:	68c5      	ldr	r5, [r0, #12]
 8000768:	fa0c f402 	lsl.w	r4, ip, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800076c:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800076e:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000770:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000772:	60c4      	str	r4, [r0, #12]
 8000774:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000778:	d1d0      	bne.n	800071c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800077a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800077e:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000780:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000784:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000788:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800078c:	ea04 0a0a 	and.w	sl, r4, sl
 8000790:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000794:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000798:	fa09 f902 	lsl.w	r9, r9, r2
 800079c:	ea49 090a 	orr.w	r9, r9, sl
 80007a0:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80007a4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80007a8:	ea29 0505 	bic.w	r5, r9, r5
 80007ac:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80007ae:	6845      	ldr	r5, [r0, #4]
 80007b0:	fa0c fc03 	lsl.w	ip, ip, r3
 80007b4:	fa1f fc8c 	uxth.w	ip, ip
 80007b8:	ea4c 0505 	orr.w	r5, ip, r5
 80007bc:	6045      	str	r5, [r0, #4]
 80007be:	e7cd      	b.n	800075c <GPIO_Init+0x5c>

080007c0 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80007c0:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80007c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c6:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80007c8:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80007ca:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80007cc:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80007ce:	71c3      	strb	r3, [r0, #7]
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop

080007d4 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007d4:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 80007d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007da:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80007dc:	9b01      	ldr	r3, [sp, #4]
 80007de:	430b      	orrs	r3, r1
 80007e0:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80007e2:	9b01      	ldr	r3, [sp, #4]
 80007e4:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80007e6:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80007e8:	9b01      	ldr	r3, [sp, #4]
 80007ea:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80007ec:	69c3      	ldr	r3, [r0, #28]
 80007ee:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80007f0:	69c3      	ldr	r3, [r0, #28]
 80007f2:	9301      	str	r3, [sp, #4]
}
 80007f4:	b002      	add	sp, #8
 80007f6:	4770      	bx	lr

080007f8 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80007f8:	6903      	ldr	r3, [r0, #16]
 80007fa:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80007fc:	bf0c      	ite	eq
 80007fe:	2000      	moveq	r0, #0
 8000800:	2001      	movne	r0, #1
 8000802:	4770      	bx	lr

08000804 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000804:	6900      	ldr	r0, [r0, #16]
}
 8000806:	b280      	uxth	r0, r0
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop

0800080c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 800080c:	6943      	ldr	r3, [r0, #20]
 800080e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000810:	bf0c      	ite	eq
 8000812:	2000      	moveq	r0, #0
 8000814:	2001      	movne	r0, #1
 8000816:	4770      	bx	lr

08000818 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000818:	6940      	ldr	r0, [r0, #20]
}
 800081a:	b280      	uxth	r0, r0
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000820:	8301      	strh	r1, [r0, #24]
 8000822:	4770      	bx	lr

08000824 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000824:	8341      	strh	r1, [r0, #26]
 8000826:	4770      	bx	lr

08000828 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000828:	b90a      	cbnz	r2, 800082e <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800082a:	8341      	strh	r1, [r0, #26]
 800082c:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 800082e:	8301      	strh	r1, [r0, #24]
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000834:	6141      	str	r1, [r0, #20]
 8000836:	4770      	bx	lr

08000838 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000838:	6943      	ldr	r3, [r0, #20]
 800083a:	4059      	eors	r1, r3
 800083c:	6141      	str	r1, [r0, #20]
 800083e:	4770      	bx	lr

08000840 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000840:	08cb      	lsrs	r3, r1, #3
 8000842:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000846:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800084a:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800084c:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800084e:	6a04      	ldr	r4, [r0, #32]
 8000850:	230f      	movs	r3, #15
 8000852:	408b      	lsls	r3, r1
 8000854:	ea24 0303 	bic.w	r3, r4, r3
 8000858:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800085a:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 800085c:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000860:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000862:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000864:	6203      	str	r3, [r0, #32]
}
 8000866:	4770      	bx	lr

08000868 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000868:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800086c:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000870:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000872:	6819      	ldr	r1, [r3, #0]
 8000874:	f041 0101 	orr.w	r1, r1, #1
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000878:	b430      	push	{r4, r5}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800087a:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800087c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800087e:	681d      	ldr	r5, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000880:	f44f 5040 	mov.w	r0, #12288	; 0x3000

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000884:	4601      	mov	r1, r0

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000886:	f243 0410 	movw	r4, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800088a:	f025 55a8 	bic.w	r5, r5, #352321536	; 0x15000000
 800088e:	f425 2510 	bic.w	r5, r5, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000892:	f2c2 4400 	movt	r4, #9216	; 0x2400

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000896:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800089a:	f2c2 0000 	movt	r0, #8192	; 0x2000

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800089e:	601d      	str	r5, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80008a0:	605c      	str	r4, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80008a2:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80008a6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008aa:	6819      	ldr	r1, [r3, #0]
 80008ac:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80008b0:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 

}
 80008b2:	bc30      	pop	{r4, r5}
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80008b4:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 80008b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 80008ba:	4770      	bx	lr

080008bc <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80008bc:	f643 0302 	movw	r3, #14338	; 0x3802
 80008c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80008c8:	7018      	strb	r0, [r3, #0]
 80008ca:	4770      	bx	lr

080008cc <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80008cc:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 80008ce:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80008d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 80008d4:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80008d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008da:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80008dc:	039b      	lsls	r3, r3, #14
 80008de:	d40f      	bmi.n	8000900 <RCC_WaitForHSEStartUp+0x34>
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 80008e0:	9b01      	ldr	r3, [sp, #4]
 80008e2:	3301      	adds	r3, #1
 80008e4:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80008e6:	9b01      	ldr	r3, [sp, #4]
 80008e8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80008ec:	d1f5      	bne.n	80008da <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80008ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008f6:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 80008f8:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 80008fc:	b002      	add	sp, #8
 80008fe:	4770      	bx	lr
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000900:	9b01      	ldr	r3, [sp, #4]
 8000902:	3301      	adds	r3, #1
 8000904:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000906:	9b01      	ldr	r3, [sp, #4]
 8000908:	e7f1      	b.n	80008ee <RCC_WaitForHSEStartUp+0x22>
 800090a:	bf00      	nop

0800090c <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800090c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000910:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000914:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000916:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800091a:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 800091e:	6018      	str	r0, [r3, #0]
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000924:	2300      	movs	r3, #0
 8000926:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800092a:	6018      	str	r0, [r3, #0]
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000930:	f643 0370 	movw	r3, #14448	; 0x3870
 8000934:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000938:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800093a:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800093c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800093e:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000940:	d005      	beq.n	800094e <RCC_LSEConfig+0x1e>
 8000942:	2804      	cmp	r0, #4
 8000944:	d102      	bne.n	800094c <RCC_LSEConfig+0x1c>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000946:	2205      	movs	r2, #5
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	4770      	bx	lr
 800094c:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800094e:	7018      	strb	r0, [r3, #0]
      break;
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000954:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8000958:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800095c:	6018      	str	r0, [r3, #0]
 800095e:	4770      	bx	lr

08000960 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000960:	b410      	push	{r4}
 8000962:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000964:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	4301      	orrs	r1, r0
 800096c:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8000970:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000974:	3b01      	subs	r3, #1
 8000976:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 800097a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800097e:	6063      	str	r3, [r4, #4]
                 (PLLQ << 24);
}
 8000980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000988:	2360      	movs	r3, #96	; 0x60
 800098a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800098e:	6018      	str	r0, [r3, #0]
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <RCC_PLLI2SConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 8000994:	0712      	lsls	r2, r2, #28
 8000996:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800099a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 800099e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009a2:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 80009a6:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 80009aa:	4770      	bx	lr

080009ac <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80009ac:	2368      	movs	r3, #104	; 0x68
 80009ae:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80009b2:	6018      	str	r0, [r3, #0]
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <RCC_PLLSAIConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 80009b8:	0712      	lsls	r2, r2, #28
 80009ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80009c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009c6:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 80009ca:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 80009ce:	4770      	bx	lr

080009d0 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 80009d0:	2370      	movs	r3, #112	; 0x70
 80009d2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80009d6:	6018      	str	r0, [r3, #0]
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80009dc:	234c      	movs	r3, #76	; 0x4c
 80009de:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80009e2:	6018      	str	r0, [r3, #0]
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 80009e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009f0:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80009f2:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80009f6:	4311      	orrs	r1, r2
 80009f8:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80009fa:	6098      	str	r0, [r3, #8]
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000a00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a08:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000a0a:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000a0e:	4311      	orrs	r1, r2
 8000a10:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000a12:	6098      	str	r0, [r3, #8]
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000a18:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a20:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000a22:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000a26:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a28:	6098      	str	r0, [r3, #8]
 8000a2a:	4770      	bx	lr

08000a2c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000a2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a34:	6898      	ldr	r0, [r3, #8]
}
 8000a36:	f000 000c 	and.w	r0, r0, #12
 8000a3a:	4770      	bx	lr

08000a3c <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000a3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a44:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000a46:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000a4a:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a4c:	6098      	str	r0, [r3, #8]
 8000a4e:	4770      	bx	lr

08000a50 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000a50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a58:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000a5a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000a5e:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a60:	6098      	str	r0, [r3, #8]
 8000a62:	4770      	bx	lr

08000a64 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000a64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a6c:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000a6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000a72:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a76:	6098      	str	r0, [r3, #8]
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a7c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a80:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a84:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8000a8c:	2a04      	cmp	r2, #4
 8000a8e:	d024      	beq.n	8000ada <RCC_GetClocksFreq+0x5e>
 8000a90:	2a08      	cmp	r2, #8
 8000a92:	d028      	beq.n	8000ae6 <RCC_GetClocksFreq+0x6a>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a94:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000a98:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8000a9c:	6001      	str	r1, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000a9e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000aa2:	f2c4 0202 	movt	r2, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000aa6:	f240 0314 	movw	r3, #20
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000aaa:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8000ab0:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000ab4:	5d1c      	ldrb	r4, [r3, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000ab6:	40e1      	lsrs	r1, r4
 8000ab8:	6041      	str	r1, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000aba:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 8000abc:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000ac0:	5d1c      	ldrb	r4, [r3, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ac2:	fa21 f404 	lsr.w	r4, r1, r4
 8000ac6:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000ac8:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 8000aca:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 8000ace:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000ad2:	5c9b      	ldrb	r3, [r3, r2]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ad4:	40d9      	lsrs	r1, r3
 8000ad6:	60c1      	str	r1, [r0, #12]
}
 8000ad8:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000ada:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000ade:	f2c0 017a 	movt	r1, #122	; 0x7a
 8000ae2:	6001      	str	r1, [r0, #0]
      break;
 8000ae4:	e7db      	b.n	8000a9e <RCC_GetClocksFreq+0x22>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000ae6:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ae8:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8000aea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000aee:	685c      	ldr	r4, [r3, #4]
 8000af0:	bf15      	itete	ne
 8000af2:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000af6:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000afa:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000afe:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000b06:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b0a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000b12:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b1c:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000b1e:	fb01 f104 	mul.w	r1, r1, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b22:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000b24:	fbb1 f1f3 	udiv	r1, r1, r3
 8000b28:	6001      	str	r1, [r0, #0]
      break;
 8000b2a:	e7b8      	b.n	8000a9e <RCC_GetClocksFreq+0x22>

08000b2c <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000b2c:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000b30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000b34:	d10c      	bne.n	8000b50 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000b36:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b3a:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000b3e:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000b42:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000b44:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000b48:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000b4c:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000b4e:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000b50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b58:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000b5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b5e:	4310      	orrs	r0, r2
 8000b60:	6718      	str	r0, [r3, #112]	; 0x70
 8000b62:	4770      	bx	lr

08000b64 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000b64:	f640 633c 	movw	r3, #3644	; 0xe3c
 8000b68:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000b6c:	6018      	str	r0, [r3, #0]
 8000b6e:	4770      	bx	lr

08000b70 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000b70:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000b74:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000b78:	6018      	str	r0, [r3, #0]
 8000b7a:	4770      	bx	lr

08000b7c <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000b7c:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8000b80:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000b84:	6018      	str	r0, [r3, #0]
 8000b86:	4770      	bx	lr

08000b88 <RCC_SAIPLLI2SClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000b88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b8c:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000b90:	3801      	subs	r0, #1
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000b92:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8000b96:	f022 021f 	bic.w	r2, r2, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000b9a:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000b9c:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <RCC_SAIPLLSAIClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000ba4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ba8:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000bac:	3801      	subs	r0, #1
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000bae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8000bb2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000bb6:	ea42 2000 	orr.w	r0, r2, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000bba:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000bbe:	4770      	bx	lr

08000bc0 <RCC_SAIBlockACLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000bc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8000bcc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8000bd0:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000bd2:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000bd6:	4770      	bx	lr

08000bd8 <RCC_SAIBlockBCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000bd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000be0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 8000be4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 8000be8:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000bea:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000bee:	4770      	bx	lr

08000bf0 <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8000bf0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bf4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8000bfc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8000c00:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000c02:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000c06:	4770      	bx	lr

08000c08 <RCC_TIMCLKPresConfig>:
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8000c08:	f44f 538f 	mov.w	r3, #4576	; 0x11e0
 8000c0c:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8000c10:	6018      	str	r0, [r3, #0]
 8000c12:	4770      	bx	lr

08000c14 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000c14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c1e:	b919      	cbnz	r1, 8000c28 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000c20:	ea22 0000 	bic.w	r0, r2, r0
 8000c24:	6318      	str	r0, [r3, #48]	; 0x30
 8000c26:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000c28:	4310      	orrs	r0, r2
 8000c2a:	6318      	str	r0, [r3, #48]	; 0x30
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000c30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c3a:	b919      	cbnz	r1, 8000c44 <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000c3c:	ea22 0000 	bic.w	r0, r2, r0
 8000c40:	6358      	str	r0, [r3, #52]	; 0x34
 8000c42:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000c44:	4310      	orrs	r0, r2
 8000c46:	6358      	str	r0, [r3, #52]	; 0x34
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000c4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c56:	b919      	cbnz	r1, 8000c60 <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000c58:	ea22 0000 	bic.w	r0, r2, r0
 8000c5c:	6398      	str	r0, [r3, #56]	; 0x38
 8000c5e:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000c60:	4310      	orrs	r0, r2
 8000c62:	6398      	str	r0, [r3, #56]	; 0x38
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c72:	b919      	cbnz	r1, 8000c7c <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000c74:	ea22 0000 	bic.w	r0, r2, r0
 8000c78:	6418      	str	r0, [r3, #64]	; 0x40
 8000c7a:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c7c:	4310      	orrs	r0, r2
 8000c7e:	6418      	str	r0, [r3, #64]	; 0x40
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c8e:	b919      	cbnz	r1, 8000c98 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c90:	ea22 0000 	bic.w	r0, r2, r0
 8000c94:	6458      	str	r0, [r3, #68]	; 0x44
 8000c96:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c98:	4310      	orrs	r0, r2
 8000c9a:	6458      	str	r0, [r3, #68]	; 0x44
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000ca0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ca4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ca8:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000caa:	b919      	cbnz	r1, 8000cb4 <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000cac:	ea22 0000 	bic.w	r0, r2, r0
 8000cb0:	6118      	str	r0, [r3, #16]
 8000cb2:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000cb4:	4310      	orrs	r0, r2
 8000cb6:	6118      	str	r0, [r3, #16]
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000cbc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cc4:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cc6:	b919      	cbnz	r1, 8000cd0 <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000cc8:	ea22 0000 	bic.w	r0, r2, r0
 8000ccc:	6158      	str	r0, [r3, #20]
 8000cce:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000cd0:	4310      	orrs	r0, r2
 8000cd2:	6158      	str	r0, [r3, #20]
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000cd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ce0:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ce2:	b919      	cbnz	r1, 8000cec <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000ce4:	ea22 0000 	bic.w	r0, r2, r0
 8000ce8:	6198      	str	r0, [r3, #24]
 8000cea:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000cec:	4310      	orrs	r0, r2
 8000cee:	6198      	str	r0, [r3, #24]
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000cf4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cfc:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cfe:	b919      	cbnz	r1, 8000d08 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000d00:	ea22 0000 	bic.w	r0, r2, r0
 8000d04:	6218      	str	r0, [r3, #32]
 8000d06:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000d08:	4310      	orrs	r0, r2
 8000d0a:	6218      	str	r0, [r3, #32]
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000d10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d1a:	b919      	cbnz	r1, 8000d24 <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000d1c:	ea22 0000 	bic.w	r0, r2, r0
 8000d20:	6258      	str	r0, [r3, #36]	; 0x24
 8000d22:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000d24:	4310      	orrs	r0, r2
 8000d26:	6258      	str	r0, [r3, #36]	; 0x24
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000d2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d36:	b919      	cbnz	r1, 8000d40 <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000d38:	ea22 0000 	bic.w	r0, r2, r0
 8000d3c:	6518      	str	r0, [r3, #80]	; 0x50
 8000d3e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000d40:	4310      	orrs	r0, r2
 8000d42:	6518      	str	r0, [r3, #80]	; 0x50
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000d48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d52:	b919      	cbnz	r1, 8000d5c <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000d54:	ea22 0000 	bic.w	r0, r2, r0
 8000d58:	6558      	str	r0, [r3, #84]	; 0x54
 8000d5a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000d5c:	4310      	orrs	r0, r2
 8000d5e:	6558      	str	r0, [r3, #84]	; 0x54
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000d64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d6e:	b919      	cbnz	r1, 8000d78 <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000d70:	ea22 0000 	bic.w	r0, r2, r0
 8000d74:	6598      	str	r0, [r3, #88]	; 0x58
 8000d76:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000d78:	4310      	orrs	r0, r2
 8000d7a:	6598      	str	r0, [r3, #88]	; 0x58
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000d80:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d8a:	b919      	cbnz	r1, 8000d94 <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8000d8c:	ea22 0000 	bic.w	r0, r2, r0
 8000d90:	6618      	str	r0, [r3, #96]	; 0x60
 8000d92:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000d94:	4310      	orrs	r0, r2
 8000d96:	6618      	str	r0, [r3, #96]	; 0x60
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000d9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000da4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000da6:	b919      	cbnz	r1, 8000db0 <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8000da8:	ea22 0000 	bic.w	r0, r2, r0
 8000dac:	6658      	str	r0, [r3, #100]	; 0x64
 8000dae:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000db0:	4310      	orrs	r0, r2
 8000db2:	6658      	str	r0, [r3, #100]	; 0x64
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000db8:	f643 030d 	movw	r3, #14349	; 0x380d
 8000dbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dc0:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dc2:	b919      	cbnz	r1, 8000dcc <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000dc4:	ea22 0000 	bic.w	r0, r2, r0
 8000dc8:	7018      	strb	r0, [r3, #0]
 8000dca:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000dcc:	4310      	orrs	r0, r2
 8000dce:	7018      	strb	r0, [r3, #0]
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000dd4:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d00e      	beq.n	8000df8 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000dda:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000ddc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000de0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000de4:	f000 001f 	and.w	r0, r0, #31
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 8000de8:	bf0c      	ite	eq
 8000dea:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000dec:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000dee:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000df2:	f000 0001 	and.w	r0, r0, #1
 8000df6:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000df8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000dfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000e00:	f000 001f 	and.w	r0, r0, #31

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000e04:	681b      	ldr	r3, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000e06:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000e0a:	f000 0001 	and.w	r0, r0, #1
 8000e0e:	4770      	bx	lr

08000e10 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000e10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e18:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000e1a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e1e:	675a      	str	r2, [r3, #116]	; 0x74
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000e24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000e30:	bf0c      	ite	eq
 8000e32:	2000      	moveq	r0, #0
 8000e34:	2001      	movne	r0, #1
 8000e36:	4770      	bx	lr

08000e38 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000e38:	f643 030e 	movw	r3, #14350	; 0x380e
 8000e3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e40:	7018      	strb	r0, [r3, #0]
 8000e42:	4770      	bx	lr

08000e44 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000e44:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e4e:	4298      	cmp	r0, r3
 8000e50:	d036      	beq.n	8000ec0 <USART_DeInit+0x7c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8000e52:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000e56:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d03a      	beq.n	8000ed4 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8000e5e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000e62:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e66:	4298      	cmp	r0, r3
 8000e68:	d040      	beq.n	8000eec <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8000e6a:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000e6e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e72:	4298      	cmp	r0, r3
 8000e74:	d046      	beq.n	8000f04 <USART_DeInit+0xc0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8000e76:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000e7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d04c      	beq.n	8000f1c <USART_DeInit+0xd8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
 8000e82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e86:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d052      	beq.n	8000f34 <USART_DeInit+0xf0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
 8000e8e:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000e92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e96:	4298      	cmp	r0, r3
 8000e98:	d056      	beq.n	8000f48 <USART_DeInit+0x104>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
  }     
  else
  {
    if (USARTx == UART8)
 8000e9a:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000e9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ea2:	4298      	cmp	r0, r3
 8000ea4:	d000      	beq.n	8000ea8 <USART_DeInit+0x64>
 8000ea6:	bd08      	pop	{r3, pc}
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8000ea8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000eac:	2101      	movs	r1, #1
 8000eae:	f7ff ff21 	bl	8000cf4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8000eb2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000eb6:	2100      	movs	r1, #0
    }
  }
}
 8000eb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART8)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8000ebc:	f7ff bf1a 	b.w	8000cf4 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000ec0:	2010      	movs	r0, #16
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	f7ff ff24 	bl	8000d10 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000ec8:	2010      	movs	r0, #16
 8000eca:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000ecc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000ed0:	f7ff bf1e 	b.w	8000d10 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000ed4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ed8:	2101      	movs	r1, #1
 8000eda:	f7ff ff0b 	bl	8000cf4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000ede:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ee2:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000ee4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000ee8:	f7ff bf04 	b.w	8000cf4 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000eec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	f7ff feff 	bl	8000cf4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000ef6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000efa:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000efc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000f00:	f7ff bef8 	b.w	8000cf4 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000f04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f08:	2101      	movs	r1, #1
 8000f0a:	f7ff fef3 	bl	8000cf4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000f0e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f12:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000f18:	f7ff beec 	b.w	8000cf4 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000f1c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f20:	2101      	movs	r1, #1
 8000f22:	f7ff fee7 	bl	8000cf4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000f26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f2a:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000f30:	f7ff bee0 	b.w	8000cf4 <RCC_APB1PeriphResetCmd>
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8000f34:	2020      	movs	r0, #32
 8000f36:	2101      	movs	r1, #1
 8000f38:	f7ff feea 	bl	8000d10 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000f3c:	2020      	movs	r0, #32
 8000f3e:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000f44:	f7ff bee4 	b.w	8000d10 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8000f48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	f7ff fed1 	bl	8000cf4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8000f52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f56:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8000f5c:	f7ff beca 	b.w	8000cf4 <RCC_APB1PeriphResetCmd>

08000f60 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000f60:	8a02      	ldrh	r2, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000f62:	88cb      	ldrh	r3, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000f64:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f68:	0412      	lsls	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f6a:	b5f0      	push	{r4, r5, r6, r7, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000f6c:	0c12      	lsrs	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f6e:	4604      	mov	r4, r0
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f70:	431a      	orrs	r2, r3

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f72:	890f      	ldrh	r7, [r1, #8]
 8000f74:	888e      	ldrh	r6, [r1, #4]
 8000f76:	8948      	ldrh	r0, [r1, #10]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f78:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000f7a:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f7c:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000f7e:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000f80:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f84:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000f88:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f8c:	4302      	orrs	r2, r0

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000f8e:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f90:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000f92:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000f94:	4313      	orrs	r3, r2
 8000f96:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000f98:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	0c1b      	lsrs	r3, r3, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000fa2:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000fa8:	4668      	mov	r0, sp
 8000faa:	f7ff fd67 	bl	8000a7c <RCC_GetClocksFreq>
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fae:	89a6      	ldrh	r6, [r4, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000fb0:	9802      	ldr	r0, [sp, #8]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000fb2:	9b03      	ldr	r3, [sp, #12]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
 8000fb4:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000fb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fbc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000fc0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000fc4:	4294      	cmp	r4, r2
 8000fc6:	bf18      	it	ne
 8000fc8:	428c      	cmpne	r4, r1
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fca:	b232      	sxth	r2, r6
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000fcc:	bf18      	it	ne
 8000fce:	4603      	movne	r3, r0
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fd0:	2a00      	cmp	r2, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000fd2:	682a      	ldr	r2, [r5, #0]

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fd4:	89a0      	ldrh	r0, [r4, #12]
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000fd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fda:	bfb4      	ite	lt
 8000fdc:	0052      	lsllt	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000fde:	0092      	lslge	r2, r2, #2
 8000fe0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fe4:	fbb3 f3f2 	udiv	r3, r3, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8000fe8:	f248 521f 	movw	r2, #34079	; 0x851f
 8000fec:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 8000ff0:	fba2 5103 	umull	r5, r1, r2, r3

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000ff4:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000ff6:	2564      	movs	r5, #100	; 0x64
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8000ff8:	0949      	lsrs	r1, r1, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000ffa:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000ffc:	fb01 3315 	mls	r3, r1, r5, r3

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001000:	bfb5      	itete	lt
 8001002:	00db      	lsllt	r3, r3, #3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001004:	011b      	lslge	r3, r3, #4
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001006:	3332      	addlt	r3, #50	; 0x32
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001008:	3332      	addge	r3, #50	; 0x32
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800100a:	bfb5      	itete	lt
 800100c:	fba2 0203 	umulllt	r0, r2, r2, r3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001010:	fba2 5203 	umullge	r5, r2, r2, r3
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001014:	f3c2 1242 	ubfxlt	r2, r2, #5, #3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001018:	f3c2 1243 	ubfxge	r2, r2, #5, #4
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800101c:	0109      	lsls	r1, r1, #4
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800101e:	4311      	orrs	r1, r2
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001020:	b289      	uxth	r1, r1
 8001022:	8121      	strh	r1, [r4, #8]
}
 8001024:	b005      	add	sp, #20
 8001026:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001028 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001028:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800102a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800102e:	220c      	movs	r2, #12
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001030:	6001      	str	r1, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001032:	8142      	strh	r2, [r0, #10]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001034:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8001036:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8001038:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800103a:	8183      	strh	r3, [r0, #12]
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001040:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001042:	880a      	ldrh	r2, [r1, #0]
 8001044:	884d      	ldrh	r5, [r1, #2]
 8001046:	888c      	ldrh	r4, [r1, #4]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001048:	8a03      	ldrh	r3, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800104a:	88c9      	ldrh	r1, [r1, #6]
 800104c:	432a      	orrs	r2, r5
 800104e:	4322      	orrs	r2, r4
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001050:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001054:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001056:	041b      	lsls	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001058:	b292      	uxth	r2, r2
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800105a:	0c1b      	lsrs	r3, r3, #16
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800105c:	4313      	orrs	r3, r2
 800105e:	8203      	strh	r3, [r0, #16]
}
 8001060:	bc30      	pop	{r4, r5}
 8001062:	4770      	bx	lr

08001064 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001064:	2300      	movs	r3, #0
 8001066:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001068:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800106a:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800106c:	80c3      	strh	r3, [r0, #6]
 800106e:	4770      	bx	lr

08001070 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001070:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001072:	b929      	cbnz	r1, 8001080 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001078:	041b      	lsls	r3, r3, #16
 800107a:	0c1b      	lsrs	r3, r3, #16
 800107c:	8183      	strh	r3, [r0, #12]
 800107e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001080:	b29b      	uxth	r3, r3
 8001082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001086:	8183      	strh	r3, [r0, #12]
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800108c:	8b03      	ldrh	r3, [r0, #24]
 800108e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001092:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001094:	8b03      	ldrh	r3, [r0, #24]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4319      	orrs	r1, r3
 800109a:	8301      	strh	r1, [r0, #24]
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80010a0:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010a2:	b919      	cbnz	r1, 80010ac <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80010a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010a8:	8183      	strh	r3, [r0, #12]
 80010aa:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80010ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	8183      	strh	r3, [r0, #12]
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80010bc:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010be:	b929      	cbnz	r1, 80010cc <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 80010c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010c4:	041b      	lsls	r3, r3, #16
 80010c6:	0c1b      	lsrs	r3, r3, #16
 80010c8:	8283      	strh	r3, [r0, #20]
 80010ca:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010d2:	8283      	strh	r3, [r0, #20]
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80010d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80010dc:	8081      	strh	r1, [r0, #4]
 80010de:	4770      	bx	lr

080010e0 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80010e0:	8880      	ldrh	r0, [r0, #4]
}
 80010e2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80010e6:	4770      	bx	lr

080010e8 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80010e8:	8a03      	ldrh	r3, [r0, #16]
 80010ea:	f023 030f 	bic.w	r3, r3, #15
 80010ee:	041b      	lsls	r3, r3, #16
 80010f0:	0c1b      	lsrs	r3, r3, #16
 80010f2:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80010f4:	8a03      	ldrh	r3, [r0, #16]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4319      	orrs	r1, r3
 80010fa:	8201      	strh	r1, [r0, #16]
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001100:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001102:	b929      	cbnz	r1, 8001110 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8001104:	f023 0302 	bic.w	r3, r3, #2
 8001108:	041b      	lsls	r3, r3, #16
 800110a:	0c1b      	lsrs	r3, r3, #16
 800110c:	8183      	strh	r3, [r0, #12]
 800110e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001110:	b29b      	uxth	r3, r3
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	8183      	strh	r3, [r0, #12]
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800111c:	8983      	ldrh	r3, [r0, #12]
 800111e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001122:	041b      	lsls	r3, r3, #16
 8001124:	0c1b      	lsrs	r3, r3, #16
 8001126:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8001128:	8983      	ldrh	r3, [r0, #12]
 800112a:	b29b      	uxth	r3, r3
 800112c:	4319      	orrs	r1, r3
 800112e:	8181      	strh	r1, [r0, #12]
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8001134:	8a03      	ldrh	r3, [r0, #16]
 8001136:	f023 0320 	bic.w	r3, r3, #32
 800113a:	041b      	lsls	r3, r3, #16
 800113c:	0c1b      	lsrs	r3, r3, #16
 800113e:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001140:	8a03      	ldrh	r3, [r0, #16]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4319      	orrs	r1, r3
 8001146:	8201      	strh	r1, [r0, #16]
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800114c:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800114e:	b929      	cbnz	r1, 800115c <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8001150:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001154:	041b      	lsls	r3, r3, #16
 8001156:	0c1b      	lsrs	r3, r3, #16
 8001158:	8203      	strh	r3, [r0, #16]
 800115a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800115c:	b29b      	uxth	r3, r3
 800115e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001162:	8203      	strh	r3, [r0, #16]
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop

08001168 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8001168:	8983      	ldrh	r3, [r0, #12]
 800116a:	b29b      	uxth	r3, r3
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	8183      	strh	r3, [r0, #12]
 8001172:	4770      	bx	lr

08001174 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001174:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001176:	b929      	cbnz	r1, 8001184 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8001178:	f023 0308 	bic.w	r3, r3, #8
 800117c:	041b      	lsls	r3, r3, #16
 800117e:	0c1b      	lsrs	r3, r3, #16
 8001180:	8283      	strh	r3, [r0, #20]
 8001182:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001184:	b29b      	uxth	r3, r3
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	8283      	strh	r3, [r0, #20]
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001190:	8b03      	ldrh	r3, [r0, #24]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001196:	8b03      	ldrh	r3, [r0, #24]
 8001198:	b29b      	uxth	r3, r3
 800119a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800119e:	8301      	strh	r1, [r0, #24]
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80011a4:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011a6:	b929      	cbnz	r1, 80011b4 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 80011a8:	f023 0320 	bic.w	r3, r3, #32
 80011ac:	041b      	lsls	r3, r3, #16
 80011ae:	0c1b      	lsrs	r3, r3, #16
 80011b0:	8283      	strh	r3, [r0, #20]
 80011b2:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	f043 0320 	orr.w	r3, r3, #32
 80011ba:	8283      	strh	r3, [r0, #20]
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80011c0:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011c2:	b929      	cbnz	r1, 80011d0 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 80011c4:	f023 0310 	bic.w	r3, r3, #16
 80011c8:	041b      	lsls	r3, r3, #16
 80011ca:	0c1b      	lsrs	r3, r3, #16
 80011cc:	8283      	strh	r3, [r0, #20]
 80011ce:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	8283      	strh	r3, [r0, #20]
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80011dc:	8a83      	ldrh	r3, [r0, #20]
 80011de:	f023 0304 	bic.w	r3, r3, #4
 80011e2:	041b      	lsls	r3, r3, #16
 80011e4:	0c1b      	lsrs	r3, r3, #16
 80011e6:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80011e8:	8a83      	ldrh	r3, [r0, #20]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4319      	orrs	r1, r3
 80011ee:	8281      	strh	r1, [r0, #20]
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80011f4:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80011f6:	b929      	cbnz	r1, 8001204 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80011f8:	f023 0302 	bic.w	r3, r3, #2
 80011fc:	041b      	lsls	r3, r3, #16
 80011fe:	0c1b      	lsrs	r3, r3, #16
 8001200:	8283      	strh	r3, [r0, #20]
 8001202:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001204:	b29b      	uxth	r3, r3
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	8283      	strh	r3, [r0, #20]
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop

08001210 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001210:	8a83      	ldrh	r3, [r0, #20]
 8001212:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001214:	b91a      	cbnz	r2, 800121e <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001216:	ea23 0101 	bic.w	r1, r3, r1
 800121a:	8281      	strh	r1, [r0, #20]
 800121c:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800121e:	4319      	orrs	r1, r3
 8001220:	8281      	strh	r1, [r0, #20]
 8001222:	4770      	bx	lr

08001224 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001224:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001228:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800122a:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800122e:	2401      	movs	r4, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001230:	42a1      	cmp	r1, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001232:	fa04 f303 	lsl.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8001236:	bf08      	it	eq
 8001238:	300c      	addeq	r0, #12

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800123a:	d003      	beq.n	8001244 <USART_ITConfig+0x20>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800123c:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 800123e:	bf0c      	ite	eq
 8001240:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001242:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001244:	6804      	ldr	r4, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8001246:	b92a      	cbnz	r2, 8001254 <USART_ITConfig+0x30>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001248:	ea24 0303 	bic.w	r3, r4, r3
 800124c:	6003      	str	r3, [r0, #0]
  }
}
 800124e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001252:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001254:	4323      	orrs	r3, r4
 8001256:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001260:	8803      	ldrh	r3, [r0, #0]
 8001262:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001264:	bf0c      	ite	eq
 8001266:	2000      	moveq	r0, #0
 8001268:	2001      	movne	r0, #1
 800126a:	4770      	bx	lr

0800126c <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800126c:	43c9      	mvns	r1, r1
 800126e:	b289      	uxth	r1, r1
 8001270:	8001      	strh	r1, [r0, #0]
 8001272:	4770      	bx	lr

08001274 <USART_GetITStatus>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001274:	f3c1 1342 	ubfx	r3, r1, #5, #3
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001278:	b430      	push	{r4, r5}
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800127a:	f001 021f 	and.w	r2, r1, #31
 800127e:	2401      	movs	r4, #1
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001280:	2b01      	cmp	r3, #1
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001282:	fa04 f402 	lsl.w	r4, r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001286:	d016      	beq.n	80012b6 <USART_GetITStatus+0x42>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001288:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 800128a:	bf0c      	ite	eq
 800128c:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800128e:	8a82      	ldrhne	r2, [r0, #20]
 8001290:	b292      	uxth	r2, r2
 8001292:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001294:	8803      	ldrh	r3, [r0, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8001296:	2501      	movs	r5, #1
 8001298:	0a09      	lsrs	r1, r1, #8
 800129a:	fa05 f101 	lsl.w	r1, r5, r1
  bitpos &= USARTx->SR;
 800129e:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80012a0:	4219      	tst	r1, r3
 80012a2:	bf0c      	ite	eq
 80012a4:	2000      	moveq	r0, #0
 80012a6:	2001      	movne	r0, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2000      	moveq	r0, #0
 80012ae:	f000 0001 	andne.w	r0, r0, #1
 80012b2:	bc30      	pop	{r4, r5}
 80012b4:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80012b6:	8982      	ldrh	r2, [r0, #12]
 80012b8:	b292      	uxth	r2, r2
 80012ba:	4022      	ands	r2, r4
 80012bc:	e7ea      	b.n	8001294 <USART_GetITStatus+0x20>
 80012be:	bf00      	nop

080012c0 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80012c0:	0a09      	lsrs	r1, r1, #8
 80012c2:	2301      	movs	r3, #1
 80012c4:	fa03 f101 	lsl.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 80012c8:	43c9      	mvns	r1, r1
 80012ca:	b289      	uxth	r1, r1
 80012cc:	8001      	strh	r1, [r0, #0]
 80012ce:	4770      	bx	lr

080012d0 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80012d0:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80012d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012d6:	2101      	movs	r1, #1
 80012d8:	f7ff fd1a 	bl	8000d10 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80012dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012e0:	2100      	movs	r1, #0
}
 80012e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80012e6:	f7ff bd13 	b.w	8000d10 <RCC_APB2PeriphResetCmd>
 80012ea:	bf00      	nop

080012ec <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 80012ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80012f4:	6018      	str	r0, [r3, #0]
 80012f6:	4770      	bx	lr

080012f8 <SYSCFG_MemorySwappingBank>:
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 80012f8:	2320      	movs	r3, #32
 80012fa:	f2c4 2327 	movt	r3, #16935	; 0x4227
 80012fe:	6018      	str	r0, [r3, #0]
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001304:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8001308:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800130c:	f503 339c 	add.w	r3, r3, #79872	; 0x13800

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001310:	f001 0103 	and.w	r1, r1, #3
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001314:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001316:	0089      	lsls	r1, r1, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001318:	689c      	ldr	r4, [r3, #8]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800131a:	220f      	movs	r2, #15
 800131c:	408a      	lsls	r2, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800131e:	ea24 0202 	bic.w	r2, r4, r2
 8001322:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001324:	689a      	ldr	r2, [r3, #8]
}
 8001326:	f85d 4b04 	ldr.w	r4, [sp], #4
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800132a:	4088      	lsls	r0, r1
 800132c:	4302      	orrs	r2, r0
 800132e:	609a      	str	r2, [r3, #8]
}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8001334:	23dc      	movs	r3, #220	; 0xdc
 8001336:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800133a:	6018      	str	r0, [r3, #0]
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8001340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001344:	f2c4 2327 	movt	r3, #16935	; 0x4227
 8001348:	6018      	str	r0, [r3, #0]
 800134a:	4770      	bx	lr

0800134c <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800134c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001350:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001354:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001356:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800135a:	4770      	bx	lr

0800135c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800135c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800135e:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001362:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001366:	4298      	cmp	r0, r3
 8001368:	d018      	beq.n	800139c <I2C_DeInit+0x40>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 800136a:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800136e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001372:	4298      	cmp	r0, r3
 8001374:	d01e      	beq.n	80013b4 <I2C_DeInit+0x58>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 8001376:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800137a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800137e:	4298      	cmp	r0, r3
 8001380:	d000      	beq.n	8001384 <I2C_DeInit+0x28>
 8001382:	bd08      	pop	{r3, pc}
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8001384:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001388:	2101      	movs	r1, #1
 800138a:	f7ff fcb3 	bl	8000cf4 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800138e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001392:	2100      	movs	r1, #0
    }
  }
}
 8001394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8001398:	f7ff bcac 	b.w	8000cf4 <RCC_APB1PeriphResetCmd>
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800139c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80013a0:	2101      	movs	r1, #1
 80013a2:	f7ff fca7 	bl	8000cf4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80013a6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80013aa:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80013ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80013b0:	f7ff bca0 	b.w	8000cf4 <RCC_APB1PeriphResetCmd>
  }
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80013b4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80013b8:	2101      	movs	r1, #1
 80013ba:	f7ff fc9b 	bl	8000cf4 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80013be:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80013c2:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80013c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80013c8:	f7ff bc94 	b.w	8000cf4 <RCC_APB1PeriphResetCmd>

080013cc <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	4604      	mov	r4, r0
 80013d0:	b085      	sub	sp, #20
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80013d2:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80013d4:	460d      	mov	r5, r1
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80013d6:	88a6      	ldrh	r6, [r4, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80013d8:	f7ff fb50 	bl	8000a7c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80013dc:	f64d 6383 	movw	r3, #56963	; 0xde83
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80013e0:	9902      	ldr	r1, [sp, #8]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80013e2:	682a      	ldr	r2, [r5, #0]
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80013e4:	f2c4 331b 	movt	r3, #17179	; 0x431b
 80013e8:	fba3 0301 	umull	r0, r3, r3, r1

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80013ec:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80013f0:	0c9f      	lsrs	r7, r3, #18

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80013f2:	0436      	lsls	r6, r6, #16
 80013f4:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80013f6:	fa1f fc87 	uxth.w	ip, r7
  tmpreg |= freqrange;
 80013fa:	ea4c 0606 	orr.w	r6, ip, r6
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80013fe:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001400:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001402:	f248 60a0 	movw	r0, #34464	; 0x86a0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	041b      	lsls	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800140c:	f2c0 0001 	movt	r0, #1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001410:	0c1b      	lsrs	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001412:	4282      	cmp	r2, r0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001414:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001416:	d824      	bhi.n	8001462 <I2C_Init+0x96>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001418:	0053      	lsls	r3, r2, #1
 800141a:	fbb1 f3f3 	udiv	r3, r1, r3
 800141e:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001420:	f10c 0c01 	add.w	ip, ip, #1
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8001424:	2b03      	cmp	r3, #3
 8001426:	bf98      	it	ls
 8001428:	2304      	movls	r3, #4
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800142a:	f8a4 c020 	strh.w	ip, [r4, #32]
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800142e:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001430:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001432:	896e      	ldrh	r6, [r5, #10]
 8001434:	88a8      	ldrh	r0, [r5, #4]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001436:	8929      	ldrh	r1, [r5, #8]
 8001438:	89aa      	ldrh	r2, [r5, #12]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800143a:	b29b      	uxth	r3, r3
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001442:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001444:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001448:	f023 0302 	bic.w	r3, r3, #2
 800144c:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800144e:	4330      	orrs	r0, r6

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001450:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001452:	4303      	orrs	r3, r0
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001454:	430a      	orrs	r2, r1
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001456:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001458:	b292      	uxth	r2, r2
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800145a:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800145c:	8122      	strh	r2, [r4, #8]
}
 800145e:	b005      	add	sp, #20
 8001460:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001462:	88e8      	ldrh	r0, [r5, #6]
 8001464:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001468:	4298      	cmp	r0, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800146a:	bf1d      	ittte	ne
 800146c:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 8001470:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 8001474:	fbb1 f3f2 	udivne	r3, r1, r2
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001478:	eb02 0242 	addeq.w	r2, r2, r2, lsl #1
 800147c:	bf0b      	itete	eq
 800147e:	fbb1 f3f2 	udiveq	r3, r1, r2
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001482:	b29b      	uxthne	r3, r3
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001484:	b29b      	uxtheq	r3, r3
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001486:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800148a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800148e:	b90a      	cbnz	r2, 8001494 <I2C_Init+0xc8>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001490:	f043 0301 	orr.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001494:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001498:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 800149c:	fb01 f707 	mul.w	r7, r1, r7
 80014a0:	f2c1 0262 	movt	r2, #4194	; 0x1062
 80014a4:	fb82 1207 	smull	r1, r2, r2, r7
 80014a8:	0992      	lsrs	r2, r2, #6
 80014aa:	3201      	adds	r2, #1
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80014ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80014b0:	8422      	strh	r2, [r4, #32]
 80014b2:	e7bc      	b.n	800142e <I2C_Init+0x62>

080014b4 <I2C_StructInit>:
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80014b4:	2300      	movs	r3, #0
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 80014b6:	b410      	push	{r4}
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80014b8:	f64b 71ff 	movw	r1, #49151	; 0xbfff
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80014bc:	f241 3488 	movw	r4, #5000	; 0x1388
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80014c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80014c4:	6004      	str	r4, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80014c6:	80c1      	strh	r1, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80014c8:	8182      	strh	r2, [r0, #12]
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80014ca:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 80014cc:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80014ce:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
}
 80014d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop

080014d8 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80014d8:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014da:	b929      	cbnz	r1, 80014e8 <I2C_Cmd+0x10>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	041b      	lsls	r3, r3, #16
 80014e2:	0c1b      	lsrs	r3, r3, #16
 80014e4:	8003      	strh	r3, [r0, #0]
 80014e6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	8003      	strh	r3, [r0, #0]
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <I2C_AnalogFilterCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 80014f4:	8c83      	ldrh	r3, [r0, #36]	; 0x24
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014f6:	b921      	cbnz	r1, 8001502 <I2C_AnalogFilterCmd+0xe>
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
  }
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	8483      	strh	r3, [r0, #36]	; 0x24
 8001500:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 8001502:	f023 0310 	bic.w	r3, r3, #16
 8001506:	041b      	lsls	r3, r3, #16
 8001508:	0c1b      	lsrs	r3, r3, #16
 800150a:	8483      	strh	r3, [r0, #36]	; 0x24
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop

08001510 <I2C_DigitalFilterConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 8001510:	8c83      	ldrh	r3, [r0, #36]	; 0x24
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 8001512:	f023 030f 	bic.w	r3, r3, #15
 8001516:	041b      	lsls	r3, r3, #16
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 8001518:	f001 010f 	and.w	r1, r1, #15
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 800151c:	0c1b      	lsrs	r3, r3, #16
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 800151e:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 8001520:	8483      	strh	r3, [r0, #36]	; 0x24
 8001522:	4770      	bx	lr

08001524 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001524:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001526:	b929      	cbnz	r1, 8001534 <I2C_GenerateSTART+0x10>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800152c:	041b      	lsls	r3, r3, #16
 800152e:	0c1b      	lsrs	r3, r3, #16
 8001530:	8003      	strh	r3, [r0, #0]
 8001532:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001534:	b29b      	uxth	r3, r3
 8001536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153a:	8003      	strh	r3, [r0, #0]
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop

08001540 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001540:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001542:	b929      	cbnz	r1, 8001550 <I2C_GenerateSTOP+0x10>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	0c1b      	lsrs	r3, r3, #16
 800154c:	8003      	strh	r3, [r0, #0]
 800154e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001550:	b29b      	uxth	r3, r3
 8001552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001556:	8003      	strh	r3, [r0, #0]
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop

0800155c <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800155c:	b91a      	cbnz	r2, 8001566 <I2C_Send7bitAddress+0xa>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800155e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001562:	8201      	strh	r1, [r0, #16]
 8001564:	4770      	bx	lr
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001566:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 800156a:	8201      	strh	r1, [r0, #16]
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop

08001570 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001570:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001572:	b929      	cbnz	r1, 8001580 <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001574:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001578:	041b      	lsls	r3, r3, #16
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	8003      	strh	r3, [r0, #0]
 800157e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001580:	b29b      	uxth	r3, r3
 8001582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001586:	8003      	strh	r3, [r0, #0]
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop

0800158c <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800158c:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800158e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001592:	041b      	lsls	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8001594:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8001598:	0c1b      	lsrs	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800159a:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800159c:	8183      	strh	r3, [r0, #12]
 800159e:	4770      	bx	lr

080015a0 <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80015a0:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015a2:	b929      	cbnz	r1, 80015b0 <I2C_DualAddressCmd+0x10>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	041b      	lsls	r3, r3, #16
 80015aa:	0c1b      	lsrs	r3, r3, #16
 80015ac:	8183      	strh	r3, [r0, #12]
 80015ae:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	8183      	strh	r3, [r0, #12]
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop

080015bc <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80015bc:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015be:	b929      	cbnz	r1, 80015cc <I2C_GeneralCallCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENGC;
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 80015c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015c4:	041b      	lsls	r3, r3, #16
 80015c6:	0c1b      	lsrs	r3, r3, #16
 80015c8:	8003      	strh	r3, [r0, #0]
 80015ca:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d2:	8003      	strh	r3, [r0, #0]
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop

080015d8 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80015d8:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015da:	b919      	cbnz	r1, 80015e4 <I2C_SoftwareResetCmd+0xc>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80015dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015e0:	8003      	strh	r3, [r0, #0]
 80015e2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80015e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	8003      	strh	r3, [r0, #0]
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80015f4:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80015f6:	b129      	cbz	r1, 8001604 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80015f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	0c1b      	lsrs	r3, r3, #16
 8001600:	8003      	strh	r3, [r0, #0]
 8001602:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001604:	b29b      	uxth	r3, r3
 8001606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160a:	8003      	strh	r3, [r0, #0]
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop

08001610 <I2C_FastModeDutyCycleConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001610:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001612:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001616:	bf1b      	ittet	ne
 8001618:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 800161c:	041b      	lslne	r3, r3, #16
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800161e:	b29b      	uxtheq	r3, r3
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001620:	0c1b      	lsrne	r3, r3, #16
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8001622:	bf08      	it	eq
 8001624:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001628:	8383      	strh	r3, [r0, #28]
 800162a:	4770      	bx	lr

0800162c <I2C_NACKPositionConfig>:
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800162c:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800162e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8001632:	bf15      	itete	ne
 8001634:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8001638:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800163a:	041b      	lslne	r3, r3, #16
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800163c:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8001640:	bf18      	it	ne
 8001642:	0c1b      	lsrne	r3, r3, #16
 8001644:	8003      	strh	r3, [r0, #0]
 8001646:	4770      	bx	lr

08001648 <I2C_SMBusAlertConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001648:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800164a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800164e:	bf15      	itete	ne
 8001650:	f423 5300 	bicne.w	r3, r3, #8192	; 0x2000
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001654:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8001656:	041b      	lslne	r3, r3, #16
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001658:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800165c:	bf18      	it	ne
 800165e:	0c1b      	lsrne	r3, r3, #16
 8001660:	8003      	strh	r3, [r0, #0]
 8001662:	4770      	bx	lr

08001664 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001664:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001666:	b929      	cbnz	r1, 8001674 <I2C_ARPCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENARP;
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8001668:	f023 0310 	bic.w	r3, r3, #16
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	0c1b      	lsrs	r3, r3, #16
 8001670:	8003      	strh	r3, [r0, #0]
 8001672:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001674:	b29b      	uxth	r3, r3
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	8003      	strh	r3, [r0, #0]
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop

08001680 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001680:	8201      	strh	r1, [r0, #16]
 8001682:	4770      	bx	lr

08001684 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001684:	8a00      	ldrh	r0, [r0, #16]
}
 8001686:	b2c0      	uxtb	r0, r0
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop

0800168c <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800168c:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800168e:	b929      	cbnz	r1, 800169c <I2C_TransmitPEC+0x10>
    I2Cx->CR1 |= I2C_CR1_PEC;
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8001690:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001694:	041b      	lsls	r3, r3, #16
 8001696:	0c1b      	lsrs	r3, r3, #16
 8001698:	8003      	strh	r3, [r0, #0]
 800169a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800169c:	b29b      	uxth	r3, r3
 800169e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a2:	8003      	strh	r3, [r0, #0]
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop

080016a8 <I2C_PECPositionConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80016a8:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80016aa:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80016ae:	bf15      	itete	ne
 80016b0:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80016b4:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80016b6:	041b      	lslne	r3, r3, #16
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80016b8:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80016bc:	bf18      	it	ne
 80016be:	0c1b      	lsrne	r3, r3, #16
 80016c0:	8003      	strh	r3, [r0, #0]
 80016c2:	4770      	bx	lr

080016c4 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80016c4:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016c6:	b929      	cbnz	r1, 80016d4 <I2C_CalculatePEC+0x10>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 80016c8:	f023 0320 	bic.w	r3, r3, #32
 80016cc:	041b      	lsls	r3, r3, #16
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	8003      	strh	r3, [r0, #0]
 80016d2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	f043 0320 	orr.w	r3, r3, #32
 80016da:	8003      	strh	r3, [r0, #0]
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop

080016e0 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80016e0:	8b00      	ldrh	r0, [r0, #24]
}
 80016e2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80016e6:	4770      	bx	lr

080016e8 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80016e8:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016ea:	b929      	cbnz	r1, 80016f8 <I2C_DMACmd+0x10>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80016ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	0c1b      	lsrs	r3, r3, #16
 80016f4:	8083      	strh	r3, [r0, #4]
 80016f6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016fe:	8083      	strh	r3, [r0, #4]
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop

08001704 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001704:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001706:	b929      	cbnz	r1, 8001714 <I2C_DMALastTransferCmd+0x10>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8001708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	0c1b      	lsrs	r3, r3, #16
 8001710:	8083      	strh	r3, [r0, #4]
 8001712:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001714:	b29b      	uxth	r3, r3
 8001716:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800171a:	8083      	strh	r3, [r0, #4]
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop

08001720 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8001720:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8001726:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8001728:	9b01      	ldr	r3, [sp, #4]
 800172a:	4419      	add	r1, r3
 800172c:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800172e:	9b01      	ldr	r3, [sp, #4]
 8001730:	8818      	ldrh	r0, [r3, #0]
}
 8001732:	b280      	uxth	r0, r0
 8001734:	b002      	add	sp, #8
 8001736:	4770      	bx	lr

08001738 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001738:	8883      	ldrh	r3, [r0, #4]
 800173a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800173c:	b91a      	cbnz	r2, 8001746 <I2C_ITConfig+0xe>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800173e:	ea23 0101 	bic.w	r1, r3, r1
 8001742:	8081      	strh	r1, [r0, #4]
 8001744:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001746:	4319      	orrs	r1, r3
 8001748:	8081      	strh	r1, [r0, #4]
 800174a:	4770      	bx	lr

0800174c <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800174c:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 800174e:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001750:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001752:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001756:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800175a:	4018      	ands	r0, r3
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 800175c:	1a0b      	subs	r3, r1, r0
 800175e:	4258      	negs	r0, r3
 8001760:	4158      	adcs	r0, r3
 8001762:	4770      	bx	lr

08001764 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001764:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 8001766:	8b03      	ldrh	r3, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001768:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800176a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

  /* Return status */
  return lastevent;
}
 800176e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001772:	4770      	bx	lr

08001774 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001774:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001776:	2300      	movs	r3, #0

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001778:	0f0a      	lsrs	r2, r1, #28
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800177e:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001780:	9200      	str	r2, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8001782:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001784:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 8001788:	b153      	cbz	r3, 80017a0 <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800178a:	9b01      	ldr	r3, [sp, #4]
 800178c:	3314      	adds	r3, #20
 800178e:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001790:	9b01      	ldr	r3, [sp, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8001796:	bf0c      	ite	eq
 8001798:	2000      	moveq	r0, #0
 800179a:	2001      	movne	r0, #1
 800179c:	b002      	add	sp, #8
 800179e:	4770      	bx	lr
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80017a0:	9b01      	ldr	r3, [sp, #4]
 80017a2:	3318      	adds	r3, #24
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80017a4:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	e7f2      	b.n	8001790 <I2C_GetFlagStatus+0x1c>
 80017aa:	bf00      	nop

080017ac <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80017ac:	43c9      	mvns	r1, r1
 80017ae:	b289      	uxth	r1, r1
 80017b0:	8281      	strh	r1, [r0, #20]
 80017b2:	4770      	bx	lr

080017b4 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80017b4:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80017b6:	8a80      	ldrh	r0, [r0, #20]
 80017b8:	b280      	uxth	r0, r0
 80017ba:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80017bc:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80017be:	d006      	beq.n	80017ce <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80017c0:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80017c4:	ea13 4111 	ands.w	r1, r3, r1, lsr #16
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80017c8:	bf0c      	ite	eq
 80017ca:	2000      	moveq	r0, #0
 80017cc:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 80017ce:	4770      	bx	lr

080017d0 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80017d0:	43c9      	mvns	r1, r1
 80017d2:	b289      	uxth	r1, r1
 80017d4:	8281      	strh	r1, [r0, #20]
 80017d6:	4770      	bx	lr

080017d8 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80017d8:	b410      	push	{r4}

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80017da:	f246 0210 	movw	r2, #24592	; 0x6010
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80017de:	6804      	ldr	r4, [r0, #0]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80017e0:	f2c4 0202 	movt	r2, #16386	; 0x4002

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80017e4:	2300      	movs	r3, #0

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80017e6:	4290      	cmp	r0, r2
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80017e8:	f024 0401 	bic.w	r4, r4, #1
 80017ec:	6004      	str	r4, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80017ee:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80017f0:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80017f2:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80017f4:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80017f6:	6103      	str	r3, [r0, #16]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80017f8:	bf04      	itt	eq
 80017fa:	f44f 43c0 	moveq.w	r3, #24576	; 0x6000
 80017fe:	f2c4 0302 	movteq	r3, #16386	; 0x4002

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8001802:	f04f 0121 	mov.w	r1, #33	; 0x21

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8001806:	bf08      	it	eq
 8001808:	223d      	moveq	r2, #61	; 0x3d

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800180a:	6141      	str	r1, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800180c:	bf08      	it	eq
 800180e:	609a      	streq	r2, [r3, #8]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8001810:	f000 80a2 	beq.w	8001958 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8001814:	f246 0328 	movw	r3, #24616	; 0x6028
 8001818:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800181c:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800181e:	bf01      	itttt	eq
 8001820:	f44f 43c0 	moveq.w	r3, #24576	; 0x6000
 8001824:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8001828:	f44f 6274 	moveq.w	r2, #3904	; 0xf40
 800182c:	609a      	streq	r2, [r3, #8]
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800182e:	f000 8093 	beq.w	8001958 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8001832:	f246 0340 	movw	r3, #24640	; 0x6040
 8001836:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800183a:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800183c:	bf01      	itttt	eq
 800183e:	f44f 43c0 	moveq.w	r3, #24576	; 0x6000
 8001842:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8001846:	f44f 1274 	moveq.w	r2, #3997696	; 0x3d0000
 800184a:	609a      	streq	r2, [r3, #8]
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800184c:	f000 8084 	beq.w	8001958 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8001850:	f246 0358 	movw	r3, #24664	; 0x6058
 8001854:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001858:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800185a:	bf01      	itttt	eq
 800185c:	f44f 43c0 	moveq.w	r3, #24576	; 0x6000
 8001860:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8001864:	f04f 6274 	moveq.w	r2, #255852544	; 0xf400000
 8001868:	609a      	streq	r2, [r3, #8]
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800186a:	d075      	beq.n	8001958 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800186c:	f246 0370 	movw	r3, #24688	; 0x6070
 8001870:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001874:	4298      	cmp	r0, r3
 8001876:	d07b      	beq.n	8001970 <DMA_DeInit+0x198>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8001878:	f246 0388 	movw	r3, #24712	; 0x6088
 800187c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001880:	4298      	cmp	r0, r3
 8001882:	d07e      	beq.n	8001982 <DMA_DeInit+0x1aa>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8001884:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8001888:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800188c:	4298      	cmp	r0, r3
 800188e:	d066      	beq.n	800195e <DMA_DeInit+0x186>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8001890:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8001894:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001898:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800189a:	bf01      	itttt	eq
 800189c:	f44f 43c0 	moveq.w	r3, #24576	; 0x6000
 80018a0:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 80018a4:	f04f 523d 	moveq.w	r2, #792723456	; 0x2f400000
 80018a8:	60da      	streq	r2, [r3, #12]
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 80018aa:	d055      	beq.n	8001958 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 80018ac:	f246 4310 	movw	r3, #25616	; 0x6410
 80018b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018b4:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80018b6:	bf01      	itttt	eq
 80018b8:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 80018bc:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 80018c0:	223d      	moveq	r2, #61	; 0x3d
 80018c2:	609a      	streq	r2, [r3, #8]
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 80018c4:	d048      	beq.n	8001958 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 80018c6:	f246 4328 	movw	r3, #25640	; 0x6428
 80018ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018ce:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80018d0:	bf01      	itttt	eq
 80018d2:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 80018d6:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 80018da:	f44f 6274 	moveq.w	r2, #3904	; 0xf40
 80018de:	609a      	streq	r2, [r3, #8]
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 80018e0:	d03a      	beq.n	8001958 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 80018e2:	f246 4340 	movw	r3, #25664	; 0x6440
 80018e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018ea:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80018ec:	bf01      	itttt	eq
 80018ee:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 80018f2:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 80018f6:	f44f 1274 	moveq.w	r2, #3997696	; 0x3d0000
 80018fa:	609a      	streq	r2, [r3, #8]
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 80018fc:	d02c      	beq.n	8001958 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 80018fe:	f246 4358 	movw	r3, #25688	; 0x6458
 8001902:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001906:	4298      	cmp	r0, r3
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8001908:	bf01      	itttt	eq
 800190a:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 800190e:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8001912:	f04f 6274 	moveq.w	r2, #255852544	; 0xf400000
 8001916:	609a      	streq	r2, [r3, #8]
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8001918:	d01e      	beq.n	8001958 <DMA_DeInit+0x180>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800191a:	f246 4370 	movw	r3, #25712	; 0x6470
 800191e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001922:	4298      	cmp	r0, r3
 8001924:	d037      	beq.n	8001996 <DMA_DeInit+0x1be>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8001926:	f246 4388 	movw	r3, #25736	; 0x6488
 800192a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800192e:	4298      	cmp	r0, r3
 8001930:	d03a      	beq.n	80019a8 <DMA_DeInit+0x1d0>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8001932:	f246 43a0 	movw	r3, #25760	; 0x64a0
 8001936:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800193a:	4298      	cmp	r0, r3
 800193c:	d03e      	beq.n	80019bc <DMA_DeInit+0x1e4>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800193e:	f246 43b8 	movw	r3, #25784	; 0x64b8
 8001942:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001946:	4298      	cmp	r0, r3
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8001948:	bf01      	itttt	eq
 800194a:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 800194e:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8001952:	f04f 523d 	moveq.w	r2, #792723456	; 0x2f400000
 8001956:	60da      	streq	r2, [r3, #12]
    }
  }
}
 8001958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800195c:	4770      	bx	lr
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800195e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001962:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001966:	2200      	movs	r2, #0
 8001968:	f2c2 023d 	movt	r2, #8253	; 0x203d
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	e7f3      	b.n	8001958 <DMA_DeInit+0x180>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8001970:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001974:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001978:	223d      	movs	r2, #61	; 0x3d
 800197a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	e7ea      	b.n	8001958 <DMA_DeInit+0x180>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8001982:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001986:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800198a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800198e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	e7e0      	b.n	8001958 <DMA_DeInit+0x180>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8001996:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800199a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800199e:	223d      	movs	r2, #61	; 0x3d
 80019a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	e7d7      	b.n	8001958 <DMA_DeInit+0x180>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80019a8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80019ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019b0:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80019b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	e7cd      	b.n	8001958 <DMA_DeInit+0x180>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80019bc:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80019c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019c4:	2200      	movs	r2, #0
 80019c6:	f2c2 023d 	movt	r2, #8253	; 0x203d
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	e7c4      	b.n	8001958 <DMA_DeInit+0x180>
 80019ce:	bf00      	nop

080019d0 <DMA_Init>:
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80019d0:	68ca      	ldr	r2, [r1, #12]
 80019d2:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80019d4:	f8d0 c000 	ldr.w	ip, [r0]
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80019d8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80019dc:	694f      	ldr	r7, [r1, #20]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80019de:	698e      	ldr	r6, [r1, #24]
 80019e0:	69cd      	ldr	r5, [r1, #28]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80019e2:	6a0c      	ldr	r4, [r1, #32]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80019e4:	ea42 0803 	orr.w	r8, r2, r3
 80019e8:	ea48 0707 	orr.w	r7, r8, r7
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80019ec:	433e      	orrs	r6, r7
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80019ee:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80019f0:	6b0f      	ldr	r7, [r1, #48]	; 0x30
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80019f2:	4335      	orrs	r5, r6
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80019f4:	432c      	orrs	r4, r5
 80019f6:	ea44 0203 	orr.w	r2, r4, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80019fa:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80019fc:	ea42 0304 	orr.w	r3, r2, r4
 8001a00:	6b4a      	ldr	r2, [r1, #52]	; 0x34
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001a02:	6b8c      	ldr	r4, [r1, #56]	; 0x38
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a04:	f248 063f 	movw	r6, #32831	; 0x803f
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001a08:	4313      	orrs	r3, r2
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a0a:	f2cf 061c 	movt	r6, #61468	; 0xf01c
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001a0e:	4323      	orrs	r3, r4
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a10:	ea0c 0606 	and.w	r6, ip, r6
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001a14:	431e      	orrs	r6, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001a16:	6006      	str	r6, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001a18:	6945      	ldr	r5, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001a1a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001a1c:	690c      	ldr	r4, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001a1e:	684a      	ldr	r2, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001a20:	688b      	ldr	r3, [r1, #8]
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a22:	f025 0507 	bic.w	r5, r5, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001a26:	ea47 0106 	orr.w	r1, r7, r6
 8001a2a:	4329      	orrs	r1, r5

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001a2c:	6141      	str	r1, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001a2e:	6044      	str	r4, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001a30:	6082      	str	r2, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
}
 8001a32:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001a36:	60c3      	str	r3, [r0, #12]
}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop

08001a3c <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8001a40:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8001a42:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001a44:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8001a46:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001a48:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8001a4a:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001a4c:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001a4e:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8001a50:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001a52:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001a54:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8001a56:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001a58:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001a5a:	6383      	str	r3, [r0, #56]	; 0x38
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001a60:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a62:	b919      	cbnz	r1, 8001a6c <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6003      	str	r3, [r0, #0]
 8001a6a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6003      	str	r3, [r0, #0]
 8001a72:	4770      	bx	lr

08001a74 <DMA_PeriphIncOffsetSizeConfig>:

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8001a74:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8001a76:	b919      	cbnz	r1, 8001a80 <DMA_PeriphIncOffsetSizeConfig+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8001a78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a7c:	6003      	str	r3, [r0, #0]
 8001a7e:	4770      	bx	lr

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8001a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a84:	6003      	str	r3, [r0, #0]
 8001a86:	4770      	bx	lr

08001a88 <DMA_FlowControllerConfig>:

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8001a88:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8001a8a:	b919      	cbnz	r1, 8001a94 <DMA_FlowControllerConfig+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8001a8c:	f023 0320 	bic.w	r3, r3, #32
 8001a90:	6003      	str	r3, [r0, #0]
 8001a92:	4770      	bx	lr

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8001a94:	f043 0320 	orr.w	r3, r3, #32
 8001a98:	6003      	str	r3, [r0, #0]
 8001a9a:	4770      	bx	lr

08001a9c <DMA_SetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8001a9c:	6041      	str	r1, [r0, #4]
 8001a9e:	4770      	bx	lr

08001aa0 <DMA_GetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8001aa0:	6840      	ldr	r0, [r0, #4]
}
 8001aa2:	b280      	uxth	r0, r0
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <DMA_DoubleBufferModeConfig>:
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8001aa8:	6803      	ldr	r3, [r0, #0]
{  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8001aaa:	b922      	cbnz	r2, 8001ab6 <DMA_DoubleBufferModeConfig+0xe>
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8001aac:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ab0:	6003      	str	r3, [r0, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8001ab2:	6101      	str	r1, [r0, #16]
 8001ab4:	4770      	bx	lr
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8001ab6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aba:	6003      	str	r3, [r0, #0]
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8001abc:	6101      	str	r1, [r0, #16]
 8001abe:	4770      	bx	lr

08001ac0 <DMA_DoubleBufferModeCmd>:

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8001ac0:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8001ac2:	b919      	cbnz	r1, 8001acc <DMA_DoubleBufferModeCmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8001ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac8:	6003      	str	r3, [r0, #0]
 8001aca:	4770      	bx	lr

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8001acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad0:	6003      	str	r3, [r0, #0]
 8001ad2:	4770      	bx	lr

08001ad4 <DMA_MemoryTargetConfig>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8001ad4:	b90a      	cbnz	r2, 8001ada <DMA_MemoryTargetConfig+0x6>
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8001ad6:	60c1      	str	r1, [r0, #12]
 8001ad8:	4770      	bx	lr
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8001ada:	6101      	str	r1, [r0, #16]
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop

08001ae0 <DMA_GetCurrentMemoryTarget>:
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8001ae0:	6800      	ldr	r0, [r0, #0]
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
  }
  return tmp;
}
 8001ae2:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 8001ae6:	4770      	bx	lr

08001ae8 <DMA_GetCmdStatus>:
  FunctionalState state = DISABLE;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8001ae8:	6800      	ldr	r0, [r0, #0]
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
  }
  return state;
}
 8001aea:	f000 0001 	and.w	r0, r0, #1
 8001aee:	4770      	bx	lr

08001af0 <DMA_GetFIFOStatus>:
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8001af0:	6940      	ldr	r0, [r0, #20]
  
  return tmpreg;
}
 8001af2:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8001af6:	4770      	bx	lr

08001af8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001af8:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001afa:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001afe:	f246 440f 	movw	r4, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001b02:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001b06:	f2c4 0302 	movt	r3, #16386	; 0x4002
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001b0a:	f2c4 0402 	movt	r4, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001b0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b12:	42a0      	cmp	r0, r4
 8001b14:	bf8c      	ite	hi
 8001b16:	4610      	movhi	r0, r2
 8001b18:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001b1a:	008b      	lsls	r3, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001b1c:	bf4c      	ite	mi
 8001b1e:	6843      	ldrmi	r3, [r0, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8001b20:	6803      	ldrpl	r3, [r0, #0]
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 8001b22:	f85d 4b04 	ldr.w	r4, [sp], #4
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001b26:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8001b2a:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001b2e:	4219      	tst	r1, r3
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 8001b30:	bf0c      	ite	eq
 8001b32:	2000      	moveq	r0, #0
 8001b34:	2001      	movne	r0, #1
 8001b36:	4770      	bx	lr

08001b38 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001b38:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001b3a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001b3e:	f246 440f 	movw	r4, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001b42:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001b46:	f2c4 0402 	movt	r4, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001b4a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b52:	42a0      	cmp	r0, r4
 8001b54:	bf8c      	ite	hi
 8001b56:	4610      	movhi	r0, r2
 8001b58:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001b5a:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001b5e:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8001b62:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 8001b66:	bf14      	ite	ne
 8001b68:	60c1      	strne	r1, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001b6a:	6081      	streq	r1, [r0, #8]
  }    
}
 8001b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8001b74:	060b      	lsls	r3, r1, #24
 8001b76:	d50c      	bpl.n	8001b92 <DMA_ITConfig+0x1e>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8001b78:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 8001b7a:	b1aa      	cbz	r2, 8001ba8 <DMA_ITConfig+0x34>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8001b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001b80:	2980      	cmp	r1, #128	; 0x80
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8001b82:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001b84:	d00f      	beq.n	8001ba6 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8001b86:	6803      	ldr	r3, [r0, #0]
 8001b88:	f001 011e 	and.w	r1, r1, #30
 8001b8c:	4319      	orrs	r1, r3
 8001b8e:	6001      	str	r1, [r0, #0]
 8001b90:	4770      	bx	lr
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001b92:	2980      	cmp	r1, #128	; 0x80
 8001b94:	d007      	beq.n	8001ba6 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
 8001b96:	2a00      	cmp	r2, #0
 8001b98:	d1f5      	bne.n	8001b86 <DMA_ITConfig+0x12>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8001b9a:	6803      	ldr	r3, [r0, #0]
 8001b9c:	f001 011e 	and.w	r1, r1, #30
 8001ba0:	ea23 0101 	bic.w	r1, r3, r1
 8001ba4:	6001      	str	r1, [r0, #0]
 8001ba6:	4770      	bx	lr
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8001ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001bac:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8001bae:	6143      	str	r3, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001bb0:	d1f3      	bne.n	8001b9a <DMA_ITConfig+0x26>
 8001bb2:	4770      	bx	lr

08001bb4 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001bb4:	b470      	push	{r4, r5, r6}
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001bb6:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001bba:	f246 450f 	movw	r5, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001bbe:	f44f 44c8 	mov.w	r4, #25600	; 0x6400
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8001bc2:	f021 23f0 	bic.w	r3, r1, #4026593280	; 0xf000f000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001bc6:	f2c4 0502 	movt	r5, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001bca:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001bce:	f2c4 0202 	movt	r2, #16386	; 0x4002
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8001bd2:	f023 16c3 	bic.w	r6, r3, #12779715	; 0xc300c3
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001bd6:	42a8      	cmp	r0, r5
 8001bd8:	bf88      	it	hi
 8001bda:	4622      	movhi	r2, r4
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8001bdc:	b196      	cbz	r6, 8001c04 <DMA_GetITStatus+0x50>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8001bde:	6804      	ldr	r4, [r0, #0]

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8001be0:	f004 041e 	and.w	r4, r4, #30
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8001be4:	ea04 24d1 	and.w	r4, r4, r1, lsr #11
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001be8:	0089      	lsls	r1, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8001bea:	bf4c      	ite	mi
 8001bec:	6852      	ldrmi	r2, [r2, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8001bee:	6812      	ldrpl	r2, [r2, #0]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001bf0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001bf4:	ea13 0002 	ands.w	r0, r3, r2
 8001bf8:	d002      	beq.n	8001c00 <DMA_GetITStatus+0x4c>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8001bfa:	1c20      	adds	r0, r4, #0
 8001bfc:	bf18      	it	ne
 8001bfe:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the DMA_IT status */
  return  bitstatus;
}
 8001c00:	bc70      	pop	{r4, r5, r6}
 8001c02:	4770      	bx	lr
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8001c04:	6944      	ldr	r4, [r0, #20]
 8001c06:	f004 0480 	and.w	r4, r4, #128	; 0x80
 8001c0a:	e7ed      	b.n	8001be8 <DMA_GetITStatus+0x34>

08001c0c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001c0c:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001c0e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001c12:	f246 440f 	movw	r4, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001c16:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001c1a:	f2c4 0402 	movt	r4, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001c1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c26:	42a0      	cmp	r0, r4
 8001c28:	bf8c      	ite	hi
 8001c2a:	4610      	movhi	r0, r2
 8001c2c:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001c2e:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8001c32:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8001c36:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 8001c3a:	bf14      	ite	ne
 8001c3c:	60c1      	strne	r1, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8001c3e:	6081      	streq	r1, [r0, #8]
  }   
}
 8001c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop

08001c48 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001c48:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001c4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c4e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c52:	4298      	cmp	r0, r3
 8001c54:	d02a      	beq.n	8001cac <SPI_I2S_DeInit+0x64>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001c56:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001c5e:	4298      	cmp	r0, r3
 8001c60:	d030      	beq.n	8001cc4 <SPI_I2S_DeInit+0x7c>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 8001c62:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001c66:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001c6a:	4298      	cmp	r0, r3
 8001c6c:	d036      	beq.n	8001cdc <SPI_I2S_DeInit+0x94>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8001c6e:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001c72:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c76:	4298      	cmp	r0, r3
 8001c78:	d03c      	beq.n	8001cf4 <SPI_I2S_DeInit+0xac>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8001c7a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001c7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c82:	4298      	cmp	r0, r3
 8001c84:	d042      	beq.n	8001d0c <SPI_I2S_DeInit+0xc4>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 8001c86:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001c8a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c8e:	4298      	cmp	r0, r3
 8001c90:	d000      	beq.n	8001c94 <SPI_I2S_DeInit+0x4c>
 8001c92:	bd08      	pop	{r3, pc}
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8001c94:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001c98:	2101      	movs	r1, #1
 8001c9a:	f7ff f839 	bl	8000d10 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8001c9e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001ca2:	2100      	movs	r1, #0
    }
  }
}
 8001ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI6)
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8001ca8:	f7ff b832 	b.w	8000d10 <RCC_APB2PeriphResetCmd>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001cac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	f7ff f82d 	bl	8000d10 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001cb6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cba:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001cbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001cc0:	f7ff b826 	b.w	8000d10 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001cc4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cc8:	2101      	movs	r1, #1
 8001cca:	f7ff f813 	bl	8000cf4 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001cce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cd2:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001cd8:	f7ff b80c 	b.w	8000cf4 <RCC_APB1PeriphResetCmd>
  }
  else if (SPIx == SPI3)
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001cdc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	f7ff f807 	bl	8000cf4 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001ce6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001cea:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001cec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI3)
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001cf0:	f7ff b800 	b.w	8000cf4 <RCC_APB1PeriphResetCmd>
  }
  else if (SPIx == SPI4)
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8001cf4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	f7ff f809 	bl	8000d10 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8001cfe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d02:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001d04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI4)
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8001d08:	f7ff b802 	b.w	8000d10 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI5)
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001d0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d10:	2101      	movs	r1, #1
 8001d12:	f7fe fffd 	bl	8000d10 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001d16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d1a:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001d1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI5)
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001d20:	f7fe bff6 	b.w	8000d10 <RCC_APB2PeriphResetCmd>

08001d24 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001d24:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001d28:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 8001d2c:	f8b1 9000 	ldrh.w	r9, [r1]
 8001d30:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8001d34:	890f      	ldrh	r7, [r1, #8]
 8001d36:	894e      	ldrh	r6, [r1, #10]
 8001d38:	898d      	ldrh	r5, [r1, #12]
 8001d3a:	89cc      	ldrh	r4, [r1, #14]
 8001d3c:	f8b1 c006 	ldrh.w	ip, [r1, #6]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001d40:	8a0a      	ldrh	r2, [r1, #16]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001d42:	8803      	ldrh	r3, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001d44:	ea4a 0109 	orr.w	r1, sl, r9
 8001d48:	ea41 0108 	orr.w	r1, r1, r8
 8001d4c:	ea41 010c 	orr.w	r1, r1, ip
 8001d50:	4339      	orrs	r1, r7
 8001d52:	4331      	orrs	r1, r6
 8001d54:	4329      	orrs	r1, r5
 8001d56:	4321      	orrs	r1, r4

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001d58:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001d60:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001d62:	8b83      	ldrh	r3, [r0, #28]
 8001d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d68:	041b      	lsls	r3, r3, #16
 8001d6a:	0c1b      	lsrs	r3, r3, #16
 8001d6c:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
}
 8001d6e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001d72:	8202      	strh	r2, [r0, #16]
}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop

08001d78 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001d78:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001d7a:	688a      	ldr	r2, [r1, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001d7c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d80:	f023 030f 	bic.w	r3, r3, #15
 8001d84:	041b      	lsls	r3, r3, #16
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001d86:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001d8a:	0c1b      	lsrs	r3, r3, #16
  SPIx->I2SPR = 0x0002;
 8001d8c:	2402      	movs	r4, #2
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001d8e:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8001d90:	8404      	strh	r4, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001d92:	8b86      	ldrh	r6, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001d94:	42a2      	cmp	r2, r4
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001d96:	b2b6      	uxth	r6, r6
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001d98:	d063      	beq.n	8001e62 <I2S_Init+0xea>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001d9a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001da2:	888c      	ldrh	r4, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001da4:	689d      	ldr	r5, [r3, #8]
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001da6:	2c00      	cmp	r4, #0
 8001da8:	bf0c      	ite	eq
 8001daa:	f04f 0820 	moveq.w	r8, #32
 8001dae:	f04f 0840 	movne.w	r8, #64	; 0x40
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001db2:	022d      	lsls	r5, r5, #8
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001db4:	bf42      	ittt	mi
 8001db6:	689d      	ldrmi	r5, [r3, #8]
 8001db8:	f425 0500 	bicmi.w	r5, r5, #8388608	; 0x800000
 8001dbc:	609d      	strmi	r5, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001dbe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001dc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001dc6:	f44f 5590 	mov.w	r5, #4608	; 0x1200
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001dca:	f8d3 c084 	ldr.w	ip, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001dce:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001dd2:	f8d3 9004 	ldr.w	r9, [r3, #4]
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001dd6:	88cb      	ldrh	r3, [r1, #6]
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001dd8:	f009 093f 	and.w	r9, r9, #63	; 0x3f

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001ddc:	f2c0 057a 	movt	r5, #122	; 0x7a
 8001de0:	fbb5 f5f9 	udiv	r5, r5, r9
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001de4:	f3cc 1c88 	ubfx	ip, ip, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001de8:	fb0c fc05 	mul.w	ip, ip, r5
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001dec:	f3c7 7702 	ubfx	r7, r7, #28, #3
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001df4:	fbbc f7f7 	udiv	r7, ip, r7
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001df8:	bf13      	iteet	ne
 8001dfa:	fbb7 f5f8 	udivne	r5, r7, r8
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001dfe:	0a3f      	lsreq	r7, r7, #8
 8001e00:	eb07 0787 	addeq.w	r7, r7, r7, lsl #2
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001e04:	eb05 0585 	addne.w	r5, r5, r5, lsl #2
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001e08:	bf0b      	itete	eq
 8001e0a:	007f      	lsleq	r7, r7, #1
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001e0c:	006d      	lslne	r5, r5, #1
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001e0e:	fbb7 f2f2 	udiveq	r2, r7, r2
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001e12:	fbb5 f2f2 	udivne	r2, r5, r2
 8001e16:	3205      	adds	r2, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001e18:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 8001e1c:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001e20:	b292      	uxth	r2, r2
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001e22:	fba5 7202 	umull	r7, r2, r5, r2
 8001e26:	08d2      	lsrs	r2, r2, #3
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001e28:	0855      	lsrs	r5, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001e2a:	1eaf      	subs	r7, r5, #2
 8001e2c:	b2bf      	uxth	r7, r7
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001e2e:	f002 0201 	and.w	r2, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001e32:	2ffd      	cmp	r7, #253	; 0xfd
 8001e34:	bf94      	ite	ls
 8001e36:	ea45 2202 	orrls.w	r2, r5, r2, lsl #8
 8001e3a:	2202      	movhi	r2, #2
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e3c:	f8b1 c000 	ldrh.w	ip, [r1]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001e40:	884f      	ldrh	r7, [r1, #2]
 8001e42:	898d      	ldrh	r5, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e44:	ea46 010c 	orr.w	r1, r6, ip
 8001e48:	f441 6100 	orr.w	r1, r1, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001e4c:	4339      	orrs	r1, r7
 8001e4e:	4329      	orrs	r1, r5
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001e50:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001e52:	b289      	uxth	r1, r1
 8001e54:	430c      	orrs	r4, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	8403      	strh	r3, [r0, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8001e5a:	8384      	strh	r4, [r0, #28]
}
 8001e5c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001e60:	4770      	bx	lr
 8001e62:	888c      	ldrh	r4, [r1, #4]
 8001e64:	88cb      	ldrh	r3, [r1, #6]
 8001e66:	e7e9      	b.n	8001e3c <I2S_Init+0xc4>

08001e68 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001e68:	2300      	movs	r3, #0
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	8202      	strh	r2, [r0, #16]
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001e6e:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001e70:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001e72:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001e74:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001e76:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001e78:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001e7a:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001e7c:	81c3      	strh	r3, [r0, #14]
 8001e7e:	4770      	bx	lr

08001e80 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001e80:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001e82:	2202      	movs	r2, #2
 8001e84:	6082      	str	r2, [r0, #8]
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001e86:	6003      	str	r3, [r0, #0]
 8001e88:	6043      	str	r3, [r0, #4]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8001e8a:	8183      	strh	r3, [r0, #12]
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop

08001e90 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001e90:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e92:	b929      	cbnz	r1, 8001ea0 <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e98:	041b      	lsls	r3, r3, #16
 8001e9a:	0c1b      	lsrs	r3, r3, #16
 8001e9c:	8003      	strh	r3, [r0, #0]
 8001e9e:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ea6:	8003      	strh	r3, [r0, #0]
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001eac:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001eae:	b929      	cbnz	r1, 8001ebc <I2S_Cmd+0x10>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8001eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eb4:	041b      	lsls	r3, r3, #16
 8001eb6:	0c1b      	lsrs	r3, r3, #16
 8001eb8:	8383      	strh	r3, [r0, #28]
 8001eba:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec2:	8383      	strh	r3, [r0, #28]
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop

08001ec8 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8001ec8:	8803      	ldrh	r3, [r0, #0]
 8001eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ece:	041b      	lsls	r3, r3, #16
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8001ed4:	8803      	ldrh	r3, [r0, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4319      	orrs	r1, r3
 8001eda:	8001      	strh	r1, [r0, #0]
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop

08001ee0 <SPI_BiDirectionalLineConfig>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001ee0:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001ee2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8001ee6:	bf15      	itete	ne
 8001ee8:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001eec:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8001eee:	041b      	lslne	r3, r3, #16
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001ef0:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8001ef4:	bf18      	it	ne
 8001ef6:	0c1b      	lsrne	r3, r3, #16
 8001ef8:	8003      	strh	r3, [r0, #0]
 8001efa:	4770      	bx	lr

08001efc <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001efc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8001f00:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001f02:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8001f04:	bf0b      	itete	eq
 8001f06:	f423 7380 	biceq.w	r3, r3, #256	; 0x100
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001f0a:	b29b      	uxthne	r3, r3
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8001f0c:	041b      	lsleq	r3, r3, #16
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001f0e:	f443 7380 	orrne.w	r3, r3, #256	; 0x100
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8001f12:	bf08      	it	eq
 8001f14:	0c1b      	lsreq	r3, r3, #16
 8001f16:	8003      	strh	r3, [r0, #0]
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop

08001f1c <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001f1c:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f1e:	b929      	cbnz	r1, 8001f2c <SPI_SSOutputCmd+0x10>
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	0c1b      	lsrs	r3, r3, #16
 8001f28:	8083      	strh	r3, [r0, #4]
 8001f2a:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	8083      	strh	r3, [r0, #4]
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop

08001f38 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001f38:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f3a:	b929      	cbnz	r1, 8001f48 <SPI_TIModeCmd+0x10>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8001f3c:	f023 0310 	bic.w	r3, r3, #16
 8001f40:	041b      	lsls	r3, r3, #16
 8001f42:	0c1b      	lsrs	r3, r3, #16
 8001f44:	8083      	strh	r3, [r0, #4]
 8001f46:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f043 0310 	orr.w	r3, r3, #16
 8001f4e:	8083      	strh	r3, [r0, #4]
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop

08001f54 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001f54:	8b83      	ldrh	r3, [r0, #28]
 8001f56:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f5a:	f023 030f 	bic.w	r3, r3, #15
 8001f5e:	041b      	lsls	r3, r3, #16
  I2Sxext->I2SPR = 0x0002;
 8001f60:	2202      	movs	r2, #2
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001f62:	0c1b      	lsrs	r3, r3, #16
 8001f64:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8001f66:	8402      	strh	r2, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001f68:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f6a:	880b      	ldrh	r3, [r1, #0]
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8001f6c:	b430      	push	{r4, r5}
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001f6e:	884d      	ldrh	r5, [r1, #2]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f70:	888c      	ldrh	r4, [r1, #4]
 8001f72:	8989      	ldrh	r1, [r1, #12]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001f74:	b292      	uxth	r2, r2
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001f76:	432a      	orrs	r2, r5
 8001f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f80:	4322      	orrs	r2, r4
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f82:	041b      	lsls	r3, r3, #16
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f84:	430a      	orrs	r2, r1
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f86:	0c1b      	lsrs	r3, r3, #16
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f88:	b292      	uxth	r2, r2
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
  {
    tmp = I2S_Mode_SlaveRx;
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf0c      	ite	eq
 8001f8e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8001f92:	2300      	movne	r3, #0
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f94:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8001f96:	8383      	strh	r3, [r0, #28]
}
 8001f98:	bc30      	pop	{r4, r5}
 8001f9a:	4770      	bx	lr

08001f9c <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001f9c:	8980      	ldrh	r0, [r0, #12]
}
 8001f9e:	b280      	uxth	r0, r0
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop

08001fa4 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001fa4:	8181      	strh	r1, [r0, #12]
 8001fa6:	4770      	bx	lr

08001fa8 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001fa8:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001faa:	b929      	cbnz	r1, 8001fb8 <SPI_CalculateCRC+0x10>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8001fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fb0:	041b      	lsls	r3, r3, #16
 8001fb2:	0c1b      	lsrs	r3, r3, #16
 8001fb4:	8003      	strh	r3, [r0, #0]
 8001fb6:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fbe:	8003      	strh	r3, [r0, #0]
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop

08001fc4 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8001fc4:	8803      	ldrh	r3, [r0, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fcc:	8003      	strh	r3, [r0, #0]
 8001fce:	4770      	bx	lr

08001fd0 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8001fd0:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8001fd2:	bf14      	ite	ne
 8001fd4:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8001fd6:	8a80      	ldrheq	r0, [r0, #20]
 8001fd8:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8001fda:	4770      	bx	lr

08001fdc <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8001fdc:	8a00      	ldrh	r0, [r0, #16]
}
 8001fde:	b280      	uxth	r0, r0
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop

08001fe4 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001fe4:	8883      	ldrh	r3, [r0, #4]
 8001fe6:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8001fe8:	b91a      	cbnz	r2, 8001ff2 <SPI_I2S_DMACmd+0xe>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8001fea:	ea23 0101 	bic.w	r1, r3, r1
 8001fee:	8081      	strh	r1, [r0, #4]
 8001ff0:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001ff2:	4319      	orrs	r1, r3
 8001ff4:	8081      	strh	r1, [r0, #4]
 8001ff6:	4770      	bx	lr

08001ff8 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	0909      	lsrs	r1, r1, #4
 8001ffc:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8002000:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002002:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8002004:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8002006:	b91a      	cbnz	r2, 8002010 <SPI_I2S_ITConfig+0x18>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8002008:	ea23 0101 	bic.w	r1, r3, r1
 800200c:	8081      	strh	r1, [r0, #4]
 800200e:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8002010:	4319      	orrs	r1, r3
 8002012:	8081      	strh	r1, [r0, #4]
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop

08002018 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002018:	8903      	ldrh	r3, [r0, #8]
 800201a:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 800201c:	bf0c      	ite	eq
 800201e:	2000      	moveq	r0, #0
 8002020:	2001      	movne	r0, #1
 8002022:	4770      	bx	lr

08002024 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8002024:	43c9      	mvns	r1, r1
 8002026:	b289      	uxth	r1, r1
 8002028:	8101      	strh	r1, [r0, #8]
 800202a:	4770      	bx	lr

0800202c <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800202c:	b410      	push	{r4}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800202e:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002030:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8002032:	f001 030f 	and.w	r3, r1, #15
 8002036:	2201      	movs	r2, #1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002038:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800203a:	fa02 f303 	lsl.w	r3, r2, r3

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800203e:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8002040:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002042:	d005      	beq.n	8002050 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8002044:	0909      	lsrs	r1, r1, #4
 8002046:	408a      	lsls	r2, r1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002048:	4214      	tst	r4, r2
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800204a:	bf0c      	ite	eq
 800204c:	2000      	moveq	r0, #0
 800204e:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8002050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop

08002058 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8002058:	f001 010f 	and.w	r1, r1, #15
 800205c:	2301      	movs	r3, #1
 800205e:	fa03 f101 	lsl.w	r1, r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8002062:	43c9      	mvns	r1, r1
 8002064:	b289      	uxth	r1, r1
 8002066:	8101      	strh	r1, [r0, #8]
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop

0800206c <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 800206c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002070:	f2c4 0301 	movt	r3, #16385	; 0x4001
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 8002074:	f64f 71ff 	movw	r1, #65535	; 0xffff
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8002078:	2200      	movs	r2, #0
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 800207a:	f2c0 017f 	movt	r1, #127	; 0x7f
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 800207e:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8002080:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8002082:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8002084:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8002086:	6159      	str	r1, [r3, #20]
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop

0800208c <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800208c:	7983      	ldrb	r3, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800208e:	b470      	push	{r4, r5, r6}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8002090:	b343      	cbz	r3, 80020e4 <EXTI_Init+0x58>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8002092:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002096:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800209a:	6801      	ldr	r1, [r0, #0]
 800209c:	681e      	ldr	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800209e:	7902      	ldrb	r2, [r0, #4]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80020a0:	7945      	ldrb	r5, [r0, #5]
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80020a2:	43cc      	mvns	r4, r1
 80020a4:	4026      	ands	r6, r4
 80020a6:	601e      	str	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80020a8:	685e      	ldr	r6, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80020aa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80020ae:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80020b2:	4034      	ands	r4, r6
 80020b4:	605c      	str	r4, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80020b6:	6814      	ldr	r4, [r2, #0]
 80020b8:	4321      	orrs	r1, r4
 80020ba:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80020bc:	6802      	ldr	r2, [r0, #0]
 80020be:	6898      	ldr	r0, [r3, #8]
 80020c0:	43d1      	mvns	r1, r2
 80020c2:	4008      	ands	r0, r1
 80020c4:	6098      	str	r0, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80020c6:	68d8      	ldr	r0, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80020c8:	2d10      	cmp	r5, #16

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80020ca:	ea01 0100 	and.w	r1, r1, r0
 80020ce:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80020d0:	d014      	beq.n	80020fc <EXTI_Init+0x70>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80020d2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80020d6:	f505 359e 	add.w	r5, r5, #80896	; 0x13c00

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80020da:	682b      	ldr	r3, [r5, #0]
 80020dc:	431a      	orrs	r2, r3
 80020de:	602a      	str	r2, [r5, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80020e0:	bc70      	pop	{r4, r5, r6}
 80020e2:	4770      	bx	lr
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80020e4:	7903      	ldrb	r3, [r0, #4]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80020e6:	6801      	ldr	r1, [r0, #0]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80020e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020ec:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80020f0:	bc70      	pop	{r4, r5, r6}
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	ea22 0201 	bic.w	r2, r2, r1
 80020f8:	601a      	str	r2, [r3, #0]
  }
}
 80020fa:	4770      	bx	lr
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80020fc:	6899      	ldr	r1, [r3, #8]
 80020fe:	4311      	orrs	r1, r2
 8002100:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8002102:	68d9      	ldr	r1, [r3, #12]
 8002104:	430a      	orrs	r2, r1
 8002106:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8002108:	bc70      	pop	{r4, r5, r6}
 800210a:	4770      	bx	lr

0800210c <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800210c:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800210e:	220c      	movs	r2, #12
 8002110:	7142      	strb	r2, [r0, #5]
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8002112:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8002114:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8002116:	7183      	strb	r3, [r0, #6]
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop

0800211c <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800211c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002120:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	4310      	orrs	r0, r2
 8002128:	6118      	str	r0, [r3, #16]
 800212a:	4770      	bx	lr

0800212c <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800212c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002130:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002138:	bf0c      	ite	eq
 800213a:	2000      	moveq	r0, #0
 800213c:	2001      	movne	r0, #1
 800213e:	4770      	bx	lr

08002140 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002140:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002144:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002148:	6158      	str	r0, [r3, #20]
 800214a:	4770      	bx	lr

0800214c <EXTI_GetITStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800214c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002150:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  return bitstatus;
  
}
 8002158:	bf0c      	ite	eq
 800215a:	2000      	moveq	r0, #0
 800215c:	2001      	movne	r0, #1
 800215e:	4770      	bx	lr

08002160 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002160:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002164:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002168:	6158      	str	r0, [r3, #20]
 800216a:	4770      	bx	lr

0800216c <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 800216c:	b508      	push	{r3, lr}
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 800216e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002172:	2101      	movs	r1, #1
 8002174:	f7fe fd94 	bl	8000ca0 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 8002178:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800217c:	2100      	movs	r1, #0
}
 800217e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void DMA2D_DeInit(void)
{
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 8002182:	f7fe bd8d 	b.w	8000ca0 <RCC_AHB1PeriphResetCmd>
 8002186:	bf00      	nop

08002188 <DMA2D_Init>:
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 8002188:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800218c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 8002190:	b470      	push	{r4, r5, r6}
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8002198:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800219c:	601a      	str	r2, [r3, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	6802      	ldr	r2, [r0, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 80021a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a8:	f022 0207 	bic.w	r2, r2, #7
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 80021ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021b0:	6842      	ldr	r2, [r0, #4]
 80021b2:	4311      	orrs	r1, r2
 80021b4:	6359      	str	r1, [r3, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 80021b6:	68c6      	ldr	r6, [r0, #12]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 80021b8:	6905      	ldr	r5, [r0, #16]
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 80021ba:	2a00      	cmp	r2, #0
 80021bc:	d03a      	beq.n	8002234 <DMA2D_Init+0xac>
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 80021be:	2a01      	cmp	r2, #1
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 80021c0:	bf02      	ittt	eq
 80021c2:	0236      	lsleq	r6, r6, #8
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 80021c4:	042d      	lsleq	r5, r5, #16
      outalpha = (uint32_t)0x00000000;
 80021c6:	2400      	moveq	r4, #0
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 80021c8:	d00f      	beq.n	80021ea <DMA2D_Init+0x62>
      outalpha = (uint32_t)0x00000000;
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 80021ca:	2a02      	cmp	r2, #2
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 80021cc:	bf02      	ittt	eq
 80021ce:	0176      	lsleq	r6, r6, #5
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 80021d0:	02ed      	lsleq	r5, r5, #11
      outalpha = (uint32_t)0x00000000;
 80021d2:	2400      	moveq	r4, #0
      outalpha = (uint32_t)0x00000000;
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 80021d4:	d009      	beq.n	80021ea <DMA2D_Init+0x62>

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 80021d6:	6944      	ldr	r4, [r0, #20]
      outalpha = (uint32_t)0x00000000;
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 80021d8:	2a03      	cmp	r2, #3
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 80021da:	bf03      	ittte	eq
 80021dc:	0176      	lsleq	r6, r6, #5
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 80021de:	02ad      	lsleq	r5, r5, #10
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 80021e0:	03e4      	lsleq	r4, r4, #15
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 80021e2:	0136      	lslne	r6, r6, #4
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 80021e4:	bf1c      	itt	ne
 80021e6:	022d      	lslne	r5, r5, #8
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 80021e8:	0324      	lslne	r4, r4, #12
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 80021ea:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80021ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021f2:	6882      	ldr	r2, [r0, #8]
 80021f4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80021f6:	4311      	orrs	r1, r2
 80021f8:	4331      	orrs	r1, r6
 80021fa:	ea41 0205 	orr.w	r2, r1, r5
 80021fe:	4322      	orrs	r2, r4
 8002200:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 8002202:	6982      	ldr	r2, [r0, #24]
 8002204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 8002206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002208:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800220c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 8002212:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002214:	69c2      	ldr	r2, [r0, #28]
 8002216:	430a      	orrs	r2, r1
 8002218:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 800221a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 800221c:	6a41      	ldr	r1, [r0, #36]	; 0x24
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 800221e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 8002224:	6a02      	ldr	r2, [r0, #32]
 8002226:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002228:	4302      	orrs	r2, r0
 800222a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800222e:	645a      	str	r2, [r3, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 8002230:	bc70      	pop	{r4, r5, r6}
 8002232:	4770      	bx	lr

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 8002234:	6944      	ldr	r4, [r0, #20]

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8002236:	0236      	lsls	r6, r6, #8
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8002238:	042d      	lsls	r5, r5, #16
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 800223a:	0624      	lsls	r4, r4, #24
 800223c:	e7d5      	b.n	80021ea <DMA2D_Init+0x62>
 800223e:	bf00      	nop

08002240 <DMA2D_StructInit>:
  */
}
void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
  /* Initialize the transfer mode member */
  DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 8002240:	2300      	movs	r3, #0
 8002242:	6003      	str	r3, [r0, #0]

  /* Initialize the output color mode members */
  DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 8002244:	6043      	str	r3, [r0, #4]

  /* Initialize the alpha and RGB values */
  DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 8002246:	60c3      	str	r3, [r0, #12]
  DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 8002248:	6083      	str	r3, [r0, #8]
  DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 800224a:	6103      	str	r3, [r0, #16]
  DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 800224c:	6143      	str	r3, [r0, #20]

  /* Initialize the output memory address */
  DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 800224e:	6183      	str	r3, [r0, #24]

  /* Initialize the output offset */
  DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 8002250:	61c3      	str	r3, [r0, #28]

  /* Initialize the number of line and the number of pixel per line */
  DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 8002252:	6203      	str	r3, [r0, #32]
  DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 8002254:	6243      	str	r3, [r0, #36]	; 0x24
 8002256:	4770      	bx	lr

08002258 <DMA2D_StartTransfer>:
  */

void DMA2D_StartTransfer(void)
{
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 8002258:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800225c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop

0800226c <DMA2D_AbortTransfer>:
  */

void DMA2D_AbortTransfer(void)
{
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 800226c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002270:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	f042 0204 	orr.w	r2, r2, #4
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop

08002280 <DMA2D_Suspend>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 8002280:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002284:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002288:	681a      	ldr	r2, [r3, #0]
void DMA2D_Suspend(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800228a:	b918      	cbnz	r0, 8002294 <DMA2D_Suspend+0x14>
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
  }
  else
  {
    /* Continue DMA2D transfer by clearing STOP bit */
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 800228c:	f022 0202 	bic.w	r2, r2, #2
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 8002294:	f042 0202 	orr.w	r2, r2, #2
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	4770      	bx	lr

0800229c <DMA2D_FGConfig>:
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 800229c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80022a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022a4:	6801      	ldr	r1, [r0, #0]
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 80022a6:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 80022a8:	60d9      	str	r1, [r3, #12]

  /* Configures the FG offset */
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 80022aa:	6919      	ldr	r1, [r3, #16]
 80022ac:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 80022b0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80022b4:	6119      	str	r1, [r3, #16]
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 80022b6:	691c      	ldr	r4, [r3, #16]
 80022b8:	6841      	ldr	r1, [r0, #4]
 80022ba:	4321      	orrs	r1, r4
 80022bc:	6119      	str	r1, [r3, #16]

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 80022be:	69d9      	ldr	r1, [r3, #28]
 80022c0:	22c0      	movs	r2, #192	; 0xc0
 80022c2:	f2c0 02fc 	movt	r2, #252	; 0xfc
 80022c6:	400a      	ands	r2, r1
 80022c8:	61da      	str	r2, [r3, #28]
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 80022ca:	69df      	ldr	r7, [r3, #28]
 80022cc:	6886      	ldr	r6, [r0, #8]
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 80022ce:	68c5      	ldr	r5, [r0, #12]
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 80022d0:	6904      	ldr	r4, [r0, #16]
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 80022d2:	6941      	ldr	r1, [r0, #20]
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 80022d4:	6982      	ldr	r2, [r0, #24]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 80022d6:	433e      	orrs	r6, r7
 80022d8:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
 80022dc:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
                    fg_alpha_mode | fg_alphavalue);
 80022e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 80022e4:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 80022e8:	61da      	str	r2, [r3, #28]
                    fg_alpha_mode | fg_alphavalue);

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 80022ea:	6a1a      	ldr	r2, [r3, #32]
 80022ec:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80022f0:	621a      	str	r2, [r3, #32]
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 80022f2:	6a1d      	ldr	r5, [r3, #32]
 80022f4:	69c4      	ldr	r4, [r0, #28]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
                    fg_alpha_mode | fg_alphavalue);

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 80022f6:	6a01      	ldr	r1, [r0, #32]
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 80022f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 80022fa:	432c      	orrs	r4, r5
 80022fc:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
 8002300:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8002304:	621a      	str	r2, [r3, #32]

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 8002306:	6a82      	ldr	r2, [r0, #40]	; 0x28
}
 8002308:	bcf0      	pop	{r4, r5, r6, r7}
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop

08002310 <DMA2D_FG_StructInit>:
  * @retval None
  */
void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
  /*!< Initialize the DMA2D foreground memory address */
  DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 8002310:	2300      	movs	r3, #0
 8002312:	6003      	str	r3, [r0, #0]

  /*!< Initialize the DMA2D foreground offset */
  DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 8002314:	6043      	str	r3, [r0, #4]

  /*!< Initialize the DMA2D foreground color mode */
  DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 8002316:	6083      	str	r3, [r0, #8]

  /*!< Initialize the DMA2D foreground CLUT color mode */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 8002318:	60c3      	str	r3, [r0, #12]

  /*!< Initialize the DMA2D foreground CLUT size */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 800231a:	6103      	str	r3, [r0, #16]

  /*!< Initialize the DMA2D foreground alpha mode */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800231c:	6143      	str	r3, [r0, #20]

  /*!< Initialize the DMA2D foreground alpha value */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 800231e:	6183      	str	r3, [r0, #24]

  /*!< Initialize the DMA2D foreground blue value */
  DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 8002320:	61c3      	str	r3, [r0, #28]

  /*!< Initialize the DMA2D foreground green value */
  DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 8002322:	6203      	str	r3, [r0, #32]

  /*!< Initialize the DMA2D foreground red value */
  DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 8002324:	6243      	str	r3, [r0, #36]	; 0x24

  /*!< Initialize the DMA2D foreground CLUT memory address */
  DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 8002326:	6283      	str	r3, [r0, #40]	; 0x28
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop

0800232c <DMA2D_BGConfig>:
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 800232c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002330:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002334:	6801      	ldr	r1, [r0, #0]
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 8002336:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 8002338:	6159      	str	r1, [r3, #20]

  /* Configures the BG offset */
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 800233a:	6999      	ldr	r1, [r3, #24]
 800233c:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8002340:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002344:	6199      	str	r1, [r3, #24]
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 8002346:	699c      	ldr	r4, [r3, #24]
 8002348:	6841      	ldr	r1, [r0, #4]
 800234a:	4321      	orrs	r1, r4
 800234c:	6199      	str	r1, [r3, #24]

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
 800234e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002350:	22c0      	movs	r2, #192	; 0xc0
 8002352:	f2c0 02fc 	movt	r2, #252	; 0xfc
 8002356:	400a      	ands	r2, r1
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800235a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 800235c:	6886      	ldr	r6, [r0, #8]
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 800235e:	68c5      	ldr	r5, [r0, #12]
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 8002360:	6904      	ldr	r4, [r0, #16]
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 8002362:	6941      	ldr	r1, [r0, #20]
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 8002364:	6982      	ldr	r2, [r0, #24]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 8002366:	433e      	orrs	r6, r7
 8002368:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
 800236c:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
                    bg_alpha_mode | bg_alphavalue);
 8002370:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 8002374:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
                    bg_alpha_mode | bg_alphavalue);

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 800237a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800237c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 8002382:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8002384:	69c4      	ldr	r4, [r0, #28]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
                    bg_alpha_mode | bg_alphavalue);

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 8002386:	6a01      	ldr	r1, [r0, #32]
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 8002388:	6a42      	ldr	r2, [r0, #36]	; 0x24
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 800238a:	432c      	orrs	r4, r5
 800238c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
 8002390:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8002394:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 8002396:	6a82      	ldr	r2, [r0, #40]	; 0x28

}
 8002398:	bcf0      	pop	{r4, r5, r6, r7}
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 800239a:	631a      	str	r2, [r3, #48]	; 0x30

}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop

080023a0 <DMA2D_BG_StructInit>:
  * @retval None
  */
void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
  /*!< Initialize the DMA2D background memory address */
  DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
 80023a0:	2300      	movs	r3, #0
 80023a2:	6003      	str	r3, [r0, #0]

  /*!< Initialize the DMA2D background offset */
  DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 80023a4:	6043      	str	r3, [r0, #4]

  /*!< Initialize the DMA2D background color mode */
  DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 80023a6:	6083      	str	r3, [r0, #8]

  /*!< Initialize the DMA2D background CLUT color mode */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 80023a8:	60c3      	str	r3, [r0, #12]

  /*!< Initialize the DMA2D background CLUT size */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 80023aa:	6103      	str	r3, [r0, #16]

  /*!< Initialize the DMA2D background alpha mode */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 80023ac:	6143      	str	r3, [r0, #20]

  /*!< Initialize the DMA2D background alpha value */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 80023ae:	6183      	str	r3, [r0, #24]

  /*!< Initialize the DMA2D background blue value */
  DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 80023b0:	61c3      	str	r3, [r0, #28]

  /*!< Initialize the DMA2D background green value */
  DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 80023b2:	6203      	str	r3, [r0, #32]

  /*!< Initialize the DMA2D background red value */
  DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 80023b4:	6243      	str	r3, [r0, #36]	; 0x24

  /*!< Initialize the DMA2D background CLUT memory address */
  DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 80023b6:	6283      	str	r3, [r0, #40]	; 0x28
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <DMA2D_FGStart>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 80023bc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80023c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023c4:	69da      	ldr	r2, [r3, #28]
void DMA2D_FGStart(FunctionalState NewState) 
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80023c6:	b918      	cbnz	r0, 80023d0 <DMA2D_FGStart+0x14>
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
  }
  else
  {
    /* abort the transfer */
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 80023c8:	f022 0220 	bic.w	r2, r2, #32
 80023cc:	61da      	str	r2, [r3, #28]
 80023ce:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 80023d0:	f042 0220 	orr.w	r2, r2, #32
 80023d4:	61da      	str	r2, [r3, #28]
 80023d6:	4770      	bx	lr

080023d8 <DMA2D_BGStart>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 80023d8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80023dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void DMA2D_BGStart(FunctionalState NewState) 
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80023e2:	b918      	cbnz	r0, 80023ec <DMA2D_BGStart+0x14>
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
  }
  else
  {
    /* abort the transfer */
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 80023e4:	f022 0220 	bic.w	r2, r2, #32
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24
 80023ea:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 80023ec:	f042 0220 	orr.w	r2, r2, #32
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
 80023f2:	4770      	bx	lr

080023f4 <DMA2D_DeadTimeConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 80023f4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80023f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /* Check the parameters */
  assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80023fe:	b919      	cbnz	r1, 8002408 <DMA2D_DeadTimeConfig+0x14>
    DeadTime = DMA2D_DeadTime << 8;
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
  }
  else
  {
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 8002400:	f022 0201 	bic.w	r2, r2, #1
 8002404:	64da      	str	r2, [r3, #76]	; 0x4c
 8002406:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 8002408:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	64da      	str	r2, [r3, #76]	; 0x4c
    DeadTime = DMA2D_DeadTime << 8;
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 8002412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800241c:	64d8      	str	r0, [r3, #76]	; 0x4c
 800241e:	4770      	bx	lr

08002420 <DMA2D_LineWatermarkConfig>:
{
  /* Check the parameters */
  assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));

  /* Sets the Line watermark configuration */
  DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
 8002420:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002424:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002428:	6498      	str	r0, [r3, #72]	; 0x48
 800242a:	4770      	bx	lr

0800242c <DMA2D_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 800242c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002430:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002434:	681a      	ldr	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002436:	b919      	cbnz	r1, 8002440 <DMA2D_ITConfig+0x14>
    DMA2D->CR |= DMA2D_IT;
  }
  else
  {
    /* Disable the selected DMA2D interrupts */
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
 8002438:	ea22 0000 	bic.w	r0, r2, r0
 800243c:	6018      	str	r0, [r3, #0]
 800243e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 8002440:	4310      	orrs	r0, r2
 8002442:	6018      	str	r0, [r3, #0]
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop

08002448 <DMA2D_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 8002448:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800244c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4218      	tst	r0, r3
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
}
 8002454:	bf0c      	ite	eq
 8002456:	2000      	moveq	r0, #0
 8002458:	2001      	movne	r0, #1
 800245a:	4770      	bx	lr

0800245c <DMA2D_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
    
  /* Clear the corresponding DMA2D flag */
  DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 800245c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002460:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002464:	6098      	str	r0, [r3, #8]
 8002466:	4770      	bx	lr

08002468 <DMA2D_GetITStatus>:
  uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
  
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));

  if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 8002468:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800246c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002470:	685a      	ldr	r2, [r3, #4]
  else
  {
    bitstatus = RESET;
  }
  
  if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4003      	ands	r3, r0
 8002476:	d005      	beq.n	8002484 <DMA2D_GetITStatus+0x1c>
 8002478:	ea12 2010 	ands.w	r0, r2, r0, lsr #8
  {
    bitstatus = SET;
 800247c:	bf0c      	ite	eq
 800247e:	2000      	moveq	r0, #0
 8002480:	2001      	movne	r0, #1
 8002482:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8002484:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 8002486:	4770      	bx	lr

08002488 <DMA2D_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 8002488:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800248c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  */
void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
{
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
 8002490:	0a00      	lsrs	r0, r0, #8
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 8002492:	6098      	str	r0, [r3, #8]
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop

08002498 <LTDC_DeInit>:
  * @param  None
  * @retval None
  */

void LTDC_DeInit(void)
{
 8002498:	b508      	push	{r3, lr}
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
 800249a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800249e:	2101      	movs	r1, #1
 80024a0:	f7fe fc36 	bl	8000d10 <RCC_APB2PeriphResetCmd>
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 80024a4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80024a8:	2100      	movs	r1, #0
}
 80024aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void LTDC_DeInit(void)
{
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 80024ae:	f7fe bc2f 	b.w	8000d10 <RCC_APB2PeriphResetCmd>
 80024b2:	bf00      	nop

080024b4 <LTDC_Init>:
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80024b4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80024b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80024bc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80024c0:	6899      	ldr	r1, [r3, #8]
 80024c2:	f2cf 0200 	movt	r2, #61440	; 0xf000
 80024c6:	4011      	ands	r1, r2
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 80024c8:	b470      	push	{r4, r5, r6}
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80024ca:	6099      	str	r1, [r3, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 80024cc:	689d      	ldr	r5, [r3, #8]
 80024ce:	6944      	ldr	r4, [r0, #20]
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 80024d0:	6901      	ldr	r1, [r0, #16]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 80024d2:	432c      	orrs	r4, r5
 80024d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80024d8:	6099      	str	r1, [r3, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80024da:	68d9      	ldr	r1, [r3, #12]
 80024dc:	4011      	ands	r1, r2
 80024de:	60d9      	str	r1, [r3, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 80024e0:	68dd      	ldr	r5, [r3, #12]
 80024e2:	69c4      	ldr	r4, [r0, #28]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 80024e4:	6981      	ldr	r1, [r0, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 80024e6:	432c      	orrs	r4, r5
 80024e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80024ec:	60d9      	str	r1, [r3, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80024ee:	6919      	ldr	r1, [r3, #16]
 80024f0:	4011      	ands	r1, r2
 80024f2:	6119      	str	r1, [r3, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 80024f4:	691d      	ldr	r5, [r3, #16]
 80024f6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 80024f8:	6a01      	ldr	r1, [r0, #32]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 80024fa:	432c      	orrs	r4, r5
 80024fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8002500:	6119      	str	r1, [r3, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002502:	6959      	ldr	r1, [r3, #20]
 8002504:	400a      	ands	r2, r1
 8002506:	615a      	str	r2, [r3, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 8002508:	695c      	ldr	r4, [r3, #20]
 800250a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 800250c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 800250e:	4321      	orrs	r1, r4
 8002510:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8002514:	615a      	str	r2, [r3, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 8002516:	6999      	ldr	r1, [r3, #24]
 8002518:	f648 028f 	movw	r2, #34959	; 0x888f
 800251c:	f6c0 72fe 	movt	r2, #4094	; 0xffe
 8002520:	400a      	ands	r2, r1
 8002522:	619a      	str	r2, [r3, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8002524:	699e      	ldr	r6, [r3, #24]
 8002526:	6805      	ldr	r5, [r0, #0]
 8002528:	6844      	ldr	r4, [r0, #4]
 800252a:	6881      	ldr	r1, [r0, #8]
 800252c:	68c2      	ldr	r2, [r0, #12]
 800252e:	4335      	orrs	r5, r6
 8002530:	432c      	orrs	r4, r5
 8002532:	4321      	orrs	r1, r4
 8002534:	430a      	orrs	r2, r1
 8002536:	619a      	str	r2, [r3, #24]

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 800253a:	6b44      	ldr	r4, [r0, #52]	; 0x34
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 800253c:	6b01      	ldr	r1, [r0, #48]	; 0x30

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800253e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 8002544:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002546:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002548:	4302      	orrs	r2, r0
 800254a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800254e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002554:	bc70      	pop	{r4, r5, r6}
 8002556:	4770      	bx	lr

08002558 <LTDC_StructInit>:
  */

void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
{
  /*--------------- Reset LTDC init structure parameters values ----------------*/
  LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
 8002558:	2300      	movs	r3, #0
 800255a:	6003      	str	r3, [r0, #0]
  LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
 800255c:	6043      	str	r3, [r0, #4]
  LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
 800255e:	6083      	str	r3, [r0, #8]
  LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
 8002560:	60c3      	str	r3, [r0, #12]
  LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
 8002562:	6103      	str	r3, [r0, #16]
  LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
 8002564:	6143      	str	r3, [r0, #20]
  LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
 8002566:	6183      	str	r3, [r0, #24]
  LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
 8002568:	61c3      	str	r3, [r0, #28]
  LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
 800256a:	6203      	str	r3, [r0, #32]
  LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
 800256c:	6243      	str	r3, [r0, #36]	; 0x24
  LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
 800256e:	6283      	str	r3, [r0, #40]	; 0x28
  LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
 8002570:	62c3      	str	r3, [r0, #44]	; 0x2c
  LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
 8002572:	6303      	str	r3, [r0, #48]	; 0x30
  LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
 8002574:	6343      	str	r3, [r0, #52]	; 0x34
  LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
 8002576:	6383      	str	r3, [r0, #56]	; 0x38
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop

0800257c <LTDC_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 800257c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002580:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002584:	699a      	ldr	r2, [r3, #24]
void LTDC_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002586:	b918      	cbnz	r0, 8002590 <LTDC_Cmd+0x14>
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
  }
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	619a      	str	r2, [r3, #24]
 800258e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	619a      	str	r2, [r3, #24]
 8002596:	4770      	bx	lr

08002598 <LTDC_DitherCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 8002598:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800259c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80025a0:	699a      	ldr	r2, [r3, #24]
void LTDC_DitherCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80025a2:	b918      	cbnz	r0, 80025ac <LTDC_DitherCmd+0x14>
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
  }
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 80025a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025a8:	619a      	str	r2, [r3, #24]
 80025aa:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 80025ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025b0:	619a      	str	r2, [r3, #24]
 80025b2:	4770      	bx	lr

080025b4 <LTDC_GetRGBWidth>:

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 80025b4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80025b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80025bc:	f648 028f 	movw	r2, #34959	; 0x888f
 80025c0:	6999      	ldr	r1, [r3, #24]
 80025c2:	f6c0 72fe 	movt	r2, #4094	; 0xffe
 80025c6:	400a      	ands	r2, r1
  *         the Dither RGB width.
  * @retval None
  */

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
 80025c8:	b410      	push	{r4}
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 80025ca:	619a      	str	r2, [r3, #24]

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 80025cc:	699c      	ldr	r4, [r3, #24]
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 80025ce:	6999      	ldr	r1, [r3, #24]
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 80025d0:	699a      	ldr	r2, [r3, #24]
{
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 80025d2:	f3c4 1402 	ubfx	r4, r4, #4, #3
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 80025d6:	f3c1 2102 	ubfx	r1, r1, #8, #3
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 80025da:	f3c2 3202 	ubfx	r2, r2, #12, #3

  return LTDC_RGB_InitStruct;
 80025de:	6004      	str	r4, [r0, #0]
 80025e0:	6041      	str	r1, [r0, #4]
 80025e2:	6082      	str	r2, [r0, #8]
}
 80025e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop

080025ec <LTDC_RGBStructInit>:
  * @retval None
  */

void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
{
  LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
 80025ec:	2302      	movs	r3, #2
 80025ee:	6003      	str	r3, [r0, #0]
  LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
 80025f0:	6043      	str	r3, [r0, #4]
  LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
 80025f2:	6083      	str	r3, [r0, #8]
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop

080025f8 <LTDC_LIPConfig>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
 80025f8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80025fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002600:	6418      	str	r0, [r3, #64]	; 0x40
 8002602:	4770      	bx	lr

08002604 <LTDC_ReloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 8002604:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002608:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800260c:	6258      	str	r0, [r3, #36]	; 0x24
 800260e:	4770      	bx	lr

08002610 <LTDC_LayerInit>:
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002610:	6843      	ldr	r3, [r0, #4]
  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 8002612:	f8d1 c01c 	ldr.w	ip, [r1, #28]
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 8002616:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800261a:	f403 4b70 	and.w	fp, r3, #61440	; 0xf000
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 800261e:	e891 000c 	ldmia.w	r1, {r2, r3}
 8002622:	ea42 4203 	orr.w	r2, r2, r3, lsl #16

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 8002626:	f8d1 a00c 	ldr.w	sl, [r1, #12]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 800262a:	f8d1 9008 	ldr.w	r9, [r1, #8]
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 800262e:	f8d1 8020 	ldr.w	r8, [r1, #32]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8002632:	698f      	ldr	r7, [r1, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 8002634:	690d      	ldr	r5, [r1, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 8002636:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 8002638:	694c      	ldr	r4, [r1, #20]
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800263a:	f8c0 b004 	str.w	fp, [r0, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 800263e:	6042      	str	r2, [r0, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002640:	6883      	ldr	r3, [r0, #8]
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 8002642:	f8d1 b02c 	ldr.w	fp, [r1, #44]	; 0x2c
 8002646:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 8002648:	ea49 490a 	orr.w	r9, r9, sl, lsl #16
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800264c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002650:	6083      	str	r3, [r0, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 8002652:	f8c0 9008 	str.w	r9, [r0, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 8002656:	6903      	ldr	r3, [r0, #16]
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 8002658:	f8d1 9030 	ldr.w	r9, [r1, #48]	; 0x30
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 800265c:	ea4f 4808 	mov.w	r8, r8, lsl #16
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8002660:	ea48 2c0c 	orr.w	ip, r8, ip, lsl #8
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 8002664:	f023 0307 	bic.w	r3, r3, #7
  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8002668:	ea4c 0707 	orr.w	r7, ip, r7
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 800266c:	6103      	str	r3, [r0, #16]
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
                        dcred | dcalpha);
 800266e:	ea47 6606 	orr.w	r6, r7, r6, lsl #24
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 8002672:	6105      	str	r5, [r0, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002674:	2300      	movs	r3, #0
 8002676:	6985      	ldr	r5, [r0, #24]
 8002678:	6183      	str	r3, [r0, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 800267a:	6186      	str	r6, [r0, #24]
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 800267c:	6945      	ldr	r5, [r0, #20]
 800267e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002682:	6145      	str	r5, [r0, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 8002684:	6144      	str	r4, [r0, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002686:	69c4      	ldr	r4, [r0, #28]
 8002688:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 800268c:	ea4b 0202 	orr.w	r2, fp, r2
  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002690:	f024 0407 	bic.w	r4, r4, #7
 8002694:	61c4      	str	r4, [r0, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 8002696:	61c2      	str	r2, [r0, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002698:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800269a:	6283      	str	r3, [r0, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 800269c:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80026a0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 80026a2:	6b8c      	ldr	r4, [r1, #56]	; 0x38
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 80026a4:	6b4a      	ldr	r2, [r1, #52]	; 0x34

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 80026a6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 80026a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80026ac:	f005 21e0 	and.w	r1, r5, #3758153728	; 0xe000e000
 80026b0:	62c1      	str	r1, [r0, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 80026b2:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80026b4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80026b6:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80026ba:	f022 0207 	bic.w	r2, r2, #7
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 80026be:	b082      	sub	sp, #8
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80026c0:	6302      	str	r2, [r0, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 80026c2:	6303      	str	r3, [r0, #48]	; 0x30

}
 80026c4:	b002      	add	sp, #8
 80026c6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80026ca:	4770      	bx	lr

080026cc <LTDC_LayerStructInit>:
void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 80026cc:	2300      	movs	r3, #0
  *         be initialized.
  * @retval None
  */

void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
 80026ce:	b410      	push	{r4}
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 80026d0:	f44f 61c0 	mov.w	r1, #1536	; 0x600

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 80026d4:	24ff      	movs	r4, #255	; 0xff
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 80026d6:	2207      	movs	r2, #7

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 80026d8:	6144      	str	r4, [r0, #20]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 80026da:	6281      	str	r1, [r0, #40]	; 0x28
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 80026dc:	62c2      	str	r2, [r0, #44]	; 0x2c
void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 80026de:	6003      	str	r3, [r0, #0]
  LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
 80026e0:	6043      	str	r3, [r0, #4]

  /*!< Initialize the vertical limit member */
  LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
 80026e2:	6083      	str	r3, [r0, #8]
  LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
 80026e4:	60c3      	str	r3, [r0, #12]

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
 80026e6:	6103      	str	r3, [r0, #16]

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;

  /*!< Initialize the default color values */
  LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
 80026e8:	6183      	str	r3, [r0, #24]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
 80026ea:	61c3      	str	r3, [r0, #28]
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
 80026ec:	6203      	str	r3, [r0, #32]
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
 80026ee:	6243      	str	r3, [r0, #36]	; 0x24
  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;

  /*!< Initialize the frame buffer start address */
  LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
 80026f0:	6303      	str	r3, [r0, #48]	; 0x30

  /*!< Initialize the frame buffer pitch and line length */
  LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
 80026f2:	6343      	str	r3, [r0, #52]	; 0x34
  LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
 80026f4:	6383      	str	r3, [r0, #56]	; 0x38

  /*!< Initialize the frame buffer line number */
  LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
 80026f6:	63c3      	str	r3, [r0, #60]	; 0x3c
}
 80026f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop

08002700 <LTDC_LayerCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002700:	6803      	ldr	r3, [r0, #0]
void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002702:	b919      	cbnz	r1, 800270c <LTDC_LayerCmd+0xc>
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
  }
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6003      	str	r3, [r0, #0]
 800270a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6003      	str	r3, [r0, #0]
 8002712:	4770      	bx	lr

08002714 <LTDC_GetPosStatus>:

LTDC_PosTypeDef LTDC_GetPosStatus(void)
{
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
 8002714:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002718:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800271c:	2200      	movs	r2, #0
 800271e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002720:	645a      	str	r2, [r3, #68]	; 0x44

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 8002722:	6c59      	ldr	r1, [r3, #68]	; 0x44
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 8002724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 8002726:	0c09      	lsrs	r1, r1, #16
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 8002728:	b292      	uxth	r2, r2

  return LTDC_Pos_InitStruct;
 800272a:	e880 0006 	stmia.w	r0, {r1, r2}
}
 800272e:	4770      	bx	lr

08002730 <LTDC_PosStructInit>:
  * @retval None
  */

void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
{
  LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
 8002730:	2300      	movs	r3, #0
 8002732:	6003      	str	r3, [r0, #0]
  LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
 8002734:	6043      	str	r3, [r0, #4]
 8002736:	4770      	bx	lr

08002738 <LTDC_GetCDStatus>:
  FlagStatus bitstatus;

  /* Check the parameters */
  assert_param(IS_LTDC_GET_CD(LTDC_CD));

  if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
 8002738:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800273c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002742:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002744:	bf0c      	ite	eq
 8002746:	2000      	moveq	r0, #0
 8002748:	2001      	movne	r0, #1
 800274a:	4770      	bx	lr

0800274c <LTDC_ColorKeyingConfig>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
{ 
 800274c:	b430      	push	{r4, r5}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
 800274e:	b95a      	cbnz	r2, 8002768 <LTDC_ColorKeyingConfig+0x1c>
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
  }
  else
  {
    /* Disable LTDC color keying by clearing COLKEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8002750:	6803      	ldr	r3, [r0, #0]
 8002752:	f023 0302 	bic.w	r3, r3, #2
 8002756:	6003      	str	r3, [r0, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 8002758:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800275c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002760:	2201      	movs	r2, #1
 8002762:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002764:	bc30      	pop	{r4, r5}
 8002766:	4770      	bx	lr
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8002768:	6805      	ldr	r5, [r0, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
 800276a:	684c      	ldr	r4, [r1, #4]
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
 800276c:	688a      	ldr	r2, [r1, #8]
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 800276e:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8002770:	f045 0102 	orr.w	r1, r5, #2
 8002774:	6001      	str	r1, [r0, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8002776:	68c1      	ldr	r1, [r0, #12]
 8002778:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800277c:	60c1      	str	r1, [r0, #12]
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 800277e:	68c1      	ldr	r1, [r0, #12]
 8002780:	430b      	orrs	r3, r1
 8002782:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800278a:	60c3      	str	r3, [r0, #12]
 800278c:	e7e4      	b.n	8002758 <LTDC_ColorKeyingConfig+0xc>
 800278e:	bf00      	nop

08002790 <LTDC_ColorKeyingStructInit>:
  */

void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
{
  /*!< Initialize the color keying values */
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
 8002790:	2300      	movs	r3, #0
 8002792:	6003      	str	r3, [r0, #0]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
 8002794:	6043      	str	r3, [r0, #4]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
 8002796:	6083      	str	r3, [r0, #8]
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop

0800279c <LTDC_CLUTCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800279c:	6803      	ldr	r3, [r0, #0]
void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800279e:	b949      	cbnz	r1, 80027b4 <LTDC_CLUTCmd+0x18>
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
  }
  else
  {
    /* Disable CLUT by clearing CLUTEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
 80027a0:	f023 0310 	bic.w	r3, r3, #16
 80027a4:	6003      	str	r3, [r0, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 80027a6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80027aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80027ae:	2201      	movs	r2, #1
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
 80027b2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 80027b4:	f043 0310 	orr.w	r3, r3, #16
 80027b8:	6003      	str	r3, [r0, #0]
 80027ba:	e7f4      	b.n	80027a6 <LTDC_CLUTCmd+0xa>

080027bc <LTDC_CLUTInit>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{  
 80027bc:	b430      	push	{r4, r5}
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
 80027be:	e891 0034 	ldmia.w	r1, {r2, r4, r5}
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
 80027c2:	68cb      	ldr	r3, [r1, #12]
 80027c4:	041b      	lsls	r3, r3, #16
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 80027c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80027ca:	4323      	orrs	r3, r4
                              green | red);
 80027cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 80027d0:	6403      	str	r3, [r0, #64]	; 0x40
                              green | red);
}
 80027d2:	bc30      	pop	{r4, r5}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop

080027d8 <LTDC_CLUTStructInit>:
  */

void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{
  /*!< Initialize the CLUT adress and RGB values */
  LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
 80027d8:	2300      	movs	r3, #0
 80027da:	6003      	str	r3, [r0, #0]
  LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
 80027dc:	6043      	str	r3, [r0, #4]
  LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
 80027de:	6083      	str	r3, [r0, #8]
  LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
 80027e0:	60c3      	str	r3, [r0, #12]
 80027e2:	4770      	bx	lr

080027e4 <LTDC_LayerPosition>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         position reconfiguration.
  */

void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
{
 80027e4:	b430      	push	{r4, r5}
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80027e6:	6844      	ldr	r4, [r0, #4]
 80027e8:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
 80027ec:	6044      	str	r4, [r0, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80027ee:	6884      	ldr	r4, [r0, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 80027f0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80027f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80027f8:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
 80027fc:	6084      	str	r4, [r0, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 80027fe:	68dc      	ldr	r4, [r3, #12]
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
  
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
 8002800:	6903      	ldr	r3, [r0, #16]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 8002802:	b2a5      	uxth	r5, r4
 8002804:	3501      	adds	r5, #1
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 8002806:	eb01 4114 	add.w	r1, r1, r4, lsr #16
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 800280a:	442a      	add	r2, r5
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 800280c:	1c4c      	adds	r4, r1, #1
  
  tempreg = LTDC_Layerx->PFCR;
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
  {
    temp = 4;
 800280e:	2504      	movs	r5, #4
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8002810:	b153      	cbz	r3, 8002828 <LTDC_LayerPosition+0x44>
  {
    temp = 4;
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8002812:	2b01      	cmp	r3, #1
  {
    temp = 3;
 8002814:	bf08      	it	eq
 8002816:	2503      	moveq	r5, #3
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
  {
    temp = 4;
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8002818:	d006      	beq.n	8002828 <LTDC_LayerPosition+0x44>
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
 800281a:	1e99      	subs	r1, r3, #2
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
 800281c:	2902      	cmp	r1, #2
 800281e:	d918      	bls.n	8002852 <LTDC_LayerPosition+0x6e>
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 8002820:	2b07      	cmp	r3, #7
  {
    temp = 2;  
  }
  else
  {
    temp = 1;
 8002822:	bf18      	it	ne
 8002824:	2501      	movne	r5, #1
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 8002826:	d014      	beq.n	8002852 <LTDC_LayerPosition+0x6e>
  else
  {
    temp = 1;
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
 8002828:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
  
  tempreg = LTDC_Layerx->CFBLNR;
 800282a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    temp = 1;
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 800282c:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8002830:	3903      	subs	r1, #3
  
  tempreg = LTDC_Layerx->CFBLNR;
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 8002832:	f3c3 030a 	ubfx	r3, r3, #0, #11
  {
    temp = 1;
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 8002836:	fbb1 f1f5 	udiv	r1, r1, r5
  
  tempreg = LTDC_Layerx->CFBLNR;
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 800283a:	3b01      	subs	r3, #1
  {
    temp = 1;
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 800283c:	1e65      	subs	r5, r4, #1
 800283e:	4429      	add	r1, r5
  
  tempreg = LTDC_Layerx->CFBLNR;
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 8002840:	4413      	add	r3, r2
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8002842:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8002846:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
  
  tempreg = LTDC_Layerx->CFBLNR;
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 800284a:	6044      	str	r4, [r0, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 800284c:	6082      	str	r2, [r0, #8]
}
 800284e:	bc30      	pop	{r4, r5}
 8002850:	4770      	bx	lr
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8002852:	2502      	movs	r5, #2
 8002854:	e7e8      	b.n	8002828 <LTDC_LayerPosition+0x44>
 8002856:	bf00      	nop

08002858 <LTDC_LayerAlpha>:
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 8002858:	6141      	str	r1, [r0, #20]
 800285a:	4770      	bx	lr

0800285c <LTDC_LayerAddress>:
  */

void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
{
  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->CFBAR = Address;
 800285c:	6281      	str	r1, [r0, #40]	; 0x28
 800285e:	4770      	bx	lr

08002860 <LTDC_LayerSize>:
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
 8002860:	6903      	ldr	r3, [r0, #16]
  * @retval Reload of the shadow registers values must be applied after layer 
  *         size reconfiguration.
  */

void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
{
 8002862:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8002864:	b32b      	cbz	r3, 80028b2 <LTDC_LayerSize+0x52>
  {
    temp = 4;
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8002866:	2b01      	cmp	r3, #1
 8002868:	bf08      	it	eq
 800286a:	2303      	moveq	r3, #3
 800286c:	d006      	beq.n	800287c <LTDC_LayerSize+0x1c>
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 800286e:	1e9c      	subs	r4, r3, #2
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8002870:	2c02      	cmp	r4, #2
 8002872:	d91c      	bls.n	80028ae <LTDC_LayerSize+0x4e>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8002874:	2b07      	cmp	r3, #7
 8002876:	bf18      	it	ne
 8002878:	2301      	movne	r3, #1
 800287a:	d018      	beq.n	80028ae <LTDC_LayerSize+0x4e>
  {
    temp = 1;
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
 800287c:	6845      	ldr	r5, [r0, #4]
  horizontal_start = (tempreg & 0x1FFF);
  horizontal_stop = Width + horizontal_start - 1;  

  tempreg = LTDC_Layerx->WVPCR;
 800287e:	6884      	ldr	r4, [r0, #8]
    temp = 1;
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
  horizontal_start = (tempreg & 0x1FFF);
 8002880:	f3c5 050c 	ubfx	r5, r5, #0, #13
  horizontal_stop = Width + horizontal_start - 1;  

  tempreg = LTDC_Layerx->WVPCR;
  vertical_start = (tempreg & 0x1FFF);
 8002884:	f3c4 040c 	ubfx	r4, r4, #0, #13
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 8002888:	fb01 f303 	mul.w	r3, r1, r3
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
  horizontal_start = (tempreg & 0x1FFF);
  horizontal_stop = Width + horizontal_start - 1;  
 800288c:	1e6e      	subs	r6, r5, #1

  tempreg = LTDC_Layerx->WVPCR;
  vertical_start = (tempreg & 0x1FFF);
  vertical_stop = Height + vertical_start - 1;  
 800288e:	1e67      	subs	r7, r4, #1
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
  horizontal_start = (tempreg & 0x1FFF);
  horizontal_stop = Width + horizontal_start - 1;  
 8002890:	4431      	add	r1, r6

  tempreg = LTDC_Layerx->WVPCR;
  vertical_start = (tempreg & 0x1FFF);
  vertical_stop = Height + vertical_start - 1;  
 8002892:	4417      	add	r7, r2
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 8002894:	1cde      	adds	r6, r3, #3

  tempreg = LTDC_Layerx->WVPCR;
  vertical_start = (tempreg & 0x1FFF);
  vertical_stop = Height + vertical_start - 1;  
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8002896:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 800289a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 800289e:	ea46 4303 	orr.w	r3, r6, r3, lsl #16

  tempreg = LTDC_Layerx->WVPCR;
  vertical_start = (tempreg & 0x1FFF);
  vertical_stop = Height + vertical_start - 1;  
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 80028a2:	6045      	str	r5, [r0, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 80028a4:	6084      	str	r4, [r0, #8]

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 80028a6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
  
}
 80028a8:	bcf0      	pop	{r4, r5, r6, r7}

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
 80028aa:	6302      	str	r2, [r0, #48]	; 0x30
  
}
 80028ac:	4770      	bx	lr
 80028ae:	2302      	movs	r3, #2
 80028b0:	e7e4      	b.n	800287c <LTDC_LayerSize+0x1c>
 80028b2:	2304      	movs	r3, #4
 80028b4:	e7e2      	b.n	800287c <LTDC_LayerSize+0x1c>
 80028b6:	bf00      	nop

080028b8 <LTDC_LayerPixelFormat>:
{

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 80028b8:	6903      	ldr	r3, [r0, #16]
 80028ba:	2204      	movs	r2, #4
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 80028bc:	b13b      	cbz	r3, 80028ce <LTDC_LayerPixelFormat+0x16>
  {
    temp = 4;
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 80028be:	2b01      	cmp	r3, #1
 80028c0:	bf08      	it	eq
 80028c2:	2203      	moveq	r2, #3
 80028c4:	d003      	beq.n	80028ce <LTDC_LayerPixelFormat+0x16>
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 80028c6:	1e9a      	subs	r2, r3, #2
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 80028c8:	2a02      	cmp	r2, #2
 80028ca:	d81b      	bhi.n	8002904 <LTDC_LayerPixelFormat+0x4c>
 80028cc:	2202      	movs	r2, #2
  else
  {
    temp = 1;
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 80028ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80028d0:	0c1b      	lsrs	r3, r3, #16
  tempreg = (tempreg / temp); 
 80028d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80028d6:	2204      	movs	r2, #4
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 80028d8:	b161      	cbz	r1, 80028f4 <LTDC_LayerPixelFormat+0x3c>
  {
    temp = 4;
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 80028da:	2901      	cmp	r1, #1
 80028dc:	bf08      	it	eq
 80028de:	2203      	moveq	r2, #3
 80028e0:	d008      	beq.n	80028f4 <LTDC_LayerPixelFormat+0x3c>
  {
    temp = 3;
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 80028e2:	1e8a      	subs	r2, r1, #2
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
  {
    temp = 3;
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 80028e4:	2a02      	cmp	r2, #2
 80028e6:	bf98      	it	ls
 80028e8:	2202      	movls	r2, #2
 80028ea:	d903      	bls.n	80028f4 <LTDC_LayerPixelFormat+0x3c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 80028ec:	2907      	cmp	r1, #7
 80028ee:	bf0c      	ite	eq
 80028f0:	2202      	moveq	r2, #2
 80028f2:	2201      	movne	r2, #1
  {
    temp = 1;
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 80028f4:	fb03 f302 	mul.w	r3, r3, r2
 80028f8:	1cda      	adds	r2, r3, #3
 80028fa:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80028fe:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 8002900:	6101      	str	r1, [r0, #16]
 8002902:	4770      	bx	lr
  {
    temp = 3;
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
          (tempreg == LTDC_Pixelformat_RGB565)    || \
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8002904:	2b07      	cmp	r3, #7
 8002906:	bf18      	it	ne
 8002908:	2201      	movne	r2, #1
 800290a:	d1e0      	bne.n	80028ce <LTDC_LayerPixelFormat+0x16>
 800290c:	e7de      	b.n	80028cc <LTDC_LayerPixelFormat+0x14>
 800290e:	bf00      	nop

08002910 <LTDC_ITConfig>:
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    LTDC->IER |= LTDC_IT;
 8002910:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002914:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800291a:	b919      	cbnz	r1, 8002924 <LTDC_ITConfig+0x14>
  {
    LTDC->IER |= LTDC_IT;
  }
  else
  {
    LTDC->IER &= (uint32_t)~LTDC_IT;
 800291c:	ea22 0000 	bic.w	r0, r2, r0
 8002920:	6358      	str	r0, [r3, #52]	; 0x34
 8002922:	4770      	bx	lr
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    LTDC->IER |= LTDC_IT;
 8002924:	4310      	orrs	r0, r2
 8002926:	6358      	str	r0, [r3, #52]	; 0x34
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop

0800292c <LTDC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
 800292c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002930:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002938:	bf0c      	ite	eq
 800293a:	2000      	moveq	r0, #0
 800293c:	2001      	movne	r0, #1
 800293e:	4770      	bx	lr

08002940 <LTDC_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  /* Clear the corresponding LTDC flag */
  LTDC->ICR = (uint32_t)LTDC_FLAG;
 8002940:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002944:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002948:	63d8      	str	r0, [r3, #60]	; 0x3c
 800294a:	4770      	bx	lr

0800294c <LTDC_GetITStatus>:
  ITStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
 800294c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002950:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  else
  {
    bitstatus = RESET;
  }

  if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 8002956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002958:	4003      	ands	r3, r0
 800295a:	d004      	beq.n	8002966 <LTDC_GetITStatus+0x1a>
 800295c:	4210      	tst	r0, r2
  {
    bitstatus = SET;
 800295e:	bf0c      	ite	eq
 8002960:	2000      	moveq	r0, #0
 8002962:	2001      	movne	r0, #1
 8002964:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8002966:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop

0800296c <LTDC_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  /* Clear the corresponding LTDC Interrupt */
  LTDC->ICR = (uint32_t)LTDC_IT;
 800296c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002970:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002974:	63d8      	str	r0, [r3, #60]	; 0x3c
 8002976:	4770      	bx	lr

08002978 <FMC_NORSRAMDeInit>:
  *            @arg FMC_Bank1_NORSRAM3: FMC Bank1 NOR/SRAM3 
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
{
 8002978:	b410      	push	{r4}
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 800297a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
{
  /* Check the parameter */
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
 800297e:	b198      	cbz	r0, 80029a8 <FMC_NORSRAMDeInit+0x30>
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
  }
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
 8002980:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002984:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 8002988:	f44f 7382 	mov.w	r3, #260	; 0x104
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 800298c:	1c44      	adds	r4, r0, #1
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 800298e:	f2ca 0300 	movt	r3, #40960	; 0xa000
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 8002992:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8002996:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800299a:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 800299e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 80029a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029a6:	4770      	bx	lr
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 80029a8:	f243 02db 	movw	r2, #12507	; 0x30db
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e7eb      	b.n	8002988 <FMC_NORSRAMDeInit+0x10>

080029b0 <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 80029b0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 80029b4:	6843      	ldr	r3, [r0, #4]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 80029b6:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80029ba:	68c7      	ldr	r7, [r0, #12]
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 80029bc:	6906      	ldr	r6, [r0, #16]
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 80029be:	6945      	ldr	r5, [r0, #20]
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 80029c0:	6984      	ldr	r4, [r0, #24]
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 80029c2:	69c1      	ldr	r1, [r0, #28]
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 80029c4:	6a02      	ldr	r2, [r0, #32]
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 80029c6:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 80029ca:	f8d0 c000 	ldr.w	ip, [r0]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 80029ce:	ea49 0a03 	orr.w	sl, r9, r3
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 80029d2:	ea4a 0707 	orr.w	r7, sl, r7
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 80029d6:	433e      	orrs	r6, r7
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 80029d8:	4335      	orrs	r5, r6
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 80029da:	432c      	orrs	r4, r5
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 80029dc:	4321      	orrs	r1, r4
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 80029de:	430a      	orrs	r2, r1
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 80029e0:	6a41      	ldr	r1, [r0, #36]	; 0x24
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 80029e2:	6b05      	ldr	r5, [r0, #48]	; 0x30
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;
 80029e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 80029e6:	ea42 0301 	orr.w	r3, r2, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 80029ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 80029ec:	ea43 0308 	orr.w	r3, r3, r8
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 80029f0:	4313      	orrs	r3, r2
 80029f2:	ea4f 028c 	mov.w	r2, ip, lsl #2
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 80029f6:	431d      	orrs	r5, r3
 80029f8:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 80029fc:	4325      	orrs	r5, r4
            FMC_NORSRAMInitStruct->FMC_ContinousClock;

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 80029fe:	f1b9 0f08 	cmp.w	r9, #8
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8002a02:	6015      	str	r5, [r2, #0]
            FMC_NORSRAMInitStruct->FMC_ContinousClock;

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8002a04:	bf02      	ittt	eq
 8002a06:	6813      	ldreq	r3, [r2, #0]
 8002a08:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8002a0c:	6013      	streq	r3, [r2, #0]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 8002a0e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8002a12:	d026      	beq.n	8002a62 <FMC_NORSRAMInit+0xb2>
 8002a14:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a16:	691c      	ldr	r4, [r3, #16]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 8002a18:	e893 0042 	ldmia.w	r3, {r1, r6}
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 8002a1c:	699f      	ldr	r7, [r3, #24]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 8002a1e:	689d      	ldr	r5, [r3, #8]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 8002a20:	68da      	ldr	r2, [r3, #12]
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 8002a22:	695b      	ldr	r3, [r3, #20]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 8002a24:	4339      	orrs	r1, r7
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 8002a26:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 8002a2a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 8002a2e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 8002a32:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 8002a36:	f10c 0201 	add.w	r2, ip, #1
 8002a3a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 8002a3e:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 8002a42:	f5b8 4f80 	cmp.w	r8, #16384	; 0x4000
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 8002a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 8002a4a:	d021      	beq.n	8002a90 <FMC_NORSRAMInit+0xe0>
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
  }
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 8002a4c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002a50:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002a54:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8002a58:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
  }
  
}
 8002a5c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8002a60:	4770      	bx	lr
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 8002a62:	f1bc 0f00 	cmp.w	ip, #0
 8002a66:	d0d5      	beq.n	8002a14 <FMC_NORSRAMInit+0x64>
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 8002a68:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 8002a6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 8002a6e:	6851      	ldr	r1, [r2, #4]
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 8002a70:	6814      	ldr	r4, [r2, #0]
 8002a72:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8002a76:	6014      	str	r4, [r2, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 8002a78:	6814      	ldr	r4, [r2, #0]
 8002a7a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8002a7e:	6014      	str	r4, [r2, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 8002a80:	691c      	ldr	r4, [r3, #16]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 8002a82:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 8002a86:	1e65      	subs	r5, r4, #1
 8002a88:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 8002a8c:	6051      	str	r1, [r2, #4]
 8002a8e:	e7c3      	b.n	8002a18 <FMC_NORSRAMInit+0x68>
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8002a90:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 8002a92:	e893 0024 	ldmia.w	r3, {r2, r5}
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8002a96:	699e      	ldr	r6, [r3, #24]
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8002a98:	689c      	ldr	r4, [r3, #8]
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 8002a9a:	6918      	ldr	r0, [r3, #16]
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8002a9c:	6959      	ldr	r1, [r3, #20]
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8002a9e:	4332      	orrs	r2, r6
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 8002aa0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8002aa4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8002aa8:	f44f 7382 	mov.w	r3, #260	; 0x104
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 8002aac:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8002ab0:	f2ca 0300 	movt	r3, #40960	; 0xa000
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8002ab4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8002ab8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
  }
  
}
 8002abc:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop

08002ac4 <FMC_NORSRAMStructInit>:
  * @param  FMC_NORSRAMInitStruct: pointer to a FMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
 8002ac4:	b4f0      	push	{r4, r5, r6, r7}
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 8002ac6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 8002ac8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
 8002aca:	2302      	movs	r3, #2
 8002acc:	6043      	str	r3, [r0, #4]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 8002ace:	220f      	movs	r2, #15
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 8002ad0:	2300      	movs	r3, #0
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 8002ad2:	25ff      	movs	r5, #255	; 0xff
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 8002ad4:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 8002ad8:	f44f 5600 	mov.w	r6, #8192	; 0x2000
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 8002adc:	f04f 0c10 	mov.w	ip, #16
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 8002ae0:	6207      	str	r7, [r0, #32]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 8002ae2:	6246      	str	r6, [r0, #36]	; 0x24
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 8002ae4:	f8c0 c00c 	str.w	ip, [r0, #12]
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 8002ae8:	6003      	str	r3, [r0, #0]
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
 8002aea:	6083      	str	r3, [r0, #8]
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 8002aec:	6103      	str	r3, [r0, #16]
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 8002aee:	62c3      	str	r3, [r0, #44]	; 0x2c
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 8002af0:	6143      	str	r3, [r0, #20]
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
 8002af2:	6183      	str	r3, [r0, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 8002af4:	61c3      	str	r3, [r0, #28]
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 8002af6:	6283      	str	r3, [r0, #40]	; 0x28
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
 8002af8:	6303      	str	r3, [r0, #48]	; 0x30
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
 8002afa:	6343      	str	r3, [r0, #52]	; 0x34
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
 8002afc:	61a3      	str	r3, [r4, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 8002afe:	6022      	str	r2, [r4, #0]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
 8002b00:	6062      	str	r2, [r4, #4]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 8002b02:	60e2      	str	r2, [r4, #12]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
 8002b04:	6122      	str	r2, [r4, #16]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
 8002b06:	6162      	str	r2, [r4, #20]
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 8002b08:	60a5      	str	r5, [r4, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
 8002b0a:	608d      	str	r5, [r1, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 8002b0c:	600a      	str	r2, [r1, #0]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
 8002b0e:	604a      	str	r2, [r1, #4]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 8002b10:	60ca      	str	r2, [r1, #12]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision = 15;
 8002b12:	610a      	str	r2, [r1, #16]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency = 15;
 8002b14:	614a      	str	r2, [r1, #20]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A;
 8002b16:	618b      	str	r3, [r1, #24]
}
 8002b18:	bcf0      	pop	{r4, r5, r6, r7}
 8002b1a:	4770      	bx	lr

08002b1c <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8002b1c:	0080      	lsls	r0, r0, #2
 8002b1e:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002b22:	b939      	cbnz	r1, 8002b34 <FMC_NORSRAMCmd+0x18>
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 8002b24:	6802      	ldr	r2, [r0, #0]
 8002b26:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002b2a:	f2c0 030f 	movt	r3, #15
 8002b2e:	4013      	ands	r3, r2
 8002b30:	6003      	str	r3, [r0, #0]
 8002b32:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 8002b34:	6803      	ldr	r3, [r0, #0]
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6003      	str	r3, [r0, #0]
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop

08002b40 <FMC_NANDDeInit>:
void FMC_NANDDeInit(uint32_t FMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8002b40:	2810      	cmp	r0, #16
  {
    /* Set the FMC_Bank2 registers to their reset values */
    FMC_Bank2->PCR2 = 0x00000018;
 8002b42:	bf0c      	ite	eq
 8002b44:	2360      	moveq	r3, #96	; 0x60
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 8002b46:	2380      	movne	r3, #128	; 0x80
 8002b48:	f2ca 0300 	movt	r3, #40960	; 0xa000
    FMC_Bank3->SR3 = 0x00000040;
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8002b4c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 8002b50:	2018      	movs	r0, #24
    FMC_Bank3->SR3 = 0x00000040;
 8002b52:	2140      	movs	r1, #64	; 0x40
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 8002b54:	6018      	str	r0, [r3, #0]
    FMC_Bank3->SR3 = 0x00000040;
 8002b56:	6059      	str	r1, [r3, #4]
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8002b58:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8002b5a:	60da      	str	r2, [r3, #12]
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop

08002b60 <FMC_NANDInit>:
  * @param  FMC_NANDInitStruct : pointer to a FMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FMC NAND specified Banks.                       
  * @retval None
  */
void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{
 8002b60:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 8002b64:	6846      	ldr	r6, [r0, #4]
 8002b66:	6885      	ldr	r5, [r0, #8]
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8002b68:	69c2      	ldr	r2, [r0, #28]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8002b6a:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 8002b6c:	68c4      	ldr	r4, [r0, #12]
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8002b6e:	6891      	ldr	r1, [r2, #8]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8002b70:	f8d3 8004 	ldr.w	r8, [r3, #4]
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 8002b74:	f8d0 a010 	ldr.w	sl, [r0, #16]
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 8002b78:	f8d0 c014 	ldr.w	ip, [r0, #20]
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8002b7c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8002b80:	6817      	ldr	r7, [r2, #0]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 8002b82:	68d2      	ldr	r2, [r2, #12]
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 8002b84:	4335      	orrs	r5, r6
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 8002b86:	f045 0508 	orr.w	r5, r5, #8
            FMC_NANDInitStruct->FMC_ECC |
 8002b8a:	432c      	orrs	r4, r5
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8002b8c:	689d      	ldr	r5, [r3, #8]
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
 8002b8e:	6986      	ldr	r6, [r0, #24]
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 8002b90:	6800      	ldr	r0, [r0, #0]
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8002b92:	ea4f 4b01 	mov.w	fp, r1, lsl #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8002b96:	0429      	lsls	r1, r5, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8002b98:	681d      	ldr	r5, [r3, #0]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
 8002b9a:	68db      	ldr	r3, [r3, #12]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8002b9c:	ea41 2108 	orr.w	r1, r1, r8, lsl #8
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 8002ba0:	2810      	cmp	r0, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8002ba2:	ea41 0505 	orr.w	r5, r1, r5
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8002ba6:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 8002baa:	ea44 040a 	orr.w	r4, r4, sl
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8002bae:	ea4b 2b09 	orr.w	fp, fp, r9, lsl #8
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
  {
    /* FMC_Bank2_NAND registers configuration */
    FMC_Bank2->PCR2 = tmppcr;
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2360      	moveq	r3, #96	; 0x60
    FMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
 8002bb6:	2380      	movne	r3, #128	; 0x80
 8002bb8:	f2ca 0300 	movt	r3, #40960	; 0xa000
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 8002bbc:	ea44 2c4c 	orr.w	ip, r4, ip, lsl #9
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8002bc0:	ea4b 0707 	orr.w	r7, fp, r7
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 8002bc4:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8002bc8:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
    FMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
 8002bcc:	601e      	str	r6, [r3, #0]
    FMC_Bank3->PMEM3 = tmppmem;
 8002bce:	609f      	str	r7, [r3, #8]
    FMC_Bank3->PATT3 = tmppatt;
 8002bd0:	60dd      	str	r5, [r3, #12]
  }
}
 8002bd2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002bd6:	4770      	bx	lr

08002bd8 <FMC_NANDStructInit>:
  * @param  FMC_NANDInitStruct: pointer to a FMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
 8002bd8:	b430      	push	{r4, r5}
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8002bda:	6a01      	ldr	r1, [r0, #32]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8002bdc:	69c4      	ldr	r4, [r0, #28]
 8002bde:	23fc      	movs	r3, #252	; 0xfc
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8002be0:	2200      	movs	r2, #0
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
 8002be2:	2510      	movs	r5, #16
 8002be4:	6005      	str	r5, [r0, #0]
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
 8002be6:	6085      	str	r5, [r0, #8]
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8002be8:	6042      	str	r2, [r0, #4]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
 8002bea:	60c2      	str	r2, [r0, #12]
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
 8002bec:	6102      	str	r2, [r0, #16]
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
 8002bee:	6142      	str	r2, [r0, #20]
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
 8002bf0:	6182      	str	r2, [r0, #24]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8002bf2:	6023      	str	r3, [r4, #0]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8002bf4:	6063      	str	r3, [r4, #4]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8002bf6:	60a3      	str	r3, [r4, #8]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8002bf8:	60e3      	str	r3, [r4, #12]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8002bfa:	600b      	str	r3, [r1, #0]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8002bfc:	604b      	str	r3, [r1, #4]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8002bfe:	608b      	str	r3, [r1, #8]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
 8002c00:	60cb      	str	r3, [r1, #12]
}
 8002c02:	bc30      	pop	{r4, r5}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop

08002c08 <FMC_NANDCmd>:
void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002c08:	b151      	cbz	r1, 8002c20 <FMC_NANDCmd+0x18>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8002c0a:	2810      	cmp	r0, #16
    {
      FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2360      	moveq	r3, #96	; 0x60
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8002c10:	2380      	movne	r3, #128	; 0x80
 8002c12:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	f042 0204 	orr.w	r2, r2, #4
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	4770      	bx	lr
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8002c20:	2810      	cmp	r0, #16
    {
      FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8002c22:	bf0c      	ite	eq
 8002c24:	2260      	moveq	r2, #96	; 0x60
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8002c26:	2280      	movne	r2, #128	; 0x80
 8002c28:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8002c2c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8002c30:	6811      	ldr	r1, [r2, #0]
 8002c32:	f2c0 030f 	movt	r3, #15
 8002c36:	400b      	ands	r3, r1
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4770      	bx	lr

08002c3c <FMC_NANDECCCmd>:
void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002c3c:	b151      	cbz	r1, 8002c54 <FMC_NANDECCCmd+0x18>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8002c3e:	2810      	cmp	r0, #16
    {
      FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8002c40:	bf0c      	ite	eq
 8002c42:	2360      	moveq	r3, #96	; 0x60
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8002c44:	2380      	movne	r3, #128	; 0x80
 8002c46:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	4770      	bx	lr
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8002c54:	2810      	cmp	r0, #16
    {
      FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8002c56:	bf0c      	ite	eq
 8002c58:	2260      	moveq	r2, #96	; 0x60
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8002c5a:	2280      	movne	r2, #128	; 0x80
 8002c5c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8002c60:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8002c64:	6811      	ldr	r1, [r2, #0]
 8002c66:	f2c0 030f 	movt	r3, #15
 8002c6a:	400b      	ands	r3, r1
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4770      	bx	lr

08002c70 <FMC_GetECC>:
  */
uint32_t FMC_GetECC(uint32_t FMC_Bank)
{
  uint32_t eccval = 0x00000000;
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8002c70:	2810      	cmp	r0, #16
  {
    /* Get the ECCR2 register value */
    eccval = FMC_Bank2->ECCR2;
 8002c72:	bf0c      	ite	eq
 8002c74:	2360      	moveq	r3, #96	; 0x60
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FMC_Bank3->ECCR3;
 8002c76:	2380      	movne	r3, #128	; 0x80
 8002c78:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002c7c:	6958      	ldr	r0, [r3, #20]
  }
  /* Return the error correction code value */
  return(eccval);
}
 8002c7e:	4770      	bx	lr

08002c80 <FMC_PCCARDDeInit>:
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 8002c80:	23a0      	movs	r3, #160	; 0xa0
 8002c82:	f2ca 0300 	movt	r3, #40960	; 0xa000
  FMC_Bank4->SR4 = 0x00000000;	
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8002c86:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 8002c8a:	2018      	movs	r0, #24
  FMC_Bank4->SR4 = 0x00000000;	
 8002c8c:	2100      	movs	r1, #0
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 8002c8e:	6018      	str	r0, [r3, #0]
  FMC_Bank4->SR4 = 0x00000000;	
 8002c90:	6059      	str	r1, [r3, #4]
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8002c92:	609a      	str	r2, [r3, #8]
  FMC_Bank4->PATT4 = 0xFCFCFCFC;
 8002c94:	60da      	str	r2, [r3, #12]
  FMC_Bank4->PIO4 = 0xFCFCFCFC;
 8002c96:	611a      	str	r2, [r3, #16]
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop

08002c9c <FMC_PCCARDInit>:
  * @param  FMC_PCCARDInitStruct : pointer to a FMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FMC PCCARD Bank.                       
  * @retval None
  */
void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8002c9c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
 8002c9e:	6807      	ldr	r7, [r0, #0]
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8002ca0:	6846      	ldr	r6, [r0, #4]
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8002ca2:	68c4      	ldr	r4, [r0, #12]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8002ca4:	6901      	ldr	r1, [r0, #16]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8002ca6:	6942      	ldr	r2, [r0, #20]
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
 8002ca8:	6885      	ldr	r5, [r0, #8]
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8002caa:	23a0      	movs	r3, #160	; 0xa0
                     FMC_NAND_MemoryDataWidth_16b |  
 8002cac:	f047 0010 	orr.w	r0, r7, #16
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8002cb0:	f2ca 0300 	movt	r3, #40960	; 0xa000
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8002cb4:	ea40 2046 	orr.w	r0, r0, r6, lsl #9
 8002cb8:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8002cbc:	6018      	str	r0, [r3, #0]
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8002cbe:	e894 0060 	ldmia.w	r4, {r5, r6}
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8002cc2:	68a0      	ldr	r0, [r4, #8]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 8002cc4:	68e4      	ldr	r4, [r4, #12]
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8002cc6:	0400      	lsls	r0, r0, #16
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8002cc8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8002ccc:	4328      	orrs	r0, r5
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8002cce:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8002cd2:	6098      	str	r0, [r3, #8]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8002cd4:	e891 0070 	ldmia.w	r1, {r4, r5, r6}
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
 8002cd8:	68c8      	ldr	r0, [r1, #12]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8002cda:	0431      	lsls	r1, r6, #16
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8002cdc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8002ce0:	4321      	orrs	r1, r4
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8002ce2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8002ce6:	60d9      	str	r1, [r3, #12]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8002ce8:	e892 0031 	ldmia.w	r2, {r0, r4, r5}
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
 8002cec:	68d1      	ldr	r1, [r2, #12]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8002cee:	042a      	lsls	r2, r5, #16
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8002cf0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8002cf4:	4302      	orrs	r2, r0
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8002cf6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8002cfa:	611a      	str	r2, [r3, #16]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
}
 8002cfc:	bcf0      	pop	{r4, r5, r6, r7}
 8002cfe:	4770      	bx	lr

08002d00 <FMC_PCCARDStructInit>:
  * @param  FMC_PCCARDInitStruct: pointer to a FMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8002d00:	b430      	push	{r4, r5}
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8002d02:	6901      	ldr	r1, [r0, #16]
{
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8002d04:	68c4      	ldr	r4, [r0, #12]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 8002d06:	6942      	ldr	r2, [r0, #20]
{
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8002d08:	23fc      	movs	r3, #252	; 0xfc
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8002d0a:	2500      	movs	r5, #0
 8002d0c:	6005      	str	r5, [r0, #0]
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
 8002d0e:	6045      	str	r5, [r0, #4]
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
 8002d10:	6085      	str	r5, [r0, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8002d12:	6023      	str	r3, [r4, #0]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8002d14:	6063      	str	r3, [r4, #4]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8002d16:	60a3      	str	r3, [r4, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8002d18:	60e3      	str	r3, [r4, #12]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8002d1a:	600b      	str	r3, [r1, #0]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8002d1c:	604b      	str	r3, [r1, #4]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8002d1e:	608b      	str	r3, [r1, #8]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
 8002d20:	60cb      	str	r3, [r1, #12]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
}
 8002d22:	bc30      	pop	{r4, r5}
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 8002d24:	6013      	str	r3, [r2, #0]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8002d26:	6053      	str	r3, [r2, #4]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8002d28:	6093      	str	r3, [r2, #8]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8002d2a:	60d3      	str	r3, [r2, #12]
}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop

08002d30 <FMC_PCCARDCmd>:
  */
void FMC_PCCARDCmd(FunctionalState NewState)
{
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d30:	b950      	cbnz	r0, 8002d48 <FMC_PCCARDCmd+0x18>
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8002d32:	22a0      	movs	r2, #160	; 0xa0
 8002d34:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8002d38:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8002d3c:	6811      	ldr	r1, [r2, #0]
 8002d3e:	f2c0 030f 	movt	r3, #15
 8002d42:	400b      	ands	r3, r1
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8002d48:	23a0      	movs	r3, #160	; 0xa0
 8002d4a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	f042 0204 	orr.w	r2, r2, #4
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	4770      	bx	lr

08002d58 <FMC_SDRAMDeInit>:
  *            @arg FMC_Bank1_SDRAM: FMC Bank1 SDRAM 
  *            @arg FMC_Bank2_SDRAM: FMC Bank2 SDRAM 
  * @retval None
  */
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
 8002d58:	b430      	push	{r4, r5}
 8002d5a:	0080      	lsls	r0, r0, #2
 8002d5c:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
  FMC_Bank5_6->SDCMR = 0x00000000;
 8002d60:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d64:	18c1      	adds	r1, r0, r3
 8002d66:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002d6a:	2200      	movs	r2, #0
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 8002d6c:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 8002d70:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 8002d74:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 8002d78:	608c      	str	r4, [r1, #8]
  FMC_Bank5_6->SDCMR = 0x00000000;
 8002d7a:	611a      	str	r2, [r3, #16]
  FMC_Bank5_6->SDRTR = 0x00000000;
  FMC_Bank5_6->SDSR = 0x00000000; 
}  
 8002d7c:	bc30      	pop	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
  FMC_Bank5_6->SDCMR = 0x00000000;
  FMC_Bank5_6->SDRTR = 0x00000000;
 8002d7e:	615a      	str	r2, [r3, #20]
  FMC_Bank5_6->SDSR = 0x00000000; 
 8002d80:	619a      	str	r2, [r3, #24]
}  
 8002d82:	4770      	bx	lr

08002d84 <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 8002d84:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8002d88:	6881      	ldr	r1, [r0, #8]
 8002d8a:	6846      	ldr	r6, [r0, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8002d8c:	68c5      	ldr	r5, [r0, #12]
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8002d8e:	6904      	ldr	r4, [r0, #16]
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8002d90:	69c7      	ldr	r7, [r0, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8002d92:	f8d0 9020 	ldr.w	r9, [r0, #32]
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8002d96:	6a43      	ldr	r3, [r0, #36]	; 0x24
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8002d98:	6802      	ldr	r2, [r0, #0]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8002d9a:	430e      	orrs	r6, r1
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8002d9c:	4335      	orrs	r5, r6
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8002d9e:	6941      	ldr	r1, [r0, #20]
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8002da0:	432c      	orrs	r4, r5
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8002da2:	430c      	orrs	r4, r1
             FMC_SDRAMInitStruct->FMC_CASLatency |
 8002da4:	6981      	ldr	r1, [r0, #24]
 8002da6:	430c      	orrs	r4, r1
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 8002da8:	433c      	orrs	r4, r7
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8002daa:	ea44 0409 	orr.w	r4, r4, r9
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8002dae:	431c      	orrs	r4, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8002db0:	bb1a      	cbnz	r2, 8002dfa <FMC_SDRAMInit+0x76>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8002db2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002db6:	f2ca 0200 	movt	r2, #40960	; 0xa000
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8002dba:	6a83      	ldr	r3, [r0, #40]	; 0x28
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8002dbc:	6014      	str	r4, [r2, #0]
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8002dbe:	689f      	ldr	r7, [r3, #8]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8002dc0:	685d      	ldr	r5, [r3, #4]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8002dc2:	681e      	ldr	r6, [r3, #0]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8002dc4:	68dc      	ldr	r4, [r3, #12]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8002dc6:	f103 0010 	add.w	r0, r3, #16
 8002dca:	c80b      	ldmia	r0, {r0, r1, r3}
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8002dcc:	3f01      	subs	r7, #1
 8002dce:	023f      	lsls	r7, r7, #8
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8002dd0:	3d01      	subs	r5, #1
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8002dd2:	ea47 1505 	orr.w	r5, r7, r5, lsl #4
 8002dd6:	3e01      	subs	r6, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8002dd8:	4335      	orrs	r5, r6
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8002dda:	3c01      	subs	r4, #1
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8002ddc:	ea45 3404 	orr.w	r4, r5, r4, lsl #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8002de0:	3801      	subs	r0, #1
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8002de2:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 8002de6:	3901      	subs	r1, #1
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8002de8:	ea40 5101 	orr.w	r1, r0, r1, lsl #20
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8002dec:	3b01      	subs	r3, #1
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8002dee:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8002df2:	6093      	str	r3, [r2, #8]
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  
}
 8002df4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002df8:	4770      	bx	lr
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8002dfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8002dfe:	ea49 0807 	orr.w	r8, r9, r7
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8002e02:	f2ca 0100 	movt	r1, #40960	; 0xa000
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8002e06:	ea48 0503 	orr.w	r5, r8, r3
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8002e0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8002e0c:	600d      	str	r5, [r1, #0]
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8002e0e:	f8d3 8008 	ldr.w	r8, [r3, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8002e12:	685e      	ldr	r6, [r3, #4]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8002e14:	68df      	ldr	r7, [r3, #12]
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8002e16:	f8d3 c000 	ldr.w	ip, [r3]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 8002e1a:	695d      	ldr	r5, [r3, #20]
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 8002e1c:	6918      	ldr	r0, [r3, #16]
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8002e1e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8002e22:	021b      	lsls	r3, r3, #8
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8002e24:	3e01      	subs	r6, #1
 8002e26:	0092      	lsls	r2, r2, #2
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8002e28:	ea43 1606 	orr.w	r6, r3, r6, lsl #4
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8002e2c:	3f01      	subs	r7, #1
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8002e2e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8002e32:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8002e36:	033f      	lsls	r7, r7, #12
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8002e38:	ea46 060c 	orr.w	r6, r6, ip
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 8002e3c:	3d01      	subs	r5, #1
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 8002e3e:	3801      	subs	r0, #1
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8002e40:	ea47 5505 	orr.w	r5, r7, r5, lsl #20
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8002e44:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8002e48:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 8002e4c:	608d      	str	r5, [r1, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8002e4e:	f8c2 0148 	str.w	r0, [r2, #328]	; 0x148
  }
  
}
 8002e52:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002e56:	4770      	bx	lr

08002e58 <FMC_SDRAMStructInit>:
  * @param  FMC_SDRAMInitStruct: pointer to a FMC_SDRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
 8002e58:	b430      	push	{r4, r5}
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 8002e5a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
 8002e5c:	2340      	movs	r3, #64	; 0x40
 8002e5e:	6103      	str	r3, [r0, #16]
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 8002e60:	2100      	movs	r1, #0
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 8002e62:	2310      	movs	r3, #16
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 8002e64:	2580      	movs	r5, #128	; 0x80
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 8002e66:	f44f 7400 	mov.w	r4, #512	; 0x200
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 8002e6a:	6145      	str	r5, [r0, #20]
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 8002e6c:	6184      	str	r4, [r0, #24]
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 8002e6e:	6001      	str	r1, [r0, #0]
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 8002e70:	6041      	str	r1, [r0, #4]
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
 8002e72:	6081      	str	r1, [r0, #8]
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
 8002e74:	61c1      	str	r1, [r0, #28]
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
 8002e76:	6201      	str	r1, [r0, #32]
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
 8002e78:	6241      	str	r1, [r0, #36]	; 0x24
{  
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 8002e7a:	60c3      	str	r3, [r0, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
  
}
 8002e7c:	bc30      	pop	{r4, r5}
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 8002e7e:	6013      	str	r3, [r2, #0]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay = 16;
 8002e80:	6053      	str	r3, [r2, #4]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime = 16;
 8002e82:	6093      	str	r3, [r2, #8]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
 8002e84:	60d3      	str	r3, [r2, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
 8002e86:	6113      	str	r3, [r2, #16]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
 8002e88:	6153      	str	r3, [r2, #20]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
 8002e8a:	6193      	str	r3, [r2, #24]
  
}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop

08002e90 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 8002e90:	b430      	push	{r4, r5}
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8002e92:	e890 0022 	ldmia.w	r0, {r1, r5}
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 8002e96:	68c4      	ldr	r4, [r0, #12]
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 8002e98:	6882      	ldr	r2, [r0, #8]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8002e9a:	4329      	orrs	r1, r5
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 8002e9c:	f44f 73a0 	mov.w	r3, #320	; 0x140
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8002ea0:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 8002ea4:	3a01      	subs	r2, #1
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 8002ea6:	f2ca 0300 	movt	r3, #40960	; 0xa000
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8002eaa:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 8002eae:	611a      	str	r2, [r3, #16]

}
 8002eb0:	bc30      	pop	{r4, r5}
 8002eb2:	4770      	bx	lr

08002eb4 <FMC_GetModeStatus>:
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 8002eb4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002eb8:	f2ca 0300 	movt	r3, #40960	; 0xa000
  
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
 8002ebc:	b120      	cbz	r0, 8002ec8 <FMC_GetModeStatus+0x14>
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
  }
  else
  {
    tmpreg = ((uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES2) >> 2);
 8002ebe:	6998      	ldr	r0, [r3, #24]
 8002ec0:	f000 0018 	and.w	r0, r0, #24
 8002ec4:	0880      	lsrs	r0, r0, #2
  }
  
  /* Return the mode status */
  return tmpreg;
}
 8002ec6:	4770      	bx	lr
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 8002ec8:	6998      	ldr	r0, [r3, #24]
 8002eca:	f000 0006 	and.w	r0, r0, #6
 8002ece:	4770      	bx	lr

08002ed0 <FMC_SetRefreshCount>:
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 8002ed0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ed4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 8002ede:	6158      	str	r0, [r3, #20]
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop

08002ee4 <FMC_SetAutoRefresh_Number>:
void FMC_SetAutoRefresh_Number(uint32_t FMC_Number)
{
  /* check the parameters */
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_Number));
  
  FMC_Bank5_6->SDCMR |= (FMC_Number << 5);   
 8002ee4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ee8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	ea42 1040 	orr.w	r0, r2, r0, lsl #5
 8002ef2:	6118      	str	r0, [r3, #16]
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop

08002ef8 <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 8002ef8:	0080      	lsls	r0, r0, #2
 8002efa:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 8002efe:	b939      	cbnz	r1, 8002f10 <FMC_SDRAMWriteProtectionConfig+0x18>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
  }
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 8002f00:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 8002f04:	f647 53ff 	movw	r3, #32255	; 0x7dff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8002f0e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 8002f10:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 8002f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f18:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop

08002f20 <FMC_ITConfig>:
{
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002f20:	b1ba      	cbz	r2, 8002f52 <FMC_ITConfig+0x32>
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 8002f22:	2810      	cmp	r0, #16
 8002f24:	d037      	beq.n	8002f96 <FMC_ITConfig+0x76>
    {
      FMC_Bank2->SR2 |= FMC_IT;
    }
    /* Enable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 8002f26:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002f2a:	d03b      	beq.n	8002fa4 <FMC_ITConfig+0x84>
    {
      FMC_Bank3->SR3 |= FMC_IT;
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
 8002f2c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 8002f30:	bf0b      	itete	eq
 8002f32:	23a0      	moveq	r3, #160	; 0xa0
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 8002f34:	f44f 73a0 	movne.w	r3, #320	; 0x140
      FMC_Bank3->SR3 |= FMC_IT;
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 8002f38:	f2ca 0300 	movteq	r3, #40960	; 0xa000
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 8002f3c:	f2ca 0300 	movtne	r3, #40960	; 0xa000
      FMC_Bank3->SR3 |= FMC_IT;
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 8002f40:	bf0b      	itete	eq
 8002f42:	685a      	ldreq	r2, [r3, #4]
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 8002f44:	695a      	ldrne	r2, [r3, #20]
      FMC_Bank3->SR3 |= FMC_IT;
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 8002f46:	4311      	orreq	r1, r2
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 8002f48:	4311      	orrne	r1, r2
      FMC_Bank3->SR3 |= FMC_IT;
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 8002f4a:	bf0c      	ite	eq
 8002f4c:	6059      	streq	r1, [r3, #4]
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 8002f4e:	6159      	strne	r1, [r3, #20]
 8002f50:	4770      	bx	lr
    }
  }
  else
  {
    /* Disable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 8002f52:	2810      	cmp	r0, #16
 8002f54:	d017      	beq.n	8002f86 <FMC_ITConfig+0x66>
    {
      
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 8002f56:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002f5a:	d02a      	beq.n	8002fb2 <FMC_ITConfig+0x92>
    {
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
 8002f5c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 8002f60:	bf0b      	itete	eq
 8002f62:	23a0      	moveq	r3, #160	; 0xa0
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 8002f64:	f44f 73a0 	movne.w	r3, #320	; 0x140
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 8002f68:	f2ca 0300 	movteq	r3, #40960	; 0xa000
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 8002f6c:	f2ca 0300 	movtne	r3, #40960	; 0xa000
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 8002f70:	bf0b      	itete	eq
 8002f72:	685a      	ldreq	r2, [r3, #4]
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 8002f74:	695a      	ldrne	r2, [r3, #20]
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 8002f76:	ea22 0101 	biceq.w	r1, r2, r1
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 8002f7a:	ea22 0101 	bicne.w	r1, r2, r1
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 8002f7e:	bf0c      	ite	eq
 8002f80:	6059      	streq	r1, [r3, #4]
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 8002f82:	6159      	strne	r1, [r3, #20]
 8002f84:	4770      	bx	lr
  {
    /* Disable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
    {
      
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
 8002f86:	2360      	movs	r3, #96	; 0x60
 8002f88:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	ea22 0101 	bic.w	r1, r2, r1
 8002f92:	6059      	str	r1, [r3, #4]
 8002f94:	4770      	bx	lr
  if (NewState != DISABLE)
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
    {
      FMC_Bank2->SR2 |= FMC_IT;
 8002f96:	2360      	movs	r3, #96	; 0x60
 8002f98:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	6059      	str	r1, [r3, #4]
 8002fa2:	4770      	bx	lr
    }
    /* Enable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
    {
      FMC_Bank3->SR3 |= FMC_IT;
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4311      	orrs	r1, r2
 8002fae:	6059      	str	r1, [r3, #4]
 8002fb0:	4770      	bx	lr
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
    }
    /* Disable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
    {
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	ea22 0101 	bic.w	r1, r2, r1
 8002fbe:	6059      	str	r1, [r3, #4]
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <FMC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8002fc4:	2810      	cmp	r0, #16
 8002fc6:	d014      	beq.n	8002ff2 <FMC_GetFlagStatus+0x2e>
  {
    tmpsr = FMC_Bank2->SR2;
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8002fc8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002fcc:	d016      	beq.n	8002ffc <FMC_GetFlagStatus+0x38>
  {
    tmpsr = FMC_Bank3->SR3;
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8002fce:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  {
    tmpsr = FMC_Bank4->SR4;
 8002fd2:	bf0b      	itete	eq
 8002fd4:	23a0      	moveq	r3, #160	; 0xa0
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 8002fd6:	f44f 73a0 	movne.w	r3, #320	; 0x140
  {
    tmpsr = FMC_Bank3->SR3;
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    tmpsr = FMC_Bank4->SR4;
 8002fda:	f2ca 0300 	movteq	r3, #40960	; 0xa000
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 8002fde:	f2ca 0300 	movtne	r3, #40960	; 0xa000
  {
    tmpsr = FMC_Bank3->SR3;
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    tmpsr = FMC_Bank4->SR4;
 8002fe2:	bf0c      	ite	eq
 8002fe4:	6858      	ldreq	r0, [r3, #4]
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 8002fe6:	6998      	ldrne	r0, [r3, #24]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 8002fe8:	4008      	ands	r0, r1
  {
    bitstatus = SET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8002fea:	1a0b      	subs	r3, r1, r0
 8002fec:	4258      	negs	r0, r3
 8002fee:	4158      	adcs	r0, r3
 8002ff0:	4770      	bx	lr
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
  {
    tmpsr = FMC_Bank2->SR2;
 8002ff2:	2360      	movs	r3, #96	; 0x60
 8002ff4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002ff8:	6858      	ldr	r0, [r3, #4]
 8002ffa:	e7f5      	b.n	8002fe8 <FMC_GetFlagStatus+0x24>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
  {
    tmpsr = FMC_Bank3->SR3;
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003002:	6858      	ldr	r0, [r3, #4]
 8003004:	e7f0      	b.n	8002fe8 <FMC_GetFlagStatus+0x24>
 8003006:	bf00      	nop

08003008 <FMC_ClearFlag>:
{
 /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
 8003008:	2810      	cmp	r0, #16
 800300a:	d017      	beq.n	800303c <FMC_ClearFlag+0x34>
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800300c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003010:	d01c      	beq.n	800304c <FMC_ClearFlag+0x44>
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8003012:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 8003016:	bf0b      	itete	eq
 8003018:	23a0      	moveq	r3, #160	; 0xa0
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 800301a:	f44f 73a0 	movne.w	r3, #320	; 0x140
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 800301e:	f2ca 0300 	movteq	r3, #40960	; 0xa000
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 8003022:	f2ca 0300 	movtne	r3, #40960	; 0xa000
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 8003026:	bf0b      	itete	eq
 8003028:	685a      	ldreq	r2, [r3, #4]
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 800302a:	695a      	ldrne	r2, [r3, #20]
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 800302c:	ea22 0101 	biceq.w	r1, r2, r1
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 8003030:	ea22 0101 	bicne.w	r1, r2, r1
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 8003034:	bf0c      	ite	eq
 8003036:	6059      	streq	r1, [r3, #4]
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 8003038:	6159      	strne	r1, [r3, #20]
 800303a:	4770      	bx	lr
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
 800303c:	2360      	movs	r3, #96	; 0x60
 800303e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	ea22 0101 	bic.w	r1, r2, r1
 8003048:	6059      	str	r1, [r3, #4]
 800304a:	4770      	bx	lr
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	ea22 0101 	bic.w	r1, r2, r1
 8003058:	6059      	str	r1, [r3, #4]
 800305a:	4770      	bx	lr

0800305c <FMC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800305c:	2810      	cmp	r0, #16
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.    
  * @retval The new state of FMC_IT (SET or RESET).
  */
ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 800305e:	b410      	push	{r4}
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8003060:	d024      	beq.n	80030ac <FMC_GetITStatus+0x50>
  {
    tmpsr = FMC_Bank2->SR2;
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8003062:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003066:	d018      	beq.n	800309a <FMC_GetITStatus+0x3e>
  {
    tmpsr = FMC_Bank3->SR3;
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8003068:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800306c:	d027      	beq.n	80030be <FMC_GetITStatus+0x62>
    tmpsr = FMC_Bank4->SR4;
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 800306e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003072:	f2ca 0200 	movt	r2, #40960	; 0xa000
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 8003076:	2801      	cmp	r0, #1
    tmpsr = FMC_Bank4->SR4;
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 8003078:	6953      	ldr	r3, [r2, #20]
    tmpsr2 = FMC_Bank5_6->SDSR;
 800307a:	6994      	ldr	r4, [r2, #24]
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 800307c:	ea01 0203 	and.w	r2, r1, r3
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
 8003080:	bf98      	it	ls
 8003082:	f004 0101 	andls.w	r1, r4, #1
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 8003086:	d80e      	bhi.n	80030a6 <FMC_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus; 
 8003088:	2a00      	cmp	r2, #0
 800308a:	bf18      	it	ne
 800308c:	2900      	cmpne	r1, #0
 800308e:	bf0c      	ite	eq
 8003090:	2000      	moveq	r0, #0
 8003092:	2001      	movne	r0, #1
}
 8003094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003098:	4770      	bx	lr
  {
    tmpsr = FMC_Bank2->SR2;
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
  {
    tmpsr = FMC_Bank3->SR3;
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80030a0:	685b      	ldr	r3, [r3, #4]
    tmpsr = FMC_Bank5_6->SDRTR;
    tmpsr2 = FMC_Bank5_6->SDSR;
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 80030a2:	ea03 0201 	and.w	r2, r3, r1
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 80030a6:	ea03 01d1 	and.w	r1, r3, r1, lsr #3
 80030aa:	e7ed      	b.n	8003088 <FMC_GetITStatus+0x2c>
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
  {
    tmpsr = FMC_Bank2->SR2;
 80030ac:	2360      	movs	r3, #96	; 0x60
 80030ae:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80030b2:	685b      	ldr	r3, [r3, #4]
    tmpsr = FMC_Bank5_6->SDRTR;
    tmpsr2 = FMC_Bank5_6->SDSR;
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 80030b4:	ea01 0203 	and.w	r2, r1, r3
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 80030b8:	ea03 01d1 	and.w	r1, r3, r1, lsr #3
 80030bc:	e7e4      	b.n	8003088 <FMC_GetITStatus+0x2c>
  {
    tmpsr = FMC_Bank3->SR3;
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    tmpsr = FMC_Bank4->SR4;
 80030be:	23a0      	movs	r3, #160	; 0xa0
 80030c0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	e7ec      	b.n	80030a2 <FMC_GetITStatus+0x46>

080030c8 <FMC_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
 80030c8:	2810      	cmp	r0, #16
 80030ca:	d017      	beq.n	80030fc <FMC_ClearITPendingBit+0x34>
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 80030cc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80030d0:	d01c      	beq.n	800310c <FMC_ClearITPendingBit+0x44>
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80030d2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 80030d6:	bf0b      	itete	eq
 80030d8:	23a0      	moveq	r3, #160	; 0xa0
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 80030da:	f44f 73a0 	movne.w	r3, #320	; 0x140
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 80030de:	f2ca 0300 	movteq	r3, #40960	; 0xa000
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 80030e2:	f2ca 0300 	movtne	r3, #40960	; 0xa000
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 80030e6:	bf0b      	itete	eq
 80030e8:	685a      	ldreq	r2, [r3, #4]
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 80030ea:	695a      	ldrne	r2, [r3, #20]
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 80030ec:	ea22 01d1 	biceq.w	r1, r2, r1, lsr #3
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 80030f0:	f042 0201 	orrne.w	r2, r2, #1
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 80030f4:	bf0c      	ite	eq
 80030f6:	6059      	streq	r1, [r3, #4]
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 80030f8:	615a      	strne	r2, [r3, #20]
 80030fa:	4770      	bx	lr
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
 80030fc:	2360      	movs	r3, #96	; 0x60
 80030fe:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 8003108:	6059      	str	r1, [r3, #4]
 800310a:	4770      	bx	lr
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 8003118:	6059      	str	r1, [r3, #4]
 800311a:	4770      	bx	lr

0800311c <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 800311c:	b508      	push	{r3, lr}
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 800311e:	2040      	movs	r0, #64	; 0x40
 8003120:	2101      	movs	r1, #1
 8003122:	f7fd fdcb 	bl	8000cbc <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8003126:	2040      	movs	r0, #64	; 0x40
 8003128:	2100      	movs	r1, #0
}
 800312a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 800312e:	f7fd bdc5 	b.w	8000cbc <RCC_AHB2PeriphResetCmd>
 8003132:	bf00      	nop

08003134 <RNG_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8003134:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003138:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800313c:	681a      	ldr	r2, [r3, #0]
void RNG_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800313e:	b918      	cbnz	r0, 8003148 <RNG_Cmd+0x14>
    RNG->CR |= RNG_CR_RNGEN;
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8003140:	f022 0204 	bic.w	r2, r2, #4
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8003148:	f042 0204 	orr.w	r2, r2, #4
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	4770      	bx	lr

08003150 <RNG_GetRandomNumber>:
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8003150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003154:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003158:	6898      	ldr	r0, [r3, #8]
}
 800315a:	4770      	bx	lr

0800315c <RNG_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 800315c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003160:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003164:	681a      	ldr	r2, [r3, #0]
void RNG_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003166:	b918      	cbnz	r0, 8003170 <RNG_ITConfig+0x14>
    RNG->CR |= RNG_CR_IE;
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 8003168:	f022 0208 	bic.w	r2, r2, #8
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8003170:	f042 0208 	orr.w	r2, r2, #8
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	4770      	bx	lr

08003178 <RNG_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 8003178:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800317c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4218      	tst	r0, r3
    /* RNG_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
}
 8003184:	bf0c      	ite	eq
 8003186:	2000      	moveq	r0, #0
 8003188:	2001      	movne	r0, #1
 800318a:	4770      	bx	lr

0800318c <RNG_ClearFlag>:
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 800318c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003190:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003194:	ea6f 1000 	mvn.w	r0, r0, lsl #4
 8003198:	6058      	str	r0, [r3, #4]
 800319a:	4770      	bx	lr

0800319c <RNG_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 800319c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031a0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4218      	tst	r0, r3
    /* RNG_IT is reset */
    bitstatus = RESET;
  }
  /* Return the RNG_IT status */
  return bitstatus;
}
 80031a8:	bf0c      	ite	eq
 80031aa:	2000      	moveq	r0, #0
 80031ac:	2001      	movne	r0, #1
 80031ae:	4770      	bx	lr

080031b0 <RNG_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 80031b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031b4:	43c0      	mvns	r0, r0
 80031b6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80031ba:	b2c0      	uxtb	r0, r0
 80031bc:	6058      	str	r0, [r3, #4]
 80031be:	4770      	bx	lr

Disassembly of section .data:

20000000 <AHBPrescTable>:
	...
20000008:	04030201 	streq	r0, [r3], #-513	; 0x201
2000000c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000010 <SystemCoreClock>:
20000010:	08f0d180 	ldmeq	r0!, {r7, r8, ip, lr, pc}^

20000014 <APBAHBPrescTable>:
20000014:	00000000 	andeq	r0, r0, r0
20000018:	04030201 	streq	r0, [r3], #-513	; 0x201
2000001c:	04030201 	streq	r0, [r3], #-513	; 0x201
20000020:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

Disassembly of section .bss:

20000024 <__bss_start__>:
20000024:	00000000 	andeq	r0, r0, r0

Disassembly of section ._user_heap_stack:

20000028 <._user_heap_stack>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002941 	andeq	r2, r0, r1, asr #18
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000001f 	andeq	r0, r0, pc, lsl r0
  10:	2d453705 	stclcs	7, cr3, [r5, #-20]	; 0xffffffec
  14:	0d06004d 	stceq	0, cr0, [r6, #-308]	; 0xfffffecc
  18:	02094d07 	andeq	r4, r9, #448	; 0x1c0
  1c:	0412060a 	ldreq	r0, [r2], #-1546	; 0x60a
  20:	01180117 	tsteq	r8, r7, lsl r1
  24:	031b011a 	tsteq	fp, #-2147483642	; 0x80000006
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000084 	andeq	r0, r0, r4, lsl #1
       4:	00430002 	subeq	r0, r3, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
      20:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
      24:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
      28:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      2c:	73000034 	movwvc	r0, #52	; 0x34
      30:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
      34:	735f7075 	cmpvc	pc, #117	; 0x75
      38:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      3c:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
      40:	3933345f 	ldmdbcc	r3!, {r0, r1, r2, r3, r4, r6, sl, ip, sp}
      44:	732e7878 	teqvc	lr, #120, 16	; 0x780000
      48:	00000100 	andeq	r0, r0, r0, lsl #2
      4c:	02050000 	andeq	r0, r5, #0
      50:	080001c0 	stmdaeq	r0, {r6, r7, r8}
      54:	0100ca03 	tsteq	r0, r3, lsl #20
      58:	21212321 	teqcs	r1, r1, lsr #6
      5c:	21212321 	teqcs	r1, r1, lsr #6
      60:	21212121 	teqcs	r1, r1, lsr #2
      64:	21312123 	teqcs	r1, r3, lsr #2
      68:	2f302321 	svccs	0x00302321
      6c:	34206503 	strtcc	r6, [r0], #-1283	; 0x503
      70:	0236322f 	eorseq	r3, r6, #-268435454	; 0xf0000002
      74:	01010002 	tsteq	r1, r2
      78:	04020500 	streq	r0, [r2], #-1280	; 0x500
      7c:	03080002 	movweq	r0, #32770	; 0x8002
      80:	020100f6 	andeq	r0, r1, #246	; 0xf6
      84:	01010001 	tsteq	r1, r1
      88:	000001a3 	andeq	r0, r0, r3, lsr #3
      8c:	011b0002 	tsteq	fp, r2
      90:	01020000 	mrseq	r0, (UNDEF: 2)
      94:	000d0efb 	strdeq	r0, [sp], -fp
      98:	01010101 	tsteq	r1, r1, lsl #2
      9c:	01000000 	mrseq	r0, (UNDEF: 0)
      a0:	43010000 	movwmi	r0, #4096	; 0x1000
      a4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
      a8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
      ac:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
      b0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      b4:	74732f34 	ldrbtvc	r2, [r3], #-3892	; 0xf34
      b8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0x261
      bc:	752f0070 	strvc	r0, [pc, #-112]!	; 54 <_Min_Heap_Size+0x54>
      c0:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
      c4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
      c8:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
      cc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
      d0:	616d2f62 	cmnvs	sp, r2, ror #30
      d4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
      d8:	752f0065 	strvc	r0, [pc, #-101]!	; 7b <_Min_Heap_Size+0x7b>
      dc:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
      e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
      e4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
      e8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
      ec:	4f430062 	svcmi	0x00430062
      f0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
      f4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
      f8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
      fc:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     100:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     104:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     108:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     10c:	5349534d 	movtpl	r5, #37709	; 0x934d
     110:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     114:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     118:	524f4300 	subpl	r4, pc, #0, 6
     11c:	5f584554 	svcpl	0x00584554
     120:	5f46344d 	svcpl	0x0046344d
     124:	334d5453 	movtcc	r5, #54355	; 0xd453
     128:	2f344632 	svccs	0x00344632
     12c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     130:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     134:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     138:	2f534953 	svccs	0x00534953
     13c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     140:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     144:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     148:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     14c:	2f787834 	svccs	0x00787834
     150:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     154:	00656475 	rsbeq	r6, r5, r5, ror r4
     158:	73797300 	cmnvc	r9, #0, 6
     15c:	5f6d6574 	svcpl	0x006d6574
     160:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     164:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     168:	00632e78 	rsbeq	r2, r3, r8, ror lr
     16c:	5f000001 	svcpl	0x00000001
     170:	61666564 	cmnvs	r6, r4, ror #10
     174:	5f746c75 	svcpl	0x00746c75
     178:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     17c:	00682e73 	rsbeq	r2, r8, r3, ror lr
     180:	73000002 	movwvc	r0, #2
     184:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     188:	00682e74 	rsbeq	r2, r8, r4, ror lr
     18c:	63000003 	movwvs	r0, #3
     190:	5f65726f 	svcpl	0x0065726f
     194:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     198:	00040068 	andeq	r0, r4, r8, rrx
     19c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     1a0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     1a4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     1a8:	00000500 	andeq	r0, r0, r0, lsl #10
     1ac:	02050000 	andeq	r0, r5, #0
     1b0:	08000208 	stmdaeq	r0, {r3, r9}
     1b4:	0101d003 	tsteq	r1, r3
     1b8:	322a4e15 	eorcc	r4, sl, #336	; 0x150
     1bc:	1d234e2a 	stcne	14, cr4, [r3, #-168]!	; 0xffffff58
     1c0:	2b23233f 	blcs	8c8ec4 <_Min_Stack_Size+0x8c8ac4>
     1c4:	233f2b31 	teqcs	pc, #50176	; 0xc400
     1c8:	03206d03 	teqeq	r0, #3, 26	; 0xc0
     1cc:	033f2013 	teqeq	pc, #19
     1d0:	312000f3 	strdcc	r0, [r0, -r3]!
     1d4:	4b48304f 	blmi	120c318 <_Min_Stack_Size+0x120bf18>
     1d8:	32763e3d 	rsbscc	r3, r6, #976	; 0x3d0
     1dc:	7f860323 	svcvc	0x00860323
     1e0:	fb03763c 	blx	ddada <_Min_Stack_Size+0xdd6da>
     1e4:	2d4b2e00 	stclcs	14, cr2, [fp, #-0]
     1e8:	4d3d2d21 	ldcmi	13, cr2, [sp, #-132]!	; 0xffffff7c
     1ec:	2b234d31 	blcs	8d36b8 <_Min_Stack_Size+0x8d32b8>
     1f0:	24232b31 	strtcs	r2, [r3], #-2865	; 0xb31
     1f4:	4b77874d 	blmi	1de1f30 <_Min_Stack_Size+0x1de1b30>
     1f8:	0006024d 	andeq	r0, r6, sp, asr #4
     1fc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     200:	00032c02 	andeq	r2, r3, r2, lsl #24
     204:	029d0308 	addseq	r0, sp, #8, 6	; 0x20000000
     208:	03761601 	cmneq	r6, #1048576	; 0x100000
     20c:	2cae8224 	sfmcs	f0, 1, [lr], #144	; 0x90
     210:	58670322 	stmdapl	r7!, {r1, r5, r8, r9}^
     214:	4f312221 	svcmi	0x00312221
     218:	76033329 	strvc	r3, [r3], -r9, lsr #6
     21c:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
     220:	47314731 			; <UNDEFINED> instruction: 0x47314731
     224:	032f2131 	teqeq	pc, #1073741836	; 0x4000000c
     228:	0502206a 	streq	r2, [r2, #-106]	; 0x6a
     22c:	1b010100 	blne	40634 <_Min_Stack_Size+0x40234>
     230:	02000002 	andeq	r0, r0, #2
     234:	00018f00 	andeq	r8, r1, r0, lsl #30
     238:	fb010200 	blx	40a42 <_Min_Stack_Size+0x40642>
     23c:	01000d0e 	tsteq	r0, lr, lsl #26
     240:	00010101 	andeq	r0, r1, r1, lsl #2
     244:	00010000 	andeq	r0, r1, r0
     248:	72730100 	rsbsvc	r0, r3, #0, 2
     24c:	752f0063 	strvc	r0, [pc, #-99]!	; 1f1 <_Min_Heap_Size+0x1f1>
     250:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     254:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     258:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     25c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     260:	616d2f62 	cmnvs	sp, r2, ror #30
     264:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     268:	752f0065 	strvc	r0, [pc, #-101]!	; 20b <_Min_Heap_Size+0x20b>
     26c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     270:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     274:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     278:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     27c:	4f430062 	svcmi	0x00430062
     280:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     284:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     288:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     28c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     290:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     294:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     298:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     29c:	5349534d 	movtpl	r5, #37709	; 0x934d
     2a0:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
     2a4:	2f656369 	svccs	0x00656369
     2a8:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
     2ac:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     2b0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     2b4:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     2b8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     2bc:	524f4300 	subpl	r4, pc, #0, 6
     2c0:	5f584554 	svcpl	0x00584554
     2c4:	5f46344d 	svcpl	0x0046344d
     2c8:	334d5453 	movtcc	r5, #54355	; 0xd453
     2cc:	2f344632 	svccs	0x00344632
     2d0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     2d4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     2d8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     2dc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     2e0:	5f787834 	svcpl	0x00787834
     2e4:	50647453 	rsbpl	r7, r4, r3, asr r4
     2e8:	70697265 	rsbvc	r7, r9, r5, ror #4
     2ec:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     2f0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     2f4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     2f8:	524f4300 	subpl	r4, pc, #0, 6
     2fc:	5f584554 	svcpl	0x00584554
     300:	5f46344d 	svcpl	0x0046344d
     304:	334d5453 	movtcc	r5, #54355	; 0xd453
     308:	2f344632 	svccs	0x00344632
     30c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     310:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     314:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     318:	2f534953 	svccs	0x00534953
     31c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     320:	00656475 	rsbeq	r6, r5, r5, ror r4
     324:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     328:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     32c:	5f000001 	svcpl	0x00000001
     330:	61666564 	cmnvs	r6, r4, ror #10
     334:	5f746c75 	svcpl	0x00746c75
     338:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     33c:	00682e73 	rsbeq	r2, r8, r3, ror lr
     340:	73000002 	movwvc	r0, #2
     344:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     348:	00682e74 	rsbeq	r2, r8, r4, ror lr
     34c:	73000003 	movwvc	r0, #3
     350:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     354:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     358:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     35c:	74730000 	ldrbtvc	r0, [r3], #-0
     360:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     364:	5f787834 	svcpl	0x00787834
     368:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
     36c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
     370:	74730000 	ldrbtvc	r0, [r3], #-0
     374:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     378:	5f787834 	svcpl	0x00787834
     37c:	6f697067 	svcvs	0x00697067
     380:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
     384:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
     388:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
     38c:	00000500 	andeq	r0, r0, r0, lsl #10
     390:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     394:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
     398:	0600682e 	streq	r6, [r0], -lr, lsr #16
     39c:	74730000 	ldrbtvc	r0, [r3], #-0
     3a0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     3a4:	5f787834 	svcpl	0x00787834
     3a8:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     3ac:	00050068 	andeq	r0, r5, r8, rrx
     3b0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     3b4:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     3b8:	735f7878 	cmpvc	pc, #120, 16	; 0x780000
     3bc:	66637379 			; <UNDEFINED> instruction: 0x66637379
     3c0:	00682e67 	rsbeq	r2, r8, r7, ror #28
     3c4:	00000005 	andeq	r0, r0, r5
     3c8:	c0020500 	andgt	r0, r2, r0, lsl #10
     3cc:	17080003 	strne	r0, [r8, -r3]
     3d0:	2d2f4b22 	vstmdbcs	pc!, {d4-d20}
     3d4:	01000202 	tsteq	r0, r2, lsl #4
     3d8:	02050001 	andeq	r0, r5, #1
     3dc:	080003d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9}
     3e0:	27010c03 	strcs	r0, [r1, -r3, lsl #24]
     3e4:	242e7903 	strtcs	r7, [lr], #-2307	; 0x903
     3e8:	21232f1e 	teqcs	r3, lr, lsl pc
     3ec:	2f2f2137 	svccs	0x002f2137
     3f0:	09032f2f 	stmdbeq	r3, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
     3f4:	22311b2e 	eorscs	r1, r1, #47104	; 0xb800
     3f8:	2a302f38 	bcs	c0c0e0 <_Min_Stack_Size+0xc0bce0>
     3fc:	022f3023 	eoreq	r3, pc, #35	; 0x23
     400:	01010002 	tsteq	r1, r2
     404:	30020500 	andcc	r0, r2, r0, lsl #10
     408:	03080004 	movweq	r0, #32772	; 0x8004
     40c:	1b250120 	blne	940894 <_Min_Stack_Size+0x940494>
     410:	21214125 	teqcs	r1, r5, lsr #2
     414:	2c2f1d22 	stccs	13, cr1, [pc], #-136	; 394 <_Min_Heap_Size+0x394>
     418:	1f322f23 	svcne	0x00322f23
     41c:	2f2b1f24 	svccs	0x002b1f24
     420:	0230302f 	eorseq	r3, r0, #47	; 0x2f
     424:	01010002 	tsteq	r1, r2
     428:	74020500 	strvc	r0, [r2], #-1280	; 0x500
     42c:	03080004 	movweq	r0, #32772	; 0x8004
     430:	5c21013a 	stfpls	f0, [r1], #-232	; 0xffffff18
     434:	022c229f 	eoreq	r2, ip, #-268435447	; 0xf0000009
     438:	01010002 	tsteq	r1, r2
     43c:	a0020500 	andge	r0, r2, r0, lsl #10
     440:	03080004 	movweq	r0, #32772	; 0x8004
     444:	210100c7 	smlabtcs	r1, r7, r0, r0
     448:	0003022f 	andeq	r0, r3, pc, lsr #4
     44c:	02000101 	andeq	r0, r0, #1073741824	; 0x40000000
     450:	00020000 	andeq	r0, r2, r0
     454:	00000176 	andeq	r0, r0, r6, ror r1
     458:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     45c:	0101000d 	tsteq	r1, sp
     460:	00000101 	andeq	r0, r0, r1, lsl #2
     464:	00000100 	andeq	r0, r0, r0, lsl #2
     468:	524f4301 	subpl	r4, pc, #67108864	; 0x4000000
     46c:	5f584554 	svcpl	0x00584554
     470:	5f46344d 	svcpl	0x0046344d
     474:	334d5453 	movtcc	r5, #54355	; 0xd453
     478:	2f344632 	svccs	0x00344632
     47c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     480:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     484:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     488:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     48c:	5f787834 	svcpl	0x00787834
     490:	50647453 	rsbpl	r7, r4, r3, asr r4
     494:	70697265 	rsbvc	r7, r9, r5, ror #4
     498:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     49c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     4a0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     4a4:	73752f00 	cmnvc	r5, #0, 30
     4a8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     4ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     4b0:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     4b4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     4b8:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     4bc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     4c0:	73752f00 	cmnvc	r5, #0, 30
     4c4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     4c8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     4cc:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     4d0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     4d4:	524f4300 	subpl	r4, pc, #0, 6
     4d8:	5f584554 	svcpl	0x00584554
     4dc:	5f46344d 	svcpl	0x0046344d
     4e0:	334d5453 	movtcc	r5, #54355	; 0xd453
     4e4:	2f344632 	svccs	0x00344632
     4e8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     4ec:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     4f0:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     4f4:	2f534953 	svccs	0x00534953
     4f8:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     4fc:	00656475 	rsbeq	r6, r5, r5, ror r4
     500:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     504:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3f8 <_Min_Heap_Size+0x3f8>
     508:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     50c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     510:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 400 <_Min_Stack_Size>
     514:	61726269 	cmnvs	r2, r9, ror #4
     518:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     51c:	534d432f 	movtpl	r4, #54063	; 0xd32f
     520:	442f5349 	strtmi	r5, [pc], #-841	; 528 <_Min_Stack_Size+0x128>
     524:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     528:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
     52c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     530:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     534:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
     538:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     53c:	43006564 	movwmi	r6, #1380	; 0x564
     540:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     544:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     548:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     54c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     550:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
     554:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     558:	2f736569 	svccs	0x00736569
     55c:	334d5453 	movtcc	r5, #54355	; 0xd453
     560:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     564:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
     568:	72655064 	rsbvc	r5, r5, #100	; 0x64
     56c:	5f687069 	svcpl	0x00687069
     570:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     574:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     578:	0000636e 	andeq	r6, r0, lr, ror #6
     57c:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
     580:	0100632e 	tsteq	r0, lr, lsr #6
     584:	645f0000 	ldrbvs	r0, [pc], #-0	; 58c <_Min_Stack_Size+0x18c>
     588:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     58c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 594 <_Min_Stack_Size+0x194>
     590:	73657079 	cmnvc	r5, #121	; 0x79
     594:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     598:	74730000 	ldrbtvc	r0, [r3], #-0
     59c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     5a0:	0300682e 	movweq	r6, #2094	; 0x82e
     5a4:	6f630000 	svcvs	0x00630000
     5a8:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     5ac:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     5b0:	00000400 	andeq	r0, r0, r0, lsl #8
     5b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     5b8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     5bc:	00682e78 	rsbeq	r2, r8, r8, ror lr
     5c0:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
     5c4:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
     5c8:	00060068 	andeq	r0, r6, r8, rrx
     5cc:	05000000 	streq	r0, [r0, #-0]
     5d0:	0004ac02 	andeq	sl, r4, r2, lsl #24
     5d4:	00f60308 	rscseq	r0, r6, r8, lsl #6
     5d8:	0a021701 	beq	861e4 <_Min_Stack_Size+0x85de4>
     5dc:	00010100 	andeq	r0, r1, r0, lsl #2
     5e0:	04c00205 	strbeq	r0, [r0], #517	; 0x205
     5e4:	88030800 	stmdahi	r3, {fp}
     5e8:	031a0101 	tsteq	sl, #1073741824	; 0x40000000
     5ec:	03282078 	teqeq	r8, #120	; 0x78
     5f0:	3b592015 	blcc	164864c <_Min_Stack_Size+0x164824c>
     5f4:	03312d2f 	teqeq	r1, #3008	; 0xbc0
     5f8:	1c4e2e6b 	mcrrne	14, 6, r2, lr, cr11
     5fc:	77032425 	strvc	r2, [r3, -r5, lsr #8]
     600:	222f3d20 	eorcs	r3, pc, #32, 26	; 0x800
     604:	3221303a 	eorcc	r3, r1, #58	; 0x3a
     608:	1d313048 	ldcne	0, cr3, [r1, #-288]!	; 0xfffffee0
     60c:	321d3b32 	andscc	r3, sp, #51200	; 0xc800
     610:	2e09032d 	cdpcs	3, 0, cr0, cr9, cr13, {1}
     614:	01000202 	tsteq	r0, r2, lsl #4
     618:	02050001 	andeq	r0, r5, #1
     61c:	08000540 	stmdaeq	r0, {r6, r8, sl}
     620:	0101b403 	tsteq	r1, r3, lsl #8
     624:	000b0217 	andeq	r0, fp, r7, lsl r2
     628:	05000101 	streq	r0, [r0, #-257]	; 0x101
     62c:	00055802 	andeq	r5, r5, r2, lsl #16
     630:	01c70308 	biceq	r0, r7, r8, lsl #6
     634:	26561901 	ldrbcs	r1, [r6], -r1, lsl #18
     638:	00030246 	andeq	r0, r3, r6, asr #4
     63c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     640:	00057402 	andeq	r7, r5, r2, lsl #8
     644:	01df0308 	bicseq	r0, pc, r8, lsl #6
     648:	22481701 	subcs	r1, r8, #262144	; 0x40000
     64c:	0004024e 	andeq	r0, r4, lr, asr #4
     650:	034c0101 	movteq	r0, #49409	; 0xc101
     654:	00020000 	andeq	r0, r2, r0
     658:	0000019d 	muleq	r0, sp, r1
     65c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     660:	0101000d 	tsteq	r1, sp
     664:	00000101 	andeq	r0, r0, r1, lsl #2
     668:	00000100 	andeq	r0, r0, r0, lsl #2
     66c:	524f4301 	subpl	r4, pc, #67108864	; 0x4000000
     670:	5f584554 	svcpl	0x00584554
     674:	5f46344d 	svcpl	0x0046344d
     678:	334d5453 	movtcc	r5, #54355	; 0xd453
     67c:	2f344632 	svccs	0x00344632
     680:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     684:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     688:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     68c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     690:	5f787834 	svcpl	0x00787834
     694:	50647453 	rsbpl	r7, r4, r3, asr r4
     698:	70697265 	rsbvc	r7, r9, r5, ror #4
     69c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     6a0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     6a4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     6a8:	73752f00 	cmnvc	r5, #0, 30
     6ac:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     6b0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     6b4:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     6b8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     6bc:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     6c0:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     6c4:	73752f00 	cmnvc	r5, #0, 30
     6c8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     6cc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     6d0:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     6d4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     6d8:	524f4300 	subpl	r4, pc, #0, 6
     6dc:	5f584554 	svcpl	0x00584554
     6e0:	5f46344d 	svcpl	0x0046344d
     6e4:	334d5453 	movtcc	r5, #54355	; 0xd453
     6e8:	2f344632 	svccs	0x00344632
     6ec:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     6f0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     6f4:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     6f8:	2f534953 	svccs	0x00534953
     6fc:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     700:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     704:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     708:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     70c:	2f787834 	svccs	0x00787834
     710:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     714:	00656475 	rsbeq	r6, r5, r5, ror r4
     718:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     71c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 610 <_Min_Stack_Size+0x210>
     720:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     724:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     728:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 618 <_Min_Stack_Size+0x218>
     72c:	61726269 	cmnvs	r2, r9, ror #4
     730:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     734:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     738:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     73c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     740:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     744:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     748:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     74c:	2f726576 	svccs	0x00726576
     750:	00636e69 	rsbeq	r6, r3, r9, ror #28
     754:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     758:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 64c <_Min_Stack_Size+0x24c>
     75c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     760:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     764:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 654 <_Min_Stack_Size+0x254>
     768:	61726269 	cmnvs	r2, r9, ror #4
     76c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     770:	534d432f 	movtpl	r4, #54063	; 0xd32f
     774:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     778:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     77c:	00006564 	andeq	r6, r0, r4, ror #10
     780:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     784:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     788:	70675f78 	rsbvc	r5, r7, r8, ror pc
     78c:	632e6f69 	teqvs	lr, #420	; 0x1a4
     790:	00000100 	andeq	r0, r0, r0, lsl #2
     794:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     798:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     79c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     7a0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     7a4:	00000200 	andeq	r0, r0, r0, lsl #4
     7a8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     7ac:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     7b0:	00000300 	andeq	r0, r0, r0, lsl #6
     7b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     7b8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     7bc:	00682e78 	rsbeq	r2, r8, r8, ror lr
     7c0:	73000004 	movwvc	r0, #4
     7c4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     7c8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     7cc:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     7d0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     7d4:	63000005 	movwvs	r0, #5
     7d8:	5f65726f 	svcpl	0x0065726f
     7dc:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     7e0:	00060068 	andeq	r0, r6, r8, rrx
     7e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     7e8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     7ec:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     7f0:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     7f4:	00000500 	andeq	r0, r0, r0, lsl #10
     7f8:	02050000 	andeq	r0, r5, #0
     7fc:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
     800:	0100ff03 	tsteq	r0, r3, lsl #30
     804:	6b6b5d24 	blvs	1ad7c9c <_Min_Stack_Size+0x1ad789c>
     808:	6b6b6b6b 	blvs	1adb5bc <_Min_Stack_Size+0x1adb1bc>
     80c:	766d6b6c 	strbtvc	r6, [sp], -ip, ror #22
     810:	032b3f59 	teqeq	fp, #356	; 0x164
     814:	034b2e4a 	movteq	r2, #48714	; 0xbe4a
     818:	48032e38 	stmdami	r3, {r3, r4, r5, r9, sl, fp, sp}
     81c:	034b322e 	movteq	r3, #45614	; 0xb22e
     820:	4d032e33 	stcmi	14, cr2, [r3, #-204]	; 0xffffff34
     824:	034b322e 	movteq	r3, #45614	; 0xb22e
     828:	52032e2e 	andpl	r2, r3, #736	; 0x2e0
     82c:	034b322e 	movteq	r3, #45614	; 0xb22e
     830:	57032e29 	strpl	r2, [r3, -r9, lsr #28]
     834:	034b322e 	movteq	r3, #45614	; 0xb22e
     838:	5c032e24 	stcpl	14, cr2, [r3], {36}	; 0x24
     83c:	034b322e 	movteq	r3, #45614	; 0xb22e
     840:	61032e1f 	tstvs	r3, pc, lsl lr
     844:	034b322e 	movteq	r3, #45614	; 0xb22e
     848:	66032e1a 			; <UNDEFINED> instruction: 0x66032e1a
     84c:	034b322e 	movteq	r3, #45614	; 0xb22e
     850:	6b032e15 	blvs	cc0ac <_Min_Stack_Size+0xcbcac>
     854:	0359332e 	cmpeq	r9, #-1207959552	; 0xb8000000
     858:	71033c0f 	tstvc	r3, pc, lsl #24
     85c:	0359322e 	cmpeq	r9, #-536870910	; 0xe0000002
     860:	76033c0a 	strvc	r3, [r3], -sl, lsl #24
     864:	0002022e 	andeq	r0, r2, lr, lsr #4
     868:	05000101 	streq	r0, [r0, #-257]	; 0x101
     86c:	00070002 	andeq	r0, r7, r2
     870:	01ca0308 	biceq	r0, sl, r8, lsl #6
     874:	3c0b0301 	stccc	3, cr0, [fp], {1}
     878:	78032630 	stmdavc	r3, {r4, r5, r9, sl, sp}
     87c:	30305a3c 	eorscc	r5, r0, ip, lsr sl
     880:	752d2f30 	strvc	r2, [sp, #-3888]!	; 0xf30
     884:	2c30484c 	ldccs	8, cr4, [r0], #-304	; 0xfffffed0
     888:	20120330 	andscs	r0, r2, r0, lsr r3
     88c:	032f2d21 	teqeq	pc, #2112	; 0x840
     890:	1e033c62 	cdpne	12, 0, cr3, cr3, cr2, {3}
     894:	20620320 	rsbcs	r0, r2, r0, lsr #6
     898:	03201e03 	teqeq	r0, #3, 28	; 0x30
     89c:	21033c62 	tstcs	r3, r2, ror #24
     8a0:	3c700320 	ldclcc	3, cr0, [r0], #-128	; 0xffffff80
     8a4:	7803352f 	stmdavc	r3, {r0, r1, r2, r3, r5, r8, sl, ip, sp}
     8a8:	59884b2e 	stmibpl	r8, {r1, r2, r3, r5, r8, r9, fp, lr}
     8ac:	01000902 	tsteq	r0, r2, lsl #18
     8b0:	02050001 	andeq	r0, r5, #1
     8b4:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
     8b8:	0101fe03 	tsteq	r1, r3, lsl #28
     8bc:	213d1f15 	teqcs	sp, r5, lsl pc
     8c0:	02022121 	andeq	r2, r2, #1073741832	; 0x40000008
     8c4:	00010100 	andeq	r0, r1, r0, lsl #2
     8c8:	07d40205 	ldrbeq	r0, [r4, r5, lsl #4]
     8cc:	95030800 	strls	r0, [r3, #-2048]	; 0x800
     8d0:	42210102 	eormi	r0, r1, #-2147483648	; 0x80000000
     8d4:	3022303e 	eorcc	r3, r2, lr, lsr r0
     8d8:	02022f30 	andeq	r2, r2, #48, 30	; 0xc0
     8dc:	00010100 	andeq	r0, r1, r0, lsl #2
     8e0:	07f80205 	ldrbeq	r0, [r8, r5, lsl #4]!
     8e4:	c3030800 	movwgt	r0, #14336	; 0x3800
     8e8:	03190102 	tsteq	r9, #-2147483648	; 0x80000000
     8ec:	04022e09 	streq	r2, [r2], #-3593	; 0xe09
     8f0:	00010100 	andeq	r0, r1, r0, lsl #2
     8f4:	08040205 	stmdaeq	r4, {r0, r2, r9}
     8f8:	dd030800 	stcle	8, cr0, [r3, #-0]
     8fc:	21160102 	tstcs	r6, r2, lsl #2
     900:	01000202 	tsteq	r0, r2, lsl #4
     904:	02050001 	andeq	r0, r5, #1
     908:	0800080c 	stmdaeq	r0, {r2, r3, fp}
     90c:	0102ee03 	tsteq	r2, r3, lsl #28
     910:	2e090319 	mcrcs	3, 0, r0, cr9, cr9, {0}
     914:	01000402 	tsteq	r0, r2, lsl #8
     918:	02050001 	andeq	r0, r5, #1
     91c:	08000818 	stmdaeq	r0, {r3, r4, fp}
     920:	01038803 	tsteq	r3, r3, lsl #16
     924:	02022116 	andeq	r2, r2, #-2147483643	; 0x80000005
     928:	00010100 	andeq	r0, r1, r0, lsl #2
     92c:	08200205 	stmdaeq	r0!, {r0, r2, r9}
     930:	9c030800 	stcls	8, cr0, [r3], {-0}
     934:	02170103 	andseq	r0, r7, #-1073741824	; 0xc0000000
     938:	01010002 	tsteq	r1, r2
     93c:	24020500 	strcs	r0, [r2], #-1280	; 0x500
     940:	03080008 	movweq	r0, #32776	; 0x8008
     944:	170103b1 			; <UNDEFINED> instruction: 0x170103b1
     948:	01000202 	tsteq	r0, r2, lsl #4
     94c:	02050001 	andeq	r0, r5, #1
     950:	08000828 	stmdaeq	r0, {r3, r5, fp}
     954:	0103c703 	tsteq	r3, r3, lsl #14
     958:	022a2618 	eoreq	r2, sl, #24, 12	; 0x1800000
     95c:	01010002 	tsteq	r1, r2
     960:	34020500 	strcc	r0, [r2], #-1280	; 0x500
     964:	03080008 	movweq	r0, #32776	; 0x8008
     968:	160103e0 	strne	r0, [r1], -r0, ror #7
     96c:	01000202 	tsteq	r0, r2, lsl #4
     970:	02050001 	andeq	r0, r5, #1
     974:	08000838 	stmdaeq	r0, {r3, r4, r5, fp}
     978:	0103f003 	tsteq	r3, r3
     97c:	00040216 	andeq	r0, r4, r6, lsl r2
     980:	05000101 	streq	r0, [r0, #-257]	; 0x101
     984:	00084002 	andeq	r4, r8, r2
     988:	04c30308 	strbeq	r0, [r3], #776	; 0x308
     98c:	3c090301 	stccc	3, cr0, [r9], {1}
     990:	032e7703 	teqeq	lr, #786432	; 0xc0000
     994:	67212009 	strvs	r2, [r1, -r9]!
     998:	21222a22 	teqcs	r2, r2, lsr #20
     99c:	00010221 	andeq	r0, r1, r1, lsr #4
     9a0:	060c0101 	streq	r0, [ip], -r1, lsl #2
     9a4:	00020000 	andeq	r0, r2, r0
     9a8:	00000188 	andeq	r0, r0, r8, lsl #3
     9ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     9b0:	0101000d 	tsteq	r1, sp
     9b4:	00000101 	andeq	r0, r0, r1, lsl #2
     9b8:	00000100 	andeq	r0, r0, r0, lsl #2
     9bc:	524f4301 	subpl	r4, pc, #67108864	; 0x4000000
     9c0:	5f584554 	svcpl	0x00584554
     9c4:	5f46344d 	svcpl	0x0046344d
     9c8:	334d5453 	movtcc	r5, #54355	; 0xd453
     9cc:	2f344632 	svccs	0x00344632
     9d0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     9d4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     9d8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     9dc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     9e0:	5f787834 	svcpl	0x00787834
     9e4:	50647453 	rsbpl	r7, r4, r3, asr r4
     9e8:	70697265 	rsbvc	r7, r9, r5, ror #4
     9ec:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     9f0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     9f4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     9f8:	73752f00 	cmnvc	r5, #0, 30
     9fc:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     a00:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     a04:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     a08:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     a0c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     a10:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     a14:	73752f00 	cmnvc	r5, #0, 30
     a18:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     a1c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     a20:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     a24:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     a28:	524f4300 	subpl	r4, pc, #0, 6
     a2c:	5f584554 	svcpl	0x00584554
     a30:	5f46344d 	svcpl	0x0046344d
     a34:	334d5453 	movtcc	r5, #54355	; 0xd453
     a38:	2f344632 	svccs	0x00344632
     a3c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     a40:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     a44:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     a48:	2f534953 	svccs	0x00534953
     a4c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     a50:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     a54:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     a58:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     a5c:	2f787834 	svccs	0x00787834
     a60:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     a64:	00656475 	rsbeq	r6, r5, r5, ror r4
     a68:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     a6c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 960 <_Min_Stack_Size+0x560>
     a70:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     a74:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     a78:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 968 <_Min_Stack_Size+0x568>
     a7c:	61726269 	cmnvs	r2, r9, ror #4
     a80:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     a84:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     a88:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     a8c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     a90:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     a94:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     a98:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     a9c:	2f726576 	svccs	0x00726576
     aa0:	00636e69 	rsbeq	r6, r3, r9, ror #28
     aa4:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     aa8:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 99c <_Min_Stack_Size+0x59c>
     aac:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     ab0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ab4:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 9a4 <_Min_Stack_Size+0x5a4>
     ab8:	61726269 	cmnvs	r2, r9, ror #4
     abc:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     ac0:	534d432f 	movtpl	r4, #54063	; 0xd32f
     ac4:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     ac8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     acc:	00006564 	andeq	r6, r0, r4, ror #10
     ad0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     ad4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     ad8:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     adc:	00632e63 	rsbeq	r2, r3, r3, ror #28
     ae0:	5f000001 	svcpl	0x00000001
     ae4:	61666564 	cmnvs	r6, r4, ror #10
     ae8:	5f746c75 	svcpl	0x00746c75
     aec:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     af0:	00682e73 	rsbeq	r2, r8, r3, ror lr
     af4:	73000002 	movwvc	r0, #2
     af8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     afc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     b00:	73000003 	movwvc	r0, #3
     b04:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     b08:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     b0c:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     b10:	74730000 	ldrbtvc	r0, [r3], #-0
     b14:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     b18:	5f787834 	svcpl	0x00787834
     b1c:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     b20:	00050068 	andeq	r0, r5, r8, rrx
     b24:	726f6300 	rsbvc	r6, pc, #0, 6
     b28:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     b2c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     b30:	00000006 	andeq	r0, r0, r6
     b34:	68020500 	stmdavs	r2, {r8, sl}
     b38:	03080008 	movweq	r0, #32776	; 0x8008
     b3c:	140101d5 	strne	r0, [r1], #-469	; 0x1d5
     b40:	223a1d4d 	eorscs	r1, sl, #4928	; 0x1340
     b44:	31262323 	teqcc	r6, r3, lsr #6
     b48:	2b207a03 	blcs	81f35c <_Min_Stack_Size+0x81ef5c>
     b4c:	032b344d 	teqeq	fp, #1291845632	; 0x4d000000
     b50:	23232e7a 	teqcs	r3, #1952	; 0x7a0
     b54:	1b523131 	blne	148d020 <_Min_Stack_Size+0x148cc20>
     b58:	01023023 	tsteq	r2, r3, lsr #32
     b5c:	00010100 	andeq	r0, r1, r0, lsl #2
     b60:	08bc0205 	ldmeq	ip!, {r0, r2, r9}
     b64:	88030800 	stmdahi	r3, {fp}
     b68:	69170102 	ldmdbvs	r7, {r1, r8}
     b6c:	01000202 	tsteq	r0, r2, lsl #4
     b70:	02050001 	andeq	r0, r5, #1
     b74:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
     b78:	0102a003 	tsteq	r2, r3
     b7c:	0e970321 	cdpeq	3, 9, cr0, cr7, cr1, {1}
     b80:	71e90320 	mvnvc	r0, r0, lsr #6
     b84:	0e97032e 	cdpeq	3, 9, cr0, cr7, cr14, {1}
     b88:	04020020 	streq	r0, [r2], #-32
     b8c:	002e0601 	eoreq	r0, lr, r1, lsl #12
     b90:	06010402 	streq	r0, [r1], -r2, lsl #8
     b94:	03200d03 	teqeq	r0, #3, 26	; 0xc0
     b98:	3d2e71e3 	stfccs	f7, [lr, #-908]!	; 0xfffffc74
     b9c:	4a0e8f03 	bmi	3a47b0 <_Min_Stack_Size+0x3a43b0>
     ba0:	5871fb03 	ldmdapl	r1!, {r0, r1, r8, r9, fp, ip, sp, lr, pc}^
     ba4:	2e74032f 	cdpcs	3, 7, cr0, cr4, cr15, {1}
     ba8:	0002023d 	andeq	r0, r2, sp, lsr r2
     bac:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bb0:	00090c02 	andeq	r0, r9, r2, lsl #24
     bb4:	02bf0308 	adcseq	r0, pc, #8, 6	; 0x20000000
     bb8:	315b1701 	cmpcc	fp, r1, lsl #14
     bbc:	00020231 	andeq	r0, r2, r1, lsr r2
     bc0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bc4:	00092402 	andeq	r2, r9, r2, lsl #8
     bc8:	02e30308 	rsceq	r0, r3, #8, 6	; 0x20000000
     bcc:	05021601 	streq	r1, [r2, #-1537]	; 0x601
     bd0:	00010100 	andeq	r0, r1, r0, lsl #2
     bd4:	09300205 	ldmdbeq	r0!, {r0, r2, r9}
     bd8:	fc030800 	stc2	8, cr0, [r3], {-0}
     bdc:	5e180102 	mufple	f0, f0, f2
     be0:	23207a03 	teqcs	r0, #12288	; 0x3000
     be4:	21464423 	cmpcs	r6, r3, lsr #8
     be8:	01000102 	tsteq	r0, r2, lsl #2
     bec:	02050001 	andeq	r0, r5, #1
     bf0:	08000954 	stmdaeq	r0, {r2, r4, r6, r8, fp}
     bf4:	0103a403 	tsteq	r3, r3, lsl #8
     bf8:	00060216 	andeq	r0, r6, r6, lsl r2
     bfc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c00:	00096002 	andeq	r6, r9, r2
     c04:	03cf0308 	biceq	r0, pc, #8, 6	; 0x20000000
     c08:	d8282001 	stmdale	r8!, {r0, sp}
     c0c:	01000302 	tsteq	r0, r2, lsl #6
     c10:	02050001 	andeq	r0, r5, #1
     c14:	08000988 	stmdaeq	r0, {r3, r7, r8, fp}
     c18:	0103e603 	tsteq	r3, r3, lsl #12
     c1c:	00050215 	andeq	r0, r5, r5, lsl r2
     c20:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c24:	00099402 	andeq	r9, r9, r2, lsl #8
     c28:	04a80308 	strteq	r0, [r8], #776	; 0x308
     c2c:	0c021801 	stceq	8, cr1, [r2], {1}
     c30:	00010100 	andeq	r0, r1, r0, lsl #2
     c34:	09ac0205 	stmibeq	ip!, {r0, r2, r9}
     c38:	b9030800 	stmdblt	r3, {fp}
     c3c:	02150104 	andseq	r0, r5, #4, 2
     c40:	01010005 	tsteq	r1, r5
     c44:	b8020500 	stmdalt	r2, {r8, sl}
     c48:	03080009 	movweq	r0, #32777	; 0x8009
     c4c:	170104d6 			; <UNDEFINED> instruction: 0x170104d6
     c50:	01000c02 	tsteq	r0, r2, lsl #24
     c54:	02050001 	andeq	r0, r5, #1
     c58:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
     c5c:	0104e803 	tsteq	r4, r3, lsl #16
     c60:	00050215 	andeq	r0, r5, r5, lsl r2
     c64:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c68:	0009dc02 	andeq	sp, r9, r2, lsl #24
     c6c:	04fa0308 	ldrbteq	r0, [sl], #776	; 0x308
     c70:	05021501 	streq	r1, [r2, #-1281]	; 0x501
     c74:	00010100 	andeq	r0, r1, r0, lsl #2
     c78:	09e80205 	stmibeq	r8!, {r0, r2, r9}^
     c7c:	93030800 	movwls	r0, #14336	; 0x3800
     c80:	5b190105 	blpl	64109c <_Min_Stack_Size+0x640c9c>
     c84:	02023131 	andeq	r3, r2, #1073741836	; 0x4000000c
     c88:	00010100 	andeq	r0, r1, r0, lsl #2
     c8c:	0a000205 	beq	14a8 <_Min_Stack_Size+0x10a8>
     c90:	b9030800 	stmdblt	r3, {fp}
     c94:	5b190105 	blpl	6410b0 <_Min_Stack_Size+0x640cb0>
     c98:	02023131 	andeq	r3, r2, #1073741836	; 0x4000000c
     c9c:	00010100 	andeq	r0, r1, r0, lsl #2
     ca0:	0a180205 	beq	6014bc <_Min_Stack_Size+0x6010bc>
     ca4:	df030800 	svcle	0x00030800
     ca8:	5b180106 	blpl	6010c8 <_Min_Stack_Size+0x600cc8>
     cac:	02022331 	andeq	r2, r2, #-1006632960	; 0xc4000000
     cb0:	00010100 	andeq	r0, r1, r0, lsl #2
     cb4:	0a2c0205 	beq	b014d0 <_Min_Stack_Size+0xb010d0>
     cb8:	fb030800 	blx	c2cc2 <_Min_Stack_Size+0xc28c2>
     cbc:	59130106 	ldmdbpl	r3, {r1, r2, r8}
     cc0:	01000302 	tsteq	r0, r2, lsl #6
     cc4:	02050001 	andeq	r0, r5, #1
     cc8:	08000a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp}
     ccc:	01079403 	tsteq	r7, r3, lsl #8
     cd0:	23315b18 	teqcs	r1, #24, 22	; 0x6000
     cd4:	01000202 	tsteq	r0, r2, lsl #4
     cd8:	02050001 	andeq	r0, r5, #1
     cdc:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
     ce0:	0107b403 	tsteq	r7, r3, lsl #8
     ce4:	23315b18 	teqcs	r1, #24, 22	; 0x6000
     ce8:	01000202 	tsteq	r0, r2, lsl #4
     cec:	02050001 	andeq	r0, r5, #1
     cf0:	08000a64 	stmdaeq	r0, {r2, r5, r6, r9, fp}
     cf4:	0107d303 	tsteq	r7, r3, lsl #6
     cf8:	31315b18 	teqcc	r1, r8, lsl fp
     cfc:	01000202 	tsteq	r0, r2, lsl #4
     d00:	02050001 	andeq	r0, r5, #1
     d04:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
     d08:	01088703 	tsteq	r8, r3, lsl #14
     d0c:	3e244616 	mcrcc	6, 1, r4, cr4, cr6, {0}
     d10:	5822034d 	stmdapl	r2!, {r0, r2, r3, r6, r8, r9}
     d14:	2d222c4c 	stccs	12, cr2, [r2, #-304]!	; 0xfffffed0
     d18:	2131222f 	teqcs	r1, pc, lsr #4
     d1c:	253f222f 	ldrcs	r2, [pc, #-559]!	; af5 <_Min_Stack_Size+0x6f5>
     d20:	2f222f2a 	svccs	0x00222f2a
     d24:	59204e03 	stmdbpl	r0!, {r0, r1, r9, sl, fp, lr}
     d28:	31222126 	teqcc	r2, r6, lsr #2
     d2c:	0333294f 	teqeq	r3, #1294336	; 0x13c000
     d30:	0a032e76 	beq	cc710 <_Min_Stack_Size+0xcc310>
     d34:	3147312e 	cmpcc	r7, lr, lsr #2
     d38:	3d213147 	stfccs	f3, [r1, #-284]!	; 0xfffffee4
     d3c:	01000102 	tsteq	r0, r2, lsl #2
     d40:	02050001 	andeq	r0, r5, #1
     d44:	08000b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp}
     d48:	01098403 	tsteq	r9, r3, lsl #8
     d4c:	03505a18 	cmpeq	r0, #24, 20	; 0x18000
     d50:	2b262e7a 	blcs	98c740 <_Min_Stack_Size+0x98c340>
     d54:	02242331 	eoreq	r2, r4, #-1006632960	; 0xc4000000
     d58:	0101000a 	tsteq	r1, sl
     d5c:	64020500 	strvs	r0, [r2], #-1280	; 0x500
     d60:	0308000b 	movweq	r0, #32779	; 0x800b
     d64:	160109a4 	strne	r0, [r1], -r4, lsr #19
     d68:	01000602 	tsteq	r0, r2, lsl #12
     d6c:	02050001 	andeq	r0, r5, #1
     d70:	08000b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp}
     d74:	0109b503 	tsteq	r9, r3, lsl #10
     d78:	00060215 	andeq	r0, r6, r5, lsl r2
     d7c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d80:	000b7c02 	andeq	r7, fp, r2, lsl #24
     d84:	09c60308 	stmibeq	r6, {r3, r8, r9}^
     d88:	06021601 	streq	r1, [r2], -r1, lsl #12
     d8c:	00010100 	andeq	r0, r1, r0, lsl #2
     d90:	0b880205 	bleq	fe2015ac <_estack+0xde1d15ac>
     d94:	db030800 	blle	c2d9c <_Min_Stack_Size+0xc299c>
     d98:	50180109 	andspl	r0, r8, r9, lsl #2
     d9c:	31207a03 	teqcc	r0, r3, lsl #20
     da0:	03022331 	movweq	r2, #9009	; 0x2331
     da4:	00010100 	andeq	r0, r1, r0, lsl #2
     da8:	0ba40205 	bleq	fe9015c4 <_estack+0xde8d15c4>
     dac:	fb030800 	blx	c2db6 <_Min_Stack_Size+0xc29b6>
     db0:	50180109 	andspl	r0, r8, r9, lsl #2
     db4:	31207a03 	teqcc	r0, r3, lsl #20
     db8:	03023131 	movweq	r3, #8497	; 0x2131
     dbc:	00010100 	andeq	r0, r1, r0, lsl #2
     dc0:	0bc00205 	bleq	ff0015dc <_estack+0xdefd15dc>
     dc4:	9f030800 	svcls	0x00030800
     dc8:	6918010a 	ldmdbvs	r8, {r1, r3, r8}
     dcc:	03022331 	movweq	r2, #9009	; 0x2331
     dd0:	00010100 	andeq	r0, r1, r0, lsl #2
     dd4:	0bd80205 	bleq	ff6015f0 <_estack+0xdf5d15f0>
     dd8:	c3030800 	movwgt	r0, #14336	; 0x3800
     ddc:	6918010a 	ldmdbvs	r8, {r1, r3, r8}
     de0:	03022331 	movweq	r2, #9009	; 0x2331
     de4:	00010100 	andeq	r0, r1, r0, lsl #2
     de8:	0bf00205 	bleq	ffc01604 <_estack+0xdfbd1604>
     dec:	e4030800 	str	r0, [r3], #-2048	; 0x800
     df0:	6918010a 	ldmdbvs	r8, {r1, r3, r8}
     df4:	03022331 	movweq	r2, #9009	; 0x2331
     df8:	00010100 	andeq	r0, r1, r0, lsl #2
     dfc:	0c080205 	sfmeq	f0, 4, [r8], {5}
     e00:	89030800 	stmdbhi	r3, {fp}
     e04:	0216010b 	andseq	r0, r6, #-1073741822	; 0xc0000002
     e08:	01010006 	tsteq	r1, r6
     e0c:	14020500 	strne	r0, [r2], #-1280	; 0x500
     e10:	0308000c 	movweq	r0, #32780	; 0x800c
     e14:	19010bb4 	stmdbne	r1, {r2, r4, r5, r7, r8, r9, fp}
     e18:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     e1c:	01010003 	tsteq	r1, r3
     e20:	30020500 	andcc	r0, r2, r0, lsl #10
     e24:	0308000c 	movweq	r0, #32780	; 0x800c
     e28:	19010bd4 	stmdbne	r1, {r2, r4, r6, r7, r8, r9, fp}
     e2c:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     e30:	01010003 	tsteq	r1, r3
     e34:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     e38:	0308000c 	movweq	r0, #32780	; 0x800c
     e3c:	19010bf0 	stmdbne	r1, {r4, r5, r6, r7, r8, r9, fp}
     e40:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     e44:	01010003 	tsteq	r1, r3
     e48:	68020500 	stmdavs	r2, {r8, sl}
     e4c:	0308000c 	movweq	r0, #32780	; 0x800c
     e50:	19010ca4 	stmdbne	r1, {r2, r5, r7, sl, fp}
     e54:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     e58:	01010003 	tsteq	r1, r3
     e5c:	84020500 	strhi	r0, [r2], #-1280	; 0x500
     e60:	0308000c 	movweq	r0, #32780	; 0x800c
     e64:	19010cd1 	stmdbne	r1, {r0, r4, r6, r7, sl, fp}
     e68:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     e6c:	01010003 	tsteq	r1, r3
     e70:	a0020500 	andge	r0, r2, r0, lsl #10
     e74:	0308000c 	movweq	r0, #32780	; 0x800c
     e78:	19010cfb 	stmdbne	r1, {r0, r1, r3, r4, r5, r6, r7, sl, fp}
     e7c:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     e80:	01010003 	tsteq	r1, r3
     e84:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
     e88:	0308000c 	movweq	r0, #32780	; 0x800c
     e8c:	19010d98 	stmdbne	r1, {r3, r4, r7, r8, sl, fp}
     e90:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     e94:	01010003 	tsteq	r1, r3
     e98:	d8020500 	stmdale	r2, {r8, sl}
     e9c:	0308000c 	movweq	r0, #32780	; 0x800c
     ea0:	19010db1 	stmdbne	r1, {r0, r4, r5, r7, r8, sl, fp}
     ea4:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     ea8:	01010003 	tsteq	r1, r3
     eac:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
     eb0:	0308000c 	movweq	r0, #32780	; 0x800c
     eb4:	18010de2 	stmdane	r1, {r1, r5, r6, r7, r8, sl, fp}
     eb8:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     ebc:	01010003 	tsteq	r1, r3
     ec0:	10020500 	andne	r0, r2, r0, lsl #10
     ec4:	0308000d 	movweq	r0, #32781	; 0x800d
     ec8:	18010e8b 	stmdane	r1, {r0, r1, r3, r7, r9, sl, fp}
     ecc:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     ed0:	01010003 	tsteq	r1, r3
     ed4:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
     ed8:	0308000d 	movweq	r0, #32781	; 0x800d
     edc:	18010ebc 	stmdane	r1, {r2, r3, r4, r5, r7, r9, sl, fp}
     ee0:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     ee4:	01010003 	tsteq	r1, r3
     ee8:	48020500 	stmdami	r2, {r8, sl}
     eec:	0308000d 	movweq	r0, #32781	; 0x800d
     ef0:	18010edc 	stmdane	r1, {r2, r3, r4, r6, r7, r9, sl, fp}
     ef4:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     ef8:	01010003 	tsteq	r1, r3
     efc:	64020500 	strvs	r0, [r2], #-1280	; 0x500
     f00:	0308000d 	movweq	r0, #32781	; 0x800d
     f04:	18010ef8 	stmdane	r1, {r3, r4, r5, r6, r7, r9, sl, fp}
     f08:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     f0c:	01010003 	tsteq	r1, r3
     f10:	80020500 	andhi	r0, r2, r0, lsl #10
     f14:	0308000d 	movweq	r0, #32781	; 0x800d
     f18:	18010fac 	stmdane	r1, {r2, r3, r5, r7, r8, r9, sl, fp}
     f1c:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     f20:	01010003 	tsteq	r1, r3
     f24:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
     f28:	0308000d 	movweq	r0, #32781	; 0x800d
     f2c:	18010fd9 	stmdane	r1, {r0, r3, r4, r6, r7, r8, r9, sl, fp}
     f30:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
     f34:	01010003 	tsteq	r1, r3
     f38:	b8020500 	stmdalt	r2, {r8, sl}
     f3c:	0308000d 	movweq	r0, #32781	; 0x800d
     f40:	19011087 	stmdbne	r1, {r0, r1, r2, r7, ip}
     f44:	02452855 	subeq	r2, r5, #5570560	; 0x550000
     f48:	01010003 	tsteq	r1, r3
     f4c:	d4020500 	strle	r0, [r2], #-1280	; 0x500
     f50:	0308000d 	movweq	r0, #32781	; 0x800d
     f54:	030110ac 	movweq	r1, #4268	; 0x10ac
     f58:	32210109 	eorcc	r0, r1, #1073741826	; 0x40000002
     f5c:	4a090322 	bmi	241bec <_Min_Stack_Size+0x2417ec>
     f60:	322e7703 	eorcc	r7, lr, #786432	; 0xc0000
     f64:	2e0a0325 	cdpcs	3, 0, cr0, cr10, cr5, {1}
     f68:	033c6903 	teqeq	ip, #49152	; 0xc000
     f6c:	73034a0d 	movwvc	r4, #14861	; 0x3a0d
     f70:	200d032e 	andcs	r0, sp, lr, lsr #6
     f74:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
     f78:	01010003 	tsteq	r1, r3
     f7c:	10020500 	andne	r0, r2, r0, lsl #10
     f80:	0308000e 	movweq	r0, #32782	; 0x800e
     f84:	140110d9 	strne	r1, [r1], #-217	; 0xd9
     f88:	01000902 	tsteq	r0, r2, lsl #18
     f8c:	02050001 	andeq	r0, r5, #1
     f90:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
     f94:	0110ed03 	tsteq	r0, r3, lsl #26
     f98:	660a0319 			; <UNDEFINED> instruction: 0x660a0319
     f9c:	01000402 	tsteq	r0, r2, lsl #8
     fa0:	02050001 	andeq	r0, r5, #1
     fa4:	08000e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp}
     fa8:	01118f03 	tsteq	r1, r3, lsl #30
     fac:	00060218 	andeq	r0, r6, r8, lsl r2
     fb0:	04bd0101 	ldrteq	r0, [sp], #257	; 0x101
     fb4:	00020000 	andeq	r0, r2, r0
     fb8:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     fbc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     fc0:	0101000d 	tsteq	r1, sp
     fc4:	00000101 	andeq	r0, r0, r1, lsl #2
     fc8:	00000100 	andeq	r0, r0, r0, lsl #2
     fcc:	524f4301 	subpl	r4, pc, #67108864	; 0x4000000
     fd0:	5f584554 	svcpl	0x00584554
     fd4:	5f46344d 	svcpl	0x0046344d
     fd8:	334d5453 	movtcc	r5, #54355	; 0xd453
     fdc:	2f344632 	svccs	0x00344632
     fe0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     fe4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     fe8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     fec:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     ff0:	5f787834 	svcpl	0x00787834
     ff4:	50647453 	rsbpl	r7, r4, r3, asr r4
     ff8:	70697265 	rsbvc	r7, r9, r5, ror #4
     ffc:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1000:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1004:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1008:	73752f00 	cmnvc	r5, #0, 30
    100c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1010:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1014:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1018:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    101c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    1020:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1024:	73752f00 	cmnvc	r5, #0, 30
    1028:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    102c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1030:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1034:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1038:	524f4300 	subpl	r4, pc, #0, 6
    103c:	5f584554 	svcpl	0x00584554
    1040:	5f46344d 	svcpl	0x0046344d
    1044:	334d5453 	movtcc	r5, #54355	; 0xd453
    1048:	2f344632 	svccs	0x00344632
    104c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1050:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1054:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1058:	2f534953 	svccs	0x00534953
    105c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    1060:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    1064:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    1068:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    106c:	2f787834 	svccs	0x00787834
    1070:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1074:	00656475 	rsbeq	r6, r5, r5, ror r4
    1078:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    107c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; f70 <_Min_Stack_Size+0xb70>
    1080:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    1084:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1088:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; f78 <_Min_Stack_Size+0xb78>
    108c:	61726269 	cmnvs	r2, r9, ror #4
    1090:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1094:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1098:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    109c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    10a0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    10a4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10a8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    10ac:	2f726576 	svccs	0x00726576
    10b0:	00636e69 	rsbeq	r6, r3, r9, ror #28
    10b4:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    10b8:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; fac <_Min_Stack_Size+0xbac>
    10bc:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    10c0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    10c4:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; fb4 <_Min_Stack_Size+0xbb4>
    10c8:	61726269 	cmnvs	r2, r9, ror #4
    10cc:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    10d0:	534d432f 	movtpl	r4, #54063	; 0xd32f
    10d4:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    10d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    10dc:	00006564 	andeq	r6, r0, r4, ror #10
    10e0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    10e4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    10e8:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    10ec:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    10f0:	00010063 	andeq	r0, r1, r3, rrx
    10f4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    10f8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    10fc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1100:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1104:	00020068 	andeq	r0, r2, r8, rrx
    1108:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    110c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1110:	00030068 	andeq	r0, r3, r8, rrx
    1114:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1118:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    111c:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    1120:	00000400 	andeq	r0, r0, r0, lsl #8
    1124:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1128:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    112c:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    1130:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1134:	73000005 	movwvc	r0, #5
    1138:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    113c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1140:	6173755f 	cmnvs	r3, pc, asr r5
    1144:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    1148:	00000500 	andeq	r0, r0, r0, lsl #10
    114c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    1150:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    1154:	0600682e 	streq	r6, [r0], -lr, lsr #16
    1158:	00000000 	andeq	r0, r0, r0
    115c:	0e440205 	cdpeq	2, 4, cr0, cr4, cr5, {0}
    1160:	bb030800 	bllt	c3168 <_Min_Stack_Size+0xc2d68>
    1164:	6b240101 	blvs	901570 <_Min_Stack_Size+0x901170>
    1168:	6b6b6b6b 	blvs	1adbf1c <_Min_Stack_Size+0x1adbb1c>
    116c:	59766d6b 	ldmdbpl	r6!, {r0, r1, r3, r5, r6, r8, sl, fp, sp, lr}^
    1170:	5a032b3f 	bpl	cbe74 <_Min_Stack_Size+0xcba74>
    1174:	28034b2e 	stmdacs	r3, {r1, r2, r3, r5, r8, r9, fp, lr}
    1178:	2e58032e 	cdpcs	3, 5, cr0, cr8, cr14, {1}
    117c:	23035932 	movwcs	r5, #14642	; 0x3932
    1180:	2e5d033c 	mrccs	3, 2, r0, cr13, cr12, {1}
    1184:	1e035932 	mcrne	9, 0, r5, cr3, cr2, {1}
    1188:	2e62033c 	mcrcs	3, 3, r0, cr2, cr12, {1}
    118c:	19035932 	stmdbne	r3, {r1, r4, r5, r8, fp, ip, lr}
    1190:	2e67033c 	mcrcs	3, 3, r0, cr7, cr12, {1}
    1194:	14035932 	strne	r5, [r3], #-2354	; 0x932
    1198:	2e6c033c 	mcrcs	3, 3, r0, cr12, cr12, {1}
    119c:	0f034b32 	svceq	0x00034b32
    11a0:	2e71032e 	cdpcs	3, 7, cr0, cr1, cr14, {1}
    11a4:	0a035932 	beq	d7674 <_Min_Stack_Size+0xd7274>
    11a8:	2e76033c 	mrccs	3, 3, r0, cr6, cr12, {1}
    11ac:	01000202 	tsteq	r0, r2, lsl #4
    11b0:	02050001 	andeq	r0, r5, #1
    11b4:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
    11b8:	0101f603 	tsteq	r1, r3, lsl #12
    11bc:	27011603 	strcs	r1, [r1, -r3, lsl #12]
    11c0:	3c67031c 	stclcc	3, cr0, [r7], #-112	; 0xffffff90
    11c4:	03201903 	teqeq	r0, #49152	; 0xc000
    11c8:	20032067 	andcs	r2, r3, r7, rrx
    11cc:	200c0320 	andcs	r0, ip, r0, lsr #6
    11d0:	033c5403 	teqeq	ip, #50331648	; 0x3000000
    11d4:	6603203a 			; <UNDEFINED> instruction: 0x6603203a
    11d8:	34232320 	strtcc	r2, [r3], #-800	; 0x320
    11dc:	342e7a03 	strtcc	r7, [lr], #-2563	; 0xa03
    11e0:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    11e4:	03207a03 	teqeq	r0, #12288	; 0x3000
    11e8:	2331200a 	teqcs	r1, #10
    11ec:	034a4a03 	movteq	r4, #43523	; 0xaa03
    11f0:	0332203d 	teqeq	r2, #61	; 0x3d
    11f4:	1c1c3c0c 	ldcne	12, cr3, [ip], {12}
    11f8:	ac0a031e 	stcge	3, cr0, [sl], {30}
    11fc:	0323321c 	teqeq	r3, #28, 4	; 0xc0000001
    1200:	7303200d 	movwvc	r2, #12301	; 0x300d
    1204:	6c5a4f20 	mrrcvs	15, 2, r4, sl, cr0
    1208:	1d261d1d 	stcne	13, cr1, [r6, #-116]!	; 0xffffff8c
    120c:	241c3233 	ldrcs	r3, [ip], #-563	; 0x233
    1210:	322a401c 	eorcc	r4, sl, #28
    1214:	032e7703 	teqeq	lr, #786432	; 0xc0000
    1218:	2f242009 	svccs	0x00242009
    121c:	01000202 	tsteq	r0, r2, lsl #4
    1220:	02050001 	andeq	r0, r5, #1
    1224:	08001028 	stmdaeq	r0, {r3, r5, ip}
    1228:	0102e703 	tsteq	r2, r3, lsl #14
    122c:	1c321f15 	ldcne	15, cr1, [r2], #-84	; 0xffffffac
    1230:	21211d24 	teqcs	r1, r4, lsr #26
    1234:	00020222 	andeq	r0, r2, r2, lsr #4
    1238:	05000101 	streq	r0, [r0, #-257]	; 0x101
    123c:	00104002 	andseq	r4, r0, r2
    1240:	02fb0308 	rscseq	r0, fp, #8, 6	; 0x20000000
    1244:	20130301 	andscs	r0, r3, r1, lsl #6
    1248:	033c7703 	teqeq	ip, #786432	; 0xc0000
    124c:	79032009 	stmdbvc	r3, {r0, r3, sp}
    1250:	7903353c 	stmdbvc	r3, {r2, r3, r4, r5, r8, sl, ip, sp}
    1254:	79032720 	stmdbvc	r3, {r5, r8, r9, sl, sp}
    1258:	20090320 	andcs	r0, r9, r0, lsr #6
    125c:	0002022f 	andeq	r0, r2, pc, lsr #4
    1260:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1264:	00106402 	andseq	r6, r0, r2, lsl #8
    1268:	039a0308 	orrseq	r0, sl, #8, 6	; 0x20000000
    126c:	212f1401 	teqcs	pc, r1, lsl #8
    1270:	00020221 	andeq	r0, r2, r1, lsr #4
    1274:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1278:	00107002 	andseq	r7, r0, r2
    127c:	03ab0308 			; <UNDEFINED> instruction: 0x03ab0308
    1280:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    1284:	00050261 	andeq	r0, r5, r1, ror #4
    1288:	05000101 	streq	r0, [r0, #-257]	; 0x101
    128c:	00108c02 	andseq	r8, r0, r2, lsl #24
    1290:	03c50308 	biceq	r0, r5, #8, 6	; 0x20000000
    1294:	024c1701 	subeq	r1, ip, #262144	; 0x40000
    1298:	01010005 	tsteq	r1, r5
    129c:	a0020500 	andge	r0, r2, r0, lsl #10
    12a0:	03080010 	movweq	r0, #32784	; 0x8010
    12a4:	1a0103da 	bne	42214 <_Min_Stack_Size+0x41e14>
    12a8:	0245281d 	subeq	r2, r5, #1900544	; 0x1d0000
    12ac:	01010007 	tsteq	r1, r7
    12b0:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    12b4:	03080010 	movweq	r0, #32784	; 0x8010
    12b8:	1a0103f4 	bne	42290 <_Min_Stack_Size+0x41e90>
    12bc:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    12c0:	01010005 	tsteq	r1, r5
    12c4:	d8020500 	stmdale	r2, {r8, sl}
    12c8:	03080010 	movweq	r0, #32784	; 0x8010
    12cc:	180104ad 	stmdane	r1, {r0, r2, r3, r5, r7, sl}
    12d0:	01000402 	tsteq	r0, r2, lsl #8
    12d4:	02050001 	andeq	r0, r5, #1
    12d8:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
    12dc:	0104bd03 	tsteq	r4, r3, lsl #26
    12e0:	03022117 	movweq	r2, #8471	; 0x2117
    12e4:	00010100 	andeq	r0, r1, r0, lsl #2
    12e8:	10e80205 	rscne	r0, r8, r5, lsl #4
    12ec:	f1030800 			; <UNDEFINED> instruction: 0xf1030800
    12f0:	68180104 	ldmdavs	r8, {r2, r8}
    12f4:	01000502 	tsteq	r0, r2, lsl #10
    12f8:	02050001 	andeq	r0, r5, #1
    12fc:	08001100 	stmdaeq	r0, {r8, ip}
    1300:	01058503 	tsteq	r5, r3, lsl #10
    1304:	61281d1a 	teqvs	r8, sl, lsl sp
    1308:	01000502 	tsteq	r0, r2, lsl #10
    130c:	02050001 	andeq	r0, r5, #1
    1310:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
    1314:	0105a003 	tsteq	r5, r3
    1318:	05026717 	streq	r6, [r2, #-1815]	; 0x717
    131c:	00010100 	andeq	r0, r1, r0, lsl #2
    1320:	11340205 	teqne	r4, r5, lsl #4
    1324:	e5030800 	str	r0, [r3, #-2048]	; 0x800
    1328:	67170105 	ldrvs	r0, [r7, -r5, lsl #2]
    132c:	01000502 	tsteq	r0, r2, lsl #10
    1330:	02050001 	andeq	r0, r5, #1
    1334:	0800114c 	stmdaeq	r0, {r2, r3, r6, r8, ip}
    1338:	0105f703 	tsteq	r5, r3, lsl #14
    133c:	61281d1a 	teqvs	r8, sl, lsl sp
    1340:	01000502 	tsteq	r0, r2, lsl #10
    1344:	02050001 	andeq	r0, r5, #1
    1348:	08001168 	stmdaeq	r0, {r3, r5, r6, r8, ip}
    134c:	01068f03 	tsteq	r6, r3, lsl #30
    1350:	00060217 	andeq	r0, r6, r7, lsl r2
    1354:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1358:	00117402 	andseq	r7, r1, r2, lsl #8
    135c:	06c40308 	strbeq	r0, [r4], r8, lsl #6
    1360:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    1364:	00050261 	andeq	r0, r5, r1, ror #4
    1368:	05000101 	streq	r0, [r0, #-257]	; 0x101
    136c:	00119002 	andseq	r9, r1, r2
    1370:	07980308 	ldreq	r0, [r8, r8, lsl #6]
    1374:	023e1701 	eorseq	r1, lr, #262144	; 0x40000
    1378:	01010006 	tsteq	r1, r6
    137c:	a4020500 	strge	r0, [r2], #-1280	; 0x500
    1380:	03080011 	movweq	r0, #32785	; 0x8011
    1384:	190107ab 	stmdbne	r1, {r0, r1, r3, r5, r7, r8, r9, sl}
    1388:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    138c:	01010005 	tsteq	r1, r5
    1390:	c0020500 	andgt	r0, r2, r0, lsl #10
    1394:	03080011 	movweq	r0, #32785	; 0x8011
    1398:	190107c4 	stmdbne	r1, {r2, r6, r7, r8, r9, sl}
    139c:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    13a0:	01010005 	tsteq	r1, r5
    13a4:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    13a8:	03080011 	movweq	r0, #32785	; 0x8011
    13ac:	1701088b 	strne	r0, [r1, -fp, lsl #17]
    13b0:	00050267 	andeq	r0, r5, r7, ror #4
    13b4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13b8:	0011f402 	andseq	pc, r1, r2, lsl #8
    13bc:	089d0308 	ldmeq	sp, {r3, r8, r9}
    13c0:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    13c4:	00050261 	andeq	r0, r5, r1, ror #4
    13c8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13cc:	00121002 	andseq	r1, r2, r2
    13d0:	08cb0308 	stmiaeq	fp, {r3, r8, r9}^
    13d4:	010a0301 	tsteq	sl, r1, lsl #6
    13d8:	200a032a 	andcs	r0, sl, sl, lsr #6
    13dc:	024a7a03 	subeq	r7, sl, #12288	; 0x3000
    13e0:	01010003 	tsteq	r1, r3
    13e4:	24020500 	strcs	r0, [r2], #-1280	; 0x500
    13e8:	03080012 	movweq	r0, #32786	; 0x8012
    13ec:	030109cf 	movweq	r0, #6607	; 0x19cf
    13f0:	6b030115 	blvs	c184c <_Min_Stack_Size+0xc144c>
    13f4:	2011032e 	andscs	r0, r1, lr, lsr #6
    13f8:	321e2232 	andscc	r2, lr, #536870915	; 0x20000003
    13fc:	3222242c 	eorcc	r2, r2, #44, 8	; 0x2c000000
    1400:	3e261e24 	cdpcc	14, 2, cr1, cr6, cr4, {1}
    1404:	343c7a03 	ldrtcc	r7, [ip], #-2563	; 0xa03
    1408:	01000302 	tsteq	r0, r2, lsl #6
    140c:	02050001 	andeq	r0, r5, #1
    1410:	08001260 	stmdaeq	r0, {r5, r6, r9, ip}
    1414:	010a8f03 	tsteq	sl, r3, lsl #30
    1418:	03010c03 	movweq	r0, #7171	; 0x1c03
    141c:	04022e09 	streq	r2, [r2], #-3593	; 0xe09
    1420:	00010100 	andeq	r0, r1, r0, lsl #2
    1424:	126c0205 	rsbne	r0, ip, #1342177280	; 0x50000000
    1428:	c0030800 	andgt	r0, r3, r0, lsl #16
    142c:	0b03010a 	bleq	c185c <_Min_Stack_Size+0xc145c>
    1430:	00040201 	andeq	r0, r4, r1, lsl #4
    1434:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1438:	00127402 	andseq	r7, r2, r2, lsl #8
    143c:	0ae20308 	beq	ff882064 <_estack+0xdf852064>
    1440:	010e0301 	tsteq	lr, r1, lsl #6
    1444:	032e7203 	teqeq	lr, #805306368	; 0x30000000
    1448:	1e3e2011 	mrcne	0, 1, r2, cr14, cr1, {0}
    144c:	32222430 	eorcc	r2, r2, #48, 8	; 0x30000000
    1450:	214b1f41 	cmpcs	fp, r1, asr #30
    1454:	034a0a03 	movteq	r0, #43523	; 0xaa03
    1458:	04027468 	streq	r7, [r2], #-1128	; 0x468
    145c:	00010100 	andeq	r0, r1, r0, lsl #2
    1460:	12c00205 	sbcne	r0, r0, #1342177280	; 0x50000000
    1464:	ac030800 	stcge	8, cr0, [r3], {-0}
    1468:	0d03010b 	stfeqs	f0, [r3, #-44]	; 0xffffffd4
    146c:	04024b01 	streq	r4, [r2], #-2817	; 0xb01
    1470:	19010100 	stmdbne	r1, {r8}
    1474:	02000002 	andeq	r0, r0, #2
    1478:	00018b00 	andeq	r8, r1, r0, lsl #22
    147c:	fb010200 	blx	41c86 <_Min_Stack_Size+0x41886>
    1480:	01000d0e 	tsteq	r0, lr, lsl #26
    1484:	00010101 	andeq	r0, r1, r1, lsl #2
    1488:	00010000 	andeq	r0, r1, r0
    148c:	4f430100 	svcmi	0x00430100
    1490:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1494:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1498:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    149c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    14a0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    14a4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    14a8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    14ac:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    14b0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    14b4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    14b8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    14bc:	445f6870 	ldrbmi	r6, [pc], #-2160	; 14c4 <_Min_Stack_Size+0x10c4>
    14c0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    14c4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    14c8:	752f0063 	strvc	r0, [pc, #-99]!	; 146d <_Min_Stack_Size+0x106d>
    14cc:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    14d0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    14d4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    14d8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    14dc:	616d2f62 	cmnvs	sp, r2, ror #30
    14e0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    14e4:	752f0065 	strvc	r0, [pc, #-101]!	; 1487 <_Min_Stack_Size+0x1087>
    14e8:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    14ec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    14f0:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    14f4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    14f8:	4f430062 	svcmi	0x00430062
    14fc:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1500:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1504:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1508:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    150c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1510:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1514:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    1518:	5349534d 	movtpl	r5, #37709	; 0x934d
    151c:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    1520:	2f656369 	svccs	0x00656369
    1524:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    1528:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    152c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1530:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    1534:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1538:	524f4300 	subpl	r4, pc, #0, 6
    153c:	5f584554 	svcpl	0x00584554
    1540:	5f46344d 	svcpl	0x0046344d
    1544:	334d5453 	movtcc	r5, #54355	; 0xd453
    1548:	2f344632 	svccs	0x00344632
    154c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1550:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1554:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1558:	2f534953 	svccs	0x00534953
    155c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1560:	00656475 	rsbeq	r6, r5, r5, ror r4
    1564:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    1568:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 145c <_Min_Stack_Size+0x105c>
    156c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    1570:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1574:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 1464 <_Min_Stack_Size+0x1064>
    1578:	61726269 	cmnvs	r2, r9, ror #4
    157c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1580:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1584:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1588:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    158c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    1590:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1594:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1598:	2f726576 	svccs	0x00726576
    159c:	00636e69 	rsbeq	r6, r3, r9, ror #28
    15a0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    15a4:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    15a8:	735f7878 	cmpvc	pc, #120, 16	; 0x780000
    15ac:	66637379 			; <UNDEFINED> instruction: 0x66637379
    15b0:	00632e67 	rsbeq	r2, r3, r7, ror #28
    15b4:	5f000001 	svcpl	0x00000001
    15b8:	61666564 	cmnvs	r6, r4, ror #10
    15bc:	5f746c75 	svcpl	0x00746c75
    15c0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    15c4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    15c8:	73000002 	movwvc	r0, #2
    15cc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    15d0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    15d4:	73000003 	movwvc	r0, #3
    15d8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    15dc:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    15e0:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    15e4:	6f630000 	svcvs	0x00630000
    15e8:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    15ec:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    15f0:	00000500 	andeq	r0, r0, r0, lsl #10
    15f4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    15f8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    15fc:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    1600:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1604:	00000006 	andeq	r0, r0, r6
    1608:	d0020500 	andle	r0, r2, r0, lsl #10
    160c:	03080012 	movweq	r0, #32786	; 0x8012
    1610:	210100e4 	smlattcs	r1, r4, r0, r0
    1614:	022d3d59 	eoreq	r3, sp, #5696	; 0x1640
    1618:	01010002 	tsteq	r1, r2
    161c:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    1620:	03080012 	movweq	r0, #32786	; 0x8012
    1624:	160100f6 			; <UNDEFINED> instruction: 0x160100f6
    1628:	01000602 	tsteq	r0, r2, lsl #12
    162c:	02050001 	andeq	r0, r5, #1
    1630:	080012f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip}
    1634:	01018b03 	tsteq	r1, r3, lsl #22
    1638:	00050216 	andeq	r0, r5, r6, lsl r2
    163c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1640:	00130402 	andseq	r0, r3, r2, lsl #8
    1644:	01a20308 			; <UNDEFINED> instruction: 0x01a20308
    1648:	79036d01 	stmdbvc	r3, {r0, r8, sl, fp, sp, lr}
    164c:	1f21272e 	svcne	0x0021272e
    1650:	2d213d2f 	stccs	13, cr3, [r1, #-188]!	; 0xffffff44
    1654:	0001023d 	andeq	r0, r1, sp, lsr r2
    1658:	05000101 	streq	r0, [r0, #-257]	; 0x101
    165c:	00133402 	andseq	r3, r3, r2, lsl #8
    1660:	01b70308 			; <UNDEFINED> instruction: 0x01b70308
    1664:	05021501 	streq	r1, [r2, #-1281]	; 0x501
    1668:	00010100 	andeq	r0, r1, r0, lsl #2
    166c:	13400205 	movtne	r0, #517	; 0x205
    1670:	c8030800 	stmdagt	r3, {fp}
    1674:	02160101 	andseq	r0, r6, #1073741824	; 0x40000000
    1678:	01010006 	tsteq	r1, r6
    167c:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    1680:	03080013 	movweq	r0, #32787	; 0x8013
    1684:	150101d5 	strne	r0, [r1, #-469]	; 0x1d5
    1688:	02580903 	subseq	r0, r8, #49152	; 0xc000
    168c:	01010003 	tsteq	r1, r3
    1690:	0000050e 	andeq	r0, r0, lr, lsl #10
    1694:	019b0002 	orrseq	r0, fp, r2
    1698:	01020000 	mrseq	r0, (UNDEF: 2)
    169c:	000d0efb 	strdeq	r0, [sp], -fp
    16a0:	01010101 	tsteq	r1, r1, lsl #2
    16a4:	01000000 	mrseq	r0, (UNDEF: 0)
    16a8:	43010000 	movwmi	r0, #4096	; 0x1000
    16ac:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    16b0:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    16b4:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    16b8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    16bc:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    16c0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    16c4:	2f736569 	svccs	0x00736569
    16c8:	334d5453 	movtcc	r5, #54355	; 0xd453
    16cc:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    16d0:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    16d4:	72655064 	rsbvc	r5, r5, #100	; 0x64
    16d8:	5f687069 	svcpl	0x00687069
    16dc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    16e0:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    16e4:	2f006372 	svccs	0x00006372
    16e8:	2f727375 	svccs	0x00727375
    16ec:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    16f0:	2f656475 	svccs	0x00656475
    16f4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    16f8:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 155c <_Min_Stack_Size+0x115c>
    16fc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1700:	2f00656e 	svccs	0x0000656e
    1704:	2f727375 	svccs	0x00727375
    1708:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    170c:	2f656475 	svccs	0x00656475
    1710:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1714:	43006269 	movwmi	r6, #617	; 0x269
    1718:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    171c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    1720:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    1724:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1728:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    172c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1730:	2f736569 	svccs	0x00736569
    1734:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    1738:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    173c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    1740:	2f54532f 	svccs	0x0054532f
    1744:	334d5453 	movtcc	r5, #54355	; 0xd453
    1748:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    174c:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    1750:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1754:	4f430065 	svcmi	0x00430065
    1758:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    175c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1760:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1764:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1768:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    176c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1770:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    1774:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1778:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    177c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    1780:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1784:	445f6870 	ldrbmi	r6, [pc], #-2160	; 178c <_Min_Stack_Size+0x138c>
    1788:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    178c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1790:	4f430063 	svcmi	0x00430063
    1794:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1798:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    179c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    17a0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    17a4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    17a8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    17ac:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    17b0:	5349534d 	movtpl	r5, #37709	; 0x934d
    17b4:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    17b8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    17bc:	74730000 	ldrbtvc	r0, [r3], #-0
    17c0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    17c4:	5f787834 	svcpl	0x00787834
    17c8:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    17cc:	00010063 	andeq	r0, r1, r3, rrx
    17d0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    17d4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    17d8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    17dc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    17e0:	00020068 	andeq	r0, r2, r8, rrx
    17e4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    17e8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    17ec:	00030068 	andeq	r0, r3, r8, rrx
    17f0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    17f4:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    17f8:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    17fc:	00000400 	andeq	r0, r0, r0, lsl #8
    1800:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1804:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1808:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    180c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1810:	73000005 	movwvc	r0, #5
    1814:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1818:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    181c:	6332695f 	teqvs	r2, #1556480	; 0x17c000
    1820:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1824:	6f630000 	svcvs	0x00630000
    1828:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    182c:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    1830:	00000600 	andeq	r0, r0, r0, lsl #12
    1834:	02050000 	andeq	r0, r5, #0
    1838:	0800135c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, ip}
    183c:	01018903 	tsteq	r1, r3, lsl #18
    1840:	09036d24 	stmdbeq	r3, {r2, r5, r8, sl, fp, sp, lr}
    1844:	3f5a7766 	svccc	0x005a7766
    1848:	2e6e032b 	cdpcs	3, 6, cr0, cr14, cr11, {1}
    184c:	3c13035a 	ldccc	3, cr0, [r3], {90}	; 0x5a
    1850:	332e6d03 	teqcc	lr, #3, 26	; 0xc0
    1854:	3c0c035a 	stccc	3, cr0, [ip], {90}	; 0x5a
    1858:	022e7403 	eoreq	r7, lr, #50331648	; 0x3000000
    185c:	01010002 	tsteq	r1, r2
    1860:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    1864:	03080013 	movweq	r0, #32787	; 0x8013
    1868:	030101b4 	movweq	r0, #4532	; 0x11b4
    186c:	6c033c14 	stcvs	12, cr3, [r3], {20}
    1870:	20100320 	andscs	r0, r0, r0, lsr #6
    1874:	032c3124 	teqeq	ip, #36, 2
    1878:	7303200f 	movwvc	r2, #12303	; 0x300f
    187c:	1b334520 	blne	cd2d04 <_Min_Stack_Size+0xcd2904>
    1880:	24302f33 	ldrtcs	r2, [r0], #-3891	; 0xf33
    1884:	2e7a0326 	cdpcs	3, 7, cr0, cr10, cr6, {1}
    1888:	2e7a0342 	cdpcs	3, 7, cr0, cr10, cr2, {2}
    188c:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    1890:	0a032326 	beq	ca530 <_Min_Stack_Size+0xca130>
    1894:	0341294a 	movteq	r2, #6474	; 0x194a
    1898:	03222e21 	teqeq	r2, #528	; 0x210
    189c:	0334200a 	teqeq	r4, #10
    18a0:	224e2e70 	subcs	r2, lr, #112, 28	; 0x700
    18a4:	26241c5c 			; <UNDEFINED> instruction: 0x26241c5c
    18a8:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    18ac:	0321241c 	teqeq	r1, #28, 8	; 0x1c000000
    18b0:	6f522e53 	svcvs	0x00522e53
    18b4:	32271b5d 	eorcc	r1, r7, #95232	; 0x17400
    18b8:	30b8333f 	adcscc	r3, r8, pc, lsr r3
    18bc:	01000202 	tsteq	r0, r2, lsl #4
    18c0:	02050001 	andeq	r0, r5, #1
    18c4:	080014b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, ip}
    18c8:	0102a103 	tsteq	r2, r3, lsl #2
    18cc:	2a271b17 	bcs	9c8530 <_Min_Stack_Size+0x9c8130>
    18d0:	032e0a03 	teqeq	lr, #12288	; 0x3000
    18d4:	26242e76 			; <UNDEFINED> instruction: 0x26242e76
    18d8:	24207803 	strtcs	r7, [r0], #-2051	; 0x803
    18dc:	03022322 	movweq	r2, #8994	; 0x2322
    18e0:	00010100 	andeq	r0, r1, r0, lsl #2
    18e4:	14d80205 	ldrbne	r0, [r8], #517	; 0x205
    18e8:	b9030800 	stmdblt	r3, {fp}
    18ec:	1d190102 	ldfnes	f0, [r9, #-8]
    18f0:	05026128 	streq	r6, [r2, #-296]	; 0x128
    18f4:	00010100 	andeq	r0, r1, r0, lsl #2
    18f8:	14f40205 	ldrbtne	r0, [r4], #517	; 0x205
    18fc:	d6030800 	strle	r0, [r3], -r0, lsl #16
    1900:	1d190102 	ldfnes	f0, [r9, #-8]
    1904:	06025328 	streq	r5, [r2], -r8, lsr #6
    1908:	00010100 	andeq	r0, r1, r0, lsl #2
    190c:	15100205 	ldrne	r0, [r0, #-517]	; 0x205
    1910:	f3030800 	vsub.i8	d0, d3, d0
    1914:	231a0102 	tstcs	sl, #-2147483648	; 0x80000000
    1918:	23232b3f 	teqcs	r3, #64512	; 0xfc00
    191c:	01000202 	tsteq	r0, r2, lsl #4
    1920:	02050001 	andeq	r0, r5, #1
    1924:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
    1928:	01038f03 	tsteq	r3, r3, lsl #30
    192c:	61281d19 	teqvs	r8, r9, lsl sp
    1930:	01000502 	tsteq	r0, r2, lsl #10
    1934:	02050001 	andeq	r0, r5, #1
    1938:	08001540 	stmdaeq	r0, {r6, r8, sl, ip}
    193c:	0103a703 	tsteq	r3, r3, lsl #14
    1940:	61281d19 	teqvs	r8, r9, lsl sp
    1944:	01000502 	tsteq	r0, r2, lsl #10
    1948:	02050001 	andeq	r0, r5, #1
    194c:	0800155c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip}
    1950:	0103c303 	tsteq	r3, r3, lsl #6
    1954:	03312817 	teqeq	r1, #1507328	; 0x170000
    1958:	02362e78 	eorseq	r2, r6, #120, 28	; 0x780
    195c:	01010002 	tsteq	r1, r2
    1960:	70020500 	andvc	r0, r2, r0, lsl #10
    1964:	03080015 	movweq	r0, #32789	; 0x8015
    1968:	190103de 	stmdbne	r1, {r1, r2, r3, r4, r6, r7, r8, r9}
    196c:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    1970:	01010005 	tsteq	r1, r5
    1974:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    1978:	03080015 	movweq	r0, #32789	; 0x8015
    197c:	190103f5 	stmdbne	r1, {r0, r2, r4, r5, r6, r7, r8, r9}
    1980:	232b3f23 	teqcs	fp, #35, 30	; 0x8c
    1984:	00020223 	andeq	r0, r2, r3, lsr #4
    1988:	05000101 	streq	r0, [r0, #-257]	; 0x101
    198c:	0015a002 	andseq	sl, r5, r2
    1990:	04900308 	ldreq	r0, [r0], #776	; 0x308
    1994:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    1998:	00050261 	andeq	r0, r5, r1, ror #4
    199c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    19a0:	0015bc02 	andseq	fp, r5, r2, lsl #24
    19a4:	04a80308 	strteq	r0, [r8], #776	; 0x308
    19a8:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    19ac:	00050261 	andeq	r0, r5, r1, ror #4
    19b0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    19b4:	0015d802 	andseq	sp, r5, r2, lsl #16
    19b8:	04c20308 	strbeq	r0, [r2], #776	; 0x308
    19bc:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    19c0:	00070245 	andeq	r0, r7, r5, asr #4
    19c4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    19c8:	0015f402 	andseq	pc, r5, r2, lsl #8
    19cc:	04da0308 	ldrbeq	r0, [sl], #776	; 0x308
    19d0:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    19d4:	00050261 	andeq	r0, r5, r1, ror #4
    19d8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    19dc:	00161002 	andseq	r1, r6, r2
    19e0:	04f40308 	ldrbteq	r0, [r4], #776	; 0x308
    19e4:	311d1901 	tstcc	sp, r1, lsl #18
    19e8:	02251b4f 	eoreq	r1, r5, #80896	; 0x13c00
    19ec:	01010005 	tsteq	r1, r5
    19f0:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    19f4:	03080016 	movweq	r0, #32790	; 0x8016
    19f8:	0301059a 	movweq	r0, #5530	; 0x159a
    19fc:	361d0109 	ldrcc	r0, [sp], -r9, lsl #2
    1a00:	331b2537 	tstcc	fp, #230686720	; 0xdc00000
    1a04:	01000402 	tsteq	r0, r2, lsl #8
    1a08:	02050001 	andeq	r0, r5, #1
    1a0c:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
    1a10:	0105b603 	tsteq	r5, r3, lsl #12
    1a14:	37361d19 			; <UNDEFINED> instruction: 0x37361d19
    1a18:	02331b25 	eorseq	r1, r3, #37888	; 0x9400
    1a1c:	01010004 	tsteq	r1, r4
    1a20:	64020500 	strvs	r0, [r2], #-1280	; 0x500
    1a24:	03080016 	movweq	r0, #32790	; 0x8016
    1a28:	190105ce 	stmdbne	r1, {r1, r2, r3, r6, r7, r8, sl}
    1a2c:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    1a30:	01010005 	tsteq	r1, r5
    1a34:	80020500 	andhi	r0, r2, r0, lsl #10
    1a38:	03080016 	movweq	r0, #32790	; 0x8016
    1a3c:	160105f4 			; <UNDEFINED> instruction: 0x160105f4
    1a40:	01000202 	tsteq	r0, r2, lsl #4
    1a44:	02050001 	andeq	r0, r5, #1
    1a48:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
    1a4c:	01068103 	tsteq	r6, r3, lsl #2
    1a50:	02022116 	andeq	r2, r2, #-2147483643	; 0x80000005
    1a54:	00010100 	andeq	r0, r1, r0, lsl #2
    1a58:	168c0205 	strne	r0, [ip], r5, lsl #4
    1a5c:	a0030800 	andge	r0, r3, r0, lsl #16
    1a60:	1d190106 	ldfnes	f0, [r9, #-24]	; 0xffffffe8
    1a64:	05026128 	streq	r6, [r2, #-296]	; 0x128
    1a68:	00010100 	andeq	r0, r1, r0, lsl #2
    1a6c:	16a80205 	strtne	r0, [r8], r5, lsl #4
    1a70:	bf030800 	svclt	0x00030800
    1a74:	1d190106 	ldfnes	f0, [r9, #-24]	; 0xffffffe8
    1a78:	1b253736 	blne	94f758 <_Min_Stack_Size+0x94f358>
    1a7c:	00040233 	andeq	r0, r4, r3, lsr r2
    1a80:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a84:	0016c402 	andseq	ip, r6, r2, lsl #8
    1a88:	06d70308 	ldrbeq	r0, [r7], r8, lsl #6
    1a8c:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    1a90:	00050261 	andeq	r0, r5, r1, ror #4
    1a94:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a98:	0016e002 	andseq	lr, r6, r2
    1a9c:	06ed0308 	strbteq	r0, [sp], r8, lsl #6
    1aa0:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1aa4:	01010003 	tsteq	r1, r3
    1aa8:	e8020500 	stmda	r2, {r8, sl}
    1aac:	03080016 	movweq	r0, #32790	; 0x8016
    1ab0:	1901078e 	stmdbne	r1, {r1, r2, r3, r7, r8, r9, sl}
    1ab4:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    1ab8:	01010005 	tsteq	r1, r5
    1abc:	04020500 	streq	r0, [r2], #-1280	; 0x500
    1ac0:	03080017 	movweq	r0, #32791	; 0x8017
    1ac4:	190107a6 	stmdbne	r1, {r1, r2, r5, r7, r8, r9, sl}
    1ac8:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    1acc:	01010005 	tsteq	r1, r5
    1ad0:	20020500 	andcs	r0, r2, r0, lsl #10
    1ad4:	03080017 	movweq	r0, #32791	; 0x8017
    1ad8:	210108b0 			; <UNDEFINED> instruction: 0x210108b0
    1adc:	2f3f2134 	svccs	0x003f2134
    1ae0:	01000302 	tsteq	r0, r2, lsl #6
    1ae4:	02050001 	andeq	r0, r5, #1
    1ae8:	08001738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip}
    1aec:	0108cb03 	tsteq	r8, r3, lsl #22
    1af0:	2b010903 	blcs	43f04 <_Min_Stack_Size+0x43b04>
    1af4:	03024528 	movweq	r4, #9512	; 0x2528
    1af8:	00010100 	andeq	r0, r1, r0, lsl #2
    1afc:	174c0205 	strbne	r0, [ip, -r5, lsl #4]
    1b00:	86030800 	strhi	r0, [r3], -r0, lsl #16
    1b04:	0a030109 	beq	c1f30 <_Min_Stack_Size+0xc1b30>
    1b08:	251f2101 	ldrcs	r2, [pc, #-257]	; 1a0f <_Min_Stack_Size+0x160f>
    1b0c:	200c034d 	andcs	r0, ip, sp, asr #6
    1b10:	01000402 	tsteq	r0, r2, lsl #8
    1b14:	02050001 	andeq	r0, r5, #1
    1b18:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
    1b1c:	0109b603 	tsteq	r9, r3, lsl #12
    1b20:	251f211a 	ldrcs	r2, [pc, #-282]	; 1a0e <_Min_Stack_Size+0x160e>
    1b24:	00030232 	andeq	r0, r3, r2, lsr r2
    1b28:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1b2c:	00177402 	andseq	r7, r7, r2, lsl #8
    1b30:	09ed0308 	stmibeq	sp!, {r3, r8, r9}^
    1b34:	0a032201 	beq	ca340 <_Min_Stack_Size+0xc9f40>
    1b38:	20760320 	rsbscs	r0, r6, r0, lsr #6
    1b3c:	1e252335 	mcrne	3, 1, r2, cr5, cr5, {1}
    1b40:	0a032330 	beq	ca808 <_Min_Stack_Size+0xca408>
    1b44:	3c0d033c 	stccc	3, cr0, [sp], {60}	; 0x3c
    1b48:	2c587003 	mrrccs	0, 0, r7, r8, cr3
    1b4c:	00020222 	andeq	r0, r2, r2, lsr #4
    1b50:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1b54:	0017ac02 	andseq	sl, r7, r2, lsl #24
    1b58:	0aba0308 	beq	fee82780 <_estack+0xdee52780>
    1b5c:	04021a01 	streq	r1, [r2], #-2561	; 0xa01
    1b60:	00010100 	andeq	r0, r1, r0, lsl #2
    1b64:	17b40205 	ldrne	r0, [r4, r5, lsl #4]!
    1b68:	dc030800 	stcle	8, cr0, [r3], {-0}
    1b6c:	0903010a 	stmdbeq	r3, {r1, r3, r8}
    1b70:	7a032601 	bvc	cb37c <_Min_Stack_Size+0xcaf7c>
    1b74:	0200263c 	andeq	r2, r0, #60, 12	; 0x3c00000
    1b78:	7a030104 	bvc	c1f90 <_Min_Stack_Size+0xc1b90>
    1b7c:	04020020 	streq	r0, [r2], #-32
    1b80:	02003401 	andeq	r3, r0, #16777216	; 0x1000000
    1b84:	03310104 	teqeq	r1, #4, 2
    1b88:	01023c09 	tsteq	r2, r9, lsl #24
    1b8c:	00010100 	andeq	r0, r1, r0, lsl #2
    1b90:	17d00205 	ldrbne	r0, [r0, r5, lsl #4]
    1b94:	98030800 	stmdals	r3, {fp}
    1b98:	0a03010b 	beq	c1fcc <_Min_Stack_Size+0xc1bcc>
    1b9c:	00040201 	andeq	r0, r4, r1, lsl #4
    1ba0:	03fa0101 	mvnseq	r0, #1073741824	; 0x40000000
    1ba4:	00020000 	andeq	r0, r2, r0
    1ba8:	00000188 	andeq	r0, r0, r8, lsl #3
    1bac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1bb0:	0101000d 	tsteq	r1, sp
    1bb4:	00000101 	andeq	r0, r0, r1, lsl #2
    1bb8:	00000100 	andeq	r0, r0, r0, lsl #2
    1bbc:	524f4301 	subpl	r4, pc, #67108864	; 0x4000000
    1bc0:	5f584554 	svcpl	0x00584554
    1bc4:	5f46344d 	svcpl	0x0046344d
    1bc8:	334d5453 	movtcc	r5, #54355	; 0xd453
    1bcc:	2f344632 	svccs	0x00344632
    1bd0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1bd4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1bd8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    1bdc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1be0:	5f787834 	svcpl	0x00787834
    1be4:	50647453 	rsbpl	r7, r4, r3, asr r4
    1be8:	70697265 	rsbvc	r7, r9, r5, ror #4
    1bec:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1bf0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1bf4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1bf8:	73752f00 	cmnvc	r5, #0, 30
    1bfc:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1c00:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1c04:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1c08:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1c0c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    1c10:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1c14:	73752f00 	cmnvc	r5, #0, 30
    1c18:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1c1c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1c20:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1c24:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1c28:	524f4300 	subpl	r4, pc, #0, 6
    1c2c:	5f584554 	svcpl	0x00584554
    1c30:	5f46344d 	svcpl	0x0046344d
    1c34:	334d5453 	movtcc	r5, #54355	; 0xd453
    1c38:	2f344632 	svccs	0x00344632
    1c3c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1c40:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1c44:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1c48:	2f534953 	svccs	0x00534953
    1c4c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    1c50:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    1c54:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    1c58:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1c5c:	2f787834 	svccs	0x00787834
    1c60:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1c64:	00656475 	rsbeq	r6, r5, r5, ror r4
    1c68:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    1c6c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 1b60 <_Min_Stack_Size+0x1760>
    1c70:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    1c74:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1c78:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 1b68 <_Min_Stack_Size+0x1768>
    1c7c:	61726269 	cmnvs	r2, r9, ror #4
    1c80:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1c84:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1c88:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1c8c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1c90:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    1c94:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1c98:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1c9c:	2f726576 	svccs	0x00726576
    1ca0:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1ca4:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    1ca8:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 1b9c <_Min_Stack_Size+0x179c>
    1cac:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    1cb0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1cb4:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 1ba4 <_Min_Stack_Size+0x17a4>
    1cb8:	61726269 	cmnvs	r2, r9, ror #4
    1cbc:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1cc0:	534d432f 	movtpl	r4, #54063	; 0xd32f
    1cc4:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    1cc8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1ccc:	00006564 	andeq	r6, r0, r4, ror #10
    1cd0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1cd4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1cd8:	6d645f78 	stclvs	15, cr5, [r4, #-480]!	; 0xfffffe20
    1cdc:	00632e61 	rsbeq	r2, r3, r1, ror #28
    1ce0:	5f000001 	svcpl	0x00000001
    1ce4:	61666564 	cmnvs	r6, r4, ror #10
    1ce8:	5f746c75 	svcpl	0x00746c75
    1cec:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1cf0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1cf4:	73000002 	movwvc	r0, #2
    1cf8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1cfc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1d00:	73000003 	movwvc	r0, #3
    1d04:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1d08:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1d0c:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    1d10:	74730000 	ldrbtvc	r0, [r3], #-0
    1d14:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1d18:	5f787834 	svcpl	0x00787834
    1d1c:	2e616d64 	cdpcs	13, 6, cr6, cr1, cr4, {3}
    1d20:	00050068 	andeq	r0, r5, r8, rrx
    1d24:	726f6300 	rsbvc	r6, pc, #0, 6
    1d28:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    1d2c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    1d30:	00000006 	andeq	r0, r0, r6
    1d34:	d8020500 	stmdale	r2, {r8, sl}
    1d38:	03080017 	movweq	r0, #32791	; 0x8017
    1d3c:	030101c4 	movweq	r0, #4548	; 0x11c4
    1d40:	6b03201a 	blvs	c9db0 <_Min_Stack_Size+0xc99b0>
    1d44:	2015032e 	andscs	r0, r5, lr, lsr #6
    1d48:	032e6e03 	teqeq	lr, #3, 28	; 0x30
    1d4c:	6b032012 	blvs	c9d9c <_Min_Stack_Size+0xc999c>
    1d50:	23233f20 	teqcs	r3, #32, 30	; 0x80
    1d54:	09032323 	stmdbeq	r3, {r0, r1, r5, r8, r9, sp}
    1d58:	587a0320 	ldmdapl	sl!, {r5, r8, r9}^
    1d5c:	2e7a0334 	mrccs	3, 3, r0, cr10, cr4, {1}
    1d60:	5b332b26 	blpl	ccca00 <_Min_Stack_Size+0xccc600>
    1d64:	7f5b337f 	svcvc	0x005b337f
    1d68:	257f5b33 	ldrbcs	r5, [pc, #-2867]!	; 123d <_Min_Stack_Size+0xe3d>
    1d6c:	5b6b6b6b 	blpl	1adcb20 <_Min_Stack_Size+0x1adc720>
    1d70:	715b257f 	cmpvc	fp, pc, ror r5
    1d74:	257f5b25 	ldrbcs	r5, [pc, #-2853]!	; 1257 <_Min_Stack_Size+0xe57>
    1d78:	5b257f5b 	blpl	961aec <_Min_Stack_Size+0x9616ec>
    1d7c:	6b6b257f 	blvs	1acb380 <_Min_Stack_Size+0x1acaf80>
    1d80:	03855b6d 	orreq	r5, r5, #111616	; 0x1b400
    1d84:	76033c4e 	strvc	r3, [r3], -lr, asr #24
    1d88:	23039590 	movwcs	r9, #13712	; 0x3590
    1d8c:	02a3959e 	adceq	r9, r3, #662700032	; 0x27800000
    1d90:	01010009 	tsteq	r1, r9
    1d94:	d0020500 	andle	r0, r2, r0, lsl #10
    1d98:	03080019 	movweq	r0, #32793	; 0x8019
    1d9c:	030102bf 	movweq	r0, #4799	; 0x12bf
    1da0:	6d030128 	stfvss	f0, [r3, #-160]	; 0xffffff60
    1da4:	2e6b032e 	cdpcs	3, 6, cr0, cr11, cr14, {1}
    1da8:	212e2803 	teqcs	lr, r3, lsl #16
    1dac:	214b1e2f 	cmpcs	fp, pc, lsr #28
    1db0:	03201103 	teqeq	r0, #-1073741824	; 0xc0000000
    1db4:	3d21206e 	stccc	0, cr2, [r1, #-440]!	; 0xfffffe48
    1db8:	206c034b 	rsbcs	r0, ip, fp, asr #6
    1dbc:	032e1303 	teqeq	lr, #201326592	; 0xc000000
    1dc0:	1403206d 	strne	r2, [r3], #-109	; 0x6d
    1dc4:	206c032e 	rsbcs	r0, ip, lr, lsr #6
    1dc8:	272e1003 	strcs	r1, [lr, -r3]!
    1dcc:	24272824 	strtcs	r2, [r7], #-2084	; 0x824
    1dd0:	206c0324 	rsbcs	r0, ip, r4, lsr #6
    1dd4:	24243f33 	strtcs	r3, [r4], #-3891	; 0xf33
    1dd8:	02212d25 	eoreq	r2, r1, #2368	; 0x940
    1ddc:	01010001 	tsteq	r1, r1
    1de0:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    1de4:	0308001a 	movweq	r0, #32794	; 0x801a
    1de8:	15010393 	strne	r0, [r1, #-915]	; 0x393
    1dec:	23232331 	teqcs	r3, #-1006632960	; 0xc4000000
    1df0:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    1df4:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    1df8:	02022323 	andeq	r2, r2, #-1946157056	; 0x8c000000
    1dfc:	00010100 	andeq	r0, r1, r0, lsl #2
    1e00:	1a600205 	bne	180261c <_Min_Stack_Size+0x180221c>
    1e04:	de030800 	cdple	8, 0, cr0, cr3, cr0, {0}
    1e08:	1d1a0103 	ldfnes	f0, [sl, #-12]
    1e0c:	04024528 	streq	r4, [r2], #-1320	; 0x528
    1e10:	00010100 	andeq	r0, r1, r0, lsl #2
    1e14:	1a740205 	bne	1d02630 <_Min_Stack_Size+0x1d02230>
    1e18:	82030800 	andhi	r0, r3, #0, 16
    1e1c:	09030104 	stmdbeq	r3, {r2, r8}
    1e20:	45281d01 	strmi	r1, [r8, #-3329]!	; 0xd01
    1e24:	01000402 	tsteq	r0, r2, lsl #8
    1e28:	02050001 	andeq	r0, r5, #1
    1e2c:	08001a88 	stmdaeq	r0, {r3, r7, r9, fp, ip}
    1e30:	0104a603 	tsteq	r4, r3, lsl #12
    1e34:	1d010903 	stcne	9, cr0, [r1, #-12]
    1e38:	04024528 	streq	r4, [r2], #-1320	; 0x528
    1e3c:	00010100 	andeq	r0, r1, r0, lsl #2
    1e40:	1a9c0205 	bne	fe70265c <_estack+0xde6d265c>
    1e44:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    1e48:	02170104 	andseq	r0, r7, #4, 2
    1e4c:	01010002 	tsteq	r1, r2
    1e50:	a0020500 	andge	r0, r2, r0, lsl #10
    1e54:	0308001a 	movweq	r0, #32794	; 0x801a
    1e58:	17010587 	strne	r0, [r1, -r7, lsl #11]
    1e5c:	00020221 	andeq	r0, r2, r1, lsr #4
    1e60:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1e64:	001aa802 	andseq	sl, sl, r2, lsl #16
    1e68:	05db0308 	ldrbeq	r0, [fp, #776]	; 0x308
    1e6c:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    1e70:	2e770340 	cdpcs	3, 7, cr0, cr7, cr0, {2}
    1e74:	023c0903 	eorseq	r0, ip, #49152	; 0xc000
    1e78:	01010002 	tsteq	r1, r2
    1e7c:	c0020500 	andgt	r0, r2, r0, lsl #10
    1e80:	0308001a 	movweq	r0, #32794	; 0x801a
    1e84:	030105f9 	movweq	r0, #5625	; 0x15f9
    1e88:	281d0109 	ldmdacs	sp, {r0, r3, r8}
    1e8c:	00040245 	andeq	r0, r4, r5, asr #4
    1e90:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1e94:	001ad402 	andseq	sp, sl, r2, lsl #8
    1e98:	06a30308 	strteq	r0, [r3], r8, lsl #6
    1e9c:	29281801 	stmdbcs	r8!, {r0, fp, ip}
    1ea0:	01000202 	tsteq	r0, r2, lsl #4
    1ea4:	02050001 	andeq	r0, r5, #1
    1ea8:	08001ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, ip}
    1eac:	0106bc03 	tsteq	r6, r3, lsl #24
    1eb0:	200b0319 	andcs	r0, fp, r9, lsl r3
    1eb4:	01000302 	tsteq	r0, r2, lsl #6
    1eb8:	02050001 	andeq	r0, r5, #1
    1ebc:	08001ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, ip}
    1ec0:	0107af03 	tsteq	r7, r3, lsl #30
    1ec4:	200c0318 	andcs	r0, ip, r8, lsl r3
    1ec8:	01000302 	tsteq	r0, r2, lsl #6
    1ecc:	02050001 	andeq	r0, r5, #1
    1ed0:	08001af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip}
    1ed4:	0107d103 	tsteq	r7, r3, lsl #2
    1ed8:	03022319 	movweq	r2, #8985	; 0x2319
    1edc:	00010100 	andeq	r0, r1, r0, lsl #2
    1ee0:	1af80205 	bne	ffe026fc <_estack+0xdfdd26fc>
    1ee4:	ec030800 	stc	8, cr0, [r3], {-0}
    1ee8:	0d030107 	stfeqs	f0, [r3, #-28]	; 0xffffffe4
    1eec:	47312b20 	ldrmi	r2, [r1, -r0, lsr #22]!
    1ef0:	66090331 			; <UNDEFINED> instruction: 0x66090331
    1ef4:	14033323 	strne	r3, [r3], #-803	; 0x323
    1ef8:	2e700320 	cdpcs	3, 7, cr0, cr0, cr0, {1}
    1efc:	200d034d 	andcs	r0, sp, sp, asr #6
    1f00:	01000402 	tsteq	r0, r2, lsl #8
    1f04:	02050001 	andeq	r0, r5, #1
    1f08:	08001b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip}
    1f0c:	0108af03 	tsteq	r8, r3, lsl #30
    1f10:	2b200b03 	blcs	804b24 <_Min_Stack_Size+0x804724>
    1f14:	03312b31 	teqeq	r1, #50176	; 0xc400
    1f18:	6b318209 	blvs	c62744 <_Min_Stack_Size+0xc62344>
    1f1c:	00030222 	andeq	r0, r3, r2, lsr #4
    1f20:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1f24:	001b7402 	andseq	r7, fp, r2, lsl #8
    1f28:	08de0308 	ldmeq	lr, {r3, r8, r9}^
    1f2c:	1d331901 	ldcne	9, cr1, [r3, #-4]!
    1f30:	2e0a0323 	cdpcs	3, 0, cr0, cr10, cr3, {1}
    1f34:	03207603 	teqeq	r0, #3145728	; 0x300000
    1f38:	6125200a 	teqvs	r5, sl
    1f3c:	71033630 	tstvc	r3, r0, lsr r6
    1f40:	251b3374 	ldrcs	r3, [fp, #-884]	; 0x374
    1f44:	01000202 	tsteq	r0, r2, lsl #4
    1f48:	02050001 	andeq	r0, r5, #1
    1f4c:	08001bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip}
    1f50:	01099203 	tsteq	r9, r3, lsl #4
    1f54:	2b200d03 	blcs	805368 <_Min_Stack_Size+0x804f68>
    1f58:	2e090331 	mcrcs	3, 0, r0, cr9, cr1, {1}
    1f5c:	312e7403 	teqcc	lr, r3, lsl #8
    1f60:	034a0903 	movteq	r0, #43267	; 0xa903
    1f64:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    1f68:	311d263c 	tstcc	sp, ip, lsr r6
    1f6c:	232e0903 	teqcs	lr, #49152	; 0xc000
    1f70:	00312433 	eorseq	r2, r1, r3, lsr r4
    1f74:	3f010402 	svccc	0x00010402
    1f78:	033c0a03 	teqeq	ip, #12288	; 0x3000
    1f7c:	04022e60 	streq	r2, [r2], #-3680	; 0xe60
    1f80:	00010100 	andeq	r0, r1, r0, lsl #2
    1f84:	1c0c0205 	sfmne	f0, 4, [ip], {5}
    1f88:	e4030800 	str	r0, [r3], #-2048	; 0x800
    1f8c:	0b030109 	bleq	c23b8 <_Min_Stack_Size+0xc1fb8>
    1f90:	2b312b20 	blcs	c4cc18 <_Min_Stack_Size+0xc4c818>
    1f94:	82090331 	andhi	r0, r9, #-1006632960	; 0xc4000000
    1f98:	02226b31 	eoreq	r6, r2, #50176	; 0xc400
    1f9c:	01010003 	tsteq	r1, r3
    1fa0:	0000048b 	andeq	r0, r0, fp, lsl #9
    1fa4:	019b0002 	orrseq	r0, fp, r2
    1fa8:	01020000 	mrseq	r0, (UNDEF: 2)
    1fac:	000d0efb 	strdeq	r0, [sp], -fp
    1fb0:	01010101 	tsteq	r1, r1, lsl #2
    1fb4:	01000000 	mrseq	r0, (UNDEF: 0)
    1fb8:	43010000 	movwmi	r0, #4096	; 0x1000
    1fbc:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    1fc0:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    1fc4:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    1fc8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1fcc:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    1fd0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1fd4:	2f736569 	svccs	0x00736569
    1fd8:	334d5453 	movtcc	r5, #54355	; 0xd453
    1fdc:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    1fe0:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    1fe4:	72655064 	rsbvc	r5, r5, #100	; 0x64
    1fe8:	5f687069 	svcpl	0x00687069
    1fec:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1ff0:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    1ff4:	2f006372 	svccs	0x00006372
    1ff8:	2f727375 	svccs	0x00727375
    1ffc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2000:	2f656475 	svccs	0x00656475
    2004:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2008:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 1e6c <_Min_Stack_Size+0x1a6c>
    200c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    2010:	2f00656e 	svccs	0x0000656e
    2014:	2f727375 	svccs	0x00727375
    2018:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    201c:	2f656475 	svccs	0x00656475
    2020:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2024:	43006269 	movwmi	r6, #617	; 0x269
    2028:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    202c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2030:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2034:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2038:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    203c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2040:	2f736569 	svccs	0x00736569
    2044:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    2048:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    204c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    2050:	2f54532f 	svccs	0x0054532f
    2054:	334d5453 	movtcc	r5, #54355	; 0xd453
    2058:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    205c:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    2060:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2064:	4f430065 	svcmi	0x00430065
    2068:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    206c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2070:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2074:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2078:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    207c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2080:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2084:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2088:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    208c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2090:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2094:	445f6870 	ldrbmi	r6, [pc], #-2160	; 209c <_Min_Stack_Size+0x1c9c>
    2098:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    209c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    20a0:	4f430063 	svcmi	0x00430063
    20a4:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    20a8:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    20ac:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    20b0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    20b4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    20b8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    20bc:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    20c0:	5349534d 	movtpl	r5, #37709	; 0x934d
    20c4:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    20c8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    20cc:	74730000 	ldrbtvc	r0, [r3], #-0
    20d0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    20d4:	5f787834 	svcpl	0x00787834
    20d8:	2e697073 	mcrcs	0, 3, r7, cr9, cr3, {3}
    20dc:	00010063 	andeq	r0, r1, r3, rrx
    20e0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    20e4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    20e8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    20ec:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    20f0:	00020068 	andeq	r0, r2, r8, rrx
    20f4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    20f8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    20fc:	00030068 	andeq	r0, r3, r8, rrx
    2100:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2104:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    2108:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    210c:	00000400 	andeq	r0, r0, r0, lsl #8
    2110:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2114:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    2118:	70735f78 	rsbsvc	r5, r3, r8, ror pc
    211c:	00682e69 	rsbeq	r2, r8, r9, ror #28
    2120:	63000005 	movwvs	r0, #5
    2124:	5f65726f 	svcpl	0x0065726f
    2128:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    212c:	00060068 	andeq	r0, r6, r8, rrx
    2130:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2134:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    2138:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    213c:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    2140:	00000500 	andeq	r0, r0, r0, lsl #10
    2144:	02050000 	andeq	r0, r5, #0
    2148:	08001c48 	stmdaeq	r0, {r3, r6, sl, fp, ip}
    214c:	0101e003 	tsteq	r1, r3
    2150:	6d6d6d24 	stclvs	13, cr6, [sp, #-144]!	; 0xffffff70
    2154:	6609036d 	strvs	r0, [r9], -sp, ror #6
    2158:	2b3f5a77 	blcs	fd8b3c <_Min_Stack_Size+0xfd873c>
    215c:	5a2e5903 	bpl	b98570 <_Min_Stack_Size+0xb98170>
    2160:	033c2803 	teqeq	ip, #196608	; 0x30000
    2164:	5a332e58 	bpl	ccdacc <_Min_Stack_Size+0xccd6cc>
    2168:	033c2103 	teqeq	ip, #-1073741824	; 0xc0000000
    216c:	5a332e5f 	bpl	ccdaf0 <_Min_Stack_Size+0xccd6f0>
    2170:	033c1a03 	teqeq	ip, #12288	; 0x3000
    2174:	5a332e66 	bpl	ccdb14 <_Min_Stack_Size+0xccd714>
    2178:	033c1303 	teqeq	ip, #201326592	; 0xc000000
    217c:	5a332e6d 	bpl	ccdb38 <_Min_Stack_Size+0xccd738>
    2180:	033c0c03 	teqeq	ip, #768	; 0x300
    2184:	02022e74 	andeq	r2, r2, #116, 28	; 0x740
    2188:	00010100 	andeq	r0, r1, r0, lsl #2
    218c:	1d240205 	sfmne	f0, 4, [r4, #-20]!	; 0xffffffec
    2190:	9c030800 	stcls	8, cr0, [r3], {-0}
    2194:	1e030102 	adfnes	f0, f3, f2
    2198:	ba0b032e 	blt	2c2e58 <_Min_Stack_Size+0x2c2a58>
    219c:	03206a03 	teqeq	r0, #12288	; 0x3000
    21a0:	7703200b 	strvc	r2, [r3, -fp]
    21a4:	2e09039e 	mcrcs	3, 0, r0, cr9, cr14, {4}
    21a8:	2d6a2333 	stclcs	3, cr2, [sl, #-204]!	; 0xffffff34
    21ac:	00010221 	andeq	r0, r1, r1, lsr #4
    21b0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    21b4:	001d7802 	andseq	r7, sp, r2, lsl #16
    21b8:	02dc0308 	sbcseq	r0, ip, #8, 6	; 0x20000000
    21bc:	01120301 	tsteq	r2, r1, lsl #6
    21c0:	20790327 	rsbscs	r0, r9, r7, lsr #6
    21c4:	03586e03 	cmpeq	r8, #3, 28	; 0x30
    21c8:	1f212e12 	svcne	0x00212e12
    21cc:	1d232321 	stcne	3, cr2, [r3, #-132]!	; 0xffffff7c
    21d0:	20240323 	eorcs	r0, r4, r3, lsr #6
    21d4:	034a6503 	movteq	r6, #42243	; 0xa503
    21d8:	6503201b 	strvs	r2, [r3, #-27]
    21dc:	661b0320 	ldrvs	r0, [fp], -r0, lsr #6
    21e0:	0b035c22 	bleq	d9270 <_Min_Stack_Size+0xd8e70>
    21e4:	2e75034a 	cdpcs	3, 7, cr0, cr5, cr10, {2}
    21e8:	03353232 	teqeq	r5, #536870915	; 0x20000003
    21ec:	03312079 	teqeq	r1, #121	; 0x79
    21f0:	0b034a75 	bleq	d4bcc <_Min_Stack_Size+0xd47cc>
    21f4:	2e79032e 	cdpcs	3, 7, cr0, cr9, cr14, {1}
    21f8:	2a2e0b03 	bcs	b84e0c <_Min_Stack_Size+0xb84a0c>
    21fc:	372e0c03 	strcc	r0, [lr, -r3, lsl #24]!
    2200:	1b332941 	blne	ccc70c <_Min_Stack_Size+0xccc30c>
    2204:	24464033 	strbcs	r4, [r6], #-51	; 0x33
    2208:	79032742 	stmdbvc	r3, {r1, r6, r8, r9, sl, sp}
    220c:	0c03352e 	cfstr32eq	mvfx3, [r3], {46}	; 0x2e
    2210:	492f2d58 	stmdbmi	pc!, {r3, r4, r6, r8, sl, fp, sp}	; <UNPREDICTABLE>
    2214:	362b232b 	strtcc	r2, [fp], -fp, lsr #6
    2218:	00060221 	andeq	r0, r6, r1, lsr #4
    221c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2220:	001e6802 	andseq	r6, lr, r2, lsl #16
    2224:	03e00308 	mvneq	r0, #8, 6	; 0x20000000
    2228:	10031501 	andne	r1, r3, r1, lsl #10
    222c:	2e700320 	cdpcs	3, 7, cr0, cr0, cr0, {1}
    2230:	22222222 	eorcs	r2, r2, #536870914	; 0x20000002
    2234:	02222222 	eoreq	r2, r2, #536870914	; 0x20000002
    2238:	01010002 	tsteq	r1, r2
    223c:	80020500 	andhi	r0, r2, r0, lsl #10
    2240:	0308001e 	movweq	r0, #32798	; 0x801e
    2244:	150103fc 	strne	r0, [r1, #-1020]	; 0x3fc
    2248:	03200c03 	teqeq	r0, #768	; 0x300
    224c:	0f032e74 	svceq	0x00032e74
    2250:	0002022e 	andeq	r0, r2, lr, lsr #4
    2254:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2258:	001e9002 	andseq	r9, lr, r2
    225c:	04990308 	ldreq	r0, [r9], #776	; 0x308
    2260:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    2264:	00050261 	andeq	r0, r5, r1, ror #4
    2268:	05000101 	streq	r0, [r0, #-257]	; 0x101
    226c:	001eac02 	andseq	sl, lr, r2, lsl #24
    2270:	04b20308 	ldrteq	r0, [r2], #776	; 0x308
    2274:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    2278:	00050261 	andeq	r0, r5, r1, ror #4
    227c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2280:	001ec802 	andseq	ip, lr, r2, lsl #16
    2284:	04cd0308 	strbeq	r0, [sp], #776	; 0x308
    2288:	02681701 	rsbeq	r1, r8, #262144	; 0x40000
    228c:	01010005 	tsteq	r1, r5
    2290:	e0020500 	and	r0, r2, r0, lsl #10
    2294:	0308001e 	movweq	r0, #32798	; 0x801e
    2298:	190104e1 	stmdbne	r1, {r0, r5, r6, r7, sl}
    229c:	2537361d 	ldrcs	r3, [r7, #-1565]!	; 0x61d
    22a0:	0402331b 	streq	r3, [r2], #-795	; 0x31b
    22a4:	00010100 	andeq	r0, r1, r0, lsl #2
    22a8:	1efc0205 	cdpne	2, 15, cr0, cr12, cr5, {0}
    22ac:	fb030800 	blx	c42b6 <_Min_Stack_Size+0xc3eb6>
    22b0:	3f160104 	svccc	0x00160104
    22b4:	1b253725 	blne	94ff50 <_Min_Stack_Size+0x94fb50>
    22b8:	00040233 	andeq	r0, r4, r3, lsr r2
    22bc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    22c0:	001f1c02 	andseq	r1, pc, r2, lsl #24
    22c4:	05930308 	ldreq	r0, [r3, #776]	; 0x308
    22c8:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    22cc:	00050261 	andeq	r0, r5, r1, ror #4
    22d0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    22d4:	001f3802 	andseq	r3, pc, r2, lsl #16
    22d8:	05b20308 	ldreq	r0, [r2, #776]!	; 0x308
    22dc:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    22e0:	00050261 	andeq	r0, r5, r1, ror #4
    22e4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    22e8:	001f5402 	andseq	r5, pc, r2, lsl #8
    22ec:	05d70308 	ldrbeq	r0, [r7, #776]	; 0x308
    22f0:	010c0301 	tsteq	ip, r1, lsl #6
    22f4:	232f1f67 	teqcs	pc, #412	; 0x19c
    22f8:	206d0323 	rsbcs	r0, sp, r3, lsr #6
    22fc:	1f202203 	svcne	0x00202203
    2300:	032e6f03 	teqeq	lr, #3, 30
    2304:	71032012 	tstvc	r3, r2, lsl r0
    2308:	2e0e033c 	mcrcs	3, 0, r0, cr14, cr12, {1}
    230c:	03207203 	teqeq	r0, #805306368	; 0x30000000
    2310:	7203200e 	andvc	r2, r3, #14
    2314:	200e0320 	andcs	r0, lr, r0, lsr #6
    2318:	03207403 	teqeq	r0, #50331648	; 0x3000000
    231c:	2125580c 	teqcs	r5, ip, lsl #16
    2320:	01000202 	tsteq	r0, r2, lsl #4
    2324:	02050001 	andeq	r0, r5, #1
    2328:	08001f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip}
    232c:	0106a103 	tsteq	r6, r3, lsl #2
    2330:	02022117 	andeq	r2, r2, #-1073741819	; 0xc0000005
    2334:	00010100 	andeq	r0, r1, r0, lsl #2
    2338:	1fa40205 	svcne	0x00a40205
    233c:	b1030800 	tstlt	r3, r0, lsl #16
    2340:	02170106 	andseq	r0, r7, #-2147483647	; 0x80000001
    2344:	01010002 	tsteq	r1, r2
    2348:	a8020500 	stmdage	r2, {r8, sl}
    234c:	0308001f 	movweq	r0, #32799	; 0x801f
    2350:	1901078b 	stmdbne	r1, {r0, r1, r3, r7, r8, r9, sl}
    2354:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    2358:	01010005 	tsteq	r1, r5
    235c:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
    2360:	0308001f 	movweq	r0, #32799	; 0x801f
    2364:	170107a1 	strne	r0, [r1, -r1, lsr #15]
    2368:	01000602 	tsteq	r0, r2, lsl #12
    236c:	02050001 	andeq	r0, r5, #1
    2370:	08001fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, ip}
    2374:	0107b303 	tsteq	r7, r3, lsl #6
    2378:	32332317 	eorscc	r2, r3, #1543503872	; 0x5c000000
    237c:	01000102 	tsteq	r0, r2, lsl #2
    2380:	02050001 	andeq	r0, r5, #1
    2384:	08001fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
    2388:	0107cc03 	tsteq	r7, r3, lsl #24
    238c:	02022117 	andeq	r2, r2, #-1073741819	; 0xc0000005
    2390:	00010100 	andeq	r0, r1, r0, lsl #2
    2394:	1fe40205 	svcne	0x00e40205
    2398:	f1030800 			; <UNDEFINED> instruction: 0xf1030800
    239c:	09030107 	stmdbeq	r3, {r0, r1, r2, r8}
    23a0:	45282b01 	strmi	r2, [r8, #-2817]!	; 0xb01
    23a4:	01000302 	tsteq	r0, r2, lsl #6
    23a8:	02050001 	andeq	r0, r5, #1
    23ac:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    23b0:	0108dd03 	tsteq	r8, r3, lsl #26
    23b4:	4f010c03 	svcmi	0x00010c03
    23b8:	281d251b 	ldmdacs	sp, {r0, r1, r3, r4, r8, sl, sp}
    23bc:	00030245 	andeq	r0, r3, r5, asr #4
    23c0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    23c4:	00201802 	eoreq	r1, r0, r2, lsl #16
    23c8:	09890308 	stmibeq	r9, {r3, r8, r9}
    23cc:	0c031901 	stceq	9, cr1, [r3], {1}
    23d0:	0004022e 	andeq	r0, r4, lr, lsr #4
    23d4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    23d8:	00202402 	eoreq	r2, r0, r2, lsl #8
    23dc:	09b20308 	ldmibeq	r2!, {r3, r8, r9}
    23e0:	04021801 	streq	r1, [r2], #-2049	; 0x801
    23e4:	00010100 	andeq	r0, r1, r0, lsl #2
    23e8:	202c0205 	eorcs	r0, ip, r5, lsl #4
    23ec:	cb030800 	blgt	c43f4 <_Min_Stack_Size+0xc3ff4>
    23f0:	12030109 	andne	r0, r3, #1073741826	; 0x40000002
    23f4:	74032320 	strvc	r2, [r3], #-800	; 0x320
    23f8:	3c0c0320 	stccc	3, cr0, [ip], {32}
    23fc:	03207403 	teqeq	r0, #50331648	; 0x3000000
    2400:	231d2e0c 	tstcs	sp, #12, 28	; 0xc0
    2404:	01040200 	mrseq	r0, R12_usr
    2408:	00207a03 	eoreq	r7, r0, r3, lsl #20
    240c:	34010402 	strcc	r0, [r1], #-1026	; 0x402
    2410:	01040200 	mrseq	r0, R12_usr
    2414:	3c090323 	stccc	3, cr0, [r9], {35}	; 0x23
    2418:	01000302 	tsteq	r0, r2, lsl #6
    241c:	02050001 	andeq	r0, r5, #1
    2420:	08002058 	stmdaeq	r0, {r3, r4, r6, sp}
    2424:	010a8203 	tsteq	sl, r3, lsl #4
    2428:	04025b19 	streq	r5, [r2], #-2841	; 0xb19
    242c:	57010100 	strpl	r0, [r1, -r0, lsl #2]
    2430:	02000002 	andeq	r0, r0, #2
    2434:	00018a00 	andeq	r8, r1, r0, lsl #20
    2438:	fb010200 	blx	42c42 <_Min_Stack_Size+0x42842>
    243c:	01000d0e 	tsteq	r0, lr, lsl #26
    2440:	00010101 	andeq	r0, r1, r1, lsl #2
    2444:	00010000 	andeq	r0, r1, r0
    2448:	4f430100 	svcmi	0x00430100
    244c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2450:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2454:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2458:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    245c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2460:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2464:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2468:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    246c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2470:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2474:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2478:	445f6870 	ldrbmi	r6, [pc], #-2160	; 2480 <_Min_Stack_Size+0x2080>
    247c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    2480:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    2484:	752f0063 	strvc	r0, [pc, #-99]!	; 2429 <_Min_Stack_Size+0x2029>
    2488:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    248c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2490:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2494:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2498:	616d2f62 	cmnvs	sp, r2, ror #30
    249c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    24a0:	752f0065 	strvc	r0, [pc, #-101]!	; 2443 <_Min_Stack_Size+0x2043>
    24a4:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    24a8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    24ac:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    24b0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    24b4:	4f430062 	svcmi	0x00430062
    24b8:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    24bc:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    24c0:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    24c4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    24c8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    24cc:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    24d0:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    24d4:	5349534d 	movtpl	r5, #37709	; 0x934d
    24d8:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    24dc:	2f656369 	svccs	0x00656369
    24e0:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    24e4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    24e8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    24ec:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    24f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    24f4:	524f4300 	subpl	r4, pc, #0, 6
    24f8:	5f584554 	svcpl	0x00584554
    24fc:	5f46344d 	svcpl	0x0046344d
    2500:	334d5453 	movtcc	r5, #54355	; 0xd453
    2504:	2f344632 	svccs	0x00344632
    2508:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    250c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    2510:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    2514:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2518:	5f787834 	svcpl	0x00787834
    251c:	50647453 	rsbpl	r7, r4, r3, asr r4
    2520:	70697265 	rsbvc	r7, r9, r5, ror #4
    2524:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    2528:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    252c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2530:	524f4300 	subpl	r4, pc, #0, 6
    2534:	5f584554 	svcpl	0x00584554
    2538:	5f46344d 	svcpl	0x0046344d
    253c:	334d5453 	movtcc	r5, #54355	; 0xd453
    2540:	2f344632 	svccs	0x00344632
    2544:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2548:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    254c:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    2550:	2f534953 	svccs	0x00534953
    2554:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    2558:	00656475 	rsbeq	r6, r5, r5, ror r4
    255c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2560:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    2564:	655f7878 	ldrbvs	r7, [pc, #-2168]	; 1cf4 <_Min_Stack_Size+0x18f4>
    2568:	2e697478 	mcrcs	4, 3, r7, cr9, cr8, {3}
    256c:	00010063 	andeq	r0, r1, r3, rrx
    2570:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    2574:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2578:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    257c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2580:	00020068 	andeq	r0, r2, r8, rrx
    2584:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    2588:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    258c:	00030068 	andeq	r0, r3, r8, rrx
    2590:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2594:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    2598:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    259c:	00000400 	andeq	r0, r0, r0, lsl #8
    25a0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    25a4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    25a8:	78655f78 	stmdavc	r5!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    25ac:	682e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}
    25b0:	00000500 	andeq	r0, r0, r0, lsl #10
    25b4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    25b8:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    25bc:	0600682e 	streq	r6, [r0], -lr, lsr #16
    25c0:	00000000 	andeq	r0, r0, r0
    25c4:	206c0205 	rsbcs	r0, ip, r5, lsl #4
    25c8:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
    25cc:	4e130100 	mufmis	f0, f3, f0
    25d0:	212a242a 	teqcs	sl, sl, lsr #8
    25d4:	02212121 	eoreq	r2, r1, #1073741832	; 0x40000008
    25d8:	01010002 	tsteq	r1, r2
    25dc:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    25e0:	03080020 	movweq	r0, #32800	; 0x8020
    25e4:	030100fe 	movweq	r0, #4350	; 0x10fe
    25e8:	7503010b 	strvc	r0, [r3, #-267]	; 0x10b
    25ec:	200b0320 	andcs	r0, fp, r0, lsr #6
    25f0:	09036923 	stmdbeq	r3, {r0, r1, r5, r8, fp, sp, lr}
    25f4:	20740320 	rsbscs	r0, r4, r0, lsr #6
    25f8:	3248223d 	subcc	r2, r8, #-805306365	; 0xd0000003
    25fc:	1d23593f 	stcne	9, cr5, [r3, #-252]!	; 0xffffff04
    2600:	2009033f 	andcs	r0, r9, pc, lsr r3
    2604:	3c0a034c 	stccc	3, cr0, [sl], {76}	; 0x4c
    2608:	4f1d2329 	svcmi	0x001d2329
    260c:	6e034c1e 	mcrvs	12, 0, r4, cr3, cr14, {0}
    2610:	11033d20 	tstne	r3, r0, lsr #26
    2614:	0002023c 	andeq	r0, r2, ip, lsr r2
    2618:	05000101 	streq	r0, [r0, #-257]	; 0x101
    261c:	00210c02 	eoreq	r0, r1, r2, lsl #24
    2620:	01b60308 			; <UNDEFINED> instruction: 0x01b60308
    2624:	2c221301 	stccs	3, cr1, [r2], #-4
    2628:	02022221 	andeq	r2, r2, #268435458	; 0x10000002
    262c:	00010100 	andeq	r0, r1, r0, lsl #2
    2630:	211c0205 	tstcs	ip, r5, lsl #4
    2634:	c5030800 	strgt	r0, [r3, #-2048]	; 0x800
    2638:	02160101 	andseq	r0, r6, #1073741824	; 0x40000000
    263c:	01010008 	tsteq	r1, r8
    2640:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    2644:	03080021 	movweq	r0, #32801	; 0x8021
    2648:	170101e3 	strne	r0, [r1, -r3, ror #3]
    264c:	02660903 	rsbeq	r0, r6, #49152	; 0xc000
    2650:	01010004 	tsteq	r1, r4
    2654:	40020500 	andmi	r0, r2, r0, lsl #10
    2658:	03080021 	movweq	r0, #32801	; 0x8021
    265c:	160101fa 			; <UNDEFINED> instruction: 0x160101fa
    2660:	01000602 	tsteq	r0, r2, lsl #12
    2664:	02050001 	andeq	r0, r5, #1
    2668:	0800214c 	stmdaeq	r0, {r2, r3, r6, r8, sp}
    266c:	01028803 	tsteq	r2, r3, lsl #16
    2670:	660a0317 			; <UNDEFINED> instruction: 0x660a0317
    2674:	01000402 	tsteq	r0, r2, lsl #8
    2678:	02050001 	andeq	r0, r5, #1
    267c:	08002160 	stmdaeq	r0, {r5, r6, r8, sp}
    2680:	0102a003 	tsteq	r2, r3
    2684:	00060216 	andeq	r0, r6, r6, lsl r2
    2688:	039f0101 	orrseq	r0, pc, #1073741824	; 0x40000000
    268c:	00020000 	andeq	r0, r2, r0
    2690:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    2694:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2698:	0101000d 	tsteq	r1, sp
    269c:	00000101 	andeq	r0, r0, r1, lsl #2
    26a0:	00000100 	andeq	r0, r0, r0, lsl #2
    26a4:	524f4301 	subpl	r4, pc, #67108864	; 0x4000000
    26a8:	5f584554 	svcpl	0x00584554
    26ac:	5f46344d 	svcpl	0x0046344d
    26b0:	334d5453 	movtcc	r5, #54355	; 0xd453
    26b4:	2f344632 	svccs	0x00344632
    26b8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    26bc:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    26c0:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    26c4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    26c8:	5f787834 	svcpl	0x00787834
    26cc:	50647453 	rsbpl	r7, r4, r3, asr r4
    26d0:	70697265 	rsbvc	r7, r9, r5, ror #4
    26d4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    26d8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    26dc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    26e0:	73752f00 	cmnvc	r5, #0, 30
    26e4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    26e8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    26ec:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    26f0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    26f4:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    26f8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    26fc:	73752f00 	cmnvc	r5, #0, 30
    2700:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2704:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2708:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    270c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2710:	524f4300 	subpl	r4, pc, #0, 6
    2714:	5f584554 	svcpl	0x00584554
    2718:	5f46344d 	svcpl	0x0046344d
    271c:	334d5453 	movtcc	r5, #54355	; 0xd453
    2720:	2f344632 	svccs	0x00344632
    2724:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2728:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    272c:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    2730:	2f534953 	svccs	0x00534953
    2734:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2738:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    273c:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    2740:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2744:	2f787834 	svccs	0x00787834
    2748:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    274c:	00656475 	rsbeq	r6, r5, r5, ror r4
    2750:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2754:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 2648 <_Min_Stack_Size+0x2248>
    2758:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    275c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2760:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 2650 <_Min_Stack_Size+0x2250>
    2764:	61726269 	cmnvs	r2, r9, ror #4
    2768:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    276c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2770:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2774:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    2778:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    277c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2780:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2784:	2f726576 	svccs	0x00726576
    2788:	00636e69 	rsbeq	r6, r3, r9, ror #28
    278c:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2790:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 2684 <_Min_Stack_Size+0x2284>
    2794:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2798:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    279c:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 268c <_Min_Stack_Size+0x228c>
    27a0:	61726269 	cmnvs	r2, r9, ror #4
    27a4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    27a8:	534d432f 	movtpl	r4, #54063	; 0xd32f
    27ac:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    27b0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    27b4:	00006564 	andeq	r6, r0, r4, ror #10
    27b8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    27bc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    27c0:	6d645f78 	stclvs	15, cr5, [r4, #-480]!	; 0xfffffe20
    27c4:	2e643261 	cdpcs	2, 6, cr3, cr4, cr1, {3}
    27c8:	00010063 	andeq	r0, r1, r3, rrx
    27cc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    27d0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    27d4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    27d8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    27dc:	00020068 	andeq	r0, r2, r8, rrx
    27e0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    27e4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    27e8:	00030068 	andeq	r0, r3, r8, rrx
    27ec:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    27f0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    27f4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    27f8:	00000400 	andeq	r0, r0, r0, lsl #8
    27fc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2800:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    2804:	6d645f78 	stclvs	15, cr5, [r4, #-480]!	; 0xfffffe20
    2808:	2e643261 	cdpcs	2, 6, cr3, cr4, cr1, {3}
    280c:	00050068 	andeq	r0, r5, r8, rrx
    2810:	726f6300 	rsbvc	r6, pc, #0, 6
    2814:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    2818:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    281c:	73000006 	movwvc	r0, #6
    2820:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2824:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    2828:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    282c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    2830:	00000000 	andeq	r0, r0, r0
    2834:	216c0205 	cmncs	ip, r5, lsl #4
    2838:	e9030800 	stmdb	r3, {fp}
    283c:	5a220100 	bpl	882c44 <_Min_Stack_Size+0x882844>
    2840:	02022d3d 	andeq	r2, r2, #3904	; 0xf40
    2844:	00010100 	andeq	r0, r1, r0, lsl #2
    2848:	21880205 	orrcs	r0, r8, r5, lsl #4
    284c:	fa030800 	blx	c4854 <_Min_Stack_Size+0xc4454>
    2850:	13030100 	movwne	r0, #12544	; 0x3100
    2854:	4a6d0301 	bmi	1b43460 <_Min_Stack_Size+0x1b43060>
    2858:	67201303 	strvs	r1, [r0, -r3, lsl #6]!
    285c:	21504b4d 	cmpcs	r0, sp, asr #22
    2860:	2f22361d 	svccs	0x0022361d
    2864:	09031c21 	stmdbeq	r3, {r0, r5, sl, fp, ip}
    2868:	212f2220 	teqcs	pc, r0, lsr #4
    286c:	200d031c 	andcs	r0, sp, ip, lsl r3
    2870:	212f221c 	teqcs	pc, ip, lsl r2	; <UNPREDICTABLE>
    2874:	222f2125 	eorcs	r2, pc, #1073741833	; 0x40000009
    2878:	4e6731bd 	mcrmi	1, 3, r3, cr7, cr13, {5}
    287c:	6e3d211f 	mrcvs	1, 1, r2, cr13, cr15, {0}
    2880:	1e2e4903 	cdpne	9, 2, cr4, cr14, cr3, {0}
    2884:	02022121 	andeq	r2, r2, #1073741832	; 0x40000008
    2888:	00010100 	andeq	r0, r1, r0, lsl #2
    288c:	22400205 	subcs	r0, r0, #1342177280	; 0x50000000
    2890:	d3030800 	movwle	r0, #14336	; 0x3800
    2894:	31140101 	tstcc	r4, r1, lsl #2
    2898:	21212123 	teqcs	r1, r3, lsr #2
    289c:	21232323 	teqcs	r3, r3, lsr #6
    28a0:	01000202 	tsteq	r0, r2, lsl #4
    28a4:	02050001 	andeq	r0, r5, #1
    28a8:	08002258 	stmdaeq	r0, {r3, r4, r6, r9, sp}
    28ac:	0101f203 	tsteq	r1, r3, lsl #4
    28b0:	00090214 	andeq	r0, r9, r4, lsl r2
    28b4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    28b8:	00226c02 	eoreq	r6, r2, r2, lsl #24
    28bc:	01fe0308 	mvnseq	r0, r8, lsl #6
    28c0:	09021401 	stmdbeq	r2, {r0, sl, ip}
    28c4:	00010100 	andeq	r0, r1, r0, lsl #2
    28c8:	22800205 	addcs	r0, r0, #1342177280	; 0x50000000
    28cc:	8b030800 	blhi	c48d4 <_Min_Stack_Size+0xc44d4>
    28d0:	55190102 	ldrpl	r0, [r9, #-258]	; 0x102
    28d4:	04024528 	streq	r4, [r2], #-1320	; 0x528
    28d8:	00010100 	andeq	r0, r1, r0, lsl #2
    28dc:	229c0205 	addscs	r0, ip, #1342177280	; 0x50000000
    28e0:	a4030800 	strge	r0, [r3], #-2048	; 0x800
    28e4:	14030102 	strne	r0, [r3], #-258	; 0x102
    28e8:	586c0301 	stmdapl	ip!, {r0, r8, r9}^
    28ec:	23201403 	teqcs	r0, #50331648	; 0x3000000
    28f0:	2a6b4d67 	bcs	1ad5e94 <_Min_Stack_Size+0x1ad5a94>
    28f4:	21212121 	teqcs	r1, r1, lsr #2
    28f8:	4d402d59 	stclmi	13, cr2, [r0, #-356]	; 0xfffffe9c
    28fc:	6921212c 	stmdbvs	r1!, {r2, r3, r5, r8, sp}
    2900:	02211f21 	eoreq	r1, r1, #33, 30	; 0x84
    2904:	01010001 	tsteq	r1, r1
    2908:	10020500 	andne	r0, r2, r0, lsl #10
    290c:	03080023 	movweq	r0, #32803	; 0x8023
    2910:	140102d8 	strne	r0, [r1], #-728	; 0x2d8
    2914:	23232331 	teqcs	r3, #-1006632960	; 0xc4000000
    2918:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    291c:	02022323 	andeq	r2, r2, #-1946157056	; 0x8c000000
    2920:	00010100 	andeq	r0, r1, r0, lsl #2
    2924:	232c0205 	teqcs	ip, #1342177280	; 0x50000000
    2928:	85030800 	strhi	r0, [r3, #-2048]	; 0x800
    292c:	14030103 	strne	r0, [r3], #-259	; 0x103
    2930:	586c0301 	stmdapl	ip!, {r0, r8, r9}^
    2934:	23201403 	teqcs	r0, #50331648	; 0x3000000
    2938:	2a6b4d67 	bcs	1ad5edc <_Min_Stack_Size+0x1ad5adc>
    293c:	21212121 	teqcs	r1, r1, lsr #2
    2940:	4d402d59 	stclmi	13, cr2, [r0, #-356]	; 0xfffffe9c
    2944:	6921212c 	stmdbvs	r1!, {r2, r3, r5, r8, sp}
    2948:	02221e22 	eoreq	r1, r2, #544	; 0x220
    294c:	01010001 	tsteq	r1, r1
    2950:	a0020500 	andge	r0, r2, r0, lsl #10
    2954:	03080023 	movweq	r0, #32803	; 0x8023
    2958:	140103ba 	strne	r0, [r1], #-954	; 0x3ba
    295c:	23232331 	teqcs	r3, #-1006632960	; 0xc4000000
    2960:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    2964:	02022323 	andeq	r2, r2, #-1946157056	; 0x8c000000
    2968:	00010100 	andeq	r0, r1, r0, lsl #2
    296c:	23bc0205 			; <UNDEFINED> instruction: 0x23bc0205
    2970:	e5030800 	str	r0, [r3, #-2048]	; 0x800
    2974:	55190103 	ldrpl	r0, [r9, #-259]	; 0x103
    2978:	04024528 	streq	r4, [r2], #-1320	; 0x528
    297c:	00010100 	andeq	r0, r1, r0, lsl #2
    2980:	23d80205 	bicscs	r0, r8, #1342177280	; 0x50000000
    2984:	fd030800 	stc2	8, cr0, [r3, #-0]
    2988:	55190103 	ldrpl	r0, [r9, #-259]	; 0x103
    298c:	04024528 	streq	r4, [r2], #-1320	; 0x528
    2990:	00010100 	andeq	r0, r1, r0, lsl #2
    2994:	23f40205 	mvnscs	r0, #1342177280	; 0x50000000
    2998:	94030800 	strls	r0, [r3], #-2048	; 0x800
    299c:	0a030104 	beq	c2db4 <_Min_Stack_Size+0xc29b4>
    29a0:	09035501 	stmdbeq	r3, {r0, r8, sl, ip, lr}
    29a4:	4a7a0320 	bmi	1e8362c <_Min_Stack_Size+0x1e8322c>
    29a8:	0007025a 	andeq	r0, r7, sl, asr r2
    29ac:	05000101 	streq	r0, [r0, #-257]	; 0x101
    29b0:	00242002 	eoreq	r2, r4, r2
    29b4:	04af0308 	strteq	r0, [pc], #776	; 29bc <_Min_Stack_Size+0x25bc>
    29b8:	06021701 	streq	r1, [r2], -r1, lsl #14
    29bc:	00010100 	andeq	r0, r1, r0, lsl #2
    29c0:	242c0205 	strtcs	r0, [ip], #-517	; 0x205
    29c4:	f2030800 	vadd.i8	d0, d3, d0
    29c8:	551a0104 	ldrpl	r0, [sl, #-260]	; 0x104
    29cc:	03024528 	movweq	r4, #9512	; 0x2528
    29d0:	00010100 	andeq	r0, r1, r0, lsl #2
    29d4:	24480205 	strbcs	r0, [r8], #-517	; 0x205
    29d8:	91030800 	tstls	r3, r0, lsl #16
    29dc:	03190105 	tsteq	r9, #1073741825	; 0x40000001
    29e0:	0402660c 	streq	r6, [r2], #-1548	; 0x60c
    29e4:	00010100 	andeq	r0, r1, r0, lsl #2
    29e8:	245c0205 	ldrbcs	r0, [ip], #-517	; 0x205
    29ec:	b3030800 	movwlt	r0, #14336	; 0x3800
    29f0:	02170105 	andseq	r0, r7, #1073741825	; 0x40000001
    29f4:	01010006 	tsteq	r1, r6
    29f8:	68020500 	stmdavs	r2, {r8, sl}
    29fc:	03080024 	movweq	r0, #32804	; 0x8024
    2a00:	190105c8 	stmdbne	r1, {r3, r6, r7, r8, sl}
    2a04:	00580903 	subseq	r0, r8, r3, lsl #18
    2a08:	06010402 	streq	r0, [r1], -r2, lsl #8
    2a0c:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    2a10:	4e300601 	cfmsuba32mi	mvax0, mvax0, mvfx0, mvfx1
    2a14:	00010223 	andeq	r0, r1, r3, lsr #4
    2a18:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2a1c:	00248802 	eoreq	r8, r4, r2, lsl #16
    2a20:	05f00308 	ldrbeq	r0, [r0, #776]!	; 0x308
    2a24:	23471801 	movtcs	r1, #30721	; 0x7801
    2a28:	01000202 	tsteq	r0, r2, lsl #4
    2a2c:	0004ff01 	andeq	pc, r4, r1, lsl #30
    2a30:	9d000200 	sfmls	f0, 4, [r0, #-0]
    2a34:	02000001 	andeq	r0, r0, #1
    2a38:	0d0efb01 	vstreq	d15, [lr, #-4]
    2a3c:	01010100 	mrseq	r0, (UNDEF: 17)
    2a40:	00000001 	andeq	r0, r0, r1
    2a44:	01000001 	tsteq	r0, r1
    2a48:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2a4c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 2940 <_Min_Stack_Size+0x2540>
    2a50:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2a54:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2a58:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 2948 <_Min_Stack_Size+0x2548>
    2a5c:	61726269 	cmnvs	r2, r9, ror #4
    2a60:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2a64:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2a68:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2a6c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    2a70:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    2a74:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2a78:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2a7c:	2f726576 	svccs	0x00726576
    2a80:	00637273 	rsbeq	r7, r3, r3, ror r2
    2a84:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2a88:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2a8c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2a90:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2a94:	2f62696c 	svccs	0x0062696c
    2a98:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    2a9c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    2aa0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2aa4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2aa8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2aac:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2ab0:	0062696c 	rsbeq	r6, r2, ip, ror #18
    2ab4:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2ab8:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 29ac <_Min_Stack_Size+0x25ac>
    2abc:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2ac0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2ac4:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 29b4 <_Min_Stack_Size+0x25b4>
    2ac8:	61726269 	cmnvs	r2, r9, ror #4
    2acc:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2ad0:	534d432f 	movtpl	r4, #54063	; 0xd32f
    2ad4:	442f5349 	strtmi	r5, [pc], #-841	; 2adc <_Min_Stack_Size+0x26dc>
    2ad8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2adc:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    2ae0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2ae4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2ae8:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    2aec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2af0:	43006564 	movwmi	r6, #1380	; 0x564
    2af4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2af8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2afc:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2b00:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2b04:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2b08:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2b0c:	2f736569 	svccs	0x00736569
    2b10:	334d5453 	movtcc	r5, #54355	; 0xd453
    2b14:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2b18:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    2b1c:	72655064 	rsbvc	r5, r5, #100	; 0x64
    2b20:	5f687069 	svcpl	0x00687069
    2b24:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2b28:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2b2c:	4300636e 	movwmi	r6, #878	; 0x36e
    2b30:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2b34:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2b38:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2b3c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2b40:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2b44:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2b48:	2f736569 	svccs	0x00736569
    2b4c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    2b50:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    2b54:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2b58:	73000065 	movwvc	r0, #101	; 0x65
    2b5c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2b60:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    2b64:	64746c5f 	ldrbtvs	r6, [r4], #-3167	; 0xc5f
    2b68:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2b6c:	5f000001 	svcpl	0x00000001
    2b70:	61666564 	cmnvs	r6, r4, ror #10
    2b74:	5f746c75 	svcpl	0x00746c75
    2b78:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    2b7c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2b80:	73000002 	movwvc	r0, #2
    2b84:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2b88:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2b8c:	73000003 	movwvc	r0, #3
    2b90:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2b94:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    2b98:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    2b9c:	74730000 	ldrbtvc	r0, [r3], #-0
    2ba0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2ba4:	5f787834 	svcpl	0x00787834
    2ba8:	6364746c 	cmnvs	r4, #108, 8	; 0x6c000000
    2bac:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    2bb0:	6f630000 	svcvs	0x00630000
    2bb4:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    2bb8:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    2bbc:	00000600 	andeq	r0, r0, r0, lsl #12
    2bc0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2bc4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    2bc8:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    2bcc:	00682e63 	rsbeq	r2, r8, r3, ror #28
    2bd0:	00000005 	andeq	r0, r0, r5
    2bd4:	98020500 	stmdals	r2, {r8, sl}
    2bd8:	03080024 	movweq	r0, #32804	; 0x8024
    2bdc:	220100fb 	andcs	r0, r1, #251	; 0xfb
    2be0:	022d3d5a 	eoreq	r3, sp, #5760	; 0x1680
    2be4:	01010002 	tsteq	r1, r2
    2be8:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    2bec:	03080024 	movweq	r0, #32804	; 0x8024
    2bf0:	0301018c 	movweq	r0, #4492	; 0x118c
    2bf4:	6603011a 			; <UNDEFINED> instruction: 0x6603011a
    2bf8:	201a039e 	mulscs	sl, lr, r3
    2bfc:	4d212d22 	stcmi	13, cr2, [r1, #-136]!	; 0xffffff78
    2c00:	4d212d3e 	stcmi	13, cr2, [r1, #-248]!	; 0xffffff08
    2c04:	4d212d3e 	stcmi	13, cr2, [r1, #-248]!	; 0xffffff08
    2c08:	4c212d3e 	stcmi	13, cr2, [r1], #-248	; 0xffffff08
    2c0c:	211da575 	tstcs	sp, r5, ror r5
    2c10:	02833d22 	addeq	r3, r3, #2176	; 0x880
    2c14:	01010002 	tsteq	r1, r2
    2c18:	58020500 	stmdapl	r2, {r8, sl}
    2c1c:	03080025 	movweq	r0, #32805	; 0x8025
    2c20:	140101cd 	strne	r0, [r1], #-461	; 0x1cd
    2c24:	2121212f 	teqcs	r1, pc, lsr #2
    2c28:	21212121 	teqcs	r1, r1, lsr #2
    2c2c:	21212121 	teqcs	r1, r1, lsr #2
    2c30:	02022121 	andeq	r2, r2, #1073741832	; 0x40000008
    2c34:	00010100 	andeq	r0, r1, r0, lsl #2
    2c38:	257c0205 	ldrbcs	r0, [ip, #-517]!	; 0x205
    2c3c:	e8030800 	stmda	r3, {fp}
    2c40:	55190101 	ldrpl	r0, [r9, #-257]	; 0x101
    2c44:	04024528 	streq	r4, [r2], #-1320	; 0x528
    2c48:	00010100 	andeq	r0, r1, r0, lsl #2
    2c4c:	25980205 	ldrcs	r0, [r8, #517]	; 0x205
    2c50:	80030800 	andhi	r0, r3, r0, lsl #16
    2c54:	55190102 	ldrpl	r0, [r9, #-258]	; 0x102
    2c58:	04024528 	streq	r4, [r2], #-1320	; 0x528
    2c5c:	00010100 	andeq	r0, r1, r0, lsl #2
    2c60:	25b40205 	ldrcs	r0, [r4, #517]!	; 0x205
    2c64:	98030800 	stmdals	r3, {fp}
    2c68:	9b150102 	blls	543078 <_Min_Stack_Size+0x542c78>
    2c6c:	21212223 	teqcs	r1, r3, lsr #4
    2c70:	302f2f1e 	eorcc	r2, pc, lr, lsl pc	; <UNPREDICTABLE>
    2c74:	0003023d 	andeq	r0, r3, sp, lsr r2
    2c78:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2c7c:	0025ec02 	eoreq	lr, r5, r2, lsl #24
    2c80:	02ac0308 	adceq	r0, ip, #8, 6	; 0x20000000
    2c84:	212f1301 	teqcs	pc, r1, lsl #6
    2c88:	01000202 	tsteq	r0, r2, lsl #4
    2c8c:	02050001 	andeq	r0, r5, #1
    2c90:	080025f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, sp}
    2c94:	0102ba03 	tsteq	r2, r3, lsl #20
    2c98:	00060217 	andeq	r0, r6, r7, lsl r2
    2c9c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2ca0:	00260402 	eoreq	r0, r6, r2, lsl #8
    2ca4:	02cc0308 	sbceq	r0, ip, #8, 6	; 0x20000000
    2ca8:	06021701 	streq	r1, [r2], -r1, lsl #14
    2cac:	00010100 	andeq	r0, r1, r0, lsl #2
    2cb0:	26100205 	ldrcs	r0, [r0], -r5, lsl #4
    2cb4:	e1030800 	tst	r3, r0, lsl #16
    2cb8:	1b030102 	blne	c30c8 <_Min_Stack_Size+0xc2cc8>
    2cbc:	200d0301 	andcs	r0, sp, r1, lsl #6
    2cc0:	032e5803 	teqeq	lr, #196608	; 0x30000
    2cc4:	4d2f2e1b 	stcmi	14, cr2, [pc, #-108]!	; 2c60 <_Min_Stack_Size+0x2860>
    2cc8:	03313630 	teqeq	r1, #48, 12	; 0x3000000
    2ccc:	27252079 			; <UNDEFINED> instruction: 0x27252079
    2cd0:	2f206a03 	svccs	0x00206a03
    2cd4:	20150324 	andscs	r0, r5, r4, lsr #6
    2cd8:	2d3c6c03 	ldccs	12, cr6, [ip, #-12]!
    2cdc:	1503313d 	strne	r3, [r3, #-317]	; 0x13d
    2ce0:	2e700320 	cdpcs	3, 7, cr0, cr0, cr0, {1}
    2ce4:	2e780331 	mrccs	3, 3, r0, cr8, cr1, {1}
    2ce8:	2e780336 	mrccs	3, 3, r0, cr8, cr6, {1}
    2cec:	03200903 	teqeq	r0, #49152	; 0xc000
    2cf0:	3d262e78 	stccc	14, cr2, [r6, #-480]!	; 0xfffffe20
    2cf4:	3d234b24 	vstmdbcc	r3!, {d4-d21}
    2cf8:	2f233d2d 	svccs	0x00233d2d
    2cfc:	24221f32 	strtcs	r1, [r2], #-3890	; 0xf32
    2d00:	233d2d1c 	teqcs	sp, #28, 26	; 0x700
    2d04:	587fbf03 	ldmdapl	pc!, {r0, r1, r8, r9, sl, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    2d08:	2000c103 	andcs	ip, r0, r3, lsl #2
    2d0c:	04022221 	streq	r2, [r2], #-545	; 0x221
    2d10:	00010100 	andeq	r0, r1, r0, lsl #2
    2d14:	26cc0205 	strbcs	r0, [ip], r5, lsl #4
    2d18:	af030800 	svcge	0x00030800
    2d1c:	1c160103 	ldfnes	f0, [r6], {3}
    2d20:	03201803 	teqeq	r0, #196608	; 0x30000
    2d24:	0a032e77 	beq	ce708 <_Min_Stack_Size+0xce308>
    2d28:	20760320 	rsbscs	r0, r6, r0, lsr #6
    2d2c:	21200903 	teqcs	r0, r3, lsl #18
    2d30:	21206b03 	teqcs	r0, r3, lsl #22
    2d34:	26232123 	strtcs	r2, [r3], -r3, lsr #2
    2d38:	27212121 	strcs	r2, [r1, -r1, lsr #2]!
    2d3c:	21232123 	teqcs	r3, r3, lsr #2
    2d40:	01000302 	tsteq	r0, r2, lsl #6
    2d44:	02050001 	andeq	r0, r5, #1
    2d48:	08002700 	stmdaeq	r0, {r8, r9, sl, sp}
    2d4c:	0103e003 	tsteq	r3, r3
    2d50:	45281d19 	strmi	r1, [r8, #-3353]!	; 0xd19
    2d54:	01000402 	tsteq	r0, r2, lsl #8
    2d58:	02050001 	andeq	r0, r5, #1
    2d5c:	08002714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp}
    2d60:	0103f903 	tsteq	r3, r3, lsl #18
    2d64:	1f217615 	svcne	0x00217615
    2d68:	022f2221 	eoreq	r2, pc, #268435458	; 0x10000002
    2d6c:	01010001 	tsteq	r1, r1
    2d70:	30020500 	andcc	r0, r2, r0, lsl #10
    2d74:	03080027 	movweq	r0, #32807	; 0x8027
    2d78:	1301048c 	movwne	r0, #5260	; 0x148c
    2d7c:	0002022f 	andeq	r0, r2, pc, lsr #4
    2d80:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2d84:	00273802 	eoreq	r3, r7, r2, lsl #16
    2d88:	049d0308 	ldreq	r0, [sp], #776	; 0x308
    2d8c:	09031801 	stmdbeq	r3, {r0, fp, ip}
    2d90:	00040266 	andeq	r0, r4, r6, ror #4
    2d94:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2d98:	00274c02 	eoreq	r4, r7, r2, lsl #24
    2d9c:	04b80308 	ldrteq	r0, [r8], #776	; 0x308
    2da0:	200a0301 	andcs	r0, sl, r1, lsl #6
    2da4:	4e200e03 	cdpmi	14, 2, cr0, cr0, cr3, {0}
    2da8:	2e700367 	cdpcs	3, 7, cr0, cr0, cr7, {3}
    2dac:	03222123 	teqeq	r2, #-1073741816	; 0xc0000008
    2db0:	4b41207a 	blmi	104afa0 <_Min_Stack_Size+0x104aba0>
    2db4:	01000802 	tsteq	r0, r2, lsl #16
    2db8:	02050001 	andeq	r0, r5, #1
    2dbc:	08002790 	stmdaeq	r0, {r4, r7, r8, r9, sl, sp}
    2dc0:	0104df03 	tsteq	r4, r3, lsl #30
    2dc4:	02212f14 	eoreq	r2, r1, #20, 30	; 0x50
    2dc8:	01010002 	tsteq	r1, r2
    2dcc:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    2dd0:	03080027 	movweq	r0, #32807	; 0x8027
    2dd4:	190104f1 	stmdbne	r1, {r0, r4, r5, r6, r7, sl}
    2dd8:	0340281d 	movteq	r2, #2077	; 0x81d
    2ddc:	04027477 	streq	r7, [r2], #-1143	; 0x477
    2de0:	00010100 	andeq	r0, r1, r0, lsl #2
    2de4:	27bc0205 	ldrcs	r0, [ip, r5, lsl #4]!
    2de8:	8e030800 	cdphi	8, 0, cr0, cr3, cr0, {0}
    2dec:	0e030105 	adfeqs	f0, f3, f5
    2df0:	3d302d20 	ldccc	13, cr2, [r0, #-128]!	; 0xffffff80
    2df4:	0202222d 	andeq	r2, r2, #-805306366	; 0xd0000002
    2df8:	00010100 	andeq	r0, r1, r0, lsl #2
    2dfc:	27d80205 	ldrbcs	r0, [r8, r5, lsl #4]
    2e00:	a9030800 	stmdbge	r3, {fp}
    2e04:	2f140105 	svccs	0x00140105
    2e08:	02022121 	andeq	r2, r2, #1073741832	; 0x40000008
    2e0c:	00010100 	andeq	r0, r1, r0, lsl #2
    2e10:	27e40205 	strbcs	r0, [r4, r5, lsl #4]!
    2e14:	bd030800 	stclt	8, cr0, [r3, #-0]
    2e18:	4b280105 	blmi	a03234 <_Min_Stack_Size+0xa02e34>
    2e1c:	273f4723 	ldrcs	r4, [pc, -r3, lsr #14]!
    2e20:	1f2f2d1b 	svcne	0x002f2d1b
    2e24:	1e200a03 	vmulne.f32	s0, s0, s6
    2e28:	252c2224 	strcs	r2, [ip, #-548]!	; 0x224
    2e2c:	0327301f 	teqeq	r7, #31
    2e30:	0a032e79 	beq	ce81c <_Min_Stack_Size+0xce41c>
    2e34:	3f1e2320 	svccc	0x001e2320
    2e38:	311d312b 	tstcc	sp, fp, lsr #2
    2e3c:	212d2f22 	teqcs	sp, r2, lsr #30
    2e40:	2e710321 	cdpcs	3, 7, cr0, cr1, cr1, {1}
    2e44:	01000202 	tsteq	r0, r2, lsl #4
    2e48:	02050001 	andeq	r0, r5, #1
    2e4c:	08002858 	stmdaeq	r0, {r3, r4, r6, fp, sp}
    2e50:	0105fa03 	tsteq	r5, r3, lsl #20
    2e54:	00020214 	andeq	r0, r2, r4, lsl r2
    2e58:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2e5c:	00285c02 	eoreq	r5, r8, r2, lsl #24
    2e60:	06890308 	streq	r0, [r9], r8, lsl #6
    2e64:	02021401 	andeq	r1, r2, #16777216	; 0x1000000
    2e68:	00010100 	andeq	r0, r1, r0, lsl #2
    2e6c:	28600205 	stmdacs	r0!, {r0, r2, r9}^
    2e70:	99030800 	stmdbls	r3, {fp}
    2e74:	09030106 	stmdbeq	r3, {r1, r2, r8}
    2e78:	20770301 	rsbscs	r0, r7, r1, lsl #6
    2e7c:	24200b03 	strtcs	r0, [r0], #-2819	; 0xb03
    2e80:	03301f4f 	teqeq	r0, #316	; 0x13c
    2e84:	1d244a0b 	vstmdbne	r4!, {s8-s18}
    2e88:	76033532 			; <UNDEFINED> instruction: 0x76033532
    2e8c:	241c242e 	ldrcs	r2, [ip], #-1070	; 0x42e
    2e90:	312f1c26 	teqcc	pc, r6, lsr #24
    2e94:	2523212a 	strcs	r2, [r3, #-298]!	; 0x12a
    2e98:	0502221e 	streq	r2, [r2, #-542]	; 0x21e
    2e9c:	00010100 	andeq	r0, r1, r0, lsl #2
    2ea0:	28b80205 	ldmcs	r8!, {r0, r2, r9}
    2ea4:	d7030800 	strle	r0, [r3, -r0, lsl #16]
    2ea8:	30170106 	andscc	r0, r7, r6, lsl #2
    2eac:	031f4f24 	tsteq	pc, #36, 30	; 0x90
    2eb0:	3e2f3c0c 	cdpcc	12, 2, cr3, cr15, cr12, {0}
    2eb4:	4c1f4f24 	ldcmi	15, cr4, [pc], {36}	; 0x24
    2eb8:	694a0b03 	stmdbvs	sl, {r0, r1, r8, r9, fp}^
    2ebc:	022e5b03 	eoreq	r5, lr, #3072	; 0xc00
    2ec0:	01010005 	tsteq	r1, r5
    2ec4:	10020500 	andne	r0, r2, r0, lsl #10
    2ec8:	03080029 	movweq	r0, #32809	; 0x8029
    2ecc:	190107c9 	stmdbne	r1, {r0, r3, r6, r7, r8, r9, sl}
    2ed0:	02462656 	subeq	r2, r6, #90177536	; 0x5600000
    2ed4:	01010003 	tsteq	r1, r3
    2ed8:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    2edc:	03080029 	movweq	r0, #32809	; 0x8029
    2ee0:	180107e3 	stmdane	r1, {r0, r1, r5, r6, r7, r8, r9, sl}
    2ee4:	02660903 	rsbeq	r0, r6, #49152	; 0xc000
    2ee8:	01010004 	tsteq	r1, r4
    2eec:	40020500 	andmi	r0, r2, r0, lsl #10
    2ef0:	03080029 	movweq	r0, #32809	; 0x8029
    2ef4:	170107ff 			; <UNDEFINED> instruction: 0x170107ff
    2ef8:	01000602 	tsteq	r0, r2, lsl #12
    2efc:	02050001 	andeq	r0, r5, #1
    2f00:	0800294c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp}
    2f04:	01089203 	tsteq	r8, r3, lsl #4
    2f08:	58090318 	stmdapl	r9, {r3, r4, r8, r9}
    2f0c:	01040200 	mrseq	r0, R12_usr
    2f10:	02003c06 	andeq	r3, r0, #1536	; 0x600
    2f14:	22060104 	andcs	r0, r6, #4, 2
    2f18:	0102234e 	tsteq	r2, lr, asr #6
    2f1c:	00010100 	andeq	r0, r1, r0, lsl #2
    2f20:	296c0205 	stmdbcs	ip!, {r0, r2, r9}^
    2f24:	b8030800 	stmdalt	r3, {fp}
    2f28:	02170108 	andseq	r0, r7, #8, 2
    2f2c:	01010006 	tsteq	r1, r6
    2f30:	000005e4 	andeq	r0, r0, r4, ror #11
    2f34:	01880002 	orreq	r0, r8, r2
    2f38:	01020000 	mrseq	r0, (UNDEF: 2)
    2f3c:	000d0efb 	strdeq	r0, [sp], -fp
    2f40:	01010101 	tsteq	r1, r1, lsl #2
    2f44:	01000000 	mrseq	r0, (UNDEF: 0)
    2f48:	43010000 	movwmi	r0, #4096	; 0x1000
    2f4c:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2f50:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2f54:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2f58:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2f5c:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2f60:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2f64:	2f736569 	svccs	0x00736569
    2f68:	334d5453 	movtcc	r5, #54355	; 0xd453
    2f6c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2f70:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    2f74:	72655064 	rsbvc	r5, r5, #100	; 0x64
    2f78:	5f687069 	svcpl	0x00687069
    2f7c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2f80:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    2f84:	2f006372 	svccs	0x00006372
    2f88:	2f727375 	svccs	0x00727375
    2f8c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2f90:	2f656475 	svccs	0x00656475
    2f94:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2f98:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 2dfc <_Min_Stack_Size+0x29fc>
    2f9c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    2fa0:	2f00656e 	svccs	0x0000656e
    2fa4:	2f727375 	svccs	0x00727375
    2fa8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2fac:	2f656475 	svccs	0x00656475
    2fb0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2fb4:	43006269 	movwmi	r6, #617	; 0x269
    2fb8:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2fbc:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2fc0:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2fc4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2fc8:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2fcc:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2fd0:	2f736569 	svccs	0x00736569
    2fd4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    2fd8:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    2fdc:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    2fe0:	2f54532f 	svccs	0x0054532f
    2fe4:	334d5453 	movtcc	r5, #54355	; 0xd453
    2fe8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2fec:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    2ff0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2ff4:	4f430065 	svcmi	0x00430065
    2ff8:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2ffc:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3000:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3004:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3008:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    300c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3010:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3014:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3018:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    301c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    3020:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3024:	445f6870 	ldrbmi	r6, [pc], #-2160	; 302c <_Min_Stack_Size+0x2c2c>
    3028:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    302c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3030:	4f430063 	svcmi	0x00430063
    3034:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3038:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    303c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3040:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3044:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3048:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    304c:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    3050:	5349534d 	movtpl	r5, #37709	; 0x934d
    3054:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    3058:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    305c:	74730000 	ldrbtvc	r0, [r3], #-0
    3060:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3064:	5f787834 	svcpl	0x00787834
    3068:	2e636d66 	cdpcs	13, 6, cr6, cr3, cr6, {3}
    306c:	00010063 	andeq	r0, r1, r3, rrx
    3070:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    3074:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3078:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    307c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3080:	00020068 	andeq	r0, r2, r8, rrx
    3084:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    3088:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    308c:	00030068 	andeq	r0, r3, r8, rrx
    3090:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3094:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3098:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    309c:	00000400 	andeq	r0, r0, r0, lsl #8
    30a0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    30a4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    30a8:	6d665f78 	stclvs	15, cr5, [r6, #-480]!	; 0xfffffe20
    30ac:	00682e63 	rsbeq	r2, r8, r3, ror #28
    30b0:	63000005 	movwvs	r0, #5
    30b4:	5f65726f 	svcpl	0x0065726f
    30b8:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    30bc:	00060068 	andeq	r0, r6, r8, rrx
    30c0:	05000000 	streq	r0, [r0, #-0]
    30c4:	00297802 	eoreq	r7, r9, r2, lsl #16
    30c8:	01820308 	orreq	r0, r2, r8, lsl #6
    30cc:	272c2701 	strcs	r2, [ip, -r1, lsl #14]!
    30d0:	2d212d4d 	stccs	13, cr2, [r1, #-308]!	; 0xfffffecc
    30d4:	77032f67 	strvc	r2, [r3, -r7, ror #30]
    30d8:	0004023c 	andeq	r0, r4, ip, lsr r2
    30dc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    30e0:	0029b002 	eoreq	fp, r9, r2
    30e4:	019d0308 	orrseq	r0, sp, r8, lsl #6
    30e8:	2e1c0301 	cdpcs	3, 1, cr0, cr12, cr1, {0}
    30ec:	21213d21 	teqcs	r1, r1, lsr #26
    30f0:	03232121 	teqeq	r3, #1073741832	; 0x40000008
    30f4:	2f2f2e76 	svccs	0x002f2e76
    30f8:	2121212f 	teqcs	r1, pc, lsr #2
    30fc:	22232121 	eorcs	r2, r3, #1073741832	; 0x40000008
    3100:	2f1f301b 	svccs	0x001f301b
    3104:	03243d3d 	teqeq	r4, #3904	; 0xf40
    3108:	12032e70 	andne	r2, r3, #112, 28	; 0x700
    310c:	0c035c20 	stceq	12, cr5, [r3], {32}
    3110:	21222d58 	teqcs	r2, r8, asr sp
    3114:	2f211b22 	svccs	0x00211b22
    3118:	50292f2f 	eorpl	r2, r9, pc, lsr #30
    311c:	2e760332 	mrccs	3, 3, r0, cr6, cr2, {1}
    3120:	032e0a03 	teqeq	lr, #12288	; 0x3000
    3124:	00852013 	addeq	r2, r5, r3, lsl r0
    3128:	03010402 	movweq	r0, #5122	; 0x1402
    312c:	323e3c56 	eorscc	r3, lr, #22016	; 0x5600
    3130:	4b4b221c 	blmi	12cb9a8 <_Min_Stack_Size+0x12cb5a8>
    3134:	1803321c 	stmdane	r3, {r2, r3, r4, r9, ip, sp}
    3138:	222d2158 	eorcs	r2, sp, #88, 2
    313c:	211c2121 	tstcs	ip, r1, lsr #2
    3140:	2a322b2f 	bcs	c8de04 <_Min_Stack_Size+0xc8da04>
    3144:	0d032933 	stceq	9, cr2, [r3, #-204]	; 0xffffff34
    3148:	0003022e 	andeq	r0, r3, lr, lsr #4
    314c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3150:	002ac402 	eoreq	ip, sl, r2, lsl #8
    3154:	02810308 	addeq	r0, r1, #8, 6	; 0x20000000
    3158:	20180301 	andscs	r0, r8, r1, lsl #6
    315c:	03207903 	teqeq	r0, #49152	; 0xc000
    3160:	0e032072 	mcreq	0, 0, r2, cr3, cr2, {3}
    3164:	2071032e 	rsbscs	r0, r1, lr, lsr #6
    3168:	03201103 	teqeq	r0, #-1073741824	; 0xc0000000
    316c:	032f2078 	teqeq	pc, #120	; 0x78
    3170:	21342e79 	teqcs	r4, r9, ror lr
    3174:	2b207903 	blcs	821588 <_Min_Stack_Size+0x821188>
    3178:	21212222 	teqcs	r1, r2, lsr #4
    317c:	21232121 	teqcs	r3, r1, lsr #2
    3180:	7a032821 	bvc	cd20c <_Min_Stack_Size+0xcce0c>
    3184:	21222120 	teqcs	r2, r0, lsr #2
    3188:	1e271d21 	cdpne	13, 2, cr1, cr7, cr1, {1}
    318c:	21212221 	teqcs	r1, r1, lsr #4
    3190:	02022121 	andeq	r2, r2, #1073741832	; 0x40000008
    3194:	00010100 	andeq	r0, r1, r0, lsl #2
    3198:	2b1c0205 	blcs	7039b4 <_Min_Stack_Size+0x7035b4>
    319c:	ae030800 	cdpge	8, 0, cr0, cr3, cr0, {0}
    31a0:	28400102 	stmdacs	r0, {r1, r8}^
    31a4:	0005027d 	andeq	r0, r5, sp, ror r2
    31a8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    31ac:	002b4002 	eoreq	r4, fp, r2
    31b0:	02f70308 	rscseq	r0, r7, #8, 6	; 0x20000000
    31b4:	03231601 	teqeq	r3, #1048576	; 0x100000
    31b8:	2c3e2e09 	ldccs	14, cr2, [lr], #-36	; 0xffffffdc
    31bc:	21211f21 	teqcs	r1, r1, lsr #30
    31c0:	00020221 	andeq	r0, r2, r1, lsr #4
    31c4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    31c8:	002b6002 	eoreq	r6, fp, r2
    31cc:	03960308 	orrseq	r0, r6, #8, 6	; 0x20000000
    31d0:	2e160301 	cdpcs	3, 1, cr0, cr6, cr1, {0}
    31d4:	74032636 	strvc	r2, [r3], #-1590	; 0x636
    31d8:	03252820 	teqeq	r5, #32, 16	; 0x200000
    31dc:	332f2e74 	teqcc	pc, #116, 28	; 0x740
    31e0:	2075033e 	rsbscs	r0, r5, lr, lsr r3
    31e4:	0e032f21 	cdpeq	15, 0, cr2, cr3, cr1, {1}
    31e8:	20750320 	rsbscs	r0, r5, r0, lsr #6
    31ec:	03200e03 	teqeq	r0, #3, 28	; 0x30
    31f0:	1f342077 	svcne	0x00342077
    31f4:	1c331d22 	ldcne	13, cr1, [r3], #-136	; 0xffffff78
    31f8:	2e75032d 	cdpcs	3, 7, cr0, cr5, cr13, {1}
    31fc:	2e0e0333 	mcrcs	3, 0, r0, cr14, cr3, {1}
    3200:	3c670335 	stclcc	3, cr0, [r7], #-212	; 0xffffff2c
    3204:	2e760333 	mrccs	3, 3, r0, cr6, cr3, {1}
    3208:	032e0903 	teqeq	lr, #49152	; 0xc000
    320c:	21212e15 	teqcs	r1, r5, lsl lr
    3210:	00030222 	andeq	r0, r3, r2, lsr #4
    3214:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3218:	002bd802 	eoreq	sp, fp, r2, lsl #16
    321c:	03d70308 	bicseq	r0, r7, #8, 6	; 0x20000000
    3220:	200d0301 	andcs	r0, sp, r1, lsl #6
    3224:	2e7a031c 	mrccs	3, 3, r0, cr10, cr12, {0}
    3228:	221f301f 	andscs	r3, pc, #31
    322c:	21212121 	teqcs	r1, r1, lsr #2
    3230:	21212121 	teqcs	r1, r1, lsr #2
    3234:	21212121 	teqcs	r1, r1, lsr #2
    3238:	01000202 	tsteq	r0, r2, lsl #4
    323c:	02050001 	andeq	r0, r5, #1
    3240:	08002c08 	stmdaeq	r0, {r3, sl, fp, sp}
    3244:	0103f403 	tsteq	r3, r3, lsl #8
    3248:	32222316 	eorcc	r2, r2, #1476395008	; 0x58000000
    324c:	02322288 	eorseq	r2, r2, #136, 4	; 0x80000008
    3250:	0101000b 	tsteq	r1, fp
    3254:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    3258:	0308002c 	movweq	r0, #32812	; 0x802c
    325c:	1601049c 			; <UNDEFINED> instruction: 0x1601049c
    3260:	88322223 	ldmdahi	r2!, {r0, r1, r5, r9, sp}
    3264:	0b023222 	bleq	8faf4 <_Min_Stack_Size+0x8f6f4>
    3268:	00010100 	andeq	r0, r1, r0, lsl #2
    326c:	2c700205 	lfmcs	f0, 2, [r0], #-20	; 0xffffffec
    3270:	c3030800 	movwgt	r0, #14336	; 0x3800
    3274:	23150104 	tstcs	r5, #4, 2
    3278:	01024e33 	tsteq	r2, r3, lsr lr
    327c:	00010100 	andeq	r0, r1, r0, lsl #2
    3280:	2c800205 	sfmcs	f0, 4, [r0], {5}
    3284:	83030800 	movwhi	r0, #14336	; 0x3800
    3288:	3e140105 	mufccs	f0, f4, f5
    328c:	211f212c 	tstcs	pc, ip, lsr #2
    3290:	02212121 	eoreq	r2, r1, #1073741832	; 0x40000008
    3294:	01010002 	tsteq	r1, r2
    3298:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    329c:	0308002c 	movweq	r0, #32812	; 0x802c
    32a0:	03010594 	movweq	r0, #5524	; 0x1594
    32a4:	24212016 	strtcs	r2, [r1], #-22
    32a8:	71032626 	tstvc	r3, r6, lsr #12
    32ac:	2d211d20 	stccs	13, cr1, [r1, #-128]!	; 0xffffff80
    32b0:	2f274830 	svccs	0x00274830
    32b4:	2f1e1f21 	svccs	0x001e1f21
    32b8:	30272c21 	eorcc	r2, r7, r1, lsr #24
    32bc:	212f1e1f 	teqcs	pc, pc, lsl lr	; <UNPREDICTABLE>
    32c0:	1f30272c 	svcne	0x0030272c
    32c4:	2c212f1e 	stccs	15, cr2, [r1], #-120	; 0xffffff88
    32c8:	00020224 	andeq	r0, r2, r4, lsr #4
    32cc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    32d0:	002d0002 	eoreq	r0, sp, r2
    32d4:	05c80308 	strbeq	r0, [r8, #776]	; 0x308
    32d8:	20090301 	andcs	r0, r9, r1, lsl #6
    32dc:	7803281c 	stmdavc	r3, {r2, r3, r4, fp, sp}
    32e0:	212f1d20 	teqcs	pc, r0, lsr #26
    32e4:	21212121 	teqcs	r1, r1, lsr #2
    32e8:	21212121 	teqcs	r1, r1, lsr #2
    32ec:	21211c25 	teqcs	r1, r5, lsr #24
    32f0:	01022121 	tsteq	r2, r1, lsr #2
    32f4:	00010100 	andeq	r0, r1, r0, lsl #2
    32f8:	2d300205 	lfmcs	f0, 4, [r0, #-20]!	; 0xffffffec
    32fc:	e2030800 	and	r0, r3, #0, 16
    3300:	28150105 	ldmdacs	r5, {r0, r2, r8}
    3304:	000802a7 	andeq	r0, r8, r7, lsr #5
    3308:	05000101 	streq	r0, [r0, #-257]	; 0x101
    330c:	002d5802 	eoreq	r5, sp, r2, lsl #16
    3310:	06aa0308 	strteq	r0, [sl], r8, lsl #6
    3314:	2f645001 	svccs	0x00645001
    3318:	23212f2d 	teqcs	r1, #45, 30	; 0xb4
    331c:	0221211e 	eoreq	r2, r1, #-2147483641	; 0x80000007
    3320:	01010001 	tsteq	r1, r1
    3324:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    3328:	0308002d 	movweq	r0, #32813	; 0x802d
    332c:	030106be 	movweq	r0, #5822	; 0x16be
    3330:	212f2e1f 	teqcs	pc, pc, lsl lr	; <UNPREDICTABLE>
    3334:	222f2124 	eorcs	r2, pc, #36, 2
    3338:	21207603 	teqcs	r0, r3, lsl #12
    333c:	21211f22 	teqcs	r1, r2, lsr #30
    3340:	7a03212f 	bvc	cb804 <_Min_Stack_Size+0xcb404>
    3344:	200a032e 	andcs	r0, sl, lr, lsr #6
    3348:	4a0e0322 	bmi	383fd8 <_Min_Stack_Size+0x383bd8>
    334c:	03207203 	teqeq	r0, #805306368	; 0x30000000
    3350:	1f1f2010 	svcne	0x001f2010
    3354:	2d382323 	ldccs	3, cr2, [r8, #-140]!	; 0xffffff74
    3358:	1f223d1f 	svcne	0x00223d1f
    335c:	1f301f30 	svcne	0x00301f30
    3360:	207a0330 	rsbscs	r0, sl, r0, lsr r3
    3364:	20100336 	andscs	r0, r0, r6, lsr r3
    3368:	2a3c6203 	bcs	f1bb7c <_Min_Stack_Size+0xf1b77c>
    336c:	16032a32 			; <UNDEFINED> instruction: 0x16032a32
    3370:	206e032e 	rsbcs	r0, lr, lr, lsr #6
    3374:	2d201403 	cfstrscs	mvf1, [r0, #-12]!
    3378:	1d341b24 	vldmdbne	r4!, {d1-d18}
    337c:	332d3b1f 	teqcc	sp, #31744	; 0x7c00
    3380:	331c4f1b 	tstcc	ip, #27, 30	; 0x6c
    3384:	0329221d 	teqeq	r9, #-805306367	; 0xd0000001
    3388:	19032e6f 	stmdbne	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp}
    338c:	0231212e 	eorseq	r2, r1, #-2147483637	; 0x8000000b
    3390:	01010003 	tsteq	r1, r3
    3394:	58020500 	stmdapl	r2, {r8, sl}
    3398:	0308002e 	movweq	r0, #32814	; 0x802e
    339c:	03010798 	movweq	r0, #6040	; 0x1798
    33a0:	7903200d 	stmdbvc	r3, {r0, r2, r3, sp}
    33a4:	22232a20 	eorcs	r2, r3, #32, 20	; 0x20000
    33a8:	03212d21 	teqeq	r1, #2112	; 0x840
    33ac:	2121207a 	teqcs	r1, sl, ror r0
    33b0:	03212125 	teqeq	r1, #1073741833	; 0x40000009
    33b4:	1003207a 	andne	r2, r3, sl, ror r0
    33b8:	20780320 	rsbscs	r0, r8, r0, lsr #6
    33bc:	21212121 	teqcs	r1, r1, lsr #2
    33c0:	02222121 	eoreq	r2, r2, #1073741832	; 0x40000008
    33c4:	01010001 	tsteq	r1, r1
    33c8:	90020500 	andls	r0, r2, r0, lsl #10
    33cc:	0308002e 	movweq	r0, #32814	; 0x802e
    33d0:	030107b6 	movweq	r0, #6070	; 0x17b6
    33d4:	1f312009 	svcne	0x00312009
    33d8:	2f2a251e 	svccs	0x002a251e
    33dc:	22332923 	eorscs	r2, r3, #573440	; 0x8c000
    33e0:	01000202 	tsteq	r0, r2, lsl #4
    33e4:	02050001 	andeq	r0, r5, #1
    33e8:	08002eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, sp}
    33ec:	0107d003 	tsteq	r7, r3
    33f0:	48010903 	stmdami	r1, {r0, r1, r8, fp}
    33f4:	77034f26 	strvc	r4, [r3, -r6, lsr #30]
    33f8:	00040220 	andeq	r0, r4, r0, lsr #4
    33fc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3400:	002ed002 	eoreq	sp, lr, r2
    3404:	07ea0308 	strbeq	r0, [sl, r8, lsl #6]!
    3408:	09021601 	stmdbeq	r2, {r0, r9, sl, ip}
    340c:	00010100 	andeq	r0, r1, r0, lsl #2
    3410:	2ee40205 	cdpcs	2, 14, cr0, cr4, cr5, {0}
    3414:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    3418:	02160107 	andseq	r0, r6, #-1073741823	; 0xc0000001
    341c:	01010009 	tsteq	r1, r9
    3420:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    3424:	0308002e 	movweq	r0, #32814	; 0x802e
    3428:	41010888 	smlabbmi	r1, r8, r8, r0
    342c:	07027e26 	streq	r7, [r2, -r6, lsr #28]
    3430:	00010100 	andeq	r0, r1, r0, lsl #2
    3434:	2f200205 	svccs	0x00200205
    3438:	bc030800 	stclt	8, cr0, [r3], {-0}
    343c:	23170108 	tstcs	r7, #8, 2
    3440:	34304133 	ldrtcc	r4, [r0], #-307	; 0x133
    3444:	342e7a03 	strtcc	r7, [lr], #-2563	; 0xa03
    3448:	342e7a03 	strtcc	r7, [lr], #-2563	; 0xa03
    344c:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    3450:	34207a03 	strtcc	r7, [r0], #-2563	; 0xa03
    3454:	30413434 	subcc	r3, r1, r4, lsr r4
    3458:	2e7a0334 	mrccs	3, 3, r0, cr10, cr4, {1}
    345c:	2e7a0334 	mrccs	3, 3, r0, cr10, cr4, {1}
    3460:	207a0334 	rsbscs	r0, sl, r4, lsr r3
    3464:	2e7a0334 	mrccs	3, 3, r0, cr10, cr4, {1}
    3468:	2e700334 	mrccs	3, 3, r0, cr0, cr4, {1}
    346c:	79826703 	stmibvc	r2, {r0, r1, r8, r9, sl, sp, lr}
    3470:	02741903 	rsbseq	r1, r4, #49152	; 0xc000
    3474:	01010008 	tsteq	r1, r8
    3478:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
    347c:	0308002f 	movweq	r0, #32815	; 0x802f
    3480:	1a010989 	bne	45aac <_Min_Stack_Size+0x456ac>
    3484:	32304032 	eorscc	r4, r0, #50	; 0x32
    3488:	322a322a 	eorcc	r3, sl, #-1610612734	; 0xa0000002
    348c:	200a0324 	andcs	r0, sl, r4, lsr #6
    3490:	5c4a6603 	mcrrpl	6, 0, r6, sl, cr3
    3494:	01000502 	tsteq	r0, r2, lsl #10
    3498:	02050001 	andeq	r0, r5, #1
    349c:	08003008 	stmdaeq	r0, {r3, ip, sp}
    34a0:	0109c103 	tsteq	r9, r3, lsl #2
    34a4:	30403217 	subcc	r3, r0, r7, lsl r2
    34a8:	29332933 	ldmdbcs	r3!, {r0, r1, r4, r5, r8, fp, sp}
    34ac:	29331b33 	ldmdbcs	r3!, {r0, r1, r4, r5, r8, r9, fp, ip}
    34b0:	2e730333 	mrccs	3, 3, r0, cr3, cr3, {1}
    34b4:	00080286 	andeq	r0, r8, r6, lsl #5
    34b8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    34bc:	00305c02 	eorseq	r5, r0, r2, lsl #24
    34c0:	09ec0308 	stmibeq	ip!, {r3, r8, r9}^
    34c4:	010b0301 	tsteq	fp, r1, lsl #6
    34c8:	03207503 	teqeq	r0, #12582912	; 0xc00000
    34cc:	4024200b 	eormi	r2, r4, fp
    34d0:	78035243 	stmdavc	r3, {r0, r1, r6, r9, ip, lr}
    34d4:	33242120 	teqcc	r4, #32, 2
    34d8:	2011033a 	andscs	r0, r1, sl, lsr r3
    34dc:	3c5d0367 	mrrccc	3, 6, r0, sp, cr7
    34e0:	034a0e03 	movteq	r0, #44547	; 0xae03
    34e4:	65032e09 	strvs	r2, [r3, #-3593]	; 0xe09
    34e8:	4a12033c 	bmi	4841e0 <_Min_Stack_Size+0x483de0>
    34ec:	032e0903 	teqeq	lr, #49152	; 0xc000
    34f0:	05023c6d 	streq	r3, [r2, #-3181]	; 0xc6d
    34f4:	00010100 	andeq	r0, r1, r0, lsl #2
    34f8:	30c80205 	sbccc	r0, r8, r5, lsl #4
    34fc:	b4030800 	strlt	r0, [r3], #-2048	; 0x800
    3500:	3217010a 	andscc	r0, r7, #-2147483646	; 0x80000002
    3504:	29333040 	ldmdbcs	r3!, {r6, ip, sp}
    3508:	1b332933 	blne	ccd9dc <_Min_Stack_Size+0xccd5dc>
    350c:	03332933 	teqeq	r3, #835584	; 0xcc000
    3510:	02862e73 	addeq	r2, r6, #1840	; 0x730
    3514:	01010008 	tsteq	r1, r8
    3518:	00000226 	andeq	r0, r0, r6, lsr #4
    351c:	01880002 	orreq	r0, r8, r2
    3520:	01020000 	mrseq	r0, (UNDEF: 2)
    3524:	000d0efb 	strdeq	r0, [sp], -fp
    3528:	01010101 	tsteq	r1, r1, lsl #2
    352c:	01000000 	mrseq	r0, (UNDEF: 0)
    3530:	43010000 	movwmi	r0, #4096	; 0x1000
    3534:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3538:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    353c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3540:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3544:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3548:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    354c:	2f736569 	svccs	0x00736569
    3550:	334d5453 	movtcc	r5, #54355	; 0xd453
    3554:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    3558:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    355c:	72655064 	rsbvc	r5, r5, #100	; 0x64
    3560:	5f687069 	svcpl	0x00687069
    3564:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3568:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    356c:	2f006372 	svccs	0x00006372
    3570:	2f727375 	svccs	0x00727375
    3574:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3578:	2f656475 	svccs	0x00656475
    357c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3580:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 33e4 <_Min_Stack_Size+0x2fe4>
    3584:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    3588:	2f00656e 	svccs	0x0000656e
    358c:	2f727375 	svccs	0x00727375
    3590:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3594:	2f656475 	svccs	0x00656475
    3598:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    359c:	43006269 	movwmi	r6, #617	; 0x269
    35a0:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    35a4:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    35a8:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    35ac:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    35b0:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    35b4:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    35b8:	2f736569 	svccs	0x00736569
    35bc:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    35c0:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    35c4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    35c8:	2f54532f 	svccs	0x0054532f
    35cc:	334d5453 	movtcc	r5, #54355	; 0xd453
    35d0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    35d4:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    35d8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    35dc:	4f430065 	svcmi	0x00430065
    35e0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    35e4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    35e8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    35ec:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    35f0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    35f4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    35f8:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    35fc:	5349534d 	movtpl	r5, #37709	; 0x934d
    3600:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    3604:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3608:	524f4300 	subpl	r4, pc, #0, 6
    360c:	5f584554 	svcpl	0x00584554
    3610:	5f46344d 	svcpl	0x0046344d
    3614:	334d5453 	movtcc	r5, #54355	; 0xd453
    3618:	2f344632 	svccs	0x00344632
    361c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3620:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3624:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    3628:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    362c:	5f787834 	svcpl	0x00787834
    3630:	50647453 	rsbpl	r7, r4, r3, asr r4
    3634:	70697265 	rsbvc	r7, r9, r5, ror #4
    3638:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    363c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3640:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3644:	74730000 	ldrbtvc	r0, [r3], #-0
    3648:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    364c:	5f787834 	svcpl	0x00787834
    3650:	2e676e72 	mcrcs	14, 3, r6, cr7, cr2, {3}
    3654:	00010063 	andeq	r0, r1, r3, rrx
    3658:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    365c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3660:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3664:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3668:	00020068 	andeq	r0, r2, r8, rrx
    366c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    3670:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3674:	00030068 	andeq	r0, r3, r8, rrx
    3678:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    367c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3680:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    3684:	00000400 	andeq	r0, r0, r0, lsl #8
    3688:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    368c:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    3690:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    3694:	74730000 	ldrbtvc	r0, [r3], #-0
    3698:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    369c:	5f787834 	svcpl	0x00787834
    36a0:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    36a4:	00060068 	andeq	r0, r6, r8, rrx
    36a8:	05000000 	streq	r0, [r0, #-0]
    36ac:	00311c02 	eorseq	r1, r1, r2, lsl #24
    36b0:	00e30308 	rsceq	r0, r3, r8, lsl #6
    36b4:	2f4d2201 	svccs	0x004d2201
    36b8:	0002022d 	andeq	r0, r2, sp, lsr #4
    36bc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    36c0:	00313402 	eorseq	r3, r1, r2, lsl #8
    36c4:	00f20308 	rscseq	r0, r2, r8, lsl #6
    36c8:	28551901 	ldmdacs	r5, {r0, r8, fp, ip}^
    36cc:	00040245 	andeq	r0, r4, r5, asr #4
    36d0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    36d4:	00315002 	eorseq	r5, r1, r2
    36d8:	01b00308 	lslseq	r0, r8, #6
    36dc:	02591401 	subseq	r1, r9, #16777216	; 0x1000000
    36e0:	01010001 	tsteq	r1, r1
    36e4:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    36e8:	03080031 	movweq	r0, #32817	; 0x8031
    36ec:	1901028b 	stmdbne	r1, {r0, r1, r3, r7, r9}
    36f0:	02452855 	subeq	r2, r5, #5570560	; 0x550000
    36f4:	01010004 	tsteq	r1, r4
    36f8:	78020500 	stmdavc	r2, {r8, sl}
    36fc:	03080031 	movweq	r0, #32817	; 0x8031
    3700:	180102a5 	stmdane	r1, {r0, r2, r5, r7, r9}
    3704:	02660c03 	rsbeq	r0, r6, #768	; 0x300
    3708:	01010004 	tsteq	r1, r4
    370c:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    3710:	03080031 	movweq	r0, #32817	; 0x8031
    3714:	160102c6 	strne	r0, [r1], -r6, asr #5
    3718:	01000802 	tsteq	r0, r2, lsl #16
    371c:	02050001 	andeq	r0, r5, #1
    3720:	0800319c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, sp}
    3724:	0102d603 	tsteq	r2, r3, lsl #12
    3728:	660c0318 			; <UNDEFINED> instruction: 0x660c0318
    372c:	01000402 	tsteq	r0, r2, lsl #8
    3730:	02050001 	andeq	r0, r5, #1
    3734:	080031b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, sp}
    3738:	0102f403 	tsteq	r2, r3, lsl #8
    373c:	00080217 	andeq	r0, r8, r7, lsl r2
    3740:	Address 0x0000000000003740 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000072 	andeq	r0, r0, r2, ror r0
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
      14:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
      18:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; ffffff0c <_estack+0xdffcff0c>
      1c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
      20:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      24:	732f3446 	teqvc	pc, #1174405120	; 0x46000000
      28:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
      2c:	735f7075 	cmpvc	pc, #117	; 0x75
      30:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      34:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
      38:	3933345f 	ldmdbcc	r3!, {r0, r1, r2, r3, r4, r6, sl, ip, sp}
      3c:	732e7878 	teqvc	lr, #120, 16	; 0x780000
      40:	6f682f00 	svcvs	0x00682f00
      44:	682f656d 	stmdavs	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	; <UNPREDICTABLE>
      48:	2f736470 	svccs	0x00736470
      4c:	6b726f77 	blvs	1c9be30 <_Min_Stack_Size+0x1c9ba30>
      50:	63617073 	cmnvs	r1, #115	; 0x73
      54:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xf65
      58:	4632336d 	ldrtmi	r3, [r2], -sp, ror #6
      5c:	50475f34 	subpl	r5, r7, r4, lsr pc
      60:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 68 <_Min_Heap_Size+0x68>
      64:	006f6d65 	rsbeq	r6, pc, r5, ror #26
      68:	20554e47 	subscs	r4, r5, r7, asr #28
      6c:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      70:	0034322e 	eorseq	r3, r4, lr, lsr #4
      74:	05da8001 	ldrbeq	r8, [sl, #1]
      78:	00040000 	andeq	r0, r4, r0
      7c:	00000012 	andeq	r0, r0, r2, lsl r0
      80:	02870104 	addeq	r0, r7, #4, 2
      84:	8d010000 	stchi	0, cr0, [r1, #-0]
      88:	ab000001 	blge	94 <_Min_Heap_Size+0x94>
      8c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
      90:	00000000 	andeq	r0, r0, r0
      94:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
      98:	02000000 	andeq	r0, r0, #0
      9c:	01530601 	cmpeq	r3, r1, lsl #12
      a0:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
      a4:	02000001 	andeq	r0, r0, #1
      a8:	0000371c 	andeq	r3, r0, ip, lsl r7
      ac:	08010200 	stmdaeq	r1, {r9}
      b0:	00000151 	andeq	r0, r0, r1, asr r1
      b4:	06050202 	streq	r0, [r5], -r2, lsl #4
      b8:	03000001 	movweq	r0, #1
      bc:	0000005c 	andeq	r0, r0, ip, asr r0
      c0:	00502602 	subseq	r2, r0, r2, lsl #12
      c4:	02020000 	andeq	r0, r2, #0
      c8:	0001e807 	andeq	lr, r1, r7, lsl #16
      cc:	037a0300 	cmneq	sl, #0, 6
      d0:	37020000 	strcc	r0, [r2, -r0]
      d4:	00000062 	andeq	r0, r0, r2, rrx
      d8:	ec050402 	cfstrs	mvf0, [r5], {2}
      dc:	03000000 	movweq	r0, #0
      e0:	00000051 	andeq	r0, r0, r1, asr r0
      e4:	00743802 	rsbseq	r3, r4, r2, lsl #16
      e8:	04020000 	streq	r0, [r2], #-0
      ec:	00017b07 	andeq	r7, r1, r7, lsl #22
      f0:	05080200 	streq	r0, [r8, #-512]	; 0x200
      f4:	000000e7 	andeq	r0, r0, r7, ror #1
      f8:	76070802 	strvc	r0, [r7], -r2, lsl #16
      fc:	04000001 	streq	r0, [r0], #-1
     100:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     104:	04020074 	streq	r0, [r2], #-116	; 0x74
     108:	00018007 	andeq	r8, r1, r7
     10c:	011b0300 	tsteq	fp, r0, lsl #6
     110:	2a030000 	bcs	c0118 <_Min_Stack_Size+0xbfd18>
     114:	0000002c 	andeq	r0, r0, ip, lsr #32
     118:	00005e03 	andeq	r5, r0, r3, lsl #28
     11c:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
     120:	03000000 	movweq	r0, #0
     124:	0000037c 	andeq	r0, r0, ip, ror r3
     128:	00574103 	subseq	r4, r7, r3, lsl #2
     12c:	53030000 	movwpl	r0, #12288	; 0x3000
     130:	03000000 	movweq	r0, #0
     134:	00006942 	andeq	r6, r0, r2, asr #18
     138:	07040200 	streq	r0, [r4, -r0, lsl #4]
     13c:	0000002c 	andeq	r0, r0, ip, lsr #32
     140:	0000b805 	andeq	fp, r0, r5, lsl #16
     144:	048c0600 	streq	r0, [ip], #1536	; 0x600
     148:	01ea0170 	mvneq	r0, r0, ror r1
     14c:	77070000 	strvc	r0, [r7, -r0]
     150:	04000000 	streq	r0, [r0], #-0
     154:	01ea0172 	mvneq	r0, r2, ror r1
     158:	07000000 	streq	r0, [r0, -r0]
     15c:	000000da 	ldrdeq	r0, [r0], -sl
     160:	ca017304 	bgt	5cd78 <_Min_Stack_Size+0x5c978>
     164:	04000000 	streq	r0, [r0], #-0
     168:	00020c07 	andeq	r0, r2, r7, lsl #24
     16c:	01740400 	cmneq	r4, r0, lsl #8
     170:	000000ca 	andeq	r0, r0, sl, asr #1
     174:	014b0708 	cmpeq	fp, r8, lsl #14
     178:	75040000 	strvc	r0, [r4, #-0]
     17c:	0000ca01 	andeq	ip, r0, r1, lsl #20
     180:	53080c00 	movwpl	r0, #35840	; 0x8c00
     184:	04005243 	streq	r5, [r0], #-579	; 0x243
     188:	00ca0176 	sbceq	r0, sl, r6, ror r1
     18c:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
     190:	00524343 	subseq	r4, r2, r3, asr #6
     194:	ca017704 	bgt	5ddac <_Min_Stack_Size+0x5d9ac>
     198:	14000000 	strne	r0, [r0], #-0
     19c:	50485308 	subpl	r5, r8, r8, lsl #6
     1a0:	01780400 	cmneq	r8, r0, lsl #8
     1a4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     1a8:	01bb0718 			; <UNDEFINED> instruction: 0x01bb0718
     1ac:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
     1b0:	0000ca01 	andeq	ip, r0, r1, lsl #20
     1b4:	23072400 	movwcs	r2, #29696	; 0x7400
     1b8:	04000001 	streq	r0, [r0], #-1
     1bc:	00ca017a 	sbceq	r0, sl, sl, ror r1
     1c0:	07280000 	streq	r0, [r8, -r0]!
     1c4:	0000022b 	andeq	r0, r0, fp, lsr #4
     1c8:	ca017b04 	bgt	5ede0 <_Min_Stack_Size+0x5e9e0>
     1cc:	2c000000 	stccs	0, cr0, [r0], {-0}
     1d0:	00021607 	andeq	r1, r2, r7, lsl #12
     1d4:	017c0400 	cmneq	ip, r0, lsl #8
     1d8:	000000ca 	andeq	r0, r0, sl, asr #1
     1dc:	01d70730 	bicseq	r0, r7, r0, lsr r7
     1e0:	7d040000 	stcvc	0, cr0, [r4, #-0]
     1e4:	0000ca01 	andeq	ip, r0, r1, lsl #20
     1e8:	f5073400 			; <UNDEFINED> instruction: 0xf5073400
     1ec:	04000000 	streq	r0, [r0], #-0
     1f0:	00ca017e 	sbceq	r0, sl, lr, ror r1
     1f4:	07380000 	ldreq	r0, [r8, -r0]!
     1f8:	00000384 	andeq	r0, r0, r4, lsl #7
     1fc:	ca017f04 	bgt	5fe14 <_Min_Stack_Size+0x5fa14>
     200:	3c000000 	stccc	0, cr0, [r0], {-0}
     204:	52465008 	subpl	r5, r6, #8
     208:	01800400 	orreq	r0, r0, r0, lsl #8
     20c:	00000214 	andeq	r0, r0, r4, lsl r2
     210:	46440840 	strbmi	r0, [r4], -r0, asr #16
     214:	81040052 	qaddhi	r0, r2, r4
     218:	0001ea01 	andeq	lr, r1, r1, lsl #20
     21c:	41084800 	tstmi	r8, r0, lsl #16
     220:	04005244 	streq	r5, [r0], #-580	; 0x244
     224:	01ea0182 	mvneq	r0, r2, lsl #3
     228:	074c0000 	strbeq	r0, [ip, -r0]
     22c:	0000023a 	andeq	r0, r0, sl, lsr r2
     230:	2e018304 	cdpcs	3, 0, cr8, cr1, cr4, {0}
     234:	50000002 	andpl	r0, r0, r2
     238:	00021107 	andeq	r1, r2, r7, lsl #2
     23c:	01840400 	orreq	r0, r4, r0, lsl #8
     240:	00000248 	andeq	r0, r0, r8, asr #4
     244:	023f0760 	eorseq	r0, pc, #96, 14	; 0x1800000
     248:	85040000 	strhi	r0, [r4, #-0]
     24c:	00023801 	andeq	r3, r2, r1, lsl #16
     250:	b8077400 	stmdalt	r7, {sl, ip, sp, lr}
     254:	04000003 	streq	r0, [r0], #-3
     258:	00ca0186 	sbceq	r0, sl, r6, lsl #3
     25c:	00880000 	addeq	r0, r8, r0
     260:	0000ca09 	andeq	ip, r0, r9, lsl #20
     264:	00970a00 	addseq	r0, r7, r0, lsl #20
     268:	01ff0000 	mvnseq	r0, r0
     26c:	c30b0000 	movwgt	r0, #45056	; 0xb000
     270:	0b000000 	bleq	278 <_Min_Heap_Size+0x278>
     274:	01ef0500 	mvneq	r0, r0, lsl #10
     278:	b80a0000 	stmdalt	sl, {}	; <UNPREDICTABLE>
     27c:	14000000 	strne	r0, [r0], #-0
     280:	0b000002 	bleq	290 <_Min_Heap_Size+0x290>
     284:	000000c3 	andeq	r0, r0, r3, asr #1
     288:	19090001 	stmdbne	r9, {r0}
     28c:	05000002 	streq	r0, [r0, #-2]
     290:	00000204 	andeq	r0, r0, r4, lsl #4
     294:	0000b80a 	andeq	fp, r0, sl, lsl #16
     298:	00022e00 	andeq	r2, r2, r0, lsl #28
     29c:	00c30b00 	sbceq	r0, r3, r0, lsl #22
     2a0:	00030000 	andeq	r0, r3, r0
     2a4:	00023309 	andeq	r3, r2, r9, lsl #6
     2a8:	021e0500 	andseq	r0, lr, #0, 10
     2ac:	b80a0000 	stmdalt	sl, {}	; <UNPREDICTABLE>
     2b0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     2b4:	0b000002 	bleq	2c4 <_Min_Heap_Size+0x2c4>
     2b8:	000000c3 	andeq	r0, r0, r3, asr #1
     2bc:	4d090004 	stcmi	0, cr0, [r9, #-16]
     2c0:	05000002 	streq	r0, [r0, #-2]
     2c4:	00000238 	andeq	r0, r0, r8, lsr r2
     2c8:	00009a0c 	andeq	r9, r0, ip, lsl #20
     2cc:	01870400 	orreq	r0, r7, r0, lsl #8
     2d0:	000000cf 	andeq	r0, r0, pc, asr #1
     2d4:	0000ad05 	andeq	sl, r0, r5, lsl #26
     2d8:	05010d00 	streq	r0, [r1, #-3328]	; 0xd00
     2dc:	027901f7 	rsbseq	r0, r9, #-1073741763	; 0xc000003d
     2e0:	d20e0000 	andle	r0, lr, #0
     2e4:	0000000e 	andeq	r0, r0, lr
     2e8:	5445530f 	strbpl	r5, [r5], #-783	; 0x30f
     2ec:	06000100 	streq	r0, [r0], -r0, lsl #2
     2f0:	033e051c 	teqeq	lr, #28, 10	; 0x7000000
     2f4:	000002dc 	ldrdeq	r0, [r0], -ip
     2f8:	52434108 	subpl	r4, r3, #8, 2
     2fc:	03400500 	movteq	r0, #1280	; 0x500
     300:	000000ca 	andeq	r0, r0, sl, asr #1
     304:	00e20700 	rsceq	r0, r2, r0, lsl #14
     308:	41050000 	mrsmi	r0, (UNDEF: 5)
     30c:	0000ca03 	andeq	ip, r0, r3, lsl #20
     310:	df070400 	svcle	0x00070400
     314:	05000000 	streq	r0, [r0, #-0]
     318:	00ca0342 	sbceq	r0, sl, r2, asr #6
     31c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     320:	05005253 	streq	r5, [r0, #-595]	; 0x253
     324:	00ca0343 	sbceq	r0, sl, r3, asr #6
     328:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     32c:	05005243 	streq	r5, [r0, #-579]	; 0x243
     330:	00ca0344 	sbceq	r0, sl, r4, asr #6
     334:	07100000 	ldreq	r0, [r0, -r0]
     338:	000003c8 	andeq	r0, r0, r8, asr #7
     33c:	ca034505 	bgt	d1758 <_Min_Stack_Size+0xd1358>
     340:	14000000 	strne	r0, [r0], #-0
     344:	00012807 	andeq	r2, r1, r7, lsl #16
     348:	03460500 	movteq	r0, #25856	; 0x6500
     34c:	000000ca 	andeq	r0, r0, sl, asr #1
     350:	920c0018 	andls	r0, ip, #24
     354:	05000003 	streq	r0, [r0, #-3]
     358:	02790347 	rsbseq	r0, r9, #469762049	; 0x1c000001
     35c:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
     360:	0b044b05 	bleq	112f7c <_Min_Stack_Size+0x112b7c>
     364:	08000003 	stmdaeq	r0, {r0, r1}
     368:	05005243 	streq	r5, [r0, #-579]	; 0x243
     36c:	00ca044d 	sbceq	r0, sl, sp, asr #8
     370:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     374:	00525343 	subseq	r5, r2, r3, asr #6
     378:	ca044e05 	bgt	113b94 <_Min_Stack_Size+0x113794>
     37c:	04000000 	streq	r0, [r0], #-0
     380:	00450c00 	subeq	r0, r5, r0, lsl #24
     384:	4f050000 	svcmi	0x00050000
     388:	0002e804 	andeq	lr, r2, r4, lsl #16
     38c:	05900600 	ldreq	r0, [r0, #1536]	; 0x600
     390:	04c00455 	strbeq	r0, [r0], #1109	; 0x455
     394:	43080000 	movwmi	r0, #32768	; 0x8000
     398:	57050052 	smlsdpl	r5, r2, r0, r0
     39c:	0000ca04 	andeq	ip, r0, r4, lsl #20
     3a0:	0a070000 	beq	1c03a8 <_Min_Stack_Size+0x1bffa8>
     3a4:	05000000 	streq	r0, [r0, #-0]
     3a8:	00ca0458 	sbceq	r0, sl, r8, asr r4
     3ac:	07040000 	streq	r0, [r4, -r0]
     3b0:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
     3b4:	ca045905 	bgt	1167d0 <_Min_Stack_Size+0x1163d0>
     3b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     3bc:	52494308 	subpl	r4, r9, #8, 6	; 0x20000000
     3c0:	045a0500 	ldrbeq	r0, [sl], #-1280	; 0x500
     3c4:	000000ca 	andeq	r0, r0, sl, asr #1
     3c8:	007d070c 	rsbseq	r0, sp, ip, lsl #14
     3cc:	5b050000 	blpl	1403d4 <_Min_Stack_Size+0x13ffd4>
     3d0:	0000ca04 	andeq	ip, r0, r4, lsl #20
     3d4:	23071000 	movwcs	r1, #28672	; 0x7000
     3d8:	05000000 	streq	r0, [r0, #-0]
     3dc:	00ca045c 	sbceq	r0, sl, ip, asr r4
     3e0:	07140000 	ldreq	r0, [r4, -r0]
     3e4:	00000389 	andeq	r0, r0, r9, lsl #7
     3e8:	ca045d05 	bgt	117804 <_Min_Stack_Size+0x117404>
     3ec:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     3f0:	00023f07 	andeq	r3, r2, r7, lsl #30
     3f4:	045e0500 	ldrbeq	r0, [lr], #-1280	; 0x500
     3f8:	000000b8 	strheq	r0, [r0], -r8
     3fc:	0012071c 	andseq	r0, r2, ip, lsl r7
     400:	5f050000 	svcpl	0x00050000
     404:	0000ca04 	andeq	ip, r0, r4, lsl #20
     408:	10072000 	andne	r2, r7, r0
     40c:	05000001 	streq	r0, [r0, #-1]
     410:	00ca0460 	sbceq	r0, sl, r0, ror #8
     414:	07240000 	streq	r0, [r4, -r0]!
     418:	00000249 	andeq	r0, r0, r9, asr #4
     41c:	04046105 	streq	r6, [r4], #-261	; 0x105
     420:	28000002 	stmdacs	r0, {r1}
     424:	00037207 	andeq	r7, r3, r7, lsl #4
     428:	04620500 	strbteq	r0, [r2], #-1280	; 0x500
     42c:	000000ca 	andeq	r0, r0, sl, asr #1
     430:	001b0730 	andseq	r0, fp, r0, lsr r7
     434:	63050000 	movwvs	r0, #20480	; 0x5000
     438:	0000ca04 	andeq	ip, r0, r4, lsl #20
     43c:	39073400 	stmdbcc	r7, {sl, ip, sp}
     440:	05000001 	streq	r0, [r0, #-1]
     444:	00ca0464 	sbceq	r0, sl, r4, ror #8
     448:	07380000 	ldreq	r0, [r8, -r0]!
     44c:	00000253 	andeq	r0, r0, r3, asr r2
     450:	b8046505 	stmdalt	r4, {r0, r2, r8, sl, sp, lr}
     454:	3c000000 	stccc	0, cr0, [r0], {-0}
     458:	0000a307 	andeq	sl, r0, r7, lsl #6
     45c:	04660500 	strbteq	r0, [r6], #-1280	; 0x500
     460:	000000ca 	andeq	r0, r0, sl, asr #1
     464:	015f0740 	cmpeq	pc, r0, asr #14
     468:	67050000 	strvs	r0, [r5, -r0]
     46c:	0000ca04 	andeq	ip, r0, r4, lsl #20
     470:	90074400 	andls	r4, r7, r0, lsl #8
     474:	05000000 	streq	r0, [r0, #-0]
     478:	02040468 	andeq	r0, r4, #104, 8	; 0x68000000
     47c:	07480000 	strbeq	r0, [r8, -r0]
     480:	00000000 	andeq	r0, r0, r0
     484:	ca046905 	bgt	11a8a0 <_Min_Stack_Size+0x11a4a0>
     488:	50000000 	andpl	r0, r0, r0
     48c:	00023007 	andeq	r3, r2, r7
     490:	046a0500 	strbteq	r0, [sl], #-1280	; 0x500
     494:	000000ca 	andeq	r0, r0, sl, asr #1
     498:	00860754 	addeq	r0, r6, r4, asr r7
     49c:	6b050000 	blvs	1404a4 <_Min_Stack_Size+0x1400a4>
     4a0:	0000ca04 	andeq	ip, r0, r4, lsl #20
     4a4:	69075800 	stmdbvs	r7, {fp, ip, lr}
     4a8:	05000002 	streq	r0, [r0, #-2]
     4ac:	00b8046c 	adcseq	r0, r8, ip, ror #8
     4b0:	075c0000 	ldrbeq	r0, [ip, -r0]
     4b4:	000001fb 	strdeq	r0, [r0], -fp
     4b8:	ca046d05 	bgt	11b8d4 <_Min_Stack_Size+0x11b4d4>
     4bc:	60000000 	andvs	r0, r0, r0
     4c0:	0003be07 	andeq	fp, r3, r7, lsl #28
     4c4:	046e0500 	strbteq	r0, [lr], #-1280	; 0x500
     4c8:	000000ca 	andeq	r0, r0, sl, asr #1
     4cc:	02730764 	rsbseq	r0, r3, #100, 14	; 0x1900000
     4d0:	6f050000 	svcvs	0x00050000
     4d4:	00020404 	andeq	r0, r2, r4, lsl #8
     4d8:	35076800 	strcc	r6, [r7, #-2048]	; 0x800
     4dc:	05000000 	streq	r0, [r0, #-0]
     4e0:	00ca0470 	sbceq	r0, sl, r0, ror r4
     4e4:	08700000 	ldmdaeq	r0!, {}^	; <UNPREDICTABLE>
     4e8:	00525343 	subseq	r5, r2, r3, asr #6
     4ec:	ca047105 	bgt	11c908 <_Min_Stack_Size+0x11c508>
     4f0:	74000000 	strvc	r0, [r0], #-0
     4f4:	00027d07 	andeq	r7, r2, r7, lsl #26
     4f8:	04720500 	ldrbteq	r0, [r2], #-1280	; 0x500
     4fc:	00000204 	andeq	r0, r0, r4, lsl #4
     500:	00670778 	rsbeq	r0, r7, r8, ror r7
     504:	73050000 	movwvc	r0, #20480	; 0x5000
     508:	0000ca04 	andeq	ip, r0, r4, lsl #20
     50c:	3a078000 	bcc	1e0514 <_Min_Stack_Size+0x1e0114>
     510:	05000000 	streq	r0, [r0, #-0]
     514:	00ca0474 	sbceq	r0, sl, r4, ror r4
     518:	07840000 	streq	r0, [r4, r0]
     51c:	000003ad 	andeq	r0, r0, sp, lsr #7
     520:	ca047505 	bgt	11d93c <_Min_Stack_Size+0x11d53c>
     524:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     528:	0000d207 	andeq	sp, r0, r7, lsl #4
     52c:	04760500 	ldrbteq	r0, [r6], #-1280	; 0x500
     530:	000000ca 	andeq	r0, r0, sl, asr #1
     534:	fa0c008c 	blx	30076c <_Min_Stack_Size+0x30036c>
     538:	05000000 	streq	r0, [r0, #-0]
     53c:	03170478 	tsteq	r7, #120, 8	; 0x78000000
     540:	5d100000 	ldcpl	0, cr0, [r0, #-0]
     544:	01000002 	tsteq	r0, r2
     548:	f2010155 	vand	q0, <illegal reg q0.5>, <illegal reg q2.5>
     54c:	11000004 	tstne	r0, r4
     550:	00000167 	andeq	r0, r0, r7, ror #2
     554:	ca015a01 	bgt	56d60 <_Min_Stack_Size+0x56960>
     558:	11000000 	mrsne	r0, (UNDEF: 0)
     55c:	0000006d 	andeq	r0, r0, sp, rrx
     560:	ca015a01 	bgt	56d6c <_Min_Stack_Size+0x5696c>
     564:	00000000 	andeq	r0, r0, r0
     568:	0001dd12 	andeq	sp, r1, r2, lsl sp
     56c:	08d00100 	ldmeq	r0, {r8}^
     570:	22080002 	andcs	r0, r8, #2
     574:	01000001 	tsteq	r0, r1
     578:	00052e9c 	muleq	r5, ip, lr
     57c:	04cc1300 	strbeq	r1, [ip], #768	; 0x300
     580:	02520000 	subseq	r0, r2, #0
     584:	00200800 	eoreq	r0, r0, r0, lsl #16
     588:	ef010000 	svc	0x00010000
     58c:	00002014 	andeq	r2, r0, r4, lsl r0
     590:	04d91500 	ldrbeq	r1, [r9], #1280	; 0x500
     594:	91020000 	mrsls	r0, (UNDEF: 2)
     598:	04e51578 	strbteq	r1, [r5], #1400	; 0x578
     59c:	91020000 	mrsls	r0, (UNDEF: 2)
     5a0:	0000007c 	andeq	r0, r0, ip, ror r0
     5a4:	0001c116 	andeq	ip, r1, r6, lsl r1
     5a8:	011d0100 	tsteq	sp, r0, lsl #2
     5ac:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
     5b0:	00000092 	muleq	r0, r2, r0
     5b4:	05959c01 	ldreq	r9, [r5, #3073]	; 0xc01
     5b8:	74170000 	ldrvc	r0, [r7], #-0
     5bc:	0100706d 	tsteq	r0, sp, rrx
     5c0:	00b8011f 	adcseq	r0, r8, pc, lsl r1
     5c4:	00000000 	andeq	r0, r0, r0
     5c8:	05180000 	ldreq	r0, [r8, #-0]
     5cc:	01000002 	tsteq	r0, r2
     5d0:	00b8011f 	adcseq	r0, r8, pc, lsl r1
     5d4:	00540000 	subseq	r0, r4, r0
     5d8:	46180000 	ldrmi	r0, [r8], -r0
     5dc:	01000001 	tsteq	r0, r1
     5e0:	00b8011f 	adcseq	r0, r8, pc, lsl r1
     5e4:	008b0000 	addeq	r0, fp, r0
     5e8:	2f180000 	svccs	0x00180000
     5ec:	01000001 	tsteq	r0, r1
     5f0:	00b8011f 	adcseq	r0, r8, pc, lsl r1
     5f4:	00b70000 	adcseq	r0, r7, r0
     5f8:	41180000 	tstmi	r8, r0
     5fc:	01000001 	tsteq	r0, r1
     600:	00b8011f 	adcseq	r0, r8, pc, lsl r1
     604:	00f60000 	rscseq	r0, r6, r0
     608:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     60c:	000003a0 	andeq	r0, r0, r0, lsr #7
     610:	5e06a704 	cdppl	7, 0, cr10, cr6, cr4, {0}
     614:	1a000002 	bne	624 <_Min_Stack_Size+0x224>
     618:	0000021b 	andeq	r0, r0, fp, lsl r2
     61c:	00b8b001 	adcseq	fp, r8, r1
     620:	03050000 	movweq	r0, #20480	; 0x5000
     624:	20000010 	andcs	r0, r0, r0, lsl r0
     628:	0000970a 	andeq	r9, r0, sl, lsl #14
     62c:	0005c200 	andeq	ip, r5, r0, lsl #4
     630:	00c30b00 	sbceq	r0, r3, r0, lsl #22
     634:	000f0000 	andeq	r0, pc, r0
     638:	0014e41a 	andseq	lr, r4, sl, lsl r4
     63c:	d3b20100 			; <UNDEFINED> instruction: 0xd3b20100
     640:	05000005 	streq	r0, [r0, #-5]
     644:	00000003 	andeq	r0, r0, r3
     648:	05d80920 	ldrbeq	r0, [r8, #2336]	; 0x920
     64c:	b2050000 	andlt	r0, r5, #0
     650:	00000005 	andeq	r0, r0, r5
     654:	00000825 	andeq	r0, r0, r5, lsr #16
     658:	01710004 	cmneq	r1, r4
     65c:	01040000 	mrseq	r0, (UNDEF: 4)
     660:	00000287 	andeq	r0, r0, r7, lsl #5
     664:	00041901 	andeq	r1, r4, r1, lsl #18
     668:	0000ab00 	andeq	sl, r0, r0, lsl #22
     66c:	00005000 	andeq	r5, r0, r0
     670:	00000000 	andeq	r0, r0, r0
     674:	00022f00 	andeq	r2, r2, r0, lsl #30
     678:	09e00200 	stmibeq	r0!, {r9}^
     67c:	04010000 	streq	r0, [r1], #-0
     680:	00029fab 	andeq	r9, r2, fp, lsr #31
     684:	0b300300 	bleq	c0128c <_Min_Stack_Size+0xc00e8c>
     688:	03720000 	cmneq	r2, #0
     68c:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     690:	06560374 			; <UNDEFINED> instruction: 0x06560374
     694:	03750000 	cmneq	r5, #0
     698:	00000ac5 	andeq	r0, r0, r5, asr #21
     69c:	08870376 	stmeq	r7, {r1, r2, r4, r5, r6, r8, r9}
     6a0:	037b0000 	cmneq	fp, #0
     6a4:	00000b97 	muleq	r0, r7, fp
     6a8:	0676037c 			; <UNDEFINED> instruction: 0x0676037c
     6ac:	037e0000 	cmneq	lr, #0
     6b0:	0000080a 	andeq	r0, r0, sl, lsl #16
     6b4:	0509037f 	streq	r0, [r9, #-895]	; 0x37f
     6b8:	03000000 	movweq	r0, #0
     6bc:	00000402 	andeq	r0, r0, r2, lsl #8
     6c0:	0b870301 	bleq	fe1c12cc <_estack+0xde1912cc>
     6c4:	03020000 	movweq	r0, #8192	; 0x2000
     6c8:	000004fb 	strdeq	r0, [r0], -fp
     6cc:	0a870303 	beq	fe1c12e0 <_estack+0xde1912e0>
     6d0:	03040000 	movweq	r0, #16384	; 0x4000
     6d4:	00000cea 	andeq	r0, r0, sl, ror #25
     6d8:	0be50305 	bleq	ff9412f4 <_estack+0xdf9112f4>
     6dc:	03060000 	movweq	r0, #24576	; 0x6000
     6e0:	00000d0e 	andeq	r0, r0, lr, lsl #26
     6e4:	0a510307 	beq	1441308 <_Min_Stack_Size+0x1440f08>
     6e8:	03080000 	movweq	r0, #32768	; 0x8000
     6ec:	000008e8 	andeq	r0, r0, r8, ror #17
     6f0:	09e50309 	stmibeq	r5!, {r0, r3, r8, r9}^
     6f4:	030a0000 	movweq	r0, #40960	; 0xa000
     6f8:	00000d19 	andeq	r0, r0, r9, lsl sp
     6fc:	07b2030b 	ldreq	r0, [r2, fp, lsl #6]!
     700:	030c0000 	movweq	r0, #49152	; 0xc000
     704:	000008fd 	strdeq	r0, [r0], -sp
     708:	06cc030d 	strbeq	r0, [ip], sp, lsl #6
     70c:	030e0000 	movweq	r0, #57344	; 0xe000
     710:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
     714:	05a4030f 	streq	r0, [r4, #783]!	; 0x30f
     718:	03100000 	tsteq	r0, #0
     71c:	000006de 	ldrdeq	r0, [r0], -lr
     720:	0c710311 	ldcleq	3, cr0, [r1], #-68	; 0xffffffbc
     724:	03120000 	tsteq	r2, #0
     728:	0000077b 	andeq	r0, r0, fp, ror r7
     72c:	03f40313 	mvnseq	r0, #1275068416	; 0x4c000000
     730:	03140000 	tsteq	r4, #0
     734:	00000ca6 	andeq	r0, r0, r6, lsr #25
     738:	0cce0315 	stcleq	3, cr0, [lr], {21}
     73c:	03160000 	tsteq	r6, #0
     740:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
     744:	09bf0317 	ldmibeq	pc!, {r0, r1, r2, r4, r8, r9}	; <UNPREDICTABLE>
     748:	03180000 	tsteq	r8, #0
     74c:	000009d2 	ldrdeq	r0, [r0], -r2
     750:	0a190319 	beq	6413bc <_Min_Stack_Size+0x640fbc>
     754:	031a0000 	tsteq	sl, #0
     758:	00000817 	andeq	r0, r0, r7, lsl r8
     75c:	0bdb031b 	bleq	ff6c13d0 <_estack+0xdf6913d0>
     760:	031c0000 	tsteq	ip, #0
     764:	00000d04 	andeq	r0, r0, r4, lsl #26
     768:	0ad5031d 	beq	ff5413e4 <_estack+0xdf5113e4>
     76c:	031e0000 	tsteq	lr, #0
     770:	00000449 	andeq	r0, r0, r9, asr #8
     774:	0c64031f 	stcleq	3, cr0, [r4], #-124	; 0xffffff84
     778:	03200000 	teqeq	r0, #0
     77c:	0000057c 	andeq	r0, r0, ip, ror r5
     780:	04d20321 	ldrbeq	r0, [r2], #801	; 0x321
     784:	03220000 	teqeq	r2, #0
     788:	000007a8 	andeq	r0, r0, r8, lsr #15
     78c:	08f30323 	ldmeq	r3!, {r0, r1, r5, r8, r9}^
     790:	03240000 	teqeq	r4, #0
     794:	00000997 	muleq	r0, r7, r9
     798:	0ab90325 	beq	fee41434 <_estack+0xdee11434>
     79c:	03260000 	teqeq	r6, #0
     7a0:	00000bc1 	andeq	r0, r0, r1, asr #23
     7a4:	07880327 	streq	r0, [r8, r7, lsr #6]
     7a8:	03280000 	teqeq	r8, #0
     7ac:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
     7b0:	061d0329 	ldreq	r0, [sp], -r9, lsr #6
     7b4:	032a0000 	teqeq	sl, #0
     7b8:	000007d4 	ldrdeq	r0, [r0], -r4
     7bc:	063b032b 	ldrteq	r0, [fp], -fp, lsr #6
     7c0:	032c0000 	teqeq	ip, #0
     7c4:	00000846 	andeq	r0, r0, r6, asr #16
     7c8:	052f032d 	streq	r0, [pc, #-813]!	; 4a3 <_Min_Stack_Size+0xa3>
     7cc:	032e0000 	teqeq	lr, #0
     7d0:	00000adf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     7d4:	0a31032f 	beq	c41498 <_Min_Stack_Size+0xc41098>
     7d8:	03300000 	teqeq	r0, #0
     7dc:	00000513 	andeq	r0, r0, r3, lsl r5
     7e0:	08de0331 	ldmeq	lr, {r0, r4, r5, r8, r9}^
     7e4:	03320000 	teqeq	r2, #0
     7e8:	000009a3 	andeq	r0, r0, r3, lsr #19
     7ec:	06120333 			; <UNDEFINED> instruction: 0x06120333
     7f0:	03340000 	teqeq	r4, #0
     7f4:	00000a0e 	andeq	r0, r0, lr, lsl #20
     7f8:	06040335 			; <UNDEFINED> instruction: 0x06040335
     7fc:	03360000 	teqeq	r6, #0
     800:	00000b13 	andeq	r0, r0, r3, lsl fp
     804:	0ba90337 	bleq	fea414e8 <_estack+0xdea114e8>
     808:	03380000 	teqeq	r8, #0
     80c:	00000c7a 	andeq	r0, r0, sl, ror ip
     810:	07690339 			; <UNDEFINED> instruction: 0x07690339
     814:	033a0000 	teqeq	sl, #0
     818:	00000893 	muleq	r0, r3, r8
     81c:	09ad033b 	stmibeq	sp!, {r0, r1, r3, r4, r5, r8, r9}
     820:	033c0000 	teqeq	ip, #0
     824:	00000874 	andeq	r0, r0, r4, ror r8
     828:	05e1033d 	strbeq	r0, [r1, #829]!	; 0x33d
     82c:	033e0000 	teqeq	lr, #0
     830:	0000090f 	andeq	r0, r0, pc, lsl #18
     834:	040b033f 	streq	r0, [fp], #-831	; 0x33f
     838:	00c00000 	sbceq	r0, r0, r0
     83c:	00053c03 	andeq	r3, r5, r3, lsl #24
     840:	0300c100 	movweq	ip, #256	; 0x100
     844:	00000cdc 	ldrdeq	r0, [r0], -ip
     848:	920300c2 	andls	r0, r3, #194	; 0xc2
     84c:	c300000a 	movwgt	r0, #10
     850:	045d0300 	ldrbeq	r0, [sp], #-768	; 0x300
     854:	00c40000 	sbceq	r0, r4, r0
     858:	00055703 	andeq	r5, r5, r3, lsl #14
     85c:	0300c500 	movweq	ip, #1280	; 0x500
     860:	00000682 	andeq	r0, r0, r2, lsl #13
     864:	c80300c6 	stmdagt	r3, {r1, r2, r6, r7}
     868:	c7000008 	strgt	r0, [r0, -r8]
     86c:	07060300 	streq	r0, [r6, -r0, lsl #6]
     870:	00c80000 	sbceq	r0, r8, r0
     874:	00042403 	andeq	r2, r4, r3, lsl #8
     878:	0300c900 	movweq	ip, #2304	; 0x900
     87c:	0000073f 	andeq	r0, r0, pc, lsr r7
     880:	1d0300ca 	stcne	0, cr0, [r3, #-808]	; 0xfffffcd8
     884:	cb00000b 	blgt	8b8 <_Min_Stack_Size+0x4b8>
     888:	0cf30300 	ldcleq	3, cr0, [r3]
     88c:	00cc0000 	sbceq	r0, ip, r0
     890:	00095003 	andeq	r5, r9, r3
     894:	0300cd00 	movweq	ip, #3328	; 0xd00
     898:	00000c05 	andeq	r0, r0, r5, lsl #24
     89c:	090300ce 	stmdbeq	r3, {r1, r2, r3, r6, r7}
     8a0:	cf00000b 	svcgt	0x0000000b
     8a4:	09f00300 	ldmibeq	r0!, {r8, r9}^
     8a8:	00d00000 	sbcseq	r0, r0, r0
     8ac:	000c3703 	andeq	r3, ip, r3, lsl #14
     8b0:	0300d100 	movweq	sp, #256	; 0x100
     8b4:	00000c0f 	andeq	r0, r0, pc, lsl #24
     8b8:	310300d2 	ldrdcc	r0, [r3, -r2]
     8bc:	d3000004 	movwle	r0, #4
     8c0:	04a10300 	strteq	r0, [r1], #768	; 0x300
     8c4:	00d40000 	sbcseq	r0, r4, r0
     8c8:	00059a03 	andeq	r9, r5, r3, lsl #20
     8cc:	0300d500 	movweq	sp, #1280	; 0x500
     8d0:	00000730 	andeq	r0, r0, r0, lsr r7
     8d4:	130300d6 	movwne	r0, #12502	; 0x30d6
     8d8:	d7000007 	strle	r0, [r0, -r7]
     8dc:	096f0300 	stmdbeq	pc!, {r8, r9}^	; <UNPREDICTABLE>
     8e0:	00d80000 	sbcseq	r0, r8, r0
     8e4:	0003ce03 	andeq	ip, r3, r3, lsl #28
     8e8:	0300d900 	movweq	sp, #2304	; 0x900
     8ec:	0000085e 	andeq	r0, r0, lr, asr r8
     8f0:	040000da 	streq	r0, [r0], #-218	; 0xda
     8f4:	01530601 	cmpeq	r3, r1, lsl #12
     8f8:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
     8fc:	02000001 	andeq	r0, r0, #1
     900:	0002b11c 	andeq	fp, r2, ip, lsl r1
     904:	08010400 	stmdaeq	r1, {sl}
     908:	00000151 	andeq	r0, r0, r1, asr r1
     90c:	06050204 	streq	r0, [r5], -r4, lsl #4
     910:	05000001 	streq	r0, [r0, #-1]
     914:	0000005c 	andeq	r0, r0, ip, asr r0
     918:	02ca2602 	sbceq	r2, sl, #2097152	; 0x200000
     91c:	02040000 	andeq	r0, r4, #0
     920:	0001e807 	andeq	lr, r1, r7, lsl #16
     924:	037a0500 	cmneq	sl, #0, 10
     928:	37020000 	strcc	r0, [r2, -r0]
     92c:	000002dc 	ldrdeq	r0, [r0], -ip
     930:	ec050404 	cfstrs	mvf0, [r5], {4}
     934:	05000000 	streq	r0, [r0, #-0]
     938:	00000051 	andeq	r0, r0, r1, asr r0
     93c:	02ee3802 	rsceq	r3, lr, #131072	; 0x20000
     940:	04040000 	streq	r0, [r4], #-0
     944:	00017b07 	andeq	r7, r1, r7, lsl #22
     948:	05080400 	streq	r0, [r8, #-1024]	; 0x400
     94c:	000000e7 	andeq	r0, r0, r7, ror #1
     950:	76070804 	strvc	r0, [r7], -r4, lsl #16
     954:	06000001 	streq	r0, [r0], -r1
     958:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     95c:	04040074 	streq	r0, [r4], #-116	; 0x74
     960:	00018007 	andeq	r8, r1, r7
     964:	011b0500 	tsteq	fp, r0, lsl #10
     968:	2a030000 	bcs	c0970 <_Min_Stack_Size+0xc0570>
     96c:	000002a6 	andeq	r0, r0, r6, lsr #5
     970:	00005e05 	andeq	r5, r0, r5, lsl #28
     974:	bf360300 	svclt	0x00360300
     978:	05000002 	streq	r0, [r0, #-2]
     97c:	0000037c 	andeq	r0, r0, ip, ror r3
     980:	02d14103 	sbcseq	r4, r1, #-1073741824	; 0xc0000000
     984:	53050000 	movwpl	r0, #20480	; 0x5000
     988:	03000000 	movweq	r0, #0
     98c:	0002e342 	andeq	lr, r2, r2, asr #6
     990:	07040400 	streq	r0, [r4, -r0, lsl #8]
     994:	0000002c 	andeq	r0, r0, ip, lsr #32
     998:	00033207 	andeq	r3, r3, r7, lsl #4
     99c:	03320800 	teqeq	r2, #0, 16
     9a0:	03590000 	cmpeq	r9, #0
     9a4:	3d090000 	stccc	0, cr0, [r9, #-0]
     9a8:	01000003 	tsteq	r0, r3
     9ac:	031c0700 	tsteq	ip, #0, 14
     9b0:	27070000 	strcs	r0, [r7, -r0]
     9b4:	0a000003 	beq	9c8 <_Min_Stack_Size+0x5c8>
     9b8:	01f70401 	mvnseq	r0, r1, lsl #8
     9bc:	00000379 	andeq	r0, r0, r9, ror r3
     9c0:	000ed203 	andeq	sp, lr, r3, lsl #4
     9c4:	530b0000 	movwpl	r0, #45056	; 0xb000
     9c8:	01005445 	tsteq	r0, r5, asr #8
     9cc:	23170c00 	tstcs	r7, #0, 24
     9d0:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
     9d4:	00036301 	andeq	r6, r3, r1, lsl #6
     9d8:	04010a00 	streq	r0, [r1], #-2560	; 0xa00
     9dc:	039b01f9 	orrseq	r0, fp, #1073741886	; 0x4000003e
     9e0:	8b030000 	blhi	c09e8 <_Min_Stack_Size+0xc05e8>
     9e4:	00000004 	andeq	r0, r0, r4
     9e8:	0005c303 	andeq	ip, r5, r3, lsl #6
     9ec:	0c000100 	stfeqs	f0, [r0], {-0}
     9f0:	0000092d 	andeq	r0, r0, sp, lsr #18
     9f4:	8501f904 	strhi	pc, [r1, #-2308]	; 0x904
     9f8:	0d000003 	stceq	0, cr0, [r0, #-12]
     9fc:	03d40428 	bicseq	r0, r4, #40, 8	; 0x28000000
     a00:	00000433 	andeq	r0, r0, r3, lsr r4
     a04:	00093d0e 	andeq	r3, r9, lr, lsl #26
     a08:	03d60400 	bicseq	r0, r6, #0, 8
     a0c:	00000344 	andeq	r0, r0, r4, asr #6
     a10:	04560e00 	ldrbeq	r0, [r6], #-3584	; 0xe00
     a14:	d7040000 	strle	r0, [r4, -r0]
     a18:	00034403 	andeq	r4, r3, r3, lsl #8
     a1c:	4e0e0400 	cfcpysmi	mvf0, mvf14
     a20:	04000006 	streq	r0, [r0], #-6
     a24:	034403d8 	movteq	r0, #17368	; 0x43d8
     a28:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     a2c:	000003db 	ldrdeq	r0, [r0], -fp
     a30:	4403d904 	strmi	sp, [r3], #-2308	; 0x904
     a34:	0c000003 	stceq	0, cr0, [r0], {3}
     a38:	5244490f 	subpl	r4, r4, #245760	; 0x3c000
     a3c:	03da0400 	bicseq	r0, sl, #0, 8
     a40:	00000344 	andeq	r0, r0, r4, asr #6
     a44:	444f0f10 	strbmi	r0, [pc], #-3856	; a4c <_Min_Stack_Size+0x64c>
     a48:	db040052 	blle	100b98 <_Min_Stack_Size+0x100798>
     a4c:	00034403 	andeq	r4, r3, r3, lsl #8
     a50:	bb0e1400 	bllt	385a58 <_Min_Stack_Size+0x385658>
     a54:	0400000b 	streq	r0, [r0], #-11
     a58:	035903dc 	cmpeq	r9, #220, 6	; 0x70000003
     a5c:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
     a60:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a64:	5903dd04 	stmdbpl	r3, {r2, r8, sl, fp, ip, lr, pc}
     a68:	1a000003 	bne	a7c <_Min_Stack_Size+0x67c>
     a6c:	00073a0e 	andeq	r3, r7, lr, lsl #20
     a70:	03de0400 	bicseq	r0, lr, #0, 8
     a74:	00000344 	andeq	r0, r0, r4, asr #6
     a78:	46410f1c 			; <UNDEFINED> instruction: 0x46410f1c
     a7c:	df040052 	svcle	0x00040052
     a80:	00043303 	andeq	r3, r4, r3, lsl #6
     a84:	07002000 	streq	r2, [r0, -r0]
     a88:	00000349 	andeq	r0, r0, r9, asr #6
     a8c:	00062e0c 	andeq	r2, r6, ip, lsl #28
     a90:	03e00400 	mvneq	r0, #0, 8
     a94:	000003a7 	andeq	r0, r0, r7, lsr #7
     a98:	37050110 	smladcc	r5, r0, r1, r0
     a9c:	00000459 	andeq	r0, r0, r9, asr r4
     aa0:	00098303 	andeq	r8, r9, r3, lsl #6
     aa4:	1a030000 	bne	c0aac <_Min_Stack_Size+0xc06ac>
     aa8:	0400000c 	streq	r0, [r0], #-12
     aac:	05890500 	streq	r0, [r9, #1280]	; 0x500
     ab0:	3a050000 	bcc	140ab8 <_Min_Stack_Size+0x1406b8>
     ab4:	00000444 	andeq	r0, r0, r4, asr #8
     ab8:	43050110 	movwmi	r0, #20752	; 0x5110
     abc:	0000047f 	andeq	r0, r0, pc, ror r4
     ac0:	000b7303 	andeq	r7, fp, r3, lsl #6
     ac4:	ef030800 	svc	0x00030800
     ac8:	0c000005 	stceq	0, cr0, [r0], {5}
     acc:	00046f03 	andeq	r6, r4, r3, lsl #30
     ad0:	05001000 	streq	r1, [r0, #-0]
     ad4:	00000b44 	andeq	r0, r0, r4, asr #22
     ad8:	04644705 	strbteq	r4, [r4], #-1797	; 0x705
     adc:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
     ae0:	04c35005 	strbeq	r5, [r3], #5
     ae4:	d4120000 	ldrle	r0, [r2], #-0
     ae8:	05000008 	streq	r0, [r0, #-8]
     aec:	00033252 	andeq	r3, r3, r2, asr r2
     af0:	79120000 	ldmdbvc	r2, {}	; <UNPREDICTABLE>
     af4:	05000009 	streq	r0, [r0, #-9]
     af8:	00045955 	andeq	r5, r4, r5, asr r9
     afc:	43120400 	tstmi	r2, #0, 8
     b00:	05000009 	streq	r0, [r0, #-9]
     b04:	00047f58 	andeq	r7, r4, r8, asr pc
     b08:	3c120500 	cfldr32cc	mvfx0, [r2], {-0}
     b0c:	05000004 	streq	r0, [r0, #-4]
     b10:	00039b5b 	andeq	r9, r3, fp, asr fp
     b14:	05000600 	streq	r0, [r0, #-1536]	; 0x600
     b18:	00000b62 	andeq	r0, r0, r2, ror #22
     b1c:	048a5d05 	streq	r5, [sl], #3333	; 0xd05
     b20:	01100000 	tsteq	r0, r0
     b24:	04ef4206 	strbteq	r4, [pc], #518	; b2c <_Min_Stack_Size+0x72c>
     b28:	4a030000 	bmi	c0b30 <_Min_Stack_Size+0xc0730>
     b2c:	00000005 	andeq	r0, r0, r5
     b30:	000af103 	andeq	pc, sl, r3, lsl #2
     b34:	ab030100 	blge	c0f3c <_Min_Stack_Size+0xc0b3c>
     b38:	02000004 	andeq	r0, r0, #4
     b3c:	0004df03 	andeq	sp, r4, r3, lsl #30
     b40:	05000300 	streq	r0, [r0, #-768]	; 0x300
     b44:	00000c53 	andeq	r0, r0, r3, asr ip
     b48:	04ce4706 	strbeq	r4, [lr], #1798	; 0x706
     b4c:	01100000 	tsteq	r0, r0
     b50:	050f4f06 	streq	r4, [pc, #-3846]	; fffffc52 <_estack+0xdffcfc52>
     b54:	93030000 	movwls	r0, #12288	; 0x3000
     b58:	00000004 	andeq	r0, r0, r4
     b5c:	000bcd03 	andeq	ip, fp, r3, lsl #26
     b60:	05000100 	streq	r0, [r0, #-256]	; 0x100
     b64:	0000051d 	andeq	r0, r0, sp, lsl r5
     b68:	04fa5206 	ldrbteq	r5, [sl], #518	; 0x206
     b6c:	01100000 	tsteq	r0, r0
     b70:	053b5a06 	ldreq	r5, [fp, #-2566]!	; 0xa06
     b74:	ec030000 	stc	0, cr0, [r3], {-0}
     b78:	00000004 	andeq	r0, r0, r4
     b7c:	00066403 	andeq	r6, r6, r3, lsl #8
     b80:	fe030100 	cdp2	1, 0, cr0, cr3, cr0, {0}
     b84:	02000009 	andeq	r0, r0, #9
     b88:	000cbe03 	andeq	fp, ip, r3, lsl #28
     b8c:	05000300 	streq	r0, [r0, #-768]	; 0x300
     b90:	00000694 	muleq	r0, r4, r6
     b94:	051a5f06 	ldreq	r5, [sl, #-3846]	; 0xf06
     b98:	01100000 	tsteq	r0, r0
     b9c:	05616e06 	strbeq	r6, [r1, #-3590]!	; 0xe06
     ba0:	24030000 	strcs	r0, [r3], #-0
     ba4:	00000008 	andeq	r0, r0, r8
     ba8:	000c2a03 	andeq	r2, ip, r3, lsl #20
     bac:	f6030100 			; <UNDEFINED> instruction: 0xf6030100
     bb0:	0200000b 	andeq	r0, r0, #11
     bb4:	07970500 	ldreq	r0, [r7, r0, lsl #10]
     bb8:	72060000 	andvc	r0, r6, #0
     bbc:	00000546 	andeq	r0, r0, r6, asr #10
     bc0:	84060811 	strhi	r0, [r6], #-2065	; 0x811
     bc4:	000005b1 			; <UNDEFINED> instruction: 0x000005b1
     bc8:	0006a612 	andeq	sl, r6, r2, lsl r6
     bcc:	32860600 	addcc	r0, r6, #0, 12
     bd0:	00000003 	andeq	r0, r0, r3
     bd4:	000b5812 	andeq	r5, fp, r2, lsl r8
     bd8:	ef890600 	svc	0x00890600
     bdc:	04000004 	streq	r0, [r0], #-4
     be0:	0004c712 	andeq	ip, r4, r2, lsl r7
     be4:	3b8c0600 	blcc	fe3023ec <_estack+0xde2d23ec>
     be8:	05000005 	streq	r0, [r0, #-5]
     bec:	00086912 	andeq	r6, r8, r2, lsl r9
     bf0:	0f8f0600 	svceq	0x008f0600
     bf4:	06000005 	streq	r0, [r0], -r5
     bf8:	000aff12 	andeq	pc, sl, r2, lsl pc	; <UNPREDICTABLE>
     bfc:	61920600 	orrsvs	r0, r2, r0, lsl #12
     c00:	07000005 	streq	r0, [r0, -r5]
     c04:	091c0500 	ldmdbeq	ip, {r8, sl}
     c08:	94060000 	strls	r0, [r6], #-0
     c0c:	0000056c 	andeq	r0, r0, ip, ror #10
     c10:	36070411 			; <UNDEFINED> instruction: 0x36070411
     c14:	000005f5 	strdeq	r0, [r0], -r5
     c18:	0007c412 	andeq	ip, r7, r2, lsl r4
     c1c:	11380700 	teqne	r8, r0, lsl #14
     c20:	00000003 	andeq	r0, r0, r3
     c24:	0007e812 	andeq	lr, r7, r2, lsl r8
     c28:	113d0700 	teqne	sp, r0, lsl #14
     c2c:	01000003 	tsteq	r0, r3
     c30:	000a9e12 	andeq	r9, sl, r2, lsl lr
     c34:	11420700 	cmpne	r2, r0, lsl #14
     c38:	02000003 	andeq	r0, r0, #3
     c3c:	0003e112 	andeq	lr, r3, r2, lsl r1
     c40:	9b470700 	blls	11c2848 <_Min_Stack_Size+0x11c2448>
     c44:	03000003 	movweq	r0, #3
     c48:	08a50500 	stmiaeq	r5!, {r8, sl}
     c4c:	4a070000 	bmi	1c0c54 <_Min_Stack_Size+0x1c0854>
     c50:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
     c54:	000a5c13 	andeq	r5, sl, r3, lsl ip
     c58:	c0050100 	andgt	r0, r5, r0, lsl #2
     c5c:	16080003 	strne	r0, [r8], -r3
     c60:	01000000 	mrseq	r0, (UNDEF: 0)
     c64:	0006439c 	muleq	r6, ip, r3
     c68:	03ca1400 	biceq	r1, sl, #0, 8
     c6c:	07880800 	streq	r0, [r8, r0, lsl #16]
     c70:	062e0000 	strteq	r0, [lr], -r0
     c74:	01150000 	tsteq	r5, r0
     c78:	15310151 	ldrne	r0, [r1, #-337]!	; 0x151
     c7c:	08025001 	stmdaeq	r2, {r0, ip, lr}
     c80:	d6160040 	ldrle	r0, [r6], -r0, asr #32
     c84:	88080003 	stmdahi	r8, {r0, r1}
     c88:	15000007 	strne	r0, [r0, #-7]
     c8c:	31015101 	tstcc	r1, r1, lsl #2
     c90:	01500115 	cmpeq	r0, r5, lsl r1
     c94:	13000031 	movwne	r0, #49	; 0x31
     c98:	00000c40 	andeq	r0, r0, r0, asr #24
     c9c:	03d80c01 	bicseq	r0, r8, #256	; 0x100
     ca0:	00560800 	subseq	r0, r6, r0, lsl #16
     ca4:	9c010000 	stcls	0, cr0, [r1], {-0}
     ca8:	00000699 	muleq	r0, r9, r6
     cac:	00056917 	andeq	r6, r5, r7, lsl r9
     cb0:	b10e0100 	mrslt	r0, (UNDEF: 30)
     cb4:	02000005 	andeq	r0, r0, #5
     cb8:	8c176091 	ldchi	0, cr6, [r7], {145}	; 0x91
     cbc:	0100000c 	tsteq	r0, ip
     cc0:	0005b117 	andeq	fp, r5, r7, lsl r1
     cc4:	68910200 	ldmvs	r1, {r9}
     cc8:	00040614 	andeq	r0, r4, r4, lsl r6
     ccc:	00079f08 	andeq	r9, r7, r8, lsl #30
     cd0:	00068800 	andeq	r8, r6, r0, lsl #16
     cd4:	51011500 	tstpl	r1, r0, lsl #10
     cd8:	00007d02 	andeq	r7, r0, r2, lsl #26
     cdc:	00042a18 	andeq	r2, r4, r8, lsl sl
     ce0:	00079f08 	andeq	r9, r7, r8, lsl #30
     ce4:	51011500 	tstpl	r1, r0, lsl #10
     ce8:	00689102 	rsbeq	r9, r8, r2, lsl #2
     cec:	0a6e1300 	beq	1b858f4 <_Min_Stack_Size+0x1b854f4>
     cf0:	20010000 	andcs	r0, r1, r0
     cf4:	08000430 	stmdaeq	r0, {r4, r5, sl}
     cf8:	00000044 	andeq	r0, r0, r4, asr #32
     cfc:	07079c01 	streq	r9, [r7, -r1, lsl #24]
     d00:	5c170000 	ldcpl	0, cr0, [r7], {-0}
     d04:	01000009 	tsteq	r0, r9
     d08:	0004c322 	andeq	ip, r4, r2, lsr #6
     d0c:	70910200 	addsvc	r0, r1, r0, lsl #4
     d10:	0006af17 	andeq	sl, r6, r7, lsl pc
     d14:	f5230100 			; <UNDEFINED> instruction: 0xf5230100
     d18:	02000005 	andeq	r0, r0, #5
     d1c:	3c146c91 	ldccc	12, cr6, [r4], {145}	; 0x91
     d20:	c2080004 	andgt	r0, r8, #4
     d24:	e2000007 	and	r0, r0, #7
     d28:	15000006 	strne	r0, [r0, #-6]
     d2c:	30015101 	andcc	r5, r1, r1, lsl #2
     d30:	01500115 	cmpeq	r0, r5, lsl r1
     d34:	56140030 			; <UNDEFINED> instruction: 0x56140030
     d38:	d8080004 	stmdale	r8, {r2}
     d3c:	f6000007 			; <UNDEFINED> instruction: 0xf6000007
     d40:	15000006 	strne	r0, [r0, #-6]
     d44:	91025001 	tstls	r2, r1
     d48:	70180070 	andsvc	r0, r8, r0, ror r0
     d4c:	ef080004 	svc	0x00080004
     d50:	15000007 	strne	r0, [r0, #-7]
     d54:	91025001 	tstls	r2, r1
     d58:	1300006c 	movwne	r0, #108	; 0x6c
     d5c:	00000835 	andeq	r0, r0, r5, lsr r8
     d60:	04743a01 	ldrbteq	r3, [r4], #-2561	; 0xa01
     d64:	002a0800 	eoreq	r0, sl, r0, lsl #16
     d68:	9c010000 	stcls	0, cr0, [r1], {-0}
     d6c:	0000073f 	andeq	r0, r0, pc, lsr r7
     d70:	00047c14 	andeq	r7, r4, r4, lsl ip
     d74:	00080608 	andeq	r0, r8, r8, lsl #12
     d78:	00072f00 	andeq	r2, r7, r0, lsl #30
     d7c:	50011500 	andpl	r1, r1, r0, lsl #10
     d80:	16003101 	strne	r3, [r0], -r1, lsl #2
     d84:	0800049e 	stmdaeq	r0, {r1, r2, r3, r4, r7, sl}
     d88:	0000081b 	andeq	r0, r0, fp, lsl r8
     d8c:	01500115 	cmpeq	r0, r5, lsl r1
     d90:	19000031 	stmdbne	r0, {r0, r4, r5}
     d94:	00000ca1 	andeq	r0, r0, r1, lsr #25
     d98:	03034701 	movweq	r4, #14081	; 0x3701
     d9c:	04a00000 	strteq	r0, [r0], #0
     da0:	000c0800 	andeq	r0, ip, r0, lsl #16
     da4:	9c010000 	stcls	0, cr0, [r1], {-0}
     da8:	0000076b 	andeq	r0, r0, fp, ror #14
     dac:	0004a61a 	andeq	sl, r4, sl, lsl r6
     db0:	00060008 	andeq	r0, r6, r8
     db4:	04aa1a00 	strteq	r1, [sl], #2560	; 0xa00
     db8:	06430800 	strbeq	r0, [r3], -r0, lsl #16
     dbc:	1b000000 	blne	dc4 <_Min_Stack_Size+0x9c4>
     dc0:	000003a0 	andeq	r0, r0, r0, lsr #7
     dc4:	5e06a708 	cdppl	7, 0, cr10, cr6, cr8, {0}
     dc8:	1c000003 	stcne	0, cr0, [r0], {3}
     dcc:	00001fcd 	andeq	r1, r0, sp, asr #31
     dd0:	03114501 	tsteq	r1, #4194304	; 0x400000
     dd4:	03050000 	movweq	r0, #20480	; 0x5000
     dd8:	20000024 	andcs	r0, r0, r4, lsr #32
     ddc:	000a3a1d 	andeq	r3, sl, sp, lsl sl
     de0:	02400900 	subeq	r0, r0, #0, 18
     de4:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
     de8:	0003321e 	andeq	r3, r3, lr, lsl r2
     dec:	039b1e00 	orrseq	r1, fp, #0, 28
     df0:	1d000000 	stcne	0, cr0, [r0, #-0]
     df4:	0000087d 	andeq	r0, r0, sp, ror r8
     df8:	b601c906 	strlt	ip, [r1], -r6, lsl #18
     dfc:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
     e00:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
     e04:	0007bc1e 	andeq	fp, r7, lr, lsl ip
     e08:	041f0000 	ldreq	r0, [pc], #-0	; e10 <_Min_Stack_Size+0xa10>
     e0c:	00000438 	andeq	r0, r0, r8, lsr r4
     e10:	05b1041f 	ldreq	r0, [r1, #1055]!	; 0x41f
     e14:	53200000 	teqpl	r0, #0
     e18:	0a000007 	beq	e3c <_Min_Stack_Size+0xa3c>
     e1c:	0007d8bf 			; <UNDEFINED> instruction: 0x0007d8bf
     e20:	03111e00 	tsteq	r1, #0, 28
     e24:	111e0000 	tstne	lr, r0
     e28:	00000003 	andeq	r0, r0, r3
     e2c:	0006c220 	andeq	ip, r6, r0, lsr #4
     e30:	e99f0500 	ldmib	pc, {r8, sl}	; <UNPREDICTABLE>
     e34:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
     e38:	000007e9 	andeq	r0, r0, r9, ror #15
     e3c:	c3041f00 	movwgt	r1, #20224	; 0x4f00
     e40:	20000004 	andcs	r0, r0, r4
     e44:	00000cb4 			; <UNDEFINED> instruction: 0x00000cb4
     e48:	08009f07 	stmdaeq	r0, {r0, r1, r2, r8, r9, sl, fp, ip, pc}
     e4c:	001e0000 	andseq	r0, lr, r0
     e50:	00000008 	andeq	r0, r0, r8
     e54:	05f5041f 	ldrbeq	r0, [r5, #1055]!	; 0x41f
     e58:	1d210000 	stcne	0, cr0, [r1, #-0]
     e5c:	05000007 	streq	r0, [r0, #-7]
     e60:	000379a4 	andeq	r7, r3, r4, lsr #19
     e64:	00081b00 	andeq	r1, r8, r0, lsl #22
     e68:	03321e00 	teqeq	r2, #0, 28
     e6c:	22000000 	andcs	r0, r0, #0
     e70:	000005ca 	andeq	r0, r0, sl, asr #11
     e74:	321ea705 	andscc	sl, lr, #1310720	; 0x140000
     e78:	00000003 	andeq	r0, r0, r3
     e7c:	00054300 	andeq	r4, r5, r0, lsl #6
     e80:	4e000400 	cfcpysmi	mvf0, mvf0
     e84:	04000003 	streq	r0, [r0], #-3
     e88:	00028701 	andeq	r8, r2, r1, lsl #14
     e8c:	0e0c0100 	adfeqe	f0, f4, f0
     e90:	00ab0000 	adceq	r0, fp, r0
     e94:	00800000 	addeq	r0, r0, r0
     e98:	00000000 	andeq	r0, r0, r0
     e9c:	044e0000 	strbeq	r0, [lr], #-0
     ea0:	01020000 	mrseq	r0, (UNDEF: 2)
     ea4:	00015306 	andeq	r5, r1, r6, lsl #6
     ea8:	01190300 	tsteq	r9, r0, lsl #6
     eac:	1c020000 	stcne	0, cr0, [r2], {-0}
     eb0:	00000037 	andeq	r0, r0, r7, lsr r0
     eb4:	51080102 	tstpl	r8, r2, lsl #2
     eb8:	02000001 	andeq	r0, r0, #1
     ebc:	01060502 	tsteq	r6, r2, lsl #10
     ec0:	02020000 	andeq	r0, r2, #0
     ec4:	0001e807 	andeq	lr, r1, r7, lsl #16
     ec8:	037a0300 	cmneq	sl, #0, 6
     ecc:	37020000 	strcc	r0, [r2, -r0]
     ed0:	00000057 	andeq	r0, r0, r7, asr r0
     ed4:	ec050402 	cfstrs	mvf0, [r5], {2}
     ed8:	03000000 	movweq	r0, #0
     edc:	00000051 	andeq	r0, r0, r1, asr r0
     ee0:	00693802 	rsbeq	r3, r9, r2, lsl #16
     ee4:	04020000 	streq	r0, [r2], #-0
     ee8:	00017b07 	andeq	r7, r1, r7, lsl #22
     eec:	05080200 	streq	r0, [r8, #-512]	; 0x200
     ef0:	000000e7 	andeq	r0, r0, r7, ror #1
     ef4:	76070802 	strvc	r0, [r7], -r2, lsl #16
     ef8:	04000001 	streq	r0, [r0], #-1
     efc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     f00:	04020074 	streq	r0, [r2], #-116	; 0x74
     f04:	00018007 	andeq	r8, r1, r7
     f08:	011b0300 	tsteq	fp, r0, lsl #6
     f0c:	2a030000 	bcs	c0f14 <_Min_Stack_Size+0xc0b14>
     f10:	0000002c 	andeq	r0, r0, ip, lsr #32
     f14:	00037c03 	andeq	r7, r3, r3, lsl #24
     f18:	4c410300 	mcrrmi	3, 0, r0, r1, cr0
     f1c:	03000000 	movweq	r0, #0
     f20:	00000053 	andeq	r0, r0, r3, asr r0
     f24:	005e4203 	subseq	r4, lr, r3, lsl #4
     f28:	04050000 	streq	r0, [r5], #-0
     f2c:	0150040e 	cmpeq	r0, lr, lsl #8
     f30:	00000169 	andeq	r0, r0, r9, ror #2
     f34:	000d6c06 	andeq	r6, sp, r6, lsl #24
     f38:	01520400 	cmpeq	r2, r0, lsl #8
     f3c:	00000180 	andeq	r0, r0, r0, lsl #3
     f40:	023f0600 	eorseq	r0, pc, #0, 12
     f44:	53040000 	movwpl	r0, #16384	; 0x4000
     f48:	00018501 	andeq	r8, r1, r1, lsl #10
     f4c:	ac062000 	stcge	0, cr2, [r6], {-0}
     f50:	0400000d 	streq	r0, [r0], #-13
     f54:	01950154 	orrseq	r0, r5, r4, asr r1
     f58:	06800000 	streq	r0, [r0], r0
     f5c:	00000d7f 	andeq	r0, r0, pc, ror sp
     f60:	85015504 	strhi	r5, [r1, #-1284]	; 0x504
     f64:	a0000001 	andge	r0, r0, r1
     f68:	000dfd07 	andeq	pc, sp, r7, lsl #26
     f6c:	01560400 	cmpeq	r6, r0, lsl #8
     f70:	0000019a 	muleq	r0, sl, r1
     f74:	53070100 	movwpl	r0, #28928	; 0x7100
     f78:	04000002 	streq	r0, [r0], #-2
     f7c:	01850157 	orreq	r0, r5, r7, asr r1
     f80:	01200000 	teqeq	r0, r0
     f84:	000da107 	andeq	sl, sp, r7, lsl #2
     f88:	01580400 	cmpeq	r8, r0, lsl #8
     f8c:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     f90:	90070180 	andls	r0, r7, r0, lsl #3
     f94:	04000000 	streq	r0, [r0], #-0
     f98:	01850159 	orreq	r0, r5, r9, asr r1
     f9c:	01a00000 	moveq	r0, r0
     fa0:	000d2b07 	andeq	r2, sp, r7, lsl #22
     fa4:	015a0400 	cmpeq	sl, r0, lsl #8
     fa8:	000001a4 	andeq	r0, r0, r4, lsr #3
     fac:	69070200 	stmdbvs	r7, {r9}
     fb0:	04000002 	streq	r0, [r0], #-2
     fb4:	01a9015b 			; <UNDEFINED> instruction: 0x01a9015b
     fb8:	02200000 	eoreq	r0, r0, #0
     fbc:	00504908 	subseq	r4, r0, r8, lsl #18
     fc0:	c9015c04 	stmdbgt	r1, {r2, sl, fp, ip, lr}
     fc4:	00000001 	andeq	r0, r0, r1
     fc8:	02730703 	rsbseq	r0, r3, #786432	; 0xc0000
     fcc:	5d040000 	stcpl	0, cr0, [r4, #-0]
     fd0:	0001ce01 	andeq	ip, r1, r1, lsl #28
     fd4:	0703f000 	streq	pc, [r3, -r0]
     fd8:	00000d7a 	andeq	r0, r0, sl, ror sp
     fdc:	df015e04 	svcle	0x00015e04
     fe0:	00000001 	andeq	r0, r0, r1
     fe4:	a209000e 	andge	r0, r9, #14
     fe8:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
     fec:	0a000001 	beq	ff8 <_Min_Stack_Size+0xbf8>
     ff0:	00000179 	andeq	r0, r0, r9, ror r1
     ff4:	04020007 	streq	r0, [r2], #-7
     ff8:	00002c07 	andeq	r2, r0, r7, lsl #24
     ffc:	01690b00 	cmneq	r9, r0, lsl #22
    1000:	a2090000 	andge	r0, r9, #0
    1004:	95000000 	strls	r0, [r0, #-0]
    1008:	0a000001 	beq	1014 <_Min_Stack_Size+0xc14>
    100c:	00000179 	andeq	r0, r0, r9, ror r1
    1010:	690b0017 	stmdbvs	fp, {r0, r1, r2, r4}
    1014:	0b000001 	bleq	1020 <_Min_Stack_Size+0xc20>
    1018:	00000169 	andeq	r0, r0, r9, ror #2
    101c:	0001690b 	andeq	r6, r1, fp, lsl #18
    1020:	01690b00 	cmneq	r9, r0, lsl #22
    1024:	a2090000 	andge	r0, r9, #0
    1028:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
    102c:	0a000001 	beq	1038 <_Min_Stack_Size+0xc38>
    1030:	00000179 	andeq	r0, r0, r9, ror r1
    1034:	8c090037 	stchi	0, cr0, [r9], {55}	; 0x37
    1038:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    103c:	0a000001 	beq	1048 <_Min_Stack_Size+0xc48>
    1040:	00000179 	andeq	r0, r0, r9, ror r1
    1044:	b90b00ef 	stmdblt	fp, {r0, r1, r2, r3, r5, r6, r7}
    1048:	09000001 	stmdbeq	r0, {r0}
    104c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1050:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1054:	0001790c 	andeq	r7, r1, ip, lsl #18
    1058:	00028300 	andeq	r8, r2, r0, lsl #6
    105c:	0000a20b 	andeq	sl, r0, fp, lsl #4
    1060:	0e020d00 	cdpeq	13, 0, cr0, cr2, cr0, {0}
    1064:	5f040000 	svcpl	0x00040000
    1068:	0000ad01 	andeq	sl, r0, r1, lsl #26
    106c:	048c0e00 	streq	r0, [ip], #3584	; 0xe00
    1070:	030b0170 	movweq	r0, #45424	; 0xb170
    1074:	77060000 	strvc	r0, [r6, -r0]
    1078:	04000000 	streq	r0, [r0], #-0
    107c:	030b0172 	movweq	r0, #45426	; 0xb172
    1080:	06000000 	streq	r0, [r0], -r0
    1084:	000000da 	ldrdeq	r0, [r0], -sl
    1088:	df017304 	svcle	0x00017304
    108c:	04000001 	streq	r0, [r0], #-1
    1090:	00020c06 	andeq	r0, r2, r6, lsl #24
    1094:	01740400 	cmneq	r4, r0, lsl #8
    1098:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    109c:	014b0608 	cmpeq	fp, r8, lsl #12
    10a0:	75040000 	strvc	r0, [r4, #-0]
    10a4:	0001df01 	andeq	sp, r1, r1, lsl #30
    10a8:	530f0c00 	movwpl	r0, #64512	; 0xfc00
    10ac:	04005243 	streq	r5, [r0], #-579	; 0x243
    10b0:	01df0176 	bicseq	r0, pc, r6, ror r1	; <UNPREDICTABLE>
    10b4:	0f100000 	svceq	0x00100000
    10b8:	00524343 	subseq	r4, r2, r3, asr #6
    10bc:	df017704 	svcle	0x00017704
    10c0:	14000001 	strne	r0, [r0], #-1
    10c4:	5048530f 	subpl	r5, r8, pc, lsl #6
    10c8:	01780400 	cmneq	r8, r0, lsl #8
    10cc:	00000320 	andeq	r0, r0, r0, lsr #6
    10d0:	01bb0618 			; <UNDEFINED> instruction: 0x01bb0618
    10d4:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
    10d8:	0001df01 	andeq	sp, r1, r1, lsl #30
    10dc:	23062400 	movwcs	r2, #25600	; 0x6400
    10e0:	04000001 	streq	r0, [r0], #-1
    10e4:	01df017a 	bicseq	r0, pc, sl, ror r1	; <UNPREDICTABLE>
    10e8:	06280000 	strteq	r0, [r8], -r0
    10ec:	0000022b 	andeq	r0, r0, fp, lsr #4
    10f0:	df017b04 	svcle	0x00017b04
    10f4:	2c000001 	stccs	0, cr0, [r0], {1}
    10f8:	00021606 	andeq	r1, r2, r6, lsl #12
    10fc:	017c0400 	cmneq	ip, r0, lsl #8
    1100:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1104:	01d70630 	bicseq	r0, r7, r0, lsr r6
    1108:	7d040000 	stcvc	0, cr0, [r4, #-0]
    110c:	0001df01 	andeq	sp, r1, r1, lsl #30
    1110:	f5063400 			; <UNDEFINED> instruction: 0xf5063400
    1114:	04000000 	streq	r0, [r0], #-0
    1118:	01df017e 	bicseq	r0, pc, lr, ror r1	; <UNPREDICTABLE>
    111c:	06380000 	ldrteq	r0, [r8], -r0
    1120:	00000384 	andeq	r0, r0, r4, lsl #7
    1124:	df017f04 	svcle	0x00017f04
    1128:	3c000001 	stccc	0, cr0, [r0], {1}
    112c:	5246500f 	subpl	r5, r6, #15
    1130:	01800400 	orreq	r0, r0, r0, lsl #8
    1134:	00000335 	andeq	r0, r0, r5, lsr r3
    1138:	46440f40 	strbmi	r0, [r4], -r0, asr #30
    113c:	81040052 	qaddhi	r0, r2, r4
    1140:	00030b01 	andeq	r0, r3, r1, lsl #22
    1144:	410f4800 	tstmi	pc, r0, lsl #16
    1148:	04005244 	streq	r5, [r0], #-580	; 0x244
    114c:	030b0182 	movweq	r0, #45442	; 0xb182
    1150:	064c0000 	strbeq	r0, [ip], -r0
    1154:	0000023a 	andeq	r0, r0, sl, lsr r2
    1158:	4f018304 	svcmi	0x00018304
    115c:	50000003 	andpl	r0, r0, r3
    1160:	00021106 	andeq	r1, r2, r6, lsl #2
    1164:	01840400 	orreq	r0, r4, r0, lsl #8
    1168:	00000369 	andeq	r0, r0, r9, ror #6
    116c:	023f0660 	eorseq	r0, pc, #96, 12	; 0x6000000
    1170:	85040000 	strhi	r0, [r4, #-0]
    1174:	00035901 	andeq	r5, r3, r1, lsl #18
    1178:	b8067400 	stmdalt	r6, {sl, ip, sp, lr}
    117c:	04000003 	streq	r0, [r0], #-3
    1180:	01df0186 	bicseq	r0, pc, r6, lsl #3
    1184:	00880000 	addeq	r0, r8, r0
    1188:	0001df10 	andeq	sp, r1, r0, lsl pc
    118c:	008c0900 	addeq	r0, ip, r0, lsl #18
    1190:	03200000 	teqeq	r0, #0
    1194:	790a0000 	stmdbvc	sl, {}	; <UNPREDICTABLE>
    1198:	0b000001 	bleq	11a4 <_Min_Stack_Size+0xda4>
    119c:	03100b00 	tsteq	r0, #0, 22
    11a0:	a2090000 	andge	r0, r9, #0
    11a4:	35000000 	strcc	r0, [r0, #-0]
    11a8:	0a000003 	beq	11bc <_Min_Stack_Size+0xdbc>
    11ac:	00000179 	andeq	r0, r0, r9, ror r1
    11b0:	3a100001 	bcc	4011bc <_Min_Stack_Size+0x400dbc>
    11b4:	0b000003 	bleq	11c8 <_Min_Stack_Size+0xdc8>
    11b8:	00000325 	andeq	r0, r0, r5, lsr #6
    11bc:	0000a209 	andeq	sl, r0, r9, lsl #4
    11c0:	00034f00 	andeq	r4, r3, r0, lsl #30
    11c4:	01790a00 	cmneq	r9, r0, lsl #20
    11c8:	00030000 	andeq	r0, r3, r0
    11cc:	00035410 	andeq	r5, r3, r0, lsl r4
    11d0:	033f0b00 	teqeq	pc, #0, 22
    11d4:	a2090000 	andge	r0, r9, #0
    11d8:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    11dc:	0a000003 	beq	11f0 <_Min_Stack_Size+0xdf0>
    11e0:	00000179 	andeq	r0, r0, r9, ror r1
    11e4:	6e100004 	cdpvs	0, 1, cr0, cr0, cr4, {0}
    11e8:	0b000003 	bleq	11fc <_Min_Stack_Size+0xdfc>
    11ec:	00000359 	andeq	r0, r0, r9, asr r3
    11f0:	00009a0d 	andeq	r9, r0, sp, lsl #20
    11f4:	01870400 	orreq	r0, r7, r0, lsl #8
    11f8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11fc:	6f04100e 	svcvs	0x0004100e
    1200:	0003bd02 	andeq	fp, r3, r2, lsl #26
    1204:	0d880600 	stceq	6, cr0, [r8]
    1208:	71040000 	mrsvc	r0, (UNDEF: 4)
    120c:	0001df02 	andeq	sp, r1, r2, lsl #30
    1210:	5c060000 	stcpl	0, cr0, [r6], {-0}
    1214:	0400000e 	streq	r0, [r0], #-14
    1218:	01df0272 	bicseq	r0, pc, r2, ror r2	; <UNPREDICTABLE>
    121c:	0f040000 	svceq	0x00040000
    1220:	004c4156 	subeq	r4, ip, r6, asr r1
    1224:	df027304 	svcle	0x00027304
    1228:	08000001 	stmdaeq	r0, {r0}
    122c:	000da606 	andeq	sl, sp, r6, lsl #12
    1230:	02740400 	rsbseq	r0, r4, #0, 8
    1234:	0000030b 	andeq	r0, r0, fp, lsl #6
    1238:	e40d000c 	str	r0, [sp], #-12
    123c:	0400000d 	streq	r0, [r0], #-13
    1240:	037f0275 	cmneq	pc, #1342177287	; 0x50000007
    1244:	970b0000 	strls	r0, [fp, -r0]
    1248:	11000000 	mrsne	r0, (UNDEF: 0)
    124c:	01f90501 	mvnseq	r0, r1, lsl #10
    1250:	000003e4 	andeq	r0, r0, r4, ror #7
    1254:	00048b12 	andeq	r8, r4, r2, lsl fp
    1258:	c3120000 	tstgt	r2, #0
    125c:	01000005 	tsteq	r0, r5
    1260:	092d0d00 	pusheq	{r8, sl, fp}
    1264:	f9050000 			; <UNDEFINED> instruction: 0xf9050000
    1268:	0003ce01 	andeq	ip, r3, r1, lsl #28
    126c:	06041300 	streq	r1, [r4], -r0, lsl #6
    1270:	00042936 	andeq	r2, r4, r6, lsr r9
    1274:	07c41400 	strbeq	r1, [r4, r0, lsl #8]
    1278:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
    127c:	0000008c 	andeq	r0, r0, ip, lsl #1
    1280:	07e81400 	strbeq	r1, [r8, r0, lsl #8]!
    1284:	3d060000 	stccc	0, cr0, [r6, #-0]
    1288:	0000008c 	andeq	r0, r0, ip, lsl #1
    128c:	0a9e1401 	beq	fe786298 <_estack+0xde756298>
    1290:	42060000 	andmi	r0, r6, #0
    1294:	0000008c 	andeq	r0, r0, ip, lsl #1
    1298:	03e11402 	mvneq	r1, #33554432	; 0x2000000
    129c:	47060000 	strmi	r0, [r6, -r0]
    12a0:	000003e4 	andeq	r0, r0, r4, ror #7
    12a4:	a5030003 	strge	r0, [r3, #-3]
    12a8:	06000008 	streq	r0, [r0], -r8
    12ac:	0003f04a 	andeq	pc, r3, sl, asr #32
    12b0:	0e6e1500 	cdpeq	5, 6, cr1, cr14, cr0, {0}
    12b4:	76010000 	strvc	r0, [r1], -r0
    12b8:	080004ac 	stmdaeq	r0, {r2, r3, r5, r7, sl}
    12bc:	00000014 	andeq	r0, r0, r4, lsl r0
    12c0:	04599c01 	ldrbeq	r9, [r9], #-3073	; 0xc01
    12c4:	52160000 	andspl	r0, r6, #0
    12c8:	0100000d 	tsteq	r0, sp
    12cc:	0000a276 	andeq	sl, r0, r6, ror r2
    12d0:	00012d00 	andeq	r2, r1, r0, lsl #26
    12d4:	b4150000 	ldrlt	r0, [r5], #-0
    12d8:	0100000c 	tsteq	r0, ip
    12dc:	0004c088 	andeq	ip, r4, r8, lsl #1
    12e0:	00008008 	andeq	r8, r0, r8
    12e4:	ab9c0100 	blge	fe7016ec <_estack+0xde6d16ec>
    12e8:	16000004 	strne	r0, [r0], -r4
    12ec:	00000d42 	andeq	r0, r0, r2, asr #26
    12f0:	04ab8801 	strteq	r8, [fp], #2049	; 0x801
    12f4:	014e0000 	mrseq	r0, (UNDEF: 78)
    12f8:	f1170000 			; <UNDEFINED> instruction: 0xf1170000
    12fc:	0100000d 	tsteq	r0, sp
    1300:	00008c8a 	andeq	r8, r0, sl, lsl #25
    1304:	00018800 	andeq	r8, r1, r0, lsl #16
    1308:	0d651700 	stcleq	7, cr1, [r5, #-0]
    130c:	8a010000 	bhi	41314 <_Min_Stack_Size+0x40f14>
    1310:	0000008c 	andeq	r0, r0, ip, lsl #1
    1314:	000001c8 	andeq	r0, r0, r8, asr #3
    1318:	000db117 	andeq	fp, sp, r7, lsl r1
    131c:	8c8a0100 	stfhis	f0, [sl], {0}
    1320:	eb000000 	bl	1328 <_Min_Stack_Size+0xf28>
    1324:	00000001 	andeq	r0, r0, r1
    1328:	04290418 	strteq	r0, [r9], #-1048	; 0x418
    132c:	8d150000 	ldchi	0, cr0, [r5, #-0]
    1330:	0100000d 	tsteq	r0, sp
    1334:	000540b4 	strheq	r4, [r5], -r4	; <UNPREDICTABLE>
    1338:	00001608 	andeq	r1, r0, r8, lsl #12
    133c:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    1340:	16000004 	strne	r0, [r0], -r4
    1344:	00000e4f 	andeq	r0, r0, pc, asr #28
    1348:	00a2b401 	adceq	fp, r2, r1, lsl #8
    134c:	020e0000 	andeq	r0, lr, #0
    1350:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    1354:	0100002d 	tsteq	r0, sp, lsr #32
    1358:	0000a2b4 			; <UNDEFINED> instruction: 0x0000a2b4
    135c:	00022f00 	andeq	r2, r2, r0, lsl #30
    1360:	b8150000 	ldmdalt	r5, {}	; <UNPREDICTABLE>
    1364:	0100000d 	tsteq	r0, sp
    1368:	000558c7 	andeq	r5, r5, r7, asr #17
    136c:	00001a08 	andeq	r1, r0, r8, lsl #20
    1370:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    1374:	16000005 	strne	r0, [r0], -r5
    1378:	00000e61 	andeq	r0, r0, r1, ror #28
    137c:	008cc701 	addeq	ip, ip, r1, lsl #14
    1380:	02500000 	subseq	r0, r0, #0
    1384:	71190000 	tstvc	r9, r0
    1388:	0100000d 	tsteq	r0, sp
    138c:	0003e4c7 	andeq	lr, r3, r7, asr #9
    1390:	00510100 	subseq	r0, r1, r0, lsl #2
    1394:	000dcc15 	andeq	ip, sp, r5, lsl ip
    1398:	74df0100 	ldrbvc	r0, [pc], #256	; 13a0 <_Min_Stack_Size+0xfa0>
    139c:	1a080005 	bne	2013b8 <_Min_Stack_Size+0x200fb8>
    13a0:	01000000 	mrseq	r0, (UNDEF: 0)
    13a4:	00053a9c 	muleq	r5, ip, sl
    13a8:	0d301900 	ldceq	9, cr1, [r0, #-0]
    13ac:	df010000 	svcle	0x00010000
    13b0:	000000a2 	andeq	r0, r0, r2, lsr #1
    13b4:	1a005001 	bne	153c0 <_Min_Stack_Size+0x14fc0>
    13b8:	000003a0 	andeq	r0, r0, r0, lsr #7
    13bc:	c906a704 	stmdbgt	r6, {r2, r8, r9, sl, sp, pc}
    13c0:	00000003 	andeq	r0, r0, r3
    13c4:	00000841 	andeq	r0, r0, r1, asr #16
    13c8:	04a40004 	strteq	r0, [r4], #4
    13cc:	01040000 	mrseq	r0, (UNDEF: 4)
    13d0:	00000287 	andeq	r0, r0, r7, lsl #5
    13d4:	000f2401 	andeq	r2, pc, r1, lsl #8
    13d8:	0000ab00 	andeq	sl, r0, r0, lsl #22
    13dc:	0000b000 	andeq	fp, r0, r0
    13e0:	00000000 	andeq	r0, r0, r0
    13e4:	00065200 	andeq	r5, r6, r0, lsl #4
    13e8:	06010200 	streq	r0, [r1], -r0, lsl #4
    13ec:	00000153 	andeq	r0, r0, r3, asr r1
    13f0:	00011903 	andeq	r1, r1, r3, lsl #18
    13f4:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
    13f8:	02000000 	andeq	r0, r0, #0
    13fc:	01510801 	cmpeq	r1, r1, lsl #16
    1400:	02020000 	andeq	r0, r2, #0
    1404:	00010605 	andeq	r0, r1, r5, lsl #12
    1408:	005c0300 	subseq	r0, ip, r0, lsl #6
    140c:	26020000 	strcs	r0, [r2], -r0
    1410:	00000050 	andeq	r0, r0, r0, asr r0
    1414:	e8070202 	stmda	r7, {r1, r9}
    1418:	03000001 	movweq	r0, #1
    141c:	0000037a 	andeq	r0, r0, sl, ror r3
    1420:	00623702 	rsbeq	r3, r2, r2, lsl #14
    1424:	04020000 	streq	r0, [r2], #-0
    1428:	0000ec05 	andeq	lr, r0, r5, lsl #24
    142c:	00510300 	subseq	r0, r1, r0, lsl #6
    1430:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    1434:	00000074 	andeq	r0, r0, r4, ror r0
    1438:	7b070402 	blvc	1c2448 <_Min_Stack_Size+0x1c2048>
    143c:	02000001 	andeq	r0, r0, #1
    1440:	00e70508 	rsceq	r0, r7, r8, lsl #10
    1444:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1448:	00017607 	andeq	r7, r1, r7, lsl #12
    144c:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    1450:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1454:	80070402 	andhi	r0, r7, r2, lsl #8
    1458:	03000001 	movweq	r0, #1
    145c:	0000011b 	andeq	r0, r0, fp, lsl r1
    1460:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    1464:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
    1468:	03000000 	movweq	r0, #0
    146c:	00004536 	andeq	r4, r0, r6, lsr r5
    1470:	037c0300 	cmneq	ip, #0, 6
    1474:	41030000 	mrsmi	r0, (UNDEF: 3)
    1478:	00000057 	andeq	r0, r0, r7, asr r0
    147c:	00005303 	andeq	r5, r0, r3, lsl #6
    1480:	69420300 	stmdbvs	r2, {r8, r9}^
    1484:	02000000 	andeq	r0, r0, #0
    1488:	002c0704 	eoreq	r0, ip, r4, lsl #14
    148c:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    1490:	06000000 	streq	r0, [r0], -r0
    1494:	000000b8 	strheq	r0, [r0], -r8
    1498:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    149c:	0000c307 	andeq	ip, r0, r7, lsl #6
    14a0:	05000100 	streq	r0, [r0, #-256]	; 0x100
    14a4:	000000a2 	andeq	r0, r0, r2, lsr #1
    14a8:	0000ad05 	andeq	sl, r0, r5, lsl #26
    14ac:	04010800 	streq	r0, [r1], #-2048	; 0x800
    14b0:	00ff01f9 	ldrshteq	r0, [pc], #25
    14b4:	8b090000 	blhi	2414bc <_Min_Stack_Size+0x2410bc>
    14b8:	00000004 	andeq	r0, r0, r4
    14bc:	0005c309 	andeq	ip, r5, r9, lsl #6
    14c0:	0a000100 	beq	18c8 <_Min_Stack_Size+0x14c8>
    14c4:	0000092d 	andeq	r0, r0, sp, lsr #18
    14c8:	e901f904 	stmdb	r1, {r2, r8, fp, ip, sp, lr, pc}
    14cc:	0b000000 	bleq	14d4 <_Min_Stack_Size+0x10d4>
    14d0:	03d40428 	bicseq	r0, r4, #40, 8	; 0x28000000
    14d4:	00000197 	muleq	r0, r7, r1
    14d8:	00093d0c 	andeq	r3, r9, ip, lsl #26
    14dc:	03d60400 	bicseq	r0, r6, #0, 8
    14e0:	000000ca 	andeq	r0, r0, sl, asr #1
    14e4:	04560c00 	ldrbeq	r0, [r6], #-3072	; 0xc00
    14e8:	d7040000 	strle	r0, [r4, -r0]
    14ec:	0000ca03 	andeq	ip, r0, r3, lsl #20
    14f0:	4e0c0400 	cfcpysmi	mvf0, mvf12
    14f4:	04000006 	streq	r0, [r0], #-6
    14f8:	00ca03d8 	ldrdeq	r0, [sl], #56	; 0x38
    14fc:	0c080000 	stceq	0, cr0, [r8], {-0}
    1500:	000003db 	ldrdeq	r0, [r0], -fp
    1504:	ca03d904 	bgt	f791c <_Min_Stack_Size+0xf751c>
    1508:	0c000000 	stceq	0, cr0, [r0], {-0}
    150c:	5244490d 	subpl	r4, r4, #212992	; 0x34000
    1510:	03da0400 	bicseq	r0, sl, #0, 8
    1514:	000000ca 	andeq	r0, r0, sl, asr #1
    1518:	444f0d10 	strbmi	r0, [pc], #-3344	; 1520 <_Min_Stack_Size+0x1120>
    151c:	db040052 	blle	10166c <_Min_Stack_Size+0x10126c>
    1520:	0000ca03 	andeq	ip, r0, r3, lsl #20
    1524:	bb0c1400 	bllt	30652c <_Min_Stack_Size+0x30612c>
    1528:	0400000b 	streq	r0, [r0], #-11
    152c:	00df03dc 	ldrsbeq	r0, [pc], #60	; <UNPREDICTABLE>
    1530:	0c180000 	ldceq	0, cr0, [r8], {-0}
    1534:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1538:	df03dd04 	svcle	0x0003dd04
    153c:	1a000000 	bne	1544 <_Min_Stack_Size+0x1144>
    1540:	00073a0c 	andeq	r3, r7, ip, lsl #20
    1544:	03de0400 	bicseq	r0, lr, #0, 8
    1548:	000000ca 	andeq	r0, r0, sl, asr #1
    154c:	46410d1c 			; <UNDEFINED> instruction: 0x46410d1c
    1550:	df040052 	svcle	0x00040052
    1554:	00019703 	andeq	r9, r1, r3, lsl #14
    1558:	05002000 	streq	r2, [r0, #-0]
    155c:	000000cf 	andeq	r0, r0, pc, asr #1
    1560:	00062e0a 	andeq	r2, r6, sl, lsl #28
    1564:	03e00400 	mvneq	r0, #0, 8
    1568:	0000010b 	andeq	r0, r0, fp, lsl #2
    156c:	4205010e 	andmi	r0, r5, #-2147483645	; 0x80000003
    1570:	000001c9 	andeq	r0, r0, r9, asr #3
    1574:	00054a09 	andeq	r4, r5, r9, lsl #20
    1578:	f1090000 			; <UNDEFINED> instruction: 0xf1090000
    157c:	0100000a 	tsteq	r0, sl
    1580:	0004ab09 	andeq	sl, r4, r9, lsl #22
    1584:	df090200 	svcle	0x00090200
    1588:	03000004 	movweq	r0, #4
    158c:	0c530300 	mrrceq	3, 0, r0, r3, cr0
    1590:	47050000 	strmi	r0, [r5, -r0]
    1594:	000001a8 	andeq	r0, r0, r8, lsr #3
    1598:	4f05010e 	svcmi	0x0005010e
    159c:	000001e9 	andeq	r0, r0, r9, ror #3
    15a0:	00049309 	andeq	r9, r4, r9, lsl #6
    15a4:	cd090000 	stcgt	0, cr0, [r9, #-0]
    15a8:	0100000b 	tsteq	r0, fp
    15ac:	051d0300 	ldreq	r0, [sp, #-768]	; 0x300
    15b0:	52050000 	andpl	r0, r5, #0
    15b4:	000001d4 	ldrdeq	r0, [r0], -r4
    15b8:	5a05010e 	bpl	1419f8 <_Min_Stack_Size+0x1415f8>
    15bc:	00000215 	andeq	r0, r0, r5, lsl r2
    15c0:	0004ec09 	andeq	lr, r4, r9, lsl #24
    15c4:	64090000 	strvs	r0, [r9], #-0
    15c8:	01000006 	tsteq	r0, r6
    15cc:	0009fe09 	andeq	pc, r9, r9, lsl #28
    15d0:	be090200 	cdplt	2, 0, cr0, cr9, cr0, {0}
    15d4:	0300000c 	movweq	r0, #12
    15d8:	06940300 	ldreq	r0, [r4], r0, lsl #6
    15dc:	5f050000 	svcpl	0x00050000
    15e0:	000001f4 	strdeq	r0, [r0], -r4
    15e4:	6e05010e 	adfvss	f0, f5, #0.5
    15e8:	0000023b 	andeq	r0, r0, fp, lsr r2
    15ec:	00082409 	andeq	r2, r8, r9, lsl #8
    15f0:	2a090000 	bcs	2415f8 <_Min_Stack_Size+0x2411f8>
    15f4:	0100000c 	tsteq	r0, ip
    15f8:	000bf609 	andeq	pc, fp, r9, lsl #12
    15fc:	03000200 	movweq	r0, #512	; 0x200
    1600:	00000797 	muleq	r0, r7, r7
    1604:	02207205 	eoreq	r7, r0, #1342177280	; 0x50000000
    1608:	010e0000 	mrseq	r0, (UNDEF: 14)
    160c:	025b7a05 	subseq	r7, fp, #20480	; 0x5000
    1610:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    1614:	0000000e 	andeq	r0, r0, lr
    1618:	000e8e09 	andeq	r8, lr, r9, lsl #28
    161c:	03000100 	movweq	r0, #256	; 0x100
    1620:	00000fdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1624:	02467d05 	subeq	r7, r6, #320	; 0x140
    1628:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    162c:	02ab8405 	adceq	r8, fp, #83886080	; 0x5000000
    1630:	a6100000 	ldrge	r0, [r0], -r0
    1634:	05000006 	streq	r0, [r0, #-6]
    1638:	0000b886 	andeq	fp, r0, r6, lsl #17
    163c:	58100000 	ldmdapl	r0, {}	; <UNPREDICTABLE>
    1640:	0500000b 	streq	r0, [r0, #-11]
    1644:	0001c989 	andeq	ip, r1, r9, lsl #19
    1648:	c7100400 	ldrgt	r0, [r0, -r0, lsl #8]
    164c:	05000004 	streq	r0, [r0, #-4]
    1650:	0002158c 	andeq	r1, r2, ip, lsl #11
    1654:	69100500 	ldmdbvs	r0, {r8, sl}
    1658:	05000008 	streq	r0, [r0, #-8]
    165c:	0001e98f 	andeq	lr, r1, pc, lsl #19
    1660:	ff100600 			; <UNDEFINED> instruction: 0xff100600
    1664:	0500000a 	streq	r0, [r0, #-10]
    1668:	00023b92 	muleq	r2, r2, fp
    166c:	03000700 	movweq	r0, #1792	; 0x700
    1670:	0000091c 	andeq	r0, r0, ip, lsl r9
    1674:	02669405 	rsbeq	r9, r6, #83886080	; 0x5000000
    1678:	02110000 	andseq	r0, r1, #0
    167c:	0100000f 	tsteq	r0, pc
    1680:	0005907f 	andeq	r9, r5, pc, ror r0
    1684:	00016e08 	andeq	r6, r1, r8, lsl #28
    1688:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    168c:	12000004 	andne	r0, r0, #4
    1690:	00001c34 	andeq	r1, r0, r4, lsr ip
    1694:	04f97f01 	ldrbteq	r7, [r9], #3841	; 0xf01
    1698:	028a0000 	addeq	r0, sl, #0
    169c:	20130000 	andscs	r0, r3, r0
    16a0:	31080006 	tstcc	r8, r6
    16a4:	f4000008 	vst4.8	{d0-d3}, [r0], r8
    16a8:	14000002 	strne	r0, [r0], #-2
    16ac:	31015101 	tstcc	r1, r1, lsl #2
    16b0:	03500114 	cmpeq	r0, #20, 2
    16b4:	0004000a 	andeq	r0, r4, sl
    16b8:	00062e15 	andeq	r2, r6, r5, lsl lr
    16bc:	00083108 	andeq	r3, r8, r8, lsl #2
    16c0:	00030e00 	andeq	r0, r3, r0, lsl #28
    16c4:	51011400 	tstpl	r1, r0, lsl #8
    16c8:	01143001 	tsteq	r4, r1
    16cc:	000a0350 	andeq	r0, sl, r0, asr r3
    16d0:	36130004 	ldrcc	r0, [r3], -r4
    16d4:	31080006 	tstcc	r8, r6
    16d8:	26000008 	strcs	r0, [r0], -r8
    16dc:	14000003 	strne	r0, [r0], #-3
    16e0:	31015101 	tstcc	r1, r1, lsl #2
    16e4:	01500114 	cmpeq	r0, r4, lsl r1
    16e8:	42150031 	andsmi	r0, r5, #49	; 0x31
    16ec:	31080006 	tstcc	r8, r6
    16f0:	3e000008 	cdpcc	0, 0, cr0, cr0, cr8, {0}
    16f4:	14000003 	strne	r0, [r0], #-3
    16f8:	30015101 	andcc	r5, r1, r1, lsl #2
    16fc:	01500114 	cmpeq	r0, r4, lsl r1
    1700:	4a130031 	bmi	4c17cc <_Min_Stack_Size+0x4c13cc>
    1704:	31080006 	tstcc	r8, r6
    1708:	56000008 	strpl	r0, [r0], -r8
    170c:	14000003 	strne	r0, [r0], #-3
    1710:	31015101 	tstcc	r1, r1, lsl #2
    1714:	01500114 	cmpeq	r0, r4, lsl r1
    1718:	56150032 			; <UNDEFINED> instruction: 0x56150032
    171c:	31080006 	tstcc	r8, r6
    1720:	6e000008 	cdpvs	0, 0, cr0, cr0, cr8, {0}
    1724:	14000003 	strne	r0, [r0], #-3
    1728:	30015101 	andcc	r5, r1, r1, lsl #2
    172c:	01500114 	cmpeq	r0, r4, lsl r1
    1730:	5e130032 	mrcpl	0, 0, r0, cr3, cr2, {1}
    1734:	31080006 	tstcc	r8, r6
    1738:	86000008 	strhi	r0, [r0], -r8
    173c:	14000003 	strne	r0, [r0], #-3
    1740:	31015101 	tstcc	r1, r1, lsl #2
    1744:	01500114 	cmpeq	r0, r4, lsl r1
    1748:	6a150034 	bvs	541820 <_Min_Stack_Size+0x541420>
    174c:	31080006 	tstcc	r8, r6
    1750:	9e000008 	cdpls	0, 0, cr0, cr0, cr8, {0}
    1754:	14000003 	strne	r0, [r0], #-3
    1758:	30015101 	andcc	r5, r1, r1, lsl #2
    175c:	01500114 	cmpeq	r0, r4, lsl r1
    1760:	72130034 	andsvc	r0, r3, #52	; 0x34
    1764:	31080006 	tstcc	r8, r6
    1768:	b6000008 	strlt	r0, [r0], -r8
    176c:	14000003 	strne	r0, [r0], #-3
    1770:	31015101 	tstcc	r1, r1, lsl #2
    1774:	01500114 	cmpeq	r0, r4, lsl r1
    1778:	7e150038 	mrcvc	0, 0, r0, cr5, cr8, {1}
    177c:	31080006 	tstcc	r8, r6
    1780:	ce000008 	cdpgt	0, 0, cr0, cr0, cr8, {0}
    1784:	14000003 	strne	r0, [r0], #-3
    1788:	30015101 	andcc	r5, r1, r1, lsl #2
    178c:	01500114 	cmpeq	r0, r4, lsl r1
    1790:	86130038 			; <UNDEFINED> instruction: 0x86130038
    1794:	31080006 	tstcc	r8, r6
    1798:	e6000008 	str	r0, [r0], -r8
    179c:	14000003 	strne	r0, [r0], #-3
    17a0:	31015101 	tstcc	r1, r1, lsl #2
    17a4:	01500114 	cmpeq	r0, r4, lsl r1
    17a8:	92150040 	andsls	r0, r5, #64	; 0x40
    17ac:	31080006 	tstcc	r8, r6
    17b0:	fe000008 	cdp2	0, 0, cr0, cr0, cr8, {0}
    17b4:	14000003 	strne	r0, [r0], #-3
    17b8:	30015101 	andcc	r5, r1, r1, lsl #2
    17bc:	01500114 	cmpeq	r0, r4, lsl r1
    17c0:	9a130040 	bls	4c18c8 <_Min_Stack_Size+0x4c14c8>
    17c4:	31080006 	tstcc	r8, r6
    17c8:	17000008 	strne	r0, [r0, -r8]
    17cc:	14000004 	strne	r0, [r0], #-4
    17d0:	31015101 	tstcc	r1, r1, lsl #2
    17d4:	02500114 	subseq	r0, r0, #20, 2
    17d8:	15002008 	strne	r2, [r0, #-8]
    17dc:	080006a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl}
    17e0:	00000831 	andeq	r0, r0, r1, lsr r8
    17e4:	00000430 	andeq	r0, r0, r0, lsr r4
    17e8:	01510114 	cmpeq	r1, r4, lsl r1
    17ec:	50011430 	andpl	r1, r1, r0, lsr r4
    17f0:	00200802 	eoreq	r0, r0, r2, lsl #16
    17f4:	0006ae13 	andeq	sl, r6, r3, lsl lr
    17f8:	00083108 	andeq	r3, r8, r8, lsl #2
    17fc:	00044900 	andeq	r4, r4, r0, lsl #18
    1800:	51011400 	tstpl	r1, r0, lsl #8
    1804:	01143101 	tsteq	r4, r1, lsl #2
    1808:	40080250 	andmi	r0, r8, r0, asr r2
    180c:	06ba1500 	ldrteq	r1, [sl], r0, lsl #10
    1810:	08310800 	ldmdaeq	r1!, {fp}
    1814:	04620000 	strbteq	r0, [r2], #-0
    1818:	01140000 	tsteq	r4, r0
    181c:	14300151 	ldrtne	r0, [r0], #-337	; 0x151
    1820:	08025001 	stmdaeq	r2, {r0, ip, lr}
    1824:	c2130040 	andsgt	r0, r3, #64	; 0x40
    1828:	31080006 	tstcc	r8, r6
    182c:	7b000008 	blvc	1854 <_Min_Stack_Size+0x1454>
    1830:	14000004 	strne	r0, [r0], #-4
    1834:	31015101 	tstcc	r1, r1, lsl #2
    1838:	02500114 	subseq	r0, r0, #20, 2
    183c:	15008008 	strne	r8, [r0, #-8]
    1840:	080006ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl}
    1844:	00000831 	andeq	r0, r0, r1, lsr r8
    1848:	00000494 	muleq	r0, r4, r4
    184c:	01510114 	cmpeq	r1, r4, lsl r1
    1850:	50011430 	andpl	r1, r1, r0, lsr r4
    1854:	00800802 	addeq	r0, r0, r2, lsl #16
    1858:	0006d813 	andeq	sp, r6, r3, lsl r8
    185c:	00083108 	andeq	r3, r8, r8, lsl #2
    1860:	0004ae00 	andeq	sl, r4, r0, lsl #28
    1864:	51011400 	tstpl	r1, r0, lsl #8
    1868:	01143101 	tsteq	r4, r1, lsl #2
    186c:	000a0350 	andeq	r0, sl, r0, asr r3
    1870:	e6150001 	ldr	r0, [r5], -r1
    1874:	31080006 	tstcc	r8, r6
    1878:	c8000008 	stmdagt	r0, {r3}
    187c:	14000004 	strne	r0, [r0], #-4
    1880:	30015101 	andcc	r5, r1, r1, lsl #2
    1884:	03500114 	cmpeq	r0, #20, 2
    1888:	0001000a 	andeq	r0, r1, sl
    188c:	0006f013 	andeq	pc, r6, r3, lsl r0	; <UNPREDICTABLE>
    1890:	00083108 	andeq	r3, r8, r8, lsl #2
    1894:	0004e200 	andeq	lr, r4, r0, lsl #4
    1898:	51011400 	tstpl	r1, r0, lsl #8
    189c:	01143101 	tsteq	r4, r1, lsl #2
    18a0:	000a0350 	andeq	r0, sl, r0, asr r3
    18a4:	fe160002 	cdp2	0, 1, cr0, cr6, cr2, {0}
    18a8:	31080006 	tstcc	r8, r6
    18ac:	14000008 	strne	r0, [r0], #-8
    18b0:	30015101 	andcc	r5, r1, r1, lsl #2
    18b4:	03500114 	cmpeq	r0, #20, 2
    18b8:	0002000a 	andeq	r0, r2, sl
    18bc:	9c041700 	stcls	7, cr1, [r4], {-0}
    18c0:	11000001 	tstne	r0, r1
    18c4:	0000087d 	andeq	r0, r0, sp, ror r8
    18c8:	0700ca01 	streq	ip, [r0, -r1, lsl #20]
    18cc:	00c00800 	sbceq	r0, r0, r0, lsl #16
    18d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18d4:	0000055c 	andeq	r0, r0, ip, asr r5
    18d8:	001c3418 	andseq	r3, ip, r8, lsl r4
    18dc:	f9ca0100 			; <UNDEFINED> instruction: 0xf9ca0100
    18e0:	01000004 	tsteq	r0, r4
    18e4:	0f921850 	svceq	0x00921850
    18e8:	ca010000 	bgt	418f0 <_Min_Stack_Size+0x414f0>
    18ec:	0000055c 	andeq	r0, r0, ip, asr r5
    18f0:	87195101 	ldrhi	r5, [r9, -r1, lsl #2]
    18f4:	0100000e 	tsteq	r0, lr
    18f8:	0000b8cc 	andeq	fp, r0, ip, asr #17
    18fc:	0003a500 	andeq	sl, r3, r0, lsl #10
    1900:	6f701a00 	svcvs	0x00701a00
    1904:	cc010073 	stcgt	0, cr0, [r1], {115}	; 0x73
    1908:	000000b8 	strheq	r0, [r0], -r8
    190c:	000003c4 	andeq	r0, r0, r4, asr #7
    1910:	000fe919 	andeq	lr, pc, r9, lsl r9	; <UNPREDICTABLE>
    1914:	b8cc0100 	stmialt	ip, {r8}^
    1918:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    191c:	00000004 	andeq	r0, r0, r4
    1920:	02ab0417 	adceq	r0, fp, #385875968	; 0x17000000
    1924:	b7110000 	ldrlt	r0, [r1, -r0]
    1928:	0100000e 	tsteq	r0, lr
    192c:	0007c0fe 	strdeq	ip, [r7], -lr
    1930:	00001208 	andeq	r1, r0, r8, lsl #4
    1934:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    1938:	18000005 	stmdane	r0, {r0, r2}
    193c:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    1940:	055cfe01 	ldrbeq	pc, [ip, #-3585]	; 0xe01	; <UNPREDICTABLE>
    1944:	50010000 	andpl	r0, r1, r0
    1948:	0fcc1b00 	svceq	0x00cc1b00
    194c:	15010000 	strne	r0, [r1, #-0]
    1950:	0007d401 	andeq	sp, r7, r1, lsl #8
    1954:	00002408 	andeq	r2, r0, r8, lsl #8
    1958:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    195c:	1c000005 	stcne	0, cr0, [r0], {5}
    1960:	00001c34 	andeq	r1, r0, r4, lsr ip
    1964:	f9011501 			; <UNDEFINED> instruction: 0xf9011501
    1968:	01000004 	tsteq	r0, r4
    196c:	06a61c50 	ssateq	r1, #7, r0, asr #24
    1970:	15010000 	strne	r0, [r1, #-0]
    1974:	0000a201 	andeq	sl, r0, r1, lsl #4
    1978:	1d510100 	ldfnee	f0, [r1, #-0]
    197c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1980:	ca011701 	bgt	4758c <_Min_Stack_Size+0x4718c>
    1984:	02000000 	andeq	r0, r0, #0
    1988:	1e007c91 	mcrne	12, 0, r7, cr0, cr1, {4}
    198c:	00000f0e 	andeq	r0, r0, lr, lsl #30
    1990:	97014301 	strls	r4, [r1, -r1, lsl #6]
    1994:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1998:	0c080007 	stceq	0, cr0, [r8], {7}
    199c:	01000000 	mrseq	r0, (UNDEF: 0)
    19a0:	0006109c 	muleq	r6, ip, r0
    19a4:	1c341f00 	ldcne	15, cr1, [r4], #-0
    19a8:	43010000 	movwmi	r0, #4096	; 0x1000
    19ac:	0004f901 	andeq	pc, r4, r1, lsl #18
    19b0:	00048c00 	andeq	r8, r4, r0, lsl #24
    19b4:	06a61c00 	strteq	r1, [r6], r0, lsl #24
    19b8:	43010000 	movwmi	r0, #4096	; 0x1000
    19bc:	0000a201 	andeq	sl, r0, r1, lsl #4
    19c0:	20510100 	subscs	r0, r1, r0, lsl #2
    19c4:	00000f71 	andeq	r0, r0, r1, ror pc
    19c8:	97014501 	strls	r4, [r1, -r1, lsl #10]
    19cc:	ad000000 	stcge	0, cr0, [r0, #-0]
    19d0:	00000004 	andeq	r0, r0, r4
    19d4:	000fb91e 	andeq	fp, pc, lr, lsl r9	; <UNPREDICTABLE>
    19d8:	015d0100 	cmpeq	sp, r0, lsl #2
    19dc:	000000a2 	andeq	r0, r0, r2, lsr #1
    19e0:	08000804 	stmdaeq	r0, {r2, fp}
    19e4:	00000006 	andeq	r0, r0, r6
    19e8:	063b9c01 	ldrteq	r9, [fp], -r1, lsl #24
    19ec:	341f0000 	ldrcc	r0, [pc], #-0	; 19f4 <_Min_Stack_Size+0x15f4>
    19f0:	0100001c 	tsteq	r0, ip, lsl r0
    19f4:	04f9015d 	ldrbteq	r0, [r9], #349	; 0x15d
    19f8:	04d70000 	ldrbeq	r0, [r7], #0
    19fc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1a00:	00001027 	andeq	r1, r0, r7, lsr #32
    1a04:	97016e01 	strls	r6, [r1, -r1, lsl #28]
    1a08:	0c000000 	stceq	0, cr0, [r0], {-0}
    1a0c:	0c080008 	stceq	0, cr0, [r8], {8}
    1a10:	01000000 	mrseq	r0, (UNDEF: 0)
    1a14:	0006849c 	muleq	r6, ip, r4
    1a18:	1c341f00 	ldcne	15, cr1, [r4], #-0
    1a1c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1a20:	0004f901 	andeq	pc, r4, r1, lsl #18
    1a24:	0004f800 	andeq	pc, r4, r0, lsl #16
    1a28:	06a61c00 	strteq	r1, [r6], r0, lsl #24
    1a2c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1a30:	0000a201 	andeq	sl, r0, r1, lsl #4
    1a34:	20510100 	subscs	r0, r1, r0, lsl #2
    1a38:	00000f71 	andeq	r0, r0, r1, ror pc
    1a3c:	97017001 	strls	r7, [r1, -r1]
    1a40:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    1a44:	00000005 	andeq	r0, r0, r5
    1a48:	000e961e 	andeq	r9, lr, lr, lsl r6
    1a4c:	01880100 	orreq	r0, r8, r0, lsl #2
    1a50:	000000a2 	andeq	r0, r0, r2, lsr #1
    1a54:	08000818 	stmdaeq	r0, {r3, r4, fp}
    1a58:	00000006 	andeq	r0, r0, r6
    1a5c:	06af9c01 	strteq	r9, [pc], r1, lsl #24
    1a60:	341f0000 	ldrcc	r0, [pc], #-0	; 1a68 <_Min_Stack_Size+0x1668>
    1a64:	0100001c 	tsteq	r0, ip, lsl r0
    1a68:	04f90188 	ldrbteq	r0, [r9], #392	; 0x188
    1a6c:	05430000 	strbeq	r0, [r3, #-0]
    1a70:	1b000000 	blne	1a78 <_Min_Stack_Size+0x1678>
    1a74:	00000ee6 	andeq	r0, r0, r6, ror #29
    1a78:	20019c01 	andcs	r9, r1, r1, lsl #24
    1a7c:	04080008 	streq	r0, [r8], #-8
    1a80:	01000000 	mrseq	r0, (UNDEF: 0)
    1a84:	0006e29c 	muleq	r6, ip, r2
    1a88:	1c341c00 	ldcne	12, cr1, [r4], #-0
    1a8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a90:	0004f901 	andeq	pc, r4, r1, lsl #18
    1a94:	1c500100 	ldfnee	f0, [r0], {-0}
    1a98:	000006a6 	andeq	r0, r0, r6, lsr #13
    1a9c:	a2019c01 	andge	r9, r1, #256	; 0x100
    1aa0:	01000000 	mrseq	r0, (UNDEF: 0)
    1aa4:	f31b0051 	vqadd.u16	q0, <illegal reg q5.5>, <illegal reg q0.5>
    1aa8:	0100000e 	tsteq	r0, lr
    1aac:	082401b1 	stmdaeq	r4!, {r0, r4, r5, r7, r8}
    1ab0:	00040800 	andeq	r0, r4, r0, lsl #16
    1ab4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ab8:	00000715 	andeq	r0, r0, r5, lsl r7
    1abc:	001c341c 	andseq	r3, ip, ip, lsl r4
    1ac0:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1ac4:	000004f9 	strdeq	r0, [r0], -r9
    1ac8:	a61c5001 	ldrge	r5, [ip], -r1
    1acc:	01000006 	tsteq	r0, r6
    1ad0:	00a201b1 	strhteq	r0, [r2], r1
    1ad4:	51010000 	mrspl	r0, (UNDEF: 1)
    1ad8:	0ed81b00 	vfnmseq.f64	d17, d8, d0
    1adc:	c7010000 	strgt	r0, [r1, -r0]
    1ae0:	00082801 	andeq	r2, r8, r1, lsl #16
    1ae4:	00000a08 	andeq	r0, r0, r8, lsl #20
    1ae8:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    1aec:	1c000007 	stcne	0, cr0, [r0], {7}
    1af0:	00001c34 	andeq	r1, r0, r4, lsr ip
    1af4:	f901c701 			; <UNDEFINED> instruction: 0xf901c701
    1af8:	01000004 	tsteq	r0, r4
    1afc:	06a61c50 	ssateq	r1, #7, r0, asr #24
    1b00:	c7010000 	strgt	r0, [r1, -r0]
    1b04:	0000a201 	andeq	sl, r0, r1, lsl #4
    1b08:	1c510100 	ldfnee	f0, [r1], {-0}
    1b0c:	00000ec7 	andeq	r0, r0, r7, asr #29
    1b10:	5b01c701 	blpl	7371c <_Min_Stack_Size+0x7331c>
    1b14:	01000002 	tsteq	r0, r2
    1b18:	f41b0052 			; <UNDEFINED> instruction: 0xf41b0052
    1b1c:	0100000f 	tsteq	r0, pc
    1b20:	083401e0 	ldmdaeq	r4!, {r5, r6, r7, r8}
    1b24:	00040800 	andeq	r0, r4, r0, lsl #16
    1b28:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b2c:	00000789 	andeq	r0, r0, r9, lsl #15
    1b30:	001c341c 	andseq	r3, ip, ip, lsl r4
    1b34:	01e00100 	mvneq	r0, r0, lsl #2
    1b38:	000004f9 	strdeq	r0, [r0], -r9
    1b3c:	a21c5001 	andsge	r5, ip, #1
    1b40:	0100000f 	tsteq	r0, pc
    1b44:	00a201e0 	adceq	r0, r2, r0, ror #3
    1b48:	51010000 	mrspl	r0, (UNDEF: 1)
    1b4c:	0fff1b00 	svceq	0x00ff1b00
    1b50:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1b54:	00083801 	andeq	r3, r8, r1, lsl #16
    1b58:	00000808 	andeq	r0, r0, r8, lsl #16
    1b5c:	be9c0100 	fmllte	f0, f4, f0
    1b60:	1c000007 	stcne	0, cr0, [r0], {7}
    1b64:	00001c34 	andeq	r1, r0, r4, lsr ip
    1b68:	f901f001 			; <UNDEFINED> instruction: 0xf901f001
    1b6c:	01000004 	tsteq	r0, r4
    1b70:	06a61f50 	ssateq	r1, #7, r0, asr #30
    1b74:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1b78:	0000a201 	andeq	sl, r0, r1, lsl #4
    1b7c:	00056400 	andeq	r6, r5, r0, lsl #8
    1b80:	161b0000 	ldrne	r0, [fp], -r0
    1b84:	01000010 	tsteq	r0, r0, lsl r0
    1b88:	08400243 	stmdaeq	r0, {r0, r1, r6, r9}^
    1b8c:	00280800 	eoreq	r0, r8, r0, lsl #16
    1b90:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b94:	00000825 	andeq	r0, r0, r5, lsr #16
    1b98:	001c341f 	andseq	r3, ip, pc, lsl r4
    1b9c:	02430100 	subeq	r0, r3, #0, 2
    1ba0:	000004f9 	strdeq	r0, [r0], -r9
    1ba4:	00000585 	andeq	r0, r0, r5, lsl #11
    1ba8:	000faa1f 	andeq	sl, pc, pc, lsl sl	; <UNPREDICTABLE>
    1bac:	02430100 	subeq	r0, r3, #0, 2
    1bb0:	000000a2 	andeq	r0, r0, r2, lsr #1
    1bb4:	000005a6 	andeq	r0, r0, r6, lsr #11
    1bb8:	000eaa1f 	andeq	sl, lr, pc, lsl sl
    1bbc:	02430100 	subeq	r0, r3, #0, 2
    1bc0:	00000097 	muleq	r0, r7, r0
    1bc4:	000005c7 	andeq	r0, r0, r7, asr #11
    1bc8:	000eb220 	andeq	fp, lr, r0, lsr #4
    1bcc:	02450100 	subeq	r0, r5, #0, 2
    1bd0:	000000b8 	strheq	r0, [r0], -r8
    1bd4:	000005e8 	andeq	r0, r0, r8, ror #11
    1bd8:	00100f20 	andseq	r0, r0, r0, lsr #30
    1bdc:	02460100 	subeq	r0, r6, #0, 2
    1be0:	000000b8 	strheq	r0, [r0], -r8
    1be4:	00000623 	andeq	r0, r0, r3, lsr #12
    1be8:	03a02100 	moveq	r2, #0, 2
    1bec:	a7060000 	strge	r0, [r6, -r0]
    1bf0:	0000e406 	andeq	lr, r0, r6, lsl #8
    1bf4:	0f7b2200 	svceq	0x007b2200
    1bf8:	46070000 	strmi	r0, [r7], -r0
    1bfc:	00b82302 	adcseq	r2, r8, r2, lsl #6
    1c00:	ff230000 			; <UNDEFINED> instruction: 0xff230000
    1c04:	00000000 	andeq	r0, r0, r0
    1c08:	000ed200 	andeq	sp, lr, r0, lsl #4
    1c0c:	9c000400 	cfstrsls	mvf0, [r0], {-0}
    1c10:	04000006 	streq	r0, [r0], #-6
    1c14:	00028701 	andeq	r8, r2, r1, lsl #14
    1c18:	16150100 	ldrne	r0, [r5], -r0, lsl #2
    1c1c:	00ab0000 	adceq	r0, fp, r0
    1c20:	01400000 	mrseq	r0, (UNDEF: 64)
    1c24:	00000000 	andeq	r0, r0, r0
    1c28:	09a20000 	stmibeq	r2!, {}	; <UNPREDICTABLE>
    1c2c:	01020000 	mrseq	r0, (UNDEF: 2)
    1c30:	00015306 	andeq	r5, r1, r6, lsl #6
    1c34:	01190300 	tsteq	r9, r0, lsl #6
    1c38:	1c020000 	stcne	0, cr0, [r2], {-0}
    1c3c:	00000037 	andeq	r0, r0, r7, lsr r0
    1c40:	51080102 	tstpl	r8, r2, lsl #2
    1c44:	02000001 	andeq	r0, r0, #1
    1c48:	01060502 	tsteq	r6, r2, lsl #10
    1c4c:	5c030000 	stcpl	0, cr0, [r3], {-0}
    1c50:	02000000 	andeq	r0, r0, #0
    1c54:	00005026 	andeq	r5, r0, r6, lsr #32
    1c58:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1c5c:	000001e8 	andeq	r0, r0, r8, ror #3
    1c60:	00037a03 	andeq	r7, r3, r3, lsl #20
    1c64:	62370200 	eorsvs	r0, r7, #0, 4
    1c68:	02000000 	andeq	r0, r0, #0
    1c6c:	00ec0504 	rsceq	r0, ip, r4, lsl #10
    1c70:	51030000 	mrspl	r0, (UNDEF: 3)
    1c74:	02000000 	andeq	r0, r0, #0
    1c78:	00007438 	andeq	r7, r0, r8, lsr r4
    1c7c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1c80:	0000017b 	andeq	r0, r0, fp, ror r1
    1c84:	e7050802 	str	r0, [r5, -r2, lsl #16]
    1c88:	02000000 	andeq	r0, r0, #0
    1c8c:	01760708 	cmneq	r6, r8, lsl #14
    1c90:	04040000 	streq	r0, [r4], #-0
    1c94:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1c98:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1c9c:	00000180 	andeq	r0, r0, r0, lsl #3
    1ca0:	00011b03 	andeq	r1, r1, r3, lsl #22
    1ca4:	2c2a0300 	stccs	3, cr0, [sl], #-0
    1ca8:	03000000 	movweq	r0, #0
    1cac:	0000005e 	andeq	r0, r0, lr, asr r0
    1cb0:	00453603 	subeq	r3, r5, r3, lsl #12
    1cb4:	7c030000 	stcvc	0, cr0, [r3], {-0}
    1cb8:	03000003 	movweq	r0, #3
    1cbc:	00005741 	andeq	r5, r0, r1, asr #14
    1cc0:	00530300 	subseq	r0, r3, r0, lsl #6
    1cc4:	42030000 	andmi	r0, r3, #0
    1cc8:	00000069 	andeq	r0, r0, r9, rrx
    1ccc:	2c070402 	cfstrscs	mvf0, [r7], {2}
    1cd0:	05000000 	streq	r0, [r0, #-0]
    1cd4:	000000b8 	strheq	r0, [r0], -r8
    1cd8:	0000b806 	andeq	fp, r0, r6, lsl #16
    1cdc:	0000df00 	andeq	sp, r0, r0, lsl #30
    1ce0:	00c30700 	sbceq	r0, r3, r0, lsl #14
    1ce4:	00010000 	andeq	r0, r1, r0
    1ce8:	0000ad05 	andeq	sl, r0, r5, lsl #26
    1cec:	04010800 	streq	r0, [r1], #-2048	; 0x800
    1cf0:	00fa01f7 	ldrshteq	r0, [sl], #23
    1cf4:	d2090000 	andle	r0, r9, #0
    1cf8:	0000000e 	andeq	r0, r0, lr
    1cfc:	5445530a 	strbpl	r5, [r5], #-778	; 0x30a
    1d00:	0b000100 	bleq	2108 <_Min_Stack_Size+0x1d08>
    1d04:	00002317 	andeq	r2, r0, r7, lsl r3
    1d08:	e401f704 	str	pc, [r1], #-1796	; 0x704
    1d0c:	0b000000 	bleq	1d14 <_Min_Stack_Size+0x1914>
    1d10:	0000228e 	andeq	r2, r0, lr, lsl #5
    1d14:	e401f704 	str	pc, [r1], #-1796	; 0x704
    1d18:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1d1c:	01f90401 	mvnseq	r0, r1, lsl #8
    1d20:	00000128 	andeq	r0, r0, r8, lsr #2
    1d24:	00048b09 	andeq	r8, r4, r9, lsl #22
    1d28:	c3090000 	movwgt	r0, #36864	; 0x9000
    1d2c:	01000005 	tsteq	r0, r5
    1d30:	092d0b00 	pusheq	{r8, r9, fp}
    1d34:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    1d38:	00011201 	andeq	r1, r1, r1, lsl #4
    1d3c:	04010800 	streq	r0, [r1], #-2048	; 0x800
    1d40:	014a01fc 	strdeq	r0, [sl, #-28]	; 0xffffffe4
    1d44:	82090000 	andhi	r0, r9, #0
    1d48:	00000013 	andeq	r0, r0, r3, lsl r0
    1d4c:	00166109 	andseq	r6, r6, r9, lsl #2
    1d50:	0b000100 	bleq	2158 <_Min_Stack_Size+0x1d58>
    1d54:	00001202 	andeq	r1, r0, r2, lsl #4
    1d58:	3401fc04 	strcc	pc, [r1], #-3076	; 0xc04
    1d5c:	0c000001 	stceq	0, cr0, [r0], {1}
    1d60:	04550490 	ldrbeq	r0, [r5], #-1168	; 0x490
    1d64:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1d68:	0052430d 	subseq	r4, r2, sp, lsl #6
    1d6c:	ca045704 	bgt	117984 <_Min_Stack_Size+0x117584>
    1d70:	00000000 	andeq	r0, r0, r0
    1d74:	00000a0e 	andeq	r0, r0, lr, lsl #20
    1d78:	04580400 	ldrbeq	r0, [r8], #-1024	; 0x400
    1d7c:	000000ca 	andeq	r0, r0, sl, asr #1
    1d80:	03b30e04 			; <UNDEFINED> instruction: 0x03b30e04
    1d84:	59040000 	stmdbpl	r4, {}	; <UNPREDICTABLE>
    1d88:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1d8c:	430d0800 	movwmi	r0, #55296	; 0xd800
    1d90:	04005249 	streq	r5, [r0], #-585	; 0x249
    1d94:	00ca045a 	sbceq	r0, sl, sl, asr r4
    1d98:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    1d9c:	0000007d 	andeq	r0, r0, sp, ror r0
    1da0:	ca045b04 	bgt	1189b8 <_Min_Stack_Size+0x1185b8>
    1da4:	10000000 	andne	r0, r0, r0
    1da8:	0000230e 	andeq	r2, r0, lr, lsl #6
    1dac:	045c0400 	ldrbeq	r0, [ip], #-1024	; 0x400
    1db0:	000000ca 	andeq	r0, r0, sl, asr #1
    1db4:	03890e14 	orreq	r0, r9, #20, 28	; 0x140
    1db8:	5d040000 	stcpl	0, cr0, [r4, #-0]
    1dbc:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1dc0:	3f0e1800 	svccc	0x000e1800
    1dc4:	04000002 	streq	r0, [r0], #-2
    1dc8:	00b8045e 	adcseq	r0, r8, lr, asr r4
    1dcc:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    1dd0:	00000012 	andeq	r0, r0, r2, lsl r0
    1dd4:	ca045f04 	bgt	1199ec <_Min_Stack_Size+0x1195ec>
    1dd8:	20000000 	andcs	r0, r0, r0
    1ddc:	0001100e 	andeq	r1, r1, lr
    1de0:	04600400 	strbteq	r0, [r0], #-1024	; 0x400
    1de4:	000000ca 	andeq	r0, r0, sl, asr #1
    1de8:	02490e24 	subeq	r0, r9, #36, 28	; 0x240
    1dec:	61040000 	mrsvs	r0, (UNDEF: 4)
    1df0:	0000cf04 	andeq	ip, r0, r4, lsl #30
    1df4:	720e2800 	andvc	r2, lr, #0, 16
    1df8:	04000003 	streq	r0, [r0], #-3
    1dfc:	00ca0462 	sbceq	r0, sl, r2, ror #8
    1e00:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    1e04:	0000001b 	andeq	r0, r0, fp, lsl r0
    1e08:	ca046304 	bgt	11aa20 <_Min_Stack_Size+0x11a620>
    1e0c:	34000000 	strcc	r0, [r0], #-0
    1e10:	0001390e 	andeq	r3, r1, lr, lsl #18
    1e14:	04640400 	strbteq	r0, [r4], #-1024	; 0x400
    1e18:	000000ca 	andeq	r0, r0, sl, asr #1
    1e1c:	02530e38 	subseq	r0, r3, #56, 28	; 0x380
    1e20:	65040000 	strvs	r0, [r4, #-0]
    1e24:	0000b804 	andeq	fp, r0, r4, lsl #16
    1e28:	a30e3c00 	movwge	r3, #60416	; 0xec00
    1e2c:	04000000 	streq	r0, [r0], #-0
    1e30:	00ca0466 	sbceq	r0, sl, r6, ror #8
    1e34:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    1e38:	0000015f 	andeq	r0, r0, pc, asr r1
    1e3c:	ca046704 	bgt	11ba54 <_Min_Stack_Size+0x11b654>
    1e40:	44000000 	strmi	r0, [r0], #-0
    1e44:	0000900e 	andeq	r9, r0, lr
    1e48:	04680400 	strbteq	r0, [r8], #-1024	; 0x400
    1e4c:	000000cf 	andeq	r0, r0, pc, asr #1
    1e50:	00000e48 	andeq	r0, r0, r8, asr #28
    1e54:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    1e58:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1e5c:	300e5000 	andcc	r5, lr, r0
    1e60:	04000002 	streq	r0, [r0], #-2
    1e64:	00ca046a 	sbceq	r0, sl, sl, ror #8
    1e68:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
    1e6c:	00000086 	andeq	r0, r0, r6, lsl #1
    1e70:	ca046b04 	bgt	11ca88 <_Min_Stack_Size+0x11c688>
    1e74:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1e78:	0002690e 	andeq	r6, r2, lr, lsl #18
    1e7c:	046c0400 	strbteq	r0, [ip], #-1024	; 0x400
    1e80:	000000b8 	strheq	r0, [r0], -r8
    1e84:	01fb0e5c 	mvnseq	r0, ip, asr lr
    1e88:	6d040000 	stcvs	0, cr0, [r4, #-0]
    1e8c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1e90:	be0e6000 	cdplt	0, 0, cr6, cr14, cr0, {0}
    1e94:	04000003 	streq	r0, [r0], #-3
    1e98:	00ca046e 	sbceq	r0, sl, lr, ror #8
    1e9c:	0e640000 	cdpeq	0, 6, cr0, cr4, cr0, {0}
    1ea0:	00000273 	andeq	r0, r0, r3, ror r2
    1ea4:	cf046f04 	svcgt	0x00046f04
    1ea8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    1eac:	0000350e 	andeq	r3, r0, lr, lsl #10
    1eb0:	04700400 	ldrbteq	r0, [r0], #-1024	; 0x400
    1eb4:	000000ca 	andeq	r0, r0, sl, asr #1
    1eb8:	53430d70 	movtpl	r0, #15728	; 0x3d70
    1ebc:	71040052 	qaddvc	r0, r2, r4
    1ec0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1ec4:	7d0e7400 	cfstrsvc	mvf7, [lr, #-0]
    1ec8:	04000002 	streq	r0, [r0], #-2
    1ecc:	00cf0472 	sbceq	r0, pc, r2, ror r4	; <UNPREDICTABLE>
    1ed0:	0e780000 	cdpeq	0, 7, cr0, cr8, cr0, {0}
    1ed4:	00000067 	andeq	r0, r0, r7, rrx
    1ed8:	ca047304 	bgt	11eaf0 <_Min_Stack_Size+0x11e6f0>
    1edc:	80000000 	andhi	r0, r0, r0
    1ee0:	00003a0e 	andeq	r3, r0, lr, lsl #20
    1ee4:	04740400 	ldrbteq	r0, [r4], #-1024	; 0x400
    1ee8:	000000ca 	andeq	r0, r0, sl, asr #1
    1eec:	03ad0e84 			; <UNDEFINED> instruction: 0x03ad0e84
    1ef0:	75040000 	strvc	r0, [r4, #-0]
    1ef4:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1ef8:	d20e8800 	andle	r8, lr, #0, 16
    1efc:	04000000 	streq	r0, [r0], #-0
    1f00:	00ca0476 	sbceq	r0, sl, r6, ror r4
    1f04:	008c0000 	addeq	r0, ip, r0
    1f08:	0000fa0b 	andeq	pc, r0, fp, lsl #20
    1f0c:	04780400 	ldrbteq	r0, [r8], #-1024	; 0x400
    1f10:	00000156 	andeq	r0, r0, r6, asr r1
    1f14:	3005100f 	andcc	r1, r5, pc
    1f18:	00000344 	andeq	r0, r0, r4, asr #6
    1f1c:	00108510 	andseq	r8, r0, r0, lsl r5
    1f20:	b8320500 	ldmdalt	r2!, {r8, sl}
    1f24:	00000000 	andeq	r0, r0, r0
    1f28:	00124610 	andseq	r4, r2, r0, lsl r6
    1f2c:	b8330500 	ldmdalt	r3!, {r8, sl}
    1f30:	04000000 	streq	r0, [r0], #-0
    1f34:	0014d110 	andseq	sp, r4, r0, lsl r1
    1f38:	b8340500 	ldmdalt	r4!, {r8, sl}
    1f3c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1f40:	00115310 	andseq	r5, r1, r0, lsl r3
    1f44:	b8350500 	ldmdalt	r5!, {r8, sl}
    1f48:	0c000000 	stceq	0, cr0, [r0], {-0}
    1f4c:	16770300 	ldrbtne	r0, [r7], -r0, lsl #6
    1f50:	36050000 	strcc	r0, [r5], -r0
    1f54:	0000030b 	andeq	r0, r0, fp, lsl #6
    1f58:	00140611 	andseq	r0, r4, r1, lsl r6
    1f5c:	082c0100 	stmdaeq	ip!, {r8}
    1f60:	000000fa 	strdeq	r0, [r0], -sl
    1f64:	00039101 	andeq	r9, r3, r1, lsl #2
    1f68:	11e61200 	mvnne	r1, r0, lsl #4
    1f6c:	2c010000 	stccs	0, cr0, [r1], {-0}
    1f70:	00009708 	andeq	r9, r0, r8, lsl #14
    1f74:	6d741300 	ldclvs	3, cr1, [r4, #-0]
    1f78:	2e010070 	mcrcs	0, 0, r0, cr1, cr0, {3}
    1f7c:	0000b808 	andeq	fp, r0, r8, lsl #16
    1f80:	107b1400 	rsbsne	r1, fp, r0, lsl #8
    1f84:	2f010000 	svccs	0x00010000
    1f88:	0000b808 	andeq	fp, r0, r8, lsl #16
    1f8c:	0f711400 	svceq	0x00711400
    1f90:	30010000 	andcc	r0, r1, r0
    1f94:	0000fa08 	andeq	pc, r0, r8, lsl #20
    1f98:	4b150000 	blmi	541fa0 <_Min_Stack_Size+0x541ba0>
    1f9c:	01000015 	tsteq	r0, r5, lsl r0
    1fa0:	000868d5 	ldrdeq	r6, [r8], -r5
    1fa4:	00005408 	andeq	r5, r0, r8, lsl #8
    1fa8:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    1fac:	00001418 	andeq	r1, r0, r8, lsl r4
    1fb0:	bc010801 	stclt	8, cr0, [r1], {1}
    1fb4:	10080008 	andne	r0, r8, r8
    1fb8:	01000000 	mrseq	r0, (UNDEF: 0)
    1fbc:	0003c79c 	muleq	r3, ip, r7
    1fc0:	14c91700 	strbne	r1, [r9], #1792	; 0x700
    1fc4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1fc8:	00009701 	andeq	r9, r0, r1, lsl #14
    1fcc:	00500100 	subseq	r0, r0, r0, lsl #2
    1fd0:	00123018 	andseq	r3, r2, r8, lsl r0
    1fd4:	01200100 	teqeq	r0, r0, lsl #2
    1fd8:	0000014a 	andeq	r0, r0, sl, asr #2
    1fdc:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
    1fe0:	0000003e 	andeq	r0, r0, lr, lsr r0
    1fe4:	048c9c01 	streq	r9, [ip], #3073	; 0xc01
    1fe8:	93190000 	tstls	r9, #0
    1fec:	01000015 	tsteq	r0, r5, lsl r0
    1ff0:	00ca0122 	sbceq	r0, sl, r2, lsr #2
    1ff4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ff8:	1fcd1a7c 	svcne	0x00cd1a7c
    1ffc:	23010000 	movwcs	r0, #4096	; 0x1000
    2000:	00014a01 	andeq	r4, r1, r1, lsl #20
    2004:	00064200 	andeq	r4, r6, r0, lsl #4
    2008:	15101a00 	ldrne	r1, [r0, #-2560]	; 0xa00
    200c:	24010000 	strcs	r0, [r1], #-0
    2010:	0000fa01 	andeq	pc, r0, r1, lsl #20
    2014:	00067300 	andeq	r7, r6, r0, lsl #6
    2018:	034f1b00 	movteq	r1, #64256	; 0xfb00
    201c:	08d00000 	ldmeq	r0, {}^	; <UNPREDICTABLE>
    2020:	01280800 	teqeq	r8, r0, lsl #16
    2024:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2028:	00044c01 	andeq	r4, r4, r1, lsl #24
    202c:	03601c00 	cmneq	r0, #0, 24
    2030:	1d310000 	ldcne	0, cr0, [r1, #-0]
    2034:	00000128 	andeq	r0, r0, r8, lsr #2
    2038:	00036c1e 	andeq	r6, r3, lr, lsl ip
    203c:	00068700 	andeq	r8, r6, r0, lsl #14
    2040:	03781e00 	cmneq	r8, #0, 28
    2044:	06a70000 	strteq	r0, [r7], r0
    2048:	841e0000 	ldrhi	r0, [lr], #-0
    204c:	c6000003 	strgt	r0, [r0], -r3
    2050:	00000006 	andeq	r0, r0, r6
    2054:	034f1f00 	movteq	r1, #65280	; 0xff00
    2058:	08ee0000 	stmiaeq	lr!, {}^	; <UNPREDICTABLE>
    205c:	000a0800 	andeq	r0, sl, r0, lsl #16
    2060:	2c010000 	stccs	0, cr0, [r1], {-0}
    2064:	03602001 	cmneq	r0, #1
    2068:	06e60000 	strbteq	r0, [r6], r0
    206c:	ee210000 	cdp	0, 2, cr0, cr1, cr0, {0}
    2070:	0a080008 	beq	202098 <_Min_Stack_Size+0x201c98>
    2074:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2078:	0000036c 	andeq	r0, r0, ip, ror #6
    207c:	000006fb 	strdeq	r0, [r0], -fp
    2080:	0003781e 	andeq	r7, r3, lr, lsl r8
    2084:	00071b00 	andeq	r1, r7, r0, lsl #22
    2088:	03841e00 	orreq	r1, r4, #0, 28
    208c:	073a0000 	ldreq	r0, [sl, -r0]!
    2090:	00000000 	andeq	r0, r0, r0
    2094:	14f21600 	ldrbtne	r1, [r2], #1536	; 0x600
    2098:	3f010000 	svccc	0x00010000
    209c:	00090c01 	andeq	r0, r9, r1, lsl #24
    20a0:	00001608 	andeq	r1, r0, r8, lsl #12
    20a4:	c39c0100 	orrsgt	r0, ip, #0, 2
    20a8:	22000004 	andcs	r0, r0, #4
    20ac:	000014fc 	strdeq	r1, [r0], -ip
    20b0:	97013f01 	strls	r3, [r1, -r1, lsl #30]
    20b4:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    20b8:	1a000007 	bne	20dc <_Min_Stack_Size+0x1cdc>
    20bc:	0000114c 	andeq	r1, r0, ip, asr #2
    20c0:	b8014101 	stmdalt	r1, {r0, r8, lr}
    20c4:	6f000000 	svcvs	0x00000000
    20c8:	00000007 	andeq	r0, r0, r7
    20cc:	00132516 	andseq	r2, r3, r6, lsl r5
    20d0:	01630100 	cmneq	r3, r0, lsl #2
    20d4:	08000924 	stmdaeq	r0, {r2, r5, r8, fp}
    20d8:	0000000a 	andeq	r0, r0, sl
    20dc:	04e89c01 	strbteq	r9, [r8], #3073	; 0xc01
    20e0:	71170000 	tstvc	r7, r0
    20e4:	0100000d 	tsteq	r0, sp
    20e8:	01280163 	teqeq	r8, r3, ror #2
    20ec:	50010000 	andpl	r0, r1, r0
    20f0:	11d81600 	bicsne	r1, r8, r0, lsl #12
    20f4:	7c010000 	stcvc	0, cr0, [r1], {-0}
    20f8:	00093001 	andeq	r3, r9, r1
    20fc:	00002208 	andeq	r2, r0, r8, lsl #4
    2100:	0d9c0100 	ldfeqs	f0, [ip]
    2104:	17000005 	strne	r0, [r0, -r5]
    2108:	00001047 	andeq	r1, r0, r7, asr #32
    210c:	97017c01 	strls	r7, [r1, -r1, lsl #24]
    2110:	01000000 	mrseq	r0, (UNDEF: 0)
    2114:	e6160050 			; <UNDEFINED> instruction: 0xe6160050
    2118:	01000015 	tsteq	r0, r5, lsl r0
    211c:	095401a4 	ldmdbeq	r4, {r2, r5, r7, r8}^
    2120:	000c0800 	andeq	r0, ip, r0, lsl #16
    2124:	9c010000 	stcls	0, cr0, [r1], {-0}
    2128:	00000532 	andeq	r0, r0, r2, lsr r5
    212c:	000d7117 	andeq	r7, sp, r7, lsl r1
    2130:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    2134:	00000128 	andeq	r0, r0, r8, lsr #2
    2138:	16005001 	strne	r5, [r0], -r1
    213c:	00001669 	andeq	r1, r0, r9, ror #12
    2140:	6001cf01 	andvs	ip, r1, r1, lsl #30
    2144:	26080009 	strcs	r0, [r8], -r9
    2148:	01000000 	mrseq	r0, (UNDEF: 0)
    214c:	0005999c 	muleq	r5, ip, r9
    2150:	120e2200 	andne	r2, lr, #0, 4
    2154:	cf010000 	svcgt	0x00010000
    2158:	0000b801 	andeq	fp, r0, r1, lsl #16
    215c:	00079900 	andeq	r9, r7, r0, lsl #18
    2160:	10fb2200 	rscsne	r2, fp, r0, lsl #4
    2164:	cf010000 	svcgt	0x00010000
    2168:	0000b801 	andeq	fp, r0, r1, lsl #16
    216c:	0007ba00 	andeq	fp, r7, r0, lsl #20
    2170:	10bc2200 	adcsne	r2, ip, r0, lsl #4
    2174:	cf010000 	svcgt	0x00010000
    2178:	0000b801 	andeq	fp, r0, r1, lsl #16
    217c:	0007db00 	andeq	sp, r7, r0, lsl #22
    2180:	10db2200 	sbcsne	r2, fp, r0, lsl #4
    2184:	cf010000 	svcgt	0x00010000
    2188:	0000b801 	andeq	fp, r0, r1, lsl #16
    218c:	0007fc00 	andeq	pc, r7, r0, lsl #24
    2190:	10e02200 	rscne	r2, r0, r0, lsl #4
    2194:	cf010000 	svcgt	0x00010000
    2198:	0000b801 	andeq	fp, r0, r1, lsl #16
    219c:	00081d00 	andeq	r1, r8, r0, lsl #26
    21a0:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
    21a4:	01000014 	tsteq	r0, r4, lsl r0
    21a8:	098801e6 	stmibeq	r8, {r1, r2, r5, r6, r7, r8}
    21ac:	000a0800 	andeq	r0, sl, r0, lsl #16
    21b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    21b4:	000005be 			; <UNDEFINED> instruction: 0x000005be
    21b8:	000d7117 	andeq	r7, sp, r7, lsl r1
    21bc:	01e60100 	mvneq	r0, r0, lsl #2
    21c0:	00000128 	andeq	r0, r0, r8, lsr #2
    21c4:	16005001 	strne	r5, [r0], -r1
    21c8:	00001314 	andeq	r1, r0, r4, lsl r3
    21cc:	94022801 	strls	r2, [r2], #-2049	; 0x801
    21d0:	18080009 	stmdane	r8, {r0, r3}
    21d4:	01000000 	mrseq	r0, (UNDEF: 0)
    21d8:	0006059c 	muleq	r6, ip, r5
    21dc:	151a2200 	ldrne	r2, [sl, #-512]	; 0x200
    21e0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    21e4:	0000b802 	andeq	fp, r0, r2, lsl #16
    21e8:	00083100 	andeq	r3, r8, r0, lsl #2
    21ec:	15562200 	ldrbne	r2, [r6, #-512]	; 0x200
    21f0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    21f4:	0000b802 	andeq	fp, r0, r2, lsl #16
    21f8:	00085200 	andeq	r5, r8, r0, lsl #4
    21fc:	155e2200 	ldrbne	r2, [lr, #-512]	; 0x200
    2200:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2204:	0000b802 	andeq	fp, r0, r2, lsl #16
    2208:	00087300 	andeq	r7, r8, r0, lsl #6
    220c:	8f160000 	svchi	0x00160000
    2210:	01000012 	tsteq	r0, r2, lsl r0
    2214:	09ac0239 	stmibeq	ip!, {r0, r3, r4, r5, r9}
    2218:	000a0800 	andeq	r0, sl, r0, lsl #16
    221c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2220:	0000062a 	andeq	r0, r0, sl, lsr #12
    2224:	000d7117 	andeq	r7, sp, r7, lsl r1
    2228:	02390100 	eorseq	r0, r9, #0, 2
    222c:	00000128 	andeq	r0, r0, r8, lsr #2
    2230:	16005001 	strne	r5, [r0], -r1
    2234:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
    2238:	b8025601 	stmdalt	r2, {r0, r9, sl, ip, lr}
    223c:	18080009 	stmdane	r8, {r0, r3}
    2240:	01000000 	mrseq	r0, (UNDEF: 0)
    2244:	0006719c 	muleq	r6, ip, r1
    2248:	143d2200 	ldrtne	r2, [sp], #-512	; 0x200
    224c:	56010000 	strpl	r0, [r1], -r0
    2250:	0000b802 	andeq	fp, r0, r2, lsl #16
    2254:	00089400 	andeq	r9, r8, r0, lsl #8
    2258:	14452200 	strbne	r2, [r5], #-512	; 0x200
    225c:	56010000 	strpl	r0, [r1], -r0
    2260:	0000b802 	andeq	fp, r0, r2, lsl #16
    2264:	0008b500 	andeq	fp, r8, r0, lsl #10
    2268:	144d2200 	strbne	r2, [sp], #-512	; 0x200
    226c:	56010000 	strpl	r0, [r1], -r0
    2270:	0000b802 	andeq	fp, r0, r2, lsl #16
    2274:	0008d600 	andeq	sp, r8, r0, lsl #12
    2278:	4f160000 	svcmi	0x00160000
    227c:	01000010 	tsteq	r0, r0, lsl r0
    2280:	09d00268 	ldmibeq	r0, {r3, r5, r6, r9}^
    2284:	000a0800 	andeq	r0, sl, r0, lsl #16
    2288:	9c010000 	stcls	0, cr0, [r1], {-0}
    228c:	00000696 	muleq	r0, r6, r6
    2290:	000d7117 	andeq	r7, sp, r7, lsl r1
    2294:	02680100 	rsbeq	r0, r8, #0, 2
    2298:	00000128 	andeq	r0, r0, r8, lsr #2
    229c:	16005001 	strne	r5, [r0], -r1
    22a0:	00001388 	andeq	r1, r0, r8, lsl #7
    22a4:	dc027a01 	stcle	10, cr7, [r2], {1}
    22a8:	0a080009 	beq	2022d4 <_Min_Stack_Size+0x201ed4>
    22ac:	01000000 	mrseq	r0, (UNDEF: 0)
    22b0:	0006bb9c 	muleq	r6, ip, fp
    22b4:	0d711700 	ldcleq	7, cr1, [r1, #-0]
    22b8:	7a010000 	bvc	422c0 <_Min_Stack_Size+0x41ec0>
    22bc:	00012802 	andeq	r2, r1, r2, lsl #16
    22c0:	00500100 	subseq	r0, r0, r0, lsl #2
    22c4:	00127516 	andseq	r7, r2, r6, lsl r5
    22c8:	02930100 	addseq	r0, r3, #0, 2
    22cc:	080009e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp}
    22d0:	00000016 	andeq	r0, r0, r6, lsl r0
    22d4:	07029c01 	streq	r9, [r2, -r1, lsl #24]
    22d8:	96220000 	strtls	r0, [r2], -r0
    22dc:	01000010 	tsteq	r0, r0, lsl r0
    22e0:	00b80293 	umlalseq	r0, r8, r3, r2
    22e4:	08f70000 	ldmeq	r7!, {}^	; <UNPREDICTABLE>
    22e8:	c3220000 	teqgt	r2, #0
    22ec:	01000013 	tsteq	r0, r3, lsl r0
    22f0:	00b80293 	umlalseq	r0, r8, r3, r2
    22f4:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    22f8:	4c1a0000 	ldcmi	0, cr0, [sl], {-0}
    22fc:	01000011 	tsteq	r0, r1, lsl r0
    2300:	00b80295 	umlalseq	r0, r8, r5, r2
    2304:	09390000 	ldmdbeq	r9!, {}	; <UNPREDICTABLE>
    2308:	16000000 	strne	r0, [r0], -r0
    230c:	000015d7 	ldrdeq	r1, [r0], -r7
    2310:	0002b901 	andeq	fp, r2, r1, lsl #18
    2314:	1608000a 	strne	r0, [r8], -sl
    2318:	01000000 	mrseq	r0, (UNDEF: 0)
    231c:	0007499c 	muleq	r7, ip, r9
    2320:	13e62200 	mvnne	r2, #0, 4
    2324:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    2328:	0000b802 	andeq	fp, r0, r2, lsl #16
    232c:	00097600 	andeq	r7, r9, r0, lsl #12
    2330:	134e2200 	movtne	r2, #57856	; 0xe200
    2334:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    2338:	0000b802 	andeq	fp, r0, r2, lsl #16
    233c:	00099700 	andeq	r9, r9, r0, lsl #14
    2340:	114c1a00 	cmpne	ip, r0, lsl #20
    2344:	bb010000 	bllt	4234c <_Min_Stack_Size+0x41f4c>
    2348:	0000b802 	andeq	fp, r0, r2, lsl #16
    234c:	0009b800 	andeq	fp, r9, r0, lsl #16
    2350:	c7160000 	ldrgt	r0, [r6, -r0]
    2354:	01000011 	tsteq	r0, r1, lsl r0
    2358:	0a18035f 	beq	6030dc <_Min_Stack_Size+0x602cdc>
    235c:	00140800 	andseq	r0, r4, r0, lsl #16
    2360:	9c010000 	stcls	0, cr0, [r1], {-0}
    2364:	00000780 	andeq	r0, r0, r0, lsl #15
    2368:	0014b822 	andseq	fp, r4, r2, lsr #16
    236c:	035f0100 	cmpeq	pc, #0, 2
    2370:	000000b8 	strheq	r0, [r0], -r8
    2374:	000009f5 	strdeq	r0, [r0], -r5
    2378:	00114c1a 	andseq	r4, r1, sl, lsl ip
    237c:	03610100 	cmneq	r1, #0, 2
    2380:	000000b8 	strheq	r0, [r0], -r8
    2384:	00000a16 	andeq	r0, r0, r6, lsl sl
    2388:	121c2300 	andsne	r2, ip, #0, 6
    238c:	7b010000 	blvc	42394 <_Min_Stack_Size+0x41f94>
    2390:	00009703 	andeq	r9, r0, r3, lsl #14
    2394:	000a2c00 	andeq	r2, sl, r0, lsl #24
    2398:	00001008 	andeq	r1, r0, r8
    239c:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    23a0:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
    23a4:	3c039401 	cfstrscc	mvf9, [r3], {1}
    23a8:	1408000a 	strne	r0, [r8], #-10
    23ac:	01000000 	mrseq	r0, (UNDEF: 0)
    23b0:	0007cd9c 	muleq	r7, ip, sp
    23b4:	12842200 	addne	r2, r4, #0, 4
    23b8:	94010000 	strls	r0, [r1], #-0
    23bc:	0000b803 	andeq	fp, r0, r3, lsl #16
    23c0:	000a4000 	andeq	r4, sl, r0
    23c4:	114c1a00 	cmpne	ip, r0, lsl #20
    23c8:	96010000 	strls	r0, [r1], -r0
    23cc:	0000b803 	andeq	fp, r0, r3, lsl #16
    23d0:	000a6100 	andeq	r6, sl, r0, lsl #2
    23d4:	7a160000 	bvc	5823dc <_Min_Stack_Size+0x581fdc>
    23d8:	01000011 	tsteq	r0, r1, lsl r0
    23dc:	0a5003b4 	beq	14032b4 <_Min_Stack_Size+0x1402eb4>
    23e0:	00140800 	andseq	r0, r4, r0, lsl #16
    23e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    23e8:	00000804 	andeq	r0, r0, r4, lsl #16
    23ec:	00103e22 	andseq	r3, r0, r2, lsr #28
    23f0:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    23f4:	000000b8 	strheq	r0, [r0], -r8
    23f8:	00000a8b 	andeq	r0, r0, fp, lsl #21
    23fc:	00114c1a 	andseq	r4, r1, sl, lsl ip
    2400:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    2404:	000000b8 	strheq	r0, [r0], -r8
    2408:	00000aac 	andeq	r0, r0, ip, lsr #21
    240c:	14a81600 	strtne	r1, [r8], #1536	; 0x600
    2410:	d3010000 	movwle	r0, #4096	; 0x1000
    2414:	000a6403 	andeq	r6, sl, r3, lsl #8
    2418:	00001608 	andeq	r1, r0, r8, lsl #12
    241c:	3b9c0100 	blcc	fe702824 <_estack+0xde6d2824>
    2420:	22000008 	andcs	r0, r0, #8
    2424:	0000103e 	andeq	r1, r0, lr, lsr r0
    2428:	b803d301 	stmdalt	r3, {r0, r8, r9, ip, lr, pc}
    242c:	d6000000 	strle	r0, [r0], -r0
    2430:	1a00000a 	bne	2460 <_Min_Stack_Size+0x2060>
    2434:	0000114c 	andeq	r1, r0, ip, asr #2
    2438:	b803d501 	stmdalt	r3, {r0, r8, sl, ip, lr, pc}
    243c:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    2440:	0000000a 	andeq	r0, r0, sl
    2444:	00152216 	andseq	r2, r5, r6, lsl r2
    2448:	04070100 	streq	r0, [r7], #-256	; 0x100
    244c:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
    2450:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    2454:	08c09c01 	stmiaeq	r0, {r0, sl, fp, ip, pc}^
    2458:	0f170000 	svceq	0x00170000
    245c:	01000011 	tsteq	r0, r1, lsl r0
    2460:	08c00407 	stmiaeq	r0, {r0, r1, r2, sl}^
    2464:	50010000 	andpl	r0, r1, r0
    2468:	706d7424 	rsbvc	r7, sp, r4, lsr #8
    246c:	04090100 	streq	r0, [r9], #-256	; 0x100
    2470:	000000b8 	strheq	r0, [r0], -r8
    2474:	00000b21 	andeq	r0, r0, r1, lsr #22
    2478:	00129d1a 	andseq	r9, r2, sl, lsl sp
    247c:	04090100 	streq	r0, [r9], #-256	; 0x100
    2480:	000000b8 	strheq	r0, [r0], -r8
    2484:	00000ba2 	andeq	r0, r0, r2, lsr #23
    2488:	0002051a 	andeq	r0, r2, sl, lsl r5
    248c:	04090100 	streq	r0, [r9], #-256	; 0x100
    2490:	000000b8 	strheq	r0, [r0], -r8
    2494:	00000bf2 	strdeq	r0, [r0], -r2
    2498:	0001461a 	andeq	r4, r1, sl, lsl r6
    249c:	04090100 	streq	r0, [r9], #-256	; 0x100
    24a0:	000000b8 	strheq	r0, [r0], -r8
    24a4:	00000c1d 	andeq	r0, r0, sp, lsl ip
    24a8:	00012f1a 	andeq	r2, r1, sl, lsl pc
    24ac:	04090100 	streq	r0, [r9], #-256	; 0x100
    24b0:	000000b8 	strheq	r0, [r0], -r8
    24b4:	00000c3d 	andeq	r0, r0, sp, lsr ip
    24b8:	0001411a 	andeq	r4, r1, sl, lsl r1
    24bc:	04090100 	streq	r0, [r9], #-256	; 0x100
    24c0:	000000b8 	strheq	r0, [r0], -r8
    24c4:	00000c70 	andeq	r0, r0, r0, ror ip
    24c8:	44042500 	strmi	r2, [r4], #-1280	; 0x500
    24cc:	16000003 	strne	r0, [r0], -r3
    24d0:	00001264 	andeq	r1, r0, r4, ror #4
    24d4:	2c048401 	cfstrscs	mvf8, [r4], {1}
    24d8:	3808000b 	stmdacc	r8, {r0, r1, r3}
    24dc:	01000000 	mrseq	r0, (UNDEF: 0)
    24e0:	0008fd9c 	muleq	r8, ip, sp
    24e4:	12a32200 	adcne	r2, r3, #0, 4
    24e8:	84010000 	strhi	r0, [r1], #-0
    24ec:	0000b804 	andeq	fp, r0, r4, lsl #16
    24f0:	000c9b00 	andeq	r9, ip, r0, lsl #22
    24f4:	114c1a00 	cmpne	ip, r0, lsl #20
    24f8:	86010000 	strhi	r0, [r1], -r0
    24fc:	0000b804 	andeq	fp, r0, r4, lsl #16
    2500:	000cbc00 	andeq	fp, ip, r0, lsl #24
    2504:	74160000 	ldrvc	r0, [r6], #-0
    2508:	01000013 	tsteq	r0, r3, lsl r0
    250c:	0b6404a4 	bleq	19037a4 <_Min_Stack_Size+0x19033a4>
    2510:	000c0800 	andeq	r0, ip, r0, lsl #16
    2514:	9c010000 	stcls	0, cr0, [r1], {-0}
    2518:	00000922 	andeq	r0, r0, r2, lsr #18
    251c:	000d7117 	andeq	r7, sp, r7, lsl r1
    2520:	04a40100 	strteq	r0, [r4], #256	; 0x100
    2524:	00000128 	andeq	r0, r0, r8, lsr #2
    2528:	16005001 	strne	r5, [r0], -r1
    252c:	000011ef 	andeq	r1, r0, pc, ror #3
    2530:	7004b501 	andvc	fp, r4, r1, lsl #10
    2534:	0c08000b 	stceq	0, cr0, [r8], {11}
    2538:	01000000 	mrseq	r0, (UNDEF: 0)
    253c:	0009479c 	muleq	r9, ip, r7
    2540:	0d711700 	ldcleq	7, cr1, [r1, #-0]
    2544:	b5010000 	strlt	r0, [r1, #-0]
    2548:	00012804 	andeq	r2, r1, r4, lsl #16
    254c:	00500100 	subseq	r0, r0, r0, lsl #2
    2550:	0015c616 	andseq	ip, r5, r6, lsl r6
    2554:	04c60100 	strbeq	r0, [r6], #256	; 0x100
    2558:	08000b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp}
    255c:	0000000c 	andeq	r0, r0, ip
    2560:	096c9c01 	stmdbeq	ip!, {r0, sl, fp, ip, pc}^
    2564:	f5170000 			; <UNDEFINED> instruction: 0xf5170000
    2568:	01000013 	tsteq	r0, r3, lsl r0
    256c:	00b804c6 	adcseq	r0, r8, r6, asr #9
    2570:	50010000 	andpl	r0, r1, r0
    2574:	135a1600 	cmpne	sl, #0, 12
    2578:	db010000 	blle	42580 <_Min_Stack_Size+0x42180>
    257c:	000b8804 	andeq	r8, fp, r4, lsl #16
    2580:	00001a08 	andeq	r1, r0, r8, lsl #20
    2584:	a39c0100 	orrsge	r0, ip, #0, 2
    2588:	22000009 	andcs	r0, r0, #9
    258c:	000013a3 	andeq	r1, r0, r3, lsr #7
    2590:	b804db01 	stmdalt	r4, {r0, r8, r9, fp, ip, lr, pc}
    2594:	db000000 	blle	259c <_Min_Stack_Size+0x219c>
    2598:	1a00000c 	bne	25d0 <_Min_Stack_Size+0x21d0>
    259c:	0000114c 	andeq	r1, r0, ip, asr #2
    25a0:	b804dd01 	stmdalt	r4, {r0, r8, sl, fp, ip, lr, pc}
    25a4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    25a8:	0000000d 	andeq	r0, r0, sp
    25ac:	0010c116 	andseq	ip, r0, r6, lsl r1
    25b0:	04fb0100 	ldrbteq	r0, [fp], #256	; 0x100
    25b4:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
    25b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    25bc:	09da9c01 	ldmibeq	sl, {r0, sl, fp, ip, pc}^
    25c0:	5d220000 	stcpl	0, cr0, [r2, #-0]
    25c4:	01000010 	tsteq	r0, r0, lsl r0
    25c8:	00b804fb 	ldrshteq	r0, [r8], fp
    25cc:	0d330000 	ldceq	0, cr0, [r3, #-0]
    25d0:	4c1a0000 	ldcmi	0, cr0, [sl], {-0}
    25d4:	01000011 	tsteq	r0, r1, lsl r0
    25d8:	00b804fd 	ldrshteq	r0, [r8], sp
    25dc:	0d610000 	stcleq	0, cr0, [r1, #-0]
    25e0:	16000000 	strne	r0, [r0], -r0
    25e4:	000011a1 	andeq	r1, r0, r1, lsr #3
    25e8:	c0051f01 	andgt	r1, r5, r1, lsl #30
    25ec:	1808000b 	stmdane	r8, {r0, r1, r3}
    25f0:	01000000 	mrseq	r0, (UNDEF: 0)
    25f4:	000a119c 	muleq	sl, ip, r1
    25f8:	12b42200 	adcsne	r2, r4, #0, 4
    25fc:	1f010000 	svcne	0x00010000
    2600:	0000b805 	andeq	fp, r0, r5, lsl #16
    2604:	000d8b00 	andeq	r8, sp, r0, lsl #22
    2608:	114c1a00 	cmpne	ip, r0, lsl #20
    260c:	21010000 	mrscs	r0, (UNDEF: 1)
    2610:	0000b805 	andeq	fp, r0, r5, lsl #16
    2614:	000dac00 	andeq	sl, sp, r0, lsl #24
    2618:	26160000 	ldrcs	r0, [r6], -r0
    261c:	01000014 	tsteq	r0, r4, lsl r0
    2620:	0bd80543 	bleq	ff603b34 <_estack+0xdf5d3b34>
    2624:	00180800 	andseq	r0, r8, r0, lsl #16
    2628:	9c010000 	stcls	0, cr0, [r1], {-0}
    262c:	00000a48 	andeq	r0, r0, r8, asr #20
    2630:	0012cb22 	andseq	ip, r2, r2, lsr #22
    2634:	05430100 	strbeq	r0, [r3, #-256]	; 0x100
    2638:	000000b8 	strheq	r0, [r0], -r8
    263c:	00000dd6 	ldrdeq	r0, [r0], -r6
    2640:	00114c1a 	andseq	r4, r1, sl, lsl ip
    2644:	05450100 	strbeq	r0, [r5, #-256]	; 0x100
    2648:	000000b8 	strheq	r0, [r0], -r8
    264c:	00000df7 	strdeq	r0, [r0], -r7
    2650:	12e21600 	rscne	r1, r2, #0, 12
    2654:	64010000 	strvs	r0, [r1], #-0
    2658:	000bf005 	andeq	pc, fp, r5
    265c:	00001808 	andeq	r1, r0, r8, lsl #16
    2660:	7f9c0100 	svcvc	0x009c0100
    2664:	2200000a 	andcs	r0, r0, #10
    2668:	0000106c 	andeq	r1, r0, ip, rrx
    266c:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    2670:	21000000 	mrscs	r0, (UNDEF: 0)
    2674:	1a00000e 	bne	26b4 <_Min_Stack_Size+0x22b4>
    2678:	0000114c 	andeq	r1, r0, ip, asr #2
    267c:	b8056601 	stmdalt	r5, {r0, r9, sl, sp, lr}
    2680:	42000000 	andmi	r0, r0, #0
    2684:	0000000e 	andeq	r0, r0, lr
    2688:	0015b116 	andseq	fp, r5, r6, lsl r1
    268c:	05890100 	streq	r0, [r9, #256]	; 0x100
    2690:	08000c08 	stmdaeq	r0, {r3, sl, fp}
    2694:	0000000c 	andeq	r0, r0, ip
    2698:	0aa49c01 	beq	fe9296a4 <_estack+0xde8f96a4>
    269c:	55170000 	ldrpl	r0, [r7, #-0]
    26a0:	01000014 	tsteq	r0, r4, lsl r0
    26a4:	00b80589 	adcseq	r0, r8, r9, lsl #11
    26a8:	50010000 	andpl	r0, r1, r0
    26ac:	0a3a1600 	beq	e87eb4 <_Min_Stack_Size+0xe87ab4>
    26b0:	b4010000 	strlt	r0, [r1], #-0
    26b4:	000c1405 	andeq	r1, ip, r5, lsl #8
    26b8:	00001a08 	andeq	r1, r0, r8, lsl #20
    26bc:	d99c0100 	ldmible	ip, {r8}
    26c0:	2200000a 	andcs	r0, r0, #10
    26c4:	00001100 	andeq	r1, r0, r0, lsl #2
    26c8:	b805b401 	stmdalt	r5, {r0, sl, ip, sp, pc}
    26cc:	6c000000 	stcvs	0, cr0, [r0], {-0}
    26d0:	1700000e 	strne	r0, [r0, -lr]
    26d4:	00000d71 	andeq	r0, r0, r1, ror sp
    26d8:	2805b401 	stmdacs	r5, {r0, sl, ip, sp, pc}
    26dc:	01000001 	tsteq	r0, r1
    26e0:	63160051 	tstvs	r6, #81	; 0x51
    26e4:	01000011 	tsteq	r0, r1, lsl r0
    26e8:	0c3005d4 	cfldr32eq	mvfx0, [r0], #-848	; 0xfffffcb0
    26ec:	001a0800 	andseq	r0, sl, r0, lsl #16
    26f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    26f4:	00000b0e 	andeq	r0, r0, lr, lsl #22
    26f8:	00133022 	andseq	r3, r3, r2, lsr #32
    26fc:	05d40100 	ldrbeq	r0, [r4, #256]	; 0x100
    2700:	000000b8 	strheq	r0, [r0], -r8
    2704:	00000ea6 	andeq	r0, r0, r6, lsr #29
    2708:	000d7117 	andeq	r7, sp, r7, lsl r1
    270c:	05d40100 	ldrbeq	r0, [r4, #256]	; 0x100
    2710:	00000128 	andeq	r0, r0, r8, lsr #2
    2714:	16005101 	strne	r5, [r0], -r1, lsl #2
    2718:	000016a6 	andeq	r1, r0, r6, lsr #13
    271c:	4c05f001 	stcmi	0, cr15, [r5], {1}
    2720:	1a08000c 	bne	202758 <_Min_Stack_Size+0x202358>
    2724:	01000000 	mrseq	r0, (UNDEF: 0)
    2728:	000b439c 	muleq	fp, ip, r3
    272c:	133f2200 	teqne	pc, #0, 4
    2730:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    2734:	0000b805 	andeq	fp, r0, r5, lsl #16
    2738:	000ee000 	andeq	lr, lr, r0
    273c:	0d711700 	ldcleq	7, cr1, [r1, #-0]
    2740:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    2744:	00012805 	andeq	r2, r1, r5, lsl #16
    2748:	00510100 	subseq	r0, r1, r0, lsl #2
    274c:	0015f116 	andseq	pc, r5, r6, lsl r1	; <UNPREDICTABLE>
    2750:	06240100 	strteq	r0, [r4], -r0, lsl #2
    2754:	08000c68 	stmdaeq	r0, {r3, r5, r6, sl, fp}
    2758:	0000001a 	andeq	r0, r0, sl, lsl r0
    275c:	0b789c01 	bleq	1e29768 <_Min_Stack_Size+0x1e29368>
    2760:	55220000 	strpl	r0, [r2, #-0]!
    2764:	01000012 	tsteq	r0, r2, lsl r0
    2768:	00b80624 	adcseq	r0, r8, r4, lsr #12
    276c:	0f1a0000 	svceq	0x001a0000
    2770:	71170000 	tstvc	r7, r0
    2774:	0100000d 	tsteq	r0, sp
    2778:	01280624 	teqeq	r8, r4, lsr #12
    277c:	51010000 	mrspl	r0, (UNDEF: 1)
    2780:	15341600 	ldrne	r1, [r4, #-1536]!	; 0x600
    2784:	51010000 	mrspl	r0, (UNDEF: 1)
    2788:	000c8406 	andeq	r8, ip, r6, lsl #8
    278c:	00001a08 	andeq	r1, r0, r8, lsl #20
    2790:	ad9c0100 	ldfges	f0, [ip]
    2794:	2200000b 	andcs	r0, r0, #11
    2798:	000015a2 	andeq	r1, r0, r2, lsr #11
    279c:	b8065101 	stmdalt	r6, {r0, r8, ip, lr}
    27a0:	54000000 	strpl	r0, [r0], #-0
    27a4:	1700000f 	strne	r0, [r0, -pc]
    27a8:	00000d71 	andeq	r0, r0, r1, ror sp
    27ac:	28065101 	stmdacs	r6, {r0, r8, ip, lr}
    27b0:	01000001 	tsteq	r0, r1
    27b4:	7b160051 	blvc	582900 <_Min_Stack_Size+0x582500>
    27b8:	0100000f 	tsteq	r0, pc
    27bc:	0ca0067b 	stceq	6, cr0, [r0], #492	; 0x1ec
    27c0:	001a0800 	andseq	r0, sl, r0, lsl #16
    27c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    27c8:	00000be2 	andeq	r0, r0, r2, ror #23
    27cc:	00110022 	andseq	r0, r1, r2, lsr #32
    27d0:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    27d4:	000000b8 	strheq	r0, [r0], -r8
    27d8:	00000f8e 	andeq	r0, r0, lr, lsl #31
    27dc:	000d7117 	andeq	r7, sp, r7, lsl r1
    27e0:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    27e4:	00000128 	andeq	r0, r0, r8, lsr #2
    27e8:	16005101 	strne	r5, [r0], -r1, lsl #2
    27ec:	00001474 	andeq	r1, r0, r4, ror r4
    27f0:	bc069801 	stclt	8, cr9, [r6], {1}
    27f4:	1a08000c 	bne	20282c <_Min_Stack_Size+0x20242c>
    27f8:	01000000 	mrseq	r0, (UNDEF: 0)
    27fc:	000c179c 	muleq	ip, ip, r7
    2800:	13302200 	teqne	r0, #0, 4
    2804:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2808:	0000b806 	andeq	fp, r0, r6, lsl #16
    280c:	000fc800 	andeq	ip, pc, r0, lsl #16
    2810:	0d711700 	ldcleq	7, cr1, [r1, #-0]
    2814:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2818:	00012806 	andeq	r2, r1, r6, lsl #16
    281c:	00510100 	subseq	r0, r1, r0, lsl #2
    2820:	00118a16 	andseq	r8, r1, r6, lsl sl
    2824:	06b10100 	ldrteq	r0, [r1], r0, lsl #2
    2828:	08000cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp}
    282c:	0000001a 	andeq	r0, r0, sl, lsl r0
    2830:	0c4c9c01 	mcrreq	12, 0, r9, ip, cr1
    2834:	3f220000 	svccc	0x00220000
    2838:	01000013 	tsteq	r0, r3, lsl r0
    283c:	00b806b1 	ldrhteq	r0, [r8], r1
    2840:	10020000 	andne	r0, r2, r0
    2844:	71170000 	tstvc	r7, r0
    2848:	0100000d 	tsteq	r0, sp
    284c:	012806b1 			; <UNDEFINED> instruction: 0x012806b1
    2850:	51010000 	mrspl	r0, (UNDEF: 1)
    2854:	10a51600 	adcne	r1, r5, r0, lsl #12
    2858:	e2010000 	and	r0, r1, #0
    285c:	000cf406 	andeq	pc, ip, r6, lsl #8
    2860:	00001a08 	andeq	r1, r0, r8, lsl #20
    2864:	819c0100 	orrshi	r0, ip, r0, lsl #2
    2868:	2200000c 	andcs	r0, r0, #12
    286c:	00001255 	andeq	r1, r0, r5, asr r2
    2870:	b806e201 	stmdalt	r6, {r0, r9, sp, lr, pc}
    2874:	3c000000 	stccc	0, cr0, [r0], {-0}
    2878:	17000010 	smladne	r0, r0, r0, r0
    287c:	00000d71 	andeq	r0, r0, r1, ror sp
    2880:	2806e201 	stmdacs	r6, {r0, r9, sp, lr, pc}
    2884:	01000001 	tsteq	r0, r1
    2888:	cf160051 	svcgt	0x00160051
    288c:	01000013 	tsteq	r0, r3, lsl r0
    2890:	0d10070b 	ldceq	7, cr0, [r0, #-44]	; 0xffffffd4
    2894:	001a0800 	andseq	r0, sl, r0, lsl #16
    2898:	9c010000 	stcls	0, cr0, [r1], {-0}
    289c:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
    28a0:	0015a222 	andseq	sl, r5, r2, lsr #4
    28a4:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    28a8:	000000b8 	strheq	r0, [r0], -r8
    28ac:	00001076 	andeq	r1, r0, r6, ror r0
    28b0:	000d7117 	andeq	r7, sp, r7, lsl r1
    28b4:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    28b8:	00000128 	andeq	r0, r0, r8, lsr #2
    28bc:	16005101 	strne	r5, [r0], -r1, lsl #2
    28c0:	00001689 	andeq	r1, r0, r9, lsl #13
    28c4:	2c073c01 	stccs	12, cr3, [r7], {1}
    28c8:	1a08000d 	bne	202904 <_Min_Stack_Size+0x202504>
    28cc:	01000000 	mrseq	r0, (UNDEF: 0)
    28d0:	000ceb9c 	muleq	ip, ip, fp
    28d4:	11002200 	mrsne	r2, R8_usr
    28d8:	3c010000 	stccc	0, cr0, [r1], {-0}
    28dc:	0000b807 	andeq	fp, r0, r7, lsl #16
    28e0:	0010b000 	andseq	fp, r0, r0
    28e4:	0d711700 	ldcleq	7, cr1, [r1, #-0]
    28e8:	3c010000 	stccc	0, cr0, [r1], {-0}
    28ec:	00012807 	andeq	r2, r1, r7, lsl #16
    28f0:	00510100 	subseq	r0, r1, r0, lsl #2
    28f4:	0012f716 	andseq	pc, r2, r6, lsl r7	; <UNPREDICTABLE>
    28f8:	075c0100 	ldrbeq	r0, [ip, -r0, lsl #2]
    28fc:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
    2900:	0000001a 	andeq	r0, r0, sl, lsl r0
    2904:	0d209c01 	stceq	12, cr9, [r0, #-4]!
    2908:	30220000 	eorcc	r0, r2, r0
    290c:	01000013 	tsteq	r0, r3, lsl r0
    2910:	00b8075c 	adcseq	r0, r8, ip, asr r7
    2914:	10ea0000 	rscne	r0, sl, r0
    2918:	71170000 	tstvc	r7, r0
    291c:	0100000d 	tsteq	r0, sp
    2920:	0128075c 	teqeq	r8, ip, asr r7
    2924:	51010000 	mrspl	r0, (UNDEF: 1)
    2928:	15761600 	ldrbne	r1, [r6, #-1536]!	; 0x600
    292c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2930:	000d6407 	andeq	r6, sp, r7, lsl #8
    2934:	00001a08 	andeq	r1, r0, r8, lsl #20
    2938:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    293c:	2200000d 	andcs	r0, r0, #13
    2940:	0000133f 	andeq	r1, r0, pc, lsr r3
    2944:	b8077801 	stmdalt	r7, {r0, fp, ip, sp, lr}
    2948:	24000000 	strcs	r0, [r0], #-0
    294c:	17000011 	smladne	r0, r1, r0, r0
    2950:	00000d71 	andeq	r0, r0, r1, ror sp
    2954:	28077801 	stmdacs	r7, {r0, fp, ip, sp, lr}
    2958:	01000001 	tsteq	r0, r1
    295c:	8b160051 	blhi	582aa8 <_Min_Stack_Size+0x5826a8>
    2960:	01000014 	tsteq	r0, r4, lsl r0
    2964:	0d8007ac 	stceq	7, cr0, [r0, #688]	; 0x2b0
    2968:	001a0800 	andseq	r0, sl, r0, lsl #16
    296c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2970:	00000d8a 	andeq	r0, r0, sl, lsl #27
    2974:	00125522 	andseq	r5, r2, r2, lsr #10
    2978:	07ac0100 	streq	r0, [ip, r0, lsl #2]!
    297c:	000000b8 	strheq	r0, [r0], -r8
    2980:	0000115e 	andeq	r1, r0, lr, asr r1
    2984:	000d7117 	andeq	r7, sp, r7, lsl r1
    2988:	07ac0100 	streq	r0, [ip, r0, lsl #2]!
    298c:	00000128 	andeq	r0, r0, r8, lsr #2
    2990:	16005101 	strne	r5, [r0], -r1, lsl #2
    2994:	0000111a 	andeq	r1, r0, sl, lsl r1
    2998:	9c07d901 	stcls	9, cr13, [r7], {1}
    299c:	1a08000d 	bne	2029d8 <_Min_Stack_Size+0x2025d8>
    29a0:	01000000 	mrseq	r0, (UNDEF: 0)
    29a4:	000dbf9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    29a8:	15a22200 	strne	r2, [r2, #512]!	; 0x200
    29ac:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    29b0:	0000b807 	andeq	fp, r0, r7, lsl #16
    29b4:	00119800 	andseq	r9, r1, r0, lsl #16
    29b8:	0d711700 	ldcleq	7, cr1, [r1, #-0]
    29bc:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    29c0:	00012807 	andeq	r2, r1, r7, lsl #16
    29c4:	00510100 	subseq	r0, r1, r0, lsl #2
    29c8:	00160816 	andseq	r0, r6, r6, lsl r8
    29cc:	08070100 	stmdaeq	r7, {r8}
    29d0:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
    29d4:	0000001a 	andeq	r0, r0, sl, lsl r0
    29d8:	0df49c01 	ldcleq	12, cr9, [r4, #4]!
    29dc:	45220000 	strmi	r0, [r2, #-0]!
    29e0:	01000011 	tsteq	r0, r1, lsl r0
    29e4:	00970807 	addseq	r0, r7, r7, lsl #16
    29e8:	11d20000 	bicsne	r0, r2, r0
    29ec:	71170000 	tstvc	r7, r0
    29f0:	0100000d 	tsteq	r0, sp
    29f4:	01280807 	teqeq	r8, r7, lsl #16
    29f8:	51010000 	mrspl	r0, (UNDEF: 1)
    29fc:	034f2600 	movteq	r2, #62976	; 0xf600
    2a00:	0dd40000 	ldcleq	0, cr0, [r4]
    2a04:	003c0800 	eorseq	r0, ip, r0, lsl #16
    2a08:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a0c:	00000e2c 	andeq	r0, r0, ip, lsr #28
    2a10:	00036020 	andeq	r6, r3, r0, lsr #32
    2a14:	00120c00 	andseq	r0, r2, r0, lsl #24
    2a18:	036c1e00 	cmneq	ip, #0, 28
    2a1c:	12460000 	subne	r0, r6, #0
    2a20:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
    2a24:	8e000003 	cdphi	0, 0, cr0, cr0, cr3, {0}
    2a28:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
    2a2c:	00000384 	andeq	r0, r0, r4, lsl #7
    2a30:	000012c4 	andeq	r1, r0, r4, asr #5
    2a34:	11372700 	teqne	r7, r0, lsl #14
    2a38:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    2a3c:	000e1008 	andeq	r1, lr, r8
    2a40:	00001208 	andeq	r1, r0, r8, lsl #4
    2a44:	189c0100 	ldmne	ip, {r8}
    2a48:	00001566 	andeq	r1, r0, r6, ror #10
    2a4c:	06086d01 	streq	r6, [r8], -r1, lsl #26
    2a50:	24000001 	strcs	r0, [r0], #-1
    2a54:	1408000e 	strne	r0, [r8], #-14
    2a58:	01000000 	mrseq	r0, (UNDEF: 0)
    2a5c:	000e799c 	muleq	lr, ip, r9
    2a60:	11452200 	mrsne	r2, (UNDEF: 101)
    2a64:	6d010000 	stcvs	0, cr0, [r1, #-0]
    2a68:	00009708 	andeq	r9, r0, r8, lsl #14
    2a6c:	0012e400 	andseq	lr, r2, r0, lsl #8
    2a70:	0f711a00 	svceq	0x00711a00
    2a74:	6f010000 	svcvs	0x00010000
    2a78:	00010608 	andeq	r0, r1, r8, lsl #12
    2a7c:	00130500 	andseq	r0, r3, r0, lsl #10
    2a80:	e5160000 	ldr	r0, [r6, #-0]
    2a84:	01000010 	tsteq	r0, r0, lsl r0
    2a88:	0e38088f 	cdpeq	8, 3, cr0, cr8, cr15, {4}
    2a8c:	000c0800 	andeq	r0, ip, r0, lsl #16
    2a90:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a94:	00000e9e 	muleq	r0, lr, lr
    2a98:	00114517 	andseq	r4, r1, r7, lsl r5
    2a9c:	088f0100 	stmeq	pc, {r8}	; <UNPREDICTABLE>
    2aa0:	00000097 	muleq	r0, r7, r0
    2aa4:	06005001 	streq	r5, [r0], -r1
    2aa8:	00000097 	muleq	r0, r7, r0
    2aac:	00000eae 	andeq	r0, r0, lr, lsr #29
    2ab0:	0000c307 	andeq	ip, r0, r7, lsl #6
    2ab4:	28000f00 	stmdacs	r0, {r8, r9, sl, fp}
    2ab8:	000014e1 	andeq	r1, r0, r1, ror #9
    2abc:	0ebf8d01 	cdpeq	13, 11, cr8, cr15, cr1, {0}
    2ac0:	03050000 	movweq	r0, #20480	; 0x5000
    2ac4:	20000014 	andcs	r0, r0, r4, lsl r0
    2ac8:	000ec429 	andeq	ip, lr, r9, lsr #8
    2acc:	0e9e0500 	cdpeq	5, 9, cr0, cr14, cr0, {0}
    2ad0:	a02a0000 	eorge	r0, sl, r0
    2ad4:	06000003 	streq	r0, [r0], -r3
    2ad8:	00df06a7 	sbcseq	r0, pc, r7, lsr #13
    2adc:	ad000000 	stcge	0, cr0, [r0, #-0]
    2ae0:	0400000b 	streq	r0, [r0], #-11
    2ae4:	0008f300 	andeq	pc, r8, r0, lsl #6
    2ae8:	87010400 	strhi	r0, [r1, -r0, lsl #8]
    2aec:	01000002 	tsteq	r0, r2
    2af0:	000016cc 	andeq	r1, r0, ip, asr #13
    2af4:	000000ab 	andeq	r0, r0, fp, lsr #1
    2af8:	000002e8 	andeq	r0, r0, r8, ror #5
    2afc:	00000000 	andeq	r0, r0, r0
    2b00:	00000fb2 			; <UNDEFINED> instruction: 0x00000fb2
    2b04:	53060102 	movwpl	r0, #24834	; 0x6102
    2b08:	03000001 	movweq	r0, #1
    2b0c:	00000119 	andeq	r0, r0, r9, lsl r1
    2b10:	00371c02 	eorseq	r1, r7, r2, lsl #24
    2b14:	01020000 	mrseq	r0, (UNDEF: 2)
    2b18:	00015108 	andeq	r5, r1, r8, lsl #2
    2b1c:	05020200 	streq	r0, [r2, #-512]	; 0x200
    2b20:	00000106 	andeq	r0, r0, r6, lsl #2
    2b24:	00005c03 	andeq	r5, r0, r3, lsl #24
    2b28:	50260200 	eorpl	r0, r6, r0, lsl #4
    2b2c:	02000000 	andeq	r0, r0, #0
    2b30:	01e80702 	mvneq	r0, r2, lsl #14
    2b34:	7a030000 	bvc	c2b3c <_Min_Stack_Size+0xc273c>
    2b38:	02000003 	andeq	r0, r0, #3
    2b3c:	00006237 	andeq	r6, r0, r7, lsr r2
    2b40:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2b44:	000000ec 	andeq	r0, r0, ip, ror #1
    2b48:	00005103 	andeq	r5, r0, r3, lsl #2
    2b4c:	74380200 	ldrtvc	r0, [r8], #-512	; 0x200
    2b50:	02000000 	andeq	r0, r0, #0
    2b54:	017b0704 	cmneq	fp, r4, lsl #14
    2b58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2b5c:	0000e705 	andeq	lr, r0, r5, lsl #14
    2b60:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2b64:	00000176 	andeq	r0, r0, r6, ror r1
    2b68:	69050404 	stmdbvs	r5, {r2, sl}
    2b6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2b70:	01800704 	orreq	r0, r0, r4, lsl #14
    2b74:	1b030000 	blne	c2b7c <_Min_Stack_Size+0xc277c>
    2b78:	03000001 	movweq	r0, #1
    2b7c:	00002c2a 	andeq	r2, r0, sl, lsr #24
    2b80:	005e0300 	subseq	r0, lr, r0, lsl #6
    2b84:	36030000 	strcc	r0, [r3], -r0
    2b88:	00000045 	andeq	r0, r0, r5, asr #32
    2b8c:	00037c03 	andeq	r7, r3, r3, lsl #24
    2b90:	57410300 	strbpl	r0, [r1, -r0, lsl #6]
    2b94:	03000000 	movweq	r0, #0
    2b98:	00000053 	andeq	r0, r0, r3, asr r0
    2b9c:	00694203 	rsbeq	r4, r9, r3, lsl #4
    2ba0:	04020000 	streq	r0, [r2], #-0
    2ba4:	00002c07 	andeq	r2, r0, r7, lsl #24
    2ba8:	00a20500 	adceq	r0, r2, r0, lsl #10
    2bac:	ad050000 	stcge	0, cr0, [r5, #-0]
    2bb0:	06000000 	streq	r0, [r0], -r0
    2bb4:	01f70401 	mvnseq	r0, r1, lsl #8
    2bb8:	000000ea 	andeq	r0, r0, sl, ror #1
    2bbc:	000ed207 	andeq	sp, lr, r7, lsl #4
    2bc0:	53080000 	movwpl	r0, #32768	; 0x8000
    2bc4:	01005445 	tsteq	r0, r5, asr #8
    2bc8:	23170900 	tstcs	r7, #0, 18
    2bcc:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    2bd0:	0000d401 	andeq	sp, r0, r1, lsl #8
    2bd4:	228e0900 	addcs	r0, lr, #0, 18
    2bd8:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    2bdc:	0000d401 	andeq	sp, r0, r1, lsl #8
    2be0:	04010600 	streq	r0, [r1], #-1536	; 0x600
    2be4:	011801f9 			; <UNDEFINED> instruction: 0x011801f9
    2be8:	8b070000 	blhi	1c2bf0 <_Min_Stack_Size+0x1c27f0>
    2bec:	00000004 	andeq	r0, r0, r4
    2bf0:	0005c307 	andeq	ip, r5, r7, lsl #6
    2bf4:	09000100 	stmdbeq	r0, {r8}
    2bf8:	0000092d 	andeq	r0, r0, sp, lsr #18
    2bfc:	0201f904 	andeq	pc, r1, #4, 18	; 0x10000
    2c00:	0a000001 	beq	2c0c <_Min_Stack_Size+0x280c>
    2c04:	0526041c 	streq	r0, [r6, #-1052]!	; 0x41c
    2c08:	000001e2 	andeq	r0, r0, r2, ror #3
    2c0c:	0052530b 	subseq	r5, r2, fp, lsl #6
    2c10:	ca052804 	bgt	14cc28 <_Min_Stack_Size+0x14c828>
    2c14:	00000000 	andeq	r0, r0, r0
    2c18:	00023f0c 	andeq	r3, r2, ip, lsl #30
    2c1c:	05290400 	streq	r0, [r9, #-1024]!	; 0x400
    2c20:	000000a2 	andeq	r0, r0, r2, lsr #1
    2c24:	52440b02 	subpl	r0, r4, #2048	; 0x800
    2c28:	052a0400 	streq	r0, [sl, #-1024]!	; 0x400
    2c2c:	000000ca 	andeq	r0, r0, sl, asr #1
    2c30:	02490c04 	subeq	r0, r9, #4, 24	; 0x400
    2c34:	2b040000 	blcs	102c3c <_Min_Stack_Size+0x10283c>
    2c38:	0000a205 	andeq	sl, r0, r5, lsl #4
    2c3c:	420b0600 	andmi	r0, fp, #0, 12
    2c40:	04005252 	streq	r5, [r0], #-594	; 0x252
    2c44:	00ca052c 	sbceq	r0, sl, ip, lsr #10
    2c48:	0c080000 	stceq	0, cr0, [r8], {-0}
    2c4c:	00000253 	andeq	r0, r0, r3, asr r2
    2c50:	a2052d04 	andge	r2, r5, #4, 26	; 0x100
    2c54:	0a000000 	beq	2c5c <_Min_Stack_Size+0x285c>
    2c58:	3152430b 	cmpcc	r2, fp, lsl #6
    2c5c:	052e0400 	streq	r0, [lr, #-1024]!	; 0x400
    2c60:	000000ca 	andeq	r0, r0, sl, asr #1
    2c64:	00900c0c 	addseq	r0, r0, ip, lsl #24
    2c68:	2f040000 	svccs	0x00040000
    2c6c:	0000a205 	andeq	sl, r0, r5, lsl #4
    2c70:	430b0e00 	movwmi	r0, #48640	; 0xbe00
    2c74:	04003252 	streq	r3, [r0], #-594	; 0x252
    2c78:	00ca0530 	sbceq	r0, sl, r0, lsr r5
    2c7c:	0c100000 	ldceq	0, cr0, [r0], {-0}
    2c80:	00000269 	andeq	r0, r0, r9, ror #4
    2c84:	a2053104 	andge	r3, r5, #4, 2
    2c88:	12000000 	andne	r0, r0, #0
    2c8c:	3352430b 	cmpcc	r2, #738197504	; 0x2c000000
    2c90:	05320400 	ldreq	r0, [r2, #-1024]!	; 0x400
    2c94:	000000ca 	andeq	r0, r0, sl, asr #1
    2c98:	02730c14 	rsbseq	r0, r3, #20, 24	; 0x1400
    2c9c:	33040000 	movwcc	r0, #16384	; 0x4000
    2ca0:	0000a205 	andeq	sl, r0, r5, lsl #4
    2ca4:	250c1600 	strcs	r1, [ip, #-1536]	; 0x600
    2ca8:	04000017 	streq	r0, [r0], #-23
    2cac:	00ca0534 	sbceq	r0, sl, r4, lsr r5
    2cb0:	0c180000 	ldceq	0, cr0, [r8], {-0}
    2cb4:	0000027d 	andeq	r0, r0, sp, ror r2
    2cb8:	a2053504 	andge	r3, r5, #4, 10	; 0x1000000
    2cbc:	1a000000 	bne	2cc4 <_Min_Stack_Size+0x28c4>
    2cc0:	177b0900 	ldrbne	r0, [fp, -r0, lsl #18]!
    2cc4:	36040000 	strcc	r0, [r4], -r0
    2cc8:	00012405 	andeq	r2, r1, r5, lsl #8
    2ccc:	05100d00 	ldreq	r0, [r0, #-3328]	; 0xd00
    2cd0:	00022730 	andeq	r2, r2, r0, lsr r7
    2cd4:	10850e00 	addne	r0, r5, r0, lsl #28
    2cd8:	32050000 	andcc	r0, r5, #0
    2cdc:	000000b8 	strheq	r0, [r0], -r8
    2ce0:	12460e00 	subne	r0, r6, #0, 28
    2ce4:	33050000 	movwcc	r0, #20480	; 0x5000
    2ce8:	000000b8 	strheq	r0, [r0], -r8
    2cec:	14d10e04 	ldrbne	r0, [r1], #3588	; 0xe04
    2cf0:	34050000 	strcc	r0, [r5], #-0
    2cf4:	000000b8 	strheq	r0, [r0], -r8
    2cf8:	11530e08 	cmpne	r3, r8, lsl #28
    2cfc:	35050000 	strcc	r0, [r5, #-0]
    2d00:	000000b8 	strheq	r0, [r0], -r8
    2d04:	7703000c 	strvc	r0, [r3, -ip]
    2d08:	05000016 	streq	r0, [r0, #-22]
    2d0c:	0001ee36 	andeq	lr, r1, r6, lsr lr
    2d10:	06100d00 	ldreq	r0, [r0], -r0, lsl #26
    2d14:	00028336 	andeq	r8, r2, r6, lsr r3
    2d18:	180a0e00 	stmdane	sl, {r9, sl, fp}
    2d1c:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
    2d20:	000000b8 	strheq	r0, [r0], -r8
    2d24:	17de0e00 	ldrbne	r0, [lr, r0, lsl #28]
    2d28:	3e060000 	cdpcc	0, 0, cr0, cr6, cr0, {0}
    2d2c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2d30:	17890e04 	strne	r0, [r9, r4, lsl #28]
    2d34:	41060000 	mrsmi	r0, (UNDEF: 6)
    2d38:	000000a2 	andeq	r0, r0, r2, lsr #1
    2d3c:	18a80e06 	stmiane	r8!, {r1, r2, r9, sl, fp}
    2d40:	44060000 	strmi	r0, [r6], #-0
    2d44:	000000a2 	andeq	r0, r0, r2, lsr #1
    2d48:	19920e08 	ldmibne	r2, {r3, r9, sl, fp}
    2d4c:	4b060000 	blmi	182d54 <_Min_Stack_Size+0x182954>
    2d50:	000000a2 	andeq	r0, r0, r2, lsr #1
    2d54:	19650e0a 	stmdbne	r5!, {r1, r3, r9, sl, fp}^
    2d58:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
    2d5c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2d60:	1a03000c 	bne	c2d98 <_Min_Stack_Size+0xc2998>
    2d64:	06000019 			; <UNDEFINED> instruction: 0x06000019
    2d68:	00023251 	andeq	r3, r2, r1, asr r2
    2d6c:	06080d00 	streq	r0, [r8], -r0, lsl #26
    2d70:	0002c757 	andeq	ip, r2, r7, asr r7
    2d74:	19f90e00 	ldmibne	r9!, {r9, sl, fp}^
    2d78:	5a060000 	bpl	182d80 <_Min_Stack_Size+0x182980>
    2d7c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2d80:	1aca0e00 	bne	ff286588 <_estack+0xdf256588>
    2d84:	5d060000 	stcpl	0, cr0, [r6, #-0]
    2d88:	000000a2 	andeq	r0, r0, r2, lsr #1
    2d8c:	171a0e02 	ldrne	r0, [sl, -r2, lsl #28]
    2d90:	60060000 	andvs	r0, r6, r0
    2d94:	000000a2 	andeq	r0, r0, r2, lsr #1
    2d98:	17fc0e04 	ldrbne	r0, [ip, r4, lsl #28]!
    2d9c:	63060000 	movwvs	r0, #24576	; 0x6000
    2da0:	000000a2 	andeq	r0, r0, r2, lsr #1
    2da4:	98030006 	stmdals	r3, {r1, r2}
    2da8:	06000017 			; <UNDEFINED> instruction: 0x06000017
    2dac:	00028e66 	andeq	r8, r2, r6, ror #28
    2db0:	18850f00 	stmne	r5, {r8, r9, sl, fp}
    2db4:	bb010000 	bllt	42dbc <_Min_Stack_Size+0x429bc>
    2db8:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
    2dbc:	0000011c 	andeq	r0, r0, ip, lsl r1
    2dc0:	048f9c01 	streq	r9, [pc], #3073	; 2dc8 <_Min_Stack_Size+0x29c8>
    2dc4:	48100000 	ldmdami	r0, {}	; <UNPREDICTABLE>
    2dc8:	01000019 	tsteq	r0, r9, lsl r0
    2dcc:	00048fbb 			; <UNDEFINED> instruction: 0x00048fbb
    2dd0:	00134400 	andseq	r4, r3, r0, lsl #8
    2dd4:	0eb21100 	frdeqs	f1, f2, f0
    2dd8:	0b6a0800 	bleq	1a84de0 <_Min_Stack_Size+0x1a849e0>
    2ddc:	03110000 	tsteq	r1, #0
    2de0:	01120000 	tsteq	r2, r0
    2de4:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    2de8:	40045001 	andmi	r5, r4, r1
    2dec:	001f244b 	andseq	r2, pc, fp, asr #8
    2df0:	000ec013 	andeq	ip, lr, r3, lsl r0
    2df4:	000b6a08 	andeq	r6, fp, r8, lsl #20
    2df8:	00032c00 	andeq	r2, r3, r0, lsl #24
    2dfc:	51011200 	mrspl	r1, R9_usr
    2e00:	01123001 	tsteq	r2, r1
    2e04:	4b400450 	blmi	1003f4c <_Min_Stack_Size+0x1003b4c>
    2e08:	11001f24 	tstne	r0, r4, lsr #30
    2e0c:	08000ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp}
    2e10:	00000b81 	andeq	r0, r0, r1, lsl #23
    2e14:	00000344 	andeq	r0, r0, r4, asr #6
    2e18:	01510112 	cmpeq	r1, r2, lsl r1
    2e1c:	50011231 	andpl	r1, r1, r1, lsr r2
    2e20:	13004001 	movwne	r4, #1
    2e24:	08000ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp}
    2e28:	00000b81 	andeq	r0, r0, r1, lsl #23
    2e2c:	0000035c 	andeq	r0, r0, ip, asr r3
    2e30:	01510112 	cmpeq	r1, r2, lsl r1
    2e34:	50011230 	andpl	r1, r1, r0, lsr r2
    2e38:	11004001 	tstne	r0, r1
    2e3c:	08000ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp}
    2e40:	00000b6a 	andeq	r0, r0, sl, ror #22
    2e44:	00000376 	andeq	r0, r0, r6, ror r3
    2e48:	01510112 	cmpeq	r1, r2, lsl r1
    2e4c:	50011231 	andpl	r1, r1, r1, lsr r2
    2e50:	243d4003 	ldrtcs	r4, [sp], #-3
    2e54:	0eec1300 	cdpeq	3, 14, cr1, cr12, cr0, {0}
    2e58:	0b6a0800 	bleq	1a84e60 <_Min_Stack_Size+0x1a84a60>
    2e5c:	03900000 	orrseq	r0, r0, #0
    2e60:	01120000 	tsteq	r2, r0
    2e64:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    2e68:	40035001 	andmi	r5, r3, r1
    2e6c:	1100243d 	tstne	r0, sp, lsr r4
    2e70:	08000ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp}
    2e74:	00000b6a 	andeq	r0, r0, sl, ror #22
    2e78:	000003aa 	andeq	r0, r0, sl, lsr #7
    2e7c:	01510112 	cmpeq	r1, r2, lsl r1
    2e80:	50011231 	andpl	r1, r1, r1, lsr r2
    2e84:	243e4003 	ldrtcs	r4, [lr], #-3
    2e88:	0f041300 	svceq	0x00041300
    2e8c:	0b6a0800 	bleq	1a84e94 <_Min_Stack_Size+0x1a84a94>
    2e90:	03c40000 	biceq	r0, r4, #0
    2e94:	01120000 	tsteq	r2, r0
    2e98:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    2e9c:	40035001 	andmi	r5, r3, r1
    2ea0:	1100243e 	tstne	r0, lr, lsr r4
    2ea4:	08000f0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, fp}
    2ea8:	00000b6a 	andeq	r0, r0, sl, ror #22
    2eac:	000003de 	ldrdeq	r0, [r0], -lr
    2eb0:	01510112 	cmpeq	r1, r2, lsl r1
    2eb4:	50011231 	andpl	r1, r1, r1, lsr r2
    2eb8:	243f4003 	ldrtcs	r4, [pc], #-3	; 2ec0 <_Min_Stack_Size+0x2ac0>
    2ebc:	0f1c1300 	svceq	0x001c1300
    2ec0:	0b6a0800 	bleq	1a84ec8 <_Min_Stack_Size+0x1a84ac8>
    2ec4:	03f80000 	mvnseq	r0, #0
    2ec8:	01120000 	tsteq	r2, r0
    2ecc:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    2ed0:	40035001 	andmi	r5, r3, r1
    2ed4:	1100243f 	tstne	r0, pc, lsr r4
    2ed8:	08000f26 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, fp}
    2edc:	00000b6a 	andeq	r0, r0, sl, ror #22
    2ee0:	00000412 	andeq	r0, r0, r2, lsl r4
    2ee4:	01510112 	cmpeq	r1, r2, lsl r1
    2ee8:	50011231 	andpl	r1, r1, r1, lsr r2
    2eec:	24404003 	strbcs	r4, [r0], #-3
    2ef0:	0f341300 	svceq	0x00341300
    2ef4:	0b6a0800 	bleq	1a84efc <_Min_Stack_Size+0x1a84afc>
    2ef8:	042c0000 	strteq	r0, [ip], #-0
    2efc:	01120000 	tsteq	r2, r0
    2f00:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    2f04:	40035001 	andmi	r5, r3, r1
    2f08:	11002440 	tstne	r0, r0, asr #8
    2f0c:	08000f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp}
    2f10:	00000b81 	andeq	r0, r0, r1, lsl #23
    2f14:	00000445 	andeq	r0, r0, r5, asr #8
    2f18:	01510112 	cmpeq	r1, r2, lsl r1
    2f1c:	50011231 	andpl	r1, r1, r1, lsr r2
    2f20:	00200802 	eoreq	r0, r0, r2, lsl #16
    2f24:	000f4813 	andeq	r4, pc, r3, lsl r8	; <UNPREDICTABLE>
    2f28:	000b8108 	andeq	r8, fp, r8, lsl #2
    2f2c:	00045e00 	andeq	r5, r4, r0, lsl #28
    2f30:	51011200 	mrspl	r1, R9_usr
    2f34:	01123001 	tsteq	r2, r1
    2f38:	20080250 	andcs	r0, r8, r0, asr r2
    2f3c:	0f521100 	svceq	0x00521100
    2f40:	0b6a0800 	bleq	1a84f48 <_Min_Stack_Size+0x1a84b48>
    2f44:	04780000 	ldrbteq	r0, [r8], #-0
    2f48:	01120000 	tsteq	r2, r0
    2f4c:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    2f50:	40035001 	andmi	r5, r3, r1
    2f54:	1400244a 	strne	r2, [r0], #-1098	; 0x44a
    2f58:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
    2f5c:	00000b6a 	andeq	r0, r0, sl, ror #22
    2f60:	01510112 	cmpeq	r1, r2, lsl r1
    2f64:	50011230 	andpl	r1, r1, r0, lsr r2
    2f68:	244a4003 	strbcs	r4, [sl], #-3
    2f6c:	04150000 	ldreq	r0, [r5], #-0
    2f70:	000001e2 	andeq	r0, r0, r2, ror #3
    2f74:	0017550f 	andseq	r5, r7, pc, lsl #10
    2f78:	60f60100 	rscsvs	r0, r6, r0, lsl #2
    2f7c:	c808000f 	stmdagt	r8, {r0, r1, r2, r3}
    2f80:	01000000 	mrseq	r0, (UNDEF: 0)
    2f84:	0005239c 	muleq	r5, ip, r3
    2f88:	19481000 	stmdbne	r8, {ip}^
    2f8c:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    2f90:	0000048f 	andeq	r0, r0, pc, lsl #9
    2f94:	00001414 	andeq	r1, r0, r4, lsl r4
    2f98:	001a5010 	andseq	r5, sl, r0, lsl r0
    2f9c:	23f60100 	mvnscs	r0, #0, 2
    2fa0:	32000005 	andcc	r0, r0, #5
    2fa4:	16000014 			; <UNDEFINED> instruction: 0x16000014
    2fa8:	0000114c 	andeq	r1, r0, ip, asr #2
    2fac:	00b8f801 	adcseq	pc, r8, r1, lsl #16
    2fb0:	145e0000 	ldrbne	r0, [lr], #-0
    2fb4:	28160000 	ldmdacs	r6, {}	; <UNPREDICTABLE>
    2fb8:	01000018 	tsteq	r0, r8, lsl r0
    2fbc:	0000b8f8 	strdeq	fp, [r0], -r8
    2fc0:	00150000 	andseq	r0, r5, r0
    2fc4:	16bd1600 	ldrtne	r1, [sp], r0, lsl #12
    2fc8:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    2fcc:	000000b8 	strheq	r0, [r0], -r8
    2fd0:	0000151f 	andeq	r1, r0, pc, lsl r5
    2fd4:	001a1316 	andseq	r1, sl, r6, lsl r3
    2fd8:	b8fa0100 	ldmlt	sl!, {r8}^
    2fdc:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    2fe0:	17000015 	smladne	r0, r5, r0, r0
    2fe4:	00001a61 	andeq	r1, r0, r1, ror #20
    2fe8:	0227fb01 	eoreq	pc, r7, #1024	; 0x400
    2fec:	91020000 	mrsls	r0, (UNDEF: 2)
    2ff0:	0fae1858 	svceq	0x00ae1858
    2ff4:	0b980800 	bleq	fe604ffc <_estack+0xde5d4ffc>
    2ff8:	01120000 	tsteq	r2, r0
    2ffc:	007d0250 	rsbseq	r0, sp, r0, asr r2
    3000:	04150000 	ldreq	r0, [r5], #-0
    3004:	00000283 	andeq	r0, r0, r3, lsl #5
    3008:	001aa919 	andseq	sl, sl, r9, lsl r9
    300c:	01670100 	cmneq	r7, r0, lsl #2
    3010:	08001028 	stmdaeq	r0, {r3, r5, ip}
    3014:	00000016 	andeq	r0, r0, r6, lsl r0
    3018:	054e9c01 	strbeq	r9, [lr, #-3073]	; 0xc01
    301c:	501a0000 	andspl	r0, sl, r0
    3020:	0100001a 	tsteq	r0, sl, lsl r0
    3024:	05230167 	streq	r0, [r3, #-359]!	; 0x167
    3028:	50010000 	andpl	r0, r1, r0
    302c:	1a721900 	bne	1c89434 <_Min_Stack_Size+0x1c89034>
    3030:	7b010000 	blvc	43038 <_Min_Stack_Size+0x42c38>
    3034:	00104001 	andseq	r4, r0, r1
    3038:	00002408 	andeq	r2, r0, r8, lsl #8
    303c:	939c0100 	orrsls	r0, ip, #0, 2
    3040:	1a000005 	bne	305c <_Min_Stack_Size+0x2c5c>
    3044:	00001948 	andeq	r1, r0, r8, asr #18
    3048:	8f017b01 	svchi	0x00017b01
    304c:	01000004 	tsteq	r0, r4
    3050:	18921b50 	ldmne	r2, {r4, r6, r8, r9, fp, ip}
    3054:	7b010000 	blvc	4305c <_Min_Stack_Size+0x42c5c>
    3058:	00059301 	andeq	r9, r5, r1, lsl #6
    305c:	00155d00 	andseq	r5, r5, r0, lsl #26
    3060:	114c1c00 	cmpne	ip, r0, lsl #24
    3064:	7d010000 	stcvc	0, cr0, [r1, #-0]
    3068:	0000b801 	andeq	fp, r0, r1, lsl #16
    306c:	00157e00 	andseq	r7, r5, r0, lsl #28
    3070:	04150000 	ldreq	r0, [r5], #-0
    3074:	000002c7 	andeq	r0, r0, r7, asr #5
    3078:	0018b519 	andseq	fp, r8, r9, lsl r5
    307c:	019a0100 	orrseq	r0, sl, r0, lsl #2
    3080:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
    3084:	0000000c 	andeq	r0, r0, ip
    3088:	05be9c01 	ldreq	r9, [lr, #3073]!	; 0xc01
    308c:	921a0000 	andsls	r0, sl, #0
    3090:	01000018 	tsteq	r0, r8, lsl r0
    3094:	0593019a 	ldreq	r0, [r3, #410]	; 0x19a
    3098:	50010000 	andpl	r0, r1, r0
    309c:	17af1900 	strne	r1, [pc, r0, lsl #18]!
    30a0:	ab010000 	blge	430a8 <_Min_Stack_Size+0x42ca8>
    30a4:	00107001 	andseq	r7, r0, r1
    30a8:	00001a08 	andeq	r1, r0, r8, lsl #20
    30ac:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    30b0:	1a000005 	bne	30cc <_Min_Stack_Size+0x2ccc>
    30b4:	00001948 	andeq	r1, r0, r8, asr #18
    30b8:	8f01ab01 	svchi	0x0001ab01
    30bc:	01000004 	tsteq	r0, r4
    30c0:	0d711a50 	vldmdbeq	r1!, {s3-s82}
    30c4:	ab010000 	blge	430cc <_Min_Stack_Size+0x42ccc>
    30c8:	00011801 	andeq	r1, r1, r1, lsl #16
    30cc:	00510100 	subseq	r0, r1, r0, lsl #2
    30d0:	00174219 	andseq	r4, r7, r9, lsl r2
    30d4:	01c50100 	biceq	r0, r5, r0, lsl #2
    30d8:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
    30dc:	00000012 	andeq	r0, r0, r2, lsl r0
    30e0:	06269c01 	strteq	r9, [r6], -r1, lsl #24
    30e4:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    30e8:	01000019 	tsteq	r0, r9, lsl r0
    30ec:	048f01c5 	streq	r0, [pc], #453	; 30f4 <_Min_Stack_Size+0x2cf4>
    30f0:	50010000 	andpl	r0, r1, r0
    30f4:	001aba1b 	andseq	fp, sl, fp, lsl sl
    30f8:	01c50100 	biceq	r0, r5, r0, lsl #2
    30fc:	00000097 	muleq	r0, r7, r0
    3100:	000015d2 	ldrdeq	r1, [r0], -r2
    3104:	19b21900 	ldmibne	r2!, {r8, fp, ip}
    3108:	da010000 	ble	43110 <_Min_Stack_Size+0x42d10>
    310c:	0010a001 	andseq	sl, r0, r1
    3110:	00001a08 	andeq	r1, r0, r8, lsl #20
    3114:	599c0100 	ldmibpl	ip, {r8}
    3118:	1a000006 	bne	3138 <_Min_Stack_Size+0x2d38>
    311c:	00001948 	andeq	r1, r0, r8, asr #18
    3120:	8f01da01 	svchi	0x0001da01
    3124:	01000004 	tsteq	r0, r4
    3128:	0d711a50 	vldmdbeq	r1!, {s3-s82}
    312c:	da010000 	ble	43134 <_Min_Stack_Size+0x42d34>
    3130:	00011801 	andeq	r1, r1, r1, lsl #16
    3134:	00510100 	subseq	r0, r1, r0, lsl #2
    3138:	00194f19 	andseq	r4, r9, r9, lsl pc
    313c:	01f40100 	mvnseq	r0, r0, lsl #2
    3140:	080010bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip}
    3144:	0000001a 	andeq	r0, r0, sl, lsl r0
    3148:	068c9c01 	streq	r9, [ip], r1, lsl #24
    314c:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    3150:	01000019 	tsteq	r0, r9, lsl r0
    3154:	048f01f4 	streq	r0, [pc], #500	; 315c <_Min_Stack_Size+0x2d5c>
    3158:	50010000 	andpl	r0, r1, r0
    315c:	000d711a 	andeq	r7, sp, sl, lsl r1
    3160:	01f40100 	mvnseq	r0, r0, lsl #2
    3164:	00000118 	andeq	r0, r0, r8, lsl r1
    3168:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    316c:	000017b9 			; <UNDEFINED> instruction: 0x000017b9
    3170:	d8022d01 	stmdale	r2, {r0, r8, sl, fp, sp}
    3174:	08080010 	stmdaeq	r8, {r4}
    3178:	01000000 	mrseq	r0, (UNDEF: 0)
    317c:	0006c19c 	muleq	r6, ip, r1
    3180:	19481a00 	stmdbne	r8, {r9, fp, ip}^
    3184:	2d010000 	stccs	0, cr0, [r1, #-0]
    3188:	00048f02 	andeq	r8, r4, r2, lsl #30
    318c:	1b500100 	blne	1403594 <_Min_Stack_Size+0x1403194>
    3190:	00001d16 	andeq	r1, r0, r6, lsl sp
    3194:	a2022d01 	andge	r2, r2, #1, 26	; 0x40
    3198:	f3000000 	vhadd.u8	d0, d0, d0
    319c:	00000015 	andeq	r0, r0, r5, lsl r0
    31a0:	001adc1d 	andseq	sp, sl, sp, lsl ip
    31a4:	023d0100 	eorseq	r0, sp, #0, 2
    31a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    31ac:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
    31b0:	00000008 	andeq	r0, r0, r8
    31b4:	06ec9c01 	strbteq	r9, [ip], r1, lsl #24
    31b8:	481b0000 	ldmdami	fp, {}	; <UNPREDICTABLE>
    31bc:	01000019 	tsteq	r0, r9, lsl r0
    31c0:	048f023d 	streq	r0, [pc], #573	; 31c8 <_Min_Stack_Size+0x2dc8>
    31c4:	16140000 	ldrne	r0, [r4], -r0
    31c8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    31cc:	000018e6 	andeq	r1, r0, r6, ror #17
    31d0:	e8027101 	stmda	r2, {r0, r8, ip, sp, lr}
    31d4:	16080010 			; <UNDEFINED> instruction: 0x16080010
    31d8:	01000000 	mrseq	r0, (UNDEF: 0)
    31dc:	0007219c 	muleq	r7, ip, r1
    31e0:	19481a00 	stmdbne	r8, {r9, fp, ip}^
    31e4:	71010000 	mrsvc	r0, (UNDEF: 1)
    31e8:	00048f02 	andeq	r8, r4, r2, lsl #30
    31ec:	1b500100 	blne	14035f4 <_Min_Stack_Size+0x14031f4>
    31f0:	0000199d 	muleq	r0, sp, r9
    31f4:	97027101 	strls	r7, [r2, -r1, lsl #2]
    31f8:	35000000 	strcc	r0, [r0, #-0]
    31fc:	00000016 	andeq	r0, r0, r6, lsl r0
    3200:	00172a19 	andseq	r2, r7, r9, lsl sl
    3204:	02850100 	addeq	r0, r5, #0, 2
    3208:	08001100 	stmdaeq	r0, {r8, ip}
    320c:	0000001a 	andeq	r0, r0, sl, lsl r0
    3210:	07549c01 	ldrbeq	r9, [r4, -r1, lsl #24]
    3214:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    3218:	01000019 	tsteq	r0, r9, lsl r0
    321c:	048f0285 	streq	r0, [pc], #645	; 3224 <_Min_Stack_Size+0x2e24>
    3220:	50010000 	andpl	r0, r1, r0
    3224:	000d711a 	andeq	r7, sp, sl, lsl r1
    3228:	02850100 	addeq	r0, r5, #0, 2
    322c:	00000118 	andeq	r0, r0, r8, lsl r1
    3230:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    3234:	00001a82 	andeq	r1, r0, r2, lsl #21
    3238:	1c02a001 	stcne	0, cr10, [r2], {1}
    323c:	16080011 			; <UNDEFINED> instruction: 0x16080011
    3240:	01000000 	mrseq	r0, (UNDEF: 0)
    3244:	0007899c 	muleq	r7, ip, r9
    3248:	19481a00 	stmdbne	r8, {r9, fp, ip}^
    324c:	a0010000 	andge	r0, r1, r0
    3250:	00048f02 	andeq	r8, r4, r2, lsl #30
    3254:	1b500100 	blne	140365c <_Min_Stack_Size+0x140325c>
    3258:	000017d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    325c:	a202a001 	andge	sl, r2, #1
    3260:	56000000 	strpl	r0, [r0], -r0
    3264:	00000016 	andeq	r0, r0, r6, lsl r0
    3268:	00185919 	andseq	r5, r8, r9, lsl r9
    326c:	02e50100 	rsceq	r0, r5, #0, 2
    3270:	08001134 	stmdaeq	r0, {r2, r4, r5, r8, ip}
    3274:	00000016 	andeq	r0, r0, r6, lsl r0
    3278:	07be9c01 	ldreq	r9, [lr, r1, lsl #24]!
    327c:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    3280:	01000019 	tsteq	r0, r9, lsl r0
    3284:	048f02e5 	streq	r0, [pc], #741	; 328c <_Min_Stack_Size+0x2e8c>
    3288:	50010000 	andpl	r0, r1, r0
    328c:	0017601b 	andseq	r6, r7, fp, lsl r0
    3290:	02e50100 	rsceq	r0, r5, #0, 2
    3294:	000000a2 	andeq	r0, r0, r2, lsr #1
    3298:	00001677 	andeq	r1, r0, r7, ror r6
    329c:	19db1900 	ldmibne	fp, {r8, fp, ip}^
    32a0:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    32a4:	00114c02 	andseq	r4, r1, r2, lsl #24
    32a8:	00001a08 	andeq	r1, r0, r8, lsl #20
    32ac:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    32b0:	1a000007 	bne	32d4 <_Min_Stack_Size+0x2ed4>
    32b4:	00001948 	andeq	r1, r0, r8, asr #18
    32b8:	8f02f701 	svchi	0x0002f701
    32bc:	01000004 	tsteq	r0, r4
    32c0:	0d711a50 	vldmdbeq	r1!, {s3-s82}
    32c4:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    32c8:	00011802 	andeq	r1, r1, r2, lsl #16
    32cc:	00510100 	subseq	r0, r1, r0, lsl #2
    32d0:	00190a19 	andseq	r0, r9, r9, lsl sl
    32d4:	030f0100 	movweq	r0, #61696	; 0xf100
    32d8:	08001168 	stmdaeq	r0, {r3, r5, r6, r8, ip}
    32dc:	0000000c 	andeq	r0, r0, ip
    32e0:	08169c01 	ldmdaeq	r6, {r0, sl, fp, ip, pc}
    32e4:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    32e8:	01000019 	tsteq	r0, r9, lsl r0
    32ec:	048f030f 	streq	r0, [pc], #783	; 32f4 <_Min_Stack_Size+0x2ef4>
    32f0:	50010000 	andpl	r0, r1, r0
    32f4:	1a951900 	bne	fe5496fc <_estack+0xde5196fc>
    32f8:	44010000 	strmi	r0, [r1], #-0
    32fc:	00117403 	andseq	r7, r1, r3, lsl #8
    3300:	00001a08 	andeq	r1, r0, r8, lsl #20
    3304:	499c0100 	ldmibmi	ip, {r8}
    3308:	1a000008 	bne	3330 <_Min_Stack_Size+0x2f30>
    330c:	00001948 	andeq	r1, r0, r8, asr #18
    3310:	8f034401 	svchi	0x00034401
    3314:	01000004 	tsteq	r0, r4
    3318:	0d711a50 	vldmdbeq	r1!, {s3-s82}
    331c:	44010000 	strmi	r0, [r1], #-0
    3320:	00011803 	andeq	r1, r1, r3, lsl #16
    3324:	00510100 	subseq	r0, r1, r0, lsl #2
    3328:	0018f719 	andseq	pc, r8, r9, lsl r7	; <UNPREDICTABLE>
    332c:	03980100 	orrseq	r0, r8, #0, 2
    3330:	08001190 	stmdaeq	r0, {r4, r7, r8, ip}
    3334:	00000012 	andeq	r0, r0, r2, lsl r0
    3338:	087e9c01 	ldmdaeq	lr!, {r0, sl, fp, ip, pc}^
    333c:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    3340:	01000019 	tsteq	r0, r9, lsl r0
    3344:	048f0398 	streq	r0, [pc], #920	; 334c <_Min_Stack_Size+0x2f4c>
    3348:	50010000 	andpl	r0, r1, r0
    334c:	0018491b 	andseq	r4, r8, fp, lsl r9
    3350:	03980100 	orrseq	r0, r8, #0, 2
    3354:	00000097 	muleq	r0, r7, r0
    3358:	00001698 	muleq	r0, r8, r6
    335c:	197f1900 	ldmdbne	pc!, {r8, fp, ip}^	; <UNPREDICTABLE>
    3360:	ab010000 	blge	43368 <_Min_Stack_Size+0x42f68>
    3364:	0011a403 	andseq	sl, r1, r3, lsl #8
    3368:	00001a08 	andeq	r1, r0, r8, lsl #20
    336c:	b19c0100 	orrslt	r0, ip, r0, lsl #2
    3370:	1a000008 	bne	3398 <_Min_Stack_Size+0x2f98>
    3374:	00001948 	andeq	r1, r0, r8, asr #18
    3378:	8f03ab01 	svchi	0x0003ab01
    337c:	01000004 	tsteq	r0, r4
    3380:	0d711a50 	vldmdbeq	r1!, {s3-s82}
    3384:	ab010000 	blge	4338c <_Min_Stack_Size+0x42f8c>
    3388:	00011803 	andeq	r1, r1, r3, lsl #16
    338c:	00510100 	subseq	r0, r1, r0, lsl #2
    3390:	001a2519 	andseq	r2, sl, r9, lsl r5
    3394:	03c40100 	biceq	r0, r4, #0, 2
    3398:	080011c0 	stmdaeq	r0, {r6, r7, r8, ip}
    339c:	0000001a 	andeq	r0, r0, sl, lsl r0
    33a0:	08e49c01 	stmiaeq	r4!, {r0, sl, fp, ip, pc}^
    33a4:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    33a8:	01000019 	tsteq	r0, r9, lsl r0
    33ac:	048f03c4 	streq	r0, [pc], #964	; 33b4 <_Min_Stack_Size+0x2fb4>
    33b0:	50010000 	andpl	r0, r1, r0
    33b4:	000d711a 	andeq	r7, sp, sl, lsl r1
    33b8:	03c40100 	biceq	r0, r4, #0, 2
    33bc:	00000118 	andeq	r0, r0, r8, lsl r1
    33c0:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    33c4:	000019e8 	andeq	r1, r0, r8, ror #19
    33c8:	dc040b01 	stcle	11, cr0, [r4], {1}
    33cc:	16080011 			; <UNDEFINED> instruction: 0x16080011
    33d0:	01000000 	mrseq	r0, (UNDEF: 0)
    33d4:	0009199c 	muleq	r9, ip, r9
    33d8:	19481a00 	stmdbne	r8, {r9, fp, ip}^
    33dc:	0b010000 	bleq	433e4 <_Min_Stack_Size+0x42fe4>
    33e0:	00048f04 	andeq	r8, r4, r4, lsl #30
    33e4:	1b500100 	blne	14037ec <_Min_Stack_Size+0x14033ec>
    33e8:	00001819 	andeq	r1, r0, r9, lsl r8
    33ec:	a2040b01 	andge	r0, r4, #1024	; 0x400
    33f0:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
    33f4:	00000016 	andeq	r0, r0, r6, lsl r0
    33f8:	001a0519 	andseq	r0, sl, r9, lsl r5
    33fc:	041d0100 	ldreq	r0, [sp], #-256	; 0x100
    3400:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
    3404:	0000001a 	andeq	r0, r0, sl, lsl r0
    3408:	094c9c01 	stmdbeq	ip, {r0, sl, fp, ip, pc}^
    340c:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    3410:	01000019 	tsteq	r0, r9, lsl r0
    3414:	048f041d 	streq	r0, [pc], #1053	; 341c <_Min_Stack_Size+0x301c>
    3418:	50010000 	andpl	r0, r1, r0
    341c:	000d711a 	andeq	r7, sp, sl, lsl r1
    3420:	041d0100 	ldreq	r0, [sp], #-256	; 0x100
    3424:	00000118 	andeq	r0, r0, r8, lsl r1
    3428:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    342c:	000017ef 	andeq	r1, r0, pc, ror #15
    3430:	10044b01 	andne	r4, r4, r1, lsl #22
    3434:	14080012 	strne	r0, [r8], #-18
    3438:	01000000 	mrseq	r0, (UNDEF: 0)
    343c:	00098f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    3440:	19481a00 	stmdbne	r8, {r9, fp, ip}^
    3444:	4b010000 	blmi	4344c <_Min_Stack_Size+0x4304c>
    3448:	00048f04 	andeq	r8, r4, r4, lsl #30
    344c:	1b500100 	blne	1403854 <_Min_Stack_Size+0x1403454>
    3450:	0000193b 	andeq	r1, r0, fp, lsr r9
    3454:	a2044b01 	andge	r4, r4, #1024	; 0x400
    3458:	da000000 	ble	3460 <_Min_Stack_Size+0x3060>
    345c:	1a000016 	bne	34bc <_Min_Stack_Size+0x30bc>
    3460:	00000d71 	andeq	r0, r0, r1, ror sp
    3464:	18044b01 	stmdane	r4, {r0, r8, r9, fp, lr}
    3468:	01000001 	tsteq	r0, r1
    346c:	2c190052 	ldccs	0, cr0, [r9], {82}	; 0x52
    3470:	01000019 	tsteq	r0, r9, lsl r0
    3474:	122404cf 	eorne	r0, r4, #-822083584	; 0xcf000000
    3478:	003a0800 	eorseq	r0, sl, r0, lsl #16
    347c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3480:	00000a14 	andeq	r0, r0, r4, lsl sl
    3484:	0019481b 	andseq	r4, r9, fp, lsl r8
    3488:	04cf0100 	strbeq	r0, [pc], #256	; 3490 <_Min_Stack_Size+0x3090>
    348c:	0000048f 	andeq	r0, r0, pc, lsl #9
    3490:	00001714 	andeq	r1, r0, r4, lsl r7
    3494:	0017c81b 	andseq	ip, r7, fp, lsl r8
    3498:	04cf0100 	strbeq	r0, [pc], #256	; 34a0 <_Min_Stack_Size+0x30a0>
    349c:	000000a2 	andeq	r0, r0, r2, lsr #1
    34a0:	00001735 	andeq	r1, r0, r5, lsr r7
    34a4:	000d711a 	andeq	r7, sp, sl, lsl r1
    34a8:	04cf0100 	strbeq	r0, [pc], #256	; 34b0 <_Min_Stack_Size+0x30b0>
    34ac:	00000118 	andeq	r0, r0, r8, lsl r1
    34b0:	ee1c5201 	cdp	2, 1, cr5, cr12, cr1, {0}
    34b4:	0100001a 	tsteq	r0, sl, lsl r0
    34b8:	00b804d1 	ldrsbteq	r0, [r8], r1
    34bc:	17560000 	ldrbne	r0, [r6, -r0]
    34c0:	ac1c0000 	ldcge	0, cr0, [ip], {-0}
    34c4:	01000019 	tsteq	r0, r9, lsl r0
    34c8:	00b804d1 	ldrsbteq	r0, [r8], r1
    34cc:	17750000 	ldrbne	r0, [r5, -r0]!
    34d0:	d51c0000 	ldrle	r0, [ip, #-0]
    34d4:	0100001a 	tsteq	r0, sl, lsl r0
    34d8:	00b804d1 	ldrsbteq	r0, [r8], r1
    34dc:	17890000 	strne	r0, [r9, r0]
    34e0:	cb1c0000 	blgt	7034e8 <_Min_Stack_Size+0x7030e8>
    34e4:	01000018 	tsteq	r0, r8, lsl r0
    34e8:	00b804d2 	ldrsbteq	r0, [r8], r2
    34ec:	17b30000 	ldrne	r0, [r3, r0]!
    34f0:	1d000000 	stcne	0, cr0, [r0, #-0]
    34f4:	00001a3c 	andeq	r1, r0, ip, lsr sl
    34f8:	ea050f01 	b	147104 <_Min_Stack_Size+0x146d04>
    34fc:	60000000 	andvs	r0, r0, r0
    3500:	0c080012 	stceq	0, cr0, [r8], {18}
    3504:	01000000 	mrseq	r0, (UNDEF: 0)
    3508:	000a5d9c 	muleq	sl, ip, sp
    350c:	19481b00 	stmdbne	r8, {r8, r9, fp, ip}^
    3510:	0f010000 	svceq	0x00010000
    3514:	00048f05 	andeq	r8, r4, r5, lsl #30
    3518:	0017df00 	andseq	sp, r7, r0, lsl #30
    351c:	187a1a00 	ldmdane	sl!, {r9, fp, ip}^
    3520:	0f010000 	svceq	0x00010000
    3524:	0000a205 	andeq	sl, r0, r5, lsl #4
    3528:	1c510100 	ldfnee	f0, [r1], {-0}
    352c:	00000f71 	andeq	r0, r0, r1, ror pc
    3530:	ea051101 	b	14793c <_Min_Stack_Size+0x14753c>
    3534:	00000000 	andeq	r0, r0, r0
    3538:	00000018 	andeq	r0, r0, r8, lsl r0
    353c:	0018d619 	andseq	sp, r8, r9, lsl r6
    3540:	05400100 	strbeq	r0, [r0, #-256]	; 0x100
    3544:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
    3548:	00000008 	andeq	r0, r0, r8
    354c:	0a929c01 	beq	fe4aa558 <_estack+0xde47a558>
    3550:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    3554:	01000019 	tsteq	r0, r9, lsl r0
    3558:	048f0540 	streq	r0, [pc], #1344	; 3560 <_Min_Stack_Size+0x3160>
    355c:	50010000 	andpl	r0, r1, r0
    3560:	00187a1b 	andseq	r7, r8, fp, lsl sl
    3564:	05400100 	strbeq	r0, [r0, #-256]	; 0x100
    3568:	000000a2 	andeq	r0, r0, r2, lsr #1
    356c:	00001828 	andeq	r1, r0, r8, lsr #16
    3570:	19c91d00 	stmibne	r9, {r8, sl, fp, ip}^
    3574:	62010000 	andvs	r0, r1, #0
    3578:	0000f605 	andeq	pc, r0, r5, lsl #12
    357c:	00127400 	andseq	r7, r2, r0, lsl #8
    3580:	00004a08 	andeq	r4, r0, r8, lsl #20
    3584:	0d9c0100 	ldfeqs	f0, [ip]
    3588:	1b00000b 	blne	35bc <_Min_Stack_Size+0x31bc>
    358c:	00001948 	andeq	r1, r0, r8, asr #18
    3590:	8f056201 	svchi	0x00056201
    3594:	49000004 	stmdbmi	r0, {r2}
    3598:	1b000018 	blne	3600 <_Min_Stack_Size+0x3200>
    359c:	000017c8 	andeq	r1, r0, r8, asr #15
    35a0:	a2056201 	andge	r6, r5, #268435456	; 0x10000000
    35a4:	75000000 	strvc	r0, [r0, #-0]
    35a8:	1c000018 	stcne	0, cr0, [r0], {24}
    35ac:	000019ab 	andeq	r1, r0, fp, lsr #19
    35b0:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    35b4:	a1000000 	mrsge	r0, (UNDEF: 0)
    35b8:	1c000018 	stcne	0, cr0, [r0], {24}
    35bc:	00001ad5 	ldrdeq	r1, [r0], -r5
    35c0:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    35c4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    35c8:	1c000018 	stcne	0, cr0, [r0], {24}
    35cc:	00001aee 	andeq	r1, r0, lr, ror #21
    35d0:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    35d4:	3b000000 	blcc	35dc <_Min_Stack_Size+0x31dc>
    35d8:	1c000019 	stcne	0, cr0, [r0], {25}
    35dc:	00000f71 	andeq	r0, r0, r1, ror pc
    35e0:	f6056501 			; <UNDEFINED> instruction: 0xf6056501
    35e4:	77000000 	strvc	r0, [r0, -r0]
    35e8:	00000019 	andeq	r0, r0, r9, lsl r0
    35ec:	00183119 	andseq	r3, r8, r9, lsl r1
    35f0:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    35f4:	080012c0 	stmdaeq	r0, {r6, r7, r9, ip}
    35f8:	00000010 	andeq	r0, r0, r0, lsl r0
    35fc:	0b5e9c01 	bleq	17aa608 <_Min_Stack_Size+0x17aa208>
    3600:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    3604:	01000019 	tsteq	r0, r9, lsl r0
    3608:	048f05ac 	streq	r0, [pc], #1452	; 3610 <_Min_Stack_Size+0x3210>
    360c:	50010000 	andpl	r0, r1, r0
    3610:	0017c81b 	andseq	ip, r7, fp, lsl r8
    3614:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    3618:	000000a2 	andeq	r0, r0, r2, lsr #1
    361c:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
    3620:	0019ab1c 	andseq	sl, r9, ip, lsl fp
    3624:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
    3628:	000000a2 	andeq	r0, r0, r2, lsr #1
    362c:	000019d3 	ldrdeq	r1, [r0], -r3
    3630:	001ad51e 	andseq	sp, sl, lr, lsl r5
    3634:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
    3638:	000000a2 	andeq	r0, r0, r2, lsr #1
    363c:	03a01f00 	moveq	r1, #0, 30
    3640:	a7070000 	strge	r0, [r7, -r0]
    3644:	0000cf06 	andeq	ip, r0, r6, lsl #30
    3648:	10a52000 	adcne	r2, r5, r0
    364c:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    3650:	000b8102 	andeq	r8, fp, r2, lsl #2
    3654:	00b82100 	adcseq	r2, r8, r0, lsl #2
    3658:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
    365c:	00000001 	andeq	r0, r0, r1
    3660:	0013cf20 	andseq	ip, r3, r0, lsr #30
    3664:	024a0500 	subeq	r0, sl, #0, 10
    3668:	00000b98 	muleq	r0, r8, fp
    366c:	0000b821 	andeq	fp, r0, r1, lsr #16
    3670:	01182100 	tsteq	r8, r0, lsl #2
    3674:	20000000 	andcs	r0, r0, r0
    3678:	00001522 	andeq	r1, r0, r2, lsr #10
    367c:	aa023205 	bge	8fe98 <_Min_Stack_Size+0x8fa98>
    3680:	2100000b 	tstcs	r0, fp
    3684:	00000baa 	andeq	r0, r0, sl, lsr #23
    3688:	27041500 	strcs	r1, [r4, -r0, lsl #10]
    368c:	00000002 	andeq	r0, r0, r2
    3690:	000002d8 	ldrdeq	r0, [r0], -r8
    3694:	0ad10004 	beq	ff4436ac <_estack+0xdf4136ac>
    3698:	01040000 	mrseq	r0, (UNDEF: 4)
    369c:	00000287 	andeq	r0, r0, r7, lsl #5
    36a0:	001b3301 	andseq	r3, fp, r1, lsl #6
    36a4:	0000ab00 	andeq	sl, r0, r0, lsl #22
    36a8:	0003d800 	andeq	sp, r3, r0, lsl #16
    36ac:	00000000 	andeq	r0, r0, r0
    36b0:	00147300 	andseq	r7, r4, r0, lsl #6
    36b4:	06010200 	streq	r0, [r1], -r0, lsl #4
    36b8:	00000153 	andeq	r0, r0, r3, asr r1
    36bc:	00011903 	andeq	r1, r1, r3, lsl #18
    36c0:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
    36c4:	02000000 	andeq	r0, r0, #0
    36c8:	01510801 	cmpeq	r1, r1, lsl #16
    36cc:	02020000 	andeq	r0, r2, #0
    36d0:	00010605 	andeq	r0, r1, r5, lsl #12
    36d4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    36d8:	000001e8 	andeq	r0, r0, r8, ror #3
    36dc:	00037a03 	andeq	r7, r3, r3, lsl #20
    36e0:	57370200 	ldrpl	r0, [r7, -r0, lsl #4]!
    36e4:	02000000 	andeq	r0, r0, #0
    36e8:	00ec0504 	rsceq	r0, ip, r4, lsl #10
    36ec:	51030000 	mrspl	r0, (UNDEF: 3)
    36f0:	02000000 	andeq	r0, r0, #0
    36f4:	00006938 	andeq	r6, r0, r8, lsr r9
    36f8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    36fc:	0000017b 	andeq	r0, r0, fp, ror r1
    3700:	e7050802 	str	r0, [r5, -r2, lsl #16]
    3704:	02000000 	andeq	r0, r0, #0
    3708:	01760708 	cmneq	r6, r8, lsl #14
    370c:	04040000 	streq	r0, [r4], #-0
    3710:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    3714:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3718:	00000180 	andeq	r0, r0, r0, lsl #3
    371c:	00011b03 	andeq	r1, r1, r3, lsl #22
    3720:	2c2a0300 	stccs	3, cr0, [sl], #-0
    3724:	03000000 	movweq	r0, #0
    3728:	0000037c 	andeq	r0, r0, ip, ror r3
    372c:	004c4103 	subeq	r4, ip, r3, lsl #2
    3730:	53030000 	movwpl	r0, #12288	; 0x3000
    3734:	03000000 	movweq	r0, #0
    3738:	00005e42 	andeq	r5, r0, r2, asr #28
    373c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3740:	0000002c 	andeq	r0, r0, ip, lsr #32
    3744:	0000a205 	andeq	sl, r0, r5, lsl #4
    3748:	00a20600 	adceq	r0, r2, r0, lsl #12
    374c:	00c90000 	sbceq	r0, r9, r0
    3750:	ad070000 	stcge	0, cr0, [r7, #-0]
    3754:	01000000 	mrseq	r0, (UNDEF: 0)
    3758:	00a20600 	adceq	r0, r2, r0, lsl #12
    375c:	00d90000 	sbcseq	r0, r9, r0
    3760:	ad070000 	stcge	0, cr0, [r7, #-0]
    3764:	03000000 	movweq	r0, #0
    3768:	00970500 	addseq	r0, r7, r0, lsl #10
    376c:	01080000 	mrseq	r0, (UNDEF: 8)
    3770:	f401f704 	vst1.8	{d15}, [r1], r4
    3774:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3778:	00000ed2 	ldrdeq	r0, [r0], -r2
    377c:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    3780:	00010054 	andeq	r0, r1, r4, asr r0
    3784:	0023170b 	eoreq	r1, r3, fp, lsl #14
    3788:	01f70400 	mvnseq	r0, r0, lsl #8
    378c:	000000de 	ldrdeq	r0, [r0], -lr
    3790:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    3794:	00011601 	andeq	r1, r1, r1, lsl #12
    3798:	048b0900 	streq	r0, [fp], #2304	; 0x900
    379c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    37a0:	000005c3 	andeq	r0, r0, r3, asr #11
    37a4:	2d0b0001 	stccs	0, cr0, [fp, #-4]
    37a8:	04000009 	streq	r0, [r0], #-9
    37ac:	010001f9 	strdeq	r0, [r0, -r9]
    37b0:	240c0000 	strcs	r0, [ip], #-0
    37b4:	6d03e604 	stcvs	6, cr14, [r3, #-16]
    37b8:	0d000001 	stceq	0, cr0, [r0, #-4]
    37bc:	00001b88 	andeq	r1, r0, r8, lsl #23
    37c0:	b403e804 	strlt	lr, [r3], #-2052	; 0x804
    37c4:	00000000 	andeq	r0, r0, r0
    37c8:	434d500e 	movtmi	r5, #53262	; 0xd00e
    37cc:	03e90400 	mvneq	r0, #0, 8
    37d0:	000000b4 	strheq	r0, [r0], -r4
    37d4:	1bcc0d04 	blne	ff306bec <_estack+0xdf2d6bec>
    37d8:	ea040000 	b	1037e0 <_Min_Stack_Size+0x1033e0>
    37dc:	00016d03 	andeq	r6, r1, r3, lsl #26
    37e0:	a90d0800 	stmdbge	sp, {fp}
    37e4:	0400001b 	streq	r0, [r0], #-27
    37e8:	00b903eb 	adcseq	r0, r9, fp, ror #7
    37ec:	0d180000 	ldceq	0, cr0, [r8, #-0]
    37f0:	00001b82 	andeq	r1, r0, r2, lsl #23
    37f4:	b403ec04 	strlt	lr, [r3], #-3076	; 0xc04
    37f8:	20000000 	andcs	r0, r0, r0
    37fc:	00c90500 	sbceq	r0, r9, r0, lsl #10
    3800:	160b0000 	strne	r0, [fp], -r0
    3804:	0400001c 	streq	r0, [r0], #-28
    3808:	012203ed 	smulwteq	r2, sp, r3
    380c:	3a0f0000 	bcc	3c3814 <_Min_Stack_Size+0x3c3414>
    3810:	0100001c 	tsteq	r0, ip, lsl r0
    3814:	0012d064 	andseq	sp, r2, r4, rrx
    3818:	00001a08 	andeq	r1, r0, r8, lsl #20
    381c:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    3820:	10000001 	andne	r0, r0, r1
    3824:	080012dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip}
    3828:	000002c8 	andeq	r0, r0, r8, asr #5
    382c:	000001ad 	andeq	r0, r0, sp, lsr #3
    3830:	01510111 	cmpeq	r1, r1, lsl r1
    3834:	50011131 	andpl	r1, r1, r1, lsr r1
    3838:	40000a03 	andmi	r0, r0, r3, lsl #20
    383c:	12ea1200 	rscne	r1, sl, #0, 4
    3840:	02c80800 	sbceq	r0, r8, #0, 16
    3844:	01110000 	tsteq	r1, r0
    3848:	11300151 	teqne	r0, r1, asr r1
    384c:	0a035001 	beq	d7858 <_Min_Stack_Size+0xd7458>
    3850:	00004000 	andeq	r4, r0, r0
    3854:	001c480f 	andseq	r4, ip, pc, lsl #16
    3858:	ec760100 	ldfe	f0, [r6], #-0
    385c:	0c080012 	stceq	0, cr0, [r8], {18}
    3860:	01000000 	mrseq	r0, (UNDEF: 0)
    3864:	0001e79c 	muleq	r1, ip, r7
    3868:	1c031300 	stcne	3, cr1, [r3], {-0}
    386c:	76010000 	strvc	r0, [r1], -r0
    3870:	0000008c 	andeq	r0, r0, ip, lsl #1
    3874:	0f005001 	svceq	0x00005001
    3878:	00001bb2 			; <UNDEFINED> instruction: 0x00001bb2
    387c:	12f88b01 	rscsne	r8, r8, #1024	; 0x400
    3880:	000a0800 	andeq	r0, sl, r0, lsl #16
    3884:	9c010000 	stcls	0, cr0, [r1], {-0}
    3888:	0000020a 	andeq	r0, r0, sl, lsl #4
    388c:	000d7113 	andeq	r7, sp, r3, lsl r1
    3890:	168b0100 	strne	r0, [fp], r0, lsl #2
    3894:	01000001 	tsteq	r0, r1
    3898:	530f0050 	movwpl	r0, #61520	; 0xf050
    389c:	01000007 	tsteq	r0, r7
    38a0:	001304a2 	andseq	r0, r3, r2, lsr #9
    38a4:	00002e08 	andeq	r2, r0, r8, lsl #28
    38a8:	4d9c0100 	ldfmis	f0, [ip]
    38ac:	14000002 	strne	r0, [r0], #-2
    38b0:	00001c25 	andeq	r1, r0, r5, lsr #24
    38b4:	008ca201 	addeq	sl, ip, r1, lsl #4
    38b8:	19fa0000 	ldmibne	sl!, {}^	; <UNPREDICTABLE>
    38bc:	d3140000 	tstle	r4, #0
    38c0:	0100001b 	tsteq	r0, fp, lsl r0
    38c4:	00008ca2 	andeq	r8, r0, r2, lsr #25
    38c8:	001a1b00 	andseq	r1, sl, r0, lsl #22
    38cc:	6d741500 	cfldr64vs	mvdx1, [r4, #-0]
    38d0:	a4010070 	strge	r0, [r1], #-112	; 0x70
    38d4:	000000a2 	andeq	r0, r0, r2, lsr #1
    38d8:	00001a3c 	andeq	r1, r0, ip, lsr sl
    38dc:	1be30f00 	blne	ff8c74e4 <_estack+0xdf8974e4>
    38e0:	b7010000 	strlt	r0, [r1, -r0]
    38e4:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
    38e8:	0000000a 	andeq	r0, r0, sl
    38ec:	02709c01 	rsbseq	r9, r0, #256	; 0x100
    38f0:	8f130000 	svchi	0x00130000
    38f4:	0100001b 	tsteq	r0, fp, lsl r0
    38f8:	0000a2b7 			; <UNDEFINED> instruction: 0x0000a2b7
    38fc:	00500100 	subseq	r0, r0, r0, lsl #2
    3900:	001af70f 	andseq	pc, sl, pc, lsl #14
    3904:	40c80100 	sbcmi	r0, r8, r0, lsl #2
    3908:	0c080013 	stceq	0, cr0, [r8], {19}
    390c:	01000000 	mrseq	r0, (UNDEF: 0)
    3910:	0002939c 	muleq	r2, ip, r3
    3914:	0d711300 	ldcleq	3, cr1, [r1, #-0]
    3918:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    391c:	00000116 	andeq	r0, r0, r6, lsl r1
    3920:	16005001 	strne	r5, [r0], -r1
    3924:	00001b12 	andeq	r1, r0, r2, lsl fp
    3928:	00f4d501 	rscseq	sp, r4, r1, lsl #10
    392c:	134c0000 	movtne	r0, #49152	; 0xc000
    3930:	00100800 	andseq	r0, r0, r0, lsl #16
    3934:	9c010000 	stcls	0, cr0, [r1], {-0}
    3938:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    393c:	000f7117 	andeq	r7, pc, r7, lsl r1	; <UNPREDICTABLE>
    3940:	f4d70100 			; <UNDEFINED> instruction: 0xf4d70100
    3944:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    3948:	0000001a 	andeq	r0, r0, sl, lsl r0
    394c:	0003a018 	andeq	sl, r3, r8, lsl r0
    3950:	06a70500 	strteq	r0, [r7], r0, lsl #10
    3954:	000000d9 	ldrdeq	r0, [r0], -r9
    3958:	0013cf19 	andseq	ip, r3, r9, lsl pc
    395c:	024a0600 	subeq	r0, sl, #0, 12
    3960:	0000a21a 	andeq	sl, r0, sl, lsl r2
    3964:	01161a00 	tsteq	r6, r0, lsl #20
    3968:	00000000 	andeq	r0, r0, r0
    396c:	00000c53 	andeq	r0, r0, r3, asr ip
    3970:	0c3a0004 	ldceq	0, cr0, [sl], #-16
    3974:	01040000 	mrseq	r0, (UNDEF: 4)
    3978:	00000287 	andeq	r0, r0, r7, lsl #5
    397c:	001edc01 	andseq	sp, lr, r1, lsl #24
    3980:	0000ab00 	andeq	sl, r0, r0, lsl #22
    3984:	00041800 	andeq	r1, r4, r0, lsl #16
    3988:	00000000 	andeq	r0, r0, r0
    398c:	00169000 	andseq	r9, r6, r0
    3990:	06010200 	streq	r0, [r1], -r0, lsl #4
    3994:	00000153 	andeq	r0, r0, r3, asr r1
    3998:	00011903 	andeq	r1, r1, r3, lsl #18
    399c:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
    39a0:	02000000 	andeq	r0, r0, #0
    39a4:	01510801 	cmpeq	r1, r1, lsl #16
    39a8:	02020000 	andeq	r0, r2, #0
    39ac:	00010605 	andeq	r0, r1, r5, lsl #12
    39b0:	005c0300 	subseq	r0, ip, r0, lsl #6
    39b4:	26020000 	strcs	r0, [r2], -r0
    39b8:	00000050 	andeq	r0, r0, r0, asr r0
    39bc:	e8070202 	stmda	r7, {r1, r9}
    39c0:	03000001 	movweq	r0, #1
    39c4:	0000037a 	andeq	r0, r0, sl, ror r3
    39c8:	00623702 	rsbeq	r3, r2, r2, lsl #14
    39cc:	04020000 	streq	r0, [r2], #-0
    39d0:	0000ec05 	andeq	lr, r0, r5, lsl #24
    39d4:	00510300 	subseq	r0, r1, r0, lsl #6
    39d8:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    39dc:	00000074 	andeq	r0, r0, r4, ror r0
    39e0:	7b070402 	blvc	1c49f0 <_Min_Stack_Size+0x1c45f0>
    39e4:	02000001 	andeq	r0, r0, #1
    39e8:	00e70508 	rsceq	r0, r7, r8, lsl #10
    39ec:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    39f0:	00017607 	andeq	r7, r1, r7, lsl #12
    39f4:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    39f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    39fc:	80070402 	andhi	r0, r7, r2, lsl #8
    3a00:	03000001 	movweq	r0, #1
    3a04:	0000011b 	andeq	r0, r0, fp, lsl r1
    3a08:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    3a0c:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
    3a10:	03000000 	movweq	r0, #0
    3a14:	00004536 	andeq	r4, r0, r6, lsr r5
    3a18:	037c0300 	cmneq	ip, #0, 6
    3a1c:	41030000 	mrsmi	r0, (UNDEF: 3)
    3a20:	00000057 	andeq	r0, r0, r7, asr r0
    3a24:	00005303 	andeq	r5, r0, r3, lsl #6
    3a28:	69420300 	stmdbvs	r2, {r8, r9}^
    3a2c:	02000000 	andeq	r0, r0, #0
    3a30:	002c0704 	eoreq	r0, ip, r4, lsl #14
    3a34:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    3a38:	05000000 	streq	r0, [r0, #-0]
    3a3c:	000000a2 	andeq	r0, r0, r2, lsr #1
    3a40:	0000ad05 	andeq	sl, r0, r5, lsl #26
    3a44:	04010600 	streq	r0, [r1], #-1536	; 0x600
    3a48:	00ef01f7 	strdeq	r0, [pc], #23	; <UNPREDICTABLE>
    3a4c:	d2070000 	andle	r0, r7, #0
    3a50:	0000000e 	andeq	r0, r0, lr
    3a54:	54455308 	strbpl	r5, [r5], #-776	; 0x308
    3a58:	09000100 	stmdbeq	r0, {r8}
    3a5c:	00002317 	andeq	r2, r0, r7, lsl r3
    3a60:	d901f704 	stmdble	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
    3a64:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3a68:	0000228e 	andeq	r2, r0, lr, lsl #5
    3a6c:	d901f704 	stmdble	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
    3a70:	06000000 	streq	r0, [r0], -r0
    3a74:	01f90401 	mvnseq	r0, r1, lsl #8
    3a78:	0000011d 	andeq	r0, r0, sp, lsl r1
    3a7c:	00048b07 	andeq	r8, r4, r7, lsl #22
    3a80:	c3070000 	movwgt	r0, #28672	; 0x7000
    3a84:	01000005 	tsteq	r0, r5
    3a88:	092d0900 	pusheq	{r8, fp}
    3a8c:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    3a90:	00010701 	andeq	r0, r1, r1, lsl #14
    3a94:	04010600 	streq	r0, [r1], #-1536	; 0x600
    3a98:	013f01fc 			; <UNDEFINED> instruction: 0x013f01fc
    3a9c:	82070000 	andhi	r0, r7, #0
    3aa0:	00000013 	andeq	r0, r0, r3, lsl r0
    3aa4:	00166107 	andseq	r6, r6, r7, lsl #2
    3aa8:	09000100 	stmdbeq	r0, {r8}
    3aac:	00001202 	andeq	r1, r0, r2, lsl #4
    3ab0:	2901fc04 	stmdbcs	r1, {r2, sl, fp, ip, sp, lr, pc}
    3ab4:	0a000001 	beq	3ac0 <_Min_Stack_Size+0x36c0>
    3ab8:	03f30428 	mvnseq	r0, #40, 8	; 0x28000000
    3abc:	00000258 	andeq	r0, r0, r8, asr r2
    3ac0:	3152430b 	cmpcc	r2, fp, lsl #6
    3ac4:	03f50400 	mvnseq	r0, #0, 8
    3ac8:	000000cf 	andeq	r0, r0, pc, asr #1
    3acc:	023f0c00 	eorseq	r0, pc, #0, 24
    3ad0:	f6040000 			; <UNDEFINED> instruction: 0xf6040000
    3ad4:	0000a203 	andeq	sl, r0, r3, lsl #4
    3ad8:	430b0200 	movwmi	r0, #45568	; 0xb200
    3adc:	04003252 	streq	r3, [r0], #-594	; 0x252
    3ae0:	00cf03f7 	strdeq	r0, [pc], #55	; <UNPREDICTABLE>
    3ae4:	0c040000 	stceq	0, cr0, [r4], {-0}
    3ae8:	00000249 	andeq	r0, r0, r9, asr #4
    3aec:	a203f804 	andge	pc, r3, #4, 16	; 0x40000
    3af0:	06000000 	streq	r0, [r0], -r0
    3af4:	001d530c 	andseq	r5, sp, ip, lsl #6
    3af8:	03f90400 	mvnseq	r0, #0, 8
    3afc:	000000cf 	andeq	r0, r0, pc, asr #1
    3b00:	02530c08 	subseq	r0, r3, #8, 24	; 0x800
    3b04:	fa040000 	blx	103b0c <_Min_Stack_Size+0x10370c>
    3b08:	0000a203 	andeq	sl, r0, r3, lsl #4
    3b0c:	480c0a00 	stmdami	ip, {r9, fp}
    3b10:	04000020 	streq	r0, [r0], #-32
    3b14:	00cf03fb 	strdeq	r0, [pc], #59	; <UNPREDICTABLE>
    3b18:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    3b1c:	00000090 	muleq	r0, r0, r0
    3b20:	a203fc04 	andge	pc, r3, #4, 24	; 0x400
    3b24:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3b28:	0052440b 	subseq	r4, r2, fp, lsl #8
    3b2c:	cf03fd04 	svcgt	0x0003fd04
    3b30:	10000000 	andne	r0, r0, r0
    3b34:	0002690c 	andeq	r6, r2, ip, lsl #18
    3b38:	03fe0400 	mvnseq	r0, #0, 8
    3b3c:	000000a2 	andeq	r0, r0, r2, lsr #1
    3b40:	52530b12 	subspl	r0, r3, #18432	; 0x4800
    3b44:	ff040031 			; <UNDEFINED> instruction: 0xff040031
    3b48:	0000cf03 	andeq	ip, r0, r3, lsl #30
    3b4c:	730c1400 	movwvc	r1, #50176	; 0xc400
    3b50:	04000002 	streq	r0, [r0], #-2
    3b54:	00a20400 	adceq	r0, r2, r0, lsl #8
    3b58:	0b160000 	bleq	583b60 <_Min_Stack_Size+0x583760>
    3b5c:	00325253 	eorseq	r5, r2, r3, asr r2
    3b60:	cf040104 	svcgt	0x00040104
    3b64:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3b68:	00027d0c 	andeq	r7, r2, ip, lsl #26
    3b6c:	04020400 	streq	r0, [r2], #-1024	; 0x400
    3b70:	000000a2 	andeq	r0, r0, r2, lsr #1
    3b74:	43430b1a 	movtmi	r0, #15130	; 0x3b1a
    3b78:	03040052 	movweq	r0, #16466	; 0x4052
    3b7c:	0000cf04 	andeq	ip, r0, r4, lsl #30
    3b80:	ae0c1c00 	cdpge	12, 0, cr1, cr12, cr0, {0}
    3b84:	0400001e 	streq	r0, [r0], #-30
    3b88:	00a20404 	adceq	r0, r2, r4, lsl #8
    3b8c:	0c1e0000 	ldceq	0, cr0, [lr], {-0}
    3b90:	00001cb5 			; <UNDEFINED> instruction: 0x00001cb5
    3b94:	cf040504 	svcgt	0x00040504
    3b98:	20000000 	andcs	r0, r0, r0
    3b9c:	001eb80c 	andseq	fp, lr, ip, lsl #16
    3ba0:	04060400 	streq	r0, [r6], #-1024	; 0x400
    3ba4:	000000a2 	andeq	r0, r0, r2, lsr #1
    3ba8:	1d580c22 	ldclne	12, cr0, [r8, #-136]	; 0xffffff78
    3bac:	07040000 	streq	r0, [r4, -r0]
    3bb0:	0000cf04 	andeq	ip, r0, r4, lsl #30
    3bb4:	c20c2400 	andgt	r2, ip, #0, 8
    3bb8:	0400001e 	streq	r0, [r0], #-30
    3bbc:	00a20408 	adceq	r0, r2, r8, lsl #8
    3bc0:	00260000 	eoreq	r0, r6, r0
    3bc4:	001d8909 	andseq	r8, sp, r9, lsl #18
    3bc8:	04090400 	streq	r0, [r9], #-1024	; 0x400
    3bcc:	0000014b 	andeq	r0, r0, fp, asr #2
    3bd0:	3005100d 	andcc	r1, r5, sp
    3bd4:	0000029d 	muleq	r0, sp, r2
    3bd8:	0010850e 	andseq	r8, r0, lr, lsl #10
    3bdc:	b8320500 	ldmdalt	r2!, {r8, sl}
    3be0:	00000000 	andeq	r0, r0, r0
    3be4:	0012460e 	andseq	r4, r2, lr, lsl #12
    3be8:	b8330500 	ldmdalt	r3!, {r8, sl}
    3bec:	04000000 	streq	r0, [r0], #-0
    3bf0:	0014d10e 	andseq	sp, r4, lr, lsl #2
    3bf4:	b8340500 	ldmdalt	r4!, {r8, sl}
    3bf8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3bfc:	0011530e 	andseq	r5, r1, lr, lsl #6
    3c00:	b8350500 	ldmdalt	r5!, {r8, sl}
    3c04:	0c000000 	stceq	0, cr0, [r0], {-0}
    3c08:	16770300 	ldrbtne	r0, [r7], -r0, lsl #6
    3c0c:	36050000 	strcc	r0, [r5], -r0
    3c10:	00000264 	andeq	r0, r0, r4, ror #4
    3c14:	3606100d 	strcc	r1, [r6], -sp
    3c18:	000002f9 	strdeq	r0, [r0], -r9
    3c1c:	001d2c0e 	andseq	r2, sp, lr, lsl #24
    3c20:	b8380600 	ldmdalt	r8!, {r9, sl}
    3c24:	00000000 	andeq	r0, r0, r0
    3c28:	001d3b0e 	andseq	r3, sp, lr, lsl #22
    3c2c:	a23b0600 	eorsge	r0, fp, #0, 12
    3c30:	04000000 	streq	r0, [r0], #-0
    3c34:	001ddf0e 	andseq	sp, sp, lr, lsl #30
    3c38:	a23e0600 	eorsge	r0, lr, #0, 12
    3c3c:	06000000 	streq	r0, [r0], -r0
    3c40:	001ecc0e 	andseq	ip, lr, lr, lsl #24
    3c44:	a2410600 	subge	r0, r1, #0, 12
    3c48:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3c4c:	001f330e 	andseq	r3, pc, lr, lsl #6
    3c50:	a2440600 	subge	r0, r4, #0, 12
    3c54:	0a000000 	beq	3c5c <_Min_Stack_Size+0x385c>
    3c58:	001f630e 	andseq	r6, pc, lr, lsl #6
    3c5c:	a2470600 	subge	r0, r7, #0, 12
    3c60:	0c000000 	stceq	0, cr0, [r0], {-0}
    3c64:	1e890300 	cdpne	3, 8, cr0, cr9, cr0, {0}
    3c68:	49060000 	stmdbmi	r6, {}	; <UNPREDICTABLE>
    3c6c:	000002a8 	andeq	r0, r0, r8, lsr #5
    3c70:	001e510f 	andseq	r5, lr, pc, lsl #2
    3c74:	5c890100 	stfpls	f0, [r9], {0}
    3c78:	70080013 	andvc	r0, r8, r3, lsl r0
    3c7c:	01000000 	mrseq	r0, (UNDEF: 0)
    3c80:	0003c19c 	muleq	r3, ip, r1
    3c84:	1e131000 	cdpne	0, 1, cr1, cr3, cr0, {0}
    3c88:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    3c8c:	000003c1 	andeq	r0, r0, r1, asr #7
    3c90:	00001aa0 	andeq	r1, r0, r0, lsr #21
    3c94:	00138e11 	andseq	r8, r3, r1, lsl lr
    3c98:	000c2708 	andeq	r2, ip, r8, lsl #14
    3c9c:	00034200 	andeq	r4, r3, r0, lsl #4
    3ca0:	51011200 	mrspl	r1, R9_usr
    3ca4:	01123101 	tsteq	r2, r1, lsl #2
    3ca8:	43400350 	movtmi	r0, #848	; 0x350
    3cac:	9c130024 	ldcls	0, cr0, [r3], {36}	; 0x24
    3cb0:	27080013 	smladcs	r8, r3, r0, r0
    3cb4:	5c00000c 	stcpl	0, cr0, [r0], {12}
    3cb8:	12000003 	andne	r0, r0, #3
    3cbc:	30015101 	andcc	r5, r1, r1, lsl #2
    3cc0:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    3cc4:	00244340 	eoreq	r4, r4, r0, asr #6
    3cc8:	0013a611 	andseq	sl, r3, r1, lsl r6
    3ccc:	000c2708 	andeq	r2, ip, r8, lsl #14
    3cd0:	00037600 	andeq	r7, r3, r0, lsl #12
    3cd4:	51011200 	mrspl	r1, R9_usr
    3cd8:	01123101 	tsteq	r2, r1, lsl #2
    3cdc:	41400350 	cmpmi	r0, r0, asr r3
    3ce0:	b4130024 	ldrlt	r0, [r3], #-36	; 0x24
    3ce4:	27080013 	smladcs	r8, r3, r0, r0
    3ce8:	9000000c 	andls	r0, r0, ip
    3cec:	12000003 	andne	r0, r0, #3
    3cf0:	30015101 	andcc	r5, r1, r1, lsl #2
    3cf4:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    3cf8:	00244140 	eoreq	r4, r4, r0, asr #2
    3cfc:	0013be11 	andseq	fp, r3, r1, lsl lr
    3d00:	000c2708 	andeq	r2, ip, r8, lsl #14
    3d04:	0003aa00 	andeq	sl, r3, r0, lsl #20
    3d08:	51011200 	mrspl	r1, R9_usr
    3d0c:	01123101 	tsteq	r2, r1, lsl #2
    3d10:	42400350 	submi	r0, r0, #80, 6	; 0x40000001
    3d14:	cc140024 	ldcgt	0, cr0, [r4], {36}	; 0x24
    3d18:	27080013 	smladcs	r8, r3, r0, r0
    3d1c:	1200000c 	andne	r0, r0, #12
    3d20:	30015101 	andcc	r5, r1, r1, lsl #2
    3d24:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    3d28:	00244240 	eoreq	r4, r4, r0, asr #4
    3d2c:	58041500 	stmdapl	r4, {r8, sl, ip}
    3d30:	0f000002 	svceq	0x00000002
    3d34:	00001dcb 	andeq	r1, r0, fp, asr #27
    3d38:	13ccb401 	bicne	fp, ip, #16777216	; 0x1000000
    3d3c:	00e80800 	rsceq	r0, r8, r0, lsl #16
    3d40:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d44:	00000455 	andeq	r0, r0, r5, asr r4
    3d48:	001e1310 	andseq	r1, lr, r0, lsl r3
    3d4c:	c1b40100 			; <UNDEFINED> instruction: 0xc1b40100
    3d50:	f3000003 	vhadd.u8	d0, d0, d3
    3d54:	1000001a 	andne	r0, r0, sl, lsl r0
    3d58:	00001cf5 	strdeq	r1, [r0], -r5
    3d5c:	0455b401 	ldrbeq	fp, [r5], #-1025	; 0x401
    3d60:	1b110000 	blne	443d68 <_Min_Stack_Size+0x443968>
    3d64:	4c160000 	ldcmi	0, cr0, [r6], {-0}
    3d68:	01000011 	tsteq	r0, r1, lsl r0
    3d6c:	0000a2b6 			; <UNDEFINED> instruction: 0x0000a2b6
    3d70:	001b2f00 	andseq	r2, fp, r0, lsl #30
    3d74:	1d041600 	stcne	6, cr1, [r4, #-0]
    3d78:	b6010000 	strlt	r0, [r1], -r0
    3d7c:	000000a2 	andeq	r0, r0, r2, lsr #1
    3d80:	00001ba8 	andeq	r1, r0, r8, lsr #23
    3d84:	00209416 	eoreq	r9, r0, r6, lsl r4
    3d88:	a2b70100 	adcsge	r0, r7, #0, 2
    3d8c:	dd000000 	stcle	0, cr0, [r0, #-0]
    3d90:	1600001b 			; <UNDEFINED> instruction: 0x1600001b
    3d94:	00001ea0 	andeq	r1, r0, r0, lsr #29
    3d98:	00b8b801 	adcseq	fp, r8, r1, lsl #16
    3d9c:	1c130000 	ldcne	0, cr0, [r3], {-0}
    3da0:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
    3da4:	0100001f 	tsteq	r0, pc, lsl r0
    3da8:	00029db9 			; <UNDEFINED> instruction: 0x00029db9
    3dac:	58910200 	ldmpl	r1, {r9}
    3db0:	0013dc18 	andseq	sp, r3, r8, lsl ip
    3db4:	000c3e08 	andeq	r3, ip, r8, lsl #28
    3db8:	50011200 	andpl	r1, r1, r0, lsl #4
    3dbc:	00007d02 	andeq	r7, r0, r2, lsl #26
    3dc0:	f9041500 			; <UNDEFINED> instruction: 0xf9041500
    3dc4:	19000002 	stmdbne	r0, {r1}
    3dc8:	00001d44 	andeq	r1, r0, r4, asr #26
    3dcc:	b4012101 	strlt	r2, [r1], #-257	; 0x101
    3dd0:	22080014 	andcs	r0, r8, #20
    3dd4:	01000000 	mrseq	r0, (UNDEF: 0)
    3dd8:	0004809c 	muleq	r4, ip, r0
    3ddc:	1cf51a00 	vldmiane	r5!, {s3-s2}
    3de0:	21010000 	mrscs	r0, (UNDEF: 1)
    3de4:	00045501 	andeq	r5, r4, r1, lsl #10
    3de8:	00500100 	subseq	r0, r0, r0, lsl #2
    3dec:	001ea619 	andseq	sl, lr, r9, lsl r6
    3df0:	01390100 	teqeq	r9, r0, lsl #2
    3df4:	080014d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip}
    3df8:	0000001a 	andeq	r0, r0, sl, lsl r0
    3dfc:	04b39c01 	ldrteq	r9, [r3], #3073	; 0xc01
    3e00:	131a0000 	tstne	sl, #0
    3e04:	0100001e 	tsteq	r0, lr, lsl r0
    3e08:	03c10139 	biceq	r0, r1, #1073741838	; 0x4000000e
    3e0c:	50010000 	andpl	r0, r1, r0
    3e10:	000d711a 	andeq	r7, sp, sl, lsl r1
    3e14:	01390100 	teqeq	r9, r0, lsl #2
    3e18:	0000011d 	andeq	r0, r0, sp, lsl r1
    3e1c:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    3e20:	00002080 	andeq	r2, r0, r0, lsl #1
    3e24:	f4015601 	vst1.8	{d5-d7}, [r1], r1
    3e28:	1a080014 	bne	203e80 <_Min_Stack_Size+0x203a80>
    3e2c:	01000000 	mrseq	r0, (UNDEF: 0)
    3e30:	0004e69c 	muleq	r4, ip, r6
    3e34:	1e131a00 	vnmlsne.f32	s2, s6, s0
    3e38:	56010000 	strpl	r0, [r1], -r0
    3e3c:	0003c101 	andeq	ip, r3, r1, lsl #2
    3e40:	1a500100 	bne	1404248 <_Min_Stack_Size+0x1403e48>
    3e44:	00000d71 	andeq	r0, r0, r1, ror sp
    3e48:	1d015601 	stcne	6, cr5, [r1, #-4]
    3e4c:	01000001 	tsteq	r0, r1
    3e50:	95190051 	ldrls	r0, [r9, #-81]	; 0x51
    3e54:	0100001d 	tsteq	r0, sp, lsl r0
    3e58:	15100173 	ldrne	r0, [r0, #-371]	; 0x173
    3e5c:	00140800 	andseq	r0, r4, r0, lsl #16
    3e60:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e64:	0000052b 	andeq	r0, r0, fp, lsr #10
    3e68:	001e131a 	andseq	r1, lr, sl, lsl r3
    3e6c:	01730100 	cmneq	r3, r0, lsl #2
    3e70:	000003c1 	andeq	r0, r0, r1, asr #7
    3e74:	4d1b5001 	ldcmi	0, cr5, [fp, #-4]
    3e78:	01000020 	tsteq	r0, r0, lsr #32
    3e7c:	00a20173 	adceq	r0, r2, r3, ror r1
    3e80:	1c590000 	mrane	r0, r9, acc0
    3e84:	4c1c0000 	ldcmi	0, cr0, [ip], {-0}
    3e88:	01000011 	tsteq	r0, r1, lsl r0
    3e8c:	00a20175 	adceq	r0, r2, r5, ror r1
    3e90:	1c7a0000 	ldclne	0, cr0, [sl], #-0
    3e94:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3e98:	00001c77 	andeq	r1, r0, r7, ror ip
    3e9c:	24018f01 	strcs	r8, [r1], #-3841	; 0xf01
    3ea0:	1a080015 	bne	203efc <_Min_Stack_Size+0x203afc>
    3ea4:	01000000 	mrseq	r0, (UNDEF: 0)
    3ea8:	00055e9c 	muleq	r5, ip, lr
    3eac:	1e131a00 	vnmlsne.f32	s2, s6, s0
    3eb0:	8f010000 	svchi	0x00010000
    3eb4:	0003c101 	andeq	ip, r3, r1, lsl #2
    3eb8:	1a500100 	bne	14042c0 <_Min_Stack_Size+0x1403ec0>
    3ebc:	00000d71 	andeq	r0, r0, r1, ror sp
    3ec0:	1d018f01 	stcne	15, cr8, [r1, #-4]
    3ec4:	01000001 	tsteq	r0, r1
    3ec8:	5f190051 	svcpl	0x00190051
    3ecc:	01000020 	tsteq	r0, r0, lsr #32
    3ed0:	154001a7 	strbne	r0, [r0, #-423]	; 0x1a7
    3ed4:	001a0800 	andseq	r0, sl, r0, lsl #16
    3ed8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3edc:	00000591 	muleq	r0, r1, r5
    3ee0:	001e131a 	andseq	r1, lr, sl, lsl r3
    3ee4:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    3ee8:	000003c1 	andeq	r0, r0, r1, asr #7
    3eec:	711a5001 	tstvc	sl, r1
    3ef0:	0100000d 	tsteq	r0, sp
    3ef4:	011d01a7 	tsteq	sp, r7, lsr #3
    3ef8:	51010000 	mrspl	r0, (UNDEF: 1)
    3efc:	202b1900 	eorcs	r1, fp, r0, lsl #18
    3f00:	c3010000 	movwgt	r0, #4096	; 0x1000
    3f04:	00155c01 	andseq	r5, r5, r1, lsl #24
    3f08:	00001208 	andeq	r1, r0, r8, lsl #4
    3f0c:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    3f10:	1a000005 	bne	3f2c <_Min_Stack_Size+0x3b2c>
    3f14:	00001e13 	andeq	r1, r0, r3, lsl lr
    3f18:	c101c301 	tstgt	r1, r1, lsl #6
    3f1c:	01000003 	tsteq	r0, r3
    3f20:	19a31b50 	stmibne	r3!, {r4, r6, r8, r9, fp, ip}
    3f24:	c3010000 	movwgt	r0, #4096	; 0x1000
    3f28:	00009701 	andeq	r9, r0, r1, lsl #14
    3f2c:	001ca900 	andseq	sl, ip, r0, lsl #18
    3f30:	1e181a00 	vnmlsne.f32	s2, s16, s0
    3f34:	c3010000 	movwgt	r0, #4096	; 0x1000
    3f38:	00009701 	andeq	r9, r0, r1, lsl #14
    3f3c:	00520100 	subseq	r0, r2, r0, lsl #2
    3f40:	001fd419 	andseq	sp, pc, r9, lsl r4	; <UNPREDICTABLE>
    3f44:	01de0100 	bicseq	r0, lr, r0, lsl #2
    3f48:	08001570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip}
    3f4c:	0000001a 	andeq	r0, r0, sl, lsl r0
    3f50:	06079c01 	streq	r9, [r7], -r1, lsl #24
    3f54:	131a0000 	tstne	sl, #0
    3f58:	0100001e 	tsteq	r0, lr, lsl r0
    3f5c:	03c101de 	biceq	r0, r1, #-2147483593	; 0x80000037
    3f60:	50010000 	andpl	r0, r1, r0
    3f64:	000d711a 	andeq	r7, sp, sl, lsl r1
    3f68:	01de0100 	bicseq	r0, lr, r0, lsl #2
    3f6c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3f70:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    3f74:	00001cdf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    3f78:	8c01f501 	cfstr32hi	mvfx15, [r1], {1}
    3f7c:	14080015 	strne	r0, [r8], #-21
    3f80:	01000000 	mrseq	r0, (UNDEF: 0)
    3f84:	00064c9c 	muleq	r6, ip, ip
    3f88:	1e131a00 	vnmlsne.f32	s2, s6, s0
    3f8c:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    3f90:	0003c101 	andeq	ip, r3, r1, lsl #2
    3f94:	1b500100 	blne	140439c <_Min_Stack_Size+0x1403f9c>
    3f98:	000019a3 	andeq	r1, r0, r3, lsr #19
    3f9c:	9701f501 	strls	pc, [r1, -r1, lsl #10]
    3fa0:	c7000000 	strgt	r0, [r0, -r0]
    3fa4:	1c00001c 	stcne	0, cr0, [r0], {28}
    3fa8:	0000114c 	andeq	r1, r0, ip, asr #2
    3fac:	a201f701 	andge	pc, r1, #262144	; 0x40000
    3fb0:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    3fb4:	0000001c 	andeq	r0, r0, ip, lsl r0
    3fb8:	001fa819 	andseq	sl, pc, r9, lsl r8	; <UNPREDICTABLE>
    3fbc:	02100100 	andseq	r0, r0, #0, 2
    3fc0:	080015a0 	stmdaeq	r0, {r5, r7, r8, sl, ip}
    3fc4:	0000001a 	andeq	r0, r0, sl, lsl r0
    3fc8:	067f9c01 	ldrbteq	r9, [pc], -r1, lsl #24
    3fcc:	131a0000 	tstne	sl, #0
    3fd0:	0100001e 	tsteq	r0, lr, lsl r0
    3fd4:	03c10210 	biceq	r0, r1, #16, 4
    3fd8:	50010000 	andpl	r0, r1, r0
    3fdc:	000d711a 	andeq	r7, sp, sl, lsl r1
    3fe0:	02100100 	andseq	r0, r0, #0, 2
    3fe4:	0000011d 	andeq	r0, r0, sp, lsl r1
    3fe8:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    3fec:	00001e5c 	andeq	r1, r0, ip, asr lr
    3ff0:	bc022801 	stclt	8, cr2, [r2], {1}
    3ff4:	1a080015 	bne	204050 <_Min_Stack_Size+0x203c50>
    3ff8:	01000000 	mrseq	r0, (UNDEF: 0)
    3ffc:	0006b29c 	muleq	r6, ip, r2
    4000:	1e131a00 	vnmlsne.f32	s2, s6, s0
    4004:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    4008:	0003c102 	andeq	ip, r3, r2, lsl #2
    400c:	1a500100 	bne	1404414 <_Min_Stack_Size+0x1404014>
    4010:	00000d71 	andeq	r0, r0, r1, ror sp
    4014:	1d022801 	stcne	8, cr2, [r2, #-4]
    4018:	01000001 	tsteq	r0, r1
    401c:	16190051 			; <UNDEFINED> instruction: 0x16190051
    4020:	01000020 	tsteq	r0, r0, lsr #32
    4024:	15d80242 	ldrbne	r0, [r8, #578]	; 0x242
    4028:	001a0800 	andseq	r0, sl, r0, lsl #16
    402c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4030:	000006e5 	andeq	r0, r0, r5, ror #13
    4034:	001e131a 	andseq	r1, lr, sl, lsl r3
    4038:	02420100 	subeq	r0, r2, #0, 2
    403c:	000003c1 	andeq	r0, r0, r1, asr #7
    4040:	711a5001 	tstvc	sl, r1
    4044:	0100000d 	tsteq	r0, sp
    4048:	011d0242 	tsteq	sp, r2, asr #4
    404c:	51010000 	mrspl	r0, (UNDEF: 1)
    4050:	1c941900 	ldcne	9, cr1, [r4], {0}
    4054:	5a010000 	bpl	4405c <_Min_Stack_Size+0x43c5c>
    4058:	0015f402 	andseq	pc, r5, r2, lsl #8
    405c:	00001a08 	andeq	r1, r0, r8, lsl #20
    4060:	189c0100 	ldmne	ip, {r8}
    4064:	1a000007 	bne	4088 <_Min_Stack_Size+0x3c88>
    4068:	00001e13 	andeq	r1, r0, r3, lsl lr
    406c:	c1025a01 	tstgt	r2, r1, lsl #20
    4070:	01000003 	tsteq	r0, r3
    4074:	0d711a50 	vldmdbeq	r1!, {s3-s82}
    4078:	5a010000 	bpl	44080 <_Min_Stack_Size+0x43c80>
    407c:	00011d02 	andeq	r1, r1, r2, lsl #26
    4080:	00510100 	subseq	r0, r1, r0, lsl #2
    4084:	001f8c19 	andseq	r8, pc, r9, lsl ip	; <UNPREDICTABLE>
    4088:	02740100 	rsbseq	r0, r4, #0, 2
    408c:	08001610 	stmdaeq	r0, {r4, r9, sl, ip}
    4090:	0000001c 	andeq	r0, r0, ip, lsl r0
    4094:	074b9c01 	strbeq	r9, [fp, -r1, lsl #24]
    4098:	131a0000 	tstne	sl, #0
    409c:	0100001e 	tsteq	r0, lr, lsl r0
    40a0:	03c10274 	biceq	r0, r1, #116, 4	; 0x40000007
    40a4:	50010000 	andpl	r0, r1, r0
    40a8:	001ddf1a 	andseq	sp, sp, sl, lsl pc
    40ac:	02740100 	rsbseq	r0, r4, #0, 2
    40b0:	000000a2 	andeq	r0, r0, r2, lsr #1
    40b4:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    40b8:	00001cc8 	andeq	r1, r0, r8, asr #25
    40bc:	2c029a01 	stccs	10, cr9, [r2], {1}
    40c0:	1c080016 	stcne	0, cr0, [r8], {22}
    40c4:	01000000 	mrseq	r0, (UNDEF: 0)
    40c8:	00077e9c 	muleq	r7, ip, lr
    40cc:	1e131a00 	vnmlsne.f32	s2, s6, s0
    40d0:	9a010000 	bls	440d8 <_Min_Stack_Size+0x43cd8>
    40d4:	0003c102 	andeq	ip, r3, r2, lsl #2
    40d8:	1a500100 	bne	14044e0 <_Min_Stack_Size+0x14040e0>
    40dc:	00001e26 	andeq	r1, r0, r6, lsr #28
    40e0:	a2029a01 	andge	r9, r2, #4096	; 0x1000
    40e4:	01000000 	mrseq	r0, (UNDEF: 0)
    40e8:	74190051 	ldrvc	r0, [r9], #-81	; 0x51
    40ec:	0100001d 	tsteq	r0, sp, lsl r0
    40f0:	164802b6 			; <UNDEFINED> instruction: 0x164802b6
    40f4:	001c0800 	andseq	r0, ip, r0, lsl #16
    40f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    40fc:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
    4100:	001e131a 	andseq	r1, lr, sl, lsl r3
    4104:	02b60100 	adcseq	r0, r6, #0, 2
    4108:	000003c1 	andeq	r0, r0, r1, asr #7
    410c:	041a5001 	ldreq	r5, [sl], #-1
    4110:	0100001e 	tsteq	r0, lr, lsl r0
    4114:	00a202b6 	strhteq	r0, [r2], r6
    4118:	51010000 	mrspl	r0, (UNDEF: 1)
    411c:	1dd41900 	ldclne	9, cr1, [r4]
    4120:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    4124:	00166402 	andseq	r6, r6, r2, lsl #8
    4128:	00001a08 	andeq	r1, r0, r8, lsl #20
    412c:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    4130:	1a000007 	bne	4154 <_Min_Stack_Size+0x3d54>
    4134:	00001e13 	andeq	r1, r0, r3, lsl lr
    4138:	c102ce01 	tstgt	r2, r1, lsl #28
    413c:	01000003 	tsteq	r0, r3
    4140:	0d711a50 	vldmdbeq	r1!, {s3-s82}
    4144:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    4148:	00011d02 	andeq	r1, r1, r2, lsl #26
    414c:	00510100 	subseq	r0, r1, r0, lsl #2
    4150:	001d0e19 	andseq	r0, sp, r9, lsl lr
    4154:	02f40100 	rscseq	r0, r4, #0, 2
    4158:	08001680 	stmdaeq	r0, {r7, r9, sl, ip}
    415c:	00000004 	andeq	r0, r0, r4
    4160:	08179c01 	ldmdaeq	r7, {r0, sl, fp, ip, pc}
    4164:	131a0000 	tstne	sl, #0
    4168:	0100001e 	tsteq	r0, lr, lsl r0
    416c:	03c102f4 	biceq	r0, r1, #244, 4	; 0x4000000f
    4170:	50010000 	andpl	r0, r1, r0
    4174:	001d161a 	andseq	r1, sp, sl, lsl r6
    4178:	02f40100 	rscseq	r0, r4, #0, 2
    417c:	00000097 	muleq	r0, r7, r0
    4180:	1d005101 	stfnes	f5, [r0, #-4]
    4184:	00001f45 	andeq	r1, r0, r5, asr #30
    4188:	97030101 	strls	r0, [r3, -r1, lsl #2]
    418c:	84000000 	strhi	r0, [r0], #-0
    4190:	06080016 			; <UNDEFINED> instruction: 0x06080016
    4194:	01000000 	mrseq	r0, (UNDEF: 0)
    4198:	0008429c 	muleq	r8, ip, r2
    419c:	1e131b00 	vnmlsne.f64	d1, d3, d0
    41a0:	01010000 	mrseq	r0, (UNDEF: 1)
    41a4:	0003c103 	andeq	ip, r3, r3, lsl #2
    41a8:	001d1800 	andseq	r1, sp, r0, lsl #16
    41ac:	f4190000 			; <UNDEFINED> instruction: 0xf4190000
    41b0:	0100001d 	tsteq	r0, sp, lsl r0
    41b4:	168c0320 	strne	r0, [ip], r0, lsr #6
    41b8:	001a0800 	andseq	r0, sl, r0, lsl #16
    41bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    41c0:	00000875 	andeq	r0, r0, r5, ror r8
    41c4:	001e131a 	andseq	r1, lr, sl, lsl r3
    41c8:	03200100 	teqeq	r0, #0, 2
    41cc:	000003c1 	andeq	r0, r0, r1, asr #7
    41d0:	711a5001 	tstvc	sl, r1
    41d4:	0100000d 	tsteq	r0, sp
    41d8:	011d0320 	tsteq	sp, r0, lsr #6
    41dc:	51010000 	mrspl	r0, (UNDEF: 1)
    41e0:	1dad1900 	stcne	9, cr1, [sp]
    41e4:	3f010000 	svccc	0x00010000
    41e8:	0016a803 	andseq	sl, r6, r3, lsl #16
    41ec:	00001c08 	andeq	r1, r0, r8, lsl #24
    41f0:	a89c0100 	ldmge	ip, {r8}
    41f4:	1a000008 	bne	421c <_Min_Stack_Size+0x3e1c>
    41f8:	00001e13 	andeq	r1, r0, r3, lsl lr
    41fc:	c1033f01 	tstgt	r3, r1, lsl #30
    4200:	01000003 	tsteq	r0, r3
    4204:	1fea1a50 	svcne	0x00ea1a50
    4208:	3f010000 	svccc	0x00010000
    420c:	0000a203 	andeq	sl, r0, r3, lsl #4
    4210:	00510100 	subseq	r0, r1, r0, lsl #2
    4214:	001d1b19 	andseq	r1, sp, r9, lsl fp
    4218:	03570100 	cmpeq	r7, #0, 2
    421c:	080016c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip}
    4220:	0000001a 	andeq	r0, r0, sl, lsl r0
    4224:	08db9c01 	ldmeq	fp, {r0, sl, fp, ip, pc}^
    4228:	131a0000 	tstne	sl, #0
    422c:	0100001e 	tsteq	r0, lr, lsl r0
    4230:	03c10357 	biceq	r0, r1, #1543503873	; 0x5c000001
    4234:	50010000 	andpl	r0, r1, r0
    4238:	000d711a 	andeq	r7, sp, sl, lsl r1
    423c:	03570100 	cmpeq	r7, #0, 2
    4240:	0000011d 	andeq	r0, r0, sp, lsl r1
    4244:	1d005101 	stfnes	f5, [r0, #-4]
    4248:	00001c89 	andeq	r1, r0, r9, lsl #25
    424c:	97036d01 	strls	r6, [r3, -r1, lsl #26]
    4250:	e0000000 	and	r0, r0, r0
    4254:	08080016 	stmdaeq	r8, {r1, r2, r4}
    4258:	01000000 	mrseq	r0, (UNDEF: 0)
    425c:	0009069c 	muleq	r9, ip, r6
    4260:	1e131b00 	vnmlsne.f64	d1, d3, d0
    4264:	6d010000 	stcvs	0, cr0, [r1, #-0]
    4268:	0003c103 	andeq	ip, r3, r3, lsl #2
    426c:	001d3900 	andseq	r3, sp, r0, lsl #18
    4270:	7e190000 	cdpvc	0, 1, cr0, cr9, cr0, {0}
    4274:	0100001e 	tsteq	r0, lr, lsl r0
    4278:	16e8038e 	strbtne	r0, [r8], lr, lsl #7
    427c:	001a0800 	andseq	r0, sl, r0, lsl #16
    4280:	9c010000 	stcls	0, cr0, [r1], {-0}
    4284:	00000939 	andeq	r0, r0, r9, lsr r9
    4288:	001e131a 	andseq	r1, lr, sl, lsl r3
    428c:	038e0100 	orreq	r0, lr, #0, 2
    4290:	000003c1 	andeq	r0, r0, r1, asr #7
    4294:	711a5001 	tstvc	sl, r1
    4298:	0100000d 	tsteq	r0, sp
    429c:	011d038e 	tsteq	sp, lr, lsl #7
    42a0:	51010000 	mrspl	r0, (UNDEF: 1)
    42a4:	1d5d1900 	ldclne	9, cr1, [sp, #-0]
    42a8:	a6010000 	strge	r0, [r1], -r0
    42ac:	00170403 	andseq	r0, r7, r3, lsl #8
    42b0:	00001a08 	andeq	r1, r0, r8, lsl #20
    42b4:	6c9c0100 	ldfvss	f0, [ip], {0}
    42b8:	1a000009 	bne	42e4 <_Min_Stack_Size+0x3ee4>
    42bc:	00001e13 	andeq	r1, r0, r3, lsl lr
    42c0:	c103a601 	tstgt	r3, r1, lsl #12
    42c4:	01000003 	tsteq	r0, r3
    42c8:	0d711a50 	vldmdbeq	r1!, {s3-s82}
    42cc:	a6010000 	strge	r0, [r1], -r0
    42d0:	00011d03 	andeq	r1, r1, r3, lsl #26
    42d4:	00510100 	subseq	r0, r1, r0, lsl #2
    42d8:	001f7b1d 	andseq	r7, pc, sp, lsl fp	; <UNPREDICTABLE>
    42dc:	04300100 	ldrteq	r0, [r0], #-256	; 0x100
    42e0:	000000a2 	andeq	r0, r0, r2, lsr #1
    42e4:	08001720 	stmdaeq	r0, {r5, r8, r9, sl, ip}
    42e8:	00000018 	andeq	r0, r0, r8, lsl r0
    42ec:	09b69c01 	ldmibeq	r6!, {r0, sl, fp, ip, pc}
    42f0:	131b0000 	tstne	fp, #0
    42f4:	0100001e 	tsteq	r0, lr, lsl r0
    42f8:	03c10430 	biceq	r0, r1, #48, 8	; 0x30000000
    42fc:	1d5a0000 	ldclne	0, cr0, [sl, #-0]
    4300:	a81b0000 	ldmdage	fp, {}	; <UNPREDICTABLE>
    4304:	0100001c 	tsteq	r0, ip, lsl r0
    4308:	00970430 	addseq	r0, r7, r0, lsr r4
    430c:	1d7b0000 	ldclne	0, cr0, [fp, #-0]
    4310:	741e0000 	ldrvc	r0, [lr], #-0
    4314:	0100706d 	tsteq	r0, sp, rrx
    4318:	00ca0432 	sbceq	r0, sl, r2, lsr r4
    431c:	91020000 	mrsls	r0, (UNDEF: 2)
    4320:	bb19007c 	bllt	644518 <_Min_Stack_Size+0x644118>
    4324:	0100001c 	tsteq	r0, ip, lsl r0
    4328:	1738044b 	ldrne	r0, [r8, -fp, asr #8]!
    432c:	00140800 	andseq	r0, r4, r0, lsl #16
    4330:	9c010000 	stcls	0, cr0, [r1], {-0}
    4334:	000009f9 	strdeq	r0, [r0], -r9
    4338:	001e131a 	andseq	r1, lr, sl, lsl r3
    433c:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    4340:	000003c1 	andeq	r0, r0, r1, asr #7
    4344:	991b5001 	ldmdbls	fp, {r0, ip, lr}
    4348:	0100001e 	tsteq	r0, lr, lsl r0
    434c:	00a2044b 	adceq	r0, r2, fp, asr #8
    4350:	1d9c0000 	ldcne	0, cr0, [ip]
    4354:	711a0000 	tstvc	sl, r0
    4358:	0100000d 	tsteq	r0, sp
    435c:	011d044b 	tsteq	sp, fp, asr #8
    4360:	52010000 	andpl	r0, r1, #0
    4364:	1e6f1d00 	cdpne	13, 6, cr1, cr15, cr0, {0}
    4368:	86010000 	strhi	r0, [r1], -r0
    436c:	00013f04 	andeq	r3, r1, r4, lsl #30
    4370:	00174c00 	andseq	r4, r7, r0, lsl #24
    4374:	00001808 	andeq	r1, r0, r8, lsl #16
    4378:	729c0100 	addsvc	r0, ip, #0, 2
    437c:	1b00000a 	blne	43ac <_Min_Stack_Size+0x3fac>
    4380:	00001e13 	andeq	r1, r0, r3, lsl lr
    4384:	c1048601 	tstgt	r4, r1, lsl #12
    4388:	d6000003 	strle	r0, [r0], -r3
    438c:	1a00001d 	bne	4408 <_Min_Stack_Size+0x4008>
    4390:	00001f3b 	andeq	r1, r0, fp, lsr pc
    4394:	b8048601 	stmdalt	r4, {r0, r9, sl, pc}
    4398:	01000000 	mrseq	r0, (UNDEF: 0)
    439c:	200c1c51 	andcs	r1, ip, r1, asr ip
    43a0:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    43a4:	0000b804 	andeq	fp, r0, r4, lsl #16
    43a8:	001df700 	andseq	pc, sp, r0, lsl #14
    43ac:	1fbb1c00 	svcne	0x00bb1c00
    43b0:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    43b4:	0000b804 	andeq	fp, r0, r4, lsl #16
    43b8:	001e4b00 	andseq	r4, lr, r0, lsl #22
    43bc:	1fc11c00 	svcne	0x00c11c00
    43c0:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    43c4:	0000b804 	andeq	fp, r0, r4, lsl #16
    43c8:	001e8100 	andseq	r8, lr, r0, lsl #2
    43cc:	1fcd1c00 	svcne	0x00cd1c00
    43d0:	8a010000 	bhi	443d8 <_Min_Stack_Size+0x43fd8>
    43d4:	00013f04 	andeq	r3, r1, r4, lsl #30
    43d8:	001ea800 	andseq	sl, lr, r0, lsl #16
    43dc:	371d0000 	ldrcc	r0, [sp, -r0]
    43e0:	0100001e 	tsteq	r0, lr, lsl r0
    43e4:	00b804b6 	ldrhteq	r0, [r8], r6
    43e8:	17640000 	strbne	r0, [r4, -r0]!
    43ec:	00100800 	andseq	r0, r0, r0, lsl #16
    43f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    43f4:	00000acd 	andeq	r0, r0, sp, asr #21
    43f8:	001e131b 	andseq	r1, lr, fp, lsl r3
    43fc:	04b60100 	ldrteq	r0, [r6], #256	; 0x100
    4400:	000003c1 	andeq	r0, r0, r1, asr #7
    4404:	00001f08 	andeq	r1, r0, r8, lsl #30
    4408:	00200c1c 	eoreq	r0, r0, ip, lsl ip
    440c:	04b80100 	ldrteq	r0, [r8], #256	; 0x100
    4410:	000000b8 	strheq	r0, [r0], -r8
    4414:	00001f29 	andeq	r1, r0, r9, lsr #30
    4418:	001fbb1c 	andseq	fp, pc, ip, lsl fp	; <UNPREDICTABLE>
    441c:	04b90100 	ldrteq	r0, [r9], #256	; 0x100
    4420:	000000b8 	strheq	r0, [r0], -r8
    4424:	00001f7d 	andeq	r1, r0, sp, ror pc
    4428:	001fc11c 	andseq	ip, pc, ip, lsl r1	; <UNPREDICTABLE>
    442c:	04b90100 	ldrteq	r0, [r9], #256	; 0x100
    4430:	000000b8 	strheq	r0, [r0], -r8
    4434:	00001fb3 			; <UNDEFINED> instruction: 0x00001fb3
    4438:	1ffa1d00 	svcne	0x00fa1d00
    443c:	ed010000 	stc	0, cr0, [r1, #-0]
    4440:	0000ef04 	andeq	lr, r0, r4, lsl #30
    4444:	00177400 	andseq	r7, r7, r0, lsl #8
    4448:	00003608 	andeq	r3, r0, r8, lsl #12
    444c:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    4450:	1b00000b 	blne	4484 <_Min_Stack_Size+0x4084>
    4454:	00001e13 	andeq	r1, r0, r3, lsl lr
    4458:	c104ed01 	tstgt	r4, r1, lsl #26
    445c:	da000003 	ble	4470 <_Min_Stack_Size+0x4070>
    4460:	1b00001f 	blne	44e4 <_Min_Stack_Size+0x40e4>
    4464:	00001e48 	andeq	r1, r0, r8, asr #28
    4468:	b804ed01 	stmdalt	r4, {r0, r8, sl, fp, sp, lr, pc}
    446c:	06000000 	streq	r0, [r0], -r0
    4470:	1c000020 	stcne	0, cr0, [r0], {32}
    4474:	00000f71 	andeq	r0, r0, r1, ror pc
    4478:	ef04ef01 	svc	0x0004ef01
    447c:	24000000 	strcs	r0, [r0], #-0
    4480:	1f000020 	svcne	0x00000020
    4484:	00001ded 	andeq	r1, r0, sp, ror #27
    4488:	ca04f001 	bgt	140494 <_Min_Stack_Size+0x140094>
    448c:	02000000 	andeq	r0, r0, #0
    4490:	3f1f7891 	svccc	0x001f7891
    4494:	01000020 	tsteq	r0, r0, lsr #32
    4498:	00ca04f0 	strdeq	r0, [sl], #64	; 0x40
    449c:	91020000 	mrsls	r0, (UNDEF: 2)
    44a0:	5519007c 	ldrpl	r0, [r9, #-124]	; 0x7c
    44a4:	0100001f 	tsteq	r0, pc, lsl r0
    44a8:	17ac053a 			; <UNDEFINED> instruction: 0x17ac053a
    44ac:	00080800 	andeq	r0, r8, r0, lsl #16
    44b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    44b4:	00000b7b 	andeq	r0, r0, fp, ror fp
    44b8:	001e131a 	andseq	r1, lr, sl, lsl r3
    44bc:	053a0100 	ldreq	r0, [sl, #-256]!	; 0x100
    44c0:	000003c1 	andeq	r0, r0, r1, asr #7
    44c4:	481b5001 	ldmdami	fp, {r0, ip, lr}
    44c8:	0100001e 	tsteq	r0, lr, lsl r0
    44cc:	00b8053a 	adcseq	r0, r8, sl, lsr r5
    44d0:	20560000 	subscs	r0, r6, r0
    44d4:	c31c0000 	tstgt	ip, #0
    44d8:	0100001d 	tsteq	r0, sp, lsl r0
    44dc:	00b8053c 	adcseq	r0, r8, ip, lsr r5
    44e0:	20850000 	addcs	r0, r5, r0
    44e4:	1d000000 	stcne	0, cr0, [r0, #-0]
    44e8:	00002070 	andeq	r2, r0, r0, ror r0
    44ec:	fb055c01 	blx	15b4fa <_Min_Stack_Size+0x15b0fa>
    44f0:	b4000000 	strlt	r0, [r0], #-0
    44f4:	1c080017 	stcne	0, cr0, [r8], {23}
    44f8:	01000000 	mrseq	r0, (UNDEF: 0)
    44fc:	000bd69c 	muleq	fp, ip, r6
    4500:	1e131b00 	vnmlsne.f64	d1, d3, d0
    4504:	5c010000 	stcpl	0, cr0, [r1], {-0}
    4508:	0003c105 	andeq	ip, r3, r5, lsl #2
    450c:	0020c800 	eoreq	ip, r0, r0, lsl #16
    4510:	1e991b00 	vfnmsne.f64	d1, d9, d0
    4514:	5c010000 	stcpl	0, cr0, [r1], {-0}
    4518:	0000b805 	andeq	fp, r0, r5, lsl #16
    451c:	0020e900 	eoreq	lr, r0, r0, lsl #18
    4520:	0f711c00 	svceq	0x00711c00
    4524:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    4528:	0000fb05 	andeq	pc, r0, r5, lsl #22
    452c:	00212300 	eoreq	r2, r1, r0, lsl #6
    4530:	1fc71c00 	svcne	0x00c71c00
    4534:	5f010000 	svcpl	0x00010000
    4538:	0000b805 	andeq	fp, r0, r5, lsl #16
    453c:	00214200 	eoreq	r4, r1, r0, lsl #4
    4540:	61190000 	tstvs	r9, r0
    4544:	0100001c 	tsteq	r0, ip, lsl r0
    4548:	17d00598 	bfine	r0, r8, #11, #6
    454c:	00080800 	andeq	r0, r8, r0, lsl #16
    4550:	9c010000 	stcls	0, cr0, [r1], {-0}
    4554:	00000c1b 	andeq	r0, r0, fp, lsl ip
    4558:	001e131a 	andseq	r1, lr, sl, lsl r3
    455c:	05980100 	ldreq	r0, [r8, #256]	; 0x100
    4560:	000003c1 	andeq	r0, r0, r1, asr #7
    4564:	991b5001 	ldmdbls	fp, {r0, ip, lr}
    4568:	0100001e 	tsteq	r0, lr, lsl r0
    456c:	00b80598 	umlalseq	r0, r8, r8, r5
    4570:	21a10000 			; <UNDEFINED> instruction: 0x21a10000
    4574:	c31c0000 	tstgt	ip, #0
    4578:	0100001d 	tsteq	r0, sp, lsl r0
    457c:	00b8059a 	umlalseq	r0, r8, sl, r5
    4580:	21d00000 	bicscs	r0, r0, r0
    4584:	20000000 	andcs	r0, r0, r0
    4588:	000003a0 	andeq	r0, r0, r0, lsr #7
    458c:	d406a707 	strle	sl, [r6], #-1799	; 0x707
    4590:	21000000 	mrscs	r0, (UNDEF: 0)
    4594:	000010a5 	andeq	r1, r0, r5, lsr #1
    4598:	3e024905 	cdpcc	9, 0, cr4, cr2, cr5, {0}
    459c:	2200000c 	andcs	r0, r0, #12
    45a0:	000000b8 	strheq	r0, [r0], -r8
    45a4:	00011d22 	andeq	r1, r1, r2, lsr #26
    45a8:	22210000 	eorcs	r0, r1, #0
    45ac:	05000015 	streq	r0, [r0, #-21]
    45b0:	0c500232 	lfmeq	f0, 2, [r0], {50}	; 0x32
    45b4:	50220000 	eorpl	r0, r2, r0
    45b8:	0000000c 	andeq	r0, r0, ip
    45bc:	029d0415 	addseq	r0, sp, #352321536	; 0x15000000
    45c0:	3b000000 	blcc	45c8 <_Min_Stack_Size+0x41c8>
    45c4:	04000007 	streq	r0, [r0], #-7
    45c8:	000e2900 	andeq	r2, lr, r0, lsl #18
    45cc:	87010400 	strhi	r0, [r1, -r0, lsl #8]
    45d0:	01000002 	tsteq	r0, r2
    45d4:	00002395 	muleq	r0, r5, r3
    45d8:	000000ab 	andeq	r0, r0, fp, lsr #1
    45dc:	00000538 	andeq	r0, r0, r8, lsr r5
    45e0:	00000000 	andeq	r0, r0, r0
    45e4:	00001ba2 	andeq	r1, r0, r2, lsr #23
    45e8:	53060102 	movwpl	r0, #24834	; 0x6102
    45ec:	02000001 	andeq	r0, r0, #1
    45f0:	01510801 	cmpeq	r1, r1, lsl #16
    45f4:	02020000 	andeq	r0, r2, #0
    45f8:	00010605 	andeq	r0, r1, r5, lsl #12
    45fc:	005c0300 	subseq	r0, ip, r0, lsl #6
    4600:	26020000 	strcs	r0, [r2], -r0
    4604:	00000045 	andeq	r0, r0, r5, asr #32
    4608:	e8070202 	stmda	r7, {r1, r9}
    460c:	03000001 	movweq	r0, #1
    4610:	0000037a 	andeq	r0, r0, sl, ror r3
    4614:	00573702 	subseq	r3, r7, r2, lsl #14
    4618:	04020000 	streq	r0, [r2], #-0
    461c:	0000ec05 	andeq	lr, r0, r5, lsl #24
    4620:	00510300 	subseq	r0, r1, r0, lsl #6
    4624:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    4628:	00000069 	andeq	r0, r0, r9, rrx
    462c:	7b070402 	blvc	1c563c <_Min_Stack_Size+0x1c523c>
    4630:	02000001 	andeq	r0, r0, #1
    4634:	00e70508 	rsceq	r0, r7, r8, lsl #10
    4638:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    463c:	00017607 	andeq	r7, r1, r7, lsl #12
    4640:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    4644:	00746e69 	rsbseq	r6, r4, r9, ror #28
    4648:	80070402 	andhi	r0, r7, r2, lsl #8
    464c:	03000001 	movweq	r0, #1
    4650:	0000005e 	andeq	r0, r0, lr, asr r0
    4654:	003a3603 	eorseq	r3, sl, r3, lsl #12
    4658:	7c030000 	stcvc	0, cr0, [r3], {-0}
    465c:	03000003 	movweq	r0, #3
    4660:	00004c41 	andeq	r4, r0, r1, asr #24
    4664:	00530300 	subseq	r0, r3, r0, lsl #6
    4668:	42030000 	andmi	r0, r3, #0
    466c:	0000005e 	andeq	r0, r0, lr, asr r0
    4670:	2c070402 	cfstrscs	mvf0, [r7], {2}
    4674:	05000000 	streq	r0, [r0, #-0]
    4678:	000000a2 	andeq	r0, r0, r2, lsr #1
    467c:	00009705 	andeq	r9, r0, r5, lsl #14
    4680:	04010600 	streq	r0, [r1], #-1536	; 0x600
    4684:	00d401f7 	ldrsheq	r0, [r4], #23
    4688:	d2070000 	andle	r0, r7, #0
    468c:	0000000e 	andeq	r0, r0, lr
    4690:	54455308 	strbpl	r5, [r5], #-776	; 0x308
    4694:	09000100 	stmdbeq	r0, {r8}
    4698:	00002317 	andeq	r2, r0, r7, lsl r3
    469c:	be01f704 	cdplt	7, 0, cr15, cr1, cr4, {0}
    46a0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    46a4:	0000228e 	andeq	r2, r0, lr, lsl #5
    46a8:	be01f704 	cdplt	7, 0, cr15, cr1, cr4, {0}
    46ac:	06000000 	streq	r0, [r0], -r0
    46b0:	01f90401 	mvnseq	r0, r1, lsl #8
    46b4:	00000102 	andeq	r0, r0, r2, lsl #2
    46b8:	00048b07 	andeq	r8, r4, r7, lsl #22
    46bc:	c3070000 	movwgt	r0, #28672	; 0x7000
    46c0:	01000005 	tsteq	r0, r5
    46c4:	092d0900 	pusheq	{r8, fp}
    46c8:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    46cc:	0000ec01 	andeq	lr, r0, r1, lsl #24
    46d0:	04180a00 	ldreq	r0, [r8], #-2560	; 0xa00
    46d4:	016502b1 	strheq	r0, [r5, #-33]!	; 0xffffffdf
    46d8:	430b0000 	movwmi	r0, #45056	; 0xb000
    46dc:	b3040052 	movwlt	r0, #16466	; 0x4052
    46e0:	0000b402 	andeq	fp, r0, r2, lsl #8
    46e4:	2d0c0000 	stccs	0, cr0, [ip, #-0]
    46e8:	04000023 	streq	r0, [r0], #-35	; 0x23
    46ec:	00b402b4 	ldrhteq	r0, [r4], r4
    46f0:	0b040000 	bleq	1046f8 <_Min_Stack_Size+0x1042f8>
    46f4:	00524150 	subseq	r4, r2, r0, asr r1
    46f8:	b402b504 	strlt	fp, [r2], #-1284	; 0x504
    46fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4700:	0023280c 	eoreq	r2, r3, ip, lsl #16
    4704:	02b60400 	adcseq	r0, r6, #0, 8
    4708:	000000b4 	strheq	r0, [r0], -r4
    470c:	22b60c0c 	adcscs	r0, r6, #12, 24	; 0xc00
    4710:	b7040000 	strlt	r0, [r4, -r0]
    4714:	0000b402 	andeq	fp, r0, r2, lsl #8
    4718:	460b1000 	strmi	r1, [fp], -r0
    471c:	04005243 	streq	r5, [r0], #-579	; 0x243
    4720:	00b402b8 	ldrhteq	r0, [r4], r8
    4724:	00140000 	andseq	r0, r4, r0
    4728:	0020b509 	eoreq	fp, r0, r9, lsl #10
    472c:	02b90400 	adcseq	r0, r9, #0, 8
    4730:	0000010e 	andeq	r0, r0, lr, lsl #2
    4734:	bb04100a 	bllt	108764 <_Min_Stack_Size+0x108364>
    4738:	0001af02 	andeq	sl, r1, r2, lsl #30
    473c:	21fa0c00 	mvnscs	r0, r0, lsl #24
    4740:	bd040000 	stclt	0, cr0, [r4, #-0]
    4744:	0000b402 	andeq	fp, r0, r2, lsl #8
    4748:	970c0000 	strls	r0, [ip, -r0]
    474c:	04000022 	streq	r0, [r0], #-34	; 0x22
    4750:	00b402be 	ldrhteq	r0, [r4], lr
    4754:	0c040000 	stceq	0, cr0, [r4], {-0}
    4758:	00002322 	andeq	r2, r0, r2, lsr #6
    475c:	b402bf04 	strlt	fp, [r2], #-3844	; 0xf04
    4760:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4764:	00237b0c 	eoreq	r7, r3, ip, lsl #22
    4768:	02c00400 	sbceq	r0, r0, #0, 8
    476c:	000000b4 	strheq	r0, [r0], -r4
    4770:	2009000c 	andcs	r0, r9, ip
    4774:	04000021 	streq	r0, [r0], #-33	; 0x21
    4778:	017102c1 	cmneq	r1, r1, asr #5
    477c:	3c0d0000 	stccc	0, cr0, [sp], {-0}
    4780:	02783605 	rsbseq	r3, r8, #5242880	; 0x500000
    4784:	600e0000 	andvs	r0, lr, r0
    4788:	05000023 	streq	r0, [r0, #-35]	; 0x23
    478c:	0000a238 	andeq	sl, r0, r8, lsr r2
    4790:	720e0000 	andvc	r0, lr, #0
    4794:	05000021 	streq	r0, [r0, #-33]	; 0x21
    4798:	0000a23b 	andeq	sl, r0, fp, lsr r2
    479c:	810e0400 	tsthi	lr, r0, lsl #8
    47a0:	05000023 	streq	r0, [r0, #-35]	; 0x23
    47a4:	0000a23d 	andeq	sl, r0, sp, lsr r2
    47a8:	6a0e0800 	bvs	3867b0 <_Min_Stack_Size+0x3863b0>
    47ac:	05000021 	streq	r0, [r0, #-33]	; 0x21
    47b0:	0000a241 	andeq	sl, r0, r1, asr #4
    47b4:	4b0e0c00 	blmi	3877bc <_Min_Stack_Size+0x3873bc>
    47b8:	05000022 	streq	r0, [r0, #-34]	; 0x22
    47bc:	0000a245 	andeq	sl, r0, r5, asr #4
    47c0:	c70e1000 	strgt	r1, [lr, -r0]
    47c4:	05000021 	streq	r0, [r0, #-33]	; 0x21
    47c8:	0000a249 	andeq	sl, r0, r9, asr #4
    47cc:	890e1400 	stmdbhi	lr, {sl, ip}
    47d0:	05000021 	streq	r0, [r0, #-33]	; 0x21
    47d4:	0000a24c 	andeq	sl, r0, ip, asr #4
    47d8:	240e1800 	strcs	r1, [lr], #-2048	; 0x800
    47dc:	05000022 	streq	r0, [r0, #-34]	; 0x22
    47e0:	0000a24f 	andeq	sl, r0, pc, asr #4
    47e4:	150e1c00 	strne	r1, [lr, #-3072]	; 0xc00
    47e8:	05000024 	streq	r0, [r0, #-36]	; 0x24
    47ec:	0000a252 	andeq	sl, r0, r2, asr r2
    47f0:	e10e2000 	mrs	r2, (UNDEF: 14)
    47f4:	05000023 	streq	r0, [r0, #-35]	; 0x23
    47f8:	0000a255 	andeq	sl, r0, r5, asr r2
    47fc:	ce0e2400 	cfcpysgt	mvf2, mvf14
    4800:	05000020 	streq	r0, [r0, #-32]
    4804:	0000a25a 	andeq	sl, r0, sl, asr r2
    4808:	420e2800 	andmi	r2, lr, #0, 16
    480c:	05000023 	streq	r0, [r0, #-35]	; 0x23
    4810:	0000a25d 	andeq	sl, r0, sp, asr r2
    4814:	750e2c00 	strvc	r2, [lr, #-3072]	; 0xc00
    4818:	05000022 	streq	r0, [r0, #-34]	; 0x22
    481c:	0000a262 	andeq	sl, r0, r2, ror #4
    4820:	db0e3000 	blle	390828 <_Min_Stack_Size+0x390428>
    4824:	05000020 	streq	r0, [r0, #-32]
    4828:	0000a265 	andeq	sl, r0, r5, ror #4
    482c:	fa0e3400 	blx	391834 <_Min_Stack_Size+0x391434>
    4830:	05000020 	streq	r0, [r0, #-32]
    4834:	0000a26a 	andeq	sl, r0, sl, ror #4
    4838:	03003800 	movweq	r3, #2048	; 0x800
    483c:	0000223b 	andeq	r2, r0, fp, lsr r2
    4840:	01bb6e05 			; <UNDEFINED> instruction: 0x01bb6e05
    4844:	050f0000 	streq	r0, [pc, #-0]	; 484c <_Min_Stack_Size+0x444c>
    4848:	01000023 	tsteq	r0, r3, lsr #32
    484c:	0017d8c4 	andseq	sp, r7, r4, asr #17
    4850:	0001f608 	andeq	pc, r1, r8, lsl #12
    4854:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    4858:	10000002 	andne	r0, r0, r2
    485c:	0000215d 	andeq	r2, r0, sp, asr r1
    4860:	02a6c401 	adceq	ip, r6, #16777216	; 0x1000000
    4864:	50010000 	andpl	r0, r1, r0
    4868:	65041100 	strvs	r1, [r4, #-256]	; 0x100
    486c:	12000001 	andne	r0, r0, #1
    4870:	000021f1 	strdeq	r2, [r0], -r1
    4874:	d0013f01 	andle	r3, r1, r1, lsl #30
    4878:	6a080019 	bvs	2048e4 <_Min_Stack_Size+0x2044e4>
    487c:	01000000 	mrseq	r0, (UNDEF: 0)
    4880:	0002f19c 	muleq	r2, ip, r1
    4884:	215d1300 	cmpcs	sp, r0, lsl #6
    4888:	3f010000 	svccc	0x00010000
    488c:	0002a601 	andeq	sl, r2, r1, lsl #12
    4890:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    4894:	0000229c 	muleq	r0, ip, r2
    4898:	f1013f01 			; <UNDEFINED> instruction: 0xf1013f01
    489c:	13000002 	movwne	r0, #2
    48a0:	15000022 	strne	r0, [r0, #-34]	; 0x22
    48a4:	0000114c 	andeq	r1, r0, ip, asr #2
    48a8:	a2014101 	andge	r4, r1, #1073741824	; 0x40000000
    48ac:	34000000 	strcc	r0, [r0], #-0
    48b0:	00000022 	andeq	r0, r0, r2, lsr #32
    48b4:	02780411 	rsbseq	r0, r8, #285212672	; 0x11000000
    48b8:	eb120000 	bl	4848c0 <_Min_Stack_Size+0x4844c0>
    48bc:	01000020 	tsteq	r0, r0, lsr #32
    48c0:	1a3c0193 	bne	f04f14 <_Min_Stack_Size+0xf04b14>
    48c4:	00220800 	eoreq	r0, r2, r0, lsl #16
    48c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    48cc:	0000031c 	andeq	r0, r0, ip, lsl r3
    48d0:	00229c13 	eoreq	r9, r2, r3, lsl ip
    48d4:	01930100 	orrseq	r0, r3, r0, lsl #2
    48d8:	000002f1 	strdeq	r0, [r0], -r1
    48dc:	12005001 	andne	r5, r0, #1
    48e0:	000020ad 	andeq	r2, r0, sp, lsr #1
    48e4:	6001de01 	andvs	sp, r1, r1, lsl #28
    48e8:	1408001a 	strne	r0, [r8], #-26
    48ec:	01000000 	mrseq	r0, (UNDEF: 0)
    48f0:	00034f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
    48f4:	215d1300 	cmpcs	sp, r0, lsl #6
    48f8:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    48fc:	0002a601 	andeq	sl, r2, r1, lsl #12
    4900:	13500100 	cmpne	r0, #0, 2
    4904:	00000d71 	andeq	r0, r0, r1, ror sp
    4908:	0201de01 	andeq	sp, r1, #1, 28
    490c:	01000001 	tsteq	r0, r1
    4910:	e7120051 			; <UNDEFINED> instruction: 0xe7120051
    4914:	01000022 	tsteq	r0, r2, lsr #32
    4918:	1a740202 	bne	1d05128 <_Min_Stack_Size+0x1d04d28>
    491c:	00140800 	andseq	r0, r4, r0, lsl #16
    4920:	9c010000 	stcls	0, cr0, [r1], {-0}
    4924:	00000382 	andeq	r0, r0, r2, lsl #7
    4928:	00215d13 	eoreq	r5, r1, r3, lsl sp
    492c:	02020100 	andeq	r0, r2, #0, 2
    4930:	000002a6 	andeq	r0, r0, r6, lsr #5
    4934:	ab135001 	blge	4d8940 <_Min_Stack_Size+0x4d8540>
    4938:	01000022 	tsteq	r0, r2, lsr #32
    493c:	00a20202 	adceq	r0, r2, r2, lsl #4
    4940:	51010000 	mrspl	r0, (UNDEF: 1)
    4944:	21971200 	orrscs	r1, r7, r0, lsl #4
    4948:	26010000 	strcs	r0, [r1], -r0
    494c:	001a8802 	andseq	r8, sl, r2, lsl #16
    4950:	00001408 	andeq	r1, r0, r8, lsl #8
    4954:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
    4958:	13000003 	movwne	r0, #3
    495c:	0000215d 	andeq	r2, r0, sp, asr r1
    4960:	a6022601 	strge	r2, [r2], -r1, lsl #12
    4964:	01000002 	tsteq	r0, r2
    4968:	22bb1350 	adcscs	r1, fp, #80, 6	; 0x40000001
    496c:	26010000 	strcs	r0, [r1], -r0
    4970:	0000a202 	andeq	sl, r0, r2, lsl #4
    4974:	00510100 	subseq	r0, r1, r0, lsl #2
    4978:	00220d12 	eoreq	r0, r2, r2, lsl sp
    497c:	02780100 	rsbseq	r0, r8, #0, 2
    4980:	08001a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip}
    4984:	00000004 	andeq	r0, r0, r4
    4988:	03e89c01 	mvneq	r9, #256	; 0x100
    498c:	5d130000 	ldcpl	0, cr0, [r3, #-0]
    4990:	01000021 	tsteq	r0, r1, lsr #32
    4994:	02a60278 	adceq	r0, r6, #120, 4	; 0x80000007
    4998:	50010000 	andpl	r0, r1, r0
    499c:	0023f913 	eoreq	pc, r3, r3, lsl r9	; <UNPREDICTABLE>
    49a0:	02780100 	rsbseq	r0, r8, #0, 2
    49a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    49a8:	16005101 	strne	r5, [r0], -r1, lsl #2
    49ac:	000023ea 	andeq	r2, r0, sl, ror #7
    49b0:	8c028701 	stchi	7, cr8, [r2], {1}
    49b4:	a0000000 	andge	r0, r0, r0
    49b8:	0608001a 			; <UNDEFINED> instruction: 0x0608001a
    49bc:	01000000 	mrseq	r0, (UNDEF: 0)
    49c0:	0004139c 	muleq	r4, ip, r3
    49c4:	215d1400 	cmpcs	sp, r0, lsl #8
    49c8:	87010000 	strhi	r0, [r1, -r0]
    49cc:	0002a602 	andeq	sl, r2, r2, lsl #12
    49d0:	00227400 	eoreq	r7, r2, r0, lsl #8
    49d4:	5a120000 	bpl	4849dc <_Min_Stack_Size+0x4845dc>
    49d8:	01000022 	tsteq	r0, r2, lsr #32
    49dc:	1aa802da 	bne	fea0554c <_estack+0xde9d554c>
    49e0:	00180800 	andseq	r0, r8, r0, lsl #16
    49e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    49e8:	00000454 	andeq	r0, r0, r4, asr r4
    49ec:	00215d13 	eoreq	r5, r1, r3, lsl sp
    49f0:	02da0100 	sbcseq	r0, sl, #0, 2
    49f4:	000002a6 	andeq	r0, r0, r6, lsr #5
    49f8:	32135001 	andscc	r5, r3, #1
    49fc:	01000023 	tsteq	r0, r3, lsr #32
    4a00:	00a202da 	ldrdeq	r0, [r2], sl	; <UNPREDICTABLE>
    4a04:	51010000 	mrspl	r0, (UNDEF: 1)
    4a08:	00209b13 	eoreq	r9, r0, r3, lsl fp
    4a0c:	02db0100 	sbcseq	r0, fp, #0, 2
    4a10:	000000a2 	andeq	r0, r0, r2, lsr #1
    4a14:	12005201 	andne	r5, r0, #268435456	; 0x10000000
    4a18:	000021d9 	ldrdeq	r2, [r0], -r9
    4a1c:	c002f901 	andgt	pc, r2, r1, lsl #18
    4a20:	1408001a 	strne	r0, [r8], #-26
    4a24:	01000000 	mrseq	r0, (UNDEF: 0)
    4a28:	0004879c 	muleq	r4, ip, r7
    4a2c:	215d1300 	cmpcs	sp, r0, lsl #6
    4a30:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    4a34:	0002a602 	andeq	sl, r2, r2, lsl #12
    4a38:	13500100 	cmpne	r0, #0, 2
    4a3c:	00000d71 	andeq	r0, r0, r1, ror sp
    4a40:	0202f901 	andeq	pc, r2, #16384	; 0x4000
    4a44:	01000001 	tsteq	r0, r1
    4a48:	b0120051 	andslt	r0, r2, r1, asr r0
    4a4c:	01000021 	tsteq	r0, r1, lsr #32
    4a50:	1ad40322 	bne	ff5056e0 <_estack+0xdf4d56e0>
    4a54:	000a0800 	andeq	r0, sl, r0, lsl #16
    4a58:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a5c:	000004c8 	andeq	r0, r0, r8, asr #9
    4a60:	00215d13 	eoreq	r5, r1, r3, lsl sp
    4a64:	03220100 	teqeq	r2, #0, 2
    4a68:	000002a6 	andeq	r0, r0, r6, lsr #5
    4a6c:	6c135001 	ldcvs	0, cr5, [r3], {1}
    4a70:	01000023 	tsteq	r0, r3, lsr #32
    4a74:	00a20322 	adceq	r0, r2, r2, lsr #6
    4a78:	51010000 	mrspl	r0, (UNDEF: 1)
    4a7c:	00214713 	eoreq	r4, r1, r3, lsl r7
    4a80:	03230100 	teqeq	r3, #0, 2
    4a84:	000000a2 	andeq	r0, r0, r2, lsr #1
    4a88:	16005201 	strne	r5, [r0], -r1, lsl #4
    4a8c:	0000212c 	andeq	r2, r0, ip, lsr #2
    4a90:	a2033c01 	andge	r3, r3, #256	; 0x100
    4a94:	e0000000 	and	r0, r0, r0
    4a98:	0808001a 	stmdaeq	r8, {r1, r3, r4}
    4a9c:	01000000 	mrseq	r0, (UNDEF: 0)
    4aa0:	0005039c 	muleq	r5, ip, r3
    4aa4:	215d1400 	cmpcs	sp, r0, lsl #8
    4aa8:	3c010000 	stccc	0, cr0, [r1], {-0}
    4aac:	0002a603 	andeq	sl, r2, r3, lsl #12
    4ab0:	00229500 	eoreq	r9, r2, r0, lsl #10
    4ab4:	6d741700 	ldclvs	7, cr1, [r4, #-0]
    4ab8:	3e010070 	mcrcc	0, 0, r0, cr1, cr0, {3}
    4abc:	0000a203 	andeq	sl, r0, r3, lsl #4
    4ac0:	0022b600 	eoreq	fp, r2, r0, lsl #12
    4ac4:	4f160000 	svcmi	0x00160000
    4ac8:	01000023 	tsteq	r0, r3, lsr #32
    4acc:	010203af 	smlatbeq	r2, pc, r3, r0	; <UNPREDICTABLE>
    4ad0:	1ae80000 	bne	ffa04ad8 <_estack+0xdf9d4ad8>
    4ad4:	00080800 	andeq	r0, r8, r0, lsl #16
    4ad8:	9c010000 	stcls	0, cr0, [r1], {-0}
    4adc:	0000053e 	andeq	r0, r0, lr, lsr r5
    4ae0:	00215d14 	eoreq	r5, r1, r4, lsl sp
    4ae4:	03af0100 			; <UNDEFINED> instruction: 0x03af0100
    4ae8:	000002a6 	andeq	r0, r0, r6, lsr #5
    4aec:	000022e0 	andeq	r2, r0, r0, ror #5
    4af0:	0020c815 	eoreq	ip, r0, r5, lsl r8
    4af4:	03b10100 			; <UNDEFINED> instruction: 0x03b10100
    4af8:	00000102 	andeq	r0, r0, r2, lsl #2
    4afc:	00002301 	andeq	r2, r0, r1, lsl #6
    4b00:	210e1600 	tstcs	lr, r0, lsl #12
    4b04:	d1010000 	mrsle	r0, (UNDEF: 1)
    4b08:	0000a203 	andeq	sl, r0, r3, lsl #4
    4b0c:	001af000 	andseq	pc, sl, r0
    4b10:	00000808 	andeq	r0, r0, r8, lsl #16
    4b14:	799c0100 	ldmibvc	ip, {r8}
    4b18:	14000005 	strne	r0, [r0], #-5
    4b1c:	0000215d 	andeq	r2, r0, sp, asr r1
    4b20:	a603d101 	strge	sp, [r3], -r1, lsl #2
    4b24:	24000002 	strcs	r0, [r0], #-2
    4b28:	15000023 	strne	r0, [r0, #-35]	; 0x23
    4b2c:	0000114c 	andeq	r1, r0, ip, asr #2
    4b30:	a203d301 	andge	sp, r3, #67108864	; 0x4000000
    4b34:	45000000 	strmi	r0, [r0, #-0]
    4b38:	00000023 	andeq	r0, r0, r3, lsr #32
    4b3c:	00231016 	eoreq	r1, r3, r6, lsl r0
    4b40:	03ec0100 	mvneq	r0, #0, 2
    4b44:	000000d4 	ldrdeq	r0, [r0], -r4
    4b48:	08001af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip}
    4b4c:	00000040 	andeq	r0, r0, r0, asr #32
    4b50:	05e49c01 	strbeq	r9, [r4, #3073]!	; 0xc01
    4b54:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    4b58:	01000021 	tsteq	r0, r1, lsr #32
    4b5c:	02a603ec 	adceq	r0, r6, #236, 6	; 0xb0000003
    4b60:	23740000 	cmncs	r4, #0
    4b64:	c8140000 	ldmdagt	r4, {}	; <UNPREDICTABLE>
    4b68:	01000022 	tsteq	r0, r2, lsr #32
    4b6c:	00a203ec 	adceq	r0, r2, ip, ror #7
    4b70:	23950000 	orrscs	r0, r5, #0
    4b74:	71150000 	tstvc	r5, r0
    4b78:	0100000f 	tsteq	r0, pc
    4b7c:	00d403ee 	sbcseq	r0, r4, lr, ror #7
    4b80:	23b60000 			; <UNDEFINED> instruction: 0x23b60000
    4b84:	58150000 	ldmdapl	r5, {}	; <UNPREDICTABLE>
    4b88:	01000021 	tsteq	r0, r1, lsr #32
    4b8c:	05e403ef 	strbeq	r0, [r4, #1007]!	; 0x3ef
    4b90:	23fb0000 	mvnscs	r0, #0
    4b94:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    4b98:	01000011 	tsteq	r0, r1, lsl r0
    4b9c:	00a203f0 	strdeq	r0, [r2], r0	; <UNPREDICTABLE>
    4ba0:	240e0000 	strcs	r0, [lr], #-0
    4ba4:	11000000 	mrsne	r0, (UNDEF: 0)
    4ba8:	0001af04 	andeq	sl, r1, r4, lsl #30
    4bac:	21ff1200 	mvnscs	r1, r0, lsl #4
    4bb0:	2f010000 	svccs	0x00010000
    4bb4:	001b3804 	andseq	r3, fp, r4, lsl #16
    4bb8:	00003a08 	andeq	r3, r0, r8, lsl #20
    4bbc:	2f9c0100 	svccs	0x009c0100
    4bc0:	14000006 	strne	r0, [r0], #-6
    4bc4:	0000215d 	andeq	r2, r0, sp, asr r1
    4bc8:	a6042f01 	strge	r2, [r4], -r1, lsl #30
    4bcc:	40000002 	andmi	r0, r0, r2
    4bd0:	14000024 	strne	r0, [r0], #-36	; 0x24
    4bd4:	000022c8 	andeq	r2, r0, r8, asr #5
    4bd8:	a2042f01 	andge	r2, r4, #1, 30
    4bdc:	61000000 	mrsvs	r0, (UNDEF: 0)
    4be0:	18000024 	stmdane	r0, {r2, r5}
    4be4:	00002158 	andeq	r2, r0, r8, asr r1
    4be8:	e4043101 	str	r3, [r4], #-257	; 0x101
    4bec:	01000005 	tsteq	r0, r5
    4bf0:	01120050 	tsteq	r2, r0, asr r0
    4bf4:	01000024 	tsteq	r0, r4, lsr #32
    4bf8:	1b74045e 	blne	1d05d78 <_Min_Stack_Size+0x1d05978>
    4bfc:	00400800 	subeq	r0, r0, r0, lsl #16
    4c00:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c04:	00000672 	andeq	r0, r0, r2, ror r6
    4c08:	00215d13 	eoreq	r5, r1, r3, lsl sp
    4c0c:	045e0100 	ldrbeq	r0, [lr], #-256	; 0x100
    4c10:	000002a6 	andeq	r0, r0, r6, lsr #5
    4c14:	0e145001 	cdpeq	0, 1, cr5, cr4, cr1, {0}
    4c18:	01000024 	tsteq	r0, r4, lsr #32
    4c1c:	00a2045e 	adceq	r0, r2, lr, asr r4
    4c20:	24820000 	strcs	r0, [r2], #0
    4c24:	71130000 	tstvc	r3, r0
    4c28:	0100000d 	tsteq	r0, sp
    4c2c:	0102045e 	tsteq	r2, lr, asr r4
    4c30:	52010000 	andpl	r0, r1, #0
    4c34:	22871600 	addcs	r1, r7, #0, 12
    4c38:	92010000 	andls	r0, r1, #0
    4c3c:	0000e004 	andeq	lr, r0, r4
    4c40:	001bb400 	andseq	fp, fp, r0, lsl #8
    4c44:	00005808 	andeq	r5, r0, r8, lsl #16
    4c48:	ed9c0100 	ldfs	f0, [ip]
    4c4c:	14000006 	strne	r0, [r0], #-6
    4c50:	0000215d 	andeq	r2, r0, sp, asr r1
    4c54:	a6049201 	strge	r9, [r4], -r1, lsl #4
    4c58:	c7000002 	strgt	r0, [r0, -r2]
    4c5c:	14000024 	strne	r0, [r0], #-36	; 0x24
    4c60:	0000240e 	andeq	r2, r0, lr, lsl #8
    4c64:	a2049201 	andge	r9, r4, #268435456	; 0x10000000
    4c68:	f3000000 	vhadd.u8	d0, d0, d0
    4c6c:	15000024 	strne	r0, [r0, #-36]	; 0x24
    4c70:	00000f71 	andeq	r0, r0, r1, ror pc
    4c74:	e0049401 	and	r9, r4, r1, lsl #8
    4c78:	1f000000 	svcne	0x00000000
    4c7c:	15000025 	strne	r0, [r0, #-37]	; 0x25
    4c80:	00002158 	andeq	r2, r0, r8, asr r1
    4c84:	e4049501 	str	r9, [r4], #-1281	; 0x501
    4c88:	4a000005 	bmi	4ca4 <_Min_Stack_Size+0x48a4>
    4c8c:	15000025 	strne	r0, [r0, #-37]	; 0x25
    4c90:	0000114c 	andeq	r1, r0, ip, asr #2
    4c94:	a2049601 	andge	r9, r4, #1048576	; 0x100000
    4c98:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4c9c:	15000025 	strne	r0, [r0, #-37]	; 0x25
    4ca0:	00001fc7 	andeq	r1, r0, r7, asr #31
    4ca4:	a2049601 	andge	r9, r4, #1048576	; 0x100000
    4ca8:	b7000000 	strlt	r0, [r0, -r0]
    4cac:	00000025 	andeq	r0, r0, r5, lsr #32
    4cb0:	0022d112 	eoreq	sp, r2, r2, lsl r1
    4cb4:	04e40100 	strbteq	r0, [r4], #256	; 0x100
    4cb8:	08001c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip}
    4cbc:	0000003a 	andeq	r0, r0, sl, lsr r0
    4cc0:	07329c01 	ldreq	r9, [r2, -r1, lsl #24]!
    4cc4:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    4cc8:	01000021 	tsteq	r0, r1, lsr #32
    4ccc:	02a604e4 	adceq	r0, r6, #228, 8	; 0xe4000000
    4cd0:	25ed0000 	strbcs	r0, [sp, #0]!
    4cd4:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    4cd8:	01000024 	tsteq	r0, r4, lsr #32
    4cdc:	00a204e4 	adceq	r0, r2, r4, ror #9
    4ce0:	260e0000 	strcs	r0, [lr], -r0
    4ce4:	58180000 	ldmdapl	r8, {}	; <UNPREDICTABLE>
    4ce8:	01000021 	tsteq	r0, r1, lsr #32
    4cec:	05e404e6 	strbeq	r0, [r4, #1254]!	; 0x4e6
    4cf0:	50010000 	andpl	r0, r1, r0
    4cf4:	03a01900 	moveq	r1, #0, 18
    4cf8:	a7060000 	strge	r0, [r6, -r0]
    4cfc:	0000b906 	andeq	fp, r0, r6, lsl #18
    4d00:	0c7c0000 	ldcleq	0, cr0, [ip], #-0
    4d04:	00040000 	andeq	r0, r4, r0
    4d08:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    4d0c:	02870104 	addeq	r0, r7, #4, 2
    4d10:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    4d14:	ab000024 	blge	4dac <_Min_Stack_Size+0x49ac>
    4d18:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    4d1c:	00000005 	andeq	r0, r0, r5
    4d20:	a0000000 	andge	r0, r0, r0
    4d24:	0200001f 	andeq	r0, r0, #31
    4d28:	01530601 	cmpeq	r3, r1, lsl #12
    4d2c:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    4d30:	02000001 	andeq	r0, r0, #1
    4d34:	0000371c 	andeq	r3, r0, ip, lsl r7
    4d38:	08010200 	stmdaeq	r1, {r9}
    4d3c:	00000151 	andeq	r0, r0, r1, asr r1
    4d40:	06050202 	streq	r0, [r5], -r2, lsl #4
    4d44:	03000001 	movweq	r0, #1
    4d48:	0000005c 	andeq	r0, r0, ip, asr r0
    4d4c:	00502602 	subseq	r2, r0, r2, lsl #12
    4d50:	02020000 	andeq	r0, r2, #0
    4d54:	0001e807 	andeq	lr, r1, r7, lsl #16
    4d58:	037a0300 	cmneq	sl, #0, 6
    4d5c:	37020000 	strcc	r0, [r2, -r0]
    4d60:	00000062 	andeq	r0, r0, r2, rrx
    4d64:	ec050402 	cfstrs	mvf0, [r5], {2}
    4d68:	03000000 	movweq	r0, #0
    4d6c:	00000051 	andeq	r0, r0, r1, asr r0
    4d70:	00743802 	rsbseq	r3, r4, r2, lsl #16
    4d74:	04020000 	streq	r0, [r2], #-0
    4d78:	00017b07 	andeq	r7, r1, r7, lsl #22
    4d7c:	05080200 	streq	r0, [r8, #-512]	; 0x200
    4d80:	000000e7 	andeq	r0, r0, r7, ror #1
    4d84:	76070802 	strvc	r0, [r7], -r2, lsl #16
    4d88:	04000001 	streq	r0, [r0], #-1
    4d8c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4d90:	04020074 	streq	r0, [r2], #-116	; 0x74
    4d94:	00018007 	andeq	r8, r1, r7
    4d98:	011b0300 	tsteq	fp, r0, lsl #6
    4d9c:	2a030000 	bcs	c4da4 <_Min_Stack_Size+0xc49a4>
    4da0:	0000002c 	andeq	r0, r0, ip, lsr #32
    4da4:	00005e03 	andeq	r5, r0, r3, lsl #28
    4da8:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    4dac:	03000000 	movweq	r0, #0
    4db0:	0000037c 	andeq	r0, r0, ip, ror r3
    4db4:	00574103 	subseq	r4, r7, r3, lsl #2
    4db8:	53030000 	movwpl	r0, #12288	; 0x3000
    4dbc:	03000000 	movweq	r0, #0
    4dc0:	00006942 	andeq	r6, r0, r2, asr #18
    4dc4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4dc8:	0000002c 	andeq	r0, r0, ip, lsr #32
    4dcc:	0000b805 	andeq	fp, r0, r5, lsl #16
    4dd0:	00b80600 	adcseq	r0, r8, r0, lsl #12
    4dd4:	00df0000 	sbcseq	r0, pc, r0
    4dd8:	c3070000 	movwgt	r0, #28672	; 0x7000
    4ddc:	01000000 	mrseq	r0, (UNDEF: 0)
    4de0:	00a20500 	adceq	r0, r2, r0, lsl #10
    4de4:	ad050000 	stcge	0, cr0, [r5, #-0]
    4de8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4dec:	01f70401 	mvnseq	r0, r1, lsl #8
    4df0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4df4:	000ed209 	andeq	sp, lr, r9, lsl #4
    4df8:	530a0000 	movwpl	r0, #40960	; 0xa000
    4dfc:	01005445 	tsteq	r0, r5, asr #8
    4e00:	23170b00 	tstcs	r7, #0, 22
    4e04:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    4e08:	0000e901 	andeq	lr, r0, r1, lsl #18
    4e0c:	228e0b00 	addcs	r0, lr, #0, 22
    4e10:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    4e14:	0000e901 	andeq	lr, r0, r1, lsl #18
    4e18:	04010800 	streq	r0, [r1], #-2048	; 0x800
    4e1c:	012d01f9 	strdeq	r0, [sp, -r9]!
    4e20:	8b090000 	blhi	244e28 <_Min_Stack_Size+0x244a28>
    4e24:	00000004 	andeq	r0, r0, r4
    4e28:	0005c309 	andeq	ip, r5, r9, lsl #6
    4e2c:	0b000100 	bleq	5234 <_Min_Stack_Size+0x4e34>
    4e30:	0000092d 	andeq	r0, r0, sp, lsr #18
    4e34:	1701f904 	strne	pc, [r1, -r4, lsl #18]
    4e38:	0c000001 	stceq	0, cr0, [r0], {1}
    4e3c:	04550490 	ldrbeq	r0, [r5], #-1168	; 0x490
    4e40:	000002e2 	andeq	r0, r0, r2, ror #5
    4e44:	0052430d 	subseq	r4, r2, sp, lsl #6
    4e48:	ca045704 	bgt	11aa60 <_Min_Stack_Size+0x11a660>
    4e4c:	00000000 	andeq	r0, r0, r0
    4e50:	00000a0e 	andeq	r0, r0, lr, lsl #20
    4e54:	04580400 	ldrbeq	r0, [r8], #-1024	; 0x400
    4e58:	000000ca 	andeq	r0, r0, sl, asr #1
    4e5c:	03b30e04 			; <UNDEFINED> instruction: 0x03b30e04
    4e60:	59040000 	stmdbpl	r4, {}	; <UNPREDICTABLE>
    4e64:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4e68:	430d0800 	movwmi	r0, #55296	; 0xd800
    4e6c:	04005249 	streq	r5, [r0], #-585	; 0x249
    4e70:	00ca045a 	sbceq	r0, sl, sl, asr r4
    4e74:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    4e78:	0000007d 	andeq	r0, r0, sp, ror r0
    4e7c:	ca045b04 	bgt	11ba94 <_Min_Stack_Size+0x11b694>
    4e80:	10000000 	andne	r0, r0, r0
    4e84:	0000230e 	andeq	r2, r0, lr, lsl #6
    4e88:	045c0400 	ldrbeq	r0, [ip], #-1024	; 0x400
    4e8c:	000000ca 	andeq	r0, r0, sl, asr #1
    4e90:	03890e14 	orreq	r0, r9, #20, 28	; 0x140
    4e94:	5d040000 	stcpl	0, cr0, [r4, #-0]
    4e98:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4e9c:	3f0e1800 	svccc	0x000e1800
    4ea0:	04000002 	streq	r0, [r0], #-2
    4ea4:	00b8045e 	adcseq	r0, r8, lr, asr r4
    4ea8:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    4eac:	00000012 	andeq	r0, r0, r2, lsl r0
    4eb0:	ca045f04 	bgt	11cac8 <_Min_Stack_Size+0x11c6c8>
    4eb4:	20000000 	andcs	r0, r0, r0
    4eb8:	0001100e 	andeq	r1, r1, lr
    4ebc:	04600400 	strbteq	r0, [r0], #-1024	; 0x400
    4ec0:	000000ca 	andeq	r0, r0, sl, asr #1
    4ec4:	02490e24 	subeq	r0, r9, #36, 28	; 0x240
    4ec8:	61040000 	mrsvs	r0, (UNDEF: 4)
    4ecc:	0000cf04 	andeq	ip, r0, r4, lsl #30
    4ed0:	720e2800 	andvc	r2, lr, #0, 16
    4ed4:	04000003 	streq	r0, [r0], #-3
    4ed8:	00ca0462 	sbceq	r0, sl, r2, ror #8
    4edc:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    4ee0:	0000001b 	andeq	r0, r0, fp, lsl r0
    4ee4:	ca046304 	bgt	11dafc <_Min_Stack_Size+0x11d6fc>
    4ee8:	34000000 	strcc	r0, [r0], #-0
    4eec:	0001390e 	andeq	r3, r1, lr, lsl #18
    4ef0:	04640400 	strbteq	r0, [r4], #-1024	; 0x400
    4ef4:	000000ca 	andeq	r0, r0, sl, asr #1
    4ef8:	02530e38 	subseq	r0, r3, #56, 28	; 0x380
    4efc:	65040000 	strvs	r0, [r4, #-0]
    4f00:	0000b804 	andeq	fp, r0, r4, lsl #16
    4f04:	a30e3c00 	movwge	r3, #60416	; 0xec00
    4f08:	04000000 	streq	r0, [r0], #-0
    4f0c:	00ca0466 	sbceq	r0, sl, r6, ror #8
    4f10:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    4f14:	0000015f 	andeq	r0, r0, pc, asr r1
    4f18:	ca046704 	bgt	11eb30 <_Min_Stack_Size+0x11e730>
    4f1c:	44000000 	strmi	r0, [r0], #-0
    4f20:	0000900e 	andeq	r9, r0, lr
    4f24:	04680400 	strbteq	r0, [r8], #-1024	; 0x400
    4f28:	000000cf 	andeq	r0, r0, pc, asr #1
    4f2c:	00000e48 	andeq	r0, r0, r8, asr #28
    4f30:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    4f34:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4f38:	300e5000 	andcc	r5, lr, r0
    4f3c:	04000002 	streq	r0, [r0], #-2
    4f40:	00ca046a 	sbceq	r0, sl, sl, ror #8
    4f44:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
    4f48:	00000086 	andeq	r0, r0, r6, lsl #1
    4f4c:	ca046b04 	bgt	11fb64 <_Min_Stack_Size+0x11f764>
    4f50:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    4f54:	0002690e 	andeq	r6, r2, lr, lsl #18
    4f58:	046c0400 	strbteq	r0, [ip], #-1024	; 0x400
    4f5c:	000000b8 	strheq	r0, [r0], -r8
    4f60:	01fb0e5c 	mvnseq	r0, ip, asr lr
    4f64:	6d040000 	stcvs	0, cr0, [r4, #-0]
    4f68:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4f6c:	be0e6000 	cdplt	0, 0, cr6, cr14, cr0, {0}
    4f70:	04000003 	streq	r0, [r0], #-3
    4f74:	00ca046e 	sbceq	r0, sl, lr, ror #8
    4f78:	0e640000 	cdpeq	0, 6, cr0, cr4, cr0, {0}
    4f7c:	00000273 	andeq	r0, r0, r3, ror r2
    4f80:	cf046f04 	svcgt	0x00046f04
    4f84:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4f88:	0000350e 	andeq	r3, r0, lr, lsl #10
    4f8c:	04700400 	ldrbteq	r0, [r0], #-1024	; 0x400
    4f90:	000000ca 	andeq	r0, r0, sl, asr #1
    4f94:	53430d70 	movtpl	r0, #15728	; 0x3d70
    4f98:	71040052 	qaddvc	r0, r2, r4
    4f9c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4fa0:	7d0e7400 	cfstrsvc	mvf7, [lr, #-0]
    4fa4:	04000002 	streq	r0, [r0], #-2
    4fa8:	00cf0472 	sbceq	r0, pc, r2, ror r4	; <UNPREDICTABLE>
    4fac:	0e780000 	cdpeq	0, 7, cr0, cr8, cr0, {0}
    4fb0:	00000067 	andeq	r0, r0, r7, rrx
    4fb4:	ca047304 	bgt	121bcc <_Min_Stack_Size+0x1217cc>
    4fb8:	80000000 	andhi	r0, r0, r0
    4fbc:	00003a0e 	andeq	r3, r0, lr, lsl #20
    4fc0:	04740400 	ldrbteq	r0, [r4], #-1024	; 0x400
    4fc4:	000000ca 	andeq	r0, r0, sl, asr #1
    4fc8:	03ad0e84 			; <UNDEFINED> instruction: 0x03ad0e84
    4fcc:	75040000 	strvc	r0, [r4, #-0]
    4fd0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4fd4:	d20e8800 	andle	r8, lr, #0, 16
    4fd8:	04000000 	streq	r0, [r0], #-0
    4fdc:	00ca0476 	sbceq	r0, sl, r6, ror r4
    4fe0:	008c0000 	addeq	r0, ip, r0
    4fe4:	0000fa0b 	andeq	pc, r0, fp, lsl #20
    4fe8:	04780400 	ldrbteq	r0, [r8], #-1024	; 0x400
    4fec:	00000139 	andeq	r0, r0, r9, lsr r1
    4ff0:	e004240c 	and	r2, r4, ip, lsl #8
    4ff4:	0003e004 	andeq	lr, r3, r4
    4ff8:	52430d00 	subpl	r0, r3, #0, 26
    4ffc:	e2040031 	and	r0, r4, #49	; 0x31
    5000:	0000df04 	andeq	sp, r0, r4, lsl #30
    5004:	3f0e0000 	svccc	0x000e0000
    5008:	04000002 	streq	r0, [r0], #-2
    500c:	00a204e3 	adceq	r0, r2, r3, ror #9
    5010:	0d020000 	stceq	0, cr0, [r2, #-0]
    5014:	00325243 	eorseq	r5, r2, r3, asr #4
    5018:	df04e404 	svcle	0x0004e404
    501c:	04000000 	streq	r0, [r0], #-0
    5020:	0002490e 	andeq	r4, r2, lr, lsl #18
    5024:	04e50400 	strbteq	r0, [r5], #1024	; 0x400
    5028:	000000a2 	andeq	r0, r0, r2, lsr #1
    502c:	52530d06 	subspl	r0, r3, #384	; 0x180
    5030:	04e60400 	strbteq	r0, [r6], #1024	; 0x400
    5034:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5038:	02530e08 	subseq	r0, r3, #8, 28	; 0x80
    503c:	e7040000 	str	r0, [r4, -r0]
    5040:	0000a204 	andeq	sl, r0, r4, lsl #4
    5044:	440d0a00 	strmi	r0, [sp], #-2560	; 0xa00
    5048:	e8040052 	stmda	r4, {r1, r4, r6}
    504c:	0000df04 	andeq	sp, r0, r4, lsl #30
    5050:	900e0c00 	andls	r0, lr, r0, lsl #24
    5054:	04000000 	streq	r0, [r0], #-0
    5058:	00a204e9 	adceq	r0, r2, r9, ror #9
    505c:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    5060:	0000249d 	muleq	r0, sp, r4
    5064:	df04ea04 	svcle	0x0004ea04
    5068:	10000000 	andne	r0, r0, r0
    506c:	0002690e 	andeq	r6, r2, lr, lsl #18
    5070:	04eb0400 	strbteq	r0, [fp], #1024	; 0x400
    5074:	000000a2 	andeq	r0, r0, r2, lsr #1
    5078:	24740e12 	ldrbtcs	r0, [r4], #-3602	; 0xe12
    507c:	ec040000 	stc	0, cr0, [r4], {-0}
    5080:	0000df04 	andeq	sp, r0, r4, lsl #30
    5084:	730e1400 	movwvc	r1, #58368	; 0xe400
    5088:	04000002 	streq	r0, [r0], #-2
    508c:	00a204ed 	adceq	r0, r2, sp, ror #9
    5090:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    5094:	00002596 	muleq	r0, r6, r5
    5098:	df04ee04 	svcle	0x0004ee04
    509c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    50a0:	00027d0e 	andeq	r7, r2, lr, lsl #26
    50a4:	04ef0400 	strbteq	r0, [pc], #1024	; 50ac <_Min_Stack_Size+0x4cac>
    50a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    50ac:	003d0e1a 	eorseq	r0, sp, sl, lsl lr
    50b0:	f0040000 			; <UNDEFINED> instruction: 0xf0040000
    50b4:	0000df04 	andeq	sp, r0, r4, lsl #30
    50b8:	ae0e1c00 	cdpge	12, 0, cr1, cr14, cr0, {0}
    50bc:	0400001e 	streq	r0, [r0], #-30
    50c0:	00a204f1 	strdeq	r0, [r2], r1	; <UNPREDICTABLE>
    50c4:	0e1e0000 	cdpeq	0, 1, cr0, cr14, cr0, {0}
    50c8:	00002677 	andeq	r2, r0, r7, ror r6
    50cc:	df04f204 	svcle	0x0004f204
    50d0:	20000000 	andcs	r0, r0, r0
    50d4:	001eb80e 	andseq	fp, lr, lr, lsl #16
    50d8:	04f30400 	ldrbteq	r0, [r3], #1024	; 0x400
    50dc:	000000a2 	andeq	r0, r0, r2, lsr #1
    50e0:	ff0b0022 			; <UNDEFINED> instruction: 0xff0b0022
    50e4:	04000026 	streq	r0, [r0], #-38	; 0x26
    50e8:	02ee04f4 	rsceq	r0, lr, #244, 8	; 0xf4000000
    50ec:	120f0000 	andne	r0, pc, #0
    50f0:	04613605 	strbteq	r3, [r1], #-1541	; 0x605
    50f4:	9d100000 	ldcls	0, cr0, [r0, #-0]
    50f8:	05000025 	streq	r0, [r0, #-37]	; 0x25
    50fc:	0000a238 	andeq	sl, r0, r8, lsr r2
    5100:	0b100000 	bleq	405108 <_Min_Stack_Size+0x404d08>
    5104:	05000027 	streq	r0, [r0, #-39]	; 0x27
    5108:	0000a23b 	andeq	sl, r0, fp, lsr r2
    510c:	77100200 	ldrvc	r0, [r0, -r0, lsl #4]
    5110:	05000027 	streq	r0, [r0, #-39]	; 0x27
    5114:	0000a23e 	andeq	sl, r0, lr, lsr r2
    5118:	bd100400 	cfldrslt	mvf0, [r0, #-0]
    511c:	05000026 	streq	r0, [r0, #-38]	; 0x26
    5120:	0000a241 	andeq	sl, r0, r1, asr #4
    5124:	db100600 	blle	40692c <_Min_Stack_Size+0x40652c>
    5128:	05000026 	streq	r0, [r0, #-38]	; 0x26
    512c:	0000a244 	andeq	sl, r0, r4, asr #4
    5130:	26100800 	ldrcs	r0, [r0], -r0, lsl #16
    5134:	05000027 	streq	r0, [r0, #-39]	; 0x27
    5138:	0000a247 	andeq	sl, r0, r7, asr #4
    513c:	e9100a00 	ldmdb	r0, {r9, fp}
    5140:	05000026 	streq	r0, [r0, #-38]	; 0x26
    5144:	0000a24b 	andeq	sl, r0, fp, asr #4
    5148:	ce100c00 	cdpgt	12, 1, cr0, cr0, cr0, {0}
    514c:	05000026 	streq	r0, [r0, #-38]	; 0x26
    5150:	0000a251 	andeq	sl, r0, r1, asr r2
    5154:	11100e00 	tstne	r0, r0, lsl #28
    5158:	05000026 	streq	r0, [r0, #-38]	; 0x26
    515c:	0000a254 	andeq	sl, r0, r4, asr r2
    5160:	03001000 	movweq	r1, #0
    5164:	0000262c 	andeq	r2, r0, ip, lsr #12
    5168:	03ec5505 	mvneq	r5, #20971520	; 0x1400000
    516c:	100f0000 	andne	r0, pc, r0
    5170:	04bd5b05 	ldrteq	r5, [sp], #2821	; 0xb05
    5174:	85100000 	ldrhi	r0, [r0, #-0]
    5178:	05000026 	streq	r0, [r0, #-38]	; 0x26
    517c:	0000a25e 	andeq	sl, r0, lr, asr r2
    5180:	d3100000 	tstle	r0, #0
    5184:	05000024 	streq	r0, [r0, #-36]	; 0x24
    5188:	0000a261 	andeq	sl, r0, r1, ror #4
    518c:	68100200 	ldmdavs	r0, {r9}
    5190:	05000026 	streq	r0, [r0, #-38]	; 0x26
    5194:	0000a264 	andeq	sl, r0, r4, ror #4
    5198:	d7100400 	ldrle	r0, [r0, -r0, lsl #8]
    519c:	05000025 	streq	r0, [r0, #-37]	; 0x25
    51a0:	0000a267 	andeq	sl, r0, r7, ror #4
    51a4:	af100600 	svcge	0x00100600
    51a8:	05000026 	streq	r0, [r0, #-38]	; 0x26
    51ac:	0000b86a 	andeq	fp, r0, sl, ror #16
    51b0:	23100800 	tstcs	r0, #0, 16
    51b4:	05000026 	streq	r0, [r0, #-38]	; 0x26
    51b8:	0000a26d 	andeq	sl, r0, sp, ror #4
    51bc:	03000c00 	movweq	r0, #3072	; 0xc00
    51c0:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
    51c4:	046c6f05 	strbteq	r6, [ip], #-3845	; 0xf05
    51c8:	c4110000 	ldrgt	r0, [r1], #-0
    51cc:	01000024 	tsteq	r0, r4, lsr #32
    51d0:	001c48e0 	andseq	r4, ip, r0, ror #17
    51d4:	0000dc08 	andeq	sp, r0, r8, lsl #24
    51d8:	219c0100 	orrscs	r0, ip, r0, lsl #2
    51dc:	12000006 	andne	r0, r0, #6
    51e0:	000026e4 	andeq	r2, r0, r4, ror #13
    51e4:	0621e001 	strteq	lr, [r1], -r1
    51e8:	262f0000 	strtcs	r0, [pc], -r0
    51ec:	9e130000 	cdpls	0, 1, cr0, cr3, cr0, {0}
    51f0:	5508001c 	strpl	r0, [r8, #-28]
    51f4:	0600000c 	streq	r0, [r0], -ip
    51f8:	14000005 	strne	r0, [r0], #-5
    51fc:	31015101 	tstcc	r1, r1, lsl #2
    5200:	03500114 	cmpeq	r0, #20, 2
    5204:	00244140 	eoreq	r4, r4, r0, asr #2
    5208:	001cac15 	andseq	sl, ip, r5, lsl ip
    520c:	000c5508 	andeq	r5, ip, r8, lsl #10
    5210:	00052000 	andeq	r2, r5, r0
    5214:	51011400 	tstpl	r1, r0, lsl #8
    5218:	01143001 	tsteq	r4, r1
    521c:	41400350 	cmpmi	r0, r0, asr r3
    5220:	b6130024 	ldrlt	r0, [r3], -r4, lsr #32
    5224:	5508001c 	strpl	r0, [r8, #-28]
    5228:	3a00000c 	bcc	5260 <_Min_Stack_Size+0x4e60>
    522c:	14000005 	strne	r0, [r0], #-5
    5230:	31015101 	tstcc	r1, r1, lsl #2
    5234:	03500114 	cmpeq	r0, #20, 2
    5238:	0010000a 	andseq	r0, r0, sl
    523c:	001cc415 	andseq	ip, ip, r5, lsl r4
    5240:	000c5508 	andeq	r5, ip, r8, lsl #10
    5244:	00055400 	andeq	r5, r5, r0, lsl #8
    5248:	51011400 	tstpl	r1, r0, lsl #8
    524c:	01143001 	tsteq	r4, r1
    5250:	000a0350 	andeq	r0, sl, r0, asr r3
    5254:	ce130010 	mrcgt	0, 0, r0, cr3, cr0, {0}
    5258:	6c08001c 	stcvs	0, cr0, [r8], {28}
    525c:	6e00000c 	cdpvs	0, 0, cr0, cr0, cr12, {0}
    5260:	14000005 	strne	r0, [r0], #-5
    5264:	31015101 	tstcc	r1, r1, lsl #2
    5268:	03500114 	cmpeq	r0, #20, 2
    526c:	0040000a 	subeq	r0, r0, sl
    5270:	001cdc15 	andseq	sp, ip, r5, lsl ip
    5274:	000c6c08 	andeq	r6, ip, r8, lsl #24
    5278:	00058800 	andeq	r8, r5, r0, lsl #16
    527c:	51011400 	tstpl	r1, r0, lsl #8
    5280:	01143001 	tsteq	r4, r1
    5284:	000a0350 	andeq	r0, sl, r0, asr r3
    5288:	e6130040 	ldr	r0, [r3], -r0, asr #32
    528c:	6c08001c 	stcvs	0, cr0, [r8], {28}
    5290:	a200000c 	andge	r0, r0, #12
    5294:	14000005 	strne	r0, [r0], #-5
    5298:	31015101 	tstcc	r1, r1, lsl #2
    529c:	03500114 	cmpeq	r0, #20, 2
    52a0:	0080000a 	addeq	r0, r0, sl
    52a4:	001cf415 	andseq	pc, ip, r5, lsl r4	; <UNPREDICTABLE>
    52a8:	000c6c08 	andeq	r6, ip, r8, lsl #24
    52ac:	0005bc00 	andeq	fp, r5, r0, lsl #24
    52b0:	51011400 	tstpl	r1, r0, lsl #8
    52b4:	01143001 	tsteq	r4, r1
    52b8:	000a0350 	andeq	r0, sl, r0, asr r3
    52bc:	fe130080 	cdp2	0, 1, cr0, cr3, cr0, {4}
    52c0:	5508001c 	strpl	r0, [r8, #-28]
    52c4:	d600000c 	strle	r0, [r0], -ip
    52c8:	14000005 	strne	r0, [r0], #-5
    52cc:	31015101 	tstcc	r1, r1, lsl #2
    52d0:	03500114 	cmpeq	r0, #20, 2
    52d4:	0020000a 	eoreq	r0, r0, sl
    52d8:	001d0c15 	andseq	r0, sp, r5, lsl ip
    52dc:	000c5508 	andeq	r5, ip, r8, lsl #10
    52e0:	0005f000 	andeq	pc, r5, r0
    52e4:	51011400 	tstpl	r1, r0, lsl #8
    52e8:	01143001 	tsteq	r4, r1
    52ec:	000a0350 	andeq	r0, sl, r0, asr r3
    52f0:	16130020 	ldrne	r0, [r3], -r0, lsr #32
    52f4:	5508001d 	strpl	r0, [r8, #-29]
    52f8:	0a00000c 	beq	5330 <_Min_Stack_Size+0x4f30>
    52fc:	14000006 	strne	r0, [r0], #-6
    5300:	31015101 	tstcc	r1, r1, lsl #2
    5304:	03500114 	cmpeq	r0, #20, 2
    5308:	00244040 	eoreq	r4, r4, r0, asr #32
    530c:	001d2416 	andseq	r2, sp, r6, lsl r4
    5310:	000c5508 	andeq	r5, ip, r8, lsl #10
    5314:	51011400 	tstpl	r1, r0, lsl #8
    5318:	01143001 	tsteq	r4, r1
    531c:	40400350 	submi	r0, r0, r0, asr r3
    5320:	17000024 	strne	r0, [r0, -r4, lsr #32]
    5324:	0003e004 	andeq	lr, r3, r4
    5328:	24801800 	strcs	r1, [r0], #2048	; 0x800
    532c:	1c010000 	stcne	0, cr0, [r1], {-0}
    5330:	001d2401 	andseq	r2, sp, r1, lsl #8
    5334:	00005208 	andeq	r5, r0, r8, lsl #4
    5338:	6c9c0100 	ldfvss	f0, [ip], {0}
    533c:	19000006 	stmdbne	r0, {r1, r2}
    5340:	000026e4 	andeq	r2, r0, r4, ror #13
    5344:	21011c01 	tstcs	r1, r1, lsl #24
    5348:	01000006 	tsteq	r0, r6
    534c:	264b1a50 			; <UNDEFINED> instruction: 0x264b1a50
    5350:	1c010000 	stcne	0, cr0, [r1], {-0}
    5354:	00066c01 	andeq	r6, r6, r1, lsl #24
    5358:	0026cd00 	eoreq	ip, r6, r0, lsl #26
    535c:	114c1b00 	cmpne	ip, r0, lsl #22
    5360:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    5364:	0000a201 	andeq	sl, r0, r1, lsl #4
    5368:	0026ee00 	eoreq	lr, r6, r0, lsl #28
    536c:	04170000 	ldreq	r0, [r7], #-0
    5370:	00000461 	andeq	r0, r0, r1, ror #8
    5374:	00275918 	eoreq	r5, r7, r8, lsl r9
    5378:	015c0100 	cmpeq	ip, r0, lsl #2
    537c:	08001d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip}
    5380:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5384:	07379c01 	ldreq	r9, [r7, -r1, lsl #24]!
    5388:	e4190000 	ldr	r0, [r9], #-0
    538c:	01000026 	tsteq	r0, r6, lsr #32
    5390:	0621015c 			; <UNDEFINED> instruction: 0x0621015c
    5394:	50010000 	andpl	r0, r1, r0
    5398:	00248e1a 	eoreq	r8, r4, sl, lsl lr
    539c:	015c0100 	cmpeq	ip, r0, lsl #2
    53a0:	00000737 	andeq	r0, r0, r7, lsr r7
    53a4:	00002718 	andeq	r2, r0, r8, lsl r7
    53a8:	00114c1b 	andseq	r4, r1, fp, lsl ip
    53ac:	015e0100 	cmpeq	lr, r0, lsl #2
    53b0:	000000a2 	andeq	r0, r0, r2, lsr #1
    53b4:	00002744 	andeq	r2, r0, r4, asr #14
    53b8:	0026a81b 	eoreq	sl, r6, fp, lsl r8
    53bc:	015e0100 	cmpeq	lr, r0, lsl #2
    53c0:	000000a2 	andeq	r0, r0, r2, lsr #1
    53c4:	00002779 	andeq	r2, r0, r9, ror r7
    53c8:	0027841b 	eoreq	r8, r7, fp, lsl r4
    53cc:	015e0100 	cmpeq	lr, r0, lsl #2
    53d0:	000000a2 	andeq	r0, r0, r2, lsr #1
    53d4:	000027a4 	andeq	r2, r0, r4, lsr #15
    53d8:	00278b1b 	eoreq	r8, r7, fp, lsl fp
    53dc:	015e0100 	cmpeq	lr, r0, lsl #2
    53e0:	000000a2 	andeq	r0, r0, r2, lsr #1
    53e4:	000027e2 	andeq	r2, r0, r2, ror #15
    53e8:	706d741c 	rsbvc	r7, sp, ip, lsl r4
    53ec:	015f0100 	cmpeq	pc, r0, lsl #2
    53f0:	000000b8 	strheq	r0, [r0], -r8
    53f4:	00002802 	andeq	r2, r0, r2, lsl #16
    53f8:	0027bd1b 	eoreq	fp, r7, fp, lsl sp
    53fc:	015f0100 	cmpeq	pc, r0, lsl #2
    5400:	000000b8 	strheq	r0, [r0], -r8
    5404:	00002838 	andeq	r2, r0, r8, lsr r8
    5408:	0001411b 	andeq	r4, r1, fp, lsl r1
    540c:	01610100 	cmneq	r1, r0, lsl #2
    5410:	000000b8 	strheq	r0, [r0], -r8
    5414:	00002863 	andeq	r2, r0, r3, ror #16
    5418:	00247b1b 	eoreq	r7, r4, fp, lsl fp
    541c:	01610100 	cmneq	r1, r0, lsl #2
    5420:	000000b8 	strheq	r0, [r0], -r8
    5424:	0000289e 	muleq	r0, lr, r8
    5428:	0024891b 	eoreq	r8, r4, fp, lsl r9
    542c:	01610100 	cmneq	r1, r0, lsl #2
    5430:	000000b8 	strheq	r0, [r0], -r8
    5434:	000028d1 	ldrdeq	r2, [r0], -r1
    5438:	bd041700 	stclt	7, cr1, [r4, #-0]
    543c:	18000004 	stmdane	r0, {r2}
    5440:	00002559 	andeq	r2, r0, r9, asr r5
    5444:	6801e001 	stmdavs	r1, {r0, sp, lr, pc}
    5448:	1808001e 	stmdane	r8, {r1, r2, r3, r4}
    544c:	01000000 	mrseq	r0, (UNDEF: 0)
    5450:	0007629c 	muleq	r7, ip, r2
    5454:	264b1900 	strbcs	r1, [fp], -r0, lsl #18
    5458:	e0010000 	and	r0, r1, r0
    545c:	00066c01 	andeq	r6, r6, r1, lsl #24
    5460:	00500100 	subseq	r0, r0, r0, lsl #2
    5464:	00274a18 	eoreq	r4, r7, r8, lsl sl
    5468:	01fc0100 	mvnseq	r0, r0, lsl #2
    546c:	08001e80 	stmdaeq	r0, {r7, r9, sl, fp, ip}
    5470:	0000000e 	andeq	r0, r0, lr
    5474:	07879c01 	streq	r9, [r7, r1, lsl #24]
    5478:	8e190000 	cdphi	0, 1, cr0, cr9, cr0, {0}
    547c:	01000024 	tsteq	r0, r4, lsr #32
    5480:	073701fc 			; <UNDEFINED> instruction: 0x073701fc
    5484:	50010000 	andpl	r0, r1, r0
    5488:	267d1800 	ldrbtcs	r1, [sp], -r0, lsl #16
    548c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    5490:	001e9002 	andseq	r9, lr, r2
    5494:	00001a08 	andeq	r1, r0, r8, lsl #20
    5498:	ba9c0100 	blt	fe7058a0 <_estack+0xde6d58a0>
    549c:	19000007 	stmdbne	r0, {r0, r1, r2}
    54a0:	000026e4 	andeq	r2, r0, r4, ror #13
    54a4:	21021901 	tstcs	r2, r1, lsl #18
    54a8:	01000006 	tsteq	r0, r6
    54ac:	0d711950 	ldcleq	9, cr1, [r1, #-320]!	; 0xfffffec0
    54b0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    54b4:	00012d02 	andeq	r2, r1, r2, lsl #26
    54b8:	00510100 	subseq	r0, r1, r0, lsl #2
    54bc:	0026c618 	eoreq	ip, r6, r8, lsl r6
    54c0:	02320100 	eorseq	r0, r2, #0, 2
    54c4:	08001eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip}
    54c8:	0000001a 	andeq	r0, r0, sl, lsl r0
    54cc:	07ed9c01 	strbeq	r9, [sp, r1, lsl #24]!
    54d0:	e4190000 	ldr	r0, [r9], #-0
    54d4:	01000026 	tsteq	r0, r6, lsr #32
    54d8:	06210232 			; <UNDEFINED> instruction: 0x06210232
    54dc:	50010000 	andpl	r0, r1, r0
    54e0:	000d7119 	andeq	r7, sp, r9, lsl r1
    54e4:	02320100 	eorseq	r0, r2, #0, 2
    54e8:	0000012d 	andeq	r0, r0, sp, lsr #2
    54ec:	18005101 	stmdane	r0, {r0, r8, ip, lr}
    54f0:	000025fe 	strdeq	r2, [r0], -lr
    54f4:	c8024d01 	stmdagt	r2, {r0, r8, sl, fp, lr}
    54f8:	1608001e 			; <UNDEFINED> instruction: 0x1608001e
    54fc:	01000000 	mrseq	r0, (UNDEF: 0)
    5500:	0008229c 	muleq	r8, ip, r2
    5504:	26e41900 	strbtcs	r1, [r4], r0, lsl #18
    5508:	4d010000 	stcmi	0, cr0, [r1, #-0]
    550c:	00062102 	andeq	r2, r6, r2, lsl #2
    5510:	1a500100 	bne	1405918 <_Min_Stack_Size+0x1405518>
    5514:	00002777 	andeq	r2, r0, r7, ror r7
    5518:	a2024d01 	andge	r4, r2, #1, 26	; 0x40
    551c:	04000000 	streq	r0, [r0], #-0
    5520:	00000029 	andeq	r0, r0, r9, lsr #32
    5524:	0024e018 	eoreq	lr, r4, r8, lsl r0
    5528:	02610100 	rsbeq	r0, r1, #0, 2
    552c:	08001ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip}
    5530:	0000001c 	andeq	r0, r0, ip, lsl r0
    5534:	08559c01 	ldmdaeq	r5, {r0, sl, fp, ip, pc}^
    5538:	e4190000 	ldr	r0, [r9], #-0
    553c:	01000026 	tsteq	r0, r6, lsr #32
    5540:	06210261 	strteq	r0, [r1], -r1, ror #4
    5544:	50010000 	andpl	r0, r1, r0
    5548:	00259d19 	eoreq	r9, r5, r9, lsl sp
    554c:	02610100 	rsbeq	r0, r1, #0, 2
    5550:	000000a2 	andeq	r0, r0, r2, lsr #1
    5554:	18005101 	stmdane	r0, {r0, r8, ip, lr}
    5558:	0000253b 	andeq	r2, r0, fp, lsr r5
    555c:	fc027b01 	stc2	11, cr7, [r2], {1}
    5560:	1e08001e 	mcrne	0, 0, r0, cr8, cr14, {0}
    5564:	01000000 	mrseq	r0, (UNDEF: 0)
    5568:	0008889c 	muleq	r8, ip, r8
    556c:	26e41900 	strbtcs	r1, [r4], r0, lsl #18
    5570:	7b010000 	blvc	45578 <_Min_Stack_Size+0x45178>
    5574:	00062102 	andeq	r2, r6, r2, lsl #2
    5578:	19500100 	ldmdbne	r0, {r8}^
    557c:	000025b3 			; <UNDEFINED> instruction: 0x000025b3
    5580:	a2027b01 	andge	r7, r2, #1024	; 0x400
    5584:	01000000 	mrseq	r0, (UNDEF: 0)
    5588:	7e180051 	mrcvc	0, 0, r0, cr8, cr1, {2}
    558c:	01000025 	tsteq	r0, r5, lsr #32
    5590:	1f1c0293 	svcne	0x001c0293
    5594:	001a0800 	andseq	r0, sl, r0, lsl #16
    5598:	9c010000 	stcls	0, cr0, [r1], {-0}
    559c:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    55a0:	0026e419 	eoreq	lr, r6, r9, lsl r4
    55a4:	02930100 	addseq	r0, r3, #0, 2
    55a8:	00000621 	andeq	r0, r0, r1, lsr #12
    55ac:	71195001 	tstvc	r9, r1
    55b0:	0100000d 	tsteq	r0, sp
    55b4:	012d0293 			; <UNDEFINED> instruction: 0x012d0293
    55b8:	51010000 	mrspl	r0, (UNDEF: 1)
    55bc:	265a1800 	ldrbcs	r1, [sl], -r0, lsl #16
    55c0:	b2010000 	andlt	r0, r1, #0
    55c4:	001f3802 	andseq	r3, pc, r2, lsl #16
    55c8:	00001a08 	andeq	r1, r0, r8, lsl #20
    55cc:	ee9c0100 	fmle	f0, f4, f0
    55d0:	19000008 	stmdbne	r0, {r3}
    55d4:	000026e4 	andeq	r2, r0, r4, ror #13
    55d8:	2102b201 	tstcs	r2, r1, lsl #4
    55dc:	01000006 	tsteq	r0, r6
    55e0:	0d711950 	ldcleq	9, cr1, [r1, #-320]!	; 0xfffffec0
    55e4:	b2010000 	andlt	r0, r1, #0
    55e8:	00012d02 	andeq	r2, r1, r2, lsl #26
    55ec:	00510100 	subseq	r0, r1, r0, lsl #2
    55f0:	00276218 	eoreq	r6, r7, r8, lsl r2
    55f4:	02d70100 	sbcseq	r0, r7, #0, 2
    55f8:	08001f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip}
    55fc:	00000048 	andeq	r0, r0, r8, asr #32
    5600:	09439c01 	stmdbeq	r3, {r0, sl, fp, ip, pc}^
    5604:	8e190000 	cdphi	0, 1, cr0, cr9, cr0, {0}
    5608:	01000025 	tsteq	r0, r5, lsr #32
    560c:	062102d7 			; <UNDEFINED> instruction: 0x062102d7
    5610:	50010000 	andpl	r0, r1, r0
    5614:	00248e1a 	eoreq	r8, r4, sl, lsl lr
    5618:	02d70100 	sbcseq	r0, r7, #0, 2
    561c:	00000737 	andeq	r0, r0, r7, lsr r7
    5620:	00002925 	andeq	r2, r0, r5, lsr #18
    5624:	00114c1b 	andseq	r4, r1, fp, lsl ip
    5628:	02d90100 	sbcseq	r0, r9, #0, 2
    562c:	000000a2 	andeq	r0, r0, r2, lsr #1
    5630:	00002946 	andeq	r2, r0, r6, asr #18
    5634:	706d741c 	rsbvc	r7, sp, ip, lsl r4
    5638:	02d90100 	sbcseq	r0, r9, #0, 2
    563c:	000000a2 	andeq	r0, r0, r2, lsr #1
    5640:	00002970 	andeq	r2, r0, r0, ror r9
    5644:	27a91d00 	strcs	r1, [r9, r0, lsl #26]!
    5648:	21010000 	mrscs	r0, (UNDEF: 1)
    564c:	0000a203 	andeq	sl, r0, r3, lsl #4
    5650:	001f9c00 	andseq	r9, pc, r0, lsl #24
    5654:	00000608 	andeq	r0, r0, r8, lsl #12
    5658:	6e9c0100 	fmlvse	f0, f4, f0
    565c:	1a000009 	bne	5688 <_Min_Stack_Size+0x5288>
    5660:	000026e4 	andeq	r2, r0, r4, ror #13
    5664:	21032101 	tstcs	r3, r1, lsl #2
    5668:	b8000006 	stmdalt	r0, {r1, r2}
    566c:	00000029 	andeq	r0, r0, r9, lsr #32
    5670:	00279818 	eoreq	r9, r7, r8, lsl r8
    5674:	03310100 	teqeq	r1, #0, 2
    5678:	08001fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip}
    567c:	00000004 	andeq	r0, r0, r4
    5680:	09a19c01 	stmibeq	r1!, {r0, sl, fp, ip, pc}
    5684:	e4190000 	ldr	r0, [r9], #-0
    5688:	01000026 	tsteq	r0, r6, lsr #32
    568c:	06210331 			; <UNDEFINED> instruction: 0x06210331
    5690:	50010000 	andpl	r0, r1, r0
    5694:	001d1619 	andseq	r1, sp, r9, lsl r6
    5698:	03310100 	teqeq	r1, #0, 2
    569c:	000000a2 	andeq	r0, r0, r2, lsr #1
    56a0:	18005101 	stmdane	r0, {r0, r8, ip, lr}
    56a4:	0000272e 	andeq	r2, r0, lr, lsr #14
    56a8:	a8038b01 	stmdage	r3, {r0, r8, r9, fp, pc}
    56ac:	1a08001f 	bne	205730 <_Min_Stack_Size+0x205330>
    56b0:	01000000 	mrseq	r0, (UNDEF: 0)
    56b4:	0009d49c 	muleq	r9, ip, r4
    56b8:	26e41900 	strbtcs	r1, [r4], r0, lsl #18
    56bc:	8b010000 	blhi	456c4 <_Min_Stack_Size+0x452c4>
    56c0:	00062103 	andeq	r2, r6, r3, lsl #2
    56c4:	19500100 	ldmdbne	r0, {r8}^
    56c8:	00000d71 	andeq	r0, r0, r1, ror sp
    56cc:	2d038b01 	vstrcs	d8, [r3, #-4]
    56d0:	01000001 	tsteq	r0, r1
    56d4:	c7180051 			; <UNDEFINED> instruction: 0xc7180051
    56d8:	01000025 	tsteq	r0, r5, lsr #32
    56dc:	1fc403a1 	svcne	0x00c403a1
    56e0:	000c0800 	andeq	r0, ip, r0, lsl #16
    56e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    56e8:	000009f9 	strdeq	r0, [r0], -r9
    56ec:	0026e419 	eoreq	lr, r6, r9, lsl r4
    56f0:	03a10100 			; <UNDEFINED> instruction: 0x03a10100
    56f4:	00000621 	andeq	r0, r0, r1, lsr #12
    56f8:	1d005001 	stcne	0, cr5, [r0, #-4]
    56fc:	0000273f 	andeq	r2, r0, pc, lsr r7
    5700:	a203b301 	andge	fp, r3, #67108864	; 0x4000000
    5704:	d0000000 	andle	r0, r0, r0
    5708:	0c08001f 	stceq	0, cr0, [r8], {31}
    570c:	01000000 	mrseq	r0, (UNDEF: 0)
    5710:	000a429c 	muleq	sl, ip, r2
    5714:	26e41a00 	strbtcs	r1, [r4], r0, lsl #20
    5718:	b3010000 	movwlt	r0, #4096	; 0x1000
    571c:	00062103 	andeq	r2, r6, r3, lsl #2
    5720:	0029d900 	eoreq	sp, r9, r0, lsl #18
    5724:	25ab1900 	strcs	r1, [fp, #2304]!	; 0x900
    5728:	b3010000 	movwlt	r0, #4096	; 0x1000
    572c:	00009703 	andeq	r9, r0, r3, lsl #14
    5730:	1b510100 	blne	1445b38 <_Min_Stack_Size+0x1445738>
    5734:	00002511 	andeq	r2, r0, r1, lsl r5
    5738:	a203b501 	andge	fp, r3, #4194304	; 0x400000
    573c:	fa000000 	blx	5744 <_Min_Stack_Size+0x5344>
    5740:	00000029 	andeq	r0, r0, r9, lsr #32
    5744:	0024fc1d 	eoreq	pc, r4, sp, lsl ip	; <UNPREDICTABLE>
    5748:	03cc0100 	biceq	r0, ip, #0, 2
    574c:	000000a2 	andeq	r0, r0, r2, lsr #1
    5750:	08001fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
    5754:	00000006 	andeq	r0, r0, r6
    5758:	0a6d9c01 	beq	1b6c764 <_Min_Stack_Size+0x1b6c364>
    575c:	e41a0000 	ldr	r0, [sl], #-0
    5760:	01000026 	tsteq	r0, r6, lsr #32
    5764:	062103cc 	strteq	r0, [r1], -ip, asr #7
    5768:	2a190000 	bcs	645770 <_Min_Stack_Size+0x645370>
    576c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5770:	00002518 	andeq	r2, r0, r8, lsl r5
    5774:	e403f101 	str	pc, [r3], #-257	; 0x101
    5778:	1408001f 	strne	r0, [r8], #-31
    577c:	01000000 	mrseq	r0, (UNDEF: 0)
    5780:	000ab09c 	muleq	sl, ip, r0
    5784:	26e41900 	strbtcs	r1, [r4], r0, lsl #18
    5788:	f1010000 	setend	le
    578c:	00062103 	andeq	r2, r6, r3, lsl #2
    5790:	1a500100 	bne	1405b98 <_Min_Stack_Size+0x1405798>
    5794:	0000263c 	andeq	r2, r0, ip, lsr r6
    5798:	a203f101 	andge	pc, r3, #1073741824	; 0x40000000
    579c:	3a000000 	bcc	57a4 <_Min_Stack_Size+0x53a4>
    57a0:	1900002a 	stmdbne	r0, {r1, r3, r5}
    57a4:	00000d71 	andeq	r0, r0, r1, ror sp
    57a8:	2d03f101 	stfcsd	f7, [r3, #-4]
    57ac:	01000001 	tsteq	r0, r1
    57b0:	a3180052 	tstge	r8, #82	; 0x52
    57b4:	01000024 	tsteq	r0, r4, lsr #32
    57b8:	1ff8045d 	svcne	0x00f8045d
    57bc:	001e0800 	andseq	r0, lr, r0, lsl #16
    57c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    57c4:	00000b13 	andeq	r0, r0, r3, lsl fp
    57c8:	0026e419 	eoreq	lr, r6, r9, lsl r4
    57cc:	045d0100 	ldrbeq	r0, [sp], #-256	; 0x100
    57d0:	00000621 	andeq	r0, r0, r1, lsr #12
    57d4:	f31a5001 	vhadd.u16	d5, d10, d1
    57d8:	01000025 	tsteq	r0, r5, lsr #32
    57dc:	0097045d 	addseq	r0, r7, sp, asr r4
    57e0:	2a740000 	bcs	1d057e8 <_Min_Stack_Size+0x1d053e8>
    57e4:	71190000 	tstvc	r9, r0
    57e8:	0100000d 	tsteq	r0, sp
    57ec:	012d045d 	teqeq	sp, sp, asr r4
    57f0:	52010000 	andpl	r0, r1, #0
    57f4:	0019ac1b 	andseq	sl, r9, fp, lsl ip
    57f8:	045f0100 	ldrbeq	r0, [pc], #-256	; 5800 <_Min_Stack_Size+0x5400>
    57fc:	000000a2 	andeq	r0, r0, r2, lsr #1
    5800:	00002a95 	muleq	r0, r5, sl
    5804:	001ad51b 	andseq	sp, sl, fp, lsl r5
    5808:	045f0100 	ldrbeq	r0, [pc], #-256	; 5810 <_Min_Stack_Size+0x5410>
    580c:	000000a2 	andeq	r0, r0, r2, lsr #1
    5810:	00002ac2 	andeq	r2, r0, r2, asr #21
    5814:	25681d00 	strbcs	r1, [r8, #-3328]!	; 0xd00
    5818:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    581c:	0000ff04 	andeq	pc, r0, r4, lsl #30
    5820:	00201800 	eoreq	r1, r0, r0, lsl #16
    5824:	00000c08 	andeq	r0, r0, r8, lsl #24
    5828:	5c9c0100 	ldfpls	f0, [ip], {0}
    582c:	1a00000b 	bne	5860 <_Min_Stack_Size+0x5460>
    5830:	000026e4 	andeq	r2, r0, r4, ror #13
    5834:	21048901 	tstcs	r4, r1, lsl #18
    5838:	ec000006 	stc	0, cr0, [r0], {6}
    583c:	1900002a 	stmdbne	r0, {r1, r3, r5}
    5840:	000025e6 	andeq	r2, r0, r6, ror #11
    5844:	a2048901 	andge	r8, r4, #16384	; 0x4000
    5848:	01000000 	mrseq	r0, (UNDEF: 0)
    584c:	0f711b51 	svceq	0x00711b51
    5850:	8b010000 	blhi	45858 <_Min_Stack_Size+0x45458>
    5854:	0000ff04 	andeq	pc, r0, r4, lsl #30
    5858:	002b0d00 	eoreq	r0, fp, r0, lsl #26
    585c:	14180000 	ldrne	r0, [r8], #-0
    5860:	01000027 	tsteq	r0, r7, lsr #32
    5864:	202404b2 	strhtcs	r0, [r4], -r2
    5868:	00080800 	andeq	r0, r8, r0, lsl #16
    586c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5870:	00000b91 	muleq	r0, r1, fp
    5874:	0026e419 	eoreq	lr, r6, r9, lsl r4
    5878:	04b20100 	ldrteq	r0, [r2], #256	; 0x100
    587c:	00000621 	andeq	r0, r0, r1, lsr #12
    5880:	e61a5001 	ldr	r5, [sl], -r1
    5884:	01000025 	tsteq	r0, r5, lsr #32
    5888:	00a204b2 	strhteq	r0, [r2], r2
    588c:	2b350000 	blcs	d45894 <_Min_Stack_Size+0xd45494>
    5890:	1d000000 	stcne	0, cr0, [r0, #-0]
    5894:	00002527 	andeq	r2, r0, r7, lsr #10
    5898:	0b04cb01 	bleq	1384a4 <_Min_Stack_Size+0x1380a4>
    589c:	2c000001 	stccs	0, cr0, [r0], {1}
    58a0:	2a080020 	bcs	205928 <_Min_Stack_Size+0x205528>
    58a4:	01000000 	mrseq	r0, (UNDEF: 0)
    58a8:	000c089c 	muleq	ip, ip, r8
    58ac:	26e41a00 	strbtcs	r1, [r4], r0, lsl #20
    58b0:	cb010000 	blgt	458b8 <_Min_Stack_Size+0x454b8>
    58b4:	00062104 	andeq	r2, r6, r4, lsl #2
    58b8:	002b5600 	eoreq	r5, fp, r0, lsl #12
    58bc:	25f31a00 	ldrbcs	r1, [r3, #2560]!	; 0xa00
    58c0:	cb010000 	blgt	458c8 <_Min_Stack_Size+0x454c8>
    58c4:	00009704 	andeq	r9, r0, r4, lsl #14
    58c8:	002b7700 	eoreq	r7, fp, r0, lsl #14
    58cc:	0f711b00 	svceq	0x00711b00
    58d0:	cd010000 	stcgt	0, cr0, [r1, #-0]
    58d4:	00010b04 	andeq	r0, r1, r4, lsl #22
    58d8:	002b9800 	eoreq	r9, fp, r0, lsl #16
    58dc:	19ac1e00 	stmibne	ip!, {r9, sl, fp, ip}
    58e0:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    58e4:	0000a204 	andeq	sl, r0, r4, lsl #4
    58e8:	1ad51b00 	bne	ff54c4f0 <_estack+0xdf51c4f0>
    58ec:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    58f0:	0000a204 	andeq	sl, r0, r4, lsl #4
    58f4:	002bb700 	eoreq	fp, fp, r0, lsl #14
    58f8:	1fc71b00 	svcne	0x00c71b00
    58fc:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    5900:	0000a204 	andeq	sl, r0, r4, lsl #4
    5904:	002bd300 	eoreq	sp, fp, r0, lsl #6
    5908:	8e180000 	cdphi	0, 1, cr0, cr8, cr0, {0}
    590c:	01000026 	tsteq	r0, r6, lsr #32
    5910:	20580502 	subscs	r0, r8, r2, lsl #10
    5914:	00120800 	andseq	r0, r2, r0, lsl #16
    5918:	9c010000 	stcls	0, cr0, [r1], {-0}
    591c:	00000c49 	andeq	r0, r0, r9, asr #24
    5920:	0026e419 	eoreq	lr, r6, r9, lsl r4
    5924:	05020100 	streq	r0, [r2, #-256]	; 0x100
    5928:	00000621 	andeq	r0, r0, r1, lsr #12
    592c:	f31a5001 	vhadd.u16	d5, d10, d1
    5930:	01000025 	tsteq	r0, r5, lsr #32
    5934:	00970502 	addseq	r0, r7, r2, lsl #10
    5938:	2bfe0000 	blcs	fff85940 <_estack+0xdff55940>
    593c:	ac1e0000 	ldcge	0, cr0, [lr], {-0}
    5940:	01000019 	tsteq	r0, r9, lsl r0
    5944:	00a20504 	adceq	r0, r2, r4, lsl #10
    5948:	1f000000 	svcne	0x00000000
    594c:	000003a0 	andeq	r0, r0, r0, lsr #7
    5950:	e406a706 	str	sl, [r6], #-1798	; 0x706
    5954:	20000000 	andcs	r0, r0, r0
    5958:	000013cf 	andeq	r1, r0, pc, asr #7
    595c:	6c024a07 	stcvs	10, cr4, [r2], {7}
    5960:	2100000c 	tstcs	r0, ip
    5964:	000000b8 	strheq	r0, [r0], -r8
    5968:	00012d21 	andeq	r2, r1, r1, lsr #26
    596c:	a5220000 	strge	r0, [r2, #-0]!
    5970:	07000010 	smladeq	r0, r0, r0, r0
    5974:	b8210249 	stmdalt	r1!, {r0, r3, r6, r9}
    5978:	21000000 	mrscs	r0, (UNDEF: 0)
    597c:	0000012d 	andeq	r0, r0, sp, lsr #2
    5980:	033c0000 	teqeq	ip, #0
    5984:	00040000 	andeq	r0, r4, r0
    5988:	00001185 	andeq	r1, r0, r5, lsl #3
    598c:	02870104 	addeq	r0, r7, #4, 2
    5990:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    5994:	ab000028 	blge	5a3c <_Min_Stack_Size+0x563c>
    5998:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    599c:	00000006 	andeq	r0, r0, r6
    59a0:	2f000000 	svccs	0x00000000
    59a4:	02000024 	andeq	r0, r0, #36	; 0x24
    59a8:	01530601 	cmpeq	r3, r1, lsl #12
    59ac:	01020000 	mrseq	r0, (UNDEF: 2)
    59b0:	00015108 	andeq	r5, r1, r8, lsl #2
    59b4:	05020200 	streq	r0, [r2, #-512]	; 0x200
    59b8:	00000106 	andeq	r0, r0, r6, lsl #2
    59bc:	e8070202 	stmda	r7, {r1, r9}
    59c0:	03000001 	movweq	r0, #1
    59c4:	0000037a 	andeq	r0, r0, sl, ror r3
    59c8:	004c3702 	subeq	r3, ip, r2, lsl #14
    59cc:	04020000 	streq	r0, [r2], #-0
    59d0:	0000ec05 	andeq	lr, r0, r5, lsl #24
    59d4:	00510300 	subseq	r0, r1, r0, lsl #6
    59d8:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    59dc:	0000005e 	andeq	r0, r0, lr, asr r0
    59e0:	7b070402 	blvc	1c69f0 <_Min_Stack_Size+0x1c65f0>
    59e4:	02000001 	andeq	r0, r0, #1
    59e8:	00e70508 	rsceq	r0, r7, r8, lsl #10
    59ec:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    59f0:	00017607 	andeq	r7, r1, r7, lsl #12
    59f4:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    59f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    59fc:	80070402 	andhi	r0, r7, r2, lsl #8
    5a00:	03000001 	movweq	r0, #1
    5a04:	0000037c 	andeq	r0, r0, ip, ror r3
    5a08:	00414103 	subeq	r4, r1, r3, lsl #2
    5a0c:	53030000 	movwpl	r0, #12288	; 0x3000
    5a10:	03000000 	movweq	r0, #0
    5a14:	00005342 	andeq	r5, r0, r2, asr #6
    5a18:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5a1c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5a20:	00008c05 	andeq	r8, r0, r5, lsl #24
    5a24:	00810500 	addeq	r0, r1, r0, lsl #10
    5a28:	01060000 	mrseq	r0, (UNDEF: 6)
    5a2c:	be01f704 	cdplt	7, 0, cr15, cr1, cr4, {0}
    5a30:	07000000 	streq	r0, [r0, -r0]
    5a34:	00000ed2 	ldrdeq	r0, [r0], -r2
    5a38:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    5a3c:	00010054 	andeq	r0, r1, r4, asr r0
    5a40:	00231709 	eoreq	r1, r3, r9, lsl #14
    5a44:	01f70400 	mvnseq	r0, r0, lsl #8
    5a48:	000000a8 	andeq	r0, r0, r8, lsr #1
    5a4c:	00228e09 	eoreq	r8, r2, r9, lsl #28
    5a50:	01f70400 	mvnseq	r0, r0, lsl #8
    5a54:	000000a8 	andeq	r0, r0, r8, lsr #1
    5a58:	f9040106 			; <UNDEFINED> instruction: 0xf9040106
    5a5c:	0000ec01 	andeq	lr, r0, r1, lsl #24
    5a60:	048b0700 	streq	r0, [fp], #1792	; 0x700
    5a64:	07000000 	streq	r0, [r0, -r0]
    5a68:	000005c3 	andeq	r0, r0, r3, asr #11
    5a6c:	2d090001 	stccs	0, cr0, [r9, #-4]
    5a70:	04000009 	streq	r0, [r0], #-9
    5a74:	00d601f9 	ldrsheq	r0, [r6], #25
    5a78:	180a0000 	stmdane	sl, {}	; <UNPREDICTABLE>
    5a7c:	4f033004 	svcmi	0x00033004
    5a80:	0b000001 	bleq	5a8c <_Min_Stack_Size+0x568c>
    5a84:	00524d49 	subseq	r4, r2, r9, asr #26
    5a88:	9e033204 	cdpls	2, 0, cr3, cr3, cr4, {0}
    5a8c:	00000000 	andeq	r0, r0, r0
    5a90:	524d450b 	subpl	r4, sp, #46137344	; 0x2c00000
    5a94:	03330400 	teqeq	r3, #0, 8
    5a98:	0000009e 	muleq	r0, lr, r0
    5a9c:	28090c04 	stmdacs	r9, {r2, sl, fp}
    5aa0:	34040000 	strcc	r0, [r4], #-0
    5aa4:	00009e03 	andeq	r9, r0, r3, lsl #28
    5aa8:	7c0c0800 	stcvc	8, cr0, [ip], {-0}
    5aac:	04000028 	streq	r0, [r0], #-40	; 0x28
    5ab0:	009e0335 	addseq	r0, lr, r5, lsr r3
    5ab4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    5ab8:	00002881 	andeq	r2, r0, r1, lsl #17
    5abc:	9e033604 	cfmadd32ls	mvax0, mvfx3, mvfx3, mvfx4
    5ac0:	10000000 	andne	r0, r0, r0
    5ac4:	0052500b 	subseq	r5, r2, fp
    5ac8:	9e033704 	cdpls	7, 0, cr3, cr3, cr4, {0}
    5acc:	14000000 	strne	r0, [r0], #-0
    5ad0:	27fc0900 	ldrbcs	r0, [ip, r0, lsl #18]!
    5ad4:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    5ad8:	0000f803 	andeq	pc, r0, r3, lsl #16
    5adc:	05010d00 	streq	r0, [r1, #-3328]	; 0xd00
    5ae0:	00017037 	andeq	r7, r1, r7, lsr r0
    5ae4:	09830700 	stmibeq	r3, {r8, r9, sl}
    5ae8:	07000000 	streq	r0, [r0, -r0]
    5aec:	00000c1a 	andeq	r0, r0, sl, lsl ip
    5af0:	89030004 	stmdbhi	r3, {r2}
    5af4:	05000005 	streq	r0, [r0, #-5]
    5af8:	00015b3a 	andeq	r5, r1, sl, lsr fp
    5afc:	05010d00 	streq	r0, [r1, #-3328]	; 0xd00
    5b00:	00019643 	andeq	r9, r1, r3, asr #12
    5b04:	0b730700 	bleq	1cc770c <_Min_Stack_Size+0x1cc730c>
    5b08:	07080000 	streq	r0, [r8, -r0]
    5b0c:	000005ef 	andeq	r0, r0, pc, ror #11
    5b10:	046f070c 	strbteq	r0, [pc], #-1804	; 5b18 <_Min_Stack_Size+0x5718>
    5b14:	00100000 	andseq	r0, r0, r0
    5b18:	000b4403 	andeq	r4, fp, r3, lsl #8
    5b1c:	7b470500 	blvc	11c6f24 <_Min_Stack_Size+0x11c6b24>
    5b20:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    5b24:	da500508 	ble	1406f4c <_Min_Stack_Size+0x1406b4c>
    5b28:	0f000001 	svceq	0x00000001
    5b2c:	000008d4 	ldrdeq	r0, [r0], -r4
    5b30:	008c5205 	addeq	r5, ip, r5, lsl #4
    5b34:	0f000000 	svceq	0x00000000
    5b38:	00000979 	andeq	r0, r0, r9, ror r9
    5b3c:	01705505 	cmneq	r0, r5, lsl #10
    5b40:	0f040000 	svceq	0x00040000
    5b44:	00000943 	andeq	r0, r0, r3, asr #18
    5b48:	01965805 	orrseq	r5, r6, r5, lsl #16
    5b4c:	0f050000 	svceq	0x00050000
    5b50:	0000043c 	andeq	r0, r0, ip, lsr r4
    5b54:	00ec5b05 	rsceq	r5, ip, r5, lsl #22
    5b58:	00060000 	andeq	r0, r6, r0
    5b5c:	000b6203 	andeq	r6, fp, r3, lsl #4
    5b60:	a15d0500 	cmpge	sp, r0, lsl #10
    5b64:	10000001 	andne	r0, r0, r1
    5b68:	00002887 	andeq	r2, r0, r7, lsl #17
    5b6c:	206c6e01 	rsbcs	r6, ip, r1, lsl #28
    5b70:	001e0800 	andseq	r0, lr, r0, lsl #16
    5b74:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b78:	0006c211 	andeq	ip, r6, r1, lsl r2
    5b7c:	8c7e0100 	ldfhie	f0, [lr], #-0
    5b80:	80080020 	andhi	r0, r8, r0, lsr #32
    5b84:	01000000 	mrseq	r0, (UNDEF: 0)
    5b88:	00022a9c 	muleq	r2, ip, sl
    5b8c:	27dd1200 	ldrbcs	r1, [sp, r0, lsl #4]
    5b90:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    5b94:	0000022a 	andeq	r0, r0, sl, lsr #4
    5b98:	00002c1f 	andeq	r2, r0, pc, lsl ip
    5b9c:	706d7413 	rsbvc	r7, sp, r3, lsl r4
    5ba0:	8c800100 	stfhis	f0, [r0], {0}
    5ba4:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    5ba8:	0000002c 	andeq	r0, r0, ip, lsr #32
    5bac:	01da0414 	bicseq	r0, sl, r4, lsl r4
    5bb0:	0e110000 	cdpeq	0, 1, cr0, cr1, cr0, {0}
    5bb4:	01000028 	tsteq	r0, r8, lsr #32
    5bb8:	00210cb6 	strhteq	r0, [r1], -r6
    5bbc:	00000e08 	andeq	r0, r0, r8, lsl #28
    5bc0:	539c0100 	orrspl	r0, ip, #0, 2
    5bc4:	15000002 	strne	r0, [r0, #-2]
    5bc8:	000027dd 	ldrdeq	r2, [r0], -sp
    5bcc:	022ab601 	eoreq	fp, sl, #1048576	; 0x100000
    5bd0:	50010000 	andpl	r0, r1, r0
    5bd4:	27c41100 	strbcs	r1, [r4, r0, lsl #2]
    5bd8:	c5010000 	strgt	r0, [r1, #-0]
    5bdc:	0800211c 	stmdaeq	r0, {r2, r3, r4, r8, sp}
    5be0:	00000010 	andeq	r0, r0, r0, lsl r0
    5be4:	02789c01 	rsbseq	r9, r8, #256	; 0x100
    5be8:	d4120000 	ldrle	r0, [r2], #-0
    5bec:	01000008 	tsteq	r0, r8
    5bf0:	00008cc5 	andeq	r8, r0, r5, asr #25
    5bf4:	002d1e00 	eoreq	r1, sp, r0, lsl #28
    5bf8:	1d160000 	ldcne	0, cr0, [r6, #-0]
    5bfc:	01000007 	tsteq	r0, r7
    5c00:	0000bee3 	andeq	fp, r0, r3, ror #29
    5c04:	00212c00 	eoreq	r2, r1, r0, lsl #24
    5c08:	00001408 	andeq	r1, r0, r8, lsl #8
    5c0c:	b09c0100 	addslt	r0, ip, r0, lsl #2
    5c10:	12000002 	andne	r0, r0, #2
    5c14:	000008d4 	ldrdeq	r0, [r0], -r4
    5c18:	008ce301 	addeq	lr, ip, r1, lsl #6
    5c1c:	2d3f0000 	ldccs	0, cr0, [pc, #-0]	; 5c24 <_Min_Stack_Size+0x5824>
    5c20:	71170000 	tstvc	r7, r0
    5c24:	0100000f 	tsteq	r0, pc
    5c28:	0000bee5 	andeq	fp, r0, r5, ror #29
    5c2c:	002d6000 	eoreq	r6, sp, r0
    5c30:	ed110000 	ldc	0, cr0, [r1, #-0]
    5c34:	01000027 	tsteq	r0, r7, lsr #32
    5c38:	002140fa 	strdeq	r4, [r1], -sl	; <UNPREDICTABLE>
    5c3c:	00000c08 	andeq	r0, r0, r8, lsl #24
    5c40:	d39c0100 	orrsle	r0, ip, #0, 2
    5c44:	15000002 	strne	r0, [r0, #-2]
    5c48:	000008d4 	ldrdeq	r0, [r0], -r4
    5c4c:	008cfa01 	addeq	pc, ip, r1, lsl #20
    5c50:	50010000 	andpl	r0, r1, r0
    5c54:	286b1800 	stmdacs	fp!, {fp, ip}^
    5c58:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    5c5c:	0000ca01 	andeq	ip, r0, r1, lsl #20
    5c60:	00214c00 	eoreq	r4, r1, r0, lsl #24
    5c64:	00001408 	andeq	r1, r0, r8, lsl #8
    5c68:	0e9c0100 	fmleqe	f0, f4, f0
    5c6c:	19000003 	stmdbne	r0, {r0, r1}
    5c70:	000008d4 	ldrdeq	r0, [r0], -r4
    5c74:	8c010801 	stchi	8, cr0, [r1], {1}
    5c78:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    5c7c:	1a00002d 	bne	5d38 <_Min_Stack_Size+0x5938>
    5c80:	00000f71 	andeq	r0, r0, r1, ror pc
    5c84:	be010a01 	vmlalt.f32	s0, s2, s2
    5c88:	ba000000 	blt	5c90 <_Min_Stack_Size+0x5890>
    5c8c:	0000002d 	andeq	r0, r0, sp, lsr #32
    5c90:	0005ca1b 	andeq	ip, r5, fp, lsl sl
    5c94:	01200100 	teqeq	r0, r0, lsl #2
    5c98:	08002160 	stmdaeq	r0, {r5, r6, r8, sp}
    5c9c:	0000000c 	andeq	r0, r0, ip
    5ca0:	03339c01 	teqeq	r3, #256	; 0x100
    5ca4:	d41c0000 	ldrle	r0, [ip], #-0
    5ca8:	01000008 	tsteq	r0, r8
    5cac:	008c0120 	addeq	r0, ip, r0, lsr #2
    5cb0:	50010000 	andpl	r0, r1, r0
    5cb4:	03a01d00 	moveq	r1, #0, 26
    5cb8:	a7060000 	strge	r0, [r6, -r0]
    5cbc:	0000a306 	andeq	sl, r0, r6, lsl #6
    5cc0:	086f0000 	stmdaeq	pc!, {}^	; <UNPREDICTABLE>
    5cc4:	00040000 	andeq	r0, r4, r0
    5cc8:	0000134a 	andeq	r1, r0, sl, asr #6
    5ccc:	02870104 	addeq	r0, r7, #4, 2
    5cd0:	61010000 	mrsvs	r0, (UNDEF: 1)
    5cd4:	ab00002c 	blge	5d8c <_Min_Stack_Size+0x598c>
    5cd8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    5cdc:	00000006 	andeq	r0, r0, r6
    5ce0:	8a000000 	bhi	5ce8 <_Min_Stack_Size+0x58e8>
    5ce4:	02000026 	andeq	r0, r0, #38	; 0x26
    5ce8:	01530601 	cmpeq	r3, r1, lsl #12
    5cec:	01020000 	mrseq	r0, (UNDEF: 2)
    5cf0:	00015108 	andeq	r5, r1, r8, lsl #2
    5cf4:	05020200 	streq	r0, [r2, #-512]	; 0x200
    5cf8:	00000106 	andeq	r0, r0, r6, lsl #2
    5cfc:	e8070202 	stmda	r7, {r1, r9}
    5d00:	03000001 	movweq	r0, #1
    5d04:	0000037a 	andeq	r0, r0, sl, ror r3
    5d08:	004c3702 	subeq	r3, ip, r2, lsl #14
    5d0c:	04020000 	streq	r0, [r2], #-0
    5d10:	0000ec05 	andeq	lr, r0, r5, lsl #24
    5d14:	00510300 	subseq	r0, r1, r0, lsl #6
    5d18:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    5d1c:	0000005e 	andeq	r0, r0, lr, asr r0
    5d20:	7b070402 	blvc	1c6d30 <_Min_Stack_Size+0x1c6930>
    5d24:	02000001 	andeq	r0, r0, #1
    5d28:	00e70508 	rsceq	r0, r7, r8, lsl #10
    5d2c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5d30:	00017607 	andeq	r7, r1, r7, lsl #12
    5d34:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    5d38:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5d3c:	80070402 	andhi	r0, r7, r2, lsl #8
    5d40:	03000001 	movweq	r0, #1
    5d44:	0000037c 	andeq	r0, r0, ip, ror r3
    5d48:	00414103 	subeq	r4, r1, r3, lsl #2
    5d4c:	53030000 	movwpl	r0, #12288	; 0x3000
    5d50:	03000000 	movweq	r0, #0
    5d54:	00005342 	andeq	r5, r0, r2, asr #6
    5d58:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5d5c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5d60:	00008c05 	andeq	r8, r0, r5, lsl #24
    5d64:	00810500 	addeq	r0, r1, r0, lsl #10
    5d68:	01060000 	mrseq	r0, (UNDEF: 6)
    5d6c:	be01f704 	cdplt	7, 0, cr15, cr1, cr4, {0}
    5d70:	07000000 	streq	r0, [r0, -r0]
    5d74:	00000ed2 	ldrdeq	r0, [r0], -r2
    5d78:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    5d7c:	00010054 	andeq	r0, r1, r4, asr r0
    5d80:	00231709 	eoreq	r1, r3, r9, lsl #14
    5d84:	01f70400 	mvnseq	r0, r0, lsl #8
    5d88:	000000a8 	andeq	r0, r0, r8, lsr #1
    5d8c:	00228e09 	eoreq	r8, r2, r9, lsl #28
    5d90:	01f70400 	mvnseq	r0, r0, lsl #8
    5d94:	000000a8 	andeq	r0, r0, r8, lsr #1
    5d98:	f9040106 			; <UNDEFINED> instruction: 0xf9040106
    5d9c:	0000ec01 	andeq	lr, r0, r1, lsl #24
    5da0:	048b0700 	streq	r0, [fp], #1792	; 0x700
    5da4:	07000000 	streq	r0, [r0, -r0]
    5da8:	000005c3 	andeq	r0, r0, r3, asr #11
    5dac:	2d090001 	stccs	0, cr0, [r9, #-4]
    5db0:	04000009 	streq	r0, [r0], #-9
    5db4:	00d601f9 	ldrsheq	r0, [r6], #25
    5db8:	000a0000 	andeq	r0, sl, r0
    5dbc:	02c7040c 	sbceq	r0, r7, #12, 8	; 0xc000000
    5dc0:	0000022f 	andeq	r0, r0, pc, lsr #4
    5dc4:	0052430b 	subseq	r4, r2, fp, lsl #6
    5dc8:	9e02c904 	cdpls	9, 0, cr12, cr2, cr4, {0}
    5dcc:	00000000 	andeq	r0, r0, r0
    5dd0:	5253490b 	subspl	r4, r3, #180224	; 0x2c000
    5dd4:	02ca0400 	sbceq	r0, sl, #0, 8
    5dd8:	0000009e 	muleq	r0, lr, r0
    5ddc:	237c0c04 	cmncs	ip, #4, 24	; 0x400
    5de0:	cb040000 	blgt	105de8 <_Min_Stack_Size+0x1059e8>
    5de4:	00009e02 	andeq	r9, r0, r2, lsl #28
    5de8:	910c0800 	tstls	ip, r0, lsl #16
    5dec:	0400002a 	streq	r0, [r0], #-42	; 0x2a
    5df0:	009e02cc 	addseq	r0, lr, ip, asr #5
    5df4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    5df8:	00002af9 	strdeq	r2, [r0], -r9
    5dfc:	9e02cd04 	cdpls	13, 0, cr12, cr2, cr4, {0}
    5e00:	10000000 	andne	r0, r0, r0
    5e04:	002d540c 	eoreq	r5, sp, ip, lsl #8
    5e08:	02ce0400 	sbceq	r0, lr, #0, 8
    5e0c:	0000009e 	muleq	r0, lr, r0
    5e10:	2d9d0c14 	ldccs	12, cr0, [sp, #80]	; 0x50
    5e14:	cf040000 	svcgt	0x00040000
    5e18:	00009e02 	andeq	r9, r0, r2, lsl #28
    5e1c:	c70c1800 	strgt	r1, [ip, -r0, lsl #16]
    5e20:	0400002c 	streq	r0, [r0], #-44	; 0x2c
    5e24:	009e02d0 			; <UNDEFINED> instruction: 0x009e02d0
    5e28:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    5e2c:	00002a7b 	andeq	r2, r0, fp, ror sl
    5e30:	9e02d104 	mvflss	f5, f4
    5e34:	20000000 	andcs	r0, r0, r0
    5e38:	002c300c 	eoreq	r3, ip, ip
    5e3c:	02d20400 	sbcseq	r0, r2, #0, 8
    5e40:	0000009e 	muleq	r0, lr, r0
    5e44:	2bd60c24 	blcs	ff588edc <_estack+0xdf558edc>
    5e48:	d3040000 	movwle	r0, #16384	; 0x4000
    5e4c:	00009e02 	andeq	r9, r0, r2, lsl #28
    5e50:	f90c2800 			; <UNDEFINED> instruction: 0xf90c2800
    5e54:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    5e58:	009e02d4 			; <UNDEFINED> instruction: 0x009e02d4
    5e5c:	0c2c0000 	stceq	0, cr0, [ip], #-0
    5e60:	000029bd 			; <UNDEFINED> instruction: 0x000029bd
    5e64:	9e02d504 	cfsh32ls	mvfx13, mvfx2, #4
    5e68:	30000000 	andcc	r0, r0, r0
    5e6c:	002c160c 	eoreq	r1, ip, ip, lsl #12
    5e70:	02d60400 	sbcseq	r0, r6, #0, 8
    5e74:	0000009e 	muleq	r0, lr, r0
    5e78:	2bd00c34 	blcs	ff408f50 <_estack+0xdf3d8f50>
    5e7c:	d7040000 	strle	r0, [r4, -r0]
    5e80:	00009e02 	andeq	r9, r0, r2, lsl #28
    5e84:	6f0c3800 	svcvs	0x000c3800
    5e88:	0400002b 	streq	r0, [r0], #-43	; 0x2b
    5e8c:	009e02d8 			; <UNDEFINED> instruction: 0x009e02d8
    5e90:	0b3c0000 	bleq	f05e98 <_Min_Stack_Size+0xf05a98>
    5e94:	00524f4f 	subseq	r4, r2, pc, asr #30
    5e98:	9e02d904 	cdpls	9, 0, cr13, cr2, cr4, {0}
    5e9c:	40000000 	andmi	r0, r0, r0
    5ea0:	524c4e0b 	subpl	r4, ip, #11, 28	; 0xb0
    5ea4:	02da0400 	sbcseq	r0, sl, #0, 8
    5ea8:	0000009e 	muleq	r0, lr, r0
    5eac:	574c0b44 	strbpl	r0, [ip, -r4, asr #22]
    5eb0:	db040052 	blle	106000 <_Min_Stack_Size+0x105c00>
    5eb4:	00009e02 	andeq	r9, r0, r2, lsl #28
    5eb8:	c40c4800 	strgt	r4, [ip], #-2048	; 0x800
    5ebc:	04000029 	streq	r0, [r0], #-41	; 0x29
    5ec0:	009e02dc 			; <UNDEFINED> instruction: 0x009e02dc
    5ec4:	0c4c0000 	mareq	acc0, r0, ip
    5ec8:	00001ba9 	andeq	r1, r0, r9, lsr #23
    5ecc:	2f02dd04 	svccs	0x0002dd04
    5ed0:	50000002 	andpl	r0, r0, r2
    5ed4:	00292a0d 	eoreq	r2, r9, sp, lsl #20
    5ed8:	02de0400 	sbcseq	r0, lr, #0, 8
    5edc:	0000024f 	andeq	r0, r0, pc, asr #4
    5ee0:	540d0400 	strpl	r0, [sp], #-1024	; 0x400
    5ee4:	0400002a 	streq	r0, [r0], #-42	; 0x2a
    5ee8:	025402df 	subseq	r0, r4, #-268435443	; 0xf000000d
    5eec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5ef0:	008c0e00 	addeq	r0, ip, r0, lsl #28
    5ef4:	023f0000 	eorseq	r0, pc, #0
    5ef8:	970f0000 	strls	r0, [pc, -r0]
    5efc:	eb000000 	bl	5f04 <_Min_Stack_Size+0x5b04>
    5f00:	008c0e00 	addeq	r0, ip, r0, lsl #28
    5f04:	024f0000 	subeq	r0, pc, #0
    5f08:	970f0000 	strls	r0, [pc, -r0]
    5f0c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    5f10:	023f0500 	eorseq	r0, pc, #0, 10
    5f14:	3f050000 	svccc	0x00050000
    5f18:	09000002 	stmdbeq	r0, {r1}
    5f1c:	00002d5a 	andeq	r2, r0, sl, asr sp
    5f20:	f802e004 			; <UNDEFINED> instruction: 0xf802e004
    5f24:	10000000 	andne	r0, r0, r0
    5f28:	e6300528 	ldrt	r0, [r0], -r8, lsr #10
    5f2c:	11000002 	tstne	r0, r2
    5f30:	00002a1d 	andeq	r2, r0, sp, lsl sl
    5f34:	008c3205 	addeq	r3, ip, r5, lsl #4
    5f38:	11000000 	mrsne	r0, (UNDEF: 0)
    5f3c:	00002aae 	andeq	r2, r0, lr, lsr #21
    5f40:	008c3505 	addeq	r3, ip, r5, lsl #10
    5f44:	11040000 	mrsne	r0, (UNDEF: 4)
    5f48:	000028ce 	andeq	r2, r0, lr, asr #17
    5f4c:	008c3805 	addeq	r3, ip, r5, lsl #16
    5f50:	11080000 	mrsne	r0, (UNDEF: 8)
    5f54:	00002d22 	andeq	r2, r0, r2, lsr #26
    5f58:	008c4005 	addeq	r4, ip, r5
    5f5c:	110c0000 	mrsne	r0, (UNDEF: 12)
    5f60:	00002d04 	andeq	r2, r0, r4, lsl #26
    5f64:	008c4805 	addeq	r4, ip, r5, lsl #16
    5f68:	11100000 	tstne	r0, r0
    5f6c:	00002dc7 	andeq	r2, r0, r7, asr #27
    5f70:	008c5005 	addeq	r5, ip, r5
    5f74:	11140000 	tstne	r4, r0
    5f78:	00002cdf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    5f7c:	008c5605 	addeq	r5, ip, r5, lsl #12
    5f80:	11180000 	tstne	r8, r0
    5f84:	00002da2 	andeq	r2, r0, r2, lsr #27
    5f88:	008c5905 	addeq	r5, ip, r5, lsl #18
    5f8c:	111c0000 	tstne	ip, r0
    5f90:	00002ad5 	ldrdeq	r2, [r0], -r5
    5f94:	008c5c05 	addeq	r5, ip, r5, lsl #24
    5f98:	11200000 	teqne	r0, r0
    5f9c:	000029fb 	strdeq	r2, [r0], -fp
    5fa0:	008c5f05 	addeq	r5, ip, r5, lsl #30
    5fa4:	00240000 	eoreq	r0, r4, r0
    5fa8:	002bbe03 	eoreq	fp, fp, r3, lsl #28
    5fac:	65610500 	strbvs	r0, [r1, #-1280]!	; 0x500
    5fb0:	10000002 	andne	r0, r0, r2
    5fb4:	7e65052c 	cdpvc	5, 6, cr0, cr5, cr12, {1}
    5fb8:	11000003 	tstne	r0, r3
    5fbc:	0000298f 	andeq	r2, r0, pc, lsl #19
    5fc0:	008c6705 	addeq	r6, ip, r5, lsl #14
    5fc4:	11000000 	mrsne	r0, (UNDEF: 0)
    5fc8:	0000299a 	muleq	r0, sl, r9
    5fcc:	008c6a05 	addeq	r6, ip, r5, lsl #20
    5fd0:	11040000 	mrsne	r0, (UNDEF: 4)
    5fd4:	00002d34 	andeq	r2, r0, r4, lsr sp
    5fd8:	008c6d05 	addeq	r6, ip, r5, lsl #26
    5fdc:	11080000 	mrsne	r0, (UNDEF: 8)
    5fe0:	00002931 	andeq	r2, r0, r1, lsr r9
    5fe4:	008c7005 	addeq	r7, ip, r5
    5fe8:	110c0000 	mrsne	r0, (UNDEF: 12)
    5fec:	000029a4 	andeq	r2, r0, r4, lsr #19
    5ff0:	008c7305 	addeq	r7, ip, r5, lsl #6
    5ff4:	11100000 	tstne	r0, r0
    5ff8:	00002d72 	andeq	r2, r0, r2, ror sp
    5ffc:	008c7605 	addeq	r7, ip, r5, lsl #12
    6000:	11140000 	tstne	r4, r0
    6004:	000028a1 	andeq	r2, r0, r1, lsr #17
    6008:	008c7905 	addeq	r7, ip, r5, lsl #18
    600c:	11180000 	tstne	r8, r0
    6010:	00002a0e 	andeq	r2, r0, lr, lsl #20
    6014:	008c7c05 	addeq	r7, ip, r5, lsl #24
    6018:	111c0000 	tstne	ip, r0
    601c:	00002ccf 	andeq	r2, r0, pc, asr #25
    6020:	008c7f05 	addeq	r7, ip, r5, lsl #30
    6024:	11200000 	teqne	r0, r0
    6028:	000028df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    602c:	008c8205 	addeq	r8, ip, r5, lsl #4
    6030:	11240000 	teqne	r4, r0
    6034:	00002df3 	strdeq	r2, [r0], -r3
    6038:	008c8505 	addeq	r8, ip, r5, lsl #10
    603c:	00280000 	eoreq	r0, r8, r0
    6040:	0028b903 	eoreq	fp, r8, r3, lsl #18
    6044:	f1870500 			; <UNDEFINED> instruction: 0xf1870500
    6048:	10000002 	andne	r0, r0, r2
    604c:	168a052c 	strne	r0, [sl], ip, lsr #10
    6050:	11000004 	tstne	r0, r4
    6054:	00002bdd 	ldrdeq	r2, [r0], -sp
    6058:	008c8c05 	addeq	r8, ip, r5, lsl #24
    605c:	11000000 	mrsne	r0, (UNDEF: 0)
    6060:	00002d68 	andeq	r2, r0, r8, ror #26
    6064:	008c8f05 	addeq	r8, ip, r5, lsl #30
    6068:	11040000 	mrsne	r0, (UNDEF: 4)
    606c:	00002b9a 	muleq	r0, sl, fp
    6070:	008c9205 	addeq	r9, ip, r5, lsl #4
    6074:	11080000 	mrsne	r0, (UNDEF: 8)
    6078:	00002919 	andeq	r2, r0, r9, lsl r9
    607c:	008c9505 	addeq	r9, ip, r5, lsl #10
    6080:	110c0000 	mrsne	r0, (UNDEF: 12)
    6084:	00002c1d 	andeq	r2, r0, sp, lsl ip
    6088:	008c9805 	addeq	r9, ip, r5, lsl #16
    608c:	11100000 	tstne	r0, r0
    6090:	00002a97 	muleq	r0, r7, sl
    6094:	008c9b05 	addeq	r9, ip, r5, lsl #22
    6098:	11140000 	tstne	r4, r0
    609c:	000029ca 	andeq	r2, r0, sl, asr #19
    60a0:	008c9e05 	addeq	r9, ip, r5, lsl #28
    60a4:	11180000 	tstne	r8, r0
    60a8:	00002be8 	andeq	r2, r0, r8, ror #23
    60ac:	008ca105 	addeq	sl, ip, r5, lsl #2
    60b0:	111c0000 	tstne	ip, r0
    60b4:	000029eb 	andeq	r2, r0, fp, ror #19
    60b8:	008ca405 	addeq	sl, ip, r5, lsl #8
    60bc:	11200000 	teqne	r0, r0
    60c0:	00002dd9 	ldrdeq	r2, [r0], -r9
    60c4:	008ca705 	addeq	sl, ip, r5, lsl #14
    60c8:	11240000 	teqne	r4, r0
    60cc:	000029b7 			; <UNDEFINED> instruction: 0x000029b7
    60d0:	008caa05 	addeq	sl, ip, r5, lsl #20
    60d4:	00280000 	eoreq	r0, r8, r0
    60d8:	002d3f03 	eoreq	r3, sp, r3, lsl #30
    60dc:	89ac0500 	stmibhi	ip!, {r8, sl}
    60e0:	12000003 	andne	r0, r0, #3
    60e4:	00002a36 	andeq	r2, r0, r6, lsr sl
    60e8:	216c6901 	cmncs	ip, r1, lsl #18
    60ec:	001a0800 	andseq	r0, sl, r0, lsl #16
    60f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    60f4:	00000467 	andeq	r0, r0, r7, ror #8
    60f8:	00217813 	eoreq	r7, r1, r3, lsl r8
    60fc:	00085f08 	andeq	r5, r8, r8, lsl #30
    6100:	00045000 	andeq	r5, r4, r0
    6104:	51011400 	tstpl	r1, r0, lsl #8
    6108:	01143101 	tsteq	r4, r1, lsl #2
    610c:	43400350 	movtmi	r0, #848	; 0x350
    6110:	86150024 	ldrhi	r0, [r5], -r4, lsr #32
    6114:	5f080021 	svcpl	0x00080021
    6118:	14000008 	strne	r0, [r0], #-8
    611c:	30015101 	andcc	r5, r1, r1, lsl #2
    6120:	03500114 	cmpeq	r0, #20, 2
    6124:	00244340 	eoreq	r4, r4, r0, asr #6
    6128:	2ba51200 	blcs	fe94a930 <_estack+0xde91a930>
    612c:	7a010000 	bvc	46134 <_Min_Stack_Size+0x45d34>
    6130:	08002188 	stmdaeq	r0, {r3, r7, r8, sp}
    6134:	000000b6 	strheq	r0, [r0], -r6
    6138:	04c89c01 	strbeq	r9, [r8], #3073	; 0xc01
    613c:	43160000 	tstmi	r6, #0
    6140:	0100002a 	tsteq	r0, sl, lsr #32
    6144:	0004c87a 	andeq	ip, r4, sl, ror r8
    6148:	002df300 	eoreq	pc, sp, r0, lsl #6
    614c:	29e21700 	stmibcs	r2!, {r8, r9, sl, ip}^
    6150:	7d010000 	stcvc	0, cr0, [r1, #-0]
    6154:	0000008c 	andeq	r0, r0, ip, lsl #1
    6158:	00002e1f 	andeq	r2, r0, pc, lsl lr
    615c:	002cfd17 	eoreq	pc, ip, r7, lsl sp	; <UNPREDICTABLE>
    6160:	8c7e0100 	ldfhie	f0, [lr], #-0
    6164:	55000000 	strpl	r0, [r0, #-0]
    6168:	1700002e 	strne	r0, [r0, -lr, lsr #32]
    616c:	00002afe 	strdeq	r2, [r0], -lr
    6170:	008c7f01 	addeq	r7, ip, r1, lsl #30
    6174:	2e8b0000 	cdpcs	0, 8, cr0, cr11, cr0, {0}
    6178:	f5170000 			; <UNDEFINED> instruction: 0xf5170000
    617c:	0100002c 	tsteq	r0, ip, lsr #32
    6180:	00008c80 	andeq	r8, r0, r0, lsl #25
    6184:	002ec100 	eoreq	ip, lr, r0, lsl #2
    6188:	04180000 	ldreq	r0, [r8], #-0
    618c:	000002e6 	andeq	r0, r0, r6, ror #5
    6190:	002a6a12 	eoreq	r6, sl, r2, lsl sl
    6194:	40d30100 	sbcsmi	r0, r3, r0, lsl #2
    6198:	18080022 	stmdane	r8, {r1, r5}
    619c:	01000000 	mrseq	r0, (UNDEF: 0)
    61a0:	0004f19c 	muleq	r4, ip, r1
    61a4:	2a431900 	bcs	10cc5ac <_Min_Stack_Size+0x10cc1ac>
    61a8:	d3010000 	movwle	r0, #4096	; 0x1000
    61ac:	000004c8 	andeq	r0, r0, r8, asr #9
    61b0:	1a005001 	bne	1a1bc <_Min_Stack_Size+0x19dbc>
    61b4:	00002bf7 	strdeq	r2, [r0], -r7
    61b8:	2258f201 	subscs	pc, r8, #268435456	; 0x10000000
    61bc:	00120800 	andseq	r0, r2, r0, lsl #16
    61c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    61c4:	002b291a 	eoreq	r2, fp, sl, lsl r9
    61c8:	6cfe0100 	ldfvse	f0, [lr]
    61cc:	12080022 	andne	r0, r8, #34	; 0x22
    61d0:	01000000 	mrseq	r0, (UNDEF: 0)
    61d4:	2b071b9c 	blcs	1cd04c <_Min_Stack_Size+0x1ccc4c>
    61d8:	0b010000 	bleq	461e0 <_Min_Stack_Size+0x45de0>
    61dc:	00228001 	eoreq	r8, r2, r1
    61e0:	00001c08 	andeq	r1, r0, r8, lsl #24
    61e4:	389c0100 	ldmcc	ip, {r8}
    61e8:	1c000005 	stcne	0, cr0, [r0], {5}
    61ec:	00000d71 	andeq	r0, r0, r1, ror sp
    61f0:	ec010b01 	stc	11, cr0, [r1], {1}
    61f4:	01000000 	mrseq	r0, (UNDEF: 0)
    61f8:	ba1b0050 	blt	6c6340 <_Min_Stack_Size+0x6c5f40>
    61fc:	0100002a 	tsteq	r0, sl, lsr #32
    6200:	229c0124 	addscs	r0, ip, #36, 2
    6204:	00720800 	rsbseq	r0, r2, r0, lsl #16
    6208:	9c010000 	stcls	0, cr0, [r1], {-0}
    620c:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    6210:	002c4d1c 	eoreq	r4, ip, ip, lsl sp
    6214:	01240100 	teqeq	r4, r0, lsl #2
    6218:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    621c:	e81d5001 	ldmda	sp, {r0, ip, lr}
    6220:	0100002a 	tsteq	r0, sl, lsr #32
    6224:	008c0127 	addeq	r0, ip, r7, lsr #2
    6228:	2ef00000 	cdpcs	0, 15, cr0, cr0, cr0, {0}
    622c:	631d0000 	tstvs	sp, #0
    6230:	0100002b 	tsteq	r0, fp, lsr #32
    6234:	008c0128 	addeq	r0, ip, r8, lsr #2
    6238:	2f140000 	svccs	0x00140000
    623c:	b01d0000 	andslt	r0, sp, r0
    6240:	0100002b 	tsteq	r0, fp, lsr #32
    6244:	008c0129 	addeq	r0, ip, r9, lsr #2
    6248:	2f380000 	svccs	0x00380000
    624c:	561d0000 	ldrpl	r0, [sp], -r0
    6250:	01000029 	tsteq	r0, r9, lsr #32
    6254:	008c012a 	addeq	r0, ip, sl, lsr #2
    6258:	2f5c0000 	svccs	0x005c0000
    625c:	141d0000 	ldrne	r0, [sp], #-0
    6260:	0100002d 	tsteq	r0, sp, lsr #32
    6264:	008c012b 	addeq	r0, ip, fp, lsr #2
    6268:	2f800000 	svccs	0x00800000
    626c:	e71d0000 	ldr	r0, [sp, -r0]
    6270:	0100002d 	tsteq	r0, sp, lsr #32
    6274:	008c012c 	addeq	r0, ip, ip, lsr #2
    6278:	2fa40000 	svccs	0x00a40000
    627c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6280:	00037e04 	andeq	r7, r3, r4, lsl #28
    6284:	2b151b00 	blcs	54ce8c <_Min_Stack_Size+0x54ca8c>
    6288:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    628c:	00231001 	eoreq	r1, r3, r1
    6290:	00001a08 	andeq	r1, r0, r8, lsl #20
    6294:	e89c0100 	ldm	ip, {r8}
    6298:	1c000005 	stcne	0, cr0, [r0], {5}
    629c:	00002c4d 	andeq	r2, r0, sp, asr #24
    62a0:	bd015801 	stclt	8, cr5, [r1, #-4]
    62a4:	01000005 	tsteq	r0, r5
    62a8:	5b1b0050 	blpl	6c63f0 <_Min_Stack_Size+0x6c5ff0>
    62ac:	0100002a 	tsteq	r0, sl, lsr #32
    62b0:	232c0185 	teqcs	ip, #1073741857	; 0x40000021
    62b4:	00720800 	rsbseq	r0, r2, r0, lsl #16
    62b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    62bc:	0000066d 	andeq	r0, r0, sp, ror #12
    62c0:	00297b1c 	eoreq	r7, r9, ip, lsl fp
    62c4:	01850100 	orreq	r0, r5, r0, lsl #2
    62c8:	0000066d 	andeq	r0, r0, sp, ror #12
    62cc:	001d5001 	andseq	r5, sp, r1
    62d0:	0100002e 	tsteq	r0, lr, lsr #32
    62d4:	008c0188 	addeq	r0, ip, r8, lsl #3
    62d8:	2fc80000 	svccs	0x00c80000
    62dc:	c91d0000 	ldmdbgt	sp, {}	; <UNPREDICTABLE>
    62e0:	0100002a 	tsteq	r0, sl, lsr #32
    62e4:	008c0189 	addeq	r0, ip, r9, lsl #3
    62e8:	2fec0000 	svccs	0x00ec0000
    62ec:	111d0000 	tstne	sp, r0
    62f0:	0100002e 	tsteq	r0, lr, lsr #32
    62f4:	008c018a 	addeq	r0, ip, sl, lsl #3
    62f8:	30100000 	andscc	r0, r0, r0
    62fc:	551d0000 	ldrpl	r0, [sp, #-0]
    6300:	0100002b 	tsteq	r0, fp, lsr #32
    6304:	008c018b 	addeq	r0, ip, fp, lsl #3
    6308:	30340000 	eorscc	r0, r4, r0
    630c:	281d0000 	ldmdacs	sp, {}	; <UNPREDICTABLE>
    6310:	0100002a 	tsteq	r0, sl, lsr #32
    6314:	008c018c 	addeq	r0, ip, ip, lsl #3
    6318:	30580000 	subscc	r0, r8, r0
    631c:	8e1d0000 	cdphi	0, 1, cr0, cr13, cr0, {0}
    6320:	0100002b 	tsteq	r0, fp, lsr #32
    6324:	008c018d 	addeq	r0, ip, sp, lsl #3
    6328:	307c0000 	rsbscc	r0, ip, r0
    632c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6330:	00041604 	andeq	r1, r4, r4, lsl #12
    6334:	29421b00 	stmdbcs	r2, {r8, r9, fp, ip}^
    6338:	ba010000 	blt	46340 <_Min_Stack_Size+0x45f40>
    633c:	0023a001 	eoreq	sl, r3, r1
    6340:	00001a08 	andeq	r1, r0, r8, lsl #20
    6344:	989c0100 	ldmls	ip, {r8}
    6348:	1c000006 	stcne	0, cr0, [r0], {6}
    634c:	0000297b 	andeq	r2, r0, fp, ror r9
    6350:	6d01ba01 	vstrvs	s22, [r1, #-4]
    6354:	01000006 	tsteq	r0, r6
    6358:	ed1b0050 	ldc	0, cr0, [fp, #-320]	; 0xfffffec0
    635c:	01000028 	tsteq	r0, r8, lsr #32
    6360:	23bc01e5 			; <UNDEFINED> instruction: 0x23bc01e5
    6364:	001c0800 	andseq	r0, ip, r0, lsl #16
    6368:	9c010000 	stcls	0, cr0, [r1], {-0}
    636c:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
    6370:	000d711c 	andeq	r7, sp, ip, lsl r1
    6374:	01e50100 	mvneq	r0, r0, lsl #2
    6378:	000000ec 	andeq	r0, r0, ip, ror #1
    637c:	1b005001 	blne	1a388 <_Min_Stack_Size+0x19f88>
    6380:	00002893 	muleq	r0, r3, r8
    6384:	d801fd01 	stmdale	r1, {r0, r8, sl, fp, ip, sp, lr, pc}
    6388:	1c080023 	stcne	0, cr0, [r8], {35}	; 0x23
    638c:	01000000 	mrseq	r0, (UNDEF: 0)
    6390:	0006e29c 	muleq	r6, ip, r2
    6394:	0d711c00 	ldcleq	12, cr1, [r1, #-0]
    6398:	fd010000 	stc2	0, cr0, [r1, #-0]
    639c:	0000ec01 	andeq	lr, r0, r1, lsl #24
    63a0:	00500100 	subseq	r0, r0, r0, lsl #2
    63a4:	002c381b 	eoreq	r3, ip, fp, lsl r8
    63a8:	02140100 	andseq	r0, r4, #0, 2
    63ac:	080023f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sp}
    63b0:	0000002c 	andeq	r0, r0, ip, lsr #32
    63b4:	07279c01 	streq	r9, [r7, -r1, lsl #24]!
    63b8:	821e0000 	andshi	r0, lr, #0
    63bc:	0100002a 	tsteq	r0, sl, lsr #32
    63c0:	008c0214 	addeq	r0, ip, r4, lsl r2
    63c4:	30a00000 	adccc	r0, r0, r0
    63c8:	711c0000 	tstvc	ip, r0
    63cc:	0100000d 	tsteq	r0, sp
    63d0:	00ec0214 	rsceq	r0, ip, r4, lsl r2
    63d4:	51010000 	mrspl	r0, (UNDEF: 1)
    63d8:	002a881d 	eoreq	r8, sl, sp, lsl r8
    63dc:	02160100 	andseq	r0, r6, #0, 2
    63e0:	0000008c 	andeq	r0, r0, ip, lsl #1
    63e4:	000030c1 	andeq	r3, r0, r1, asr #1
    63e8:	2b741b00 	blcs	1d0cff0 <_Min_Stack_Size+0x1d0cbf0>
    63ec:	2f010000 	svccs	0x00010000
    63f0:	00242002 	eoreq	r2, r4, r2
    63f4:	00000c08 	andeq	r0, r0, r8, lsl #24
    63f8:	4c9c0100 	ldfmis	f0, [ip], {0}
    63fc:	1c000007 	stcne	0, cr0, [r0], {7}
    6400:	00002964 	andeq	r2, r0, r4, ror #18
    6404:	8c022f01 	stchi	15, cr2, [r2], {1}
    6408:	01000000 	mrseq	r0, (UNDEF: 0)
    640c:	3d1b0050 	ldccc	0, cr0, [fp, #-320]	; 0xfffffec0
    6410:	0100002b 	tsteq	r0, fp, lsr #32
    6414:	242c0272 	strtcs	r0, [ip], #-626	; 0x272
    6418:	001a0800 	andseq	r0, sl, r0, lsl #16
    641c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6420:	00000781 	andeq	r0, r0, r1, lsl #15
    6424:	002b4c1e 	eoreq	r4, fp, lr, lsl ip
    6428:	02720100 	rsbseq	r0, r2, #0, 2
    642c:	0000008c 	andeq	r0, r0, ip, lsl #1
    6430:	000030e8 	andeq	r3, r0, r8, ror #1
    6434:	000d711c 	andeq	r7, sp, ip, lsl r1
    6438:	02720100 	rsbseq	r0, r2, #0, 2
    643c:	000000ec 	andeq	r0, r0, ip, ror #1
    6440:	1f005101 	svcne	0x00005101
    6444:	00002d89 	andeq	r2, r0, r9, lsl #27
    6448:	be029101 	mvflts	f1, f1
    644c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    6450:	14080024 	strne	r0, [r8], #-36	; 0x24
    6454:	01000000 	mrseq	r0, (UNDEF: 0)
    6458:	0007bc9c 	muleq	r7, ip, ip
    645c:	2c0b1e00 	stccs	14, cr1, [fp], {-0}
    6460:	91010000 	mrsls	r0, (UNDEF: 1)
    6464:	00008c02 	andeq	r8, r0, r2, lsl #24
    6468:	00312200 	eorseq	r2, r1, r0, lsl #4
    646c:	0f711d00 	svceq	0x00711d00
    6470:	93010000 	movwls	r0, #4096	; 0x1000
    6474:	0000be02 	andeq	fp, r0, r2, lsl #28
    6478:	00314300 	eorseq	r4, r1, r0, lsl #6
    647c:	fb1b0000 	blx	6c6486 <_Min_Stack_Size+0x6c6086>
    6480:	01000028 	tsteq	r0, r8, lsr #32
    6484:	245c02b3 	ldrbcs	r0, [ip], #-691	; 0x2b3
    6488:	000c0800 	andeq	r0, ip, r0, lsl #16
    648c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6490:	000007e1 	andeq	r0, r0, r1, ror #15
    6494:	002c0b1c 	eoreq	r0, ip, ip, lsl fp
    6498:	02b30100 	adcseq	r0, r3, #0, 2
    649c:	0000008c 	andeq	r0, r0, ip, lsl #1
    64a0:	1f005001 	svcne	0x00005001
    64a4:	00002db5 			; <UNDEFINED> instruction: 0x00002db5
    64a8:	ca02c801 	bgt	b84b4 <_Min_Stack_Size+0xb80b4>
    64ac:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    64b0:	20080024 	andcs	r0, r8, r4, lsr #32
    64b4:	01000000 	mrseq	r0, (UNDEF: 0)
    64b8:	00082c9c 	muleq	r8, ip, ip
    64bc:	2b4c1e00 	blcs	130dcc4 <_Min_Stack_Size+0x130d8c4>
    64c0:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    64c4:	00008c02 	andeq	r8, r0, r2, lsl #24
    64c8:	00317c00 	eorseq	r7, r1, r0, lsl #24
    64cc:	0f711d00 	svceq	0x00711d00
    64d0:	ca010000 	bgt	464d8 <_Min_Stack_Size+0x460d8>
    64d4:	0000ca02 	andeq	ip, r0, r2, lsl #20
    64d8:	0031b600 	eorseq	fp, r1, r0, lsl #12
    64dc:	290b1d00 	stmdbcs	fp, {r8, sl, fp, ip}
    64e0:	cb010000 	blgt	464e8 <_Min_Stack_Size+0x460e8>
    64e4:	00008c02 	andeq	r8, r0, r2, lsl #24
    64e8:	00321200 	eorseq	r1, r2, r0, lsl #4
    64ec:	af1b0000 	svcge	0x001b0000
    64f0:	0100002c 	tsteq	r0, ip, lsr #32
    64f4:	248802f0 	strcs	r0, [r8], #752	; 0x2f0
    64f8:	000e0800 	andeq	r0, lr, r0, lsl #16
    64fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    6500:	00000853 	andeq	r0, r0, r3, asr r8
    6504:	002b4c1e 	eoreq	r4, fp, lr, lsl ip
    6508:	02f00100 	rscseq	r0, r0, #0, 2
    650c:	0000008c 	andeq	r0, r0, ip, lsl #1
    6510:	00003258 	andeq	r3, r0, r8, asr r2
    6514:	03a02000 	moveq	r2, #0
    6518:	a7060000 	strge	r0, [r6, -r0]
    651c:	0000a306 	andeq	sl, r0, r6, lsl #6
    6520:	0f7b2100 	svceq	0x007b2100
    6524:	46070000 	strmi	r0, [r7], -r0
    6528:	008c2202 	addeq	r2, ip, r2, lsl #4
    652c:	ec220000 	stc	0, cr0, [r2], #-0
    6530:	00000000 	andeq	r0, r0, r0
    6534:	000d4900 	andeq	r4, sp, r0, lsl #18
    6538:	37000400 	strcc	r0, [r0, -r0, lsl #8]
    653c:	04000015 	streq	r0, [r0], #-21
    6540:	00028701 	andeq	r8, r2, r1, lsl #14
    6544:	31e90100 	mvncc	r0, r0, lsl #2
    6548:	00ab0000 	adceq	r0, fp, r0
    654c:	07900000 	ldreq	r0, [r0, r0]
    6550:	00000000 	andeq	r0, r0, r0
    6554:	2a2d0000 	bcs	b4655c <_Min_Stack_Size+0xb4615c>
    6558:	04020000 	streq	r0, [r2], #-0
    655c:	00018007 	andeq	r8, r1, r7
    6560:	06010200 	streq	r0, [r1], -r0, lsl #4
    6564:	00000153 	andeq	r0, r0, r3, asr r1
    6568:	00011903 	andeq	r1, r1, r3, lsl #18
    656c:	3e1c0200 	cdpcc	2, 1, cr0, cr12, cr0, {0}
    6570:	02000000 	andeq	r0, r0, #0
    6574:	01510801 	cmpeq	r1, r1, lsl #16
    6578:	02020000 	andeq	r0, r2, #0
    657c:	00010605 	andeq	r0, r1, r5, lsl #12
    6580:	005c0300 	subseq	r0, ip, r0, lsl #6
    6584:	26020000 	strcs	r0, [r2], -r0
    6588:	00000057 	andeq	r0, r0, r7, asr r0
    658c:	e8070202 	stmda	r7, {r1, r9}
    6590:	03000001 	movweq	r0, #1
    6594:	0000037a 	andeq	r0, r0, sl, ror r3
    6598:	00693702 	rsbeq	r3, r9, r2, lsl #14
    659c:	04020000 	streq	r0, [r2], #-0
    65a0:	0000ec05 	andeq	lr, r0, r5, lsl #24
    65a4:	00510300 	subseq	r0, r1, r0, lsl #6
    65a8:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    65ac:	0000007b 	andeq	r0, r0, fp, ror r0
    65b0:	7b070402 	blvc	1c75c0 <_Min_Stack_Size+0x1c71c0>
    65b4:	02000001 	andeq	r0, r0, #1
    65b8:	00e70508 	rsceq	r0, r7, r8, lsl #10
    65bc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    65c0:	00017607 	andeq	r7, r1, r7, lsl #12
    65c4:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    65c8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    65cc:	00011b03 	andeq	r1, r1, r3, lsl #22
    65d0:	332a0300 	teqcc	sl, #0, 6
    65d4:	03000000 	movweq	r0, #0
    65d8:	0000005e 	andeq	r0, r0, lr, asr r0
    65dc:	004c3603 	subeq	r3, ip, r3, lsl #12
    65e0:	7c030000 	stcvc	0, cr0, [r3], {-0}
    65e4:	03000003 	movweq	r0, #3
    65e8:	00005e41 	andeq	r5, r0, r1, asr #28
    65ec:	00530300 	subseq	r0, r3, r0, lsl #6
    65f0:	42030000 	andmi	r0, r3, #0
    65f4:	00000070 	andeq	r0, r0, r0, ror r0
    65f8:	2c070402 	cfstrscs	mvf0, [r7], {2}
    65fc:	05000000 	streq	r0, [r0, #-0]
    6600:	000000b8 	strheq	r0, [r0], -r8
    6604:	0000b806 	andeq	fp, r0, r6, lsl #16
    6608:	0000df00 	andeq	sp, r0, r0, lsl #30
    660c:	00c30700 	sbceq	r0, r3, r0, lsl #14
    6610:	00010000 	andeq	r0, r1, r0
    6614:	0000b806 	andeq	fp, r0, r6, lsl #16
    6618:	0000ef00 	andeq	lr, r0, r0, lsl #30
    661c:	00c30700 	sbceq	r0, r3, r0, lsl #14
    6620:	00000000 	andeq	r0, r0, r0
    6624:	0000ad05 	andeq	sl, r0, r5, lsl #26
    6628:	04010800 	streq	r0, [r1], #-2048	; 0x800
    662c:	010a01f7 	strdeq	r0, [sl, -r7]
    6630:	d2090000 	andle	r0, r9, #0
    6634:	0000000e 	andeq	r0, r0, lr
    6638:	5445530a 	strbpl	r5, [r5], #-778	; 0x30a
    663c:	0b000100 	bleq	6a44 <_Min_Stack_Size+0x6644>
    6640:	00002317 	andeq	r2, r0, r7, lsl r3
    6644:	f401f704 	vst1.8	{d15}, [r1], r4
    6648:	0b000000 	bleq	6650 <_Min_Stack_Size+0x6250>
    664c:	0000228e 	andeq	r2, r0, lr, lsl #5
    6650:	f401f704 	vst1.8	{d15}, [r1], r4
    6654:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6658:	01f90401 	mvnseq	r0, r1, lsl #8
    665c:	00000138 	andeq	r0, r0, r8, lsr r1
    6660:	00048b09 	andeq	r8, r4, r9, lsl #22
    6664:	c3090000 	movwgt	r0, #36864	; 0x9000
    6668:	01000005 	tsteq	r0, r5
    666c:	092d0b00 	pusheq	{r8, r9, fp}
    6670:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    6674:	00012201 	andeq	r2, r1, r1, lsl #4
    6678:	044c0c00 	strbeq	r0, [ip], #-3072	; 0xc00
    667c:	022b041b 	eoreq	r0, fp, #452984832	; 0x1b000000
    6680:	3f0d0000 	svccc	0x000d0000
    6684:	04000002 	streq	r0, [r0], #-2
    6688:	00cf041d 	sbceq	r0, pc, sp, lsl r4	; <UNPREDICTABLE>
    668c:	0d000000 	stceq	0, cr0, [r0, #-0]
    6690:	000034cb 	andeq	r3, r0, fp, asr #9
    6694:	ca041e04 	bgt	10deac <_Min_Stack_Size+0x10daac>
    6698:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    669c:	0034460d 	eorseq	r4, r4, sp, lsl #12
    66a0:	041f0400 	ldreq	r0, [pc], #-1024	; 66a8 <_Min_Stack_Size+0x62a8>
    66a4:	000000ca 	andeq	r0, r0, sl, asr #1
    66a8:	32b50d0c 	adcscc	r0, r5, #12, 26	; 0x300
    66ac:	20040000 	andcs	r0, r4, r0
    66b0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    66b4:	360d1000 	strcc	r1, [sp], -r0
    66b8:	04000032 	streq	r0, [r0], #-50	; 0x32
    66bc:	00ca0421 	sbceq	r0, sl, r1, lsr #8
    66c0:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    66c4:	00524347 	subseq	r4, r2, r7, asr #6
    66c8:	ca042204 	bgt	10eee0 <_Min_Stack_Size+0x10eae0>
    66cc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    66d0:	0002490d 	andeq	r4, r2, sp, lsl #18
    66d4:	04230400 	strteq	r0, [r3], #-1024	; 0x400
    66d8:	000000cf 	andeq	r0, r0, pc, asr #1
    66dc:	324b0d1c 	subcc	r0, fp, #28, 26	; 0x700
    66e0:	24040000 	strcs	r0, [r4], #-0
    66e4:	0000ca04 	andeq	ip, r0, r4, lsl #20
    66e8:	530d2400 	movwpl	r2, #54272	; 0xd400
    66ec:	04000002 	streq	r0, [r0], #-2
    66f0:	00df0425 	sbcseq	r0, pc, r5, lsr #8
    66f4:	0d280000 	stceq	0, cr0, [r8, #-0]
    66f8:	00002e75 	andeq	r2, r0, r5, ror lr
    66fc:	ca042604 	bgt	10ff14 <_Min_Stack_Size+0x10fb14>
    6700:	2c000000 	stccs	0, cr0, [r0], {-0}
    6704:	0000900d 	andeq	r9, r0, sp
    6708:	04270400 	strteq	r0, [r7], #-1024	; 0x400
    670c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6710:	45490e30 	strbmi	r0, [r9, #-3632]	; 0xe30
    6714:	28040052 	stmdacs	r4, {r1, r4, r6}
    6718:	0000ca04 	andeq	ip, r0, r4, lsl #20
    671c:	490e3400 	stmdbmi	lr, {sl, ip, sp}
    6720:	04005253 	streq	r5, [r0], #-595	; 0x253
    6724:	00ca0429 	sbceq	r0, sl, r9, lsr #8
    6728:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
    672c:	00524349 	subseq	r4, r2, r9, asr #6
    6730:	ca042a04 	bgt	110f48 <_Min_Stack_Size+0x110b48>
    6734:	3c000000 	stccc	0, cr0, [r0], {-0}
    6738:	0033f40d 	eorseq	pc, r3, sp, lsl #8
    673c:	042b0400 	strteq	r0, [fp], #-1024	; 0x400
    6740:	000000ca 	andeq	r0, r0, sl, asr #1
    6744:	34410d40 	strbcc	r0, [r1], #-3392	; 0xd40
    6748:	2c040000 	stccs	0, cr0, [r4], {-0}
    674c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    6750:	900d4400 	andls	r4, sp, r0, lsl #8
    6754:	04000035 	streq	r0, [r0], #-53	; 0x35
    6758:	00ca042d 	sbceq	r0, sl, sp, lsr #8
    675c:	00480000 	subeq	r0, r8, r0
    6760:	002f280b 	eoreq	r2, pc, fp, lsl #16
    6764:	042e0400 	strteq	r0, [lr], #-1024	; 0x400
    6768:	00000144 	andeq	r0, r0, r4, asr #2
    676c:	3404440c 	strcc	r4, [r4], #-1036	; 0x40c
    6770:	0002f604 	andeq	pc, r2, r4, lsl #12
    6774:	52430e00 	subpl	r0, r3, #0, 28
    6778:	04360400 	ldrteq	r0, [r6], #-1024	; 0x400
    677c:	000000ca 	andeq	r0, r0, sl, asr #1
    6780:	31490d00 	cmpcc	r9, r0, lsl #26
    6784:	37040000 	strcc	r0, [r4, -r0]
    6788:	0000ca04 	andeq	ip, r0, r4, lsl #20
    678c:	4b0d0400 	blmi	347794 <_Min_Stack_Size+0x347394>
    6790:	0400002f 	streq	r0, [r0], #-47	; 0x2f
    6794:	00ca0438 	sbceq	r0, sl, r8, lsr r4
    6798:	0d080000 	stceq	0, cr0, [r8, #-0]
    679c:	00003258 	andeq	r3, r0, r8, asr r2
    67a0:	ca043904 	bgt	114bb8 <_Min_Stack_Size+0x1147b8>
    67a4:	0c000000 	stceq	0, cr0, [r0], {-0}
    67a8:	00360c0d 	eorseq	r0, r6, sp, lsl #24
    67ac:	043a0400 	ldrteq	r0, [sl], #-1024	; 0x400
    67b0:	000000ca 	andeq	r0, r0, sl, asr #1
    67b4:	304d0d10 	subcc	r0, sp, r0, lsl sp
    67b8:	3b040000 	blcc	1067c0 <_Min_Stack_Size+0x1063c0>
    67bc:	0000ca04 	andeq	ip, r0, r4, lsl #20
    67c0:	5e0d1400 	cfcpyspl	mvf1, mvf13
    67c4:	04000035 	streq	r0, [r0], #-53	; 0x35
    67c8:	00ca043c 	sbceq	r0, sl, ip, lsr r4
    67cc:	0d180000 	ldceq	0, cr0, [r8, #-0]
    67d0:	0000327a 	andeq	r3, r0, sl, ror r2
    67d4:	ca043d04 	bgt	115bec <_Min_Stack_Size+0x1157ec>
    67d8:	1c000000 	stcne	0, cr0, [r0], {-0}
    67dc:	00023f0d 	andeq	r3, r2, sp, lsl #30
    67e0:	043e0400 	ldrteq	r0, [lr], #-1024	; 0x400
    67e4:	000000cf 	andeq	r0, r0, pc, asr #1
    67e8:	33720d20 	cmncc	r2, #32, 26	; 0x800
    67ec:	3f040000 	svccc	0x00040000
    67f0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    67f4:	7a0d2800 	bvc	3507fc <_Min_Stack_Size+0x3503fc>
    67f8:	0400002e 	streq	r0, [r0], #-46	; 0x2e
    67fc:	00ca0440 	sbceq	r0, sl, r0, asr #8
    6800:	0d2c0000 	stceq	0, cr0, [ip, #-0]
    6804:	00002e36 	andeq	r2, r0, r6, lsr lr
    6808:	ca044104 	bgt	116c20 <_Min_Stack_Size+0x116820>
    680c:	30000000 	andcc	r0, r0, r0
    6810:	0002490d 	andeq	r4, r2, sp, lsl #18
    6814:	04420400 	strbeq	r0, [r2], #-1024	; 0x400
    6818:	000002f6 	strdeq	r0, [r0], -r6
    681c:	31e20d34 	mvncc	r0, r4, lsr sp
    6820:	43040000 	movwmi	r0, #16384	; 0x4000
    6824:	0000ca04 	andeq	ip, r0, r4, lsl #20
    6828:	06004000 	streq	r4, [r0], -r0
    682c:	000000b8 	strheq	r0, [r0], -r8
    6830:	00000306 	andeq	r0, r0, r6, lsl #6
    6834:	0000c307 	andeq	ip, r0, r7, lsl #6
    6838:	0b000200 	bleq	7040 <_Min_Stack_Size+0x6c40>
    683c:	0000302e 	andeq	r3, r0, lr, lsr #32
    6840:	37044504 	strcc	r4, [r4, -r4, lsl #10]
    6844:	0f000002 	svceq	0x00000002
    6848:	cf30053c 	svcgt	0x0030053c
    684c:	10000003 	andne	r0, r0, r3
    6850:	00002f51 	andeq	r2, r0, r1, asr pc
    6854:	00b83205 	adcseq	r3, r8, r5, lsl #4
    6858:	10000000 	andne	r0, r0, r0
    685c:	000035c5 	andeq	r3, r0, r5, asr #11
    6860:	00b83505 	adcseq	r3, r8, r5, lsl #10
    6864:	10040000 	andne	r0, r4, r0
    6868:	000034eb 	andeq	r3, r0, fp, ror #9
    686c:	00b83805 	adcseq	r3, r8, r5, lsl #16
    6870:	10080000 	andne	r0, r8, r0
    6874:	0000325d 	andeq	r3, r0, sp, asr r2
    6878:	00b83b05 	adcseq	r3, r8, r5, lsl #22
    687c:	100c0000 	andne	r0, ip, r0
    6880:	0000301a 	andeq	r3, r0, sl, lsl r0
    6884:	00b83e05 	adcseq	r3, r8, r5, lsl #28
    6888:	10100000 	andsne	r0, r0, r0
    688c:	000030c8 	andeq	r3, r0, r8, asr #1
    6890:	00b84105 	adcseq	r4, r8, r5, lsl #2
    6894:	10140000 	andsne	r0, r4, r0
    6898:	0000348d 	andeq	r3, r0, sp, lsl #9
    689c:	00b84405 	adcseq	r4, r8, r5, lsl #8
    68a0:	10180000 	andsne	r0, r8, r0
    68a4:	00002f8b 	andeq	r2, r0, fp, lsl #31
    68a8:	00b84705 	adcseq	r4, r8, r5, lsl #14
    68ac:	101c0000 	andsne	r0, ip, r0
    68b0:	00002fb6 			; <UNDEFINED> instruction: 0x00002fb6
    68b4:	00b84a05 	adcseq	r4, r8, r5, lsl #20
    68b8:	10200000 	eorne	r0, r0, r0
    68bc:	00002efa 	strdeq	r2, [r0], -sl
    68c0:	00b84d05 	adcseq	r4, r8, r5, lsl #26
    68c4:	10240000 	eorne	r0, r4, r0
    68c8:	0000323b 	andeq	r3, r0, fp, lsr r2
    68cc:	00b85005 	adcseq	r5, r8, r5
    68d0:	10280000 	eorne	r0, r8, r0
    68d4:	000034a1 	andeq	r3, r0, r1, lsr #9
    68d8:	00b85305 	adcseq	r5, r8, r5, lsl #6
    68dc:	102c0000 	eorne	r0, ip, r0
    68e0:	000031bf 			; <UNDEFINED> instruction: 0x000031bf
    68e4:	00b85605 	adcseq	r5, r8, r5, lsl #12
    68e8:	10300000 	eorsne	r0, r0, r0
    68ec:	00002f71 	andeq	r2, r0, r1, ror pc
    68f0:	00b85905 	adcseq	r5, r8, r5, lsl #18
    68f4:	10340000 	eorsne	r0, r4, r0
    68f8:	00003121 	andeq	r3, r0, r1, lsr #2
    68fc:	00b85c05 	adcseq	r5, r8, r5, lsl #24
    6900:	00380000 	eorseq	r0, r8, r0
    6904:	00362203 	eorseq	r2, r6, r3, lsl #4
    6908:	125e0500 	subsne	r0, lr, #0, 10
    690c:	0f000003 	svceq	0x00000003
    6910:	a3640540 	cmnge	r4, #64, 10	; 0x10000000
    6914:	10000004 	andne	r0, r0, r4
    6918:	000031aa 	andeq	r3, r0, sl, lsr #3
    691c:	00b86605 	adcseq	r6, r8, r5, lsl #12
    6920:	10000000 	andne	r0, r0, r0
    6924:	000030eb 	andeq	r3, r0, fp, ror #1
    6928:	00b86905 	adcseq	r6, r8, r5, lsl #18
    692c:	10040000 	andne	r0, r4, r0
    6930:	00002ee7 	andeq	r2, r0, r7, ror #29
    6934:	00b86c05 	adcseq	r6, r8, r5, lsl #24
    6938:	10080000 	andne	r0, r8, r0
    693c:	0000317b 	andeq	r3, r0, fp, ror r1
    6940:	00b86f05 	adcseq	r6, r8, r5, lsl #30
    6944:	100c0000 	andne	r0, ip, r0
    6948:	000034fb 	strdeq	r3, [r0], -fp
    694c:	00b87205 	adcseq	r7, r8, r5, lsl #4
    6950:	10100000 	andsne	r0, r0, r0
    6954:	000032da 	ldrdeq	r3, [r0], -sl
    6958:	00b87505 	adcseq	r7, r8, r5, lsl #10
    695c:	10140000 	andsne	r0, r4, r0
    6960:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6964:	00b87805 	adcseq	r7, r8, r5, lsl #16
    6968:	10180000 	andsne	r0, r8, r0
    696c:	0000314f 	andeq	r3, r0, pc, asr #2
    6970:	00b87b05 	adcseq	r7, r8, r5, lsl #22
    6974:	101c0000 	andsne	r0, ip, r0
    6978:	00002ed2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    697c:	00b87e05 	adcseq	r7, r8, r5, lsl #28
    6980:	10200000 	eorne	r0, r0, r0
    6984:	000033dd 	ldrdeq	r3, [r0], -sp
    6988:	00b88105 	adcseq	r8, r8, r5, lsl #2
    698c:	10240000 	eorne	r0, r4, r0
    6990:	00003532 	andeq	r3, r0, r2, lsr r5
    6994:	00b88405 	adcseq	r8, r8, r5, lsl #8
    6998:	10280000 	eorne	r0, r8, r0
    699c:	00003548 	andeq	r3, r0, r8, asr #10
    69a0:	00b88705 	adcseq	r8, r8, r5, lsl #14
    69a4:	102c0000 	eorne	r0, ip, r0
    69a8:	00002ebe 			; <UNDEFINED> instruction: 0x00002ebe
    69ac:	00b88a05 	adcseq	r8, r8, r5, lsl #20
    69b0:	10300000 	eorsne	r0, r0, r0
    69b4:	000030b5 	strheq	r3, [r0], -r5
    69b8:	00b88c05 	adcseq	r8, r8, r5, lsl #24
    69bc:	10340000 	eorsne	r0, r4, r0
    69c0:	000035d5 	ldrdeq	r3, [r0], -r5
    69c4:	00b88f05 	adcseq	r8, r8, r5, lsl #30
    69c8:	10380000 	eorsne	r0, r8, r0
    69cc:	0000342e 	andeq	r3, r0, lr, lsr #8
    69d0:	00b89205 	adcseq	r9, r8, r5, lsl #4
    69d4:	003c0000 	eorseq	r0, ip, r0
    69d8:	002e1f03 	eoreq	r1, lr, r3, lsl #30
    69dc:	da940500 	ble	fe507de4 <_estack+0xde4d7de4>
    69e0:	0f000003 	svceq	0x00000003
    69e4:	cf9a0508 	svcgt	0x009a0508
    69e8:	10000004 	andne	r0, r0, r4
    69ec:	00003303 	andeq	r3, r0, r3, lsl #6
    69f0:	00b89c05 	adcseq	r9, r8, r5, lsl #24
    69f4:	10000000 	andne	r0, r0, r0
    69f8:	0000330d 	andeq	r3, r0, sp, lsl #6
    69fc:	00b89d05 	adcseq	r9, r8, r5, lsl #26
    6a00:	00040000 	andeq	r0, r4, r0
    6a04:	00351603 	eorseq	r1, r5, r3, lsl #12
    6a08:	ae9e0500 	cdpge	5, 9, cr0, cr14, cr0, {0}
    6a0c:	0f000004 	svceq	0x00000004
    6a10:	07a0050c 	streq	r0, [r0, ip, lsl #10]!
    6a14:	10000005 	andne	r0, r0, r5
    6a18:	0000313a 	andeq	r3, r0, sl, lsr r1
    6a1c:	00b8a205 	adcseq	sl, r8, r5, lsl #4
    6a20:	10000000 	andne	r0, r0, r0
    6a24:	0000344b 	andeq	r3, r0, fp, asr #8
    6a28:	00b8a305 	adcseq	sl, r8, r5, lsl #6
    6a2c:	10040000 	andne	r0, r4, r0
    6a30:	000032cc 	andeq	r3, r0, ip, asr #5
    6a34:	00b8a405 	adcseq	sl, r8, r5, lsl #8
    6a38:	00080000 	andeq	r0, r8, r0
    6a3c:	00358003 	eorseq	r8, r5, r3
    6a40:	daa50500 	ble	fe947e48 <_estack+0xde917e48>
    6a44:	0f000004 	svceq	0x00000004
    6a48:	3fa7050c 	svccc	0x00a7050c
    6a4c:	10000005 	andne	r0, r0, r5
    6a50:	000034b9 			; <UNDEFINED> instruction: 0x000034b9
    6a54:	00b8a905 	adcseq	sl, r8, r5, lsl #18
    6a58:	10000000 	andne	r0, r0, r0
    6a5c:	00003061 	andeq	r3, r0, r1, rrx
    6a60:	00b8ac05 	adcseq	sl, r8, r5, lsl #24
    6a64:	10040000 	andne	r0, r4, r0
    6a68:	0000346b 	andeq	r3, r0, fp, ror #8
    6a6c:	00b8af05 	adcseq	sl, r8, r5, lsl #30
    6a70:	00080000 	andeq	r0, r8, r0
    6a74:	00318d03 	eorseq	r8, r1, r3, lsl #26
    6a78:	12b10500 	adcsne	r0, r1, #0, 10
    6a7c:	0f000005 	svceq	0x00000005
    6a80:	83b30510 			; <UNDEFINED> instruction: 0x83b30510
    6a84:	10000005 	andne	r0, r0, r5
    6a88:	00003402 	andeq	r3, r0, r2, lsl #8
    6a8c:	00b8b505 	adcseq	fp, r8, r5, lsl #10
    6a90:	10000000 	andne	r0, r0, r0
    6a94:	00003052 	andeq	r3, r0, r2, asr r0
    6a98:	00b8b805 	adcseq	fp, r8, r5, lsl #16
    6a9c:	10040000 	andne	r0, r4, r0
    6aa0:	00003396 	muleq	r0, r6, r3
    6aa4:	00b8bb05 	adcseq	fp, r8, r5, lsl #22
    6aa8:	10080000 	andne	r0, r8, r0
    6aac:	00003595 	muleq	r0, r5, r5
    6ab0:	00b8be05 	adcseq	fp, r8, r5, lsl #28
    6ab4:	000c0000 	andeq	r0, ip, r0
    6ab8:	0032ed03 	eorseq	lr, r2, r3, lsl #26
    6abc:	4ac00500 	bmi	ff007ec4 <_estack+0xdefd7ec4>
    6ac0:	11000005 	tstne	r0, r5
    6ac4:	00002e5b 	andeq	r2, r0, fp, asr lr
    6ac8:	24987b01 	ldrcs	r7, [r8], #2817	; 0xb01
    6acc:	001a0800 	andseq	r0, sl, r0, lsl #16
    6ad0:	9c010000 	stcls	0, cr0, [r1], {-0}
    6ad4:	000005d4 	ldrdeq	r0, [r0], -r4
    6ad8:	0024a412 	eoreq	sl, r4, r2, lsl r4
    6adc:	000d3908 	andeq	r3, sp, r8, lsl #18
    6ae0:	0005bd00 	andeq	fp, r5, r0, lsl #26
    6ae4:	51011300 	mrspl	r1, SP_irq
    6ae8:	01133101 	tsteq	r3, r1, lsl #2
    6aec:	46400350 			; <UNDEFINED> instruction: 0x46400350
    6af0:	b2140024 	andslt	r0, r4, #36	; 0x24
    6af4:	39080024 	stmdbcc	r8, {r2, r5}
    6af8:	1300000d 	movwne	r0, #13
    6afc:	30015101 	andcc	r5, r1, r1, lsl #2
    6b00:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
    6b04:	00244640 	eoreq	r4, r4, r0, asr #12
    6b08:	34241100 	strtcc	r1, [r4], #-256	; 0x100
    6b0c:	8c010000 	stchi	0, cr0, [r1], {-0}
    6b10:	080024b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, sp}
    6b14:	000000a4 	andeq	r0, r0, r4, lsr #1
    6b18:	06539c01 	ldrbeq	r9, [r3], -r1, lsl #24
    6b1c:	61150000 	tstvs	r5, r0
    6b20:	0100002f 	tsteq	r0, pc, lsr #32
    6b24:	0006538c 	andeq	r5, r6, ip, lsl #7
    6b28:	00327600 	eorseq	r7, r2, r0, lsl #12
    6b2c:	2fec1600 	svccs	0x00ec1600
    6b30:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    6b34:	000000b8 	strheq	r0, [r0], -r8
    6b38:	00003297 	muleq	r0, r7, r2
    6b3c:	00327f16 	eorseq	r7, r2, r6, lsl pc
    6b40:	b88f0100 	stmlt	pc, {r8}	; <UNPREDICTABLE>
    6b44:	bb000000 	bllt	6b4c <_Min_Stack_Size+0x674c>
    6b48:	16000032 			; <UNDEFINED> instruction: 0x16000032
    6b4c:	00002e80 	andeq	r2, r0, r0, lsl #29
    6b50:	00b89001 	adcseq	r9, r8, r1
    6b54:	32df0000 	sbcscc	r0, pc, #0
    6b58:	d7160000 	ldrle	r0, [r6, -r0]
    6b5c:	01000031 	tsteq	r0, r1, lsr r0
    6b60:	0000b891 	muleq	r0, r1, r8
    6b64:	00330300 	eorseq	r0, r3, r0, lsl #6
    6b68:	30951600 	addscc	r1, r5, r0, lsl #12
    6b6c:	92010000 	andls	r0, r1, #0
    6b70:	000000b8 	strheq	r0, [r0], -r8
    6b74:	00003327 	andeq	r3, r0, r7, lsr #6
    6b78:	00300a16 	eorseq	r0, r0, r6, lsl sl
    6b7c:	b8930100 	ldmlt	r3, {r8}
    6b80:	4a000000 	bmi	6b88 <_Min_Stack_Size+0x6788>
    6b84:	00000033 	andeq	r0, r0, r3, lsr r0
    6b88:	03cf0417 	biceq	r0, pc, #385875968	; 0x17000000
    6b8c:	ff110000 			; <UNDEFINED> instruction: 0xff110000
    6b90:	01000030 	tsteq	r0, r0, lsr r0
    6b94:	002558cd 	eoreq	r5, r5, sp, asr #17
    6b98:	00002208 	andeq	r2, r0, r8, lsl #4
    6b9c:	7c9c0100 	ldfvcs	f0, [ip], {0}
    6ba0:	18000006 	stmdane	r0, {r1, r2}
    6ba4:	00002f61 	andeq	r2, r0, r1, ror #30
    6ba8:	0653cd01 	ldrbeq	ip, [r3], -r1, lsl #26
    6bac:	50010000 	andpl	r0, r1, r0
    6bb0:	2ffb1100 	svccs	0x00fb1100
    6bb4:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    6bb8:	0800257c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, sp}
    6bbc:	0000001c 	andeq	r0, r0, ip, lsl r0
    6bc0:	069f9c01 	ldreq	r9, [pc], r1, lsl #24
    6bc4:	71180000 	tstvc	r8, r0
    6bc8:	0100000d 	tsteq	r0, sp
    6bcc:	000138e8 	andeq	r3, r1, r8, ror #17
    6bd0:	00500100 	subseq	r0, r0, r0, lsl #2
    6bd4:	00333f19 	eorseq	r3, r3, r9, lsl pc
    6bd8:	01000100 	mrseq	r0, (UNDEF: 16)
    6bdc:	08002598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp}
    6be0:	0000001c 	andeq	r0, r0, ip, lsl r0
    6be4:	06c49c01 	strbeq	r9, [r4], r1, lsl #24
    6be8:	711a0000 	tstvc	sl, r0
    6bec:	0100000d 	tsteq	r0, sp
    6bf0:	01380100 	teqeq	r8, r0, lsl #2
    6bf4:	50010000 	andpl	r0, r1, r0
    6bf8:	36111b00 	ldrcc	r1, [r1], -r0, lsl #22
    6bfc:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    6c00:	00050701 	andeq	r0, r5, r1, lsl #14
    6c04:	0025b400 	eoreq	fp, r5, r0, lsl #8
    6c08:	00003608 	andeq	r3, r0, r8, lsl #12
    6c0c:	ef9c0100 	svc	0x009c0100
    6c10:	1c000006 	stcne	0, cr0, [r0], {6}
    6c14:	000035b1 			; <UNDEFINED> instruction: 0x000035b1
    6c18:	07011a01 	streq	r1, [r1, -r1, lsl #20]
    6c1c:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
    6c20:	00000033 	andeq	r0, r0, r3, lsr r0
    6c24:	0033c219 	eorseq	ip, r3, r9, lsl r2
    6c28:	012c0100 	teqeq	ip, r0, lsl #2
    6c2c:	080025ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, sp}
    6c30:	0000000a 	andeq	r0, r0, sl
    6c34:	07149c01 	ldreq	r9, [r4, -r1, lsl #24]
    6c38:	b11a0000 	tstlt	sl, r0
    6c3c:	01000035 	tsteq	r0, r5, lsr r0
    6c40:	0714012c 	ldreq	r0, [r4, -ip, lsr #2]
    6c44:	50010000 	andpl	r0, r1, r0
    6c48:	07041700 	streq	r1, [r4, -r0, lsl #14]
    6c4c:	19000005 	stmdbne	r0, {r0, r2}
    6c50:	00003571 	andeq	r3, r0, r1, ror r5
    6c54:	f8013a01 			; <UNDEFINED> instruction: 0xf8013a01
    6c58:	0c080025 	stceq	0, cr0, [r8], {37}	; 0x25
    6c5c:	01000000 	mrseq	r0, (UNDEF: 0)
    6c60:	00073f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
    6c64:	2f351a00 	svccs	0x00351a00
    6c68:	3a010000 	bcc	46c70 <_Min_Stack_Size+0x46870>
    6c6c:	0000b801 	andeq	fp, r0, r1, lsl #16
    6c70:	00500100 	subseq	r0, r0, r0, lsl #2
    6c74:	00310f19 	eorseq	r0, r1, r9, lsl pc
    6c78:	014c0100 	mrseq	r0, (UNDEF: 92)
    6c7c:	08002604 	stmdaeq	r0, {r2, r9, sl, sp}
    6c80:	0000000c 	andeq	r0, r0, ip
    6c84:	07649c01 	strbeq	r9, [r4, -r1, lsl #24]!
    6c88:	261a0000 	ldrcs	r0, [sl], -r0
    6c8c:	01000035 	tsteq	r0, r5, lsr r0
    6c90:	00b8014c 	adcseq	r0, r8, ip, asr #2
    6c94:	50010000 	andpl	r0, r1, r0
    6c98:	2f9f1900 	svccs	0x009f1900
    6c9c:	61010000 	mrsvs	r0, (UNDEF: 1)
    6ca0:	00261001 	eoreq	r1, r6, r1
    6ca4:	0000bc08 	andeq	fp, r0, r8, lsl #24
    6ca8:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    6cac:	1a000007 	bne	6cd0 <_Min_Stack_Size+0x68d0>
    6cb0:	00003041 	andeq	r3, r0, r1, asr #32
    6cb4:	f9016101 			; <UNDEFINED> instruction: 0xf9016101
    6cb8:	01000007 	tsteq	r0, r7
    6cbc:	33801d50 	orrcc	r1, r0, #80, 26	; 0x1400
    6cc0:	61010000 	mrsvs	r0, (UNDEF: 1)
    6cc4:	0007ff01 	andeq	pc, r7, r1, lsl #30
    6cc8:	00340000 	eorseq	r0, r4, r0
    6ccc:	34b11c00 	ldrtcc	r1, [r1], #3072	; 0xc00
    6cd0:	64010000 	strvs	r0, [r1], #-0
    6cd4:	0000b801 	andeq	fp, r0, r1, lsl #16
    6cd8:	00342100 	eorseq	r2, r4, r0, lsl #2
    6cdc:	30121c00 	andscc	r1, r2, r0, lsl #24
    6ce0:	65010000 	strvs	r0, [r1, #-0]
    6ce4:	0000b801 	andeq	fp, r0, r1, lsl #16
    6ce8:	00344c00 	eorseq	r4, r4, r0, lsl #24
    6cec:	35e31c00 	strbcc	r1, [r3, #3072]!	; 0xc00
    6cf0:	66010000 	strvs	r0, [r1], -r0
    6cf4:	0000b801 	andeq	fp, r0, r1, lsl #16
    6cf8:	00348200 	eorseq	r8, r4, r0, lsl #4
    6cfc:	30041c00 	andcc	r1, r4, r0, lsl #24
    6d00:	67010000 	strvs	r0, [r1, -r0]
    6d04:	0000b801 	andeq	fp, r0, r1, lsl #16
    6d08:	0034c800 	eorseq	ip, r4, r0, lsl #16
    6d0c:	2fae1c00 	svccs	0x00ae1c00
    6d10:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    6d14:	0000b801 	andeq	fp, r0, r1, lsl #16
    6d18:	0034fa00 	eorseq	pc, r4, r0, lsl #20
    6d1c:	33bd1c00 			; <UNDEFINED> instruction: 0x33bd1c00
    6d20:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    6d24:	0000b801 	andeq	fp, r0, r1, lsl #16
    6d28:	00354000 	eorseq	r4, r5, r0
    6d2c:	04170000 	ldreq	r0, [r7], #-0
    6d30:	00000306 	andeq	r0, r0, r6, lsl #6
    6d34:	04a30417 	strteq	r0, [r3], #1047	; 0x417
    6d38:	17190000 	ldrne	r0, [r9, -r0]
    6d3c:	01000033 	tsteq	r0, r3, lsr r0
    6d40:	26cc01af 	strbcs	r0, [ip], pc, lsr #3
    6d44:	00320800 	eorseq	r0, r2, r0, lsl #16
    6d48:	9c010000 	stcls	0, cr0, [r1], {-0}
    6d4c:	0000082a 	andeq	r0, r0, sl, lsr #16
    6d50:	0033801a 	eorseq	r8, r3, sl, lsl r0
    6d54:	01af0100 			; <UNDEFINED> instruction: 0x01af0100
    6d58:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6d5c:	19005001 	stmdbne	r0, {r0, ip, lr}
    6d60:	000035a3 	andeq	r3, r0, r3, lsr #11
    6d64:	0001e001 	andeq	lr, r1, r1
    6d68:	14080027 	strne	r0, [r8], #-39	; 0x27
    6d6c:	01000000 	mrseq	r0, (UNDEF: 0)
    6d70:	00085d9c 	muleq	r8, ip, sp
    6d74:	30411a00 	subcc	r1, r1, r0, lsl #20
    6d78:	e0010000 	and	r0, r1, r0
    6d7c:	0007f901 	andeq	pc, r7, r1, lsl #18
    6d80:	1a500100 	bne	1407188 <_Min_Stack_Size+0x1406d88>
    6d84:	00000d71 	andeq	r0, r0, r1, ror sp
    6d88:	3801e001 	stmdacc	r1, {r0, sp, lr, pc}
    6d8c:	01000001 	tsteq	r0, r1
    6d90:	ba1b0051 	blt	6c6edc <_Min_Stack_Size+0x6c6adc>
    6d94:	01000032 	tsteq	r0, r2, lsr r0
    6d98:	04cf01f9 	strbeq	r0, [pc], #505	; 6da0 <_Min_Stack_Size+0x69a0>
    6d9c:	27140000 	ldrcs	r0, [r4, -r0]
    6da0:	001c0800 	andseq	r0, ip, r0, lsl #16
    6da4:	9c010000 	stcls	0, cr0, [r1], {-0}
    6da8:	00000888 	andeq	r0, r0, r8, lsl #17
    6dac:	00328e1c 	eorseq	r8, r2, ip, lsl lr
    6db0:	01fb0100 	mvnseq	r0, r0, lsl #2
    6db4:	000004cf 	andeq	r0, r0, pc, asr #9
    6db8:	00003576 	andeq	r3, r0, r6, ror r5
    6dbc:	32a21900 	adccc	r1, r2, #0, 18
    6dc0:	0c010000 	stceq	0, cr0, [r1], {-0}
    6dc4:	00273002 	eoreq	r3, r7, r2
    6dc8:	00000808 	andeq	r0, r0, r8, lsl #16
    6dcc:	ad9c0100 	ldfges	f0, [ip]
    6dd0:	1a000008 	bne	6df8 <_Min_Stack_Size+0x69f8>
    6dd4:	0000328e 	andeq	r3, r0, lr, lsl #5
    6dd8:	ad020c01 	stcge	12, cr0, [r2, #-4]
    6ddc:	01000008 	tsteq	r0, r8
    6de0:	04170050 	ldreq	r0, [r7], #-80	; 0x50
    6de4:	000004cf 	andeq	r0, r0, pc, asr #9
    6de8:	0030741b 	eorseq	r7, r0, fp, lsl r4
    6dec:	021d0100 	andseq	r0, sp, #0, 2
    6df0:	0000010a 	andeq	r0, r0, sl, lsl #2
    6df4:	08002738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, sp}
    6df8:	00000014 	andeq	r0, r0, r4, lsl r0
    6dfc:	08ee9c01 	stmiaeq	lr!, {r0, sl, fp, ip, pc}^
    6e00:	d51d0000 	ldrle	r0, [sp, #-0]
    6e04:	01000033 	tsteq	r0, r3, lsr r0
    6e08:	00b8021d 	adcseq	r0, r8, sp, lsl r2
    6e0c:	35d00000 	ldrbcc	r0, [r0]
    6e10:	711c0000 	tstvc	ip, r0
    6e14:	0100000f 	tsteq	r0, pc
    6e18:	010a021f 	tsteq	sl, pc, lsl r2
    6e1c:	35f10000 	ldrbcc	r0, [r1, #0]!
    6e20:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    6e24:	00002e3d 	andeq	r2, r0, sp, lsr lr
    6e28:	4c023801 	stcmi	8, cr3, [r2], {1}
    6e2c:	42080027 	andmi	r0, r8, #39	; 0x27
    6e30:	01000000 	mrseq	r0, (UNDEF: 0)
    6e34:	0009539c 	muleq	r9, ip, r3
    6e38:	30411a00 	subcc	r1, r1, r0, lsl #20
    6e3c:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    6e40:	0007f902 	andeq	pc, r7, r2, lsl #18
    6e44:	1d500100 	ldfnee	f0, [r0, #-0]
    6e48:	00002ea2 	andeq	r2, r0, r2, lsr #29
    6e4c:	53023801 	movwpl	r3, #10241	; 0x2801
    6e50:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    6e54:	1d000036 	stcne	0, cr0, [r0, #-216]	; 0xffffff28
    6e58:	00000d71 	andeq	r0, r0, r1, ror sp
    6e5c:	38023801 	stmdacc	r2, {r0, fp, ip, sp}
    6e60:	58000001 	stmdapl	r0, {r0}
    6e64:	1c000036 	stcne	0, cr0, [r0], {54}	; 0x36
    6e68:	00003097 	muleq	r0, r7, r0
    6e6c:	b8023a01 	stmdalt	r2, {r0, r9, fp, ip, sp}
    6e70:	92000000 	andls	r0, r0, #0
    6e74:	1c000036 	stcne	0, cr0, [r0], {54}	; 0x36
    6e78:	0000300c 	andeq	r3, r0, ip
    6e7c:	b8023b01 	stmdalt	r2, {r0, r8, r9, fp, ip, sp}
    6e80:	c1000000 	mrsgt	r0, (UNDEF: 0)
    6e84:	00000036 	andeq	r0, r0, r6, lsr r0
    6e88:	053f0417 	ldreq	r0, [pc, #-1047]!	; 6a79 <_Min_Stack_Size+0x6679>
    6e8c:	d0190000 	andsle	r0, r9, r0
    6e90:	01000034 	tsteq	r0, r4, lsr r0
    6e94:	2790025f 			; <UNDEFINED> instruction: 0x2790025f
    6e98:	000a0800 	andeq	r0, sl, r0, lsl #16
    6e9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6ea0:	0000097e 	andeq	r0, r0, lr, ror r9
    6ea4:	002ea21a 	eoreq	sl, lr, sl, lsl r2
    6ea8:	025f0100 	subseq	r0, pc, #0, 2
    6eac:	00000953 	andeq	r0, r0, r3, asr r9
    6eb0:	19005001 	stmdbne	r0, {r0, ip, lr}
    6eb4:	0000326d 	andeq	r3, r0, sp, ror #4
    6eb8:	9c027101 	stflss	f7, [r2], {1}
    6ebc:	20080027 	andcs	r0, r8, r7, lsr #32
    6ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ec4:	0009b19c 	muleq	r9, ip, r1
    6ec8:	30411a00 	subcc	r1, r1, r0, lsl #20
    6ecc:	71010000 	mrsvc	r0, (UNDEF: 1)
    6ed0:	0007f902 	andeq	pc, r7, r2, lsl #18
    6ed4:	1a500100 	bne	14072dc <_Min_Stack_Size+0x1406edc>
    6ed8:	00000d71 	andeq	r0, r0, r1, ror sp
    6edc:	38027101 	stmdacc	r2, {r0, r8, ip, sp, lr}
    6ee0:	01000001 	tsteq	r0, r1
    6ee4:	67190051 			; <UNDEFINED> instruction: 0x67190051
    6ee8:	0100002e 	tsteq	r0, lr, lsr #32
    6eec:	27bc028e 	ldrcs	r0, [ip, lr, lsl #5]!
    6ef0:	001a0800 	andseq	r0, sl, r0, lsl #16
    6ef4:	9c010000 	stcls	0, cr0, [r1], {-0}
    6ef8:	00000a14 	andeq	r0, r0, r4, lsl sl
    6efc:	0030411a 	eorseq	r4, r0, sl, lsl r1
    6f00:	028e0100 	addeq	r0, lr, #0, 2
    6f04:	000007f9 	strdeq	r0, [r0], -r9
    6f08:	661a5001 	ldrvs	r5, [sl], -r1
    6f0c:	01000031 	tsteq	r0, r1, lsr r0
    6f10:	0a14028e 	beq	507950 <_Min_Stack_Size+0x507550>
    6f14:	51010000 	mrspl	r0, (UNDEF: 1)
    6f18:	0035e51c 	eorseq	lr, r5, ip, lsl r5
    6f1c:	02900100 	addseq	r0, r0, #0, 2
    6f20:	000000b8 	strheq	r0, [r0], -r8
    6f24:	000036f0 	strdeq	r3, [r0], -r0
    6f28:	6465721e 	strbtvs	r7, [r5], #-542	; 0x21e
    6f2c:	02910100 	addseq	r0, r1, #0, 2
    6f30:	000000b8 	strheq	r0, [r0], -r8
    6f34:	00003708 	andeq	r3, r0, r8, lsl #14
    6f38:	0033781c 	eorseq	r7, r3, ip, lsl r8
    6f3c:	02920100 	addseq	r0, r2, #0, 2
    6f40:	000000b8 	strheq	r0, [r0], -r8
    6f44:	00003720 	andeq	r3, r0, r0, lsr #14
    6f48:	83041700 	movwhi	r1, #18176	; 0x4700
    6f4c:	19000005 	stmdbne	r0, {r0, r2}
    6f50:	0000334e 	andeq	r3, r0, lr, asr #6
    6f54:	d802a901 	stmdale	r2, {r0, r8, fp, sp, pc}
    6f58:	0c080027 	stceq	0, cr0, [r8], {39}	; 0x27
    6f5c:	01000000 	mrseq	r0, (UNDEF: 0)
    6f60:	000a3f9c 	muleq	sl, ip, pc	; <UNPREDICTABLE>
    6f64:	31661a00 	cmncc	r6, r0, lsl #20
    6f68:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    6f6c:	000a1402 	andeq	r1, sl, r2, lsl #8
    6f70:	00500100 	subseq	r0, r0, r0, lsl #2
    6f74:	0035eb19 	eorseq	lr, r5, r9, lsl fp
    6f78:	02bd0100 	adcseq	r0, sp, #0, 2
    6f7c:	080027e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp}
    6f80:	00000072 	andeq	r0, r0, r2, ror r0
    6f84:	0ae49c01 	beq	ff92df90 <_estack+0xdf8fdf90>
    6f88:	411a0000 	tstmi	sl, r0
    6f8c:	01000030 	tsteq	r0, r0, lsr r0
    6f90:	07f902bd 			; <UNDEFINED> instruction: 0x07f902bd
    6f94:	50010000 	andpl	r0, r1, r0
    6f98:	00345b1d 	eorseq	r5, r4, sp, lsl fp
    6f9c:	02bd0100 	adcseq	r0, sp, #0, 2
    6fa0:	000000a2 	andeq	r0, r0, r2, lsr #1
    6fa4:	00003738 	andeq	r3, r0, r8, lsr r7
    6fa8:	0034631d 	eorseq	r6, r4, sp, lsl r3
    6fac:	02bd0100 	adcseq	r0, sp, #0, 2
    6fb0:	000000a2 	andeq	r0, r0, r2, lsr #1
    6fb4:	00003759 	andeq	r3, r0, r9, asr r7
    6fb8:	0033fa1c 	eorseq	pc, r3, ip, lsl sl	; <UNPREDICTABLE>
    6fbc:	02c00100 	sbceq	r0, r0, #0, 2
    6fc0:	000000b8 	strheq	r0, [r0], -r8
    6fc4:	0000377a 	andeq	r3, r0, sl, ror r7
    6fc8:	000eb21c 	andeq	fp, lr, ip, lsl r2
    6fcc:	02c00100 	sbceq	r0, r0, #0, 2
    6fd0:	000000b8 	strheq	r0, [r0], -r8
    6fd4:	000037b9 			; <UNDEFINED> instruction: 0x000037b9
    6fd8:	00347c1c 	eorseq	r7, r4, ip, lsl ip
    6fdc:	02c10100 	sbceq	r0, r1, #0, 2
    6fe0:	000000b8 	strheq	r0, [r0], -r8
    6fe4:	000037cc 	andeq	r3, r0, ip, asr #15
    6fe8:	0030851c 	eorseq	r8, r0, ip, lsl r5
    6fec:	02c20100 	sbceq	r0, r2, #0, 2
    6ff0:	000000b8 	strheq	r0, [r0], -r8
    6ff4:	000037f7 	strdeq	r3, [r0], -r7
    6ff8:	002fdd1c 	eoreq	sp, pc, ip, lsl sp	; <UNPREDICTABLE>
    6ffc:	02c30100 	sbceq	r0, r3, #0, 2
    7000:	000000b8 	strheq	r0, [r0], -r8
    7004:	00003820 	andeq	r3, r0, r0, lsr #16
    7008:	0035631c 	eorseq	r6, r5, ip, lsl r3
    700c:	02c40100 	sbceq	r0, r4, #0, 2
    7010:	000000b8 	strheq	r0, [r0], -r8
    7014:	0000383e 	andeq	r3, r0, lr, lsr r8
    7018:	33621900 	cmncc	r2, #0, 18
    701c:	fa010000 	blx	47024 <_Min_Stack_Size+0x46c24>
    7020:	00285802 	eoreq	r5, r8, r2, lsl #16
    7024:	00000408 	andeq	r0, r0, r8, lsl #8
    7028:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    702c:	1a00000b 	bne	7060 <_Min_Stack_Size+0x6c60>
    7030:	00003041 	andeq	r3, r0, r1, asr #32
    7034:	f902fa01 			; <UNDEFINED> instruction: 0xf902fa01
    7038:	01000007 	tsteq	r0, r7
    703c:	32df1a50 	sbcscc	r1, pc, #80, 20	; 0x50000
    7040:	fa010000 	blx	47048 <_Min_Stack_Size+0x46c48>
    7044:	00009702 	andeq	r9, r0, r2, lsl #14
    7048:	00510100 	subseq	r0, r1, r0, lsl #2
    704c:	00341219 	eorseq	r1, r4, r9, lsl r2
    7050:	03090100 	movweq	r0, #37120	; 0x9100
    7054:	0800285c 	stmdaeq	r0, {r2, r3, r4, r6, fp, sp}
    7058:	00000004 	andeq	r0, r0, r4
    705c:	0b4a9c01 	bleq	12ae068 <_Min_Stack_Size+0x12adc68>
    7060:	411a0000 	tstmi	sl, r0
    7064:	01000030 	tsteq	r0, r0, lsr r0
    7068:	07f90309 	ldrbeq	r0, [r9, r9, lsl #6]!
    706c:	50010000 	andpl	r0, r1, r0
    7070:	0019a31a 	andseq	sl, r9, sl, lsl r3
    7074:	03090100 	movweq	r0, #37120	; 0x9100
    7078:	000000b8 	strheq	r0, [r0], -r8
    707c:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    7080:	00002fce 	andeq	r2, r0, lr, asr #31
    7084:	60031901 	andvs	r1, r3, r1, lsl #18
    7088:	56080028 	strpl	r0, [r8], -r8, lsr #32
    708c:	01000000 	mrseq	r0, (UNDEF: 0)
    7090:	000be99c 	muleq	fp, ip, r9
    7094:	30411a00 	subcc	r1, r1, r0, lsl #20
    7098:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    709c:	0007f903 	andeq	pc, r7, r3, lsl #18
    70a0:	1d500100 	ldfnee	f0, [r0, #-0]
    70a4:	0000361c 	andeq	r3, r0, ip, lsl r6
    70a8:	b8031901 	stmdalt	r3, {r0, r8, fp, ip}
    70ac:	5c000000 	stcpl	0, cr0, [r0], {-0}
    70b0:	1a000038 	bne	7198 <_Min_Stack_Size+0x6d98>
    70b4:	00002e54 	andeq	r2, r0, r4, asr lr
    70b8:	b8031901 	stmdalt	r3, {r0, r8, fp, ip}
    70bc:	01000000 	mrseq	r0, (UNDEF: 0)
    70c0:	0eb21f52 	mrceq	15, 5, r1, cr2, cr2, {2}
    70c4:	1c010000 	stcne	0, cr0, [r1], {-0}
    70c8:	00009703 	andeq	r9, r0, r3, lsl #14
    70cc:	33fa1c00 	mvnscc	r1, #0, 24
    70d0:	1d010000 	stcne	0, cr0, [r1, #-0]
    70d4:	0000b803 	andeq	fp, r0, r3, lsl #16
    70d8:	00388800 	eorseq	r8, r8, r0, lsl #16
    70dc:	347c1c00 	ldrbtcc	r1, [ip], #-3072	; 0xc00
    70e0:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    70e4:	0000b803 	andeq	fp, r0, r3, lsl #16
    70e8:	0038bc00 	eorseq	fp, r8, r0, lsl #24
    70ec:	30851c00 	addcc	r1, r5, r0, lsl #24
    70f0:	1f010000 	svcne	0x00010000
    70f4:	0000b803 	andeq	fp, r0, r3, lsl #16
    70f8:	0038cf00 	eorseq	ip, r8, r0, lsl #30
    70fc:	2fdd1c00 	svccs	0x00dd1c00
    7100:	20010000 	andcs	r0, r1, r0
    7104:	0000b803 	andeq	fp, r0, r3, lsl #16
    7108:	0038fc00 	eorseq	pc, r8, r0, lsl #24
    710c:	35631c00 	strbcc	r1, [r3, #-3072]!	; 0xc00
    7110:	21010000 	mrscs	r0, (UNDEF: 1)
    7114:	0000b803 	andeq	fp, r0, r3, lsl #16
    7118:	00390f00 	eorseq	r0, r9, r0, lsl #30
    711c:	12190000 	andsne	r0, r9, #0
    7120:	0100002f 	tsteq	r0, pc, lsr #32
    7124:	28b80357 	ldmcs	r8!, {r0, r1, r2, r4, r6, r8, r9}
    7128:	00560800 	subseq	r0, r6, r0, lsl #16
    712c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7130:	00000c38 	andeq	r0, r0, r8, lsr ip
    7134:	0030411a 	eorseq	r4, r0, sl, lsl r1
    7138:	03570100 	cmpeq	r7, #0, 2
    713c:	000007f9 	strdeq	r0, [r0], -r9
    7140:	001a5001 	andseq	r5, sl, r1
    7144:	01000035 	tsteq	r0, r5, lsr r0
    7148:	00b80357 	adcseq	r0, r8, r7, asr r3
    714c:	51010000 	mrspl	r0, (UNDEF: 1)
    7150:	000eb21f 	andeq	fp, lr, pc, lsl r2
    7154:	035a0100 	cmpeq	sl, #0, 2
    7158:	00000097 	muleq	r0, r7, r0
    715c:	0033fa1c 	eorseq	pc, r3, ip, lsl sl	; <UNPREDICTABLE>
    7160:	035b0100 	cmpeq	fp, #0, 2
    7164:	000000b8 	strheq	r0, [r0], -r8
    7168:	00003929 	andeq	r3, r0, r9, lsr #18
    716c:	35fe1900 	ldrbcc	r1, [lr, #2304]!	; 0x900
    7170:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    7174:	00291003 	eoreq	r1, r9, r3
    7178:	00001a08 	andeq	r1, r0, r8, lsl #20
    717c:	6d9c0100 	ldfvss	f0, [ip]
    7180:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
    7184:	00003250 	andeq	r3, r0, r0, asr r2
    7188:	b803c901 	stmdalt	r3, {r0, r8, fp, lr, pc}
    718c:	52000000 	andpl	r0, r0, #0
    7190:	1a000039 	bne	727c <_Min_Stack_Size+0x6e7c>
    7194:	00000d71 	andeq	r0, r0, r1, ror sp
    7198:	3803c901 	stmdacc	r3, {r0, r8, fp, lr, pc}
    719c:	01000001 	tsteq	r0, r1
    71a0:	2c1b0051 	ldccs	0, cr0, [fp], {81}	; 0x51
    71a4:	01000033 	tsteq	r0, r3, lsr r0
    71a8:	010a03e3 	smlatteq	sl, r3, r3, r0
    71ac:	292c0000 	stmdbcs	ip!, {}	; <UNPREDICTABLE>
    71b0:	00140800 	andseq	r0, r4, r0, lsl #16
    71b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    71b8:	00000ca8 	andeq	r0, r0, r8, lsr #25
    71bc:	00350c1d 	eorseq	r0, r5, sp, lsl ip
    71c0:	03e30100 	mvneq	r0, #0, 2
    71c4:	000000b8 	strheq	r0, [r0], -r8
    71c8:	0000398c 	andeq	r3, r0, ip, lsl #19
    71cc:	000f711c 	andeq	r7, pc, ip, lsl r1	; <UNPREDICTABLE>
    71d0:	03e50100 	mvneq	r0, #0, 2
    71d4:	0000010a 	andeq	r0, r0, sl, lsl #2
    71d8:	000039ad 	andeq	r3, r0, sp, lsr #19
    71dc:	2e931900 	cdpcs	9, 9, cr1, cr3, cr0, {0}
    71e0:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    71e4:	00294003 	eoreq	r4, r9, r3
    71e8:	00000c08 	andeq	r0, r0, r8, lsl #24
    71ec:	cd9c0100 	ldfgts	f0, [ip]
    71f0:	1a00000c 	bne	7228 <_Min_Stack_Size+0x6e28>
    71f4:	0000350c 	andeq	r3, r0, ip, lsl #10
    71f8:	b803ff01 	stmdalt	r3, {r0, r8, r9, sl, fp, ip, sp, lr, pc}
    71fc:	01000000 	mrseq	r0, (UNDEF: 0)
    7200:	da1b0050 	ble	6c7348 <_Min_Stack_Size+0x6c6f48>
    7204:	01000030 	tsteq	r0, r0, lsr r0
    7208:	01160412 	tsteq	r6, r2, lsl r4
    720c:	294c0000 	stmdbcs	ip, {}^	; <UNPREDICTABLE>
    7210:	001e0800 	andseq	r0, lr, r0, lsl #16
    7214:	9c010000 	stcls	0, cr0, [r1], {-0}
    7218:	00000d08 	andeq	r0, r0, r8, lsl #26
    721c:	0032501d 	eorseq	r5, r2, sp, lsl r0
    7220:	04120100 	ldreq	r0, [r2], #-256	; 0x100
    7224:	000000b8 	strheq	r0, [r0], -r8
    7228:	000039e6 	andeq	r3, r0, r6, ror #19
    722c:	000f711c 	andeq	r7, pc, ip, lsl r1	; <UNPREDICTABLE>
    7230:	04140100 	ldreq	r0, [r4], #-256	; 0x100
    7234:	00000116 	andeq	r0, r0, r6, lsl r1
    7238:	00003a20 	andeq	r3, r0, r0, lsr #20
    723c:	33a61900 			; <UNDEFINED> instruction: 0x33a61900
    7240:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    7244:	00296c04 	eoreq	r6, r9, r4, lsl #24
    7248:	00000c08 	andeq	r0, r0, r8, lsl #24
    724c:	2d9c0100 	ldfcss	f0, [ip]
    7250:	1a00000d 	bne	728c <_Min_Stack_Size+0x6e8c>
    7254:	00003250 	andeq	r3, r0, r0, asr r2
    7258:	b8043801 	stmdalt	r4, {r0, fp, ip, sp}
    725c:	01000000 	mrseq	r0, (UNDEF: 0)
    7260:	a0200050 	eorge	r0, r0, r0, asr r0
    7264:	06000003 	streq	r0, [r0], -r3
    7268:	00ef06a7 	rsceq	r0, pc, r7, lsr #13
    726c:	cf210000 	svcgt	0x00210000
    7270:	07000013 	smladeq	r0, r3, r0, r0
    7274:	b822024a 	stmdalt	r2!, {r1, r3, r6, r9}
    7278:	22000000 	andcs	r0, r0, #0
    727c:	00000138 	andeq	r0, r0, r8, lsr r1
    7280:	0c9e0000 	ldceq	0, cr0, [lr], {0}
    7284:	00040000 	andeq	r0, r4, r0
    7288:	00001719 	andeq	r1, r0, r9, lsl r7
    728c:	02870104 	addeq	r0, r7, #4, 2
    7290:	bf010000 	svclt	0x00010000
    7294:	ab000038 	blge	737c <_Min_Stack_Size+0x6f7c>
    7298:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    729c:	00000008 	andeq	r0, r0, r8
    72a0:	30000000 	andcc	r0, r0, r0
    72a4:	0200002f 	andeq	r0, r0, #47	; 0x2f
    72a8:	01530601 	cmpeq	r3, r1, lsl #12
    72ac:	01020000 	mrseq	r0, (UNDEF: 2)
    72b0:	00015108 	andeq	r5, r1, r8, lsl #2
    72b4:	05020200 	streq	r0, [r2, #-512]	; 0x200
    72b8:	00000106 	andeq	r0, r0, r6, lsl #2
    72bc:	e8070202 	stmda	r7, {r1, r9}
    72c0:	03000001 	movweq	r0, #1
    72c4:	0000037a 	andeq	r0, r0, sl, ror r3
    72c8:	004c3702 	subeq	r3, ip, r2, lsl #14
    72cc:	04020000 	streq	r0, [r2], #-0
    72d0:	0000ec05 	andeq	lr, r0, r5, lsl #24
    72d4:	00510300 	subseq	r0, r1, r0, lsl #6
    72d8:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    72dc:	0000005e 	andeq	r0, r0, lr, asr r0
    72e0:	7b070402 	blvc	1c82f0 <_Min_Stack_Size+0x1c7ef0>
    72e4:	02000001 	andeq	r0, r0, #1
    72e8:	00e70508 	rsceq	r0, r7, r8, lsl #10
    72ec:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    72f0:	00017607 	andeq	r7, r1, r7, lsl #12
    72f4:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    72f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    72fc:	80070402 	andhi	r0, r7, r2, lsl #8
    7300:	03000001 	movweq	r0, #1
    7304:	0000037c 	andeq	r0, r0, ip, ror r3
    7308:	00414103 	subeq	r4, r1, r3, lsl #2
    730c:	53030000 	movwpl	r0, #12288	; 0x3000
    7310:	03000000 	movweq	r0, #0
    7314:	00005342 	andeq	r5, r0, r2, asr #6
    7318:	008c0500 	addeq	r0, ip, r0, lsl #10
    731c:	00a70000 	adceq	r0, r7, r0
    7320:	a7060000 	strge	r0, [r6, -r0]
    7324:	07000000 	streq	r0, [r0, -r0]
    7328:	07040200 	streq	r0, [r4, -r0, lsl #4]
    732c:	0000002c 	andeq	r0, r0, ip, lsr #32
    7330:	00008c07 	andeq	r8, r0, r7, lsl #24
    7334:	008c0500 	addeq	r0, ip, r0, lsl #10
    7338:	00c30000 	sbceq	r0, r3, r0
    733c:	a7060000 	strge	r0, [r6, -r0]
    7340:	01000000 	mrseq	r0, (UNDEF: 0)
    7344:	00810700 	addeq	r0, r1, r0, lsl #14
    7348:	01080000 	mrseq	r0, (UNDEF: 8)
    734c:	de01f704 	cdple	7, 0, cr15, cr1, cr4, {0}
    7350:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7354:	00000ed2 	ldrdeq	r0, [r0], -r2
    7358:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    735c:	00010054 	andeq	r0, r1, r4, asr r0
    7360:	0023170b 	eoreq	r1, r3, fp, lsl #14
    7364:	01f70400 	mvnseq	r0, r0, lsl #8
    7368:	000000c8 	andeq	r0, r0, r8, asr #1
    736c:	00228e0b 	eoreq	r8, r2, fp, lsl #28
    7370:	01f70400 	mvnseq	r0, r0, lsl #8
    7374:	000000c8 	andeq	r0, r0, r8, asr #1
    7378:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    737c:	00010c01 	andeq	r0, r1, r1, lsl #24
    7380:	048b0900 	streq	r0, [fp], #2304	; 0x900
    7384:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7388:	000005c3 	andeq	r0, r0, r3, asr #11
    738c:	2d0b0001 	stccs	0, cr0, [fp, #-4]
    7390:	04000009 	streq	r0, [r0], #-9
    7394:	00f601f9 	ldrshteq	r0, [r6], #25
    7398:	200c0000 	andcs	r0, ip, r0
    739c:	2f038b04 	svccs	0x00038b04
    73a0:	0d000001 	stceq	0, cr0, [r0, #-4]
    73a4:	00003efa 	strdeq	r3, [r0], -sl
    73a8:	2f038d04 	svccs	0x00038d04
    73ac:	00000001 	andeq	r0, r0, r1
    73b0:	00970700 	addseq	r0, r7, r0, lsl #14
    73b4:	560b0000 	strpl	r0, [fp], -r0
    73b8:	04000037 	streq	r0, [r0], #-55	; 0x37
    73bc:	0118038e 	tsteq	r8, lr, lsl #7
    73c0:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    73c4:	57039404 	strpl	r9, [r3, -r4, lsl #8]
    73c8:	0d000001 	stceq	0, cr0, [r0, #-4]
    73cc:	00003cdf 	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    73d0:	67039604 	strvs	r9, [r3, -r4, lsl #12]
    73d4:	00000001 	andeq	r0, r0, r1
    73d8:	008c0500 	addeq	r0, ip, r0, lsl #10
    73dc:	01670000 	cmneq	r7, r0
    73e0:	a7060000 	strge	r0, [r6, -r0]
    73e4:	06000000 	streq	r0, [r0], -r0
    73e8:	01570700 	cmpeq	r7, r0, lsl #14
    73ec:	db0b0000 	blle	2c73f4 <_Min_Stack_Size+0x2c6ff4>
    73f0:	0400003b 	streq	r0, [r0], #-59	; 0x3b
    73f4:	01400397 			; <UNDEFINED> instruction: 0x01400397
    73f8:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    73fc:	d0039d04 	andle	r9, r3, r4, lsl #26
    7400:	0d000001 	stceq	0, cr0, [r0, #-4]
    7404:	00003acd 	andeq	r3, r0, sp, asr #21
    7408:	ae039f04 	cdpge	15, 0, cr9, cr3, cr4, {0}
    740c:	00000000 	andeq	r0, r0, r0
    7410:	3252530e 	subscc	r5, r2, #939524096	; 0x38000000
    7414:	03a00400 	moveq	r0, #0, 8
    7418:	000000ae 	andeq	r0, r0, lr, lsr #1
    741c:	36330d04 	ldrtcc	r0, [r3], -r4, lsl #26
    7420:	a1040000 	mrsge	r0, (UNDEF: 4)
    7424:	0000ae03 	andeq	sl, r0, r3, lsl #28
    7428:	490d0800 	stmdbmi	sp, {fp}
    742c:	0400003b 	streq	r0, [r0], #-59	; 0x3b
    7430:	00ae03a2 	adceq	r0, lr, r2, lsr #7
    7434:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    7438:	0000023f 	andeq	r0, r0, pc, lsr r2
    743c:	8c03a304 	stchi	3, cr10, [r3], {4}
    7440:	10000000 	andne	r0, r0, r0
    7444:	0037d90d 	eorseq	sp, r7, sp, lsl #18
    7448:	03a40400 			; <UNDEFINED> instruction: 0x03a40400
    744c:	000000ae 	andeq	r0, r0, lr, lsr #1
    7450:	3c0b0014 	stccc	0, cr0, [fp], {20}
    7454:	04000039 	streq	r0, [r0], #-57	; 0x39
    7458:	017803a5 	cmneq	r8, r5, lsr #7
    745c:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    7460:	3403ab04 	strcc	sl, [r3], #-2820	; 0xb04
    7464:	0d000002 	stceq	0, cr0, [r0, #-8]
    7468:	00003ad2 	ldrdeq	r3, [r0], -r2
    746c:	ae03ad04 	cdpge	13, 0, cr10, cr3, cr4, {0}
    7470:	00000000 	andeq	r0, r0, r0
    7474:	3352530e 	cmpcc	r2, #939524096	; 0x38000000
    7478:	03ae0400 			; <UNDEFINED> instruction: 0x03ae0400
    747c:	000000ae 	andeq	r0, r0, lr, lsr #1
    7480:	36a40d04 	strtcc	r0, [r4], r4, lsl #26
    7484:	af040000 	svcge	0x00040000
    7488:	0000ae03 	andeq	sl, r0, r3, lsl #28
    748c:	4f0d0800 	svcmi	0x000d0800
    7490:	0400003b 	streq	r0, [r0], #-59	; 0x3b
    7494:	00ae03b0 	strhteq	r0, [lr], r0
    7498:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    749c:	0000023f 	andeq	r0, r0, pc, lsr r2
    74a0:	8c03b104 	stfhid	f3, [r3], {4}
    74a4:	10000000 	andne	r0, r0, r0
    74a8:	0037ac0d 	eorseq	sl, r7, sp, lsl #24
    74ac:	03b20400 			; <UNDEFINED> instruction: 0x03b20400
    74b0:	000000ae 	andeq	r0, r0, lr, lsr #1
    74b4:	a60b0014 			; <UNDEFINED> instruction: 0xa60b0014
    74b8:	0400003b 	streq	r0, [r0], #-59	; 0x3b
    74bc:	01dc03b3 	ldrheq	r0, [ip, #51]	; 0x33
    74c0:	140c0000 	strne	r0, [ip], #-0
    74c4:	8b03b904 	blhi	f58dc <_Min_Stack_Size+0xf54dc>
    74c8:	0d000002 	stceq	0, cr0, [r0, #-8]
    74cc:	00003ad7 	ldrdeq	r3, [r0], -r7
    74d0:	ae03bb04 	vmlage.f64	d11, d3, d4
    74d4:	00000000 	andeq	r0, r0, r0
    74d8:	3452530e 	ldrbcc	r5, [r2], #-782	; 0x30e
    74dc:	03bc0400 			; <UNDEFINED> instruction: 0x03bc0400
    74e0:	000000ae 	andeq	r0, r0, lr, lsr #1
    74e4:	36aa0d04 	strtcc	r0, [sl], r4, lsl #26
    74e8:	bd040000 	stclt	0, cr0, [r4, #-0]
    74ec:	0000ae03 	andeq	sl, r0, r3, lsl #28
    74f0:	b00d0800 	andlt	r0, sp, r0, lsl #16
    74f4:	0400003c 	streq	r0, [r0], #-60	; 0x3c
    74f8:	00ae03be 	strhteq	r0, [lr], lr
    74fc:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    7500:	00003ed2 	ldrdeq	r3, [r0], -r2
    7504:	ae03bf04 	cdpge	15, 0, cr11, cr3, cr4, {0}
    7508:	10000000 	andne	r0, r0, r0
    750c:	3c190b00 	ldccc	11, cr0, [r9], {-0}
    7510:	c0040000 	andgt	r0, r4, r0
    7514:	00024003 	andeq	r4, r2, r3
    7518:	041c0c00 	ldreq	r0, [ip], #-3072	; 0xc00
    751c:	02e203c6 	rsceq	r0, r2, #402653187	; 0x18000003
    7520:	580d0000 	stmdapl	sp, {}	; <UNPREDICTABLE>
    7524:	04000036 	streq	r0, [r0], #-54	; 0x36
    7528:	02e203c8 	rsceq	r0, r2, #200, 6	; 0x20000003
    752c:	0d000000 	stceq	0, cr0, [r0, #-0]
    7530:	0000376d 	andeq	r3, r0, sp, ror #14
    7534:	e703c904 	str	ip, [r3, -r4, lsl #18]
    7538:	08000002 	stmdaeq	r0, {r1}
    753c:	00398d0d 	eorseq	r8, r9, sp, lsl #26
    7540:	03ca0400 	biceq	r0, sl, #0, 8
    7544:	000000ae 	andeq	r0, r0, lr, lsr #1
    7548:	36e20d10 	usatcc	r0, #2, r0, lsl #26
    754c:	cb040000 	blgt	107554 <_Min_Stack_Size+0x107154>
    7550:	0000ae03 	andeq	sl, r0, r3, lsl #28
    7554:	680d1400 	stmdavs	sp, {sl, ip}
    7558:	04000037 	streq	r0, [r0], #-55	; 0x37
    755c:	00ae03cc 	adceq	r0, lr, ip, asr #7
    7560:	00180000 	andseq	r0, r8, r0
    7564:	0000b307 	andeq	fp, r0, r7, lsl #6
    7568:	00b30700 	adcseq	r0, r3, r0, lsl #14
    756c:	5d0b0000 	stcpl	0, cr0, [fp, #-0]
    7570:	04000036 	streq	r0, [r0], #-54	; 0x36
    7574:	029703cd 	addseq	r0, r7, #872415235	; 0x34000003
    7578:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    757c:	03552f05 	cmpeq	r5, #5, 30
    7580:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
    7584:	0500003c 	streq	r0, [r0, #-60]	; 0x3c
    7588:	00008c31 	andeq	r8, r0, r1, lsr ip
    758c:	ae100000 	cdpge	0, 1, cr0, cr0, cr0, {0}
    7590:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    7594:	00008c36 	andeq	r8, r0, r6, lsr ip
    7598:	37100400 	ldrcc	r0, [r0, -r0, lsl #8]
    759c:	0500003b 	streq	r0, [r0, #-59]	; 0x3b
    75a0:	00008c3b 	andeq	r8, r0, fp, lsr ip
    75a4:	66100800 	ldrvs	r0, [r0], -r0, lsl #16
    75a8:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    75ac:	00008c40 	andeq	r8, r0, r0, asr #24
    75b0:	ea100c00 	b	40a5b8 <_Min_Stack_Size+0x40a1b8>
    75b4:	0500003e 	streq	r0, [r0, #-62]	; 0x3e
    75b8:	00008c45 	andeq	r8, r0, r5, asr #24
    75bc:	2f101000 	svccs	0x00101000
    75c0:	0500003d 	streq	r0, [r0, #-61]	; 0x3d
    75c4:	00008c49 	andeq	r8, r0, r9, asr #24
    75c8:	6a101400 	bvs	40c5d0 <_Min_Stack_Size+0x40c1d0>
    75cc:	0500003b 	streq	r0, [r0, #-59]	; 0x3b
    75d0:	00008c51 	andeq	r8, r0, r1, asr ip
    75d4:	03001800 	movweq	r1, #2048	; 0x800
    75d8:	00003b89 	andeq	r3, r0, r9, lsl #23
    75dc:	02f85305 	rscseq	r5, r8, #335544320	; 0x14000000
    75e0:	400f0000 	andmi	r0, pc, r0
    75e4:	04295805 	strteq	r5, [r9], #-2053	; 0x805
    75e8:	03100000 	tsteq	r0, #0
    75ec:	0500003c 	streq	r0, [r0, #-60]	; 0x3c
    75f0:	00008c5a 	andeq	r8, r0, sl, asr ip
    75f4:	d7100000 	ldrle	r0, [r0, -r0]
    75f8:	0500003e 	streq	r0, [r0, #-62]	; 0x3e
    75fc:	00008c5d 	andeq	r8, r0, sp, asr ip
    7600:	b6100400 	ldrlt	r0, [r0], -r0, lsl #8
    7604:	0500003c 	streq	r0, [r0, #-60]	; 0x3c
    7608:	00008c61 	andeq	r8, r0, r1, ror #24
    760c:	f3100800 	vsub.i16	d0, d0, d0
    7610:	0500003d 	streq	r0, [r0, #-61]	; 0x3d
    7614:	00008c65 	andeq	r8, r0, r5, ror #24
    7618:	60100c00 	andsvs	r0, r0, r0, lsl #24
    761c:	05000039 	streq	r0, [r0, #-57]	; 0x39
    7620:	00008c68 	andeq	r8, r0, r8, ror #24
    7624:	b0101000 	andslt	r1, r0, r0
    7628:	05000036 	streq	r0, [r0, #-54]	; 0x36
    762c:	00008c6c 	andeq	r8, r0, ip, ror #24
    7630:	0c101400 	cfldrseq	mvf1, [r0], {-0}
    7634:	0500003c 	streq	r0, [r0, #-60]	; 0x3c
    7638:	00008c70 	andeq	r8, r0, r0, ror ip
    763c:	b4101800 	ldrlt	r1, [r0], #-2048	; 0x800
    7640:	05000039 	streq	r0, [r0, #-57]	; 0x39
    7644:	00008c74 	andeq	r8, r0, r4, ror ip
    7648:	46101c00 	ldrmi	r1, [r0], -r0, lsl #24
    764c:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    7650:	00008c79 	andeq	r8, r0, r9, ror ip
    7654:	9f102000 	svcls	0x00102000
    7658:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    765c:	00008c7c 	andeq	r8, r0, ip, ror ip
    7660:	39102400 	ldmdbcc	r0, {sl, sp}
    7664:	05000036 	streq	r0, [r0, #-54]	; 0x36
    7668:	00008c80 	andeq	r8, r0, r0, lsl #25
    766c:	46102800 	ldrmi	r2, [r0], -r0, lsl #16
    7670:	0500003e 	streq	r0, [r0, #-62]	; 0x3e
    7674:	00008c83 	andeq	r8, r0, r3, lsl #25
    7678:	b8102c00 	ldmdalt	r0, {sl, fp, sp}
    767c:	0500003b 	streq	r0, [r0, #-59]	; 0x3b
    7680:	00008c87 	andeq	r8, r0, r7, lsl #25
    7684:	04103000 	ldreq	r3, [r0], #-0
    7688:	05000037 	streq	r0, [r0, #-55]	; 0x37
    768c:	00008c8a 	andeq	r8, r0, sl, lsl #25
    7690:	c5103400 	ldrgt	r3, [r0, #-1024]	; 0x400
    7694:	0500003c 	streq	r0, [r0, #-60]	; 0x3c
    7698:	00042990 	muleq	r4, r0, r9
    769c:	12103800 	andsne	r3, r0, #0, 16
    76a0:	05000038 	streq	r0, [r0, #-56]	; 0x38
    76a4:	00042992 	muleq	r4, r2, r9
    76a8:	11003c00 	tstne	r0, r0, lsl #24
    76ac:	00035504 	andeq	r5, r3, r4, lsl #10
    76b0:	37720300 	ldrbcc	r0, [r2, -r0, lsl #6]!
    76b4:	93050000 	movwls	r0, #20480	; 0x5000
    76b8:	00000360 	andeq	r0, r0, r0, ror #6
    76bc:	9805100f 	stmdals	r5, {r0, r1, r2, r3, ip}
    76c0:	00000473 	andeq	r0, r0, r3, ror r4
    76c4:	0039c910 	eorseq	ip, r9, r0, lsl r9
    76c8:	8c9a0500 	cfldr32hi	mvfx0, [sl], {0}
    76cc:	00000000 	andeq	r0, r0, r0
    76d0:	003d0e10 	eorseq	r0, sp, r0, lsl lr
    76d4:	8ca00500 	cfstr32hi	mvfx0, [r0]
    76d8:	04000000 	streq	r0, [r0], #-0
    76dc:	003c2b10 	eorseq	r2, ip, r0, lsl fp
    76e0:	8ca60500 	cfstr32hi	mvfx0, [r6]
    76e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    76e8:	00378910 	eorseq	r8, r7, r0, lsl r9
    76ec:	8cad0500 	cfstr32hi	mvfx0, [sp]
    76f0:	0c000000 	stceq	0, cr0, [r0], {-0}
    76f4:	37f10300 	ldrbcc	r0, [r1, r0, lsl #6]!
    76f8:	b2050000 	andlt	r0, r5, #0
    76fc:	0000043a 	andeq	r0, r0, sl, lsr r4
    7700:	b705240f 	strlt	r2, [r5, -pc, lsl #8]
    7704:	000004f3 	strdeq	r0, [r0], -r3
    7708:	003c0310 	eorseq	r0, ip, r0, lsl r3
    770c:	8cb90500 	cfldr32hi	mvfx0, [r9]
    7710:	00000000 	andeq	r0, r0, r0
    7714:	003ec210 	eorseq	ip, lr, r0, lsl r2
    7718:	8cbc0500 	cfldr32hi	mvfx0, [ip]
    771c:	04000000 	streq	r0, [r0], #-0
    7720:	003df310 	eorseq	pc, sp, r0, lsl r3	; <UNPREDICTABLE>
    7724:	8cbf0500 	cfldr32hi	mvfx0, [pc]	; 772c <_Min_Stack_Size+0x732c>
    7728:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    772c:	003deb10 	eorseq	lr, sp, r0, lsl fp
    7730:	8cc20500 	cfstr64hi	mvdx0, [r2], {0}
    7734:	0c000000 	stceq	0, cr0, [r0], {-0}
    7738:	003d9e10 	eorseq	r9, sp, r0, lsl lr
    773c:	8cc50500 	cfstr64hi	mvdx0, [r5], {0}
    7740:	10000000 	andne	r0, r0, r0
    7744:	00394e10 	eorseq	r4, r9, r0, lsl lr
    7748:	8cc80500 	cfstr64hi	mvdx0, [r8], {0}
    774c:	14000000 	strne	r0, [r0], #-0
    7750:	003a0410 	eorseq	r0, sl, r0, lsl r4
    7754:	8ccc0500 	cfstr64hi	mvdx0, [ip], {0}
    7758:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    775c:	0036e810 	eorseq	lr, r6, r0, lsl r8
    7760:	f3d00500 	vabal.u16	q8, d0, d0
    7764:	1c000004 	stcne	0, cr0, [r0], {4}
    7768:	00388110 	eorseq	r8, r8, r0, lsl r1
    776c:	f3d20500 	vabal.u16	q8, d2, d0
    7770:	20000004 	andcs	r0, r0, r4
    7774:	73041100 	movwvc	r1, #16640	; 0x4100
    7778:	03000004 	movweq	r0, #4
    777c:	00003bc7 	andeq	r3, r0, r7, asr #23
    7780:	047ed305 	ldrbteq	sp, [lr], #-773	; 0x305
    7784:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
    7788:	0555d905 	ldrbeq	sp, [r5, #-2309]	; 0x905
    778c:	c2100000 	andsgt	r0, r0, #0
    7790:	0500003e 	streq	r0, [r0, #-62]	; 0x3e
    7794:	00008cdb 	ldrdeq	r8, [r0], -fp
    7798:	4e100000 	cdpmi	0, 1, cr0, cr0, cr0, {0}
    779c:	05000039 	streq	r0, [r0, #-57]	; 0x39
    77a0:	00008cde 	ldrdeq	r8, [r0], -lr
    77a4:	04100400 	ldreq	r0, [r0], #-1024	; 0x400
    77a8:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    77ac:	00008ce2 	andeq	r8, r0, r2, ror #25
    77b0:	e8100800 	ldmda	r0, {fp}
    77b4:	05000036 	streq	r0, [r0, #-54]	; 0x36
    77b8:	0004f3e7 	andeq	pc, r4, r7, ror #7
    77bc:	81100c00 	tsthi	r0, r0, lsl #24
    77c0:	05000038 	streq	r0, [r0, #-56]	; 0x38
    77c4:	0004f3e9 	andeq	pc, r4, r9, ror #7
    77c8:	74101000 	ldrvc	r1, [r0], #-0
    77cc:	0500003e 	streq	r0, [r0, #-62]	; 0x3e
    77d0:	0004f3eb 	andeq	pc, r4, fp, ror #7
    77d4:	03001400 	movweq	r1, #1024	; 0x400
    77d8:	00003adc 	ldrdeq	r3, [r0], -ip
    77dc:	0504ec05 	streq	lr, [r4, #-3077]	; 0xc05
    77e0:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    77e4:	05c1f205 	strbeq	pc, [r1, #517]	; 0x205	; <UNPREDICTABLE>
    77e8:	57100000 	ldrpl	r0, [r0, -r0]
    77ec:	0500003d 	streq	r0, [r0, #-61]	; 0x3d
    77f0:	00008cf4 	strdeq	r8, [r0], -r4
    77f4:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
    77f8:	05000038 	streq	r0, [r0, #-56]	; 0x38
    77fc:	00008cf8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    7800:	e4100400 	ldr	r0, [r0], #-1024	; 0x400
    7804:	0500003c 	streq	r0, [r0, #-60]	; 0x3c
    7808:	00008cfc 	strdeq	r8, [r0], -ip
    780c:	150d0800 	strne	r0, [sp, #-2048]	; 0x800
    7810:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    7814:	008c0100 	addeq	r0, ip, r0, lsl #2
    7818:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    781c:	0000372c 	andeq	r3, r0, ip, lsr #14
    7820:	8c010505 	cfstr32hi	mvfx0, [r1], {5}
    7824:	10000000 	andne	r0, r0, r0
    7828:	003af20d 	eorseq	pc, sl, sp, lsl #4
    782c:	01080500 	tsteq	r8, r0, lsl #10
    7830:	0000008c 	andeq	r0, r0, ip, lsl #1
    7834:	39930d14 	ldmibcc	r3, {r2, r4, r8, sl, fp}
    7838:	0c050000 	stceq	0, cr0, [r5], {-0}
    783c:	00008c01 	andeq	r8, r0, r1, lsl #24
    7840:	0b001800 	bleq	d848 <_Min_Stack_Size+0xd448>
    7844:	00003dd0 	ldrdeq	r3, [r0], -r0
    7848:	60011005 	andvs	r1, r1, r5
    784c:	0c000005 	stceq	0, cr0, [r0], {5}
    7850:	01170510 	tsteq	r7, r0, lsl r5
    7854:	0000060b 	andeq	r0, r0, fp, lsl #12
    7858:	003e5b0d 	eorseq	r5, lr, sp, lsl #22
    785c:	01190500 	tsteq	r9, r0, lsl #10
    7860:	0000008c 	andeq	r0, r0, ip, lsl #1
    7864:	3c650d00 	stclcc	13, cr0, [r5], #-0
    7868:	1c050000 	stcne	0, cr0, [r5], {-0}
    786c:	00008c01 	andeq	r8, r0, r1, lsl #24
    7870:	260d0400 	strcs	r0, [sp], -r0, lsl #8
    7874:	05000039 	streq	r0, [r0, #-57]	; 0x39
    7878:	008c011f 	addeq	r0, ip, pc, lsl r1
    787c:	0d080000 	stceq	0, cr0, [r8, #-0]
    7880:	000036c7 	andeq	r3, r0, r7, asr #13
    7884:	8c012305 	stchi	3, cr2, [r1], {5}
    7888:	0c000000 	stceq	0, cr0, [r0], {-0}
    788c:	3d3f0b00 	vldmdbcc	pc!, {d0-d-1}
    7890:	25050000 	strcs	r0, [r5, #-0]
    7894:	0005cd01 	andeq	ip, r5, r1, lsl #26
    7898:	052c0c00 	streq	r0, [ip, #-3072]!	; 0xc00
    789c:	06b0012b 	ldrteq	r0, [r0], fp, lsr #2
    78a0:	030d0000 	movweq	r0, #53248	; 0xd000
    78a4:	0500003c 	streq	r0, [r0, #-60]	; 0x3c
    78a8:	008c012d 	addeq	r0, ip, sp, lsr #2
    78ac:	0d000000 	stceq	0, cr0, [r0, #-0]
    78b0:	00003b55 	andeq	r3, r0, r5, asr fp
    78b4:	8c013005 	stchi	0, cr3, [r1], {5}
    78b8:	04000000 	streq	r0, [r0], #-0
    78bc:	003c9e0d 	eorseq	r9, ip, sp, lsl #28
    78c0:	01330500 	teqeq	r3, r0, lsl #10
    78c4:	0000008c 	andeq	r0, r0, ip, lsl #1
    78c8:	385c0d08 	ldmdacc	ip, {r3, r8, sl, fp}^
    78cc:	36050000 	strcc	r0, [r5], -r0
    78d0:	00008c01 	andeq	r8, r0, r1, lsl #24
    78d4:	800d0c00 	andhi	r0, sp, r0, lsl #24
    78d8:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    78dc:	008c0139 	addeq	r0, ip, r9, lsr r1
    78e0:	0d100000 	ldceq	0, cr0, [r0, #-0]
    78e4:	0000367f 	andeq	r3, r0, pc, ror r6
    78e8:	8c013c05 	stchi	12, cr3, [r1], {5}
    78ec:	14000000 	strne	r0, [r0], #-0
    78f0:	003e2b0d 	eorseq	r2, lr, sp, lsl #22
    78f4:	013f0500 	teqeq	pc, r0, lsl #10
    78f8:	0000008c 	andeq	r0, r0, ip, lsl #1
    78fc:	3d6d0d18 	stclcc	13, cr0, [sp, #-96]!	; 0xffffffa0
    7900:	42050000 	andmi	r0, r5, #0
    7904:	00008c01 	andeq	r8, r0, r1, lsl #24
    7908:	900d1c00 	andls	r1, sp, r0, lsl #24
    790c:	0500003d 	streq	r0, [r0, #-61]	; 0x3d
    7910:	008c0146 	addeq	r0, ip, r6, asr #2
    7914:	0d200000 	stceq	0, cr0, [r0, #-0]
    7918:	00003974 	andeq	r3, r0, r4, ror r9
    791c:	8c014a05 	stchi	10, cr4, [r1], {5}
    7920:	24000000 	strcs	r0, [r0], #-0
    7924:	003e8c0d 	eorseq	r8, lr, sp, lsl #24
    7928:	014d0500 	cmpeq	sp, r0, lsl #10
    792c:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    7930:	04110028 	ldreq	r0, [r1], #-40	; 0x28
    7934:	000005c1 	andeq	r0, r0, r1, asr #11
    7938:	0037170b 	eorseq	r1, r7, fp, lsl #14
    793c:	014f0500 	cmpeq	pc, r0, lsl #10
    7940:	00000617 	andeq	r0, r0, r7, lsl r6
    7944:	0037df12 	eorseq	sp, r7, r2, lsl pc
    7948:	78820100 	stmvc	r2, {r8}
    794c:	38080029 	stmdacc	r8, {r0, r3, r5}
    7950:	01000000 	mrseq	r0, (UNDEF: 0)
    7954:	0006e59c 	muleq	r6, ip, r5
    7958:	3c031300 	stccc	3, cr1, [r3], {-0}
    795c:	82010000 	andhi	r0, r1, #0
    7960:	0000008c 	andeq	r0, r0, ip, lsl #1
    7964:	12005001 	andne	r5, r0, #1
    7968:	00003b79 	andeq	r3, r0, r9, ror fp
    796c:	29b09d01 	ldmibcs	r0!, {r0, r8, sl, fp, ip, pc}
    7970:	01120800 	tsteq	r2, r0, lsl #16
    7974:	9c010000 	stcls	0, cr0, [r1], {-0}
    7978:	00000719 	andeq	r0, r0, r9, lsl r7
    797c:	00390b14 	eorseq	r0, r9, r4, lsl fp
    7980:	199d0100 	ldmibne	sp, {r8}
    7984:	76000007 	strvc	r0, [r0], -r7
    7988:	1500003a 	strne	r0, [r0, #-58]	; 0x3a
    798c:	00003921 	andeq	r3, r0, r1, lsr #18
    7990:	008c9f01 	addeq	r9, ip, r1, lsl #30
    7994:	3a970000 	bcc	fe5c799c <_estack+0xde59799c>
    7998:	11000000 	mrsne	r0, (UNDEF: 0)
    799c:	00042f04 	andeq	r2, r4, r4, lsl #30
    79a0:	37b21600 	ldrcc	r1, [r2, r0, lsl #12]!
    79a4:	01010000 	mrseq	r0, (UNDEF: 1)
    79a8:	002ac401 	eoreq	ip, sl, r1, lsl #8
    79ac:	00005808 	andeq	r5, r0, r8, lsl #16
    79b0:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    79b4:	17000007 	strne	r0, [r0, -r7]
    79b8:	0000390b 	andeq	r3, r0, fp, lsl #18
    79bc:	19010101 	stmdbne	r1, {r0, r8}
    79c0:	01000007 	tsteq	r0, r7
    79c4:	27160050 			; <UNDEFINED> instruction: 0x27160050
    79c8:	0100003a 	tsteq	r0, sl, lsr r0
    79cc:	2b1c012e 	blcs	707e8c <_Min_Stack_Size+0x707a8c>
    79d0:	00220800 	eoreq	r0, r2, r0, lsl #16
    79d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    79d8:	00000779 	andeq	r0, r0, r9, ror r7
    79dc:	003c0318 	eorseq	r0, ip, r8, lsl r3
    79e0:	012e0100 	teqeq	lr, r0, lsl #2
    79e4:	0000008c 	andeq	r0, r0, ip, lsl #1
    79e8:	00003ad5 	ldrdeq	r3, [r0], -r5
    79ec:	000d7117 	andeq	r7, sp, r7, lsl r1
    79f0:	012e0100 	teqeq	lr, r0, lsl #2
    79f4:	0000010c 	andeq	r0, r0, ip, lsl #2
    79f8:	16005101 	strne	r5, [r0], -r1, lsl #2
    79fc:	00003695 	muleq	r0, r5, r6
    7a00:	40017701 	andmi	r7, r1, r1, lsl #14
    7a04:	1e08002b 	cdpne	0, 0, cr0, cr8, cr11, {1}
    7a08:	01000000 	mrseq	r0, (UNDEF: 0)
    7a0c:	0007a09c 	muleq	r7, ip, r0
    7a10:	3c031800 	stccc	8, cr1, [r3], {-0}
    7a14:	77010000 	strvc	r0, [r1, -r0]
    7a18:	00008c01 	andeq	r8, r0, r1, lsl #24
    7a1c:	003af600 	eorseq	pc, sl, r0, lsl #12
    7a20:	59160000 	ldmdbpl	r6, {}	; <UNPREDICTABLE>
    7a24:	0100003a 	tsteq	r0, sl, lsr r0
    7a28:	2b600196 	blcs	1808088 <_Min_Stack_Size+0x1807c88>
    7a2c:	00780800 	rsbseq	r0, r8, r0, lsl #16
    7a30:	9c010000 	stcls	0, cr0, [r1], {-0}
    7a34:	000007f7 	strdeq	r0, [r0], -r7
    7a38:	003c3d18 	eorseq	r3, ip, r8, lsl sp
    7a3c:	01960100 	orrseq	r0, r6, r0, lsl #2
    7a40:	000007f7 	strdeq	r0, [r0], -r7
    7a44:	00003b17 	andeq	r3, r0, r7, lsl fp
    7a48:	00398619 	eorseq	r8, r9, r9, lsl r6
    7a4c:	01980100 	orrseq	r0, r8, r0, lsl #2
    7a50:	0000008c 	andeq	r0, r0, ip, lsl #1
    7a54:	00003b38 	andeq	r3, r0, r8, lsr fp
    7a58:	003a9719 	eorseq	r9, sl, r9, lsl r7
    7a5c:	01980100 	orrseq	r0, r8, r0, lsl #2
    7a60:	0000008c 	andeq	r0, r0, ip, lsl #1
    7a64:	00003b57 	andeq	r3, r0, r7, asr fp
    7a68:	00384119 	eorseq	r4, r8, r9, lsl r1
    7a6c:	01980100 	orrseq	r0, r8, r0, lsl #2
    7a70:	0000008c 	andeq	r0, r0, ip, lsl #1
    7a74:	00003b76 	andeq	r3, r0, r6, ror fp
    7a78:	f9041100 			; <UNDEFINED> instruction: 0xf9041100
    7a7c:	16000004 	strne	r0, [r0], -r4
    7a80:	000039f1 	strdeq	r3, [r0], -r1
    7a84:	d801d701 	stmdale	r1, {r0, r8, r9, sl, ip, lr, pc}
    7a88:	2e08002b 	cdpcs	0, 0, cr0, cr8, cr11, {1}
    7a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    7a90:	0008229c 	muleq	r8, ip, r2
    7a94:	3c3d1700 	ldccc	7, cr1, [sp], #-0
    7a98:	d7010000 	strle	r0, [r1, -r0]
    7a9c:	0007f701 	andeq	pc, r7, r1, lsl #14
    7aa0:	00500100 	subseq	r0, r0, r0, lsl #2
    7aa4:	003eab16 	eorseq	sl, lr, r6, lsl fp
    7aa8:	01f40100 	mvnseq	r0, r0, lsl #2
    7aac:	08002c08 	stmdaeq	r0, {r3, sl, fp, sp}
    7ab0:	00000034 	andeq	r0, r0, r4, lsr r0
    7ab4:	08579c01 	ldmdaeq	r7, {r0, sl, fp, ip, pc}^
    7ab8:	03170000 	tsteq	r7, #0
    7abc:	0100003c 	tsteq	r0, ip, lsr r0
    7ac0:	008c01f4 	strdeq	r0, [ip], r4
    7ac4:	50010000 	andpl	r0, r1, r0
    7ac8:	000d7118 	andeq	r7, sp, r8, lsl r1
    7acc:	01f40100 	mvnseq	r0, r0, lsl #2
    7ad0:	0000010c 	andeq	r0, r0, ip, lsl #2
    7ad4:	00003ba1 	andeq	r3, r0, r1, lsr #23
    7ad8:	3d201600 	stccc	6, cr1, [r0, #-0]
    7adc:	1c010000 	stcne	0, cr0, [r1], {-0}
    7ae0:	002c3c02 	eoreq	r3, ip, r2, lsl #24
    7ae4:	00003408 	andeq	r3, r0, r8, lsl #8
    7ae8:	8c9c0100 	ldfhis	f0, [ip], {0}
    7aec:	17000008 	strne	r0, [r0, -r8]
    7af0:	00003c03 	andeq	r3, r0, r3, lsl #24
    7af4:	8c021c01 	stchi	12, cr1, [r2], {1}
    7af8:	01000000 	mrseq	r0, (UNDEF: 0)
    7afc:	0d711850 	ldcleq	8, cr1, [r1, #-320]!	; 0xfffffec0
    7b00:	1c010000 	stcne	0, cr0, [r1], {-0}
    7b04:	00010c02 	andeq	r0, r1, r2, lsl #24
    7b08:	003bc200 	eorseq	ip, fp, r0, lsl #4
    7b0c:	851a0000 	ldrhi	r0, [sl, #-0]
    7b10:	0100003d 	tsteq	r0, sp, lsr r0
    7b14:	008c0243 	addeq	r0, ip, r3, asr #4
    7b18:	2c700000 	ldclcs	0, cr0, [r0], #-0
    7b1c:	00100800 	andseq	r0, r0, r0, lsl #16
    7b20:	9c010000 	stcls	0, cr0, [r1], {-0}
    7b24:	000008c7 	andeq	r0, r0, r7, asr #17
    7b28:	003c0318 	eorseq	r0, ip, r8, lsl r3
    7b2c:	02430100 	subeq	r0, r3, #0, 2
    7b30:	0000008c 	andeq	r0, r0, ip, lsl #1
    7b34:	00003be3 	andeq	r3, r0, r3, ror #23
    7b38:	00368e19 	eorseq	r8, r6, r9, lsl lr
    7b3c:	02450100 	subeq	r0, r5, #0, 2
    7b40:	0000008c 	andeq	r0, r0, ip, lsl #1
    7b44:	00003c04 	andeq	r3, r0, r4, lsl #24
    7b48:	37c81b00 	strbcc	r1, [r8, r0, lsl #22]
    7b4c:	83010000 	movwhi	r0, #4096	; 0x1000
    7b50:	002c8002 	eoreq	r8, ip, r2
    7b54:	00001a08 	andeq	r1, r0, r8, lsl #20
    7b58:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    7b5c:	00003872 	andeq	r3, r0, r2, ror r8
    7b60:	9c029401 	cfstrsls	mvf9, [r2], {1}
    7b64:	6408002c 	strvs	r0, [r8], #-44	; 0x2c
    7b68:	01000000 	mrseq	r0, (UNDEF: 0)
    7b6c:	0009009c 	muleq	r9, ip, r0
    7b70:	3dbb1800 	ldccc	8, cr1, [fp]
    7b74:	94010000 	strls	r0, [r1], #-0
    7b78:	00090002 	andeq	r0, r9, r2
    7b7c:	003c2300 	eorseq	r2, ip, r0, lsl #6
    7b80:	04110000 	ldreq	r0, [r1], #-0
    7b84:	00000555 	andeq	r0, r0, r5, asr r5
    7b88:	003bee16 	eorseq	lr, fp, r6, lsl lr
    7b8c:	02c80100 	sbceq	r0, r8, #0, 2
    7b90:	08002d00 	stmdaeq	r0, {r8, sl, fp, sp}
    7b94:	0000002e 	andeq	r0, r0, lr, lsr #32
    7b98:	092b9c01 	stmdbeq	fp!, {r0, sl, fp, ip, pc}
    7b9c:	bb170000 	bllt	5c7ba4 <_Min_Stack_Size+0x5c77a4>
    7ba0:	0100003d 	tsteq	r0, sp, lsr r0
    7ba4:	090002c8 	stmdbeq	r0, {r3, r6, r7, r9}
    7ba8:	50010000 	andpl	r0, r1, r0
    7bac:	3c501600 	mrrccc	6, 0, r1, r0, cr0
    7bb0:	e2010000 	and	r0, r1, #0
    7bb4:	002d3002 	eoreq	r3, sp, r2
    7bb8:	00002808 	andeq	r2, r0, r8, lsl #16
    7bbc:	509c0100 	addspl	r0, ip, r0, lsl #2
    7bc0:	17000009 	strne	r0, [r0, -r9]
    7bc4:	00000d71 	andeq	r0, r0, r1, ror sp
    7bc8:	0c02e201 	sfmeq	f6, 1, [r2], {1}
    7bcc:	01000001 	tsteq	r0, r1
    7bd0:	36160050 			; <UNDEFINED> instruction: 0x36160050
    7bd4:	0100003a 	tsteq	r0, sl, lsr r0
    7bd8:	2d58032a 	ldclcs	3, cr0, [r8, #-168]	; 0xffffff58
    7bdc:	002c0800 	eoreq	r0, ip, r0, lsl #16
    7be0:	9c010000 	stcls	0, cr0, [r1], {-0}
    7be4:	00000977 	andeq	r0, r0, r7, ror r9
    7be8:	003c0318 	eorseq	r0, ip, r8, lsl r3
    7bec:	032a0100 	teqeq	sl, #0, 2
    7bf0:	0000008c 	andeq	r0, r0, ip, lsl #1
    7bf4:	00003c44 	andeq	r3, r0, r4, asr #24
    7bf8:	36711600 	ldrbtcc	r1, [r1], -r0, lsl #12
    7bfc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    7c00:	002d8403 	eoreq	r8, sp, r3, lsl #8
    7c04:	0000d408 	andeq	sp, r0, r8, lsl #8
    7c08:	de9c0100 	fmllee	f0, f4, f0
    7c0c:	18000009 	stmdane	r0, {r0, r3}
    7c10:	00003742 	andeq	r3, r0, r2, asr #14
    7c14:	de033e01 	cdple	14, 0, cr3, cr3, cr1, {0}
    7c18:	65000009 	strvs	r0, [r0, #-9]
    7c1c:	1900003c 	stmdbne	r0, {r2, r3, r4, r5}
    7c20:	00003b0e 	andeq	r3, r0, lr, lsl #22
    7c24:	8c034101 	stfhis	f4, [r3], {1}
    7c28:	9f000000 	svcls	0x00000000
    7c2c:	1900003c 	stmdbne	r0, {r2, r3, r4, r5}
    7c30:	00003b14 	andeq	r3, r0, r4, lsl fp
    7c34:	8c034201 	sfmhi	f4, 4, [r3], {1}
    7c38:	d5000000 	strle	r0, [r0, #-0]
    7c3c:	1900003c 	stmdbne	r0, {r2, r3, r4, r5}
    7c40:	00003b1a 	andeq	r3, r0, sl, lsl fp
    7c44:	8c034301 	stchi	3, cr4, [r3], {1}
    7c48:	0b000000 	bleq	7c50 <_Min_Stack_Size+0x7850>
    7c4c:	1900003d 	stmdbne	r0, {r0, r2, r3, r4, r5}
    7c50:	00003e11 	andeq	r3, r0, r1, lsl lr
    7c54:	8c034401 	cfstrshi	mvf4, [r3], {1}
    7c58:	36000000 	strcc	r0, [r0], -r0
    7c5c:	0000003d 	andeq	r0, r0, sp, lsr r0
    7c60:	06b60411 	ssateq	r0, #23, r1, lsl #8
    7c64:	17160000 	ldrne	r0, [r6, -r0]
    7c68:	0100003e 	tsteq	r0, lr, lsr r0
    7c6c:	2e580398 	mrccs	3, 2, r0, cr8, cr8, {4}
    7c70:	00360800 	eorseq	r0, r6, r0, lsl #16
    7c74:	9c010000 	stcls	0, cr0, [r1], {-0}
    7c78:	00000a09 	andeq	r0, r0, r9, lsl #20
    7c7c:	00374217 	eorseq	r4, r7, r7, lsl r2
    7c80:	03980100 	orrseq	r0, r8, #0, 2
    7c84:	000009de 	ldrdeq	r0, [r0], -lr
    7c88:	16005001 	strne	r5, [r0], -r1
    7c8c:	00003849 	andeq	r3, r0, r9, asr #16
    7c90:	9003b601 	andls	fp, r3, r1, lsl #12
    7c94:	2408002e 	strcs	r0, [r8], #-46	; 0x2e
    7c98:	01000000 	mrseq	r0, (UNDEF: 0)
    7c9c:	000a3e9c 	muleq	sl, ip, lr
    7ca0:	3b201700 	blcc	80d8a8 <_Min_Stack_Size+0x80d4a8>
    7ca4:	b6010000 	strlt	r0, [r1], -r0
    7ca8:	000a3e03 	andeq	r3, sl, r3, lsl #28
    7cac:	19500100 	ldmdbne	r0, {r8}^
    7cb0:	00003921 	andeq	r3, r0, r1, lsr #18
    7cb4:	8c03b801 	stchi	8, cr11, [r3], {1}
    7cb8:	55000000 	strpl	r0, [r0, #-0]
    7cbc:	0000003d 	andeq	r0, r0, sp, lsr r0
    7cc0:	060b0411 			; <UNDEFINED> instruction: 0x060b0411
    7cc4:	9a1a0000 	bls	687ccc <_Min_Stack_Size+0x6878cc>
    7cc8:	01000037 	tsteq	r0, r7, lsr r0
    7ccc:	008c03d0 	ldrdeq	r0, [ip], r0	; <UNPREDICTABLE>
    7cd0:	2eb40000 	cdpcs	0, 11, cr0, cr4, cr0, {0}
    7cd4:	001c0800 	andseq	r0, ip, r0, lsl #16
    7cd8:	9c010000 	stcls	0, cr0, [r1], {-0}
    7cdc:	00000a7f 	andeq	r0, r0, pc, ror sl
    7ce0:	003eb718 	eorseq	fp, lr, r8, lsl r7
    7ce4:	03d00100 	bicseq	r0, r0, #0, 2
    7ce8:	0000008c 	andeq	r0, r0, ip, lsl #1
    7cec:	00003d74 	andeq	r3, r0, r4, ror sp
    7cf0:	00114c19 	andseq	r4, r1, r9, lsl ip
    7cf4:	03d20100 	bicseq	r0, r2, #0, 2
    7cf8:	0000008c 	andeq	r0, r0, ip, lsl #1
    7cfc:	00003dae 	andeq	r3, r0, lr, lsr #27
    7d00:	39a01600 	stmibcc	r0!, {r9, sl, ip}
    7d04:	ea010000 	b	47d0c <_Min_Stack_Size+0x4790c>
    7d08:	002ed003 	eoreq	sp, lr, r3
    7d0c:	00001208 	andeq	r1, r0, r8, lsl #4
    7d10:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    7d14:	1800000a 	stmdane	r0, {r1, r3}
    7d18:	00003e07 	andeq	r3, r0, r7, lsl #28
    7d1c:	8c03ea01 	stchi	10, cr14, [r3], {1}
    7d20:	e4000000 	str	r0, [r0], #-0
    7d24:	0000003d 	andeq	r0, r0, sp, lsr r0
    7d28:	0039d716 	eorseq	sp, r9, r6, lsl r7
    7d2c:	03f80100 	mvnseq	r0, #0, 2
    7d30:	08002ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, sp}
    7d34:	00000012 	andeq	r0, r0, r2, lsl r0
    7d38:	0acd9c01 	beq	ff36ed44 <_estack+0xdf33ed44>
    7d3c:	c2180000 	andsgt	r0, r8, #0
    7d40:	0100003a 	tsteq	r0, sl, lsr r0
    7d44:	008c03f8 	strdeq	r0, [ip], r8
    7d48:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    7d4c:	16000000 	strne	r0, [r0], -r0
    7d50:	000038a0 	andeq	r3, r0, r0, lsr #17
    7d54:	f8040801 			; <UNDEFINED> instruction: 0xf8040801
    7d58:	2608002e 	strcs	r0, [r8], -lr, lsr #32
    7d5c:	01000000 	mrseq	r0, (UNDEF: 0)
    7d60:	000b029c 	muleq	fp, ip, r2
    7d64:	3eb71800 	cdpcc	8, 11, cr1, cr7, cr0, {0}
    7d68:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    7d6c:	00008c04 	andeq	r8, r0, r4, lsl #24
    7d70:	003e2600 	eorseq	r2, lr, r0, lsl #12
    7d74:	0d711700 	ldcleq	7, cr1, [r1, #-0]
    7d78:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    7d7c:	00010c04 	andeq	r0, r1, r4, lsl #24
    7d80:	00510100 	subseq	r0, r1, r0, lsl #2
    7d84:	003dae16 	eorseq	sl, sp, r6, lsl lr
    7d88:	043c0100 	ldrteq	r0, [ip], #-256	; 0x100
    7d8c:	08002f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, sp}
    7d90:	000000a2 	andeq	r0, r0, r2, lsr #1
    7d94:	0b479c01 	bleq	11eeda0 <_Min_Stack_Size+0x11ee9a0>
    7d98:	03170000 	tsteq	r7, #0
    7d9c:	0100003c 	tsteq	r0, ip, lsr r0
    7da0:	008c043c 	addeq	r0, ip, ip, lsr r4
    7da4:	50010000 	andpl	r0, r1, r0
    7da8:	003e3f18 	eorseq	r3, lr, r8, lsl pc
    7dac:	043c0100 	ldrteq	r0, [ip], #-256	; 0x100
    7db0:	0000008c 	andeq	r0, r0, ip, lsl #1
    7db4:	00003e47 	andeq	r3, r0, r7, asr #28
    7db8:	000d7118 	andeq	r7, sp, r8, lsl r1
    7dbc:	043c0100 	ldrteq	r0, [ip], #-256	; 0x100
    7dc0:	0000010c 	andeq	r0, r0, ip, lsl #2
    7dc4:	00003ee5 	andeq	r3, r0, r5, ror #29
    7dc8:	3c771a00 	ldclcc	10, cr1, [r7], #-0
    7dcc:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    7dd0:	0000de04 	andeq	sp, r0, r4, lsl #28
    7dd4:	002fc400 	eoreq	ip, pc, r0, lsl #8
    7dd8:	00004208 	andeq	r4, r0, r8, lsl #4
    7ddc:	a09c0100 	addsge	r0, ip, r0, lsl #2
    7de0:	1800000b 	stmdane	r0, {r0, r1, r3}
    7de4:	00003c03 	andeq	r3, r0, r3, lsl #24
    7de8:	8c048901 	stchi	9, cr8, [r4], {1}
    7dec:	83000000 	movwhi	r0, #0
    7df0:	1700003f 	smladxne	r0, pc, r0, r0	; <UNPREDICTABLE>
    7df4:	00003ea2 	andeq	r3, r0, r2, lsr #29
    7df8:	8c048901 	stchi	9, cr8, [r4], {1}
    7dfc:	01000000 	mrseq	r0, (UNDEF: 0)
    7e00:	0f711951 	svceq	0x00711951
    7e04:	8b010000 	blhi	47e0c <_Min_Stack_Size+0x47a0c>
    7e08:	0000de04 	andeq	sp, r0, r4, lsl #28
    7e0c:	003fd600 	eorseq	sp, pc, r0, lsl #12
    7e10:	3d7f1900 	ldclcc	9, cr1, [pc, #-0]	; 7e18 <_Min_Stack_Size+0x7a18>
    7e14:	8c010000 	stchi	0, cr0, [r1], {-0}
    7e18:	00008c04 	andeq	r8, r0, r4, lsl #24
    7e1c:	00400900 	subeq	r0, r0, r0, lsl #18
    7e20:	4a160000 	bmi	587e28 <_Min_Stack_Size+0x587a28>
    7e24:	01000036 	tsteq	r0, r6, lsr r0
    7e28:	300804c1 	andcc	r0, r8, r1, asr #9
    7e2c:	00540800 	subseq	r0, r4, r0, lsl #16
    7e30:	9c010000 	stcls	0, cr0, [r1], {-0}
    7e34:	00000bd5 	ldrdeq	r0, [r0], -r5
    7e38:	003c0317 	eorseq	r0, ip, r7, lsl r3
    7e3c:	04c10100 	strbeq	r0, [r1], #256	; 0x100
    7e40:	0000008c 	andeq	r0, r0, ip, lsl #1
    7e44:	a2185001 	andsge	r5, r8, #1
    7e48:	0100003e 	tsteq	r0, lr, lsr r0
    7e4c:	008c04c1 	addeq	r0, ip, r1, asr #9
    7e50:	40560000 	subsmi	r0, r6, r0
    7e54:	1a000000 	bne	7e5c <_Min_Stack_Size+0x7a5c>
    7e58:	00003afe 	strdeq	r3, [r0], -lr
    7e5c:	ea04ec01 	b	142e68 <_Min_Stack_Size+0x142a68>
    7e60:	5c000000 	stcpl	0, cr0, [r0], {-0}
    7e64:	6c080030 	stcvs	0, cr0, [r8], {48}	; 0x30
    7e68:	01000000 	mrseq	r0, (UNDEF: 0)
    7e6c:	000c609c 	muleq	ip, ip, r0
    7e70:	3c031800 	stccc	8, cr1, [r3], {-0}
    7e74:	ec010000 	stc	0, cr0, [r1], {-0}
    7e78:	00008c04 	andeq	r8, r0, r4, lsl #24
    7e7c:	0040a900 	subeq	sl, r0, r0, lsl #18
    7e80:	3e3f1800 	cdpcc	8, 3, cr1, cr15, cr0, {0}
    7e84:	ec010000 	stc	0, cr0, [r1], {-0}
    7e88:	00008c04 	andeq	r8, r0, r4, lsl #24
    7e8c:	0040d500 	subeq	sp, r0, r0, lsl #10
    7e90:	0f711900 	svceq	0x00711900
    7e94:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    7e98:	0000ea04 	andeq	lr, r0, r4, lsl #20
    7e9c:	00413300 	subeq	r3, r1, r0, lsl #6
    7ea0:	3d7f1900 	ldclcc	9, cr1, [pc, #-0]	; 7ea8 <_Min_Stack_Size+0x7aa8>
    7ea4:	ef010000 	svc	0x00010000
    7ea8:	00008c04 	andeq	r8, r0, r4, lsl #24
    7eac:	00416700 	subeq	r6, r1, r0, lsl #14
    7eb0:	3c5e1900 	mrrccc	9, 0, r1, lr, cr0
    7eb4:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    7eb8:	00008c04 	andeq	r8, r0, r4, lsl #24
    7ebc:	0041cb00 	subeq	ip, r1, r0, lsl #22
    7ec0:	0f721900 	svceq	0x00721900
    7ec4:	f1010000 	setend	le
    7ec8:	00008c04 	andeq	r8, r0, r4, lsl #24
    7ecc:	00420e00 	subeq	r0, r2, r0, lsl #28
    7ed0:	3e6b1900 	cdpcc	9, 6, cr1, cr11, cr0, {0}
    7ed4:	f2010000 	vhadd.s8	d0, d1, d0
    7ed8:	00008c04 	andeq	r8, r0, r4, lsl #24
    7edc:	00426700 	subeq	r6, r2, r0, lsl #14
    7ee0:	f8160000 			; <UNDEFINED> instruction: 0xf8160000
    7ee4:	0100003c 	tsteq	r0, ip, lsr r0
    7ee8:	30c80534 	sbccc	r0, r8, r4, lsr r5
    7eec:	00540800 	subseq	r0, r4, r0, lsl #16
    7ef0:	9c010000 	stcls	0, cr0, [r1], {-0}
    7ef4:	00000c95 	muleq	r0, r5, ip
    7ef8:	003c0317 	eorseq	r0, ip, r7, lsl r3
    7efc:	05340100 	ldreq	r0, [r4, #-256]!	; 0x100
    7f00:	0000008c 	andeq	r0, r0, ip, lsl #1
    7f04:	3f185001 	svccc	0x00185001
    7f08:	0100003e 	tsteq	r0, lr, lsr r0
    7f0c:	008c0534 	addeq	r0, ip, r4, lsr r5
    7f10:	42c00000 	sbcmi	r0, r0, #0
    7f14:	1c000000 	stcne	0, cr0, [r0], {-0}
    7f18:	000003a0 	andeq	r0, r0, r0, lsr #7
    7f1c:	c306a706 	movwgt	sl, #26374	; 0x6706
    7f20:	00000000 	andeq	r0, r0, r0
    7f24:	000002c9 	andeq	r0, r0, r9, asr #5
    7f28:	18b80004 	ldmne	r8!, {r2}
    7f2c:	01040000 	mrseq	r0, (UNDEF: 4)
    7f30:	00000287 	andeq	r0, r0, r7, lsl #5
    7f34:	003f4f01 	eorseq	r4, pc, r1, lsl #30
    7f38:	0000ab00 	andeq	sl, r0, r0, lsl #22
    7f3c:	00096800 	andeq	r6, r9, r0, lsl #16
    7f40:	00000000 	andeq	r0, r0, r0
    7f44:	00351800 	eorseq	r1, r5, r0, lsl #16
    7f48:	06010200 	streq	r0, [r1], -r0, lsl #4
    7f4c:	00000153 	andeq	r0, r0, r3, asr r1
    7f50:	00011903 	andeq	r1, r1, r3, lsl #18
    7f54:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
    7f58:	02000000 	andeq	r0, r0, #0
    7f5c:	01510801 	cmpeq	r1, r1, lsl #16
    7f60:	02020000 	andeq	r0, r2, #0
    7f64:	00010605 	andeq	r0, r1, r5, lsl #12
    7f68:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7f6c:	000001e8 	andeq	r0, r0, r8, ror #3
    7f70:	00037a03 	andeq	r7, r3, r3, lsl #20
    7f74:	57370200 	ldrpl	r0, [r7, -r0, lsl #4]!
    7f78:	02000000 	andeq	r0, r0, #0
    7f7c:	00ec0504 	rsceq	r0, ip, r4, lsl #10
    7f80:	51030000 	mrspl	r0, (UNDEF: 3)
    7f84:	02000000 	andeq	r0, r0, #0
    7f88:	00006938 	andeq	r6, r0, r8, lsr r9
    7f8c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7f90:	0000017b 	andeq	r0, r0, fp, ror r1
    7f94:	e7050802 	str	r0, [r5, -r2, lsl #16]
    7f98:	02000000 	andeq	r0, r0, #0
    7f9c:	01760708 	cmneq	r6, r8, lsl #14
    7fa0:	04040000 	streq	r0, [r4], #-0
    7fa4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    7fa8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7fac:	00000180 	andeq	r0, r0, r0, lsl #3
    7fb0:	00011b03 	andeq	r1, r1, r3, lsl #22
    7fb4:	2c2a0300 	stccs	3, cr0, [sl], #-0
    7fb8:	03000000 	movweq	r0, #0
    7fbc:	0000037c 	andeq	r0, r0, ip, ror r3
    7fc0:	004c4103 	subeq	r4, ip, r3, lsl #2
    7fc4:	53030000 	movwpl	r0, #12288	; 0x3000
    7fc8:	03000000 	movweq	r0, #0
    7fcc:	00005e42 	andeq	r5, r0, r2, asr #28
    7fd0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7fd4:	0000002c 	andeq	r0, r0, ip, lsr #32
    7fd8:	0000a205 	andeq	sl, r0, r5, lsl #4
    7fdc:	00970500 	addseq	r0, r7, r0, lsl #10
    7fe0:	01060000 	mrseq	r0, (UNDEF: 6)
    7fe4:	d401f704 	strle	pc, [r1], #-1796	; 0x704
    7fe8:	07000000 	streq	r0, [r0, -r0]
    7fec:	00000ed2 	ldrdeq	r0, [r0], -r2
    7ff0:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    7ff4:	00010054 	andeq	r0, r1, r4, asr r0
    7ff8:	00231709 	eoreq	r1, r3, r9, lsl #14
    7ffc:	01f70400 	mvnseq	r0, r0, lsl #8
    8000:	000000be 	strheq	r0, [r0], -lr
    8004:	00228e09 	eoreq	r8, r2, r9, lsl #28
    8008:	01f70400 	mvnseq	r0, r0, lsl #8
    800c:	000000be 	strheq	r0, [r0], -lr
    8010:	f9040106 			; <UNDEFINED> instruction: 0xf9040106
    8014:	00010201 	andeq	r0, r1, r1, lsl #4
    8018:	048b0700 	streq	r0, [fp], #1792	; 0x700
    801c:	07000000 	streq	r0, [r0, -r0]
    8020:	000005c3 	andeq	r0, r0, r3, asr #11
    8024:	2d090001 	stccs	0, cr0, [r9, #-4]
    8028:	04000009 	streq	r0, [r0], #-9
    802c:	00ec01f9 	strdeq	r0, [ip], #25	; <UNPREDICTABLE>
    8030:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    8034:	3c058c04 	stccc	12, cr8, [r5], {4}
    8038:	0b000001 	bleq	8044 <_Min_Stack_Size+0x7c44>
    803c:	04005243 	streq	r5, [r0], #-579	; 0x243
    8040:	00b4058e 	adcseq	r0, r4, lr, lsl #11
    8044:	0b000000 	bleq	804c <_Min_Stack_Size+0x7c4c>
    8048:	04005253 	streq	r5, [r0], #-595	; 0x253
    804c:	00b4058f 	adcseq	r0, r4, pc, lsl #11
    8050:	0b040000 	bleq	108058 <_Min_Stack_Size+0x107c58>
    8054:	04005244 	streq	r5, [r0], #-580	; 0x244
    8058:	00b40590 	umlalseq	r0, r4, r0, r5
    805c:	00080000 	andeq	r0, r8, r0
    8060:	003f3a09 	eorseq	r3, pc, r9, lsl #20
    8064:	05910400 	ldreq	r0, [r1, #1024]	; 0x400
    8068:	0000010e 	andeq	r0, r0, lr, lsl #2
    806c:	003f2f0c 	eorseq	r2, pc, ip, lsl #30
    8070:	1c630100 	stfnee	f0, [r3], #-0
    8074:	16080031 			; <UNDEFINED> instruction: 0x16080031
    8078:	01000000 	mrseq	r0, (UNDEF: 0)
    807c:	00018c9c 	muleq	r1, ip, ip
    8080:	31260d00 	teqcc	r6, r0, lsl #26
    8084:	02b90800 	adcseq	r0, r9, #0, 16
    8088:	01760000 	cmneq	r6, r0
    808c:	010e0000 	mrseq	r0, (UNDEF: 14)
    8090:	0e310151 	mrceq	1, 1, r0, cr1, cr1, {2}
    8094:	08025001 	stmdaeq	r2, {r0, ip, lr}
    8098:	320f0040 	andcc	r0, pc, #64	; 0x40
    809c:	b9080031 	stmdblt	r8, {r0, r4, r5}
    80a0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    80a4:	30015101 	andcc	r5, r1, r1, lsl #2
    80a8:	0250010e 	subseq	r0, r0, #-2147483645	; 0x80000003
    80ac:	00004008 	andeq	r4, r0, r8
    80b0:	003f0c0c 	eorseq	r0, pc, ip, lsl #24
    80b4:	34720100 	ldrbtcc	r0, [r2], #-256	; 0x100
    80b8:	1c080031 	stcne	0, cr0, [r8], {49}	; 0x31
    80bc:	01000000 	mrseq	r0, (UNDEF: 0)
    80c0:	0001af9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    80c4:	0d711000 	ldcleq	0, cr1, [r1, #-0]
    80c8:	72010000 	andvc	r0, r1, #0
    80cc:	00000102 	andeq	r0, r0, r2, lsl #2
    80d0:	11005001 	tstne	r0, r1
    80d4:	00003f1b 	andeq	r3, r0, fp, lsl pc
    80d8:	00a2b001 	adceq	fp, r2, r1
    80dc:	31500000 	cmpcc	r0, r0
    80e0:	000c0800 	andeq	r0, ip, r0, lsl #16
    80e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    80e8:	003eff12 	eorseq	pc, lr, r2, lsl pc	; <UNPREDICTABLE>
    80ec:	010b0100 	mrseq	r0, (UNDEF: 27)
    80f0:	0800315c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, sp}
    80f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    80f8:	01e99c01 	mvneq	r9, r1, lsl #24
    80fc:	71130000 	tstvc	r3, r0
    8100:	0100000d 	tsteq	r0, sp
    8104:	0102010b 	tsteq	r2, fp, lsl #2
    8108:	50010000 	andpl	r0, r1, r0
    810c:	3fcf1400 	svccc	0x00cf1400
    8110:	25010000 	strcs	r0, [r1, #-0]
    8114:	0000d401 	andeq	sp, r0, r1, lsl #8
    8118:	00317800 	eorseq	r7, r1, r0, lsl #16
    811c:	00001408 	andeq	r1, r0, r8, lsl #8
    8120:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    8124:	15000002 	strne	r0, [r0, #-2]
    8128:	00003f46 	andeq	r3, r0, r6, asr #30
    812c:	8c012501 	cfstr32hi	mvfx2, [r1], {1}
    8130:	13000000 	movwne	r0, #0
    8134:	16000043 	strne	r0, [r0], -r3, asr #32
    8138:	00000f71 	andeq	r0, r0, r1, ror pc
    813c:	d4012701 	strle	r2, [r1], #-1793	; 0x701
    8140:	34000000 	strcc	r0, [r0], #-0
    8144:	00000043 	andeq	r0, r0, r3, asr #32
    8148:	003f9b12 	eorseq	r9, pc, r2, lsl fp	; <UNPREDICTABLE>
    814c:	01460100 	mrseq	r0, (UNDEF: 86)
    8150:	0800318c 	stmdaeq	r0, {r2, r3, r7, r8, ip, sp}
    8154:	00000010 	andeq	r0, r0, r0, lsl r0
    8158:	024b9c01 	subeq	r9, fp, #256	; 0x100
    815c:	46150000 	ldrmi	r0, [r5], -r0
    8160:	0100003f 	tsteq	r0, pc, lsr r0
    8164:	008c0146 	addeq	r0, ip, r6, asr #2
    8168:	43730000 	cmnmi	r3, #0
    816c:	14000000 	strne	r0, [r0], #-0
    8170:	00003fa9 	andeq	r3, r0, r9, lsr #31
    8174:	e0015601 	and	r5, r1, r1, lsl #12
    8178:	9c000000 	stcls	0, cr0, [r0], {-0}
    817c:	14080031 	strne	r0, [r8], #-49	; 0x31
    8180:	01000000 	mrseq	r0, (UNDEF: 0)
    8184:	0002869c 	muleq	r2, ip, r6
    8188:	3f141500 	svccc	0x00141500
    818c:	56010000 	strpl	r0, [r1], -r0
    8190:	00008c01 	andeq	r8, r0, r1, lsl #24
    8194:	00439400 	subeq	r9, r3, r0, lsl #8
    8198:	0f711600 	svceq	0x00711600
    819c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    81a0:	0000e001 	andeq	lr, r0, r1
    81a4:	0043b500 	subeq	fp, r3, r0, lsl #10
    81a8:	b9120000 	ldmdblt	r2, {}	; <UNPREDICTABLE>
    81ac:	0100003f 	tsteq	r0, pc, lsr r0
    81b0:	31b00174 	rorscc	r0, r4, r1
    81b4:	00100800 	andseq	r0, r0, r0, lsl #16
    81b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    81bc:	000002ad 	andeq	r0, r0, sp, lsr #5
    81c0:	003f1415 	eorseq	r1, pc, r5, lsl r4	; <UNPREDICTABLE>
    81c4:	01740100 	cmneq	r4, r0, lsl #2
    81c8:	0000008c 	andeq	r0, r0, ip, lsl #1
    81cc:	000043f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    81d0:	03a01700 	moveq	r1, #0, 14
    81d4:	a7050000 	strge	r0, [r5, -r0]
    81d8:	0000b906 	andeq	fp, r0, r6, lsl #18
    81dc:	14741800 	ldrbtne	r1, [r4], #-2048	; 0x800
    81e0:	47060000 	strmi	r0, [r6, -r0]
    81e4:	00a21902 	adceq	r1, r2, r2, lsl #18
    81e8:	02190000 	andseq	r0, r9, #0
    81ec:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	130e2501 	movwne	r2, #58625	; 0xe501
      18:	1b0e030b 	blne	380c4c <_Min_Stack_Size+0x38084c>
      1c:	1117550e 	tstne	r7, lr, lsl #10
      20:	00171001 	andseq	r1, r7, r1
      24:	00240200 	eoreq	r0, r4, r0, lsl #4
      28:	0b3e0b0b 	bleq	f82c5c <_Min_Stack_Size+0xf8285c>
      2c:	00000e03 	andeq	r0, r0, r3, lsl #28
      30:	03001603 	movweq	r1, #1539	; 0x603
      34:	3b0b3a0e 	blcc	2ce874 <_Min_Stack_Size+0x2ce474>
      38:	0013490b 	andseq	r4, r3, fp, lsl #18
      3c:	00240400 	eoreq	r0, r4, r0, lsl #8
      40:	0b3e0b0b 	bleq	f82c74 <_Min_Stack_Size+0xf82874>
      44:	00000803 	andeq	r0, r0, r3, lsl #16
      48:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
      4c:	06000013 			; <UNDEFINED> instruction: 0x06000013
      50:	0b0b0113 	bleq	2c04a4 <_Min_Stack_Size+0x2c00a4>
      54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      58:	00001301 	andeq	r1, r0, r1, lsl #6
      5c:	03000d07 	movweq	r0, #3335	; 0xd07
      60:	3b0b3a0e 	blcc	2ce8a0 <_Min_Stack_Size+0x2ce4a0>
      64:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
      68:	0800000b 	stmdaeq	r0, {r0, r1, r3}
      6c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      74:	0b381349 	bleq	e04da0 <_Min_Stack_Size+0xe049a0>
      78:	26090000 	strcs	r0, [r9], -r0
      7c:	00134900 	andseq	r4, r3, r0, lsl #18
      80:	01010a00 	tsteq	r1, r0, lsl #20
      84:	13011349 	movwne	r1, #4937	; 0x1349
      88:	210b0000 	mrscs	r0, (UNDEF: 11)
      8c:	2f134900 	svccs	0x00134900
      90:	0c00000b 	stceq	0, cr0, [r0], {11}
      94:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      9c:	00001349 	andeq	r1, r0, r9, asr #6
      a0:	0b01040d 	bleq	410dc <_Min_Stack_Size+0x40cdc>
      a4:	3b0b3a0b 	blcc	2ce8d8 <_Min_Stack_Size+0x2ce4d8>
      a8:	00130105 	andseq	r0, r3, r5, lsl #2
      ac:	00280e00 	eoreq	r0, r8, r0, lsl #28
      b0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
      b4:	280f0000 	stmdacs	pc, {}	; <UNPREDICTABLE>
      b8:	1c080300 	stcne	3, cr0, [r8], {-0}
      bc:	1000000d 	andne	r0, r0, sp
      c0:	0e03012e 	adfeqsp	f0, f3, #0.5
      c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      c8:	0b201927 	bleq	80656c <_Min_Stack_Size+0x80616c>
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
      d0:	03003411 	movweq	r3, #1041	; 0x411
      d4:	3b0b3a0e 	blcc	2ce914 <_Min_Stack_Size+0x2ce514>
      d8:	00134905 	andseq	r4, r3, r5, lsl #18
      dc:	012e1200 	teqeq	lr, r0, lsl #4
      e0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      e4:	0b3b0b3a 	bleq	ec2dd4 <_Min_Stack_Size+0xec29d4>
      e8:	01111927 	tsteq	r1, r7, lsr #18
      ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
      f4:	13000013 	movwne	r0, #19
      f8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
      fc:	17550152 			; <UNDEFINED> instruction: 0x17550152
     100:	0b590b58 	bleq	1642e68 <_Min_Stack_Size+0x1642a68>
     104:	0b140000 	bleq	50010c <_Min_Stack_Size+0x4ffd0c>
     108:	00175501 	andseq	r5, r7, r1, lsl #10
     10c:	00341500 	eorseq	r1, r4, r0, lsl #10
     110:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     114:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     118:	03193f01 	tsteq	r9, #1, 30
     11c:	3b0b3a0e 	blcc	2ce95c <_Min_Stack_Size+0x2ce55c>
     120:	11192705 	tstne	r9, r5, lsl #14
     124:	40061201 	andmi	r1, r6, r1, lsl #4
     128:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     12c:	00001301 	andeq	r1, r0, r1, lsl #6
     130:	03003417 	movweq	r3, #1047	; 0x417
     134:	3b0b3a08 	blcc	2ce95c <_Min_Stack_Size+0x2ce55c>
     138:	02134905 	andseq	r4, r3, #81920	; 0x14000
     13c:	18000017 	stmdane	r0, {r0, r1, r2, r4}
     140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     144:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     148:	17021349 	strne	r1, [r2, -r9, asr #6]
     14c:	34190000 	ldrcc	r0, [r9], #-0
     150:	3a0e0300 	bcc	380d58 <_Min_Stack_Size+0x380958>
     154:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     158:	3c193f13 	ldccc	15, cr3, [r9], {19}
     15c:	1a000019 	bne	1c8 <_Min_Heap_Size+0x1c8>
     160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     164:	0b3b0b3a 	bleq	ec2e54 <_Min_Stack_Size+0xec2a54>
     168:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     16c:	00001802 	andeq	r1, r0, r2, lsl #16
     170:	01110100 	tsteq	r1, r0, lsl #2
     174:	0b130e25 	bleq	4c3a10 <_Min_Stack_Size+0x4c3610>
     178:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     17c:	01111755 	tsteq	r1, r5, asr r7
     180:	00001710 	andeq	r1, r0, r0, lsl r7
     184:	03010402 	movweq	r0, #5122	; 0x1402
     188:	3a0b0b0e 	bcc	2c2dc8 <_Min_Stack_Size+0x2c29c8>
     18c:	010b3b0b 	tsteq	fp, fp, lsl #22
     190:	03000013 	movweq	r0, #19
     194:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     198:	00000d1c 	andeq	r0, r0, ip, lsl sp
     19c:	0b002404 	bleq	91b4 <_Min_Stack_Size+0x8db4>
     1a0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     1a4:	0500000e 	streq	r0, [r0, #-14]
     1a8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     1ac:	0b3b0b3a 	bleq	ec2e9c <_Min_Stack_Size+0xec2a9c>
     1b0:	00001349 	andeq	r1, r0, r9, asr #6
     1b4:	0b002406 	bleq	91d4 <_Min_Stack_Size+0x8dd4>
     1b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     1bc:	07000008 	streq	r0, [r0, -r8]
     1c0:	13490035 	movtne	r0, #36917	; 0x9035
     1c4:	01080000 	mrseq	r0, (UNDEF: 8)
     1c8:	01134901 	tsteq	r3, r1, lsl #18
     1cc:	09000013 	stmdbeq	r0, {r0, r1, r4}
     1d0:	13490021 	movtne	r0, #36897	; 0x9021
     1d4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     1d8:	0b01040a 	bleq	41208 <_Min_Stack_Size+0x40e08>
     1dc:	3b0b3a0b 	blcc	2cea10 <_Min_Stack_Size+0x2ce610>
     1e0:	00130105 	andseq	r0, r3, r5, lsl #2
     1e4:	00280b00 	eoreq	r0, r8, r0, lsl #22
     1e8:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     1ec:	160c0000 	strne	r0, [ip], -r0
     1f0:	3a0e0300 	bcc	380df8 <_Min_Stack_Size+0x3809f8>
     1f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     1f8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     1fc:	0b0b0113 	bleq	2c0650 <_Min_Stack_Size+0x2c0250>
     200:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     204:	00001301 	andeq	r1, r0, r1, lsl #6
     208:	03000d0e 	movweq	r0, #3342	; 0xd0e
     20c:	3b0b3a0e 	blcc	2cea4c <_Min_Stack_Size+0x2ce64c>
     210:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     214:	0f00000b 	svceq	0x0000000b
     218:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     21c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     220:	0b381349 	bleq	e04f4c <_Min_Stack_Size+0xe04b4c>
     224:	04100000 	ldreq	r0, [r0], #-0
     228:	3a0b0b01 	bcc	2c2e34 <_Min_Stack_Size+0x2c2a34>
     22c:	010b3b0b 	tsteq	fp, fp, lsl #22
     230:	11000013 	tstne	r0, r3, lsl r0
     234:	0b0b0113 	bleq	2c0688 <_Min_Stack_Size+0x2c0288>
     238:	0b3b0b3a 	bleq	ec2f28 <_Min_Stack_Size+0xec2b28>
     23c:	00001301 	andeq	r1, r0, r1, lsl #6
     240:	03000d12 	movweq	r0, #3346	; 0xd12
     244:	3b0b3a0e 	blcc	2cea84 <_Min_Stack_Size+0x2ce684>
     248:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     24c:	1300000b 	movwne	r0, #11
     250:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     254:	0b3a0e03 	bleq	e83a68 <_Min_Stack_Size+0xe83668>
     258:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     25c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     260:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     264:	00130119 	andseq	r0, r3, r9, lsl r1
     268:	82891400 	addhi	r1, r9, #0, 8
     26c:	01110101 	tsteq	r1, r1, lsl #2
     270:	13011331 	movwne	r1, #4913	; 0x1331
     274:	8a150000 	bhi	54027c <_Min_Stack_Size+0x53fe7c>
     278:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     27c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     280:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     284:	11010182 	smlabbne	r1, r2, r1, r0
     288:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     28c:	00001331 	andeq	r1, r0, r1, lsr r3
     290:	03003417 	movweq	r3, #1047	; 0x417
     294:	3b0b3a0e 	blcc	2cead4 <_Min_Stack_Size+0x2ce6d4>
     298:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     29c:	18000018 	stmdane	r0, {r3, r4}
     2a0:	01018289 	smlabbeq	r1, r9, r2, r8
     2a4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     2a8:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     2ac:	03193f01 	tsteq	r9, #1, 30
     2b0:	3b0b3a0e 	blcc	2ceaf0 <_Min_Stack_Size+0x2ce6f0>
     2b4:	1113490b 	tstne	r3, fp, lsl #18
     2b8:	40061201 	andmi	r1, r6, r1, lsl #4
     2bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     2c0:	00001301 	andeq	r1, r0, r1, lsl #6
     2c4:	0182891a 	orreq	r8, r2, sl, lsl r9
     2c8:	31011100 	mrscc	r1, (UNDEF: 17)
     2cc:	1b000013 	blne	320 <_Min_Heap_Size+0x320>
     2d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2d8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     2dc:	0000193c 	andeq	r1, r0, ip, lsr r9
     2e0:	0300341c 	movweq	r3, #1052	; 0x41c
     2e4:	3b0b3a0e 	blcc	2ceb24 <_Min_Stack_Size+0x2ce724>
     2e8:	3f13490b 	svccc	0x0013490b
     2ec:	00180219 	andseq	r0, r8, r9, lsl r2
     2f0:	012e1d00 	teqeq	lr, r0, lsl #26
     2f4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2fc:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     300:	00001301 	andeq	r1, r0, r1, lsl #6
     304:	4900051e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sl}
     308:	1f000013 	svcne	0x00000013
     30c:	0b0b000f 	bleq	2c0350 <_Min_Stack_Size+0x2bff50>
     310:	00001349 	andeq	r1, r0, r9, asr #6
     314:	3f012e20 	svccc	0x00012e20
     318:	3a0e0319 	bcc	380f84 <_Min_Stack_Size+0x380b84>
     31c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     320:	01193c19 	tsteq	r9, r9, lsl ip
     324:	21000013 	tstcs	r0, r3, lsl r0
     328:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     32c:	0b3a0e03 	bleq	e83b40 <_Min_Stack_Size+0xe83740>
     330:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     334:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     338:	00001301 	andeq	r1, r0, r1, lsl #6
     33c:	3f012e22 	svccc	0x00012e22
     340:	3a0e0319 	bcc	380fac <_Min_Stack_Size+0x380bac>
     344:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     348:	00193c19 	andseq	r3, r9, r9, lsl ip
     34c:	11010000 	mrsne	r0, (UNDEF: 1)
     350:	130e2501 	movwne	r2, #58625	; 0xe501
     354:	1b0e030b 	blne	380f88 <_Min_Stack_Size+0x380b88>
     358:	1117550e 	tstne	r7, lr, lsl #10
     35c:	00171001 	andseq	r1, r7, r1
     360:	00240200 	eoreq	r0, r4, r0, lsl #4
     364:	0b3e0b0b 	bleq	f82f98 <_Min_Stack_Size+0xf82b98>
     368:	00000e03 	andeq	r0, r0, r3, lsl #28
     36c:	03001603 	movweq	r1, #1539	; 0x603
     370:	3b0b3a0e 	blcc	2cebb0 <_Min_Stack_Size+0x2ce7b0>
     374:	0013490b 	andseq	r4, r3, fp, lsl #18
     378:	00240400 	eoreq	r0, r4, r0, lsl #8
     37c:	0b3e0b0b 	bleq	f82fb0 <_Min_Stack_Size+0xf82bb0>
     380:	00000803 	andeq	r0, r0, r3, lsl #16
     384:	0b011305 	bleq	44fa0 <_Min_Stack_Size+0x44ba0>
     388:	3b0b3a05 	blcc	2ceba4 <_Min_Stack_Size+0x2ce7a4>
     38c:	00130105 	andseq	r0, r3, r5, lsl #2
     390:	000d0600 	andeq	r0, sp, r0, lsl #12
     394:	0b3a0e03 	bleq	e83ba8 <_Min_Stack_Size+0xe837a8>
     398:	1349053b 	movtne	r0, #38203	; 0x953b
     39c:	00000b38 	andeq	r0, r0, r8, lsr fp
     3a0:	03000d07 	movweq	r0, #3335	; 0xd07
     3a4:	3b0b3a0e 	blcc	2cebe4 <_Min_Stack_Size+0x2ce7e4>
     3a8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     3ac:	08000005 	stmdaeq	r0, {r0, r2}
     3b0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     3b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     3b8:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     3bc:	01090000 	mrseq	r0, (UNDEF: 9)
     3c0:	01134901 	tsteq	r3, r1, lsl #18
     3c4:	0a000013 	beq	418 <_Min_Stack_Size+0x18>
     3c8:	13490021 	movtne	r0, #36897	; 0x9021
     3cc:	00000b2f 	andeq	r0, r0, pc, lsr #22
     3d0:	4900350b 	stmdbmi	r0, {r0, r1, r3, r8, sl, ip, sp}
     3d4:	0c000013 	stceq	0, cr0, [r0], {19}
     3d8:	13490021 	movtne	r0, #36897	; 0x9021
     3dc:	0000052f 	andeq	r0, r0, pc, lsr #10
     3e0:	0300160d 	movweq	r1, #1549	; 0x60d
     3e4:	3b0b3a0e 	blcc	2cec24 <_Min_Stack_Size+0x2ce824>
     3e8:	00134905 	andseq	r4, r3, r5, lsl #18
     3ec:	01130e00 	tsteq	r3, r0, lsl #28
     3f0:	0b3a0b0b 	bleq	e83024 <_Min_Stack_Size+0xe82c24>
     3f4:	1301053b 	movwne	r0, #5435	; 0x153b
     3f8:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 400 <_Min_Stack_Size>
     3fc:	3a080300 	bcc	201004 <_Min_Stack_Size+0x200c04>
     400:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     404:	000b3813 	andeq	r3, fp, r3, lsl r8
     408:	00261000 	eoreq	r1, r6, r0
     40c:	00001349 	andeq	r1, r0, r9, asr #6
     410:	0b010411 	bleq	4145c <_Min_Stack_Size+0x4105c>
     414:	3b0b3a0b 	blcc	2cec48 <_Min_Stack_Size+0x2ce848>
     418:	00130105 	andseq	r0, r3, r5, lsl #2
     41c:	00281200 	eoreq	r1, r8, r0, lsl #4
     420:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     424:	13130000 	tstne	r3, #0
     428:	3a0b0b01 	bcc	2c3034 <_Min_Stack_Size+0x2c2c34>
     42c:	010b3b0b 	tsteq	fp, fp, lsl #22
     430:	14000013 	strne	r0, [r0], #-19
     434:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     438:	0b3b0b3a 	bleq	ec3128 <_Min_Stack_Size+0xec2d28>
     43c:	0b381349 	bleq	e05168 <_Min_Stack_Size+0xe04d68>
     440:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     444:	03193f01 	tsteq	r9, #1, 30
     448:	3b0b3a0e 	blcc	2cec88 <_Min_Stack_Size+0x2ce888>
     44c:	1119270b 	tstne	r9, fp, lsl #14
     450:	40061201 	andmi	r1, r6, r1, lsl #4
     454:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     458:	00001301 	andeq	r1, r0, r1, lsl #6
     45c:	03000516 	movweq	r0, #1302	; 0x516
     460:	3b0b3a0e 	blcc	2ceca0 <_Min_Stack_Size+0x2ce8a0>
     464:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     468:	17000017 	smladne	r0, r7, r0, r0
     46c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     470:	0b3b0b3a 	bleq	ec3160 <_Min_Stack_Size+0xec2d60>
     474:	17021349 	strne	r1, [r2, -r9, asr #6]
     478:	0f180000 	svceq	0x00180000
     47c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     480:	19000013 	stmdbne	r0, {r0, r1, r4}
     484:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     488:	0b3b0b3a 	bleq	ec3178 <_Min_Stack_Size+0xec2d78>
     48c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     490:	341a0000 	ldrcc	r0, [sl], #-0
     494:	3a0e0300 	bcc	38109c <_Min_Stack_Size+0x380c9c>
     498:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     49c:	3c193f13 	ldccc	15, cr3, [r9], {19}
     4a0:	00000019 	andeq	r0, r0, r9, lsl r0
     4a4:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     4a8:	030b130e 	movweq	r1, #45838	; 0xb30e
     4ac:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     4b0:	10011117 	andne	r1, r1, r7, lsl r1
     4b4:	02000017 	andeq	r0, r0, #23
     4b8:	0b0b0024 	bleq	2c0550 <_Min_Stack_Size+0x2c0150>
     4bc:	0e030b3e 	vmoveq.16	d3[0], r0
     4c0:	16030000 	strne	r0, [r3], -r0
     4c4:	3a0e0300 	bcc	3810cc <_Min_Stack_Size+0x380ccc>
     4c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4cc:	04000013 	streq	r0, [r0], #-19
     4d0:	0b0b0024 	bleq	2c0568 <_Min_Stack_Size+0x2c0168>
     4d4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     4d8:	35050000 	strcc	r0, [r5, #-0]
     4dc:	00134900 	andseq	r4, r3, r0, lsl #18
     4e0:	01010600 	tsteq	r1, r0, lsl #12
     4e4:	13011349 	movwne	r1, #4937	; 0x1349
     4e8:	21070000 	mrscs	r0, (UNDEF: 7)
     4ec:	2f134900 	svccs	0x00134900
     4f0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     4f4:	0b0b0104 	bleq	2c090c <_Min_Stack_Size+0x2c050c>
     4f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     4fc:	00001301 	andeq	r1, r0, r1, lsl #6
     500:	03002809 	movweq	r2, #2057	; 0x809
     504:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     508:	00160a00 	andseq	r0, r6, r0, lsl #20
     50c:	0b3a0e03 	bleq	e83d20 <_Min_Stack_Size+0xe83920>
     510:	1349053b 	movtne	r0, #38203	; 0x953b
     514:	130b0000 	movwne	r0, #45056	; 0xb000
     518:	3a0b0b01 	bcc	2c3124 <_Min_Stack_Size+0x2c2d24>
     51c:	01053b0b 	tsteq	r5, fp, lsl #22
     520:	0c000013 	stceq	0, cr0, [r0], {19}
     524:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     528:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     52c:	0b381349 	bleq	e05258 <_Min_Stack_Size+0xe04e58>
     530:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     534:	3a080300 	bcc	20113c <_Min_Stack_Size+0x200d3c>
     538:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     53c:	000b3813 	andeq	r3, fp, r3, lsl r8
     540:	01040e00 	tsteq	r4, r0, lsl #28
     544:	0b3a0b0b 	bleq	e83178 <_Min_Stack_Size+0xe82d78>
     548:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     54c:	130f0000 	movwne	r0, #61440	; 0xf000
     550:	3a0b0b01 	bcc	2c315c <_Min_Stack_Size+0x2c2d5c>
     554:	010b3b0b 	tsteq	fp, fp, lsl #22
     558:	10000013 	andne	r0, r0, r3, lsl r0
     55c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     560:	0b3b0b3a 	bleq	ec3250 <_Min_Stack_Size+0xec2e50>
     564:	0b381349 	bleq	e05290 <_Min_Stack_Size+0xe04e90>
     568:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     56c:	03193f01 	tsteq	r9, #1, 30
     570:	3b0b3a0e 	blcc	2cedb0 <_Min_Stack_Size+0x2ce9b0>
     574:	1119270b 	tstne	r9, fp, lsl #14
     578:	40061201 	andmi	r1, r6, r1, lsl #4
     57c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     580:	00001301 	andeq	r1, r0, r1, lsl #6
     584:	03000512 	movweq	r0, #1298	; 0x512
     588:	3b0b3a0e 	blcc	2cedc8 <_Min_Stack_Size+0x2ce9c8>
     58c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     590:	13000017 	movwne	r0, #23
     594:	01018289 	smlabbeq	r1, r9, r2, r8
     598:	13310111 	teqne	r1, #1073741828	; 0x40000004
     59c:	00001301 	andeq	r1, r0, r1, lsl #6
     5a0:	01828a14 	orreq	r8, r2, r4, lsl sl
     5a4:	91180200 	tstls	r8, r0, lsl #4
     5a8:	00001842 	andeq	r1, r0, r2, asr #16
     5ac:	01828915 	orreq	r8, r2, r5, lsl r9
     5b0:	95011101 	strls	r1, [r1, #-257]	; 0x101
     5b4:	13311942 	teqne	r1, #1081344	; 0x108000
     5b8:	00001301 	andeq	r1, r0, r1, lsl #6
     5bc:	01828916 	orreq	r8, r2, r6, lsl r9
     5c0:	95011101 	strls	r1, [r1, #-257]	; 0x101
     5c4:	13311942 	teqne	r1, #1081344	; 0x108000
     5c8:	0f170000 	svceq	0x00170000
     5cc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     5d0:	18000013 	stmdane	r0, {r0, r1, r4}
     5d4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     5d8:	0b3b0b3a 	bleq	ec32c8 <_Min_Stack_Size+0xec2ec8>
     5dc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     5e0:	34190000 	ldrcc	r0, [r9], #-0
     5e4:	3a0e0300 	bcc	3811ec <_Min_Stack_Size+0x380dec>
     5e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5ec:	00170213 	andseq	r0, r7, r3, lsl r2
     5f0:	00341a00 	eorseq	r1, r4, r0, lsl #20
     5f4:	0b3a0803 	bleq	e82608 <_Min_Stack_Size+0xe82208>
     5f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5fc:	00001702 	andeq	r1, r0, r2, lsl #14
     600:	3f012e1b 	svccc	0x00012e1b
     604:	3a0e0319 	bcc	381270 <_Min_Stack_Size+0x380e70>
     608:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     60c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     610:	97184006 	ldrls	r4, [r8, -r6]
     614:	13011942 	movwne	r1, #6466	; 0x1942
     618:	051c0000 	ldreq	r0, [ip, #-0]
     61c:	3a0e0300 	bcc	381224 <_Min_Stack_Size+0x380e24>
     620:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     624:	00180213 	andseq	r0, r8, r3, lsl r2
     628:	00341d00 	eorseq	r1, r4, r0, lsl #26
     62c:	0b3a0803 	bleq	e82640 <_Min_Stack_Size+0xe82240>
     630:	1349053b 	movtne	r0, #38203	; 0x953b
     634:	00001802 	andeq	r1, r0, r2, lsl #16
     638:	3f012e1e 	svccc	0x00012e1e
     63c:	3a0e0319 	bcc	3812a8 <_Min_Stack_Size+0x380ea8>
     640:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     644:	11134919 	tstne	r3, r9, lsl r9
     648:	40061201 	andmi	r1, r6, r1, lsl #4
     64c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     650:	00001301 	andeq	r1, r0, r1, lsl #6
     654:	0300051f 	movweq	r0, #1311	; 0x51f
     658:	3b0b3a0e 	blcc	2cee98 <_Min_Stack_Size+0x2cea98>
     65c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     660:	20000017 	andcs	r0, r0, r7, lsl r0
     664:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     668:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     66c:	17021349 	strne	r1, [r2, -r9, asr #6]
     670:	34210000 	strtcc	r0, [r1], #-0
     674:	3a0e0300 	bcc	38127c <_Min_Stack_Size+0x380e7c>
     678:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     67c:	3c193f13 	ldccc	15, cr3, [r9], {19}
     680:	22000019 	andcs	r0, r0, #25
     684:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     688:	0b3a0e03 	bleq	e83e9c <_Min_Stack_Size+0xe83a9c>
     68c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     690:	0000193c 	andeq	r1, r0, ip, lsr r9
     694:	49000523 	stmdbmi	r0, {r0, r1, r5, r8, sl}
     698:	00000013 	andeq	r0, r0, r3, lsl r0
     69c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     6a0:	030b130e 	movweq	r1, #45838	; 0xb30e
     6a4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     6a8:	10011117 	andne	r1, r1, r7, lsl r1
     6ac:	02000017 	andeq	r0, r0, #23
     6b0:	0b0b0024 	bleq	2c0748 <_Min_Stack_Size+0x2c0348>
     6b4:	0e030b3e 	vmoveq.16	d3[0], r0
     6b8:	16030000 	strne	r0, [r3], -r0
     6bc:	3a0e0300 	bcc	3812c4 <_Min_Stack_Size+0x380ec4>
     6c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6c4:	04000013 	streq	r0, [r0], #-19
     6c8:	0b0b0024 	bleq	2c0760 <_Min_Stack_Size+0x2c0360>
     6cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     6d0:	35050000 	strcc	r0, [r5, #-0]
     6d4:	00134900 	andseq	r4, r3, r0, lsl #18
     6d8:	01010600 	tsteq	r1, r0, lsl #12
     6dc:	13011349 	movwne	r1, #4937	; 0x1349
     6e0:	21070000 	mrscs	r0, (UNDEF: 7)
     6e4:	2f134900 	svccs	0x00134900
     6e8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     6ec:	0b0b0104 	bleq	2c0b04 <_Min_Stack_Size+0x2c0704>
     6f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     6f4:	00001301 	andeq	r1, r0, r1, lsl #6
     6f8:	03002809 	movweq	r2, #2057	; 0x809
     6fc:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     700:	00280a00 	eoreq	r0, r8, r0, lsl #20
     704:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     708:	160b0000 	strne	r0, [fp], -r0
     70c:	3a0e0300 	bcc	381314 <_Min_Stack_Size+0x380f14>
     710:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     714:	0c000013 	stceq	0, cr0, [r0], {19}
     718:	0b0b0113 	bleq	2c0b6c <_Min_Stack_Size+0x2c076c>
     71c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     720:	00001301 	andeq	r1, r0, r1, lsl #6
     724:	03000d0d 	movweq	r0, #3341	; 0xd0d
     728:	3b0b3a08 	blcc	2cef50 <_Min_Stack_Size+0x2ceb50>
     72c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     730:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     734:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     738:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     73c:	0b381349 	bleq	e05468 <_Min_Stack_Size+0xe05068>
     740:	130f0000 	movwne	r0, #61440	; 0xf000
     744:	3a0b0b01 	bcc	2c3350 <_Min_Stack_Size+0x2c2f50>
     748:	010b3b0b 	tsteq	fp, fp, lsl #22
     74c:	10000013 	andne	r0, r0, r3, lsl r0
     750:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     754:	0b3b0b3a 	bleq	ec3444 <_Min_Stack_Size+0xec3044>
     758:	0b381349 	bleq	e05484 <_Min_Stack_Size+0xe05084>
     75c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     760:	03193f01 	tsteq	r9, #1, 30
     764:	3b0b3a0e 	blcc	2cefa4 <_Min_Stack_Size+0x2ceba4>
     768:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     76c:	010b2013 	tsteq	fp, r3, lsl r0
     770:	12000013 	andne	r0, r0, #19
     774:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     778:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     77c:	00001349 	andeq	r1, r0, r9, asr #6
     780:	03003413 	movweq	r3, #1043	; 0x413
     784:	3b0b3a08 	blcc	2cefac <_Min_Stack_Size+0x2cebac>
     788:	00134905 	andseq	r4, r3, r5, lsl #18
     78c:	00341400 	eorseq	r1, r4, r0, lsl #8
     790:	0b3a0e03 	bleq	e83fa4 <_Min_Stack_Size+0xe83ba4>
     794:	1349053b 	movtne	r0, #38203	; 0x953b
     798:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     79c:	03193f00 	tsteq	r9, #0, 30
     7a0:	3b0b3a0e 	blcc	2cefe0 <_Min_Stack_Size+0x2cebe0>
     7a4:	1119270b 	tstne	r9, fp, lsl #14
     7a8:	40061201 	andmi	r1, r6, r1, lsl #4
     7ac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     7b0:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     7b4:	03193f01 	tsteq	r9, #1, 30
     7b8:	3b0b3a0e 	blcc	2ceff8 <_Min_Stack_Size+0x2cebf8>
     7bc:	11192705 	tstne	r9, r5, lsl #14
     7c0:	40061201 	andmi	r1, r6, r1, lsl #4
     7c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     7c8:	00001301 	andeq	r1, r0, r1, lsl #6
     7cc:	03000517 	movweq	r0, #1303	; 0x517
     7d0:	3b0b3a0e 	blcc	2cf010 <_Min_Stack_Size+0x2cec10>
     7d4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     7d8:	18000018 	stmdane	r0, {r3, r4}
     7dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     7e0:	0b3a0e03 	bleq	e83ff4 <_Min_Stack_Size+0xe83bf4>
     7e4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     7e8:	01111349 	tsteq	r1, r9, asr #6
     7ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     7f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     7f4:	19000013 	stmdbne	r0, {r0, r1, r4}
     7f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     7fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     800:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     804:	341a0000 	ldrcc	r0, [sl], #-0
     808:	3a0e0300 	bcc	381410 <_Min_Stack_Size+0x381010>
     80c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     810:	00170213 	andseq	r0, r7, r3, lsl r2
     814:	011d1b00 	tsteq	sp, r0, lsl #22
     818:	01521331 	cmpeq	r2, r1, lsr r3
     81c:	0b581755 	bleq	1606578 <_Min_Stack_Size+0x1606178>
     820:	13010559 	movwne	r0, #5465	; 0x1559
     824:	051c0000 	ldreq	r0, [ip, #-0]
     828:	1c133100 	ldfnes	f3, [r3], {-0}
     82c:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
     830:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     834:	341e0000 	ldrcc	r0, [lr], #-0
     838:	02133100 	andseq	r3, r3, #0, 2
     83c:	1f000017 	svcne	0x00000017
     840:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     844:	06120111 			; <UNDEFINED> instruction: 0x06120111
     848:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
     84c:	05200000 	streq	r0, [r0, #-0]!
     850:	02133100 	andseq	r3, r3, #0, 2
     854:	21000017 	tstcs	r0, r7, lsl r0
     858:	0111010b 	tsteq	r1, fp, lsl #2
     85c:	00000612 	andeq	r0, r0, r2, lsl r6
     860:	03000522 	movweq	r0, #1314	; 0x522
     864:	3b0b3a0e 	blcc	2cf0a4 <_Min_Stack_Size+0x2ceca4>
     868:	02134905 	andseq	r4, r3, #81920	; 0x14000
     86c:	23000017 	movwcs	r0, #23
     870:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     874:	0b3a0e03 	bleq	e84088 <_Min_Stack_Size+0xe83c88>
     878:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     87c:	01111349 	tsteq	r1, r9, asr #6
     880:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     884:	00194297 	mulseq	r9, r7, r2
     888:	00342400 	eorseq	r2, r4, r0, lsl #8
     88c:	0b3a0803 	bleq	e828a0 <_Min_Stack_Size+0xe824a0>
     890:	1349053b 	movtne	r0, #38203	; 0x953b
     894:	00001702 	andeq	r1, r0, r2, lsl #14
     898:	0b000f25 	bleq	4534 <_Min_Stack_Size+0x4134>
     89c:	0013490b 	andseq	r4, r3, fp, lsl #18
     8a0:	012e2600 	teqeq	lr, r0, lsl #12
     8a4:	01111331 	tsteq	r1, r1, lsr r3
     8a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     8ac:	01194297 			; <UNDEFINED> instruction: 0x01194297
     8b0:	27000013 	smladcs	r0, r3, r0, r0
     8b4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     8b8:	0b3a0e03 	bleq	e840cc <_Min_Stack_Size+0xe83ccc>
     8bc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     8c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8c4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     8c8:	28000019 	stmdacs	r0, {r0, r3, r4}
     8cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8d0:	0b3b0b3a 	bleq	ec35c0 <_Min_Stack_Size+0xec31c0>
     8d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     8d8:	26290000 	strtcs	r0, [r9], -r0
     8dc:	00134900 	andseq	r4, r3, r0, lsl #18
     8e0:	00342a00 	eorseq	r2, r4, r0, lsl #20
     8e4:	0b3a0e03 	bleq	e840f8 <_Min_Stack_Size+0xe83cf8>
     8e8:	1349053b 	movtne	r0, #38203	; 0x953b
     8ec:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     8f0:	01000000 	mrseq	r0, (UNDEF: 0)
     8f4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     8f8:	0e030b13 	vmoveq.32	d3[0], r0
     8fc:	17550e1b 	smmlane	r5, fp, lr, r0
     900:	17100111 			; <UNDEFINED> instruction: 0x17100111
     904:	24020000 	strcs	r0, [r2], #-0
     908:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     90c:	000e030b 	andeq	r0, lr, fp, lsl #6
     910:	00160300 	andseq	r0, r6, r0, lsl #6
     914:	0b3a0e03 	bleq	e84128 <_Min_Stack_Size+0xe83d28>
     918:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     91c:	24040000 	strcs	r0, [r4], #-0
     920:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     924:	0008030b 	andeq	r0, r8, fp, lsl #6
     928:	00350500 	eorseq	r0, r5, r0, lsl #10
     92c:	00001349 	andeq	r1, r0, r9, asr #6
     930:	0b010406 	bleq	41950 <_Min_Stack_Size+0x41550>
     934:	3b0b3a0b 	blcc	2cf168 <_Min_Stack_Size+0x2ced68>
     938:	00130105 	andseq	r0, r3, r5, lsl #2
     93c:	00280700 	eoreq	r0, r8, r0, lsl #14
     940:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     944:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
     948:	1c080300 	stcne	3, cr0, [r8], {-0}
     94c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
     950:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     954:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     958:	00001349 	andeq	r1, r0, r9, asr #6
     95c:	0b01130a 	bleq	4558c <_Min_Stack_Size+0x4518c>
     960:	3b0b3a0b 	blcc	2cf194 <_Min_Stack_Size+0x2ced94>
     964:	00130105 	andseq	r0, r3, r5, lsl #2
     968:	000d0b00 	andeq	r0, sp, r0, lsl #22
     96c:	0b3a0803 	bleq	e82980 <_Min_Stack_Size+0xe82580>
     970:	1349053b 	movtne	r0, #38203	; 0x953b
     974:	00000b38 	andeq	r0, r0, r8, lsr fp
     978:	03000d0c 	movweq	r0, #3340	; 0xd0c
     97c:	3b0b3a0e 	blcc	2cf1bc <_Min_Stack_Size+0x2cedbc>
     980:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     984:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     988:	0b0b0113 	bleq	2c0ddc <_Min_Stack_Size+0x2c09dc>
     98c:	0b3b0b3a 	bleq	ec367c <_Min_Stack_Size+0xec327c>
     990:	00001301 	andeq	r1, r0, r1, lsl #6
     994:	03000d0e 	movweq	r0, #3342	; 0xd0e
     998:	3b0b3a0e 	blcc	2cf1d8 <_Min_Stack_Size+0x2cedd8>
     99c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     9a0:	0f00000b 	svceq	0x0000000b
     9a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     9a8:	0b3a0e03 	bleq	e841bc <_Min_Stack_Size+0xe83dbc>
     9ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     9b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     9b8:	00130119 	andseq	r0, r3, r9, lsl r1
     9bc:	00051000 	andeq	r1, r5, r0
     9c0:	0b3a0e03 	bleq	e841d4 <_Min_Stack_Size+0xe83dd4>
     9c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9c8:	00001702 	andeq	r1, r0, r2, lsl #14
     9cc:	01828911 	orreq	r8, r2, r1, lsl r9
     9d0:	31011101 	tstcc	r1, r1, lsl #2
     9d4:	00130113 	andseq	r0, r3, r3, lsl r1
     9d8:	828a1200 	addhi	r1, sl, #0, 4
     9dc:	18020001 	stmdane	r2, {r0}
     9e0:	00184291 	mulseq	r8, r1, r2
     9e4:	82891300 	addhi	r1, r9, #0, 6
     9e8:	01110101 	tsteq	r1, r1, lsl #2
     9ec:	31194295 			; <UNDEFINED> instruction: 0x31194295
     9f0:	00130113 	andseq	r0, r3, r3, lsl r1
     9f4:	82891400 	addhi	r1, r9, #0, 8
     9f8:	01110101 	tsteq	r1, r1, lsl #2
     9fc:	31194295 			; <UNDEFINED> instruction: 0x31194295
     a00:	15000013 	strne	r0, [r0, #-19]
     a04:	0b0b000f 	bleq	2c0a48 <_Min_Stack_Size+0x2c0648>
     a08:	00001349 	andeq	r1, r0, r9, asr #6
     a0c:	03003416 	movweq	r3, #1046	; 0x416
     a10:	3b0b3a0e 	blcc	2cf250 <_Min_Stack_Size+0x2cee50>
     a14:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     a18:	17000017 	smladne	r0, r7, r0, r0
     a1c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     a20:	0b3b0b3a 	bleq	ec3710 <_Min_Stack_Size+0xec3310>
     a24:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     a28:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
     a2c:	11010182 	smlabbne	r1, r2, r1, r0
     a30:	00133101 	andseq	r3, r3, r1, lsl #2
     a34:	012e1900 	teqeq	lr, r0, lsl #18
     a38:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a40:	01111927 	tsteq	r1, r7, lsr #18
     a44:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a48:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a4c:	1a000013 	bne	aa0 <_Min_Stack_Size+0x6a0>
     a50:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     a54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a58:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     a5c:	051b0000 	ldreq	r0, [fp, #-0]
     a60:	3a0e0300 	bcc	381668 <_Min_Stack_Size+0x381268>
     a64:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a68:	00170213 	andseq	r0, r7, r3, lsl r2
     a6c:	00341c00 	eorseq	r1, r4, r0, lsl #24
     a70:	0b3a0e03 	bleq	e84284 <_Min_Stack_Size+0xe83e84>
     a74:	1349053b 	movtne	r0, #38203	; 0x953b
     a78:	00001702 	andeq	r1, r0, r2, lsl #14
     a7c:	3f012e1d 	svccc	0x00012e1d
     a80:	3a0e0319 	bcc	3816ec <_Min_Stack_Size+0x3812ec>
     a84:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a88:	11134919 	tstne	r3, r9, lsl r9
     a8c:	40061201 	andmi	r1, r6, r1, lsl #4
     a90:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a94:	00001301 	andeq	r1, r0, r1, lsl #6
     a98:	0300341e 	movweq	r3, #1054	; 0x41e
     a9c:	3b0b3a0e 	blcc	2cf2dc <_Min_Stack_Size+0x2ceedc>
     aa0:	00134905 	andseq	r4, r3, r5, lsl #18
     aa4:	00341f00 	eorseq	r1, r4, r0, lsl #30
     aa8:	0b3a0e03 	bleq	e842bc <_Min_Stack_Size+0xe83ebc>
     aac:	1349053b 	movtne	r0, #38203	; 0x953b
     ab0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     ab4:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     ab8:	03193f01 	tsteq	r9, #1, 30
     abc:	3b0b3a0e 	blcc	2cf2fc <_Min_Stack_Size+0x2ceefc>
     ac0:	3c192705 	ldccc	7, cr2, [r9], {5}
     ac4:	00130119 	andseq	r0, r3, r9, lsl r1
     ac8:	00052100 	andeq	r2, r5, r0, lsl #2
     acc:	00001349 	andeq	r1, r0, r9, asr #6
     ad0:	01110100 	tsteq	r1, r0, lsl #2
     ad4:	0b130e25 	bleq	4c4370 <_Min_Stack_Size+0x4c3f70>
     ad8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     adc:	01111755 	tsteq	r1, r5, asr r7
     ae0:	00001710 	andeq	r1, r0, r0, lsl r7
     ae4:	0b002402 	bleq	9af4 <_Min_Stack_Size+0x96f4>
     ae8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     aec:	0300000e 	movweq	r0, #14
     af0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     af4:	0b3b0b3a 	bleq	ec37e4 <_Min_Stack_Size+0xec33e4>
     af8:	00001349 	andeq	r1, r0, r9, asr #6
     afc:	0b002404 	bleq	9b14 <_Min_Stack_Size+0x9714>
     b00:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     b04:	05000008 	streq	r0, [r0, #-8]
     b08:	13490035 	movtne	r0, #36917	; 0x9035
     b0c:	01060000 	mrseq	r0, (UNDEF: 6)
     b10:	01134901 	tsteq	r3, r1, lsl #18
     b14:	07000013 	smladeq	r0, r3, r0, r0
     b18:	13490021 	movtne	r0, #36897	; 0x9021
     b1c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     b20:	0b010408 	bleq	41b48 <_Min_Stack_Size+0x41748>
     b24:	3b0b3a0b 	blcc	2cf358 <_Min_Stack_Size+0x2cef58>
     b28:	00130105 	andseq	r0, r3, r5, lsl #2
     b2c:	00280900 	eoreq	r0, r8, r0, lsl #18
     b30:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     b34:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
     b38:	1c080300 	stcne	3, cr0, [r8], {-0}
     b3c:	0b00000d 	bleq	b78 <_Min_Stack_Size+0x778>
     b40:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     b44:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b48:	00001349 	andeq	r1, r0, r9, asr #6
     b4c:	0b01130c 	bleq	45784 <_Min_Stack_Size+0x45384>
     b50:	3b0b3a0b 	blcc	2cf384 <_Min_Stack_Size+0x2cef84>
     b54:	00130105 	andseq	r0, r3, r5, lsl #2
     b58:	000d0d00 	andeq	r0, sp, r0, lsl #26
     b5c:	0b3a0e03 	bleq	e84370 <_Min_Stack_Size+0xe83f70>
     b60:	1349053b 	movtne	r0, #38203	; 0x953b
     b64:	00000b38 	andeq	r0, r0, r8, lsr fp
     b68:	03000d0e 	movweq	r0, #3342	; 0xd0e
     b6c:	3b0b3a08 	blcc	2cf394 <_Min_Stack_Size+0x2cef94>
     b70:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     b74:	0f00000b 	svceq	0x0000000b
     b78:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b7c:	0b3a0e03 	bleq	e84390 <_Min_Stack_Size+0xe83f90>
     b80:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b84:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b88:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b8c:	00130119 	andseq	r0, r3, r9, lsl r1
     b90:	82891000 	addhi	r1, r9, #0
     b94:	01110101 	tsteq	r1, r1, lsl #2
     b98:	13011331 	movwne	r1, #4913	; 0x1331
     b9c:	8a110000 	bhi	440ba4 <_Min_Stack_Size+0x4407a4>
     ba0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     ba4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     ba8:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
     bac:	11010182 	smlabbne	r1, r2, r1, r0
     bb0:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     bb4:	00001331 	andeq	r1, r0, r1, lsr r3
     bb8:	03000513 	movweq	r0, #1299	; 0x513
     bbc:	3b0b3a0e 	blcc	2cf3fc <_Min_Stack_Size+0x2ceffc>
     bc0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     bc4:	14000018 	strne	r0, [r0], #-24
     bc8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     bcc:	0b3b0b3a 	bleq	ec38bc <_Min_Stack_Size+0xec34bc>
     bd0:	17021349 	strne	r1, [r2, -r9, asr #6]
     bd4:	34150000 	ldrcc	r0, [r5], #-0
     bd8:	3a080300 	bcc	2017e0 <_Min_Stack_Size+0x2013e0>
     bdc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     be0:	00170213 	andseq	r0, r7, r3, lsl r2
     be4:	012e1600 	teqeq	lr, r0, lsl #12
     be8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     bec:	0b3b0b3a 	bleq	ec38dc <_Min_Stack_Size+0xec34dc>
     bf0:	13491927 	movtne	r1, #39207	; 0x9927
     bf4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     bf8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     bfc:	00130119 	andseq	r0, r3, r9, lsl r1
     c00:	00341700 	eorseq	r1, r4, r0, lsl #14
     c04:	0b3a0e03 	bleq	e84418 <_Min_Stack_Size+0xe84018>
     c08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c0c:	00001702 	andeq	r1, r0, r2, lsl #14
     c10:	03003418 	movweq	r3, #1048	; 0x418
     c14:	3b0b3a0e 	blcc	2cf454 <_Min_Stack_Size+0x2cf054>
     c18:	3f134905 	svccc	0x00134905
     c1c:	00193c19 	andseq	r3, r9, r9, lsl ip
     c20:	012e1900 	teqeq	lr, r0, lsl #18
     c24:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c2c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     c30:	051a0000 	ldreq	r0, [sl, #-0]
     c34:	00134900 	andseq	r4, r3, r0, lsl #18
     c38:	11010000 	mrsne	r0, (UNDEF: 1)
     c3c:	130e2501 	movwne	r2, #58625	; 0xe501
     c40:	1b0e030b 	blne	381874 <_Min_Stack_Size+0x381474>
     c44:	1117550e 	tstne	r7, lr, lsl #10
     c48:	00171001 	andseq	r1, r7, r1
     c4c:	00240200 	eoreq	r0, r4, r0, lsl #4
     c50:	0b3e0b0b 	bleq	f83884 <_Min_Stack_Size+0xf83484>
     c54:	00000e03 	andeq	r0, r0, r3, lsl #28
     c58:	03001603 	movweq	r1, #1539	; 0x603
     c5c:	3b0b3a0e 	blcc	2cf49c <_Min_Stack_Size+0x2cf09c>
     c60:	0013490b 	andseq	r4, r3, fp, lsl #18
     c64:	00240400 	eoreq	r0, r4, r0, lsl #8
     c68:	0b3e0b0b 	bleq	f8389c <_Min_Stack_Size+0xf8349c>
     c6c:	00000803 	andeq	r0, r0, r3, lsl #16
     c70:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     c74:	06000013 			; <UNDEFINED> instruction: 0x06000013
     c78:	0b0b0104 	bleq	2c1090 <_Min_Stack_Size+0x2c0c90>
     c7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c80:	00001301 	andeq	r1, r0, r1, lsl #6
     c84:	03002807 	movweq	r2, #2055	; 0x807
     c88:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     c8c:	00280800 	eoreq	r0, r8, r0, lsl #16
     c90:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     c94:	16090000 	strne	r0, [r9], -r0
     c98:	3a0e0300 	bcc	3818a0 <_Min_Stack_Size+0x3814a0>
     c9c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ca0:	0a000013 	beq	cf4 <_Min_Stack_Size+0x8f4>
     ca4:	0b0b0113 	bleq	2c10f8 <_Min_Stack_Size+0x2c0cf8>
     ca8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     cac:	00001301 	andeq	r1, r0, r1, lsl #6
     cb0:	03000d0b 	movweq	r0, #3339	; 0xd0b
     cb4:	3b0b3a08 	blcc	2cf4dc <_Min_Stack_Size+0x2cf0dc>
     cb8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     cbc:	0c00000b 	stceq	0, cr0, [r0], {11}
     cc0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     cc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     cc8:	0b381349 	bleq	e059f4 <_Min_Stack_Size+0xe055f4>
     ccc:	130d0000 	movwne	r0, #53248	; 0xd000
     cd0:	3a0b0b01 	bcc	2c38dc <_Min_Stack_Size+0x2c34dc>
     cd4:	010b3b0b 	tsteq	fp, fp, lsl #22
     cd8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     cdc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     ce0:	0b3b0b3a 	bleq	ec39d0 <_Min_Stack_Size+0xec35d0>
     ce4:	0b381349 	bleq	e05a10 <_Min_Stack_Size+0xe05610>
     ce8:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     cec:	03193f01 	tsteq	r9, #1, 30
     cf0:	3b0b3a0e 	blcc	2cf530 <_Min_Stack_Size+0x2cf130>
     cf4:	1119270b 	tstne	r9, fp, lsl #14
     cf8:	40061201 	andmi	r1, r6, r1, lsl #4
     cfc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d00:	00001301 	andeq	r1, r0, r1, lsl #6
     d04:	03000510 	movweq	r0, #1296	; 0x510
     d08:	3b0b3a0e 	blcc	2cf548 <_Min_Stack_Size+0x2cf148>
     d0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d10:	11000017 	tstne	r0, r7, lsl r0
     d14:	01018289 	smlabbeq	r1, r9, r2, r8
     d18:	13310111 	teqne	r1, #1073741828	; 0x40000004
     d1c:	00001301 	andeq	r1, r0, r1, lsl #6
     d20:	01828a12 	orreq	r8, r2, r2, lsl sl
     d24:	91180200 	tstls	r8, r0, lsl #4
     d28:	00001842 	andeq	r1, r0, r2, asr #16
     d2c:	01828913 	orreq	r8, r2, r3, lsl r9
     d30:	95011101 	strls	r1, [r1, #-257]	; 0x101
     d34:	13311942 	teqne	r1, #1081344	; 0x108000
     d38:	00001301 	andeq	r1, r0, r1, lsl #6
     d3c:	01828914 	orreq	r8, r2, r4, lsl r9
     d40:	95011101 	strls	r1, [r1, #-257]	; 0x101
     d44:	13311942 	teqne	r1, #1081344	; 0x108000
     d48:	0f150000 	svceq	0x00150000
     d4c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     d50:	16000013 			; <UNDEFINED> instruction: 0x16000013
     d54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d58:	0b3b0b3a 	bleq	ec3a48 <_Min_Stack_Size+0xec3648>
     d5c:	17021349 	strne	r1, [r2, -r9, asr #6]
     d60:	34170000 	ldrcc	r0, [r7], #-0
     d64:	3a0e0300 	bcc	38196c <_Min_Stack_Size+0x38156c>
     d68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d6c:	00180213 	andseq	r0, r8, r3, lsl r2
     d70:	82891800 	addhi	r1, r9, #0, 16
     d74:	01110101 	tsteq	r1, r1, lsl #2
     d78:	00001331 	andeq	r1, r0, r1, lsr r3
     d7c:	3f012e19 	svccc	0x00012e19
     d80:	3a0e0319 	bcc	3819ec <_Min_Stack_Size+0x3815ec>
     d84:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     d88:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d8c:	97184006 	ldrls	r4, [r8, -r6]
     d90:	13011942 	movwne	r1, #6466	; 0x1942
     d94:	051a0000 	ldreq	r0, [sl, #-0]
     d98:	3a0e0300 	bcc	3819a0 <_Min_Stack_Size+0x3815a0>
     d9c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     da0:	00180213 	andseq	r0, r8, r3, lsl r2
     da4:	00051b00 	andeq	r1, r5, r0, lsl #22
     da8:	0b3a0e03 	bleq	e845bc <_Min_Stack_Size+0xe841bc>
     dac:	1349053b 	movtne	r0, #38203	; 0x953b
     db0:	00001702 	andeq	r1, r0, r2, lsl #14
     db4:	0300341c 	movweq	r3, #1052	; 0x41c
     db8:	3b0b3a0e 	blcc	2cf5f8 <_Min_Stack_Size+0x2cf1f8>
     dbc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     dc0:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
     dc4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     dc8:	0b3a0e03 	bleq	e845dc <_Min_Stack_Size+0xe841dc>
     dcc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     dd0:	01111349 	tsteq	r1, r9, asr #6
     dd4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     dd8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     ddc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     de0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     de4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     de8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     dec:	341f0000 	ldrcc	r0, [pc], #-0	; df4 <_Min_Stack_Size+0x9f4>
     df0:	3a0e0300 	bcc	3819f8 <_Min_Stack_Size+0x3815f8>
     df4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     df8:	00180213 	andseq	r0, r8, r3, lsl r2
     dfc:	00342000 	eorseq	r2, r4, r0
     e00:	0b3a0e03 	bleq	e84614 <_Min_Stack_Size+0xe84214>
     e04:	1349053b 	movtne	r0, #38203	; 0x953b
     e08:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e0c:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     e10:	03193f01 	tsteq	r9, #1, 30
     e14:	3b0b3a0e 	blcc	2cf654 <_Min_Stack_Size+0x2cf254>
     e18:	3c192705 	ldccc	7, cr2, [r9], {5}
     e1c:	00130119 	andseq	r0, r3, r9, lsl r1
     e20:	00052200 	andeq	r2, r5, r0, lsl #4
     e24:	00001349 	andeq	r1, r0, r9, asr #6
     e28:	01110100 	tsteq	r1, r0, lsl #2
     e2c:	0b130e25 	bleq	4c46c8 <_Min_Stack_Size+0x4c42c8>
     e30:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     e34:	01111755 	tsteq	r1, r5, asr r7
     e38:	00001710 	andeq	r1, r0, r0, lsl r7
     e3c:	0b002402 	bleq	9e4c <_Min_Stack_Size+0x9a4c>
     e40:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e44:	0300000e 	movweq	r0, #14
     e48:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     e4c:	0b3b0b3a 	bleq	ec3b3c <_Min_Stack_Size+0xec373c>
     e50:	00001349 	andeq	r1, r0, r9, asr #6
     e54:	0b002404 	bleq	9e6c <_Min_Stack_Size+0x9a6c>
     e58:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e5c:	05000008 	streq	r0, [r0, #-8]
     e60:	13490035 	movtne	r0, #36917	; 0x9035
     e64:	04060000 	streq	r0, [r6], #-0
     e68:	3a0b0b01 	bcc	2c3a74 <_Min_Stack_Size+0x2c3674>
     e6c:	01053b0b 	tsteq	r5, fp, lsl #22
     e70:	07000013 	smladeq	r0, r3, r0, r0
     e74:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     e78:	00000d1c 	andeq	r0, r0, ip, lsl sp
     e7c:	03002808 	movweq	r2, #2056	; 0x808
     e80:	000d1c08 	andeq	r1, sp, r8, lsl #24
     e84:	00160900 	andseq	r0, r6, r0, lsl #18
     e88:	0b3a0e03 	bleq	e8469c <_Min_Stack_Size+0xe8429c>
     e8c:	1349053b 	movtne	r0, #38203	; 0x953b
     e90:	130a0000 	movwne	r0, #40960	; 0xa000
     e94:	3a0b0b01 	bcc	2c3aa0 <_Min_Stack_Size+0x2c36a0>
     e98:	01053b0b 	tsteq	r5, fp, lsl #22
     e9c:	0b000013 	bleq	ef0 <_Min_Stack_Size+0xaf0>
     ea0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     ea4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ea8:	0b381349 	bleq	e05bd4 <_Min_Stack_Size+0xe057d4>
     eac:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     eb0:	3a0e0300 	bcc	381ab8 <_Min_Stack_Size+0x3816b8>
     eb4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     eb8:	000b3813 	andeq	r3, fp, r3, lsl r8
     ebc:	01130d00 	tsteq	r3, r0, lsl #26
     ec0:	0b3a0b0b 	bleq	e83af4 <_Min_Stack_Size+0xe836f4>
     ec4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     ec8:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     ecc:	3a0e0300 	bcc	381ad4 <_Min_Stack_Size+0x3816d4>
     ed0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ed4:	000b3813 	andeq	r3, fp, r3, lsl r8
     ed8:	012e0f00 	teqeq	lr, r0, lsl #30
     edc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ee0:	0b3b0b3a 	bleq	ec3bd0 <_Min_Stack_Size+0xec37d0>
     ee4:	01111927 	tsteq	r1, r7, lsr #18
     ee8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     eec:	01194297 			; <UNDEFINED> instruction: 0x01194297
     ef0:	10000013 	andne	r0, r0, r3, lsl r0
     ef4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     ef8:	0b3b0b3a 	bleq	ec3be8 <_Min_Stack_Size+0xec37e8>
     efc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f00:	0f110000 	svceq	0x00110000
     f04:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     f08:	12000013 	andne	r0, r0, #19
     f0c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f10:	0b3a0e03 	bleq	e84724 <_Min_Stack_Size+0xe84324>
     f14:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     f18:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f1c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f20:	00130119 	andseq	r0, r3, r9, lsl r1
     f24:	00051300 	andeq	r1, r5, r0, lsl #6
     f28:	0b3a0e03 	bleq	e8473c <_Min_Stack_Size+0xe8433c>
     f2c:	1349053b 	movtne	r0, #38203	; 0x953b
     f30:	00001802 	andeq	r1, r0, r2, lsl #16
     f34:	03000514 	movweq	r0, #1300	; 0x514
     f38:	3b0b3a0e 	blcc	2cf778 <_Min_Stack_Size+0x2cf378>
     f3c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     f40:	15000017 	strne	r0, [r0, #-23]
     f44:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     f4c:	17021349 	strne	r1, [r2, -r9, asr #6]
     f50:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     f54:	03193f01 	tsteq	r9, #1, 30
     f58:	3b0b3a0e 	blcc	2cf798 <_Min_Stack_Size+0x2cf398>
     f5c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     f60:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f64:	97184006 	ldrls	r4, [r8, -r6]
     f68:	13011942 	movwne	r1, #6466	; 0x1942
     f6c:	34170000 	ldrcc	r0, [r7], #-0
     f70:	3a080300 	bcc	201b78 <_Min_Stack_Size+0x201778>
     f74:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f78:	00170213 	andseq	r0, r7, r3, lsl r2
     f7c:	00341800 	eorseq	r1, r4, r0, lsl #16
     f80:	0b3a0e03 	bleq	e84794 <_Min_Stack_Size+0xe84394>
     f84:	1349053b 	movtne	r0, #38203	; 0x953b
     f88:	00001802 	andeq	r1, r0, r2, lsl #16
     f8c:	03003419 	movweq	r3, #1049	; 0x419
     f90:	3b0b3a0e 	blcc	2cf7d0 <_Min_Stack_Size+0x2cf3d0>
     f94:	3f134905 	svccc	0x00134905
     f98:	00193c19 	andseq	r3, r9, r9, lsl ip
     f9c:	11010000 	mrsne	r0, (UNDEF: 1)
     fa0:	130e2501 	movwne	r2, #58625	; 0xe501
     fa4:	1b0e030b 	blne	381bd8 <_Min_Stack_Size+0x3817d8>
     fa8:	1117550e 	tstne	r7, lr, lsl #10
     fac:	00171001 	andseq	r1, r7, r1
     fb0:	00240200 	eoreq	r0, r4, r0, lsl #4
     fb4:	0b3e0b0b 	bleq	f83be8 <_Min_Stack_Size+0xf837e8>
     fb8:	00000e03 	andeq	r0, r0, r3, lsl #28
     fbc:	03001603 	movweq	r1, #1539	; 0x603
     fc0:	3b0b3a0e 	blcc	2cf800 <_Min_Stack_Size+0x2cf400>
     fc4:	0013490b 	andseq	r4, r3, fp, lsl #18
     fc8:	00240400 	eoreq	r0, r4, r0, lsl #8
     fcc:	0b3e0b0b 	bleq	f83c00 <_Min_Stack_Size+0xf83800>
     fd0:	00000803 	andeq	r0, r0, r3, lsl #16
     fd4:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     fd8:	06000013 			; <UNDEFINED> instruction: 0x06000013
     fdc:	13490101 	movtne	r0, #37121	; 0x9101
     fe0:	00001301 	andeq	r1, r0, r1, lsl #6
     fe4:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
     fe8:	000b2f13 	andeq	r2, fp, r3, lsl pc
     fec:	01040800 	tsteq	r4, r0, lsl #16
     ff0:	0b3a0b0b 	bleq	e83c24 <_Min_Stack_Size+0xe83824>
     ff4:	1301053b 	movwne	r0, #5435	; 0x153b
     ff8:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
     ffc:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1000:	0a00000d 	beq	103c <_Min_Stack_Size+0xc3c>
    1004:	08030028 	stmdaeq	r3, {r3, r5}
    1008:	00000d1c 	andeq	r0, r0, ip, lsl sp
    100c:	0300160b 	movweq	r1, #1547	; 0x60b
    1010:	3b0b3a0e 	blcc	2cf850 <_Min_Stack_Size+0x2cf450>
    1014:	00134905 	andseq	r4, r3, r5, lsl #18
    1018:	01130c00 	tsteq	r3, r0, lsl #24
    101c:	0b3a0b0b 	bleq	e83c50 <_Min_Stack_Size+0xe83850>
    1020:	1301053b 	movwne	r0, #5435	; 0x153b
    1024:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    1028:	3a080300 	bcc	201c30 <_Min_Stack_Size+0x201830>
    102c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1030:	000b3813 	andeq	r3, fp, r3, lsl r8
    1034:	000d0e00 	andeq	r0, sp, r0, lsl #28
    1038:	0b3a0e03 	bleq	e8484c <_Min_Stack_Size+0xe8444c>
    103c:	1349053b 	movtne	r0, #38203	; 0x953b
    1040:	00000b38 	andeq	r0, r0, r8, lsr fp
    1044:	0b01130f 	bleq	45c88 <_Min_Stack_Size+0x45888>
    1048:	3b0b3a0b 	blcc	2cf87c <_Min_Stack_Size+0x2cf47c>
    104c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1050:	000d1000 	andeq	r1, sp, r0
    1054:	0b3a0e03 	bleq	e84868 <_Min_Stack_Size+0xe84468>
    1058:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    105c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1060:	3f012e11 	svccc	0x00012e11
    1064:	3a0e0319 	bcc	381cd0 <_Min_Stack_Size+0x3818d0>
    1068:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    106c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1070:	97184006 	ldrls	r4, [r8, -r6]
    1074:	13011942 	movwne	r1, #6466	; 0x1942
    1078:	05120000 	ldreq	r0, [r2, #-0]
    107c:	3a0e0300 	bcc	381c84 <_Min_Stack_Size+0x381884>
    1080:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1084:	00170213 	andseq	r0, r7, r3, lsl r2
    1088:	82891300 	addhi	r1, r9, #0, 6
    108c:	01110101 	tsteq	r1, r1, lsl #2
    1090:	13011331 	movwne	r1, #4913	; 0x1331
    1094:	8a140000 	bhi	50109c <_Min_Stack_Size+0x500c9c>
    1098:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    109c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    10a0:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    10a4:	11010182 	smlabbne	r1, r2, r1, r0
    10a8:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    10ac:	13011331 	movwne	r1, #4913	; 0x1331
    10b0:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    10b4:	11010182 	smlabbne	r1, r2, r1, r0
    10b8:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    10bc:	00001331 	andeq	r1, r0, r1, lsr r3
    10c0:	0b000f17 	bleq	4d24 <_Min_Stack_Size+0x4924>
    10c4:	0013490b 	andseq	r4, r3, fp, lsl #18
    10c8:	012e1800 	teqeq	lr, r0, lsl #16
    10cc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    10d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    10d4:	01111927 	tsteq	r1, r7, lsr #18
    10d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    10e0:	19000013 	stmdbne	r0, {r0, r1, r4}
    10e4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    10e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    10ec:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    10f0:	051a0000 	ldreq	r0, [sl, #-0]
    10f4:	3a0e0300 	bcc	381cfc <_Min_Stack_Size+0x3818fc>
    10f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10fc:	00170213 	andseq	r0, r7, r3, lsl r2
    1100:	00341b00 	eorseq	r1, r4, r0, lsl #22
    1104:	0b3a0e03 	bleq	e84918 <_Min_Stack_Size+0xe84518>
    1108:	1349053b 	movtne	r0, #38203	; 0x953b
    110c:	00001702 	andeq	r1, r0, r2, lsl #14
    1110:	0300341c 	movweq	r3, #1052	; 0x41c
    1114:	3b0b3a08 	blcc	2cf93c <_Min_Stack_Size+0x2cf53c>
    1118:	02134905 	andseq	r4, r3, #81920	; 0x14000
    111c:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
    1120:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1124:	0b3a0e03 	bleq	e84938 <_Min_Stack_Size+0xe84538>
    1128:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    112c:	01111349 	tsteq	r1, r9, asr #6
    1130:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1134:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1138:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    113c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1140:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1144:	00001349 	andeq	r1, r0, r9, asr #6
    1148:	0300341f 	movweq	r3, #1055	; 0x41f
    114c:	3b0b3a0e 	blcc	2cf98c <_Min_Stack_Size+0x2cf58c>
    1150:	3f134905 	svccc	0x00134905
    1154:	00193c19 	andseq	r3, r9, r9, lsl ip
    1158:	012e2000 	teqeq	lr, r0
    115c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1160:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1164:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1168:	00001301 	andeq	r1, r0, r1, lsl #6
    116c:	49000521 	stmdbmi	r0, {r0, r5, r8, sl}
    1170:	22000013 	andcs	r0, r0, #19
    1174:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1178:	0b3a0e03 	bleq	e8498c <_Min_Stack_Size+0xe8458c>
    117c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1180:	0000193c 	andeq	r1, r0, ip, lsr r9
    1184:	01110100 	tsteq	r1, r0, lsl #2
    1188:	0b130e25 	bleq	4c4a24 <_Min_Stack_Size+0x4c4624>
    118c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1190:	01111755 	tsteq	r1, r5, asr r7
    1194:	00001710 	andeq	r1, r0, r0, lsl r7
    1198:	0b002402 	bleq	a1a8 <_Min_Stack_Size+0x9da8>
    119c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    11a0:	0300000e 	movweq	r0, #14
    11a4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    11a8:	0b3b0b3a 	bleq	ec3e98 <_Min_Stack_Size+0xec3a98>
    11ac:	00001349 	andeq	r1, r0, r9, asr #6
    11b0:	0b002404 	bleq	a1c8 <_Min_Stack_Size+0x9dc8>
    11b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    11b8:	05000008 	streq	r0, [r0, #-8]
    11bc:	13490035 	movtne	r0, #36917	; 0x9035
    11c0:	04060000 	streq	r0, [r6], #-0
    11c4:	3a0b0b01 	bcc	2c3dd0 <_Min_Stack_Size+0x2c39d0>
    11c8:	01053b0b 	tsteq	r5, fp, lsl #22
    11cc:	07000013 	smladeq	r0, r3, r0, r0
    11d0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    11d4:	00000d1c 	andeq	r0, r0, ip, lsl sp
    11d8:	03002808 	movweq	r2, #2056	; 0x808
    11dc:	000d1c08 	andeq	r1, sp, r8, lsl #24
    11e0:	00160900 	andseq	r0, r6, r0, lsl #18
    11e4:	0b3a0e03 	bleq	e849f8 <_Min_Stack_Size+0xe845f8>
    11e8:	1349053b 	movtne	r0, #38203	; 0x953b
    11ec:	130a0000 	movwne	r0, #40960	; 0xa000
    11f0:	3a0b0b01 	bcc	2c3dfc <_Min_Stack_Size+0x2c39fc>
    11f4:	01053b0b 	tsteq	r5, fp, lsl #22
    11f8:	0b000013 	bleq	124c <_Min_Stack_Size+0xe4c>
    11fc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1200:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1204:	0b381349 	bleq	e05f30 <_Min_Stack_Size+0xe05b30>
    1208:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    120c:	3a0e0300 	bcc	381e14 <_Min_Stack_Size+0x381a14>
    1210:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1214:	000b3813 	andeq	r3, fp, r3, lsl r8
    1218:	01040d00 	tsteq	r4, r0, lsl #26
    121c:	0b3a0b0b 	bleq	e83e50 <_Min_Stack_Size+0xe83a50>
    1220:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1224:	130e0000 	movwne	r0, #57344	; 0xe000
    1228:	3a0b0b01 	bcc	2c3e34 <_Min_Stack_Size+0x2c3a34>
    122c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1230:	0f000013 	svceq	0x00000013
    1234:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1238:	0b3b0b3a 	bleq	ec3f28 <_Min_Stack_Size+0xec3b28>
    123c:	0b381349 	bleq	e05f68 <_Min_Stack_Size+0xe05b68>
    1240:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    1244:	03193f00 	tsteq	r9, #0, 30
    1248:	3b0b3a0e 	blcc	2cfa88 <_Min_Stack_Size+0x2cf688>
    124c:	1119270b 	tstne	r9, fp, lsl #14
    1250:	40061201 	andmi	r1, r6, r1, lsl #4
    1254:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1258:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    125c:	03193f01 	tsteq	r9, #1, 30
    1260:	3b0b3a0e 	blcc	2cfaa0 <_Min_Stack_Size+0x2cf6a0>
    1264:	1119270b 	tstne	r9, fp, lsl #14
    1268:	40061201 	andmi	r1, r6, r1, lsl #4
    126c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1270:	00001301 	andeq	r1, r0, r1, lsl #6
    1274:	03000512 	movweq	r0, #1298	; 0x512
    1278:	3b0b3a0e 	blcc	2cfab8 <_Min_Stack_Size+0x2cf6b8>
    127c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1280:	13000017 	movwne	r0, #23
    1284:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1288:	0b3b0b3a 	bleq	ec3f78 <_Min_Stack_Size+0xec3b78>
    128c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1290:	0f140000 	svceq	0x00140000
    1294:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1298:	15000013 	strne	r0, [r0, #-19]
    129c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    12a0:	0b3b0b3a 	bleq	ec3f90 <_Min_Stack_Size+0xec3b90>
    12a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    12a8:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    12ac:	03193f01 	tsteq	r9, #1, 30
    12b0:	3b0b3a0e 	blcc	2cfaf0 <_Min_Stack_Size+0x2cf6f0>
    12b4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    12b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    12bc:	97184006 	ldrls	r4, [r8, -r6]
    12c0:	13011942 	movwne	r1, #6466	; 0x1942
    12c4:	34170000 	ldrcc	r0, [r7], #-0
    12c8:	3a0e0300 	bcc	381ed0 <_Min_Stack_Size+0x381ad0>
    12cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12d0:	00170213 	andseq	r0, r7, r3, lsl r2
    12d4:	012e1800 	teqeq	lr, r0, lsl #16
    12d8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    12dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12e0:	13491927 	movtne	r1, #39207	; 0x9927
    12e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    12ec:	00130119 	andseq	r0, r3, r9, lsl r1
    12f0:	00051900 	andeq	r1, r5, r0, lsl #18
    12f4:	0b3a0e03 	bleq	e84b08 <_Min_Stack_Size+0xe84708>
    12f8:	1349053b 	movtne	r0, #38203	; 0x953b
    12fc:	00001702 	andeq	r1, r0, r2, lsl #14
    1300:	0300341a 	movweq	r3, #1050	; 0x41a
    1304:	3b0b3a0e 	blcc	2cfb44 <_Min_Stack_Size+0x2cf744>
    1308:	02134905 	andseq	r4, r3, #81920	; 0x14000
    130c:	1b000017 	blne	1370 <_Min_Stack_Size+0xf70>
    1310:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1314:	0b3a0e03 	bleq	e84b28 <_Min_Stack_Size+0xe84728>
    1318:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    131c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1320:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1324:	00130119 	andseq	r0, r3, r9, lsl r1
    1328:	00051c00 	andeq	r1, r5, r0, lsl #24
    132c:	0b3a0e03 	bleq	e84b40 <_Min_Stack_Size+0xe84740>
    1330:	1349053b 	movtne	r0, #38203	; 0x953b
    1334:	00001802 	andeq	r1, r0, r2, lsl #16
    1338:	0300341d 	movweq	r3, #1053	; 0x41d
    133c:	3b0b3a0e 	blcc	2cfb7c <_Min_Stack_Size+0x2cf77c>
    1340:	3f134905 	svccc	0x00134905
    1344:	00193c19 	andseq	r3, r9, r9, lsl ip
    1348:	11010000 	mrsne	r0, (UNDEF: 1)
    134c:	130e2501 	movwne	r2, #58625	; 0xe501
    1350:	1b0e030b 	blne	381f84 <_Min_Stack_Size+0x381b84>
    1354:	1117550e 	tstne	r7, lr, lsl #10
    1358:	00171001 	andseq	r1, r7, r1
    135c:	00240200 	eoreq	r0, r4, r0, lsl #4
    1360:	0b3e0b0b 	bleq	f83f94 <_Min_Stack_Size+0xf83b94>
    1364:	00000e03 	andeq	r0, r0, r3, lsl #28
    1368:	03001603 	movweq	r1, #1539	; 0x603
    136c:	3b0b3a0e 	blcc	2cfbac <_Min_Stack_Size+0x2cf7ac>
    1370:	0013490b 	andseq	r4, r3, fp, lsl #18
    1374:	00240400 	eoreq	r0, r4, r0, lsl #8
    1378:	0b3e0b0b 	bleq	f83fac <_Min_Stack_Size+0xf83bac>
    137c:	00000803 	andeq	r0, r0, r3, lsl #16
    1380:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    1384:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1388:	0b0b0104 	bleq	2c17a0 <_Min_Stack_Size+0x2c13a0>
    138c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1390:	00001301 	andeq	r1, r0, r1, lsl #6
    1394:	03002807 	movweq	r2, #2055	; 0x807
    1398:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    139c:	00280800 	eoreq	r0, r8, r0, lsl #16
    13a0:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    13a4:	16090000 	strne	r0, [r9], -r0
    13a8:	3a0e0300 	bcc	381fb0 <_Min_Stack_Size+0x381bb0>
    13ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    13b0:	0a000013 	beq	1404 <_Min_Stack_Size+0x1004>
    13b4:	050b0113 	streq	r0, [fp, #-275]	; 0x113
    13b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    13bc:	00001301 	andeq	r1, r0, r1, lsl #6
    13c0:	03000d0b 	movweq	r0, #3339	; 0xd0b
    13c4:	3b0b3a08 	blcc	2cfbec <_Min_Stack_Size+0x2cf7ec>
    13c8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    13cc:	0c00000b 	stceq	0, cr0, [r0], {11}
    13d0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    13d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    13d8:	0b381349 	bleq	e06104 <_Min_Stack_Size+0xe05d04>
    13dc:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    13e0:	3a0e0300 	bcc	381fe8 <_Min_Stack_Size+0x381be8>
    13e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    13e8:	00053813 	andeq	r3, r5, r3, lsl r8
    13ec:	01010e00 	tsteq	r1, r0, lsl #28
    13f0:	13011349 	movwne	r1, #4937	; 0x1349
    13f4:	210f0000 	mrscs	r0, CPSR
    13f8:	2f134900 	svccs	0x00134900
    13fc:	1000000b 	andne	r0, r0, fp
    1400:	0b0b0113 	bleq	2c1854 <_Min_Stack_Size+0x2c1454>
    1404:	0b3b0b3a 	bleq	ec40f4 <_Min_Stack_Size+0xec3cf4>
    1408:	00001301 	andeq	r1, r0, r1, lsl #6
    140c:	03000d11 	movweq	r0, #3345	; 0xd11
    1410:	3b0b3a0e 	blcc	2cfc50 <_Min_Stack_Size+0x2cf850>
    1414:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1418:	1200000b 	andne	r0, r0, #11
    141c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1420:	0b3a0e03 	bleq	e84c34 <_Min_Stack_Size+0xe84834>
    1424:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1428:	06120111 			; <UNDEFINED> instruction: 0x06120111
    142c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1430:	00130119 	andseq	r0, r3, r9, lsl r1
    1434:	82891300 	addhi	r1, r9, #0, 6
    1438:	01110101 	tsteq	r1, r1, lsl #2
    143c:	13011331 	movwne	r1, #4913	; 0x1331
    1440:	8a140000 	bhi	501448 <_Min_Stack_Size+0x501048>
    1444:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    1448:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    144c:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    1450:	11010182 	smlabbne	r1, r2, r1, r0
    1454:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    1458:	00001331 	andeq	r1, r0, r1, lsr r3
    145c:	03000516 	movweq	r0, #1302	; 0x516
    1460:	3b0b3a0e 	blcc	2cfca0 <_Min_Stack_Size+0x2cf8a0>
    1464:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1468:	17000017 	smladne	r0, r7, r0, r0
    146c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1470:	0b3b0b3a 	bleq	ec4160 <_Min_Stack_Size+0xec3d60>
    1474:	17021349 	strne	r1, [r2, -r9, asr #6]
    1478:	0f180000 	svceq	0x00180000
    147c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1480:	19000013 	stmdbne	r0, {r0, r1, r4}
    1484:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1488:	0b3b0b3a 	bleq	ec4178 <_Min_Stack_Size+0xec3d78>
    148c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1490:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    1494:	03193f00 	tsteq	r9, #0, 30
    1498:	3b0b3a0e 	blcc	2cfcd8 <_Min_Stack_Size+0x2cf8d8>
    149c:	1119270b 	tstne	r9, fp, lsl #14
    14a0:	40061201 	andmi	r1, r6, r1, lsl #4
    14a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    14a8:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    14ac:	03193f01 	tsteq	r9, #1, 30
    14b0:	3b0b3a0e 	blcc	2cfcf0 <_Min_Stack_Size+0x2cf8f0>
    14b4:	11192705 	tstne	r9, r5, lsl #14
    14b8:	40061201 	andmi	r1, r6, r1, lsl #4
    14bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    14c0:	00001301 	andeq	r1, r0, r1, lsl #6
    14c4:	0300051c 	movweq	r0, #1308	; 0x51c
    14c8:	3b0b3a0e 	blcc	2cfd08 <_Min_Stack_Size+0x2cf908>
    14cc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    14d0:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
    14d4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    14d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    14dc:	17021349 	strne	r1, [r2, -r9, asr #6]
    14e0:	051e0000 	ldreq	r0, [lr, #-0]
    14e4:	3a0e0300 	bcc	3820ec <_Min_Stack_Size+0x381cec>
    14e8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14ec:	00170213 	andseq	r0, r7, r3, lsl r2
    14f0:	012e1f00 	teqeq	lr, r0, lsl #30
    14f4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    14f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    14fc:	13491927 	movtne	r1, #39207	; 0x9927
    1500:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1504:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1508:	00130119 	andseq	r0, r3, r9, lsl r1
    150c:	00342000 	eorseq	r2, r4, r0
    1510:	0b3a0e03 	bleq	e84d24 <_Min_Stack_Size+0xe84924>
    1514:	1349053b 	movtne	r0, #38203	; 0x953b
    1518:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    151c:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    1520:	03193f01 	tsteq	r9, #1, 30
    1524:	3b0b3a0e 	blcc	2cfd64 <_Min_Stack_Size+0x2cf964>
    1528:	3c192705 	ldccc	7, cr2, [r9], {5}
    152c:	22000019 	andcs	r0, r0, #25
    1530:	13490005 	movtne	r0, #36869	; 0x9005
    1534:	01000000 	mrseq	r0, (UNDEF: 0)
    1538:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    153c:	0e030b13 	vmoveq.32	d3[0], r0
    1540:	17550e1b 	smmlane	r5, fp, lr, r0
    1544:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1548:	24020000 	strcs	r0, [r2], #-0
    154c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1550:	000e030b 	andeq	r0, lr, fp, lsl #6
    1554:	00160300 	andseq	r0, r6, r0, lsl #6
    1558:	0b3a0e03 	bleq	e84d6c <_Min_Stack_Size+0xe8496c>
    155c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1560:	24040000 	strcs	r0, [r4], #-0
    1564:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1568:	0008030b 	andeq	r0, r8, fp, lsl #6
    156c:	00350500 	eorseq	r0, r5, r0, lsl #10
    1570:	00001349 	andeq	r1, r0, r9, asr #6
    1574:	49010106 	stmdbmi	r1, {r1, r2, r8}
    1578:	00130113 	andseq	r0, r3, r3, lsl r1
    157c:	00210700 	eoreq	r0, r1, r0, lsl #14
    1580:	0b2f1349 	bleq	bc62ac <_Min_Stack_Size+0xbc5eac>
    1584:	04080000 	streq	r0, [r8], #-0
    1588:	3a0b0b01 	bcc	2c4194 <_Min_Stack_Size+0x2c3d94>
    158c:	01053b0b 	tsteq	r5, fp, lsl #22
    1590:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1594:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1598:	00000d1c 	andeq	r0, r0, ip, lsl sp
    159c:	0300280a 	movweq	r2, #2058	; 0x80a
    15a0:	000d1c08 	andeq	r1, sp, r8, lsl #24
    15a4:	00160b00 	andseq	r0, r6, r0, lsl #22
    15a8:	0b3a0e03 	bleq	e84dbc <_Min_Stack_Size+0xe849bc>
    15ac:	1349053b 	movtne	r0, #38203	; 0x953b
    15b0:	130c0000 	movwne	r0, #49152	; 0xc000
    15b4:	3a0b0b01 	bcc	2c41c0 <_Min_Stack_Size+0x2c3dc0>
    15b8:	01053b0b 	tsteq	r5, fp, lsl #22
    15bc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    15c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    15c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    15c8:	0b381349 	bleq	e062f4 <_Min_Stack_Size+0xe05ef4>
    15cc:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    15d0:	3a080300 	bcc	2021d8 <_Min_Stack_Size+0x201dd8>
    15d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    15d8:	000b3813 	andeq	r3, fp, r3, lsl r8
    15dc:	01130f00 	tsteq	r3, r0, lsl #30
    15e0:	0b3a0b0b 	bleq	e84214 <_Min_Stack_Size+0xe83e14>
    15e4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    15e8:	0d100000 	ldceq	0, cr0, [r0, #-0]
    15ec:	3a0e0300 	bcc	3821f4 <_Min_Stack_Size+0x381df4>
    15f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15f4:	000b3813 	andeq	r3, fp, r3, lsl r8
    15f8:	012e1100 	teqeq	lr, r0, lsl #2
    15fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1600:	0b3b0b3a 	bleq	ec42f0 <_Min_Stack_Size+0xec3ef0>
    1604:	01111927 	tsteq	r1, r7, lsr #18
    1608:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    160c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1610:	12000013 	andne	r0, r0, #19
    1614:	01018289 	smlabbeq	r1, r9, r2, r8
    1618:	13310111 	teqne	r1, #1073741828	; 0x40000004
    161c:	00001301 	andeq	r1, r0, r1, lsl #6
    1620:	01828a13 	orreq	r8, r2, r3, lsl sl
    1624:	91180200 	tstls	r8, r0, lsl #4
    1628:	00001842 	andeq	r1, r0, r2, asr #16
    162c:	01828914 	orreq	r8, r2, r4, lsl r9
    1630:	95011101 	strls	r1, [r1, #-257]	; 0x101
    1634:	13311942 	teqne	r1, #1081344	; 0x108000
    1638:	05150000 	ldreq	r0, [r5, #-0]
    163c:	3a0e0300 	bcc	382244 <_Min_Stack_Size+0x381e44>
    1640:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1644:	00170213 	andseq	r0, r7, r3, lsl r2
    1648:	00341600 	eorseq	r1, r4, r0, lsl #12
    164c:	0b3a0e03 	bleq	e84e60 <_Min_Stack_Size+0xe84a60>
    1650:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1654:	00001702 	andeq	r1, r0, r2, lsl #14
    1658:	0b000f17 	bleq	52bc <_Min_Stack_Size+0x4ebc>
    165c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1660:	00051800 	andeq	r1, r5, r0, lsl #16
    1664:	0b3a0e03 	bleq	e84e78 <_Min_Stack_Size+0xe84a78>
    1668:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    166c:	00001802 	andeq	r1, r0, r2, lsl #16
    1670:	3f012e19 	svccc	0x00012e19
    1674:	3a0e0319 	bcc	3822e0 <_Min_Stack_Size+0x381ee0>
    1678:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    167c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1680:	97184006 	ldrls	r4, [r8, -r6]
    1684:	13011942 	movwne	r1, #6466	; 0x1942
    1688:	051a0000 	ldreq	r0, [sl, #-0]
    168c:	3a0e0300 	bcc	382294 <_Min_Stack_Size+0x381e94>
    1690:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1694:	00180213 	andseq	r0, r8, r3, lsl r2
    1698:	012e1b00 	teqeq	lr, r0, lsl #22
    169c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    16a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    16a4:	13491927 	movtne	r1, #39207	; 0x9927
    16a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    16ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    16b0:	00130119 	andseq	r0, r3, r9, lsl r1
    16b4:	00341c00 	eorseq	r1, r4, r0, lsl #24
    16b8:	0b3a0e03 	bleq	e84ecc <_Min_Stack_Size+0xe84acc>
    16bc:	1349053b 	movtne	r0, #38203	; 0x953b
    16c0:	00001702 	andeq	r1, r0, r2, lsl #14
    16c4:	0300051d 	movweq	r0, #1309	; 0x51d
    16c8:	3b0b3a0e 	blcc	2cff08 <_Min_Stack_Size+0x2cfb08>
    16cc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    16d0:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    16d4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    16d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    16dc:	17021349 	strne	r1, [r2, -r9, asr #6]
    16e0:	341f0000 	ldrcc	r0, [pc], #-0	; 16e8 <_Min_Stack_Size+0x12e8>
    16e4:	3a0e0300 	bcc	3822ec <_Min_Stack_Size+0x381eec>
    16e8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16ec:	20000013 	andcs	r0, r0, r3, lsl r0
    16f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    16f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    16f8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    16fc:	0000193c 	andeq	r1, r0, ip, lsr r9
    1700:	3f012e21 	svccc	0x00012e21
    1704:	3a0e0319 	bcc	382370 <_Min_Stack_Size+0x381f70>
    1708:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    170c:	00193c19 	andseq	r3, r9, r9, lsl ip
    1710:	00052200 	andeq	r2, r5, r0, lsl #4
    1714:	00001349 	andeq	r1, r0, r9, asr #6
    1718:	01110100 	tsteq	r1, r0, lsl #2
    171c:	0b130e25 	bleq	4c4fb8 <_Min_Stack_Size+0x4c4bb8>
    1720:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1724:	01111755 	tsteq	r1, r5, asr r7
    1728:	00001710 	andeq	r1, r0, r0, lsl r7
    172c:	0b002402 	bleq	a73c <_Min_Stack_Size+0xa33c>
    1730:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1734:	0300000e 	movweq	r0, #14
    1738:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    173c:	0b3b0b3a 	bleq	ec442c <_Min_Stack_Size+0xec402c>
    1740:	00001349 	andeq	r1, r0, r9, asr #6
    1744:	0b002404 	bleq	a75c <_Min_Stack_Size+0xa35c>
    1748:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    174c:	05000008 	streq	r0, [r0, #-8]
    1750:	13490101 	movtne	r0, #37121	; 0x9101
    1754:	00001301 	andeq	r1, r0, r1, lsl #6
    1758:	49002106 	stmdbmi	r0, {r1, r2, r8, sp}
    175c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1760:	00350700 	eorseq	r0, r5, r0, lsl #14
    1764:	00001349 	andeq	r1, r0, r9, asr #6
    1768:	0b010408 	bleq	42790 <_Min_Stack_Size+0x42390>
    176c:	3b0b3a0b 	blcc	2cffa0 <_Min_Stack_Size+0x2cfba0>
    1770:	00130105 	andseq	r0, r3, r5, lsl #2
    1774:	00280900 	eoreq	r0, r8, r0, lsl #18
    1778:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    177c:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    1780:	1c080300 	stcne	3, cr0, [r8], {-0}
    1784:	0b00000d 	bleq	17c0 <_Min_Stack_Size+0x13c0>
    1788:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    178c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1790:	00001349 	andeq	r1, r0, r9, asr #6
    1794:	0b01130c 	bleq	463cc <_Min_Stack_Size+0x45fcc>
    1798:	3b0b3a0b 	blcc	2cffcc <_Min_Stack_Size+0x2cfbcc>
    179c:	00130105 	andseq	r0, r3, r5, lsl #2
    17a0:	000d0d00 	andeq	r0, sp, r0, lsl #26
    17a4:	0b3a0e03 	bleq	e84fb8 <_Min_Stack_Size+0xe84bb8>
    17a8:	1349053b 	movtne	r0, #38203	; 0x953b
    17ac:	00000b38 	andeq	r0, r0, r8, lsr fp
    17b0:	03000d0e 	movweq	r0, #3342	; 0xd0e
    17b4:	3b0b3a08 	blcc	2cffdc <_Min_Stack_Size+0x2cfbdc>
    17b8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    17bc:	0f00000b 	svceq	0x0000000b
    17c0:	0b0b0113 	bleq	2c1c14 <_Min_Stack_Size+0x2c1814>
    17c4:	0b3b0b3a 	bleq	ec44b4 <_Min_Stack_Size+0xec40b4>
    17c8:	00001301 	andeq	r1, r0, r1, lsl #6
    17cc:	03000d10 	movweq	r0, #3344	; 0xd10
    17d0:	3b0b3a0e 	blcc	2d0010 <_Min_Stack_Size+0x2cfc10>
    17d4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    17d8:	1100000b 	tstne	r0, fp
    17dc:	0b0b000f 	bleq	2c1820 <_Min_Stack_Size+0x2c1420>
    17e0:	00001349 	andeq	r1, r0, r9, asr #6
    17e4:	3f012e12 	svccc	0x00012e12
    17e8:	3a0e0319 	bcc	382454 <_Min_Stack_Size+0x382054>
    17ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    17f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    17f4:	97184006 	ldrls	r4, [r8, -r6]
    17f8:	13011942 	movwne	r1, #6466	; 0x1942
    17fc:	05130000 	ldreq	r0, [r3, #-0]
    1800:	3a0e0300 	bcc	382408 <_Min_Stack_Size+0x382008>
    1804:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1808:	00180213 	andseq	r0, r8, r3, lsl r2
    180c:	00051400 	andeq	r1, r5, r0, lsl #8
    1810:	0b3a0e03 	bleq	e85024 <_Min_Stack_Size+0xe84c24>
    1814:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1818:	00001702 	andeq	r1, r0, r2, lsl #14
    181c:	03003415 	movweq	r3, #1045	; 0x415
    1820:	3b0b3a0e 	blcc	2d0060 <_Min_Stack_Size+0x2cfc60>
    1824:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1828:	16000017 			; <UNDEFINED> instruction: 0x16000017
    182c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1830:	0b3a0e03 	bleq	e85044 <_Min_Stack_Size+0xe84c44>
    1834:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1838:	06120111 			; <UNDEFINED> instruction: 0x06120111
    183c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1840:	00130119 	andseq	r0, r3, r9, lsl r1
    1844:	00051700 	andeq	r1, r5, r0, lsl #14
    1848:	0b3a0e03 	bleq	e8505c <_Min_Stack_Size+0xe84c5c>
    184c:	1349053b 	movtne	r0, #38203	; 0x953b
    1850:	00001802 	andeq	r1, r0, r2, lsl #16
    1854:	03000518 	movweq	r0, #1304	; 0x518
    1858:	3b0b3a0e 	blcc	2d0098 <_Min_Stack_Size+0x2cfc98>
    185c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1860:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    1864:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1868:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    186c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1870:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    1874:	03193f01 	tsteq	r9, #1, 30
    1878:	3b0b3a0e 	blcc	2d00b8 <_Min_Stack_Size+0x2cfcb8>
    187c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1880:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1884:	97184006 	ldrls	r4, [r8, -r6]
    1888:	13011942 	movwne	r1, #6466	; 0x1942
    188c:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    1890:	03193f00 	tsteq	r9, #0, 30
    1894:	3b0b3a0e 	blcc	2d00d4 <_Min_Stack_Size+0x2cfcd4>
    1898:	11192705 	tstne	r9, r5, lsl #14
    189c:	40061201 	andmi	r1, r6, r1, lsl #4
    18a0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    18a4:	341c0000 	ldrcc	r0, [ip], #-0
    18a8:	3a0e0300 	bcc	3824b0 <_Min_Stack_Size+0x3820b0>
    18ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18b0:	3c193f13 	ldccc	15, cr3, [r9], {19}
    18b4:	00000019 	andeq	r0, r0, r9, lsl r0
    18b8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    18bc:	030b130e 	movweq	r1, #45838	; 0xb30e
    18c0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    18c4:	10011117 	andne	r1, r1, r7, lsl r1
    18c8:	02000017 	andeq	r0, r0, #23
    18cc:	0b0b0024 	bleq	2c1964 <_Min_Stack_Size+0x2c1564>
    18d0:	0e030b3e 	vmoveq.16	d3[0], r0
    18d4:	16030000 	strne	r0, [r3], -r0
    18d8:	3a0e0300 	bcc	3824e0 <_Min_Stack_Size+0x3820e0>
    18dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18e0:	04000013 	streq	r0, [r0], #-19
    18e4:	0b0b0024 	bleq	2c197c <_Min_Stack_Size+0x2c157c>
    18e8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    18ec:	35050000 	strcc	r0, [r5, #-0]
    18f0:	00134900 	andseq	r4, r3, r0, lsl #18
    18f4:	01040600 	tsteq	r4, r0, lsl #12
    18f8:	0b3a0b0b 	bleq	e8452c <_Min_Stack_Size+0xe8412c>
    18fc:	1301053b 	movwne	r0, #5435	; 0x153b
    1900:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    1904:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1908:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    190c:	08030028 	stmdaeq	r3, {r3, r5}
    1910:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1914:	03001609 	movweq	r1, #1545	; 0x609
    1918:	3b0b3a0e 	blcc	2d0158 <_Min_Stack_Size+0x2cfd58>
    191c:	00134905 	andseq	r4, r3, r5, lsl #18
    1920:	01130a00 	tsteq	r3, r0, lsl #20
    1924:	0b3a0b0b 	bleq	e84558 <_Min_Stack_Size+0xe84158>
    1928:	1301053b 	movwne	r0, #5435	; 0x153b
    192c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1930:	3a080300 	bcc	202538 <_Min_Stack_Size+0x202138>
    1934:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1938:	000b3813 	andeq	r3, fp, r3, lsl r8
    193c:	012e0c00 	teqeq	lr, r0, lsl #24
    1940:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1944:	0b3b0b3a 	bleq	ec4634 <_Min_Stack_Size+0xec4234>
    1948:	01111927 	tsteq	r1, r7, lsr #18
    194c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1950:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1954:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1958:	01018289 	smlabbeq	r1, r9, r2, r8
    195c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1960:	00001301 	andeq	r1, r0, r1, lsl #6
    1964:	01828a0e 	orreq	r8, r2, lr, lsl #20
    1968:	91180200 	tstls	r8, r0, lsl #4
    196c:	00001842 	andeq	r1, r0, r2, asr #16
    1970:	0182890f 	orreq	r8, r2, pc, lsl #18
    1974:	95011101 	strls	r1, [r1, #-257]	; 0x101
    1978:	13311942 	teqne	r1, #1081344	; 0x108000
    197c:	05100000 	ldreq	r0, [r0, #-0]
    1980:	3a0e0300 	bcc	382588 <_Min_Stack_Size+0x382188>
    1984:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1988:	00180213 	andseq	r0, r8, r3, lsl r2
    198c:	002e1100 	eoreq	r1, lr, r0, lsl #2
    1990:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1994:	0b3b0b3a 	bleq	ec4684 <_Min_Stack_Size+0xec4284>
    1998:	13491927 	movtne	r1, #39207	; 0x9927
    199c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    19a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    19a4:	12000019 	andne	r0, r0, #25
    19a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    19ac:	0b3a0e03 	bleq	e851c0 <_Min_Stack_Size+0xe84dc0>
    19b0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    19b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    19b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    19bc:	00130119 	andseq	r0, r3, r9, lsl r1
    19c0:	00051300 	andeq	r1, r5, r0, lsl #6
    19c4:	0b3a0e03 	bleq	e851d8 <_Min_Stack_Size+0xe84dd8>
    19c8:	1349053b 	movtne	r0, #38203	; 0x953b
    19cc:	00001802 	andeq	r1, r0, r2, lsl #16
    19d0:	3f012e14 	svccc	0x00012e14
    19d4:	3a0e0319 	bcc	382640 <_Min_Stack_Size+0x382240>
    19d8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    19dc:	11134919 	tstne	r3, r9, lsl r9
    19e0:	40061201 	andmi	r1, r6, r1, lsl #4
    19e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    19e8:	00001301 	andeq	r1, r0, r1, lsl #6
    19ec:	03000515 	movweq	r0, #1301	; 0x515
    19f0:	3b0b3a0e 	blcc	2d0230 <_Min_Stack_Size+0x2cfe30>
    19f4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    19f8:	16000017 			; <UNDEFINED> instruction: 0x16000017
    19fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1a00:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1a04:	17021349 	strne	r1, [r2, -r9, asr #6]
    1a08:	34170000 	ldrcc	r0, [r7], #-0
    1a0c:	3a0e0300 	bcc	382614 <_Min_Stack_Size+0x382214>
    1a10:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a14:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1a18:	18000019 	stmdane	r0, {r0, r3, r4}
    1a1c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1a20:	0b3a0e03 	bleq	e85234 <_Min_Stack_Size+0xe84e34>
    1a24:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1a28:	0000193c 	andeq	r1, r0, ip, lsr r9
    1a2c:	49000519 	stmdbmi	r0, {r0, r3, r4, r8, sl}
    1a30:	00000013 	andeq	r0, r0, r3, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	080001c0 	stmdaeq	r0, {r6, r7, r8}
  14:	00000044 	andeq	r0, r0, r4, asr #32
  18:	08000204 	stmdaeq	r0, {r2, r9}
  1c:	00000002 	andeq	r0, r0, r2
	...
  28:	00000024 	andeq	r0, r0, r4, lsr #32
  2c:	00760002 	rsbseq	r0, r6, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	08000208 	stmdaeq	r0, {r3, r9}
  3c:	00000122 	andeq	r0, r0, r2, lsr #2
  40:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
  44:	00000092 	muleq	r0, r2, r0
	...
  50:	0000003c 	andeq	r0, r0, ip, lsr r0
  54:	06540002 	ldrbeq	r0, [r4], -r2
  58:	00040000 	andeq	r0, r4, r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	080003c0 	stmdaeq	r0, {r6, r7, r8, r9}
  64:	00000016 	andeq	r0, r0, r6, lsl r0
  68:	080003d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9}
  6c:	00000056 	andeq	r0, r0, r6, asr r0
  70:	08000430 	stmdaeq	r0, {r4, r5, sl}
  74:	00000044 	andeq	r0, r0, r4, asr #32
  78:	08000474 	stmdaeq	r0, {r2, r4, r5, r6, sl}
  7c:	0000002a 	andeq	r0, r0, sl, lsr #32
  80:	080004a0 	stmdaeq	r0, {r5, r7, sl}
  84:	0000000c 	andeq	r0, r0, ip
	...
  90:	0000003c 	andeq	r0, r0, ip, lsr r0
  94:	0e7d0002 	cdpeq	0, 7, cr0, cr13, cr2, {0}
  98:	00040000 	andeq	r0, r4, r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	080004ac 	stmdaeq	r0, {r2, r3, r5, r7, sl}
  a4:	00000014 	andeq	r0, r0, r4, lsl r0
  a8:	080004c0 	stmdaeq	r0, {r6, r7, sl}
  ac:	00000080 	andeq	r0, r0, r0, lsl #1
  b0:	08000540 	stmdaeq	r0, {r6, r8, sl}
  b4:	00000016 	andeq	r0, r0, r6, lsl r0
  b8:	08000558 	stmdaeq	r0, {r3, r4, r6, r8, sl}
  bc:	0000001a 	andeq	r0, r0, sl, lsl r0
  c0:	08000574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl}
  c4:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
  d0:	00000084 	andeq	r0, r0, r4, lsl #1
  d4:	13c40002 	bicne	r0, r4, #2
  d8:	00040000 	andeq	r0, r4, r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
  e4:	0000016e 	andeq	r0, r0, lr, ror #2
  e8:	08000700 	stmdaeq	r0, {r8, r9, sl}
  ec:	000000c0 	andeq	r0, r0, r0, asr #1
  f0:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
  f4:	00000012 	andeq	r0, r0, r2, lsl r0
  f8:	080007d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl}
  fc:	00000024 	andeq	r0, r0, r4, lsr #32
 100:	080007f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
 104:	0000000c 	andeq	r0, r0, ip
 108:	08000804 	stmdaeq	r0, {r2, fp}
 10c:	00000006 	andeq	r0, r0, r6
 110:	0800080c 	stmdaeq	r0, {r2, r3, fp}
 114:	0000000c 	andeq	r0, r0, ip
 118:	08000818 	stmdaeq	r0, {r3, r4, fp}
 11c:	00000006 	andeq	r0, r0, r6
 120:	08000820 	stmdaeq	r0, {r5, fp}
 124:	00000004 	andeq	r0, r0, r4
 128:	08000824 	stmdaeq	r0, {r2, r5, fp}
 12c:	00000004 	andeq	r0, r0, r4
 130:	08000828 	stmdaeq	r0, {r3, r5, fp}
 134:	0000000a 	andeq	r0, r0, sl
 138:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 13c:	00000004 	andeq	r0, r0, r4
 140:	08000838 	stmdaeq	r0, {r3, r4, r5, fp}
 144:	00000008 	andeq	r0, r0, r8
 148:	08000840 	stmdaeq	r0, {r6, fp}
 14c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 158:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 15c:	1c090002 	stcne	0, cr0, [r9], {2}
 160:	00040000 	andeq	r0, r4, r0
 164:	00000000 	andeq	r0, r0, r0
 168:	08000868 	stmdaeq	r0, {r3, r5, r6, fp}
 16c:	00000054 	andeq	r0, r0, r4, asr r0
 170:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
 174:	00000010 	andeq	r0, r0, r0, lsl r0
 178:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
 17c:	0000003e 	andeq	r0, r0, lr, lsr r0
 180:	0800090c 	stmdaeq	r0, {r2, r3, r8, fp}
 184:	00000016 	andeq	r0, r0, r6, lsl r0
 188:	08000924 	stmdaeq	r0, {r2, r5, r8, fp}
 18c:	0000000a 	andeq	r0, r0, sl
 190:	08000930 	stmdaeq	r0, {r4, r5, r8, fp}
 194:	00000022 	andeq	r0, r0, r2, lsr #32
 198:	08000954 	stmdaeq	r0, {r2, r4, r6, r8, fp}
 19c:	0000000c 	andeq	r0, r0, ip
 1a0:	08000960 	stmdaeq	r0, {r5, r6, r8, fp}
 1a4:	00000026 	andeq	r0, r0, r6, lsr #32
 1a8:	08000988 	stmdaeq	r0, {r3, r7, r8, fp}
 1ac:	0000000a 	andeq	r0, r0, sl
 1b0:	08000994 	stmdaeq	r0, {r2, r4, r7, r8, fp}
 1b4:	00000018 	andeq	r0, r0, r8, lsl r0
 1b8:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
 1bc:	0000000a 	andeq	r0, r0, sl
 1c0:	080009b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp}
 1c4:	00000018 	andeq	r0, r0, r8, lsl r0
 1c8:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 1cc:	0000000a 	andeq	r0, r0, sl
 1d0:	080009dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp}
 1d4:	0000000a 	andeq	r0, r0, sl
 1d8:	080009e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp}
 1dc:	00000016 	andeq	r0, r0, r6, lsl r0
 1e0:	08000a00 	stmdaeq	r0, {r9, fp}
 1e4:	00000016 	andeq	r0, r0, r6, lsl r0
 1e8:	08000a18 	stmdaeq	r0, {r3, r4, r9, fp}
 1ec:	00000014 	andeq	r0, r0, r4, lsl r0
 1f0:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 1f4:	00000010 	andeq	r0, r0, r0, lsl r0
 1f8:	08000a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp}
 1fc:	00000014 	andeq	r0, r0, r4, lsl r0
 200:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
 204:	00000014 	andeq	r0, r0, r4, lsl r0
 208:	08000a64 	stmdaeq	r0, {r2, r5, r6, r9, fp}
 20c:	00000016 	andeq	r0, r0, r6, lsl r0
 210:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
 214:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 218:	08000b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp}
 21c:	00000038 	andeq	r0, r0, r8, lsr r0
 220:	08000b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp}
 224:	0000000c 	andeq	r0, r0, ip
 228:	08000b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp}
 22c:	0000000c 	andeq	r0, r0, ip
 230:	08000b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp}
 234:	0000000c 	andeq	r0, r0, ip
 238:	08000b88 	stmdaeq	r0, {r3, r7, r8, r9, fp}
 23c:	0000001a 	andeq	r0, r0, sl, lsl r0
 240:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	08000bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp}
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	08000bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp}
 254:	00000018 	andeq	r0, r0, r8, lsl r0
 258:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}
 25c:	00000018 	andeq	r0, r0, r8, lsl r0
 260:	08000c08 	stmdaeq	r0, {r3, sl, fp}
 264:	0000000c 	andeq	r0, r0, ip
 268:	08000c14 	stmdaeq	r0, {r2, r4, sl, fp}
 26c:	0000001a 	andeq	r0, r0, sl, lsl r0
 270:	08000c30 	stmdaeq	r0, {r4, r5, sl, fp}
 274:	0000001a 	andeq	r0, r0, sl, lsl r0
 278:	08000c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp}
 27c:	0000001a 	andeq	r0, r0, sl, lsl r0
 280:	08000c68 	stmdaeq	r0, {r3, r5, r6, sl, fp}
 284:	0000001a 	andeq	r0, r0, sl, lsl r0
 288:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
 28c:	0000001a 	andeq	r0, r0, sl, lsl r0
 290:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
 294:	0000001a 	andeq	r0, r0, sl, lsl r0
 298:	08000cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp}
 29c:	0000001a 	andeq	r0, r0, sl, lsl r0
 2a0:	08000cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp}
 2a4:	0000001a 	andeq	r0, r0, sl, lsl r0
 2a8:	08000cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp}
 2ac:	0000001a 	andeq	r0, r0, sl, lsl r0
 2b0:	08000d10 	stmdaeq	r0, {r4, r8, sl, fp}
 2b4:	0000001a 	andeq	r0, r0, sl, lsl r0
 2b8:	08000d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp}
 2bc:	0000001a 	andeq	r0, r0, sl, lsl r0
 2c0:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
 2c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 2c8:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
 2cc:	0000001a 	andeq	r0, r0, sl, lsl r0
 2d0:	08000d80 	stmdaeq	r0, {r7, r8, sl, fp}
 2d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 2d8:	08000d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp}
 2dc:	0000001a 	andeq	r0, r0, sl, lsl r0
 2e0:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
 2e4:	0000001a 	andeq	r0, r0, sl, lsl r0
 2e8:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
 2ec:	0000003c 	andeq	r0, r0, ip, lsr r0
 2f0:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
 2f4:	00000012 	andeq	r0, r0, r2, lsl r0
 2f8:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 2fc:	00000014 	andeq	r0, r0, r4, lsl r0
 300:	08000e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp}
 304:	0000000c 	andeq	r0, r0, ip
	...
 310:	000000fc 	strdeq	r0, [r0], -ip
 314:	2adf0002 	bcs	ff7c0324 <_estack+0xdf790324>
 318:	00040000 	andeq	r0, r4, r0
 31c:	00000000 	andeq	r0, r0, r0
 320:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
 324:	0000011c 	andeq	r0, r0, ip, lsl r1
 328:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
 32c:	000000c8 	andeq	r0, r0, r8, asr #1
 330:	08001028 	stmdaeq	r0, {r3, r5, ip}
 334:	00000016 	andeq	r0, r0, r6, lsl r0
 338:	08001040 	stmdaeq	r0, {r6, ip}
 33c:	00000024 	andeq	r0, r0, r4, lsr #32
 340:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
 344:	0000000c 	andeq	r0, r0, ip
 348:	08001070 	stmdaeq	r0, {r4, r5, r6, ip}
 34c:	0000001a 	andeq	r0, r0, sl, lsl r0
 350:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
 354:	00000012 	andeq	r0, r0, r2, lsl r0
 358:	080010a0 	stmdaeq	r0, {r5, r7, ip}
 35c:	0000001a 	andeq	r0, r0, sl, lsl r0
 360:	080010bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip}
 364:	0000001a 	andeq	r0, r0, sl, lsl r0
 368:	080010d8 	stmdaeq	r0, {r3, r4, r6, r7, ip}
 36c:	00000008 	andeq	r0, r0, r8
 370:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
 374:	00000008 	andeq	r0, r0, r8
 378:	080010e8 	stmdaeq	r0, {r3, r5, r6, r7, ip}
 37c:	00000016 	andeq	r0, r0, r6, lsl r0
 380:	08001100 	stmdaeq	r0, {r8, ip}
 384:	0000001a 	andeq	r0, r0, sl, lsl r0
 388:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
 38c:	00000016 	andeq	r0, r0, r6, lsl r0
 390:	08001134 	stmdaeq	r0, {r2, r4, r5, r8, ip}
 394:	00000016 	andeq	r0, r0, r6, lsl r0
 398:	0800114c 	stmdaeq	r0, {r2, r3, r6, r8, ip}
 39c:	0000001a 	andeq	r0, r0, sl, lsl r0
 3a0:	08001168 	stmdaeq	r0, {r3, r5, r6, r8, ip}
 3a4:	0000000c 	andeq	r0, r0, ip
 3a8:	08001174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip}
 3ac:	0000001a 	andeq	r0, r0, sl, lsl r0
 3b0:	08001190 	stmdaeq	r0, {r4, r7, r8, ip}
 3b4:	00000012 	andeq	r0, r0, r2, lsl r0
 3b8:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
 3bc:	0000001a 	andeq	r0, r0, sl, lsl r0
 3c0:	080011c0 	stmdaeq	r0, {r6, r7, r8, ip}
 3c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3c8:	080011dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip}
 3cc:	00000016 	andeq	r0, r0, r6, lsl r0
 3d0:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
 3d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3d8:	08001210 	stmdaeq	r0, {r4, r9, ip}
 3dc:	00000014 	andeq	r0, r0, r4, lsl r0
 3e0:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
 3e4:	0000003a 	andeq	r0, r0, sl, lsr r0
 3e8:	08001260 	stmdaeq	r0, {r5, r6, r9, ip}
 3ec:	0000000c 	andeq	r0, r0, ip
 3f0:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
 3f4:	00000008 	andeq	r0, r0, r8
 3f8:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
 3fc:	0000004a 	andeq	r0, r0, sl, asr #32
 400:	080012c0 	stmdaeq	r0, {r6, r7, r9, ip}
 404:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 410:	0000004c 	andeq	r0, r0, ip, asr #32
 414:	36900002 	ldrcc	r0, [r0], r2
 418:	00040000 	andeq	r0, r4, r0
 41c:	00000000 	andeq	r0, r0, r0
 420:	080012d0 	stmdaeq	r0, {r4, r6, r7, r9, ip}
 424:	0000001a 	andeq	r0, r0, sl, lsl r0
 428:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
 42c:	0000000c 	andeq	r0, r0, ip
 430:	080012f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip}
 434:	0000000a 	andeq	r0, r0, sl
 438:	08001304 	stmdaeq	r0, {r2, r8, r9, ip}
 43c:	0000002e 	andeq	r0, r0, lr, lsr #32
 440:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
 444:	0000000a 	andeq	r0, r0, sl
 448:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
 44c:	0000000c 	andeq	r0, r0, ip
 450:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
 454:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 460:	0000012c 	andeq	r0, r0, ip, lsr #2
 464:	396c0002 	stmdbcc	ip!, {r1}^
 468:	00040000 	andeq	r0, r4, r0
 46c:	00000000 	andeq	r0, r0, r0
 470:	0800135c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, ip}
 474:	00000070 	andeq	r0, r0, r0, ror r0
 478:	080013cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip}
 47c:	000000e8 	andeq	r0, r0, r8, ror #1
 480:	080014b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, ip}
 484:	00000022 	andeq	r0, r0, r2, lsr #32
 488:	080014d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip}
 48c:	0000001a 	andeq	r0, r0, sl, lsl r0
 490:	080014f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip}
 494:	0000001a 	andeq	r0, r0, sl, lsl r0
 498:	08001510 	stmdaeq	r0, {r4, r8, sl, ip}
 49c:	00000014 	andeq	r0, r0, r4, lsl r0
 4a0:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
 4a4:	0000001a 	andeq	r0, r0, sl, lsl r0
 4a8:	08001540 	stmdaeq	r0, {r6, r8, sl, ip}
 4ac:	0000001a 	andeq	r0, r0, sl, lsl r0
 4b0:	0800155c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip}
 4b4:	00000012 	andeq	r0, r0, r2, lsl r0
 4b8:	08001570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip}
 4bc:	0000001a 	andeq	r0, r0, sl, lsl r0
 4c0:	0800158c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip}
 4c4:	00000014 	andeq	r0, r0, r4, lsl r0
 4c8:	080015a0 	stmdaeq	r0, {r5, r7, r8, sl, ip}
 4cc:	0000001a 	andeq	r0, r0, sl, lsl r0
 4d0:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
 4d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 4d8:	080015d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip}
 4dc:	0000001a 	andeq	r0, r0, sl, lsl r0
 4e0:	080015f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, ip}
 4e4:	0000001a 	andeq	r0, r0, sl, lsl r0
 4e8:	08001610 	stmdaeq	r0, {r4, r9, sl, ip}
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	0800162c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip}
 4f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f8:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
 4fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 500:	08001664 	stmdaeq	r0, {r2, r5, r6, r9, sl, ip}
 504:	0000001a 	andeq	r0, r0, sl, lsl r0
 508:	08001680 	stmdaeq	r0, {r7, r9, sl, ip}
 50c:	00000004 	andeq	r0, r0, r4
 510:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
 514:	00000006 	andeq	r0, r0, r6
 518:	0800168c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip}
 51c:	0000001a 	andeq	r0, r0, sl, lsl r0
 520:	080016a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip}
 524:	0000001c 	andeq	r0, r0, ip, lsl r0
 528:	080016c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip}
 52c:	0000001a 	andeq	r0, r0, sl, lsl r0
 530:	080016e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip}
 534:	00000008 	andeq	r0, r0, r8
 538:	080016e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip}
 53c:	0000001a 	andeq	r0, r0, sl, lsl r0
 540:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
 544:	0000001a 	andeq	r0, r0, sl, lsl r0
 548:	08001720 	stmdaeq	r0, {r5, r8, r9, sl, ip}
 54c:	00000018 	andeq	r0, r0, r8, lsl r0
 550:	08001738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip}
 554:	00000014 	andeq	r0, r0, r4, lsl r0
 558:	0800174c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip}
 55c:	00000018 	andeq	r0, r0, r8, lsl r0
 560:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 564:	00000010 	andeq	r0, r0, r0, lsl r0
 568:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
 56c:	00000036 	andeq	r0, r0, r6, lsr r0
 570:	080017ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, ip}
 574:	00000008 	andeq	r0, r0, r8
 578:	080017b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip}
 57c:	0000001c 	andeq	r0, r0, ip, lsl r0
 580:	080017d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip}
 584:	00000008 	andeq	r0, r0, r8
	...
 590:	000000ac 	andeq	r0, r0, ip, lsr #1
 594:	45c30002 	strbmi	r0, [r3, #2]
 598:	00040000 	andeq	r0, r4, r0
 59c:	00000000 	andeq	r0, r0, r0
 5a0:	080017d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip}
 5a4:	000001f6 	strdeq	r0, [r0], -r6
 5a8:	080019d0 	stmdaeq	r0, {r4, r6, r7, r8, fp, ip}
 5ac:	0000006a 	andeq	r0, r0, sl, rrx
 5b0:	08001a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip}
 5b4:	00000022 	andeq	r0, r0, r2, lsr #32
 5b8:	08001a60 	stmdaeq	r0, {r5, r6, r9, fp, ip}
 5bc:	00000014 	andeq	r0, r0, r4, lsl r0
 5c0:	08001a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip}
 5c4:	00000014 	andeq	r0, r0, r4, lsl r0
 5c8:	08001a88 	stmdaeq	r0, {r3, r7, r9, fp, ip}
 5cc:	00000014 	andeq	r0, r0, r4, lsl r0
 5d0:	08001a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip}
 5d4:	00000004 	andeq	r0, r0, r4
 5d8:	08001aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip}
 5dc:	00000006 	andeq	r0, r0, r6
 5e0:	08001aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, ip}
 5e4:	00000018 	andeq	r0, r0, r8, lsl r0
 5e8:	08001ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip}
 5ec:	00000014 	andeq	r0, r0, r4, lsl r0
 5f0:	08001ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip}
 5f4:	0000000a 	andeq	r0, r0, sl
 5f8:	08001ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, ip}
 5fc:	00000008 	andeq	r0, r0, r8
 600:	08001ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, ip}
 604:	00000008 	andeq	r0, r0, r8
 608:	08001af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip}
 60c:	00000008 	andeq	r0, r0, r8
 610:	08001af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip}
 614:	00000040 	andeq	r0, r0, r0, asr #32
 618:	08001b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip}
 61c:	0000003a 	andeq	r0, r0, sl, lsr r0
 620:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
 624:	00000040 	andeq	r0, r0, r0, asr #32
 628:	08001bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip}
 62c:	00000058 	andeq	r0, r0, r8, asr r0
 630:	08001c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip}
 634:	0000003a 	andeq	r0, r0, sl, lsr r0
	...
 640:	000000dc 	ldrdeq	r0, [r0], -ip
 644:	4d020002 	stcmi	0, cr0, [r2, #-8]
 648:	00040000 	andeq	r0, r4, r0
 64c:	00000000 	andeq	r0, r0, r0
 650:	08001c48 	stmdaeq	r0, {r3, r6, sl, fp, ip}
 654:	000000dc 	ldrdeq	r0, [r0], -ip
 658:	08001d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip}
 65c:	00000052 	andeq	r0, r0, r2, asr r0
 660:	08001d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip}
 664:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 668:	08001e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip}
 66c:	00000018 	andeq	r0, r0, r8, lsl r0
 670:	08001e80 	stmdaeq	r0, {r7, r9, sl, fp, ip}
 674:	0000000e 	andeq	r0, r0, lr
 678:	08001e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip}
 67c:	0000001a 	andeq	r0, r0, sl, lsl r0
 680:	08001eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip}
 684:	0000001a 	andeq	r0, r0, sl, lsl r0
 688:	08001ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, ip}
 68c:	00000016 	andeq	r0, r0, r6, lsl r0
 690:	08001ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip}
 694:	0000001c 	andeq	r0, r0, ip, lsl r0
 698:	08001efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 69c:	0000001e 	andeq	r0, r0, lr, lsl r0
 6a0:	08001f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip}
 6a4:	0000001a 	andeq	r0, r0, sl, lsl r0
 6a8:	08001f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip}
 6ac:	0000001a 	andeq	r0, r0, sl, lsl r0
 6b0:	08001f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip}
 6b4:	00000048 	andeq	r0, r0, r8, asr #32
 6b8:	08001f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip}
 6bc:	00000006 	andeq	r0, r0, r6
 6c0:	08001fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip}
 6c4:	00000004 	andeq	r0, r0, r4
 6c8:	08001fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, ip}
 6cc:	0000001a 	andeq	r0, r0, sl, lsl r0
 6d0:	08001fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip}
 6d4:	0000000c 	andeq	r0, r0, ip
 6d8:	08001fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, ip}
 6dc:	0000000c 	andeq	r0, r0, ip
 6e0:	08001fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
 6e4:	00000006 	andeq	r0, r0, r6
 6e8:	08001fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip}
 6ec:	00000014 	andeq	r0, r0, r4, lsl r0
 6f0:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 6f4:	0000001e 	andeq	r0, r0, lr, lsl r0
 6f8:	08002018 	stmdaeq	r0, {r3, r4, sp}
 6fc:	0000000c 	andeq	r0, r0, ip
 700:	08002024 	stmdaeq	r0, {r2, r5, sp}
 704:	00000008 	andeq	r0, r0, r8
 708:	0800202c 	stmdaeq	r0, {r2, r3, r5, sp}
 70c:	0000002a 	andeq	r0, r0, sl, lsr #32
 710:	08002058 	stmdaeq	r0, {r3, r4, r6, sp}
 714:	00000012 	andeq	r0, r0, r2, lsl r0
	...
 720:	00000054 	andeq	r0, r0, r4, asr r0
 724:	59820002 	stmibpl	r2, {r1}
 728:	00040000 	andeq	r0, r4, r0
 72c:	00000000 	andeq	r0, r0, r0
 730:	0800206c 	stmdaeq	r0, {r2, r3, r5, r6, sp}
 734:	0000001e 	andeq	r0, r0, lr, lsl r0
 738:	0800208c 	stmdaeq	r0, {r2, r3, r7, sp}
 73c:	00000080 	andeq	r0, r0, r0, lsl #1
 740:	0800210c 	stmdaeq	r0, {r2, r3, r8, sp}
 744:	0000000e 	andeq	r0, r0, lr
 748:	0800211c 	stmdaeq	r0, {r2, r3, r4, r8, sp}
 74c:	00000010 	andeq	r0, r0, r0, lsl r0
 750:	0800212c 	stmdaeq	r0, {r2, r3, r5, r8, sp}
 754:	00000014 	andeq	r0, r0, r4, lsl r0
 758:	08002140 	stmdaeq	r0, {r6, r8, sp}
 75c:	0000000c 	andeq	r0, r0, ip
 760:	0800214c 	stmdaeq	r0, {r2, r3, r6, r8, sp}
 764:	00000014 	andeq	r0, r0, r4, lsl r0
 768:	08002160 	stmdaeq	r0, {r5, r6, r8, sp}
 76c:	0000000c 	andeq	r0, r0, ip
	...
 778:	000000ac 	andeq	r0, r0, ip, lsr #1
 77c:	5cc20002 	stclpl	0, cr0, [r2], {2}
 780:	00040000 	andeq	r0, r4, r0
 784:	00000000 	andeq	r0, r0, r0
 788:	0800216c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sp}
 78c:	0000001a 	andeq	r0, r0, sl, lsl r0
 790:	08002188 	stmdaeq	r0, {r3, r7, r8, sp}
 794:	000000b6 	strheq	r0, [r0], -r6
 798:	08002240 	stmdaeq	r0, {r6, r9, sp}
 79c:	00000018 	andeq	r0, r0, r8, lsl r0
 7a0:	08002258 	stmdaeq	r0, {r3, r4, r6, r9, sp}
 7a4:	00000012 	andeq	r0, r0, r2, lsl r0
 7a8:	0800226c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sp}
 7ac:	00000012 	andeq	r0, r0, r2, lsl r0
 7b0:	08002280 	stmdaeq	r0, {r7, r9, sp}
 7b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b8:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
 7bc:	00000072 	andeq	r0, r0, r2, ror r0
 7c0:	08002310 	stmdaeq	r0, {r4, r8, r9, sp}
 7c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 7c8:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
 7cc:	00000072 	andeq	r0, r0, r2, ror r0
 7d0:	080023a0 	stmdaeq	r0, {r5, r7, r8, r9, sp}
 7d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 7d8:	080023bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sp}
 7dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e0:	080023d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sp}
 7e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e8:	080023f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sp}
 7ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 7f0:	08002420 	stmdaeq	r0, {r5, sl, sp}
 7f4:	0000000c 	andeq	r0, r0, ip
 7f8:	0800242c 	stmdaeq	r0, {r2, r3, r5, sl, sp}
 7fc:	0000001a 	andeq	r0, r0, sl, lsl r0
 800:	08002448 	stmdaeq	r0, {r3, r6, sl, sp}
 804:	00000014 	andeq	r0, r0, r4, lsl r0
 808:	0800245c 	stmdaeq	r0, {r2, r3, r4, r6, sl, sp}
 80c:	0000000c 	andeq	r0, r0, ip
 810:	08002468 	stmdaeq	r0, {r3, r5, r6, sl, sp}
 814:	00000020 	andeq	r0, r0, r0, lsr #32
 818:	08002488 	stmdaeq	r0, {r3, r7, sl, sp}
 81c:	0000000e 	andeq	r0, r0, lr
	...
 828:	00000104 	andeq	r0, r0, r4, lsl #2
 82c:	65350002 	ldrvs	r0, [r5, #-2]!
 830:	00040000 	andeq	r0, r4, r0
 834:	00000000 	andeq	r0, r0, r0
 838:	08002498 	stmdaeq	r0, {r3, r4, r7, sl, sp}
 83c:	0000001a 	andeq	r0, r0, sl, lsl r0
 840:	080024b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, sp}
 844:	000000a4 	andeq	r0, r0, r4, lsr #1
 848:	08002558 	stmdaeq	r0, {r3, r4, r6, r8, sl, sp}
 84c:	00000022 	andeq	r0, r0, r2, lsr #32
 850:	0800257c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, sp}
 854:	0000001c 	andeq	r0, r0, ip, lsl r0
 858:	08002598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp}
 85c:	0000001c 	andeq	r0, r0, ip, lsl r0
 860:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
 864:	00000036 	andeq	r0, r0, r6, lsr r0
 868:	080025ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, sp}
 86c:	0000000a 	andeq	r0, r0, sl
 870:	080025f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, sp}
 874:	0000000c 	andeq	r0, r0, ip
 878:	08002604 	stmdaeq	r0, {r2, r9, sl, sp}
 87c:	0000000c 	andeq	r0, r0, ip
 880:	08002610 	stmdaeq	r0, {r4, r9, sl, sp}
 884:	000000bc 	strheq	r0, [r0], -ip
 888:	080026cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, sp}
 88c:	00000032 	andeq	r0, r0, r2, lsr r0
 890:	08002700 	stmdaeq	r0, {r8, r9, sl, sp}
 894:	00000014 	andeq	r0, r0, r4, lsl r0
 898:	08002714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp}
 89c:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a0:	08002730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp}
 8a4:	00000008 	andeq	r0, r0, r8
 8a8:	08002738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, sp}
 8ac:	00000014 	andeq	r0, r0, r4, lsl r0
 8b0:	0800274c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, sp}
 8b4:	00000042 	andeq	r0, r0, r2, asr #32
 8b8:	08002790 	stmdaeq	r0, {r4, r7, r8, r9, sl, sp}
 8bc:	0000000a 	andeq	r0, r0, sl
 8c0:	0800279c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, sp}
 8c4:	00000020 	andeq	r0, r0, r0, lsr #32
 8c8:	080027bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, sp}
 8cc:	0000001a 	andeq	r0, r0, sl, lsl r0
 8d0:	080027d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, sp}
 8d4:	0000000c 	andeq	r0, r0, ip
 8d8:	080027e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp}
 8dc:	00000072 	andeq	r0, r0, r2, ror r0
 8e0:	08002858 	stmdaeq	r0, {r3, r4, r6, fp, sp}
 8e4:	00000004 	andeq	r0, r0, r4
 8e8:	0800285c 	stmdaeq	r0, {r2, r3, r4, r6, fp, sp}
 8ec:	00000004 	andeq	r0, r0, r4
 8f0:	08002860 	stmdaeq	r0, {r5, r6, fp, sp}
 8f4:	00000056 	andeq	r0, r0, r6, asr r0
 8f8:	080028b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, sp}
 8fc:	00000056 	andeq	r0, r0, r6, asr r0
 900:	08002910 	stmdaeq	r0, {r4, r8, fp, sp}
 904:	0000001a 	andeq	r0, r0, sl, lsl r0
 908:	0800292c 	stmdaeq	r0, {r2, r3, r5, r8, fp, sp}
 90c:	00000014 	andeq	r0, r0, r4, lsl r0
 910:	08002940 	stmdaeq	r0, {r6, r8, fp, sp}
 914:	0000000c 	andeq	r0, r0, ip
 918:	0800294c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp}
 91c:	0000001e 	andeq	r0, r0, lr, lsl r0
 920:	0800296c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, sp}
 924:	0000000c 	andeq	r0, r0, ip
	...
 930:	000000ec 	andeq	r0, r0, ip, ror #1
 934:	72820002 	addvc	r0, r2, #2
 938:	00040000 	andeq	r0, r4, r0
 93c:	00000000 	andeq	r0, r0, r0
 940:	08002978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, sp}
 944:	00000038 	andeq	r0, r0, r8, lsr r0
 948:	080029b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, sp}
 94c:	00000112 	andeq	r0, r0, r2, lsl r1
 950:	08002ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, sp}
 954:	00000058 	andeq	r0, r0, r8, asr r0
 958:	08002b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, sp}
 95c:	00000022 	andeq	r0, r0, r2, lsr #32
 960:	08002b40 	stmdaeq	r0, {r6, r8, r9, fp, sp}
 964:	0000001e 	andeq	r0, r0, lr, lsl r0
 968:	08002b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, sp}
 96c:	00000078 	andeq	r0, r0, r8, ror r0
 970:	08002bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, sp}
 974:	0000002e 	andeq	r0, r0, lr, lsr #32
 978:	08002c08 	stmdaeq	r0, {r3, sl, fp, sp}
 97c:	00000034 	andeq	r0, r0, r4, lsr r0
 980:	08002c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp}
 984:	00000034 	andeq	r0, r0, r4, lsr r0
 988:	08002c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, sp}
 98c:	00000010 	andeq	r0, r0, r0, lsl r0
 990:	08002c80 	stmdaeq	r0, {r7, sl, fp, sp}
 994:	0000001a 	andeq	r0, r0, sl, lsl r0
 998:	08002c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, sp}
 99c:	00000064 	andeq	r0, r0, r4, rrx
 9a0:	08002d00 	stmdaeq	r0, {r8, sl, fp, sp}
 9a4:	0000002e 	andeq	r0, r0, lr, lsr #32
 9a8:	08002d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, sp}
 9ac:	00000028 	andeq	r0, r0, r8, lsr #32
 9b0:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
 9b4:	0000002c 	andeq	r0, r0, ip, lsr #32
 9b8:	08002d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, sp}
 9bc:	000000d4 	ldrdeq	r0, [r0], -r4
 9c0:	08002e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, sp}
 9c4:	00000036 	andeq	r0, r0, r6, lsr r0
 9c8:	08002e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, sp}
 9cc:	00000024 	andeq	r0, r0, r4, lsr #32
 9d0:	08002eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, sp}
 9d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d8:	08002ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, sp}
 9dc:	00000012 	andeq	r0, r0, r2, lsl r0
 9e0:	08002ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, sp}
 9e4:	00000012 	andeq	r0, r0, r2, lsl r0
 9e8:	08002ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, sp}
 9ec:	00000026 	andeq	r0, r0, r6, lsr #32
 9f0:	08002f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, sp}
 9f4:	000000a2 	andeq	r0, r0, r2, lsr #1
 9f8:	08002fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp}
 9fc:	00000042 	andeq	r0, r0, r2, asr #32
 a00:	08003008 	stmdaeq	r0, {r3, ip, sp}
 a04:	00000054 	andeq	r0, r0, r4, asr r0
 a08:	0800305c 	stmdaeq	r0, {r2, r3, r4, r6, ip, sp}
 a0c:	0000006c 	andeq	r0, r0, ip, rrx
 a10:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
 a14:	00000054 	andeq	r0, r0, r4, asr r0
	...
 a20:	00000054 	andeq	r0, r0, r4, asr r0
 a24:	7f240002 	svcvc	0x00240002
 a28:	00040000 	andeq	r0, r4, r0
 a2c:	00000000 	andeq	r0, r0, r0
 a30:	0800311c 	stmdaeq	r0, {r2, r3, r4, r8, ip, sp}
 a34:	00000016 	andeq	r0, r0, r6, lsl r0
 a38:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
 a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a40:	08003150 	stmdaeq	r0, {r4, r6, r8, ip, sp}
 a44:	0000000c 	andeq	r0, r0, ip
 a48:	0800315c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, sp}
 a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a50:	08003178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, sp}
 a54:	00000014 	andeq	r0, r0, r4, lsl r0
 a58:	0800318c 	stmdaeq	r0, {r2, r3, r7, r8, ip, sp}
 a5c:	00000010 	andeq	r0, r0, r0, lsl r0
 a60:	0800319c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, sp}
 a64:	00000014 	andeq	r0, r0, r4, lsl r0
 a68:	080031b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, sp}
 a6c:	00000010 	andeq	r0, r0, r0, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   4:	00000000 	andeq	r0, r0, r0
   8:	080001c0 	stmdaeq	r0, {r6, r7, r8}
   c:	08000204 	stmdaeq	r0, {r2, r9}
  10:	08000204 	stmdaeq	r0, {r2, r9}
  14:	08000206 	stmdaeq	r0, {r1, r2, r9}
	...
  20:	08000252 	stmdaeq	r0, {r1, r4, r6, r9}
  24:	08000298 	stmdaeq	r0, {r3, r4, r7, r9}
  28:	080002aa 	stmdaeq	r0, {r1, r3, r5, r7, r9}
  2c:	0800032a 	stmdaeq	r0, {r1, r3, r5, r8, r9}
	...
  38:	08000208 	stmdaeq	r0, {r3, r9}
  3c:	0800032a 	stmdaeq	r0, {r1, r3, r5, r8, r9}
  40:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
  44:	080003be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9}
	...
  50:	080003c0 	stmdaeq	r0, {r6, r7, r8, r9}
  54:	080003d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9}
  58:	080003d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9}
  5c:	0800042e 	stmdaeq	r0, {r1, r2, r3, r5, sl}
  60:	08000430 	stmdaeq	r0, {r4, r5, sl}
  64:	08000474 	stmdaeq	r0, {r2, r4, r5, r6, sl}
  68:	08000474 	stmdaeq	r0, {r2, r4, r5, r6, sl}
  6c:	0800049e 	stmdaeq	r0, {r1, r2, r3, r4, r7, sl}
  70:	080004a0 	stmdaeq	r0, {r5, r7, sl}
  74:	080004ac 	stmdaeq	r0, {r2, r3, r5, r7, sl}
	...
  80:	080004ac 	stmdaeq	r0, {r2, r3, r5, r7, sl}
  84:	080004c0 	stmdaeq	r0, {r6, r7, sl}
  88:	080004c0 	stmdaeq	r0, {r6, r7, sl}
  8c:	08000540 	stmdaeq	r0, {r6, r8, sl}
  90:	08000540 	stmdaeq	r0, {r6, r8, sl}
  94:	08000556 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl}
  98:	08000558 	stmdaeq	r0, {r3, r4, r6, r8, sl}
  9c:	08000572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl}
  a0:	08000574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl}
  a4:	0800058e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl}
	...
  b0:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
  b4:	080006fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl}
  b8:	08000700 	stmdaeq	r0, {r8, r9, sl}
  bc:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
  c0:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
  c4:	080007d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl}
  c8:	080007d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl}
  cc:	080007f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
  d0:	080007f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
  d4:	08000804 	stmdaeq	r0, {r2, fp}
  d8:	08000804 	stmdaeq	r0, {r2, fp}
  dc:	0800080a 	stmdaeq	r0, {r1, r3, fp}
  e0:	0800080c 	stmdaeq	r0, {r2, r3, fp}
  e4:	08000818 	stmdaeq	r0, {r3, r4, fp}
  e8:	08000818 	stmdaeq	r0, {r3, r4, fp}
  ec:	0800081e 	stmdaeq	r0, {r1, r2, r3, r4, fp}
  f0:	08000820 	stmdaeq	r0, {r5, fp}
  f4:	08000824 	stmdaeq	r0, {r2, r5, fp}
  f8:	08000824 	stmdaeq	r0, {r2, r5, fp}
  fc:	08000828 	stmdaeq	r0, {r3, r5, fp}
 100:	08000828 	stmdaeq	r0, {r3, r5, fp}
 104:	08000832 	stmdaeq	r0, {r1, r4, r5, fp}
 108:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 10c:	08000838 	stmdaeq	r0, {r3, r4, r5, fp}
 110:	08000838 	stmdaeq	r0, {r3, r4, r5, fp}
 114:	08000840 	stmdaeq	r0, {r6, fp}
 118:	08000840 	stmdaeq	r0, {r6, fp}
 11c:	08000868 	stmdaeq	r0, {r3, r5, r6, fp}
	...
 128:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
 12c:	080008d4 	stmdaeq	r0, {r2, r4, r6, r7, fp}
 130:	080008d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, fp}
 134:	080008e0 	stmdaeq	r0, {r5, r6, r7, fp}
	...
 140:	08000868 	stmdaeq	r0, {r3, r5, r6, fp}
 144:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
 148:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
 14c:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
 150:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
 154:	0800090a 	stmdaeq	r0, {r1, r3, r8, fp}
 158:	0800090c 	stmdaeq	r0, {r2, r3, r8, fp}
 15c:	08000922 	stmdaeq	r0, {r1, r5, r8, fp}
 160:	08000924 	stmdaeq	r0, {r2, r5, r8, fp}
 164:	0800092e 	stmdaeq	r0, {r1, r2, r3, r5, r8, fp}
 168:	08000930 	stmdaeq	r0, {r4, r5, r8, fp}
 16c:	08000952 	stmdaeq	r0, {r1, r4, r6, r8, fp}
 170:	08000954 	stmdaeq	r0, {r2, r4, r6, r8, fp}
 174:	08000960 	stmdaeq	r0, {r5, r6, r8, fp}
 178:	08000960 	stmdaeq	r0, {r5, r6, r8, fp}
 17c:	08000986 	stmdaeq	r0, {r1, r2, r7, r8, fp}
 180:	08000988 	stmdaeq	r0, {r3, r7, r8, fp}
 184:	08000992 	stmdaeq	r0, {r1, r4, r7, r8, fp}
 188:	08000994 	stmdaeq	r0, {r2, r4, r7, r8, fp}
 18c:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
 190:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
 194:	080009b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp}
 198:	080009b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp}
 19c:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 1a0:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 1a4:	080009da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp}
 1a8:	080009dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp}
 1ac:	080009e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp}
 1b0:	080009e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp}
 1b4:	080009fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, fp}
 1b8:	08000a00 	stmdaeq	r0, {r9, fp}
 1bc:	08000a16 	stmdaeq	r0, {r1, r2, r4, r9, fp}
 1c0:	08000a18 	stmdaeq	r0, {r3, r4, r9, fp}
 1c4:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 1c8:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 1cc:	08000a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp}
 1d0:	08000a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp}
 1d4:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
 1d8:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
 1dc:	08000a64 	stmdaeq	r0, {r2, r5, r6, r9, fp}
 1e0:	08000a64 	stmdaeq	r0, {r2, r5, r6, r9, fp}
 1e4:	08000a7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, fp}
 1e8:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
 1ec:	08000b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp}
 1f0:	08000b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp}
 1f4:	08000b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp}
 1f8:	08000b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp}
 1fc:	08000b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp}
 200:	08000b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp}
 204:	08000b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp}
 208:	08000b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp}
 20c:	08000b88 	stmdaeq	r0, {r3, r7, r8, r9, fp}
 210:	08000b88 	stmdaeq	r0, {r3, r7, r8, r9, fp}
 214:	08000ba2 	stmdaeq	r0, {r1, r5, r7, r8, r9, fp}
 218:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
 21c:	08000bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp}
 220:	08000bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp}
 224:	08000bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp}
 228:	08000bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp}
 22c:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}
 230:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}
 234:	08000c08 	stmdaeq	r0, {r3, sl, fp}
 238:	08000c08 	stmdaeq	r0, {r3, sl, fp}
 23c:	08000c14 	stmdaeq	r0, {r2, r4, sl, fp}
 240:	08000c14 	stmdaeq	r0, {r2, r4, sl, fp}
 244:	08000c2e 	stmdaeq	r0, {r1, r2, r3, r5, sl, fp}
 248:	08000c30 	stmdaeq	r0, {r4, r5, sl, fp}
 24c:	08000c4a 	stmdaeq	r0, {r1, r3, r6, sl, fp}
 250:	08000c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp}
 254:	08000c66 	stmdaeq	r0, {r1, r2, r5, r6, sl, fp}
 258:	08000c68 	stmdaeq	r0, {r3, r5, r6, sl, fp}
 25c:	08000c82 	stmdaeq	r0, {r1, r7, sl, fp}
 260:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
 264:	08000c9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, sl, fp}
 268:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
 26c:	08000cba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, fp}
 270:	08000cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp}
 274:	08000cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp}
 278:	08000cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp}
 27c:	08000cf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, fp}
 280:	08000cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp}
 284:	08000d0e 	stmdaeq	r0, {r1, r2, r3, r8, sl, fp}
 288:	08000d10 	stmdaeq	r0, {r4, r8, sl, fp}
 28c:	08000d2a 	stmdaeq	r0, {r1, r3, r5, r8, sl, fp}
 290:	08000d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp}
 294:	08000d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp}
 298:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
 29c:	08000d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp}
 2a0:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
 2a4:	08000d7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, fp}
 2a8:	08000d80 	stmdaeq	r0, {r7, r8, sl, fp}
 2ac:	08000d9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, fp}
 2b0:	08000d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp}
 2b4:	08000db6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, fp}
 2b8:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
 2bc:	08000dd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl, fp}
 2c0:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
 2c4:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
 2c8:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
 2cc:	08000e22 	stmdaeq	r0, {r1, r5, r9, sl, fp}
 2d0:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 2d4:	08000e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp}
 2d8:	08000e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp}
 2dc:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
	...
 2e8:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
 2ec:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
 2f0:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
 2f4:	08001028 	stmdaeq	r0, {r3, r5, ip}
 2f8:	08001028 	stmdaeq	r0, {r3, r5, ip}
 2fc:	0800103e 	stmdaeq	r0, {r1, r2, r3, r4, r5, ip}
 300:	08001040 	stmdaeq	r0, {r6, ip}
 304:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
 308:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
 30c:	08001070 	stmdaeq	r0, {r4, r5, r6, ip}
 310:	08001070 	stmdaeq	r0, {r4, r5, r6, ip}
 314:	0800108a 	stmdaeq	r0, {r1, r3, r7, ip}
 318:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
 31c:	0800109e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip}
 320:	080010a0 	stmdaeq	r0, {r5, r7, ip}
 324:	080010ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, ip}
 328:	080010bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip}
 32c:	080010d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, ip}
 330:	080010d8 	stmdaeq	r0, {r3, r4, r6, r7, ip}
 334:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
 338:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
 33c:	080010e8 	stmdaeq	r0, {r3, r5, r6, r7, ip}
 340:	080010e8 	stmdaeq	r0, {r3, r5, r6, r7, ip}
 344:	080010fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, ip}
 348:	08001100 	stmdaeq	r0, {r8, ip}
 34c:	0800111a 	stmdaeq	r0, {r1, r3, r4, r8, ip}
 350:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
 354:	08001132 	stmdaeq	r0, {r1, r4, r5, r8, ip}
 358:	08001134 	stmdaeq	r0, {r2, r4, r5, r8, ip}
 35c:	0800114a 	stmdaeq	r0, {r1, r3, r6, r8, ip}
 360:	0800114c 	stmdaeq	r0, {r2, r3, r6, r8, ip}
 364:	08001166 	stmdaeq	r0, {r1, r2, r5, r6, r8, ip}
 368:	08001168 	stmdaeq	r0, {r3, r5, r6, r8, ip}
 36c:	08001174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip}
 370:	08001174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip}
 374:	0800118e 	stmdaeq	r0, {r1, r2, r3, r7, r8, ip}
 378:	08001190 	stmdaeq	r0, {r4, r7, r8, ip}
 37c:	080011a2 	stmdaeq	r0, {r1, r5, r7, r8, ip}
 380:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
 384:	080011be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, ip}
 388:	080011c0 	stmdaeq	r0, {r6, r7, r8, ip}
 38c:	080011da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, ip}
 390:	080011dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip}
 394:	080011f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, ip}
 398:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
 39c:	0800120e 	stmdaeq	r0, {r1, r2, r3, r9, ip}
 3a0:	08001210 	stmdaeq	r0, {r4, r9, ip}
 3a4:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
 3a8:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
 3ac:	0800125e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, ip}
 3b0:	08001260 	stmdaeq	r0, {r5, r6, r9, ip}
 3b4:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
 3b8:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
 3bc:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
 3c0:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
 3c4:	080012be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, ip}
 3c8:	080012c0 	stmdaeq	r0, {r6, r7, r9, ip}
 3cc:	080012d0 	stmdaeq	r0, {r4, r6, r7, r9, ip}
	...
 3d8:	080012d0 	stmdaeq	r0, {r4, r6, r7, r9, ip}
 3dc:	080012ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, ip}
 3e0:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
 3e4:	080012f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip}
 3e8:	080012f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip}
 3ec:	08001302 	stmdaeq	r0, {r1, r8, r9, ip}
 3f0:	08001304 	stmdaeq	r0, {r2, r8, r9, ip}
 3f4:	08001332 	stmdaeq	r0, {r1, r4, r5, r8, r9, ip}
 3f8:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
 3fc:	0800133e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, ip}
 400:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
 404:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
 408:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
 40c:	0800135c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, ip}
	...
 418:	0800135c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, ip}
 41c:	080013cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip}
 420:	080013cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip}
 424:	080014b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, ip}
 428:	080014b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, ip}
 42c:	080014d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, ip}
 430:	080014d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip}
 434:	080014f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, ip}
 438:	080014f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip}
 43c:	0800150e 	stmdaeq	r0, {r1, r2, r3, r8, sl, ip}
 440:	08001510 	stmdaeq	r0, {r4, r8, sl, ip}
 444:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
 448:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
 44c:	0800153e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sl, ip}
 450:	08001540 	stmdaeq	r0, {r6, r8, sl, ip}
 454:	0800155a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, ip}
 458:	0800155c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip}
 45c:	0800156e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, ip}
 460:	08001570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip}
 464:	0800158a 	stmdaeq	r0, {r1, r3, r7, r8, sl, ip}
 468:	0800158c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip}
 46c:	080015a0 	stmdaeq	r0, {r5, r7, r8, sl, ip}
 470:	080015a0 	stmdaeq	r0, {r5, r7, r8, sl, ip}
 474:	080015ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, ip}
 478:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
 47c:	080015d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, ip}
 480:	080015d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip}
 484:	080015f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, ip}
 488:	080015f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, ip}
 48c:	0800160e 	stmdaeq	r0, {r1, r2, r3, r9, sl, ip}
 490:	08001610 	stmdaeq	r0, {r4, r9, sl, ip}
 494:	0800162c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip}
 498:	0800162c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip}
 49c:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
 4a0:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
 4a4:	08001664 	stmdaeq	r0, {r2, r5, r6, r9, sl, ip}
 4a8:	08001664 	stmdaeq	r0, {r2, r5, r6, r9, sl, ip}
 4ac:	0800167e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, ip}
 4b0:	08001680 	stmdaeq	r0, {r7, r9, sl, ip}
 4b4:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
 4b8:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
 4bc:	0800168a 	stmdaeq	r0, {r1, r3, r7, r9, sl, ip}
 4c0:	0800168c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip}
 4c4:	080016a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, ip}
 4c8:	080016a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip}
 4cc:	080016c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip}
 4d0:	080016c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip}
 4d4:	080016de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, ip}
 4d8:	080016e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip}
 4dc:	080016e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip}
 4e0:	080016e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip}
 4e4:	08001702 	stmdaeq	r0, {r1, r8, r9, sl, ip}
 4e8:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
 4ec:	0800171e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, ip}
 4f0:	08001720 	stmdaeq	r0, {r5, r8, r9, sl, ip}
 4f4:	08001738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip}
 4f8:	08001738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip}
 4fc:	0800174c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip}
 500:	0800174c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip}
 504:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 508:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 50c:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
 510:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
 514:	080017aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, ip}
 518:	080017ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, ip}
 51c:	080017b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip}
 520:	080017b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip}
 524:	080017d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip}
 528:	080017d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip}
 52c:	080017d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip}
	...
 538:	080017d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip}
 53c:	080019ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip}
 540:	080019d0 	stmdaeq	r0, {r4, r6, r7, r8, fp, ip}
 544:	08001a3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, fp, ip}
 548:	08001a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip}
 54c:	08001a5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, fp, ip}
 550:	08001a60 	stmdaeq	r0, {r5, r6, r9, fp, ip}
 554:	08001a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip}
 558:	08001a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip}
 55c:	08001a88 	stmdaeq	r0, {r3, r7, r9, fp, ip}
 560:	08001a88 	stmdaeq	r0, {r3, r7, r9, fp, ip}
 564:	08001a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip}
 568:	08001a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip}
 56c:	08001aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip}
 570:	08001aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip}
 574:	08001aa6 	stmdaeq	r0, {r1, r2, r5, r7, r9, fp, ip}
 578:	08001aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, ip}
 57c:	08001ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip}
 580:	08001ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip}
 584:	08001ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip}
 588:	08001ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip}
 58c:	08001ade 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, fp, ip}
 590:	08001ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, ip}
 594:	08001ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, ip}
 598:	08001ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, ip}
 59c:	08001af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip}
 5a0:	08001af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip}
 5a4:	08001af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip}
 5a8:	08001af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip}
 5ac:	08001b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip}
 5b0:	08001b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip}
 5b4:	08001b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp, ip}
 5b8:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
 5bc:	08001bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip}
 5c0:	08001bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip}
 5c4:	08001c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip}
 5c8:	08001c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip}
 5cc:	08001c46 	stmdaeq	r0, {r1, r2, r6, sl, fp, ip}
	...
 5d8:	08001c48 	stmdaeq	r0, {r3, r6, sl, fp, ip}
 5dc:	08001d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip}
 5e0:	08001d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip}
 5e4:	08001d76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, fp, ip}
 5e8:	08001d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip}
 5ec:	08001e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip}
 5f0:	08001e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip}
 5f4:	08001e80 	stmdaeq	r0, {r7, r9, sl, fp, ip}
 5f8:	08001e80 	stmdaeq	r0, {r7, r9, sl, fp, ip}
 5fc:	08001e8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, fp, ip}
 600:	08001e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip}
 604:	08001eaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, fp, ip}
 608:	08001eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip}
 60c:	08001ec6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, fp, ip}
 610:	08001ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, ip}
 614:	08001ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp, ip}
 618:	08001ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip}
 61c:	08001efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 620:	08001efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 624:	08001f1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp, ip}
 628:	08001f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip}
 62c:	08001f36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, fp, ip}
 630:	08001f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip}
 634:	08001f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp, ip}
 638:	08001f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip}
 63c:	08001f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip}
 640:	08001f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip}
 644:	08001fa2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, fp, ip}
 648:	08001fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip}
 64c:	08001fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, ip}
 650:	08001fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, ip}
 654:	08001fc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, fp, ip}
 658:	08001fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip}
 65c:	08001fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, ip}
 660:	08001fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, ip}
 664:	08001fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
 668:	08001fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
 66c:	08001fe2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, sl, fp, ip}
 670:	08001fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip}
 674:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 678:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 67c:	08002016 	stmdaeq	r0, {r1, r2, r4, sp}
 680:	08002018 	stmdaeq	r0, {r3, r4, sp}
 684:	08002024 	stmdaeq	r0, {r2, r5, sp}
 688:	08002024 	stmdaeq	r0, {r2, r5, sp}
 68c:	0800202c 	stmdaeq	r0, {r2, r3, r5, sp}
 690:	0800202c 	stmdaeq	r0, {r2, r3, r5, sp}
 694:	08002056 	stmdaeq	r0, {r1, r2, r4, r6, sp}
 698:	08002058 	stmdaeq	r0, {r3, r4, r6, sp}
 69c:	0800206a 	stmdaeq	r0, {r1, r3, r5, r6, sp}
	...
 6a8:	0800206c 	stmdaeq	r0, {r2, r3, r5, r6, sp}
 6ac:	0800208a 	stmdaeq	r0, {r1, r3, r7, sp}
 6b0:	0800208c 	stmdaeq	r0, {r2, r3, r7, sp}
 6b4:	0800210c 	stmdaeq	r0, {r2, r3, r8, sp}
 6b8:	0800210c 	stmdaeq	r0, {r2, r3, r8, sp}
 6bc:	0800211a 	stmdaeq	r0, {r1, r3, r4, r8, sp}
 6c0:	0800211c 	stmdaeq	r0, {r2, r3, r4, r8, sp}
 6c4:	0800212c 	stmdaeq	r0, {r2, r3, r5, r8, sp}
 6c8:	0800212c 	stmdaeq	r0, {r2, r3, r5, r8, sp}
 6cc:	08002140 	stmdaeq	r0, {r6, r8, sp}
 6d0:	08002140 	stmdaeq	r0, {r6, r8, sp}
 6d4:	0800214c 	stmdaeq	r0, {r2, r3, r6, r8, sp}
 6d8:	0800214c 	stmdaeq	r0, {r2, r3, r6, r8, sp}
 6dc:	08002160 	stmdaeq	r0, {r5, r6, r8, sp}
 6e0:	08002160 	stmdaeq	r0, {r5, r6, r8, sp}
 6e4:	0800216c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sp}
	...
 6f0:	0800216c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sp}
 6f4:	08002186 	stmdaeq	r0, {r1, r2, r7, r8, sp}
 6f8:	08002188 	stmdaeq	r0, {r3, r7, r8, sp}
 6fc:	0800223e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sp}
 700:	08002240 	stmdaeq	r0, {r6, r9, sp}
 704:	08002258 	stmdaeq	r0, {r3, r4, r6, r9, sp}
 708:	08002258 	stmdaeq	r0, {r3, r4, r6, r9, sp}
 70c:	0800226a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sp}
 710:	0800226c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sp}
 714:	0800227e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sp}
 718:	08002280 	stmdaeq	r0, {r7, r9, sp}
 71c:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
 720:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
 724:	0800230e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sp}
 728:	08002310 	stmdaeq	r0, {r4, r8, r9, sp}
 72c:	0800232a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sp}
 730:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
 734:	0800239e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sp}
 738:	080023a0 	stmdaeq	r0, {r5, r7, r8, r9, sp}
 73c:	080023ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sp}
 740:	080023bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sp}
 744:	080023d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sp}
 748:	080023d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sp}
 74c:	080023f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sp}
 750:	080023f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sp}
 754:	08002420 	stmdaeq	r0, {r5, sl, sp}
 758:	08002420 	stmdaeq	r0, {r5, sl, sp}
 75c:	0800242c 	stmdaeq	r0, {r2, r3, r5, sl, sp}
 760:	0800242c 	stmdaeq	r0, {r2, r3, r5, sl, sp}
 764:	08002446 	stmdaeq	r0, {r1, r2, r6, sl, sp}
 768:	08002448 	stmdaeq	r0, {r3, r6, sl, sp}
 76c:	0800245c 	stmdaeq	r0, {r2, r3, r4, r6, sl, sp}
 770:	0800245c 	stmdaeq	r0, {r2, r3, r4, r6, sl, sp}
 774:	08002468 	stmdaeq	r0, {r3, r5, r6, sl, sp}
 778:	08002468 	stmdaeq	r0, {r3, r5, r6, sl, sp}
 77c:	08002488 	stmdaeq	r0, {r3, r7, sl, sp}
 780:	08002488 	stmdaeq	r0, {r3, r7, sl, sp}
 784:	08002496 	stmdaeq	r0, {r1, r2, r4, r7, sl, sp}
	...
 790:	08002498 	stmdaeq	r0, {r3, r4, r7, sl, sp}
 794:	080024b2 	stmdaeq	r0, {r1, r4, r5, r7, sl, sp}
 798:	080024b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, sp}
 79c:	08002558 	stmdaeq	r0, {r3, r4, r6, r8, sl, sp}
 7a0:	08002558 	stmdaeq	r0, {r3, r4, r6, r8, sl, sp}
 7a4:	0800257a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, sl, sp}
 7a8:	0800257c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, sp}
 7ac:	08002598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp}
 7b0:	08002598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp}
 7b4:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
 7b8:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
 7bc:	080025ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, sl, sp}
 7c0:	080025ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, sp}
 7c4:	080025f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, sp}
 7c8:	080025f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, sp}
 7cc:	08002604 	stmdaeq	r0, {r2, r9, sl, sp}
 7d0:	08002604 	stmdaeq	r0, {r2, r9, sl, sp}
 7d4:	08002610 	stmdaeq	r0, {r4, r9, sl, sp}
 7d8:	08002610 	stmdaeq	r0, {r4, r9, sl, sp}
 7dc:	080026cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, sp}
 7e0:	080026cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, sp}
 7e4:	080026fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, sp}
 7e8:	08002700 	stmdaeq	r0, {r8, r9, sl, sp}
 7ec:	08002714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp}
 7f0:	08002714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp}
 7f4:	08002730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp}
 7f8:	08002730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp}
 7fc:	08002738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, sp}
 800:	08002738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, sp}
 804:	0800274c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, sp}
 808:	0800274c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, sp}
 80c:	0800278e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, sp}
 810:	08002790 	stmdaeq	r0, {r4, r7, r8, r9, sl, sp}
 814:	0800279a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, sp}
 818:	0800279c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, sp}
 81c:	080027bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, sp}
 820:	080027bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, sp}
 824:	080027d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, sp}
 828:	080027d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, sp}
 82c:	080027e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp}
 830:	080027e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp}
 834:	08002856 	stmdaeq	r0, {r1, r2, r4, r6, fp, sp}
 838:	08002858 	stmdaeq	r0, {r3, r4, r6, fp, sp}
 83c:	0800285c 	stmdaeq	r0, {r2, r3, r4, r6, fp, sp}
 840:	0800285c 	stmdaeq	r0, {r2, r3, r4, r6, fp, sp}
 844:	08002860 	stmdaeq	r0, {r5, r6, fp, sp}
 848:	08002860 	stmdaeq	r0, {r5, r6, fp, sp}
 84c:	080028b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp, sp}
 850:	080028b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, sp}
 854:	0800290e 	stmdaeq	r0, {r1, r2, r3, r8, fp, sp}
 858:	08002910 	stmdaeq	r0, {r4, r8, fp, sp}
 85c:	0800292a 	stmdaeq	r0, {r1, r3, r5, r8, fp, sp}
 860:	0800292c 	stmdaeq	r0, {r2, r3, r5, r8, fp, sp}
 864:	08002940 	stmdaeq	r0, {r6, r8, fp, sp}
 868:	08002940 	stmdaeq	r0, {r6, r8, fp, sp}
 86c:	0800294c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp}
 870:	0800294c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp}
 874:	0800296a 	stmdaeq	r0, {r1, r3, r5, r6, r8, fp, sp}
 878:	0800296c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, sp}
 87c:	08002978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, sp}
	...
 888:	08002978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, sp}
 88c:	080029b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, sp}
 890:	080029b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, sp}
 894:	08002ac2 	stmdaeq	r0, {r1, r6, r7, r9, fp, sp}
 898:	08002ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, sp}
 89c:	08002b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, sp}
 8a0:	08002b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, sp}
 8a4:	08002b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp, sp}
 8a8:	08002b40 	stmdaeq	r0, {r6, r8, r9, fp, sp}
 8ac:	08002b5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, fp, sp}
 8b0:	08002b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, sp}
 8b4:	08002bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, sp}
 8b8:	08002bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, sp}
 8bc:	08002c06 	stmdaeq	r0, {r1, r2, sl, fp, sp}
 8c0:	08002c08 	stmdaeq	r0, {r3, sl, fp, sp}
 8c4:	08002c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp}
 8c8:	08002c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp}
 8cc:	08002c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, sp}
 8d0:	08002c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, sp}
 8d4:	08002c80 	stmdaeq	r0, {r7, sl, fp, sp}
 8d8:	08002c80 	stmdaeq	r0, {r7, sl, fp, sp}
 8dc:	08002c9a 	stmdaeq	r0, {r1, r3, r4, r7, sl, fp, sp}
 8e0:	08002c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, sp}
 8e4:	08002d00 	stmdaeq	r0, {r8, sl, fp, sp}
 8e8:	08002d00 	stmdaeq	r0, {r8, sl, fp, sp}
 8ec:	08002d2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, sl, fp, sp}
 8f0:	08002d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, sp}
 8f4:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
 8f8:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
 8fc:	08002d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, sp}
 900:	08002d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, sp}
 904:	08002e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, sp}
 908:	08002e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, sp}
 90c:	08002e8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, fp, sp}
 910:	08002e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, sp}
 914:	08002eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, sp}
 918:	08002eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, sp}
 91c:	08002ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, sp}
 920:	08002ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, sp}
 924:	08002ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp}
 928:	08002ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, sp}
 92c:	08002ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp, sp}
 930:	08002ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, sp}
 934:	08002f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp, sp}
 938:	08002f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, sp}
 93c:	08002fc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, fp, sp}
 940:	08002fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp}
 944:	08003006 	stmdaeq	r0, {r1, r2, ip, sp}
 948:	08003008 	stmdaeq	r0, {r3, ip, sp}
 94c:	0800305c 	stmdaeq	r0, {r2, r3, r4, r6, ip, sp}
 950:	0800305c 	stmdaeq	r0, {r2, r3, r4, r6, ip, sp}
 954:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
 958:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
 95c:	0800311c 	stmdaeq	r0, {r2, r3, r4, r8, ip, sp}
	...
 968:	0800311c 	stmdaeq	r0, {r2, r3, r4, r8, ip, sp}
 96c:	08003132 	stmdaeq	r0, {r1, r4, r5, r8, ip, sp}
 970:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
 974:	08003150 	stmdaeq	r0, {r4, r6, r8, ip, sp}
 978:	08003150 	stmdaeq	r0, {r4, r6, r8, ip, sp}
 97c:	0800315c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, sp}
 980:	0800315c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, sp}
 984:	08003178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, sp}
 988:	08003178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, sp}
 98c:	0800318c 	stmdaeq	r0, {r2, r3, r7, r8, ip, sp}
 990:	0800318c 	stmdaeq	r0, {r2, r3, r7, r8, ip, sp}
 994:	0800319c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, sp}
 998:	0800319c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, sp}
 99c:	080031b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, sp}
 9a0:	080031b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, sp}
 9a4:	080031c0 	stmdaeq	r0, {r6, r7, r8, ip, sp}
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
       4:	08000336 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9}
       8:	9f300002 	svcls	0x00300002
       c:	08000336 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9}
      10:	0800033a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9}
      14:	00720005 	rsbseq	r0, r2, r5
      18:	3a9f1a3c 	bcc	fe7c6910 <_estack+0xde796910>
      1c:	4a080003 	bmi	200030 <_Min_Stack_Size+0x1ffc30>
      20:	01080003 	tsteq	r8, r3
      24:	03665200 	cmneq	r6, #0, 4
      28:	03700800 	cmneq	r0, #0, 16
      2c:	00060800 	andeq	r0, r6, r0, lsl #16
      30:	ff080072 			; <UNDEFINED> instruction: 0xff080072
      34:	03709f1a 	cmneq	r0, #26, 30	; 0x68
      38:	03740800 	cmneq	r4, #0, 16
      3c:	00010800 	andeq	r0, r1, r0, lsl #16
      40:	0003b452 	andeq	fp, r3, r2, asr r4
      44:	0003be08 	andeq	fp, r3, r8, lsl #28
      48:	52000108 	andpl	r0, r0, #8, 2
	...
      54:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
      58:	0800034a 	stmdaeq	r0, {r1, r3, r6, r8, r9}
      5c:	9f300002 	svcls	0x00300002
      60:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
      64:	080003ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9}
      68:	9f300002 	svcls	0x00300002
      6c:	080003ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9}
      70:	080003b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9}
      74:	b4510001 	ldrblt	r0, [r1], #-1
      78:	be080003 	cdplt	0, 0, cr0, cr8, cr3, {0}
      7c:	02080003 	andeq	r0, r8, #3
      80:	009f3000 	addseq	r3, pc, r0
      84:	00000000 	andeq	r0, r0, r0
      88:	2c000000 	stccs	0, cr0, [r0], {-0}
      8c:	4a080003 	bmi	2000a0 <_Min_Stack_Size+0x1ffca0>
      90:	02080003 	andeq	r0, r8, #3
      94:	709f3200 	addsvc	r3, pc, r0, lsl #4
      98:	ac080003 	stcge	0, cr0, [r8], {3}
      9c:	02080003 	andeq	r0, r8, #3
      a0:	b49f3200 	ldrlt	r3, [pc], #512	; a8 <_Min_Heap_Size+0xa8>
      a4:	be080003 	cdplt	0, 0, cr0, cr8, cr3, {0}
      a8:	02080003 	andeq	r0, r8, #3
      ac:	009f3200 	addseq	r3, pc, r0, lsl #4
      b0:	00000000 	andeq	r0, r0, r0
      b4:	2c000000 	stccs	0, cr0, [r0], {-0}
      b8:	4a080003 	bmi	2000cc <_Min_Stack_Size+0x1ffccc>
      bc:	02080003 	andeq	r0, r8, #3
      c0:	709f3000 	addsvc	r3, pc, r0
      c4:	72080003 	andvc	r0, r8, #3
      c8:	02080003 	andeq	r0, r8, #3
      cc:	729f3000 	addsvc	r3, pc, #0
      d0:	7a080003 	bvc	2000e4 <_Min_Stack_Size+0x1ffce4>
      d4:	09080003 	stmdbeq	r8, {r0, r1}
      d8:	40007000 	andmi	r7, r0, r0
      dc:	461a2442 	ldrmi	r2, [sl], -r2, asr #8
      e0:	03b49f25 			; <UNDEFINED> instruction: 0x03b49f25
      e4:	03be0800 			; <UNDEFINED> instruction: 0x03be0800
      e8:	00020800 	andeq	r0, r2, r0, lsl #16
      ec:	00009f30 	andeq	r9, r0, r0, lsr pc
      f0:	00000000 	andeq	r0, r0, r0
      f4:	032c0000 	teqeq	ip, #0
      f8:	034a0800 	movteq	r0, #43008	; 0xa800
      fc:	00020800 	andeq	r0, r2, r0, lsl #16
     100:	03709f32 	cmneq	r0, #50, 30	; 0xc8
     104:	03900800 	orrseq	r0, r0, #0, 16
     108:	00020800 	andeq	r0, r2, r0, lsl #16
     10c:	03909f32 	orrseq	r9, r0, #50, 30	; 0xc8
     110:	03b40800 			; <UNDEFINED> instruction: 0x03b40800
     114:	00010800 	andeq	r0, r1, r0, lsl #16
     118:	0003b452 	andeq	fp, r3, r2, asr r4
     11c:	0003be08 	andeq	fp, r3, r8, lsl #28
     120:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     124:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     128:	00000000 	andeq	r0, r0, r0
     12c:	0004ac00 	andeq	sl, r4, r0, lsl #24
     130:	0004b408 	andeq	fp, r4, r8, lsl #8
     134:	50000108 	andpl	r0, r0, r8, lsl #2
     138:	080004b4 	stmdaeq	r0, {r2, r4, r5, r7, sl}
     13c:	080004c0 	stmdaeq	r0, {r6, r7, sl}
     140:	01f30004 	mvnseq	r0, r4
     144:	00009f50 	andeq	r9, r0, r0, asr pc
     148:	00000000 	andeq	r0, r0, r0
     14c:	04c00000 	strbeq	r0, [r0], #0
     150:	04d60800 	ldrbeq	r0, [r6], #2048	; 0x800
     154:	00010800 	andeq	r0, r1, r0, lsl #16
     158:	0004d650 	andeq	sp, r4, r0, asr r6
     15c:	0004e608 	andeq	lr, r4, r8, lsl #12
     160:	f3000408 	vshl.u8	d0, d8, d0
     164:	e69f5001 	ldr	r5, [pc], r1
     168:	2e080004 	cdpcs	0, 0, cr0, cr8, cr4, {0}
     16c:	01080005 	tsteq	r8, r5
     170:	052e5000 	streq	r5, [lr, #-0]!
     174:	05400800 	strbeq	r0, [r0, #-2048]	; 0x800
     178:	00040800 	andeq	r0, r4, r0, lsl #16
     17c:	9f5001f3 	svcls	0x005001f3
	...
     188:	080004c0 	stmdaeq	r0, {r6, r7, sl}
     18c:	080004fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl}
     190:	9f300002 	svcls	0x00300002
     194:	080004fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl}
     198:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
     19c:	0e520001 	cdpeq	0, 5, cr0, cr2, cr1, {0}
     1a0:	12080005 	andne	r0, r8, #5
     1a4:	01080005 	tsteq	r8, r5
     1a8:	05125100 	ldreq	r5, [r2, #-256]	; 0x100
     1ac:	051c0800 	ldreq	r0, [ip, #-2048]	; 0x800
     1b0:	00010800 	andeq	r0, r1, r0, lsl #16
     1b4:	00051e52 	andeq	r1, r5, r2, asr lr
     1b8:	00052408 	andeq	r2, r5, r8, lsl #8
     1bc:	52000108 	andpl	r0, r0, #8, 2
	...
     1c8:	080004c0 	stmdaeq	r0, {r6, r7, sl}
     1cc:	080004fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl}
     1d0:	9f300002 	svcls	0x00300002
     1d4:	080004fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl}
     1d8:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
     1dc:	72340005 	eorsvc	r0, r4, #5
     1e0:	009f1c00 	addseq	r1, pc, r0, lsl #24
     1e4:	00000000 	andeq	r0, r0, r0
     1e8:	c0000000 	andgt	r0, r0, r0
     1ec:	fc080004 	stc2	0, cr0, [r8], {4}
     1f0:	02080004 	andeq	r0, r8, #4
     1f4:	fc9f3f00 	ldc2	15, cr3, [pc], {0}
     1f8:	0c080004 	stceq	0, cr0, [r8], {4}
     1fc:	05080005 	streq	r0, [r8, #-5]
     200:	00723f00 	rsbseq	r3, r2, r0, lsl #30
     204:	00009f26 	andeq	r9, r0, r6, lsr #30
     208:	00000000 	andeq	r0, r0, r0
     20c:	05400000 	strbeq	r0, [r0, #-0]
     210:	05520800 	ldrbeq	r0, [r2, #-2048]	; 0x800
     214:	00010800 	andeq	r0, r1, r0, lsl #16
     218:	00055250 	andeq	r5, r5, r0, asr r2
     21c:	00055608 	andeq	r5, r5, r8, lsl #12
     220:	f3000408 	vshl.u8	d0, d8, d0
     224:	009f5001 	addseq	r5, pc, r1
     228:	00000000 	andeq	r0, r0, r0
     22c:	40000000 	andmi	r0, r0, r0
     230:	44080005 	strmi	r0, [r8], #-5
     234:	01080005 	tsteq	r8, r5
     238:	05445100 	strbeq	r5, [r4, #-256]	; 0x100
     23c:	05560800 	ldrbeq	r0, [r6, #-2048]	; 0x800
     240:	00040800 	andeq	r0, r4, r0, lsl #16
     244:	9f5101f3 	svcls	0x005101f3
	...
     250:	08000558 	stmdaeq	r0, {r3, r4, r6, r8, sl}
     254:	08000568 	stmdaeq	r0, {r3, r5, r6, r8, sl}
     258:	68500001 	ldmdavs	r0, {r0}^
     25c:	6c080005 	stcvs	0, cr0, [r8], {5}
     260:	04080005 	streq	r0, [r8], #-5
     264:	5001f300 	andpl	pc, r1, r0, lsl #6
     268:	00056c9f 	muleq	r5, pc, ip	; <UNPREDICTABLE>
     26c:	00056e08 	andeq	r6, r5, r8, lsl #28
     270:	50000108 	andpl	r0, r0, r8, lsl #2
     274:	0800056e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl}
     278:	08000572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl}
     27c:	01f30004 	mvnseq	r0, r4
     280:	00009f50 	andeq	r9, r0, r0, asr pc
     284:	00000000 	andeq	r0, r0, r0
     288:	05900000 	ldreq	r0, [r0]
     28c:	061a0800 	ldreq	r0, [sl], -r0, lsl #16
     290:	00010800 	andeq	r0, r1, r0, lsl #16
     294:	00061a50 	andeq	r1, r6, r0, asr sl
     298:	00062e08 	andeq	r2, r6, r8, lsl #28
     29c:	f3000408 	vshl.u8	d0, d8, d0
     2a0:	2e9f5001 	cdpcs	0, 9, cr5, cr15, cr1, {0}
     2a4:	30080006 	andcc	r0, r8, r6
     2a8:	01080006 	tsteq	r8, r6
     2ac:	06305000 	ldrteq	r5, [r0], -r0
     2b0:	06420800 	strbeq	r0, [r2], -r0, lsl #16
     2b4:	00040800 	andeq	r0, r4, r0, lsl #16
     2b8:	9f5001f3 	svcls	0x005001f3
     2bc:	08000642 	stmdaeq	r0, {r1, r6, r9, sl}
     2c0:	08000644 	stmdaeq	r0, {r2, r6, r9, sl}
     2c4:	44500001 	ldrbmi	r0, [r0], #-1
     2c8:	56080006 	strpl	r0, [r8], -r6
     2cc:	04080006 	streq	r0, [r8], #-6
     2d0:	5001f300 	andpl	pc, r1, r0, lsl #6
     2d4:	0006569f 	muleq	r6, pc, r6	; <UNPREDICTABLE>
     2d8:	00065808 	andeq	r5, r6, r8, lsl #16
     2dc:	50000108 	andpl	r0, r0, r8, lsl #2
     2e0:	08000658 	stmdaeq	r0, {r3, r4, r6, r9, sl}
     2e4:	0800066a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl}
     2e8:	01f30004 	mvnseq	r0, r4
     2ec:	066a9f50 	uqsaxeq	r9, sl, r0
     2f0:	066c0800 	strbteq	r0, [ip], -r0, lsl #16
     2f4:	00010800 	andeq	r0, r1, r0, lsl #16
     2f8:	00066c50 	andeq	r6, r6, r0, asr ip
     2fc:	00067e08 	andeq	r7, r6, r8, lsl #28
     300:	f3000408 	vshl.u8	d0, d8, d0
     304:	7e9f5001 	cdpvc	0, 9, cr5, cr15, cr1, {0}
     308:	80080006 	andhi	r0, r8, r6
     30c:	01080006 	tsteq	r8, r6
     310:	06805000 	streq	r5, [r0], r0
     314:	06920800 	ldreq	r0, [r2], r0, lsl #16
     318:	00040800 	andeq	r0, r4, r0, lsl #16
     31c:	9f5001f3 	svcls	0x005001f3
     320:	08000692 	stmdaeq	r0, {r1, r4, r7, r9, sl}
     324:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
     328:	94500001 	ldrbls	r0, [r0], #-1
     32c:	a6080006 	strge	r0, [r8], -r6
     330:	04080006 	streq	r0, [r8], #-6
     334:	5001f300 	andpl	pc, r1, r0, lsl #6
     338:	0006a69f 	muleq	r6, pc, r6	; <UNPREDICTABLE>
     33c:	0006a808 	andeq	sl, r6, r8, lsl #16
     340:	50000108 	andpl	r0, r0, r8, lsl #2
     344:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
     348:	080006ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl}
     34c:	01f30004 	mvnseq	r0, r4
     350:	06ba9f50 	ssateq	r9, #27, r0, asr #30
     354:	06bc0800 	ldrteq	r0, [ip], r0, lsl #16
     358:	00010800 	andeq	r0, r1, r0, lsl #16
     35c:	0006bc50 	andeq	fp, r6, r0, asr ip
     360:	0006ce08 	andeq	ip, r6, r8, lsl #28
     364:	f3000408 	vshl.u8	d0, d8, d0
     368:	ce9f5001 	cdpgt	0, 9, cr5, cr15, cr1, {0}
     36c:	d2080006 	andle	r0, r8, #6
     370:	01080006 	tsteq	r8, r6
     374:	06d25000 	ldrbeq	r5, [r2], r0
     378:	06e60800 	strbteq	r0, [r6], r0, lsl #16
     37c:	00040800 	andeq	r0, r4, r0, lsl #16
     380:	9f5001f3 	svcls	0x005001f3
     384:	080006e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl}
     388:	080006ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl}
     38c:	ea500001 	b	1400398 <_Min_Stack_Size+0x13fff98>
     390:	fe080006 	cdp2	0, 0, cr0, cr8, cr6, {0}
     394:	04080006 	streq	r0, [r8], #-6
     398:	5001f300 	andpl	pc, r1, r0, lsl #6
     39c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3a0:	00000000 	andeq	r0, r0, r0
     3a4:	00070000 	andeq	r0, r7, r0
     3a8:	00071208 	andeq	r1, r7, r8, lsl #4
     3ac:	30000208 	andcc	r0, r0, r8, lsl #4
     3b0:	0007129f 	muleq	r7, pc, r2	; <UNPREDICTABLE>
     3b4:	0007c008 	andeq	ip, r7, r8
     3b8:	53000108 	movwpl	r0, #264	; 0x108
	...
     3c4:	08000700 	stmdaeq	r0, {r8, r9, sl}
     3c8:	08000712 	stmdaeq	r0, {r1, r4, r8, r9, sl}
     3cc:	9f300002 	svcls	0x00300002
     3d0:	08000712 	stmdaeq	r0, {r1, r4, r8, r9, sl}
     3d4:	0800071c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl}
     3d8:	20540001 	subscs	r0, r4, r1
     3dc:	34080007 	strcc	r0, [r8], #-7
     3e0:	01080007 	tsteq	r8, r7
     3e4:	07345400 	ldreq	r5, [r4, -r0, lsl #8]!
     3e8:	076e0800 	strbeq	r0, [lr, -r0, lsl #16]!
     3ec:	00060800 	andeq	r0, r6, r0, lsl #16
     3f0:	00730077 	rsbseq	r0, r3, r7, ror r0
     3f4:	076e9f24 	strbeq	r9, [lr, -r4, lsr #30]!
     3f8:	077a0800 	ldrbeq	r0, [sl, -r0, lsl #16]!
     3fc:	00060800 	andeq	r0, r6, r0, lsl #16
     400:	7f730077 	svcvc	0x00730077
     404:	07809f24 	streq	r9, [r0, r4, lsr #30]
     408:	07c00800 	strbeq	r0, [r0, r0, lsl #16]
     40c:	00060800 	andeq	r0, r6, r0, lsl #16
     410:	00730077 	rsbseq	r0, r3, r7, ror r0
     414:	00009f24 	andeq	r9, r0, r4, lsr #30
     418:	00000000 	andeq	r0, r0, r0
     41c:	07000000 	streq	r0, [r0, -r0]
     420:	07120800 	ldreq	r0, [r2, -r0, lsl #16]
     424:	00020800 	andeq	r0, r2, r0, lsl #16
     428:	07129f30 			; <UNDEFINED> instruction: 0x07129f30
     42c:	071c0800 	ldreq	r0, [ip, -r0, lsl #16]
     430:	00010800 	andeq	r0, r1, r0, lsl #16
     434:	00072455 	andeq	r2, r7, r5, asr r4
     438:	00075c08 	andeq	r5, r7, r8, lsl #24
     43c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     440:	0800075c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl}
     444:	0800076e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl}
     448:	00770009 	rsbseq	r0, r7, r9
     44c:	76240073 			; <UNDEFINED> instruction: 0x76240073
     450:	6e9f1a00 	vfnmsvs.f32	s2, s30, s0
     454:	7a080007 	bvc	200478 <_Min_Stack_Size+0x200078>
     458:	09080007 	stmdbeq	r8, {r0, r1, r2}
     45c:	73007700 	movwvc	r7, #1792	; 0x700
     460:	0076247f 	rsbseq	r2, r6, pc, ror r4
     464:	07809f1a 	usada8eq	r0, sl, pc, r9	; <UNPREDICTABLE>
     468:	07ac0800 	streq	r0, [ip, r0, lsl #16]!
     46c:	00010800 	andeq	r0, r1, r0, lsl #16
     470:	0007ac55 	andeq	sl, r7, r5, asr ip
     474:	0007c008 	andeq	ip, r7, r8
     478:	77000908 	strvc	r0, [r0, -r8, lsl #18]
     47c:	24007300 	strcs	r7, [r0], #-768	; 0x300
     480:	9f1a0076 	svcls	0x001a0076
	...
     48c:	080007f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     490:	08000802 	stmdaeq	r0, {r1, fp}
     494:	02500001 	subseq	r0, r0, #1
     498:	04080008 	streq	r0, [r8], #-8
     49c:	04080008 	streq	r0, [r8], #-8
     4a0:	5001f300 	andpl	pc, r1, r0, lsl #6
     4a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     4a8:	00000000 	andeq	r0, r0, r0
     4ac:	0007f800 	andeq	pc, r7, r0, lsl #16
     4b0:	0007fa08 	andeq	pc, r7, r8, lsl #20
     4b4:	30000208 	andcc	r0, r0, r8, lsl #4
     4b8:	0007fa9f 	muleq	r7, pc, sl	; <UNPREDICTABLE>
     4bc:	00080408 	andeq	r0, r8, r8, lsl #8
     4c0:	71000c08 	tstvc	r0, r8, lsl #24
     4c4:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
     4c8:	1a00731a 	bne	1d138 <_Min_Stack_Size+0x1cd38>
     4cc:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
     4d0:	00000000 	andeq	r0, r0, r0
     4d4:	04000000 	streq	r0, [r0], #-0
     4d8:	06080008 	streq	r0, [r8], -r8
     4dc:	01080008 	tsteq	r8, r8
     4e0:	08065000 	stmdaeq	r6, {ip, lr}
     4e4:	080a0800 	stmdaeq	sl, {fp}
     4e8:	00040800 	andeq	r0, r4, r0, lsl #16
     4ec:	9f5001f3 	svcls	0x005001f3
	...
     4f8:	0800080c 	stmdaeq	r0, {r2, r3, fp}
     4fc:	08000816 	stmdaeq	r0, {r1, r2, r4, fp}
     500:	16500001 	ldrbne	r0, [r0], -r1
     504:	18080008 	stmdane	r8, {r3}
     508:	04080008 	streq	r0, [r8], #-8
     50c:	5001f300 	andpl	pc, r1, r0, lsl #6
     510:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     514:	00000000 	andeq	r0, r0, r0
     518:	00080c00 	andeq	r0, r8, r0, lsl #24
     51c:	00080e08 	andeq	r0, r8, r8, lsl #28
     520:	30000208 	andcc	r0, r0, r8, lsl #4
     524:	00080e9f 	muleq	r8, pc, lr	; <UNPREDICTABLE>
     528:	00081808 	andeq	r1, r8, r8, lsl #16
     52c:	71000c08 	tstvc	r0, r8, lsl #24
     530:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
     534:	1a00731a 	bne	1d1a4 <_Min_Stack_Size+0x1cda4>
     538:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
     53c:	00000000 	andeq	r0, r0, r0
     540:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     544:	1a080008 	bne	20056c <_Min_Stack_Size+0x20016c>
     548:	01080008 	tsteq	r8, r8
     54c:	081a5000 	ldmdaeq	sl, {ip, lr}
     550:	081e0800 	ldmdaeq	lr, {fp}
     554:	00040800 	andeq	r0, r4, r0, lsl #16
     558:	9f5001f3 	svcls	0x005001f3
	...
     564:	08000838 	stmdaeq	r0, {r3, r4, r5, fp}
     568:	0800083c 	stmdaeq	r0, {r2, r3, r4, r5, fp}
     56c:	3c510001 	mrrccc	0, 0, r0, r1, cr1
     570:	40080008 	andmi	r0, r8, r8
     574:	04080008 	streq	r0, [r8], #-8
     578:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     57c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     580:	00000000 	andeq	r0, r0, r0
     584:	00084000 	andeq	r4, r8, r0
     588:	00084608 	andeq	r4, r8, r8, lsl #12
     58c:	50000108 	andpl	r0, r0, r8, lsl #2
     590:	08000846 	stmdaeq	r0, {r1, r2, r6, fp}
     594:	08000868 	stmdaeq	r0, {r3, r5, r6, fp}
     598:	01f30004 	mvnseq	r0, r4
     59c:	00009f50 	andeq	r9, r0, r0, asr pc
     5a0:	00000000 	andeq	r0, r0, r0
     5a4:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
     5a8:	084a0800 	stmdaeq	sl, {fp}^
     5ac:	00010800 	andeq	r0, r1, r0, lsl #16
     5b0:	00084a51 	andeq	r4, r8, r1, asr sl
     5b4:	00086808 	andeq	r6, r8, r8, lsl #16
     5b8:	f3000408 	vshl.u8	d0, d8, d0
     5bc:	009f5101 	addseq	r5, pc, r1, lsl #2
     5c0:	00000000 	andeq	r0, r0, r0
     5c4:	40000000 	andmi	r0, r0, r0
     5c8:	62080008 	andvs	r0, r8, #8
     5cc:	01080008 	tsteq	r8, r8
     5d0:	08625200 	stmdaeq	r2!, {r9, ip, lr}^
     5d4:	08680800 	stmdaeq	r8!, {fp}^
     5d8:	00040800 	andeq	r0, r4, r0, lsl #16
     5dc:	9f5201f3 	svcls	0x005201f3
	...
     5e8:	08000840 	stmdaeq	r0, {r6, fp}
     5ec:	0800084e 	stmdaeq	r0, {r1, r2, r3, r6, fp}
     5f0:	9f300002 	svcls	0x00300002
     5f4:	0800084e 	stmdaeq	r0, {r1, r2, r3, r6, fp}
     5f8:	08000862 	stmdaeq	r0, {r1, r5, r6, fp}
     5fc:	00720009 	rsbseq	r0, r2, r9
     600:	711aff08 	tstvc	sl, r8, lsl #30
     604:	629f2400 	addsvs	r2, pc, #0, 8
     608:	68080008 	stmdavs	r8, {r3}
     60c:	0a080008 	beq	200634 <_Min_Stack_Size+0x200234>
     610:	5201f300 	andpl	pc, r1, #0, 6
     614:	711aff08 	tstvc	sl, r8, lsl #30
     618:	009f2400 	addseq	r2, pc, r0, lsl #8
     61c:	00000000 	andeq	r0, r0, r0
     620:	40000000 	andmi	r0, r0, r0
     624:	64080008 	strvs	r0, [r8], #-8
     628:	02080008 	andeq	r0, r8, #8
     62c:	649f3000 	ldrvs	r3, [pc], #0	; 634 <_Min_Stack_Size+0x234>
     630:	68080008 	stmdavs	r8, {r3}
     634:	01080008 	tsteq	r8, r8
     638:	00005300 	andeq	r5, r0, r0, lsl #6
     63c:	00000000 	andeq	r0, r0, r0
     640:	08d60000 	ldmeq	r6, {}^	; <UNPREDICTABLE>
     644:	08f80800 	ldmeq	r8!, {fp}^
     648:	00020800 	andeq	r0, r2, r0, lsl #16
     64c:	08f89f30 	ldmeq	r8!, {r4, r5, r8, r9, sl, fp, ip, pc}^
     650:	08fc0800 	ldmeq	ip!, {fp}^
     654:	00070800 	andeq	r0, r7, r0, lsl #16
     658:	25410070 	strbcs	r0, [r1, #-112]	; 0x70
     65c:	009f1a31 	addseq	r1, pc, r1, lsr sl	; <UNPREDICTABLE>
     660:	0a080009 	beq	20068c <_Min_Stack_Size+0x20028c>
     664:	02080009 	andeq	r0, r8, #9
     668:	009f3000 	addseq	r3, pc, r0
     66c:	00000000 	andeq	r0, r0, r0
     670:	d6000000 	strle	r0, [r0], -r0
     674:	da080008 	ble	20069c <_Min_Stack_Size+0x20029c>
     678:	02080008 	andeq	r0, r8, #8
     67c:	009f3000 	addseq	r3, pc, r0
     680:	00000000 	andeq	r0, r0, r0
     684:	da000000 	ble	68c <_Min_Stack_Size+0x28c>
     688:	dc080008 	stcle	0, cr0, [r8], {8}
     68c:	02080008 	andeq	r0, r8, #8
     690:	dc9f3100 	ldfles	f3, [pc], {0}
     694:	0a080008 	beq	2006bc <_Min_Stack_Size+0x2002bc>
     698:	02080009 	andeq	r0, r8, #9
     69c:	009f4100 	addseq	r4, pc, r0, lsl #2
     6a0:	00000000 	andeq	r0, r0, r0
     6a4:	da000000 	ble	6ac <_Min_Stack_Size+0x2ac>
     6a8:	dc080008 	stcle	0, cr0, [r8], {8}
     6ac:	02080008 	andeq	r0, r8, #8
     6b0:	dc9f3000 	ldcle	0, cr3, [pc], {0}
     6b4:	de080008 	cdple	0, 0, cr0, cr8, cr8, {0}
     6b8:	01080008 	tsteq	r8, r8
     6bc:	00005300 	andeq	r5, r0, r0, lsl #6
     6c0:	00000000 	andeq	r0, r0, r0
     6c4:	08da0000 	ldmeq	sl, {}^	; <UNPREDICTABLE>
     6c8:	08ee0800 	stmiaeq	lr!, {fp}^
     6cc:	00020800 	andeq	r0, r2, r0, lsl #16
     6d0:	09009f30 	stmdbeq	r0, {r4, r5, r8, r9, sl, fp, ip, pc}
     6d4:	090a0800 	stmdbeq	sl, {fp}
     6d8:	00020800 	andeq	r0, r2, r0, lsl #16
     6dc:	00009f31 	andeq	r9, r0, r1, lsr pc
     6e0:	00000000 	andeq	r0, r0, r0
     6e4:	08ee0000 	stmiaeq	lr!, {}^	; <UNPREDICTABLE>
     6e8:	09000800 	stmdbeq	r0, {fp}
     6ec:	00030800 	andeq	r0, r3, r0, lsl #16
     6f0:	009f3108 	addseq	r3, pc, r8, lsl #2
     6f4:	00000000 	andeq	r0, r0, r0
     6f8:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
     6fc:	f8080008 			; <UNDEFINED> instruction: 0xf8080008
     700:	02080008 	andeq	r0, r8, #8
     704:	f89f3100 			; <UNDEFINED> instruction: 0xf89f3100
     708:	00080008 	andeq	r0, r8, r8
     70c:	02080009 	andeq	r0, r8, #9
     710:	009f4100 	addseq	r4, pc, r0, lsl #2
     714:	00000000 	andeq	r0, r0, r0
     718:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
     71c:	f8080008 			; <UNDEFINED> instruction: 0xf8080008
     720:	02080008 	andeq	r0, r8, #8
     724:	f89f3000 			; <UNDEFINED> instruction: 0xf89f3000
     728:	fc080008 	stc2	0, cr0, [r8], {8}
     72c:	01080008 	tsteq	r8, r8
     730:	00005000 	andeq	r5, r0, r0
     734:	00000000 	andeq	r0, r0, r0
     738:	08ee0000 	stmiaeq	lr!, {}^	; <UNPREDICTABLE>
     73c:	09000800 	stmdbeq	r0, {fp}
     740:	00020800 	andeq	r0, r2, r0, lsl #16
     744:	00009f30 	andeq	r9, r0, r0, lsr pc
     748:	00000000 	andeq	r0, r0, r0
     74c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     750:	091e0800 	ldmdbeq	lr, {fp}
     754:	00010800 	andeq	r0, r1, r0, lsl #16
     758:	00091e50 	andeq	r1, r9, r0, asr lr
     75c:	00092208 	andeq	r2, r9, r8, lsl #4
     760:	f3000408 	vshl.u8	d0, d8, d0
     764:	009f5001 	addseq	r5, pc, r1
     768:	00000000 	andeq	r0, r0, r0
     76c:	0c000000 	stceq	0, cr0, [r0], {-0}
     770:	16080009 	strne	r0, [r8], -r9
     774:	02080009 	andeq	r0, r8, #9
     778:	169f3000 	ldrne	r3, [pc], r0
     77c:	1e080009 	cdpne	0, 0, cr0, cr8, cr9, {0}
     780:	01080009 	tsteq	r8, r9
     784:	091e5200 	ldmdbeq	lr, {r9, ip, lr}
     788:	09220800 	stmdbeq	r2!, {fp}
     78c:	00010800 	andeq	r0, r1, r0, lsl #16
     790:	00000050 	andeq	r0, r0, r0, asr r0
     794:	00000000 	andeq	r0, r0, r0
     798:	00096000 	andeq	r6, r9, r0
     79c:	00096808 	andeq	r6, r9, r8, lsl #16
     7a0:	50000108 	andpl	r0, r0, r8, lsl #2
     7a4:	08000968 	stmdaeq	r0, {r3, r5, r6, r8, fp}
     7a8:	08000986 	stmdaeq	r0, {r1, r2, r7, r8, fp}
     7ac:	01f30004 	mvnseq	r0, r4
     7b0:	00009f50 	andeq	r9, r0, r0, asr pc
     7b4:	00000000 	andeq	r0, r0, r0
     7b8:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
     7bc:	096c0800 	stmdbeq	ip!, {fp}^
     7c0:	00010800 	andeq	r0, r1, r0, lsl #16
     7c4:	00096c51 	andeq	r6, r9, r1, asr ip
     7c8:	00098608 	andeq	r8, r9, r8, lsl #12
     7cc:	f3000408 	vshl.u8	d0, d8, d0
     7d0:	009f5101 	addseq	r5, pc, r1, lsl #2
     7d4:	00000000 	andeq	r0, r0, r0
     7d8:	60000000 	andvs	r0, r0, r0
     7dc:	7a080009 	bvc	200808 <_Min_Stack_Size+0x200408>
     7e0:	01080009 	tsteq	r8, r9
     7e4:	097a5200 	ldmdbeq	sl!, {r9, ip, lr}^
     7e8:	09860800 	stmibeq	r6, {fp}
     7ec:	00040800 	andeq	r0, r4, r0, lsl #16
     7f0:	9f5201f3 	svcls	0x005201f3
	...
     7fc:	08000960 	stmdaeq	r0, {r5, r6, r8, fp}
     800:	0800096a 	stmdaeq	r0, {r1, r3, r5, r6, r8, fp}
     804:	6a530001 	bvs	14c0810 <_Min_Stack_Size+0x14c0410>
     808:	86080009 	strhi	r0, [r8], -r9
     80c:	04080009 	streq	r0, [r8], #-9
     810:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
     814:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     818:	00000000 	andeq	r0, r0, r0
     81c:	00096000 	andeq	r6, r9, r0
     820:	00098008 	andeq	r8, r9, r8
     824:	91000208 	tstls	r0, r8, lsl #4
	...
     830:	00099400 	andeq	r9, r9, r0, lsl #8
     834:	0009a608 	andeq	sl, r9, r8, lsl #12
     838:	50000108 	andpl	r0, r0, r8, lsl #2
     83c:	080009a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, fp}
     840:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
     844:	01f30004 	mvnseq	r0, r4
     848:	00009f50 	andeq	r9, r0, r0, asr pc
     84c:	00000000 	andeq	r0, r0, r0
     850:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
     854:	099e0800 	ldmibeq	lr, {fp}
     858:	00010800 	andeq	r0, r1, r0, lsl #16
     85c:	00099e51 	andeq	r9, r9, r1, asr lr
     860:	0009ac08 	andeq	sl, r9, r8, lsl #24
     864:	f3000408 	vshl.u8	d0, d8, d0
     868:	009f5101 	addseq	r5, pc, r1, lsl #2
     86c:	00000000 	andeq	r0, r0, r0
     870:	94000000 	strls	r0, [r0], #-0
     874:	96080009 	strls	r0, [r8], -r9
     878:	01080009 	tsteq	r8, r9
     87c:	09965200 	ldmibeq	r6, {r9, ip, lr}
     880:	09ac0800 	stmibeq	ip!, {fp}
     884:	00040800 	andeq	r0, r4, r0, lsl #16
     888:	9f5201f3 	svcls	0x005201f3
	...
     894:	080009b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp}
     898:	080009ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, fp}
     89c:	ca500001 	bgt	14008a8 <_Min_Stack_Size+0x14004a8>
     8a0:	d0080009 	andle	r0, r8, r9
     8a4:	04080009 	streq	r0, [r8], #-9
     8a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     8ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8b0:	00000000 	andeq	r0, r0, r0
     8b4:	0009b800 	andeq	fp, r9, r0, lsl #16
     8b8:	0009c208 	andeq	ip, r9, r8, lsl #4
     8bc:	51000108 	tstpl	r0, r8, lsl #2
     8c0:	080009c2 	stmdaeq	r0, {r1, r6, r7, r8, fp}
     8c4:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
     8c8:	01f30004 	mvnseq	r0, r4
     8cc:	00009f51 	andeq	r9, r0, r1, asr pc
     8d0:	00000000 	andeq	r0, r0, r0
     8d4:	09b80000 	ldmibeq	r8!, {}	; <UNPREDICTABLE>
     8d8:	09ba0800 	ldmibeq	sl!, {fp}
     8dc:	00010800 	andeq	r0, r1, r0, lsl #16
     8e0:	0009ba52 	andeq	fp, r9, r2, asr sl
     8e4:	0009d008 	andeq	sp, r9, r8
     8e8:	f3000408 	vshl.u8	d0, d8, d0
     8ec:	009f5201 	addseq	r5, pc, r1, lsl #4
     8f0:	00000000 	andeq	r0, r0, r0
     8f4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     8f8:	fa080009 	blx	200924 <_Min_Stack_Size+0x200524>
     8fc:	01080009 	tsteq	r8, r9
     900:	09fa5000 	ldmibeq	sl!, {ip, lr}^
     904:	09fe0800 	ldmibeq	lr!, {fp}^
     908:	00040800 	andeq	r0, r4, r0, lsl #16
     90c:	9f5001f3 	svcls	0x005001f3
	...
     918:	080009e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp}
     91c:	080009f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp}
     920:	f8510001 			; <UNDEFINED> instruction: 0xf8510001
     924:	fe080009 	cdp2	0, 0, cr0, cr8, cr9, {0}
     928:	04080009 	streq	r0, [r8], #-9
     92c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     930:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     934:	00000000 	andeq	r0, r0, r0
     938:	0009e800 	andeq	lr, r9, r0, lsl #16
     93c:	0009f208 	andeq	pc, r9, r8, lsl #4
     940:	30000208 	andcc	r0, r0, r8, lsl #4
     944:	0009f29f 	muleq	r9, pc, r2	; <UNPREDICTABLE>
     948:	0009f608 	andeq	pc, r9, r8, lsl #12
     94c:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
     950:	ffff1100 			; <UNDEFINED> instruction: 0xffff1100
     954:	9f1a44ff 	svcls	0x001a44ff
     958:	080009f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, fp}
     95c:	080009fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, fp}
     960:	fa520001 	blx	148096c <_Min_Stack_Size+0x148056c>
     964:	fe080009 	cdp2	0, 0, cr0, cr8, cr9, {0}
     968:	01080009 	tsteq	r8, r9
     96c:	00005000 	andeq	r5, r0, r0
     970:	00000000 	andeq	r0, r0, r0
     974:	0a000000 	beq	97c <_Min_Stack_Size+0x57c>
     978:	0a120800 	beq	482980 <_Min_Stack_Size+0x482580>
     97c:	00010800 	andeq	r0, r1, r0, lsl #16
     980:	000a1250 	andeq	r1, sl, r0, asr r2
     984:	000a1608 	andeq	r1, sl, r8, lsl #12
     988:	f3000408 	vshl.u8	d0, d8, d0
     98c:	009f5001 	addseq	r5, pc, r1
	...
     998:	1008000a 	andne	r0, r8, sl
     99c:	0108000a 	tsteq	r8, sl
     9a0:	0a105100 	beq	414da8 <_Min_Stack_Size+0x4149a8>
     9a4:	0a160800 	beq	5829ac <_Min_Stack_Size+0x5825ac>
     9a8:	00040800 	andeq	r0, r4, r0, lsl #16
     9ac:	9f5101f3 	svcls	0x005101f3
	...
     9b8:	08000a00 	stmdaeq	r0, {r9, fp}
     9bc:	08000a0a 	stmdaeq	r0, {r1, r3, r9, fp}
     9c0:	9f300002 	svcls	0x00300002
     9c4:	08000a0a 	stmdaeq	r0, {r1, r3, r9, fp}
     9c8:	08000a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp}
     9cc:	00720009 	rsbseq	r0, r2, r9
     9d0:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
     9d4:	0e9f1a07 	vfnmseq.f32	s2, s30, s14
     9d8:	1208000a 	andne	r0, r8, #10
     9dc:	0108000a 	tsteq	r8, sl
     9e0:	0a125200 	beq	4951e8 <_Min_Stack_Size+0x494de8>
     9e4:	0a160800 	beq	5829ec <_Min_Stack_Size+0x5825ec>
     9e8:	00010800 	andeq	r0, r1, r0, lsl #16
     9ec:	00000050 	andeq	r0, r0, r0, asr r0
     9f0:	00000000 	andeq	r0, r0, r0
     9f4:	000a1800 	andeq	r1, sl, r0, lsl #16
     9f8:	000a2808 	andeq	r2, sl, r8, lsl #16
     9fc:	50000108 	andpl	r0, r0, r8, lsl #2
     a00:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
     a04:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
     a08:	01f30004 	mvnseq	r0, r4
     a0c:	00009f50 	andeq	r9, r0, r0, asr pc
     a10:	00000000 	andeq	r0, r0, r0
     a14:	0a180000 	beq	600a1c <_Min_Stack_Size+0x60061c>
     a18:	0a220800 	beq	882a20 <_Min_Stack_Size+0x882620>
     a1c:	00020800 	andeq	r0, r2, r0, lsl #16
     a20:	0a229f30 	beq	8a86e8 <_Min_Stack_Size+0x8a82e8>
     a24:	0a280800 	beq	a02a2c <_Min_Stack_Size+0xa0262c>
     a28:	00010800 	andeq	r0, r1, r0, lsl #16
     a2c:	000a2852 	andeq	r2, sl, r2, asr r8
     a30:	000a2c08 	andeq	r2, sl, r8, lsl #24
     a34:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     a40:	08000a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp}
     a44:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
     a48:	4c500001 	mrrcmi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     a4c:	5008000a 	andpl	r0, r8, sl
     a50:	0408000a 	streq	r0, [r8], #-10
     a54:	5001f300 	andpl	pc, r1, r0, lsl #6
     a58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a5c:	00000000 	andeq	r0, r0, r0
     a60:	000a3c00 	andeq	r3, sl, r0, lsl #24
     a64:	000a4608 	andeq	r4, sl, r8, lsl #12
     a68:	30000208 	andcc	r0, r0, r8, lsl #4
     a6c:	000a469f 	muleq	sl, pc, r6	; <UNPREDICTABLE>
     a70:	000a4c08 	andeq	r4, sl, r8, lsl #24
     a74:	52000108 	andpl	r0, r0, #8, 2
     a78:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
     a7c:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
     a80:	00500001 	subseq	r0, r0, r1
     a84:	00000000 	andeq	r0, r0, r0
     a88:	50000000 	andpl	r0, r0, r0
     a8c:	6008000a 	andvs	r0, r8, sl
     a90:	0108000a 	tsteq	r8, sl
     a94:	0a605000 	beq	1814a9c <_Min_Stack_Size+0x181469c>
     a98:	0a640800 	beq	1902aa0 <_Min_Stack_Size+0x19026a0>
     a9c:	00040800 	andeq	r0, r4, r0, lsl #16
     aa0:	9f5001f3 	svcls	0x005001f3
	...
     aac:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
     ab0:	08000a5a 	stmdaeq	r0, {r1, r3, r4, r6, r9, fp}
     ab4:	9f300002 	svcls	0x00300002
     ab8:	08000a5a 	stmdaeq	r0, {r1, r3, r4, r6, r9, fp}
     abc:	08000a60 	stmdaeq	r0, {r5, r6, r9, fp}
     ac0:	60520001 	subsvs	r0, r2, r1
     ac4:	6408000a 	strvs	r0, [r8], #-10
     ac8:	0108000a 	tsteq	r8, sl
     acc:	00005000 	andeq	r5, r0, r0
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	0a640000 	beq	1900adc <_Min_Stack_Size+0x19006dc>
     ad8:	0a760800 	beq	1d82ae0 <_Min_Stack_Size+0x1d826e0>
     adc:	00010800 	andeq	r0, r1, r0, lsl #16
     ae0:	000a7650 	andeq	r7, sl, r0, asr r6
     ae4:	000a7a08 	andeq	r7, sl, r8, lsl #20
     ae8:	f3000408 	vshl.u8	d0, d8, d0
     aec:	009f5001 	addseq	r5, pc, r1
     af0:	00000000 	andeq	r0, r0, r0
     af4:	64000000 	strvs	r0, [r0], #-0
     af8:	6e08000a 	cdpvs	0, 0, cr0, cr8, cr10, {0}
     afc:	0208000a 	andeq	r0, r8, #10
     b00:	6e9f3000 	cdpvs	0, 9, cr3, cr15, cr0, {0}
     b04:	7608000a 	strvc	r0, [r8], -sl
     b08:	0108000a 	tsteq	r8, sl
     b0c:	0a765200 	beq	1d95314 <_Min_Stack_Size+0x1d94f14>
     b10:	0a7a0800 	beq	1e82b18 <_Min_Stack_Size+0x1e82718>
     b14:	00010800 	andeq	r0, r1, r0, lsl #16
     b18:	00000050 	andeq	r0, r0, r0, asr r0
     b1c:	00000000 	andeq	r0, r0, r0
     b20:	000a7c00 	andeq	r7, sl, r0, lsl #24
     b24:	000a8808 	andeq	r8, sl, r8, lsl #16
     b28:	30000208 	andcc	r0, r0, r8, lsl #4
     b2c:	000a889f 	muleq	sl, pc, r8	; <UNPREDICTABLE>
     b30:	000a8c08 	andeq	r8, sl, r8, lsl #24
     b34:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
     b38:	9f1a3c00 	svcls	0x001a3c00
     b3c:	08000a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp}
     b40:	08000a9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, fp}
     b44:	ac520001 	mrrcge	0, 0, r0, r2, cr1
     b48:	b408000a 	strlt	r0, [r8], #-10
     b4c:	0608000a 	streq	r0, [r8], -sl
     b50:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
     b54:	b49f1af0 	ldrlt	r1, [pc], #2800	; b5c <_Min_Stack_Size+0x75c>
     b58:	b608000a 	strlt	r0, [r8], -sl
     b5c:	0108000a 	tsteq	r8, sl
     b60:	0abc5400 	beq	fef15b68 <_estack+0xdeee5b68>
     b64:	0ac00800 	beq	ff002b6c <_estack+0xdefd2b6c>
     b68:	00070800 	andeq	r0, r7, r0, lsl #16
     b6c:	000a0074 	andeq	r0, sl, r4, ror r0
     b70:	c09f1a1c 	addsgt	r1, pc, ip, lsl sl	; <UNPREDICTABLE>
     b74:	c208000a 	andgt	r0, r8, #10
     b78:	0108000a 	tsteq	r8, sl
     b7c:	0aca5400 	beq	ff295b84 <_estack+0xdf265b84>
     b80:	0ad20800 	beq	ff482b88 <_estack+0xdf452b88>
     b84:	00070800 	andeq	r0, r7, r0, lsl #16
     b88:	000a0072 	andeq	r0, sl, r2, ror r0
     b8c:	d29f1ae0 	addsle	r1, pc, #224, 20	; 0xe0000
     b90:	ea08000a 	b	200bc0 <_Min_Stack_Size+0x2007c0>
     b94:	0108000a 	tsteq	r8, sl
     b98:	00005200 	andeq	r5, r0, r0, lsl #4
     b9c:	00000000 	andeq	r0, r0, r0
     ba0:	0a7c0000 	beq	1f00ba8 <_Min_Stack_Size+0x1f007a8>
     ba4:	0ab60800 	beq	fed82bac <_estack+0xded52bac>
     ba8:	00020800 	andeq	r0, r2, r0, lsl #16
     bac:	0ab69f30 	beq	feda8874 <_estack+0xded78874>
     bb0:	0abc0800 	beq	fef02bb8 <_estack+0xdeed2bb8>
     bb4:	00060800 	andeq	r0, r6, r0, lsl #16
     bb8:	ff080074 			; <UNDEFINED> instruction: 0xff080074
     bbc:	0ac29f1a 	beq	ff0a882c <_estack+0xdf07882c>
     bc0:	0ac60800 	beq	ff182bc8 <_estack+0xdf152bc8>
     bc4:	00060800 	andeq	r0, r6, r0, lsl #16
     bc8:	ff080074 			; <UNDEFINED> instruction: 0xff080074
     bcc:	0ad49f1a 	beq	ff52883c <_estack+0xdf4f883c>
     bd0:	0ada0800 	beq	ff682bd8 <_estack+0xdf652bd8>
     bd4:	00060800 	andeq	r0, r6, r0, lsl #16
     bd8:	ff080073 			; <UNDEFINED> instruction: 0xff080073
     bdc:	0ada9f1a 	beq	ff6a884c <_estack+0xdf67884c>
     be0:	0b2c0800 	bleq	b02be8 <_Min_Stack_Size+0xb027e8>
     be4:	00020800 	andeq	r0, r2, r0, lsl #16
     be8:	00009f30 	andeq	r9, r0, r0, lsr pc
     bec:	00000000 	andeq	r0, r0, r0
     bf0:	0a7c0000 	beq	1f00bf8 <_Min_Stack_Size+0x1f007f8>
     bf4:	0a9e0800 	beq	fe782bfc <_estack+0xde752bfc>
     bf8:	00020800 	andeq	r0, r2, r0, lsl #16
     bfc:	0ada9f30 	beq	ff6a88c4 <_estack+0xdf6788c4>
     c00:	0b220800 	bleq	882c08 <_Min_Stack_Size+0x882808>
     c04:	00020800 	andeq	r0, r2, r0, lsl #16
     c08:	0b229f30 	bleq	8a88d0 <_Min_Stack_Size+0x8a84d0>
     c0c:	0b280800 	bleq	a02c14 <_Min_Stack_Size+0xa02814>
     c10:	00010800 	andeq	r0, r1, r0, lsl #16
     c14:	00000051 	andeq	r0, r0, r1, asr r0
     c18:	00000000 	andeq	r0, r0, r0
     c1c:	000a7c00 	andeq	r7, sl, r0, lsl #24
     c20:	000a9e08 	andeq	r9, sl, r8, lsl #28
     c24:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     c28:	000ada9f 	muleq	sl, pc, sl	; <UNPREDICTABLE>
     c2c:	000b2208 	andeq	r2, fp, r8, lsl #4
     c30:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     c34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c38:	00000000 	andeq	r0, r0, r0
     c3c:	000a7c00 	andeq	r7, sl, r0, lsl #24
     c40:	000a9e08 	andeq	r9, sl, r8, lsl #28
     c44:	30000208 	andcc	r0, r0, r8, lsl #4
     c48:	000ada9f 	muleq	sl, pc, sl	; <UNPREDICTABLE>
     c4c:	000ae808 	andeq	lr, sl, r8, lsl #16
     c50:	30000208 	andcc	r0, r0, r8, lsl #4
     c54:	000ae89f 	muleq	sl, pc, r8	; <UNPREDICTABLE>
     c58:	000af008 	andeq	pc, sl, r8
     c5c:	74000908 	strvc	r0, [r0], #-2312	; 0x908
     c60:	24424000 	strbcs	r4, [r2], #-0
     c64:	9f25461a 	svcls	0x0025461a
	...
     c70:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
     c74:	08000a9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, fp}
     c78:	9f320002 	svcls	0x00320002
     c7c:	08000ada 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, fp}
     c80:	08000b06 	stmdaeq	r0, {r1, r2, r8, r9, fp}
     c84:	9f320002 	svcls	0x00320002
     c88:	08000b06 	stmdaeq	r0, {r1, r2, r8, r9, fp}
     c8c:	08000b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp}
     c90:	00520001 	subseq	r0, r2, r1
     c94:	00000000 	andeq	r0, r0, r0
     c98:	2c000000 	stccs	0, cr0, [r0], {-0}
     c9c:	5c08000b 	stcpl	0, cr0, [r8], {11}
     ca0:	0108000b 	tsteq	r8, fp
     ca4:	0b5c5000 	bleq	1714cac <_Min_Stack_Size+0x17148ac>
     ca8:	0b640800 	bleq	1902cb0 <_Min_Stack_Size+0x19028b0>
     cac:	00040800 	andeq	r0, r4, r0, lsl #16
     cb0:	9f5001f3 	svcls	0x005001f3
	...
     cbc:	08000b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp}
     cc0:	08000b44 	stmdaeq	r0, {r2, r6, r8, r9, fp}
     cc4:	9f300002 	svcls	0x00300002
     cc8:	08000b44 	stmdaeq	r0, {r2, r6, r8, r9, fp}
     ccc:	08000b50 	stmdaeq	r0, {r4, r6, r8, r9, fp}
     cd0:	00520001 	subseq	r0, r2, r1
     cd4:	00000000 	andeq	r0, r0, r0
     cd8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     cdc:	9208000b 	andls	r0, r8, #11
     ce0:	0108000b 	tsteq	r8, fp
     ce4:	0b925000 	bleq	fe494cec <_estack+0xde464cec>
     ce8:	0b9c0800 	bleq	fe702cf0 <_estack+0xde6d2cf0>
     cec:	00030800 	andeq	r0, r3, r0, lsl #16
     cf0:	9c9f0170 	ldflss	f0, [pc], {112}	; 0x70
     cf4:	a208000b 	andge	r0, r8, #11
     cf8:	0408000b 	streq	r0, [r8], #-11
     cfc:	5001f300 	andpl	pc, r1, r0, lsl #6
     d00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d04:	00000000 	andeq	r0, r0, r0
     d08:	000b8800 	andeq	r8, fp, r0, lsl #16
     d0c:	000b9608 	andeq	r9, fp, r8, lsl #12
     d10:	30000208 	andcc	r0, r0, r8, lsl #4
     d14:	000b969f 	muleq	fp, pc, r6	; <UNPREDICTABLE>
     d18:	000b9c08 	andeq	r9, fp, r8, lsl #24
     d1c:	52000108 	andpl	r0, r0, #8, 2
     d20:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
     d24:	08000ba2 	stmdaeq	r0, {r1, r5, r7, r8, r9, fp}
     d28:	00500001 	subseq	r0, r0, r1
     d2c:	00000000 	andeq	r0, r0, r0
     d30:	a4000000 	strge	r0, [r0], #-0
     d34:	ae08000b 	cdpge	0, 0, cr0, cr8, cr11, {0}
     d38:	0108000b 	tsteq	r8, fp
     d3c:	0bae5000 	bleq	feb94d44 <_estack+0xdeb64d44>
     d40:	0bba0800 	bleq	fee82d48 <_estack+0xdee52d48>
     d44:	00030800 	andeq	r0, r3, r0, lsl #16
     d48:	ba9f0170 	blt	fe7c1310 <_estack+0xde791310>
     d4c:	c008000b 	andgt	r0, r8, fp
     d50:	0408000b 	streq	r0, [r8], #-11
     d54:	5001f300 	andpl	pc, r1, r0, lsl #6
     d58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d5c:	00000000 	andeq	r0, r0, r0
     d60:	000ba400 	andeq	sl, fp, r0, lsl #8
     d64:	000bb208 	andeq	fp, fp, r8, lsl #4
     d68:	30000208 	andcc	r0, r0, r8, lsl #4
     d6c:	000bb29f 	muleq	fp, pc, r2	; <UNPREDICTABLE>
     d70:	000bba08 	andeq	fp, fp, r8, lsl #20
     d74:	52000108 	andpl	r0, r0, #8, 2
     d78:	08000bba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, fp}
     d7c:	08000bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp}
     d80:	00500001 	subseq	r0, r0, r1
     d84:	00000000 	andeq	r0, r0, r0
     d88:	c0000000 	andgt	r0, r0, r0
     d8c:	d208000b 	andle	r0, r8, #11
     d90:	0108000b 	tsteq	r8, fp
     d94:	0bd25000 	bleq	ff494d9c <_estack+0xdf464d9c>
     d98:	0bd80800 	bleq	ff602da0 <_estack+0xdf5d2da0>
     d9c:	00040800 	andeq	r0, r4, r0, lsl #16
     da0:	9f5001f3 	svcls	0x005001f3
	...
     dac:	08000bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp}
     db0:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
     db4:	9f300002 	svcls	0x00300002
     db8:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
     dbc:	08000bd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, fp}
     dc0:	d2520001 	subsle	r0, r2, #1
     dc4:	d808000b 	stmdale	r8, {r0, r1, r3}
     dc8:	0108000b 	tsteq	r8, fp
     dcc:	00005000 	andeq	r5, r0, r0
     dd0:	00000000 	andeq	r0, r0, r0
     dd4:	0bd80000 	bleq	ff600ddc <_estack+0xdf5d0ddc>
     dd8:	0bea0800 	bleq	ffa82de0 <_estack+0xdfa52de0>
     ddc:	00010800 	andeq	r0, r1, r0, lsl #16
     de0:	000bea50 	andeq	lr, fp, r0, asr sl
     de4:	000bf008 	andeq	pc, fp, r8
     de8:	f3000408 	vshl.u8	d0, d8, d0
     dec:	009f5001 	addseq	r5, pc, r1
     df0:	00000000 	andeq	r0, r0, r0
     df4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     df8:	e408000b 	str	r0, [r8], #-11
     dfc:	0208000b 	andeq	r0, r8, #11
     e00:	e49f3000 	ldr	r3, [pc], #0	; e08 <_Min_Stack_Size+0xa08>
     e04:	ea08000b 	b	200e38 <_Min_Stack_Size+0x200a38>
     e08:	0108000b 	tsteq	r8, fp
     e0c:	0bea5200 	bleq	ffa95614 <_estack+0xdfa65614>
     e10:	0bf00800 	bleq	ffc02e18 <_estack+0xdfbd2e18>
     e14:	00010800 	andeq	r0, r1, r0, lsl #16
     e18:	00000050 	andeq	r0, r0, r0, asr r0
     e1c:	00000000 	andeq	r0, r0, r0
     e20:	000bf000 	andeq	pc, fp, r0
     e24:	000c0208 	andeq	r0, ip, r8, lsl #4
     e28:	50000108 	andpl	r0, r0, r8, lsl #2
     e2c:	08000c02 	stmdaeq	r0, {r1, sl, fp}
     e30:	08000c08 	stmdaeq	r0, {r3, sl, fp}
     e34:	01f30004 	mvnseq	r0, r4
     e38:	00009f50 	andeq	r9, r0, r0, asr pc
     e3c:	00000000 	andeq	r0, r0, r0
     e40:	0bf00000 	bleq	ffc00e48 <_estack+0xdfbd0e48>
     e44:	0bfc0800 	bleq	fff02e4c <_estack+0xdfed2e4c>
     e48:	00020800 	andeq	r0, r2, r0, lsl #16
     e4c:	0bfc9f30 	bleq	fff28b14 <_estack+0xdfef8b14>
     e50:	0c020800 	stceq	8, cr0, [r2], {-0}
     e54:	00010800 	andeq	r0, r1, r0, lsl #16
     e58:	000c0252 	andeq	r0, ip, r2, asr r2
     e5c:	000c0808 	andeq	r0, ip, r8, lsl #16
     e60:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     e6c:	08000c14 	stmdaeq	r0, {r2, r4, sl, fp}
     e70:	08000c24 	stmdaeq	r0, {r2, r5, sl, fp}
     e74:	24500001 	ldrbcs	r0, [r0], #-1
     e78:	2808000c 	stmdacs	r8, {r2, r3}
     e7c:	0408000c 	streq	r0, [r8], #-12
     e80:	5001f300 	andpl	pc, r1, r0, lsl #6
     e84:	000c289f 	muleq	ip, pc, r8	; <UNPREDICTABLE>
     e88:	000c2a08 	andeq	r2, ip, r8, lsl #20
     e8c:	50000108 	andpl	r0, r0, r8, lsl #2
     e90:	08000c2a 	stmdaeq	r0, {r1, r3, r5, sl, fp}
     e94:	08000c2e 	stmdaeq	r0, {r1, r2, r3, r5, sl, fp}
     e98:	01f30004 	mvnseq	r0, r4
     e9c:	00009f50 	andeq	r9, r0, r0, asr pc
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	0c300000 	ldceq	0, cr0, [r0], #-0
     ea8:	0c400800 	mcrreq	8, 0, r0, r0, cr0
     eac:	00010800 	andeq	r0, r1, r0, lsl #16
     eb0:	000c4050 	andeq	r4, ip, r0, asr r0
     eb4:	000c4408 	andeq	r4, ip, r8, lsl #8
     eb8:	f3000408 	vshl.u8	d0, d8, d0
     ebc:	449f5001 	ldrmi	r5, [pc], #1	; ec4 <_Min_Stack_Size+0xac4>
     ec0:	4608000c 	strmi	r0, [r8], -ip
     ec4:	0108000c 	tsteq	r8, ip
     ec8:	0c465000 	mareq	acc0, r5, r6
     ecc:	0c4a0800 	mcrreq	8, 0, r0, sl, cr0
     ed0:	00040800 	andeq	r0, r4, r0, lsl #16
     ed4:	9f5001f3 	svcls	0x005001f3
	...
     ee0:	08000c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp}
     ee4:	08000c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp}
     ee8:	5c500001 	mrrcpl	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     eec:	6008000c 	andvs	r0, r8, ip
     ef0:	0408000c 	streq	r0, [r8], #-12
     ef4:	5001f300 	andpl	pc, r1, r0, lsl #6
     ef8:	000c609f 	muleq	ip, pc, r0	; <UNPREDICTABLE>
     efc:	000c6208 	andeq	r6, ip, r8, lsl #4
     f00:	50000108 	andpl	r0, r0, r8, lsl #2
     f04:	08000c62 	stmdaeq	r0, {r1, r5, r6, sl, fp}
     f08:	08000c66 	stmdaeq	r0, {r1, r2, r5, r6, sl, fp}
     f0c:	01f30004 	mvnseq	r0, r4
     f10:	00009f50 	andeq	r9, r0, r0, asr pc
     f14:	00000000 	andeq	r0, r0, r0
     f18:	0c680000 	stcleq	0, cr0, [r8], #-0
     f1c:	0c780800 	ldcleq	8, cr0, [r8], #-0
     f20:	00010800 	andeq	r0, r1, r0, lsl #16
     f24:	000c7850 	andeq	r7, ip, r0, asr r8
     f28:	000c7c08 	andeq	r7, ip, r8, lsl #24
     f2c:	f3000408 	vshl.u8	d0, d8, d0
     f30:	7c9f5001 	ldcvc	0, cr5, [pc], {1}
     f34:	7e08000c 	cdpvc	0, 0, cr0, cr8, cr12, {0}
     f38:	0108000c 	tsteq	r8, ip
     f3c:	0c7e5000 	ldcleq	0, cr5, [lr], #-0
     f40:	0c820800 	stceq	8, cr0, [r2], {0}
     f44:	00040800 	andeq	r0, r4, r0, lsl #16
     f48:	9f5001f3 	svcls	0x005001f3
	...
     f54:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
     f58:	08000c94 	stmdaeq	r0, {r2, r4, r7, sl, fp}
     f5c:	94500001 	ldrbls	r0, [r0], #-1
     f60:	9808000c 	stmdals	r8, {r2, r3}
     f64:	0408000c 	streq	r0, [r8], #-12
     f68:	5001f300 	andpl	pc, r1, r0, lsl #6
     f6c:	000c989f 	muleq	ip, pc, r8	; <UNPREDICTABLE>
     f70:	000c9a08 	andeq	r9, ip, r8, lsl #20
     f74:	50000108 	andpl	r0, r0, r8, lsl #2
     f78:	08000c9a 	stmdaeq	r0, {r1, r3, r4, r7, sl, fp}
     f7c:	08000c9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, sl, fp}
     f80:	01f30004 	mvnseq	r0, r4
     f84:	00009f50 	andeq	r9, r0, r0, asr pc
     f88:	00000000 	andeq	r0, r0, r0
     f8c:	0ca00000 	stceq	0, cr0, [r0]
     f90:	0cb00800 	ldceq	8, cr0, [r0]
     f94:	00010800 	andeq	r0, r1, r0, lsl #16
     f98:	000cb050 	andeq	fp, ip, r0, asr r0
     f9c:	000cb408 	andeq	fp, ip, r8, lsl #8
     fa0:	f3000408 	vshl.u8	d0, d8, d0
     fa4:	b49f5001 	ldrlt	r5, [pc], #1	; fac <_Min_Stack_Size+0xbac>
     fa8:	b608000c 	strlt	r0, [r8], -ip
     fac:	0108000c 	tsteq	r8, ip
     fb0:	0cb65000 	ldceq	0, cr5, [r6]
     fb4:	0cba0800 	ldceq	8, cr0, [sl]
     fb8:	00040800 	andeq	r0, r4, r0, lsl #16
     fbc:	9f5001f3 	svcls	0x005001f3
	...
     fc8:	08000cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp}
     fcc:	08000ccc 	stmdaeq	r0, {r2, r3, r6, r7, sl, fp}
     fd0:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     fd4:	d008000c 	andle	r0, r8, ip
     fd8:	0408000c 	streq	r0, [r8], #-12
     fdc:	5001f300 	andpl	pc, r1, r0, lsl #6
     fe0:	000cd09f 	muleq	ip, pc, r0	; <UNPREDICTABLE>
     fe4:	000cd208 	andeq	sp, ip, r8, lsl #4
     fe8:	50000108 	andpl	r0, r0, r8, lsl #2
     fec:	08000cd2 	stmdaeq	r0, {r1, r4, r6, r7, sl, fp}
     ff0:	08000cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp}
     ff4:	01f30004 	mvnseq	r0, r4
     ff8:	00009f50 	andeq	r9, r0, r0, asr pc
     ffc:	00000000 	andeq	r0, r0, r0
    1000:	0cd80000 	ldcleq	0, cr0, [r8], {0}
    1004:	0ce80800 	stcleq	8, cr0, [r8]
    1008:	00010800 	andeq	r0, r1, r0, lsl #16
    100c:	000ce850 	andeq	lr, ip, r0, asr r8
    1010:	000cec08 	andeq	lr, ip, r8, lsl #24
    1014:	f3000408 	vshl.u8	d0, d8, d0
    1018:	ec9f5001 	ldc	0, cr5, [pc], {1}
    101c:	ee08000c 	cdp	0, 0, cr0, cr8, cr12, {0}
    1020:	0108000c 	tsteq	r8, ip
    1024:	0cee5000 	stcleq	0, cr5, [lr]
    1028:	0cf20800 	ldcleq	8, cr0, [r2]
    102c:	00040800 	andeq	r0, r4, r0, lsl #16
    1030:	9f5001f3 	svcls	0x005001f3
	...
    103c:	08000cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp}
    1040:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
    1044:	04500001 	ldrbeq	r0, [r0], #-1
    1048:	0808000d 	stmdaeq	r8, {r0, r2, r3}
    104c:	0408000d 	streq	r0, [r8], #-13
    1050:	5001f300 	andpl	pc, r1, r0, lsl #6
    1054:	000d089f 	muleq	sp, pc, r8	; <UNPREDICTABLE>
    1058:	000d0a08 	andeq	r0, sp, r8, lsl #20
    105c:	50000108 	andpl	r0, r0, r8, lsl #2
    1060:	08000d0a 	stmdaeq	r0, {r1, r3, r8, sl, fp}
    1064:	08000d0e 	stmdaeq	r0, {r1, r2, r3, r8, sl, fp}
    1068:	01f30004 	mvnseq	r0, r4
    106c:	00009f50 	andeq	r9, r0, r0, asr pc
    1070:	00000000 	andeq	r0, r0, r0
    1074:	0d100000 	ldceq	0, cr0, [r0, #-0]
    1078:	0d200800 	stceq	8, cr0, [r0, #-0]
    107c:	00010800 	andeq	r0, r1, r0, lsl #16
    1080:	000d2050 	andeq	r2, sp, r0, asr r0
    1084:	000d2408 	andeq	r2, sp, r8, lsl #8
    1088:	f3000408 	vshl.u8	d0, d8, d0
    108c:	249f5001 	ldrcs	r5, [pc], #1	; 1094 <_Min_Stack_Size+0xc94>
    1090:	2608000d 	strcs	r0, [r8], -sp
    1094:	0108000d 	tsteq	r8, sp
    1098:	0d265000 	stceq	0, cr5, [r6, #-0]
    109c:	0d2a0800 	stceq	8, cr0, [sl, #-0]
    10a0:	00040800 	andeq	r0, r4, r0, lsl #16
    10a4:	9f5001f3 	svcls	0x005001f3
	...
    10b0:	08000d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp}
    10b4:	08000d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp}
    10b8:	3c500001 	mrrccc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    10bc:	4008000d 	andmi	r0, r8, sp
    10c0:	0408000d 	streq	r0, [r8], #-13
    10c4:	5001f300 	andpl	pc, r1, r0, lsl #6
    10c8:	000d409f 	muleq	sp, pc, r0	; <UNPREDICTABLE>
    10cc:	000d4208 	andeq	r4, sp, r8, lsl #4
    10d0:	50000108 	andpl	r0, r0, r8, lsl #2
    10d4:	08000d42 	stmdaeq	r0, {r1, r6, r8, sl, fp}
    10d8:	08000d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp}
    10dc:	01f30004 	mvnseq	r0, r4
    10e0:	00009f50 	andeq	r9, r0, r0, asr pc
    10e4:	00000000 	andeq	r0, r0, r0
    10e8:	0d480000 	stcleq	0, cr0, [r8, #-0]
    10ec:	0d580800 	ldcleq	8, cr0, [r8, #-0]
    10f0:	00010800 	andeq	r0, r1, r0, lsl #16
    10f4:	000d5850 	andeq	r5, sp, r0, asr r8
    10f8:	000d5c08 	andeq	r5, sp, r8, lsl #24
    10fc:	f3000408 	vshl.u8	d0, d8, d0
    1100:	5c9f5001 	ldcpl	0, cr5, [pc], {1}
    1104:	5e08000d 	cdppl	0, 0, cr0, cr8, cr13, {0}
    1108:	0108000d 	tsteq	r8, sp
    110c:	0d5e5000 	ldcleq	0, cr5, [lr, #-0]
    1110:	0d620800 	stcleq	8, cr0, [r2, #-0]
    1114:	00040800 	andeq	r0, r4, r0, lsl #16
    1118:	9f5001f3 	svcls	0x005001f3
	...
    1124:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
    1128:	08000d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp}
    112c:	74500001 	ldrbvc	r0, [r0], #-1
    1130:	7808000d 	stmdavc	r8, {r0, r2, r3}
    1134:	0408000d 	streq	r0, [r8], #-13
    1138:	5001f300 	andpl	pc, r1, r0, lsl #6
    113c:	000d789f 	muleq	sp, pc, r8	; <UNPREDICTABLE>
    1140:	000d7a08 	andeq	r7, sp, r8, lsl #20
    1144:	50000108 	andpl	r0, r0, r8, lsl #2
    1148:	08000d7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, sl, fp}
    114c:	08000d7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, fp}
    1150:	01f30004 	mvnseq	r0, r4
    1154:	00009f50 	andeq	r9, r0, r0, asr pc
    1158:	00000000 	andeq	r0, r0, r0
    115c:	0d800000 	stceq	0, cr0, [r0]
    1160:	0d900800 	ldceq	8, cr0, [r0]
    1164:	00010800 	andeq	r0, r1, r0, lsl #16
    1168:	000d9050 	andeq	r9, sp, r0, asr r0
    116c:	000d9408 	andeq	r9, sp, r8, lsl #8
    1170:	f3000408 	vshl.u8	d0, d8, d0
    1174:	949f5001 	ldrls	r5, [pc], #1	; 117c <_Min_Stack_Size+0xd7c>
    1178:	9608000d 	strls	r0, [r8], -sp
    117c:	0108000d 	tsteq	r8, sp
    1180:	0d965000 	ldceq	0, cr5, [r6]
    1184:	0d9a0800 	ldceq	8, cr0, [sl]
    1188:	00040800 	andeq	r0, r4, r0, lsl #16
    118c:	9f5001f3 	svcls	0x005001f3
	...
    1198:	08000d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp}
    119c:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
    11a0:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    11a4:	b008000d 	andlt	r0, r8, sp
    11a8:	0408000d 	streq	r0, [r8], #-13
    11ac:	5001f300 	andpl	pc, r1, r0, lsl #6
    11b0:	000db09f 	muleq	sp, pc, r0	; <UNPREDICTABLE>
    11b4:	000db208 	andeq	fp, sp, r8, lsl #4
    11b8:	50000108 	andpl	r0, r0, r8, lsl #2
    11bc:	08000db2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, fp}
    11c0:	08000db6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, fp}
    11c4:	01f30004 	mvnseq	r0, r4
    11c8:	00009f50 	andeq	r9, r0, r0, asr pc
    11cc:	00000000 	andeq	r0, r0, r0
    11d0:	0db80000 	ldceq	0, cr0, [r8]
    11d4:	0dc80800 	stcleq	8, cr0, [r8]
    11d8:	00010800 	andeq	r0, r1, r0, lsl #16
    11dc:	000dc850 	andeq	ip, sp, r0, asr r8
    11e0:	000dcc08 	andeq	ip, sp, r8, lsl #24
    11e4:	f3000408 	vshl.u8	d0, d8, d0
    11e8:	cc9f5001 	ldcgt	0, cr5, [pc], {1}
    11ec:	ce08000d 	cdpgt	0, 0, cr0, cr8, cr13, {0}
    11f0:	0108000d 	tsteq	r8, sp
    11f4:	0dce5000 	stcleq	0, cr5, [lr]
    11f8:	0dd20800 	ldcleq	8, cr0, [r2]
    11fc:	00040800 	andeq	r0, r4, r0, lsl #16
    1200:	9f5001f3 	svcls	0x005001f3
	...
    120c:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
    1210:	08000de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp}
    1214:	e8500001 	ldmda	r0, {r0}^
    1218:	f808000d 			; <UNDEFINED> instruction: 0xf808000d
    121c:	0408000d 	streq	r0, [r8], #-13
    1220:	5001f300 	andpl	pc, r1, r0, lsl #6
    1224:	000df89f 	muleq	sp, pc, r8	; <UNPREDICTABLE>
    1228:	000e0408 	andeq	r0, lr, r8, lsl #8
    122c:	50000108 	andpl	r0, r0, r8, lsl #2
    1230:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
    1234:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
    1238:	01f30004 	mvnseq	r0, r4
    123c:	00009f50 	andeq	r9, r0, r0, asr pc
    1240:	00000000 	andeq	r0, r0, r0
    1244:	0dd40000 	ldcleq	0, cr0, [r4]
    1248:	0dd60800 	ldcleq	8, cr0, [r6]
    124c:	00020800 	andeq	r0, r2, r0, lsl #16
    1250:	0dd69f30 	ldcleq	15, cr9, [r6, #192]	; 0xc0
    1254:	0de00800 	stcleq	8, cr0, [r0]
    1258:	00010800 	andeq	r0, r1, r0, lsl #16
    125c:	000de053 	andeq	lr, sp, r3, asr r0
    1260:	000de808 	andeq	lr, sp, r8, lsl #16
    1264:	70000508 	andvc	r0, r0, r8, lsl #10
    1268:	9f253500 	svcls	0x00253500
    126c:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
    1270:	08000dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp}
    1274:	fc530001 	mrrc2	0, 0, r0, r3, cr1
    1278:	0408000d 	streq	r0, [r8], #-13
    127c:	0508000e 	streq	r0, [r8, #-14]
    1280:	35007000 	strcc	r7, [r0, #-0]
    1284:	00009f25 	andeq	r9, r0, r5, lsr #30
    1288:	00000000 	andeq	r0, r0, r0
    128c:	0dd40000 	ldcleq	0, cr0, [r4]
    1290:	0dec0800 	stcleq	8, cr0, [ip]
    1294:	00020800 	andeq	r0, r2, r0, lsl #16
    1298:	0dec9f30 	stcleq	15, cr9, [ip, #192]!	; 0xc0
    129c:	0df80800 	ldcleq	8, cr0, [r8]
    12a0:	00010800 	andeq	r0, r1, r0, lsl #16
    12a4:	000df853 	andeq	pc, sp, r3, asr r8	; <UNPREDICTABLE>
    12a8:	000e0608 	andeq	r0, lr, r8, lsl #12
    12ac:	30000208 	andcc	r0, r0, r8, lsl #4
    12b0:	000e069f 	muleq	lr, pc, r6	; <UNPREDICTABLE>
    12b4:	000e1008 	andeq	r1, lr, r8
    12b8:	53000108 	movwpl	r0, #264	; 0x108
	...
    12c4:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
    12c8:	08000dee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, fp}
    12cc:	9f300002 	svcls	0x00300002
    12d0:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
    12d4:	08000e06 	stmdaeq	r0, {r1, r2, r9, sl, fp}
    12d8:	9f300002 	svcls	0x00300002
	...
    12e4:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
    12e8:	08000e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp}
    12ec:	36500001 	ldrbcc	r0, [r0], -r1
    12f0:	3808000e 	stmdacc	r8, {r1, r2, r3}
    12f4:	0408000e 	streq	r0, [r8], #-14
    12f8:	5001f300 	andpl	pc, r1, r0, lsl #6
    12fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1300:	00000000 	andeq	r0, r0, r0
    1304:	000e2400 	andeq	r2, lr, r0, lsl #8
    1308:	000e2e08 	andeq	r2, lr, r8, lsl #28
    130c:	30000208 	andcc	r0, r0, r8, lsl #4
    1310:	000e2e9f 	muleq	lr, pc, lr	; <UNPREDICTABLE>
    1314:	000e3608 	andeq	r3, lr, r8, lsl #12
    1318:	70000b08 	andvc	r0, r0, r8, lsl #22
    131c:	1aff0800 	bne	fffc3324 <_estack+0xdff93324>
    1320:	301a0073 	andscc	r0, sl, r3, ror r0
    1324:	0e369f2e 	cdpeq	15, 3, cr9, cr6, cr14, {1}
    1328:	0e380800 	cdpeq	8, 3, cr0, cr8, cr0, {0}
    132c:	000c0800 	andeq	r0, ip, r0, lsl #16
    1330:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    1334:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    1338:	9f2e301a 	svcls	0x002e301a
	...
    1344:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
    1348:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
    134c:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1350:	c008000e 	andgt	r0, r8, lr
    1354:	0408000e 	streq	r0, [r8], #-14
    1358:	5001f300 	andpl	pc, r1, r0, lsl #6
    135c:	000ec09f 	muleq	lr, pc, r0	; <UNPREDICTABLE>
    1360:	000ec208 	andeq	ip, lr, r8, lsl #4
    1364:	50000108 	andpl	r0, r0, r8, lsl #2
    1368:	08000ec2 	stmdaeq	r0, {r1, r6, r7, r9, sl, fp}
    136c:	08000ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp}
    1370:	01f30004 	mvnseq	r0, r4
    1374:	0ed49f50 	mrceq	15, 6, r9, cr4, cr0, {2}
    1378:	0ed80800 	cdpeq	8, 13, cr0, cr8, cr0, {0}
    137c:	00010800 	andeq	r0, r1, r0, lsl #16
    1380:	000ed850 	andeq	sp, lr, r0, asr r8
    1384:	000eec08 	andeq	lr, lr, r8, lsl #24
    1388:	f3000408 	vshl.u8	d0, d8, d0
    138c:	ec9f5001 	ldc	0, cr5, [pc], {1}
    1390:	f008000e 			; <UNDEFINED> instruction: 0xf008000e
    1394:	0108000e 	tsteq	r8, lr
    1398:	0ef05000 	cdpeq	0, 15, cr5, cr0, cr0, {0}
    139c:	0f040800 	svceq	0x00040800
    13a0:	00040800 	andeq	r0, r4, r0, lsl #16
    13a4:	9f5001f3 	svcls	0x005001f3
    13a8:	08000f04 	stmdaeq	r0, {r2, r8, r9, sl, fp}
    13ac:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
    13b0:	08500001 	ldmdaeq	r0, {r0}^
    13b4:	1c08000f 	stcne	0, cr0, [r8], {15}
    13b8:	0408000f 	streq	r0, [r8], #-15
    13bc:	5001f300 	andpl	pc, r1, r0, lsl #6
    13c0:	000f1c9f 	muleq	pc, pc, ip	; <UNPREDICTABLE>
    13c4:	000f2008 	andeq	r2, pc, r8
    13c8:	50000108 	andpl	r0, r0, r8, lsl #2
    13cc:	08000f20 	stmdaeq	r0, {r5, r8, r9, sl, fp}
    13d0:	08000f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp}
    13d4:	01f30004 	mvnseq	r0, r4
    13d8:	0f349f50 	svceq	0x00349f50
    13dc:	0f360800 	svceq	0x00360800
    13e0:	00010800 	andeq	r0, r1, r0, lsl #16
    13e4:	000f3650 	andeq	r3, pc, r0, asr r6	; <UNPREDICTABLE>
    13e8:	000f4808 	andeq	r4, pc, r8, lsl #16
    13ec:	f3000408 	vshl.u8	d0, d8, d0
    13f0:	489f5001 	ldmmi	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    13f4:	4c08000f 	stcmi	0, cr0, [r8], {15}
    13f8:	0108000f 	tsteq	r8, pc
    13fc:	0f4c5000 	svceq	0x004c5000
    1400:	0f600800 	svceq	0x00600800
    1404:	00040800 	andeq	r0, r4, r0, lsl #16
    1408:	9f5001f3 	svcls	0x005001f3
	...
    1414:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
    1418:	08000f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp}
    141c:	78500001 	ldmdavc	r0, {r0}^
    1420:	2808000f 	stmdacs	r8, {r0, r1, r2, r3}
    1424:	01080010 	tsteq	r8, r0, lsl r0
    1428:	00005400 	andeq	r5, r0, r0, lsl #8
    142c:	00000000 	andeq	r0, r0, r0
    1430:	0f600000 	svceq	0x00600000
    1434:	0f7c0800 	svceq	0x007c0800
    1438:	00010800 	andeq	r0, r1, r0, lsl #16
    143c:	000f7c51 	andeq	r7, pc, r1, asr ip	; <UNPREDICTABLE>
    1440:	000ff408 	andeq	pc, pc, r8, lsl #8
    1444:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1448:	08000ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
    144c:	08001028 	stmdaeq	r0, {r3, r5, ip}
    1450:	01f30004 	mvnseq	r0, r4
    1454:	00009f51 	andeq	r9, r0, r1, asr pc
    1458:	00000000 	andeq	r0, r0, r0
    145c:	0f600000 	svceq	0x00600000
    1460:	0f620800 	svceq	0x00620800
    1464:	00020800 	andeq	r0, r2, r0, lsl #16
    1468:	0f629f30 	svceq	0x00629f30
    146c:	0f680800 	svceq	0x00680800
    1470:	00070800 	andeq	r0, r7, r0, lsl #16
    1474:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    1478:	809f1aff 			; <UNDEFINED> instruction: 0x809f1aff
    147c:	8408000f 	strhi	r0, [r8], #-15
    1480:	0708000f 	streq	r0, [r8, -pc]
    1484:	0a007300 	beq	1e08c <_Min_Stack_Size+0x1dc8c>
    1488:	9f1affff 	svcls	0x001affff
    148c:	08000f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp}
    1490:	08000f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp}
    1494:	08750016 	ldmdaeq	r5!, {r1, r2, r4}^
    1498:	04750294 	ldrbteq	r0, [r5], #-660	; 0x294
    149c:	75210294 	strvc	r0, [r1, #-660]!	; 0x294
    14a0:	2102940a 	tstcs	r2, sl, lsl #8
    14a4:	1affff0a 	bne	10d4 <_Min_Stack_Size+0xcd4>
    14a8:	9f210073 	svcls	0x00210073
    14ac:	08000f9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, fp}
    14b0:	08000f9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, fp}
    14b4:	00730007 	rsbseq	r0, r3, r7
    14b8:	1affff0a 	bne	10e8 <_Min_Stack_Size+0xce8>
    14bc:	000fa29f 	muleq	pc, pc, r2	; <UNPREDICTABLE>
    14c0:	000fa608 	andeq	sl, pc, r8, lsl #12
    14c4:	75000c08 	strvc	r0, [r0, #-3080]	; 0xc08
    14c8:	0a02940c 	beq	a6500 <_Min_Stack_Size+0xa6100>
    14cc:	731affff 	tstvc	sl, #1020	; 0x3fc
    14d0:	a69f2100 	ldrge	r2, [pc], r0, lsl #2
    14d4:	ad08000f 	stcge	0, cr0, [r8, #-60]	; 0xffffffc4
    14d8:	0108000f 	tsteq	r8, pc
    14dc:	0ffa5300 	svceq	0x00fa5300
    14e0:	101e0800 	andsne	r0, lr, r0, lsl #16
    14e4:	00050800 	andeq	r0, r5, r0, lsl #16
    14e8:	24340071 	ldrtcs	r0, [r4], #-113	; 0x71
    14ec:	00101e9f 	mulseq	r0, pc, lr	; <UNPREDICTABLE>
    14f0:	00102208 	andseq	r2, r0, r8, lsl #4
    14f4:	51000108 	tstpl	r0, r8, lsl #2
	...
    1500:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
    1504:	08000fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp}
    1508:	9f300002 	svcls	0x00300002
    150c:	08000fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp}
    1510:	08000fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp}
    1514:	00530001 	subseq	r0, r3, r1
    1518:	00000000 	andeq	r0, r0, r0
    151c:	60000000 	andvs	r0, r0, r0
    1520:	e808000f 	stmda	r8, {r0, r1, r2, r3}
    1524:	0208000f 	andeq	r0, r8, #15
    1528:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
    152c:	0008000f 	andeq	r0, r8, pc
    1530:	01080010 	tsteq	r8, r0, lsl r0
    1534:	00005300 	andeq	r5, r0, r0, lsl #6
    1538:	00000000 	andeq	r0, r0, r0
    153c:	0f600000 	svceq	0x00600000
    1540:	10000800 	andne	r0, r0, r0, lsl #16
    1544:	00020800 	andeq	r0, r2, r0, lsl #16
    1548:	10009f30 	andne	r9, r0, r0, lsr pc
    154c:	10040800 	andne	r0, r4, r0, lsl #16
    1550:	00010800 	andeq	r0, r1, r0, lsl #16
    1554:	00000053 	andeq	r0, r0, r3, asr r0
    1558:	00000000 	andeq	r0, r0, r0
    155c:	00104000 	andseq	r4, r0, r0
    1560:	00104c08 	andseq	r4, r0, r8, lsl #24
    1564:	51000108 	tstpl	r0, r8, lsl #2
    1568:	0800104c 	stmdaeq	r0, {r2, r3, r6, ip}
    156c:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
    1570:	01f30004 	mvnseq	r0, r4
    1574:	00009f51 	andeq	r9, r0, r1, asr pc
    1578:	00000000 	andeq	r0, r0, r0
    157c:	10400000 	subne	r0, r0, r0
    1580:	104a0800 	subne	r0, sl, r0, lsl #16
    1584:	00020800 	andeq	r0, r2, r0, lsl #16
    1588:	104a9f30 	subne	r9, sl, r0, lsr pc
    158c:	10540800 	subsne	r0, r4, r0, lsl #16
    1590:	00070800 	andeq	r0, r7, r0, lsl #16
    1594:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    1598:	5c9f1aff 	vldmiapl	pc, {s2-s256}
    159c:	5e080010 	mcrpl	0, 0, r0, cr8, cr0, {0}
    15a0:	25080010 	strcs	r0, [r8, #-16]
    15a4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    15a8:	02940223 	addseq	r0, r4, #805306370	; 0x30000002
    15ac:	945101f3 	ldrbls	r0, [r1], #-499	; 0x1f3
    15b0:	01f32102 	mvnseq	r2, r2, lsl #2
    15b4:	94042351 	strls	r2, [r4], #-849	; 0x351
    15b8:	01f32102 	mvnseq	r2, r2, lsl #2
    15bc:	94062351 	strls	r2, [r6], #-849	; 0x351
    15c0:	ff0a2102 			; <UNDEFINED> instruction: 0xff0a2102
    15c4:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    15c8:	00009f21 	andeq	r9, r0, r1, lsr #30
    15cc:	00000000 	andeq	r0, r0, r0
    15d0:	108c0000 	addne	r0, ip, r0
    15d4:	109a0800 	addsne	r0, sl, r0, lsl #16
    15d8:	00010800 	andeq	r0, r1, r0, lsl #16
    15dc:	00109a51 	andseq	r9, r0, r1, asr sl
    15e0:	00109e08 	andseq	r9, r0, r8, lsl #28
    15e4:	f3000408 	vshl.u8	d0, d8, d0
    15e8:	009f5101 	addseq	r5, pc, r1, lsl #2
    15ec:	00000000 	andeq	r0, r0, r0
    15f0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    15f4:	dc080010 	stcle	0, cr0, [r8], {16}
    15f8:	01080010 	tsteq	r8, r0, lsl r0
    15fc:	10dc5100 	sbcsne	r5, ip, r0, lsl #2
    1600:	10e00800 	rscne	r0, r0, r0, lsl #16
    1604:	00040800 	andeq	r0, r4, r0, lsl #16
    1608:	9f5101f3 	svcls	0x005101f3
	...
    1614:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
    1618:	080010e2 	stmdaeq	r0, {r1, r5, r6, r7, ip}
    161c:	e2500001 	subs	r0, r0, #1
    1620:	e8080010 	stmda	r8, {r4}
    1624:	04080010 	streq	r0, [r8], #-16
    1628:	5001f300 	andpl	pc, r1, r0, lsl #6
    162c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1630:	00000000 	andeq	r0, r0, r0
    1634:	0010e800 	andseq	lr, r0, r0, lsl #16
    1638:	0010fa08 	andseq	pc, r0, r8, lsl #20
    163c:	51000108 	tstpl	r0, r8, lsl #2
    1640:	080010fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, ip}
    1644:	080010fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, ip}
    1648:	01f30004 	mvnseq	r0, r4
    164c:	00009f51 	andeq	r9, r0, r1, asr pc
    1650:	00000000 	andeq	r0, r0, r0
    1654:	111c0000 	tstne	ip, r0
    1658:	112e0800 	teqne	lr, r0, lsl #16
    165c:	00010800 	andeq	r0, r1, r0, lsl #16
    1660:	00112e51 	andseq	r2, r1, r1, asr lr
    1664:	00113208 	andseq	r3, r1, r8, lsl #4
    1668:	f3000408 	vshl.u8	d0, d8, d0
    166c:	009f5101 	addseq	r5, pc, r1, lsl #2
    1670:	00000000 	andeq	r0, r0, r0
    1674:	34000000 	strcc	r0, [r0], #-0
    1678:	46080011 			; <UNDEFINED> instruction: 0x46080011
    167c:	01080011 	tsteq	r8, r1, lsl r0
    1680:	11465100 	mrsne	r5, (UNDEF: 86)
    1684:	114a0800 	cmpne	sl, r0, lsl #16
    1688:	00040800 	andeq	r0, r4, r0, lsl #16
    168c:	9f5101f3 	svcls	0x005101f3
	...
    1698:	08001190 	stmdaeq	r0, {r4, r7, r8, ip}
    169c:	0800119e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, ip}
    16a0:	9e510001 	cdpls	0, 5, cr0, cr1, cr1, {0}
    16a4:	a2080011 	andge	r0, r8, #17
    16a8:	04080011 	streq	r0, [r8], #-17
    16ac:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    16b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    16b4:	00000000 	andeq	r0, r0, r0
    16b8:	0011dc00 	andseq	sp, r1, r0, lsl #24
    16bc:	0011ee08 	andseq	lr, r1, r8, lsl #28
    16c0:	51000108 	tstpl	r0, r8, lsl #2
    16c4:	080011ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, ip}
    16c8:	080011f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, ip}
    16cc:	01f30004 	mvnseq	r0, r4
    16d0:	00009f51 	andeq	r9, r0, r1, asr pc
    16d4:	00000000 	andeq	r0, r0, r0
    16d8:	12100000 	andsne	r0, r0, #0
    16dc:	121a0800 	andsne	r0, sl, #0, 16
    16e0:	00010800 	andeq	r0, r1, r0, lsl #16
    16e4:	00121a51 	andseq	r1, r2, r1, asr sl
    16e8:	00121e08 	andseq	r1, r2, r8, lsl #28
    16ec:	f3000408 	vshl.u8	d0, d8, d0
    16f0:	1e9f5101 	fmlnee	f5, f7, f1
    16f4:	20080012 	andcs	r0, r8, r2, lsl r0
    16f8:	01080012 	tsteq	r8, r2, lsl r0
    16fc:	12205100 	eorne	r5, r0, #0, 2
    1700:	12240800 	eorne	r0, r4, #0, 16
    1704:	00040800 	andeq	r0, r4, r0, lsl #16
    1708:	9f5101f3 	svcls	0x005101f3
	...
    1714:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
    1718:	0800123a 	stmdaeq	r0, {r1, r3, r4, r5, r9, ip}
    171c:	3a500001 	bcc	1401728 <_Min_Stack_Size+0x1401328>
    1720:	5e080012 	mcrpl	0, 0, r0, cr8, cr2, {0}
    1724:	04080012 	streq	r0, [r8], #-18
    1728:	5001f300 	andpl	pc, r1, r0, lsl #6
    172c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1730:	00000000 	andeq	r0, r0, r0
    1734:	00122400 	andseq	r2, r2, r0, lsl #8
    1738:	00122e08 	andseq	r2, r2, r8, lsl #28
    173c:	51000108 	tstpl	r0, r8, lsl #2
    1740:	0800122e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip}
    1744:	0800125e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, ip}
    1748:	01f30004 	mvnseq	r0, r4
    174c:	00009f51 	andeq	r9, r0, r1, asr pc
    1750:	00000000 	andeq	r0, r0, r0
    1754:	12240000 	eorne	r0, r4, #0
    1758:	12300800 	eorsne	r0, r0, #0, 16
    175c:	00020800 	andeq	r0, r2, r0, lsl #16
    1760:	12309f30 	eorsne	r9, r0, #48, 30	; 0xc0
    1764:	125e0800 	subsne	r0, lr, #0, 16
    1768:	00010800 	andeq	r0, r1, r0, lsl #16
    176c:	00000051 	andeq	r0, r0, r1, asr r0
    1770:	00000000 	andeq	r0, r0, r0
    1774:	00122400 	andseq	r2, r2, r0, lsl #8
    1778:	00123008 	andseq	r3, r2, r8
    177c:	30000208 	andcc	r0, r0, r8, lsl #4
    1780:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1784:	00000000 	andeq	r0, r0, r0
    1788:	00122400 	andseq	r2, r2, r0, lsl #8
    178c:	00123608 	andseq	r3, r2, r8, lsl #12
    1790:	30000208 	andcc	r0, r0, r8, lsl #4
    1794:	0012369f 	mulseq	r2, pc, r6	; <UNPREDICTABLE>
    1798:	00124c08 	andseq	r4, r2, r8, lsl #24
    179c:	53000108 	movwpl	r0, #264	; 0x108
    17a0:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
    17a4:	08001256 	stmdaeq	r0, {r1, r2, r4, r6, r9, ip}
    17a8:	00530001 	subseq	r0, r3, r1
    17ac:	00000000 	andeq	r0, r0, r0
    17b0:	30000000 	andcc	r0, r0, r0
    17b4:	3a080012 	bcc	201804 <_Min_Stack_Size+0x201404>
    17b8:	01080012 	tsteq	r8, r2, lsl r0
    17bc:	123a5000 	eorsne	r5, sl, #0
    17c0:	12420800 	subne	r0, r2, #0, 16
    17c4:	00040800 	andeq	r0, r4, r0, lsl #16
    17c8:	9f5001f3 	svcls	0x005001f3
    17cc:	08001242 	stmdaeq	r0, {r1, r6, r9, ip}
    17d0:	0800125e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, ip}
    17d4:	00500001 	subseq	r0, r0, r1
    17d8:	00000000 	andeq	r0, r0, r0
    17dc:	60000000 	andvs	r0, r0, r0
    17e0:	6a080012 	bvs	201830 <_Min_Stack_Size+0x201430>
    17e4:	01080012 	tsteq	r8, r2, lsl r0
    17e8:	126a5000 	rsbne	r5, sl, #0
    17ec:	126c0800 	rsbne	r0, ip, #0, 16
    17f0:	00040800 	andeq	r0, r4, r0, lsl #16
    17f4:	9f5001f3 	svcls	0x005001f3
	...
    1800:	08001260 	stmdaeq	r0, {r5, r6, r9, ip}
    1804:	08001262 	stmdaeq	r0, {r1, r5, r6, r9, ip}
    1808:	9f300002 	svcls	0x00300002
    180c:	08001262 	stmdaeq	r0, {r1, r5, r6, r9, ip}
    1810:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
    1814:	0071000a 	rsbseq	r0, r1, sl
    1818:	401a0073 	andsmi	r0, sl, r3, ror r0
    181c:	9f2e3024 	svcls	0x002e3024
	...
    1828:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
    182c:	0800126e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, ip}
    1830:	6e510001 	cdpvs	0, 5, cr0, cr1, cr1, {0}
    1834:	74080012 	strvc	r0, [r8], #-18
    1838:	04080012 	streq	r0, [r8], #-18
    183c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1840:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1844:	00000000 	andeq	r0, r0, r0
    1848:	00127400 	andseq	r7, r2, r0, lsl #8
    184c:	0012a808 	andseq	sl, r2, r8, lsl #16
    1850:	50000108 	andpl	r0, r0, r8, lsl #2
    1854:	080012a8 	stmdaeq	r0, {r3, r5, r7, r9, ip}
    1858:	080012b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, ip}
    185c:	01f30004 	mvnseq	r0, r4
    1860:	12b69f50 	adcsne	r9, r6, #80, 30	; 0x140
    1864:	12be0800 	adcsne	r0, lr, #0, 16
    1868:	00010800 	andeq	r0, r1, r0, lsl #16
    186c:	00000050 	andeq	r0, r0, r0, asr r0
    1870:	00000000 	andeq	r0, r0, r0
    1874:	00127400 	andseq	r7, r2, r0, lsl #8
    1878:	00129a08 	andseq	r9, r2, r8, lsl #20
    187c:	51000108 	tstpl	r0, r8, lsl #2
    1880:	0800129a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip}
    1884:	080012b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, ip}
    1888:	01f30004 	mvnseq	r0, r4
    188c:	12b69f51 	adcsne	r9, r6, #324	; 0x144
    1890:	12be0800 	adcsne	r0, lr, #0, 16
    1894:	00010800 	andeq	r0, r1, r0, lsl #16
    1898:	00000051 	andeq	r0, r0, r1, asr r0
    189c:	00000000 	andeq	r0, r0, r0
    18a0:	00127400 	andseq	r7, r2, r0, lsl #8
    18a4:	00129408 	andseq	r9, r2, r8, lsl #8
    18a8:	30000208 	andcc	r0, r0, r8, lsl #4
    18ac:	0012949f 	mulseq	r2, pc, r4	; <UNPREDICTABLE>
    18b0:	00129a08 	andseq	r9, r2, r8, lsl #20
    18b4:	71000908 	tstvc	r0, r8, lsl #18
    18b8:	0a253800 	beq	94f8c0 <_Min_Stack_Size+0x94f4c0>
    18bc:	9f1affff 	svcls	0x001affff
    18c0:	080012a0 	stmdaeq	r0, {r5, r7, r9, ip}
    18c4:	080012b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, ip}
    18c8:	0073000a 	rsbseq	r0, r3, sl
    18cc:	1affff0a 	bne	14fc <_Min_Stack_Size+0x10fc>
    18d0:	9f1a0071 	svcls	0x001a0071
    18d4:	080012b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, ip}
    18d8:	080012be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, ip}
    18dc:	9f300002 	svcls	0x00300002
	...
    18e8:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
    18ec:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
    18f0:	9f300002 	svcls	0x00300002
    18f4:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
    18f8:	08001286 	stmdaeq	r0, {r1, r2, r7, r9, ip}
    18fc:	00710009 	rsbseq	r0, r1, r9
    1900:	ff0a1a4f 			; <UNDEFINED> instruction: 0xff0a1a4f
    1904:	869f1aff 			; <UNDEFINED> instruction: 0x869f1aff
    1908:	94080012 	strls	r0, [r8], #-18
    190c:	01080012 	tsteq	r8, r2, lsl r0
    1910:	12945400 	addsne	r5, r4, #0, 8
    1914:	12b60800 	adcsne	r0, r6, #0, 16
    1918:	00010800 	andeq	r0, r1, r0, lsl #16
    191c:	0012b652 	andseq	fp, r2, r2, asr r6
    1920:	0012bc08 	andseq	fp, r2, r8, lsl #24
    1924:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1928:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
    192c:	080012be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, ip}
    1930:	00520001 	subseq	r0, r2, r1
    1934:	00000000 	andeq	r0, r0, r0
    1938:	74000000 	strvc	r0, [r0], #-0
    193c:	78080012 	stmdavc	r8, {r1, r4}
    1940:	02080012 	andeq	r0, r8, #18
    1944:	789f3000 	ldmvc	pc, {ip, sp}	; <UNPREDICTABLE>
    1948:	96080012 			; <UNDEFINED> instruction: 0x96080012
    194c:	01080012 	tsteq	r8, r2, lsl r0
    1950:	12965300 	addsne	r5, r6, #0, 6
    1954:	129a0800 	addsne	r0, sl, #0, 16
    1958:	00080800 	andeq	r0, r8, r0, lsl #16
    195c:	fc090071 	stc2	0, cr0, [r9], {113}	; 0x71
    1960:	9f253124 	svcls	0x00253124
    1964:	080012b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, ip}
    1968:	080012be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, ip}
    196c:	00530001 	subseq	r0, r3, r1
    1970:	00000000 	andeq	r0, r0, r0
    1974:	74000000 	strvc	r0, [r0], #-0
    1978:	a0080012 	andge	r0, r8, r2, lsl r0
    197c:	02080012 	andeq	r0, r8, #18
    1980:	a09f3000 	addsge	r3, pc, r0
    1984:	b6080012 			; <UNDEFINED> instruction: 0xb6080012
    1988:	11080012 	tstne	r8, r2, lsl r0
    198c:	30007200 	andcc	r7, r0, r0, lsl #4
    1990:	0a00732e 	beq	1e650 <_Min_Stack_Size+0x1e250>
    1994:	711affff 			; <UNDEFINED> instruction: 0x711affff
    1998:	2e301a00 	vaddcs.f32	s2, s0, s0
    199c:	12b69f1a 	adcsne	r9, r6, #26, 30	; 0x68
    19a0:	12be0800 	adcsne	r0, lr, #0, 16
    19a4:	00020800 	andeq	r0, r2, r0, lsl #16
    19a8:	00009f30 	andeq	r9, r0, r0, lsr pc
    19ac:	00000000 	andeq	r0, r0, r0
    19b0:	12c00000 	sbcne	r0, r0, #0
    19b4:	12c20800 	sbcne	r0, r2, #0, 16
    19b8:	00010800 	andeq	r0, r1, r0, lsl #16
    19bc:	0012c251 	andseq	ip, r2, r1, asr r2
    19c0:	0012d008 	andseq	sp, r2, r8
    19c4:	f3000408 	vshl.u8	d0, d8, d0
    19c8:	009f5101 	addseq	r5, pc, r1, lsl #2
    19cc:	00000000 	andeq	r0, r0, r0
    19d0:	c0000000 	andgt	r0, r0, r0
    19d4:	c2080012 	andgt	r0, r8, #18
    19d8:	05080012 	streq	r0, [r8, #-18]
    19dc:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
    19e0:	12c29f25 	sbcne	r9, r2, #37, 30	; 0x94
    19e4:	12d00800 	sbcsne	r0, r0, #0, 16
    19e8:	00060800 	andeq	r0, r6, r0, lsl #16
    19ec:	385101f3 	ldmdacc	r1, {r0, r1, r4, r5, r6, r7, r8}^
    19f0:	00009f25 	andeq	r9, r0, r5, lsr #30
    19f4:	00000000 	andeq	r0, r0, r0
    19f8:	13040000 	movwne	r0, #16384	; 0x4000
    19fc:	132c0800 	teqne	ip, #0, 16
    1a00:	00010800 	andeq	r0, r1, r0, lsl #16
    1a04:	00132c50 	andseq	r2, r3, r0, asr ip
    1a08:	00133208 	andseq	r3, r3, r8, lsl #4
    1a0c:	f3000408 	vshl.u8	d0, d8, d0
    1a10:	009f5001 	addseq	r5, pc, r1
    1a14:	00000000 	andeq	r0, r0, r0
    1a18:	04000000 	streq	r0, [r0], #-0
    1a1c:	14080013 	strne	r0, [r8], #-19
    1a20:	01080013 	tsteq	r8, r3, lsl r0
    1a24:	13145100 	tstne	r4, #0, 2
    1a28:	13320800 	teqne	r2, #0, 16
    1a2c:	00040800 	andeq	r0, r4, r0, lsl #16
    1a30:	9f5101f3 	svcls	0x005101f3
	...
    1a3c:	08001304 	stmdaeq	r0, {r2, r8, r9, ip}
    1a40:	08001318 	stmdaeq	r0, {r3, r4, r8, r9, ip}
    1a44:	9f300002 	svcls	0x00300002
    1a48:	08001318 	stmdaeq	r0, {r3, r4, r8, r9, ip}
    1a4c:	0800131e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, ip}
    1a50:	713f0005 	teqvc	pc, r5
    1a54:	1e9f2400 	cdpne	4, 9, cr2, cr15, cr0, {0}
    1a58:	22080013 	andcs	r0, r8, #19
    1a5c:	01080013 	tsteq	r8, r3, lsl r0
    1a60:	13225200 	teqne	r2, #0, 4
    1a64:	13320800 	teqne	r2, #0, 16
    1a68:	00050800 	andeq	r0, r5, r0, lsl #16
    1a6c:	2400713f 	strcs	r7, [r0], #-319	; 0x13f
    1a70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a74:	00000000 	andeq	r0, r0, r0
    1a78:	00134c00 	andseq	r4, r3, r0, lsl #24
    1a7c:	00135608 	andseq	r5, r3, r8, lsl #12
    1a80:	30000208 	andcc	r0, r0, r8, lsl #4
    1a84:	0013569f 	mulseq	r3, pc, r6	; <UNPREDICTABLE>
    1a88:	00135a08 	andseq	r5, r3, r8, lsl #20
    1a8c:	70000908 	andvc	r0, r0, r8, lsl #18
    1a90:	01000a00 	tsteq	r0, r0, lsl #20
    1a94:	9f2e301a 	svcls	0x002e301a
	...
    1aa0:	0800135c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, ip}
    1aa4:	08001388 	stmdaeq	r0, {r3, r7, r8, r9, ip}
    1aa8:	88500001 	ldmdahi	r0, {r0}^
    1aac:	9c080013 	stcls	0, cr0, [r8], {19}
    1ab0:	04080013 	streq	r0, [r8], #-19
    1ab4:	5001f300 	andpl	pc, r1, r0, lsl #6
    1ab8:	00139c9f 	mulseq	r3, pc, ip	; <UNPREDICTABLE>
    1abc:	0013a008 	andseq	sl, r3, r8
    1ac0:	50000108 	andpl	r0, r0, r8, lsl #2
    1ac4:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
    1ac8:	080013b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip}
    1acc:	01f30004 	mvnseq	r0, r4
    1ad0:	13b49f50 			; <UNDEFINED> instruction: 0x13b49f50
    1ad4:	13b80800 			; <UNDEFINED> instruction: 0x13b80800
    1ad8:	00010800 	andeq	r0, r1, r0, lsl #16
    1adc:	0013b850 	andseq	fp, r3, r0, asr r8
    1ae0:	0013cc08 	andseq	ip, r3, r8, lsl #24
    1ae4:	f3000408 	vshl.u8	d0, d8, d0
    1ae8:	009f5001 	addseq	r5, pc, r1
    1aec:	00000000 	andeq	r0, r0, r0
    1af0:	cc000000 	stcgt	0, cr0, [r0], {-0}
    1af4:	d4080013 	strle	r0, [r8], #-19
    1af8:	01080013 	tsteq	r8, r3, lsl r0
    1afc:	13d45000 	bicsne	r5, r4, #0
    1b00:	14b40800 	ldrtne	r0, [r4], #2048	; 0x800
    1b04:	00010800 	andeq	r0, r1, r0, lsl #16
    1b08:	00000054 	andeq	r0, r0, r4, asr r0
    1b0c:	00000000 	andeq	r0, r0, r0
    1b10:	0013cc00 	andseq	ip, r3, r0, lsl #24
    1b14:	0013db08 	andseq	sp, r3, r8, lsl #22
    1b18:	51000108 	tstpl	r0, r8, lsl #2
    1b1c:	080013db 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r8, r9, ip}
    1b20:	080014b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, ip}
    1b24:	00550001 	subseq	r0, r5, r1
    1b28:	00000000 	andeq	r0, r0, r0
    1b2c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    1b30:	d8080013 	stmdale	r8, {r0, r1, r4}
    1b34:	02080013 	andeq	r0, r8, #19
    1b38:	d89f3000 	ldmle	pc, {ip, sp}	; <UNPREDICTABLE>
    1b3c:	f0080013 			; <UNDEFINED> instruction: 0xf0080013
    1b40:	01080013 	tsteq	r8, r3, lsl r0
    1b44:	13f65600 	mvnsne	r5, #0, 12
    1b48:	14160800 	ldrne	r0, [r6], #-2048	; 0x800
    1b4c:	00010800 	andeq	r0, r1, r0, lsl #16
    1b50:	00141656 	andseq	r1, r4, r6, asr r6
    1b54:	00142a08 	andseq	r2, r4, r8, lsl #20
    1b58:	30000208 	andcc	r0, r0, r8, lsl #4
    1b5c:	00142a9f 	mulseq	r4, pc, sl	; <UNPREDICTABLE>
    1b60:	00143208 	andseq	r3, r4, r8, lsl #4
    1b64:	53000108 	movwpl	r0, #264	; 0x108
    1b68:	08001444 	stmdaeq	r0, {r2, r6, sl, ip}
    1b6c:	08001448 	stmdaeq	r0, {r3, r6, sl, ip}
    1b70:	52530001 	subspl	r0, r3, #1
    1b74:	54080014 	strpl	r0, [r8], #-20
    1b78:	01080014 	tsteq	r8, r4, lsl r0
    1b7c:	14585300 	ldrbne	r5, [r8], #-768	; 0x300
    1b80:	14620800 	strbtne	r0, [r2], #-2048	; 0x800
    1b84:	00010800 	andeq	r0, r1, r0, lsl #16
    1b88:	00146253 	andseq	r6, r4, r3, asr r2
    1b8c:	0014b008 	andseq	fp, r4, r8
    1b90:	30000208 	andcc	r0, r0, r8, lsl #4
    1b94:	0014b09f 	mulseq	r4, pc, r0	; <UNPREDICTABLE>
    1b98:	0014b408 	andseq	fp, r4, r8, lsl #8
    1b9c:	53000108 	movwpl	r0, #264	; 0x108
	...
    1ba8:	080013cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip}
    1bac:	080013fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, ip}
    1bb0:	9f300002 	svcls	0x00300002
    1bb4:	080013fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, ip}
    1bb8:	0800142e 	stmdaeq	r0, {r1, r2, r3, r5, sl, ip}
    1bbc:	62570001 	subsvs	r0, r7, #1
    1bc0:	a0080014 	andge	r0, r8, r4, lsl r0
    1bc4:	01080014 	tsteq	r8, r4, lsl r0
    1bc8:	14a05700 	strtne	r5, [r0], #1792	; 0x700
    1bcc:	14b40800 	ldrtne	r0, [r4], #2048	; 0x800
    1bd0:	00010800 	andeq	r0, r1, r0, lsl #16
    1bd4:	0000005c 	andeq	r0, r0, ip, asr r0
    1bd8:	00000000 	andeq	r0, r0, r0
    1bdc:	0013cc00 	andseq	ip, r3, r0, lsl #24
    1be0:	00142008 	andseq	r2, r4, r8
    1be4:	34000208 	strcc	r0, [r0], #-520	; 0x208
    1be8:	0014209f 	mulseq	r4, pc, r0	; <UNPREDICTABLE>
    1bec:	00142e08 	andseq	r2, r4, r8, lsl #28
    1bf0:	53000108 	movwpl	r0, #264	; 0x108
    1bf4:	08001462 	stmdaeq	r0, {r1, r5, r6, sl, ip}
    1bf8:	08001486 	stmdaeq	r0, {r1, r2, r7, sl, ip}
    1bfc:	9f340002 	svcls	0x00340002
    1c00:	08001486 	stmdaeq	r0, {r1, r2, r7, sl, ip}
    1c04:	080014b0 	stmdaeq	r0, {r4, r5, r7, sl, ip}
    1c08:	00530001 	subseq	r0, r3, r1
    1c0c:	00000000 	andeq	r0, r0, r0
    1c10:	cc000000 	stcgt	0, cr0, [r0], {-0}
    1c14:	f6080013 			; <UNDEFINED> instruction: 0xf6080013
    1c18:	06080013 			; <UNDEFINED> instruction: 0x06080013
    1c1c:	12000c00 	andne	r0, r0, #0, 24
    1c20:	f69f007a 			; <UNDEFINED> instruction: 0xf69f007a
    1c24:	2e080013 	mcrcs	0, 0, r0, cr8, cr3, {0}
    1c28:	01080014 	tsteq	r8, r4, lsl r0
    1c2c:	142e5100 	strtne	r5, [lr], #-256	; 0x100
    1c30:	14620800 	strbtne	r0, [r2], #-2048	; 0x800
    1c34:	00020800 	andeq	r0, r2, r0, lsl #16
    1c38:	14626091 	strbtne	r6, [r2], #-145	; 0x91
    1c3c:	14980800 	ldrne	r0, [r8], #2048	; 0x800
    1c40:	00010800 	andeq	r0, r1, r0, lsl #16
    1c44:	00149851 	andseq	r9, r4, r1, asr r8
    1c48:	0014b408 	andseq	fp, r4, r8, lsl #8
    1c4c:	91000208 	tstls	r0, r8, lsl #4
    1c50:	00000060 	andeq	r0, r0, r0, rrx
    1c54:	00000000 	andeq	r0, r0, r0
    1c58:	00151000 	andseq	r1, r5, r0
    1c5c:	00151c08 	andseq	r1, r5, r8, lsl #24
    1c60:	51000108 	tstpl	r0, r8, lsl #2
    1c64:	0800151c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip}
    1c68:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
    1c6c:	01f30004 	mvnseq	r0, r4
    1c70:	00009f51 	andeq	r9, r0, r1, asr pc
    1c74:	00000000 	andeq	r0, r0, r0
    1c78:	15100000 	ldrne	r0, [r0, #-0]
    1c7c:	15120800 	ldrne	r0, [r2, #-2048]	; 0x800
    1c80:	00020800 	andeq	r0, r2, r0, lsl #16
    1c84:	15129f30 	ldrne	r9, [r2, #-3888]	; 0xf30
    1c88:	15160800 	ldrne	r0, [r6, #-2048]	; 0x800
    1c8c:	00060800 	andeq	r0, r6, r0, lsl #16
    1c90:	f0090073 			; <UNDEFINED> instruction: 0xf0090073
    1c94:	15209f1a 	strne	r9, [r0, #-3866]!	; 0xf1a
    1c98:	15240800 	strne	r0, [r4, #-2048]!	; 0x800
    1c9c:	00010800 	andeq	r0, r1, r0, lsl #16
    1ca0:	00000053 	andeq	r0, r0, r3, asr r0
    1ca4:	00000000 	andeq	r0, r0, r0
    1ca8:	00155c00 	andseq	r5, r5, r0, lsl #24
    1cac:	00156208 	andseq	r6, r5, r8, lsl #4
    1cb0:	51000108 	tstpl	r0, r8, lsl #2
    1cb4:	08001562 	stmdaeq	r0, {r1, r5, r6, r8, sl, ip}
    1cb8:	0800156e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, ip}
    1cbc:	00510001 	subseq	r0, r1, r1
    1cc0:	00000000 	andeq	r0, r0, r0
    1cc4:	8c000000 	stchi	0, cr0, [r0], {-0}
    1cc8:	98080015 	stmdals	r8, {r0, r2, r4}
    1ccc:	01080015 	tsteq	r8, r5, lsl r0
    1cd0:	15985100 	ldrne	r5, [r8, #256]	; 0x100
    1cd4:	15a00800 	strne	r0, [r0, #2048]!	; 0x800
    1cd8:	00040800 	andeq	r0, r4, r0, lsl #16
    1cdc:	9f5101f3 	svcls	0x005101f3
	...
    1ce8:	0800158c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip}
    1cec:	0800158e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, ip}
    1cf0:	9f300002 	svcls	0x00300002
    1cf4:	0800158e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, ip}
    1cf8:	08001592 	stmdaeq	r0, {r1, r4, r7, r8, sl, ip}
    1cfc:	00730007 	rsbseq	r0, r3, r7
    1d00:	1aff010b 	bne	fffc2134 <_estack+0xdff92134>
    1d04:	00159c9f 	mulseq	r5, pc, ip	; <UNPREDICTABLE>
    1d08:	0015a008 	andseq	sl, r5, r8
    1d0c:	53000108 	movwpl	r0, #264	; 0x108
	...
    1d18:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
    1d1c:	08001686 	stmdaeq	r0, {r1, r2, r7, r9, sl, ip}
    1d20:	86500001 	ldrbhi	r0, [r0], -r1
    1d24:	8a080016 	bhi	201d84 <_Min_Stack_Size+0x201984>
    1d28:	04080016 	streq	r0, [r8], #-22
    1d2c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1d30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1d34:	00000000 	andeq	r0, r0, r0
    1d38:	0016e000 	andseq	lr, r6, r0
    1d3c:	0016e208 	andseq	lr, r6, r8, lsl #4
    1d40:	50000108 	andpl	r0, r0, r8, lsl #2
    1d44:	080016e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, ip}
    1d48:	080016e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip}
    1d4c:	01f30004 	mvnseq	r0, r4
    1d50:	00009f50 	andeq	r9, r0, r0, asr pc
    1d54:	00000000 	andeq	r0, r0, r0
    1d58:	17200000 	strne	r0, [r0, -r0]!
    1d5c:	17320800 	ldrne	r0, [r2, -r0, lsl #16]!
    1d60:	00010800 	andeq	r0, r1, r0, lsl #16
    1d64:	00173250 	andseq	r3, r7, r0, asr r2
    1d68:	00173808 	andseq	r3, r7, r8, lsl #16
    1d6c:	f3000408 	vshl.u8	d0, d8, d0
    1d70:	009f5001 	addseq	r5, pc, r1
    1d74:	00000000 	andeq	r0, r0, r0
    1d78:	20000000 	andcs	r0, r0, r0
    1d7c:	2c080017 	stccs	0, cr0, [r8], {23}
    1d80:	01080017 	tsteq	r8, r7, lsl r0
    1d84:	172c5100 	strne	r5, [ip, -r0, lsl #2]!
    1d88:	17380800 	ldrne	r0, [r8, -r0, lsl #16]!
    1d8c:	00040800 	andeq	r0, r4, r0, lsl #16
    1d90:	9f5101f3 	svcls	0x005101f3
	...
    1d9c:	08001738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip}
    1da0:	08001742 	stmdaeq	r0, {r1, r6, r8, r9, sl, ip}
    1da4:	42510001 	subsmi	r0, r1, #1
    1da8:	46080017 			; <UNDEFINED> instruction: 0x46080017
    1dac:	04080017 	streq	r0, [r8], #-23
    1db0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1db4:	0017469f 	mulseq	r7, pc, r6	; <UNPREDICTABLE>
    1db8:	00174808 	andseq	r4, r7, r8, lsl #16
    1dbc:	51000108 	tstpl	r0, r8, lsl #2
    1dc0:	08001748 	stmdaeq	r0, {r3, r6, r8, r9, sl, ip}
    1dc4:	0800174c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip}
    1dc8:	01f30004 	mvnseq	r0, r4
    1dcc:	00009f51 	andeq	r9, r0, r1, asr pc
    1dd0:	00000000 	andeq	r0, r0, r0
    1dd4:	174c0000 	strbne	r0, [ip, -r0]
    1dd8:	17520800 	ldrbne	r0, [r2, -r0, lsl #16]
    1ddc:	00010800 	andeq	r0, r1, r0, lsl #16
    1de0:	00175250 	andseq	r5, r7, r0, asr r2
    1de4:	00176408 	andseq	r6, r7, r8, lsl #8
    1de8:	f3000408 	vshl.u8	d0, d8, d0
    1dec:	009f5001 	addseq	r5, pc, r1
    1df0:	00000000 	andeq	r0, r0, r0
    1df4:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1df8:	52080017 	andpl	r0, r8, #23
    1dfc:	02080017 	andeq	r0, r8, #23
    1e00:	529f3000 	addspl	r3, pc, #0
    1e04:	56080017 			; <UNDEFINED> instruction: 0x56080017
    1e08:	16080017 			; <UNDEFINED> instruction: 0x16080017
    1e0c:	0a007300 	beq	1ea14 <_Min_Stack_Size+0x1e614>
    1e10:	401affff 			; <UNDEFINED> instruction: 0x401affff
    1e14:	0a007024 	beq	1deac <_Min_Stack_Size+0x1daac>
    1e18:	211affff 			; <UNDEFINED> instruction: 0x211affff
    1e1c:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    1e20:	569f1a00 	ldrpl	r1, [pc], r0, lsl #20
    1e24:	5a080017 	bpl	201e88 <_Min_Stack_Size+0x201a88>
    1e28:	16080017 			; <UNDEFINED> instruction: 0x16080017
    1e2c:	0a007300 	beq	1ea34 <_Min_Stack_Size+0x1e634>
    1e30:	401affff 			; <UNDEFINED> instruction: 0x401affff
    1e34:	0a007224 	beq	1e6cc <_Min_Stack_Size+0x1e2cc>
    1e38:	211affff 			; <UNDEFINED> instruction: 0x211affff
    1e3c:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    1e40:	009f1a00 	addseq	r1, pc, r0, lsl #20
    1e44:	00000000 	andeq	r0, r0, r0
    1e48:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1e4c:	52080017 	andpl	r0, r8, #23
    1e50:	02080017 	andeq	r0, r8, #23
    1e54:	529f3000 	addspl	r3, pc, #0
    1e58:	56080017 			; <UNDEFINED> instruction: 0x56080017
    1e5c:	07080017 	smladeq	r8, r7, r0, r0
    1e60:	0a007000 	beq	1de68 <_Min_Stack_Size+0x1da68>
    1e64:	9f1affff 	svcls	0x001affff
    1e68:	08001756 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, ip}
    1e6c:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
    1e70:	00720007 	rsbseq	r0, r2, r7
    1e74:	1affff0a 	bne	1aa4 <_Min_Stack_Size+0x16a4>
    1e78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1e7c:	00000000 	andeq	r0, r0, r0
    1e80:	00174c00 	andseq	r4, r7, r0, lsl #24
    1e84:	00175208 	andseq	r5, r7, r8, lsl #4
    1e88:	30000208 	andcc	r0, r0, r8, lsl #4
    1e8c:	0017529f 	mulseq	r7, pc, r2	; <UNPREDICTABLE>
    1e90:	00175a08 	andseq	r5, r7, r8, lsl #20
    1e94:	73000908 	movwvc	r0, #2312	; 0x908
    1e98:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1e9c:	9f24401a 	svcls	0x0024401a
	...
    1ea8:	0800174c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip}
    1eac:	08001752 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, ip}
    1eb0:	9f300002 	svcls	0x00300002
    1eb4:	08001752 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, ip}
    1eb8:	08001756 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, ip}
    1ebc:	0071001c 	rsbseq	r0, r1, ip, lsl r0
    1ec0:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    1ec4:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    1ec8:	ff0a0070 			; <UNDEFINED> instruction: 0xff0a0070
    1ecc:	71211aff 	strdvc	r1, [r1, -pc]!
    1ed0:	ff0c1a00 			; <UNDEFINED> instruction: 0xff0c1a00
    1ed4:	1a00ffff 	bne	41ed8 <_Min_Stack_Size+0x41ad8>
    1ed8:	17569f29 	ldrbne	r9, [r6, -r9, lsr #30]
    1edc:	175a0800 	ldrbne	r0, [sl, -r0, lsl #16]
    1ee0:	001c0800 	andseq	r0, ip, r0, lsl #16
    1ee4:	00730071 	rsbseq	r0, r3, r1, ror r0
    1ee8:	1affff0a 	bne	1b18 <_Min_Stack_Size+0x1718>
    1eec:	00722440 	rsbseq	r2, r2, r0, asr #8
    1ef0:	1affff0a 	bne	1b20 <_Min_Stack_Size+0x1720>
    1ef4:	1a007121 	bne	1e380 <_Min_Stack_Size+0x1df80>
    1ef8:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    1efc:	9f291a00 	svcls	0x00291a00
	...
    1f08:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
    1f0c:	0800176a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, ip}
    1f10:	6a500001 	bvs	1401f1c <_Min_Stack_Size+0x1401b1c>
    1f14:	74080017 	strvc	r0, [r8], #-23
    1f18:	04080017 	streq	r0, [r8], #-23
    1f1c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1f20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f24:	00000000 	andeq	r0, r0, r0
    1f28:	00176400 	andseq	r6, r7, r0, lsl #8
    1f2c:	00176a08 	andseq	r6, r7, r8, lsl #20
    1f30:	30000208 	andcc	r0, r0, r8, lsl #4
    1f34:	00176a9f 	mulseq	r7, pc, sl	; <UNPREDICTABLE>
    1f38:	00176e08 	andseq	r6, r7, r8, lsl #28
    1f3c:	73001608 	movwvc	r1, #1544	; 0x608
    1f40:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1f44:	7024401a 	eorvc	r4, r4, sl, lsl r0
    1f48:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1f4c:	ff0c211a 			; <UNDEFINED> instruction: 0xff0c211a
    1f50:	1a00ffff 	bne	41f54 <_Min_Stack_Size+0x41b54>
    1f54:	00176e9f 	mulseq	r7, pc, lr	; <UNPREDICTABLE>
    1f58:	00177408 	andseq	r7, r7, r8, lsl #8
    1f5c:	73001608 	movwvc	r1, #1544	; 0x608
    1f60:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1f64:	7224401a 	eorvc	r4, r4, #26
    1f68:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1f6c:	ff0c211a 			; <UNDEFINED> instruction: 0xff0c211a
    1f70:	1a00ffff 	bne	41f74 <_Min_Stack_Size+0x41b74>
    1f74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f78:	00000000 	andeq	r0, r0, r0
    1f7c:	00176400 	andseq	r6, r7, r0, lsl #8
    1f80:	00176a08 	andseq	r6, r7, r8, lsl #20
    1f84:	30000208 	andcc	r0, r0, r8, lsl #4
    1f88:	00176a9f 	mulseq	r7, pc, sl	; <UNPREDICTABLE>
    1f8c:	00176e08 	andseq	r6, r7, r8, lsl #28
    1f90:	70000708 	andvc	r0, r0, r8, lsl #14
    1f94:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1f98:	176e9f1a 			; <UNDEFINED> instruction: 0x176e9f1a
    1f9c:	17740800 	ldrbne	r0, [r4, -r0, lsl #16]!
    1fa0:	00070800 	andeq	r0, r7, r0, lsl #16
    1fa4:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    1fa8:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1fac:	00000000 	andeq	r0, r0, r0
    1fb0:	64000000 	strvs	r0, [r0], #-0
    1fb4:	6a080017 	bvs	202018 <_Min_Stack_Size+0x201c18>
    1fb8:	02080017 	andeq	r0, r8, #23
    1fbc:	6a9f3000 	bvs	fe7cdfc4 <_estack+0xde79dfc4>
    1fc0:	74080017 	strvc	r0, [r8], #-23
    1fc4:	09080017 	stmdbeq	r8, {r0, r1, r2, r4}
    1fc8:	0a007300 	beq	1ebd0 <_Min_Stack_Size+0x1e7d0>
    1fcc:	401affff 			; <UNDEFINED> instruction: 0x401affff
    1fd0:	00009f24 	andeq	r9, r0, r4, lsr #30
    1fd4:	00000000 	andeq	r0, r0, r0
    1fd8:	17740000 	ldrbne	r0, [r4, -r0]!
    1fdc:	179c0800 	ldrne	r0, [ip, r0, lsl #16]
    1fe0:	00010800 	andeq	r0, r1, r0, lsl #16
    1fe4:	00179c50 	andseq	r9, r7, r0, asr ip
    1fe8:	0017a008 	andseq	sl, r7, r8
    1fec:	f3000408 	vshl.u8	d0, d8, d0
    1ff0:	a09f5001 	addsge	r5, pc, r1
    1ff4:	aa080017 	bge	202058 <_Min_Stack_Size+0x201c58>
    1ff8:	01080017 	tsteq	r8, r7, lsl r0
    1ffc:	00005000 	andeq	r5, r0, r0
    2000:	00000000 	andeq	r0, r0, r0
    2004:	17740000 	ldrbne	r0, [r4, -r0]!
    2008:	17880800 	strne	r0, [r8, r0, lsl #16]
    200c:	00010800 	andeq	r0, r1, r0, lsl #16
    2010:	00178851 	andseq	r8, r7, r1, asr r8
    2014:	0017aa08 	andseq	sl, r7, r8, lsl #20
    2018:	51000108 	tstpl	r0, r8, lsl #2
	...
    2024:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
    2028:	08001794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip}
    202c:	9f300002 	svcls	0x00300002
    2030:	08001794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip}
    2034:	080017a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, ip}
    2038:	00710008 	rsbseq	r0, r1, r8
    203c:	301a0073 	andscc	r0, sl, r3, ror r0
    2040:	17a09f2e 	strne	r9, [r0, lr, lsr #30]!
    2044:	17aa0800 	strne	r0, [sl, r0, lsl #16]!
    2048:	00020800 	andeq	r0, r2, r0, lsl #16
    204c:	00009f30 	andeq	r9, r0, r0, lsr pc
    2050:	00000000 	andeq	r0, r0, r0
    2054:	17ac0000 	strne	r0, [ip, r0]!
    2058:	17ae0800 	strne	r0, [lr, r0, lsl #16]!
    205c:	00010800 	andeq	r0, r1, r0, lsl #16
    2060:	0017ae51 	andseq	sl, r7, r1, asr lr
    2064:	0017b008 	andseq	fp, r7, r8
    2068:	71000408 	tstvc	r0, r8, lsl #8
    206c:	b09f2000 	addslt	r2, pc, r0
    2070:	b4080017 	strlt	r0, [r8], #-23
    2074:	04080017 	streq	r0, [r8], #-23
    2078:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    207c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2080:	00000000 	andeq	r0, r0, r0
    2084:	0017ac00 	andseq	sl, r7, r0, lsl #24
    2088:	0017ae08 	andseq	sl, r7, r8, lsl #28
    208c:	71000908 	tstvc	r0, r8, lsl #18
    2090:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    2094:	9f1a00ff 	svcls	0x001a00ff
    2098:	080017ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, ip}
    209c:	080017b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, ip}
    20a0:	0071000a 	rsbseq	r0, r1, sl
    20a4:	ffff0c20 			; <UNDEFINED> instruction: 0xffff0c20
    20a8:	9f1a00ff 	svcls	0x001a00ff
    20ac:	080017b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, ip}
    20b0:	080017b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip}
    20b4:	01f3000a 	mvnseq	r0, sl
    20b8:	ffff0c51 			; <UNDEFINED> instruction: 0xffff0c51
    20bc:	9f1a00ff 	svcls	0x001a00ff
	...
    20c8:	080017b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip}
    20cc:	080017b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip}
    20d0:	b8500001 	ldmdalt	r0, {r0}^
    20d4:	d0080017 	andle	r0, r8, r7, lsl r0
    20d8:	04080017 	streq	r0, [r8], #-23
    20dc:	5001f300 	andpl	pc, r1, r0, lsl #6
    20e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    20e4:	00000000 	andeq	r0, r0, r0
    20e8:	0017b400 	andseq	fp, r7, r0, lsl #8
    20ec:	0017be08 	andseq	fp, r7, r8, lsl #28
    20f0:	51000108 	tstpl	r0, r8, lsl #2
    20f4:	080017be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, ip}
    20f8:	080017c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, ip}
    20fc:	00710009 	rsbseq	r0, r1, r9
    2100:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    2104:	c49f1a00 	ldrgt	r1, [pc], #2560	; 210c <_Min_Stack_Size+0x1d0c>
    2108:	d0080017 	andle	r0, r8, r7, lsl r0
    210c:	0a080017 	beq	202170 <_Min_Stack_Size+0x201d70>
    2110:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2114:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    2118:	009f1a00 	addseq	r1, pc, r0, lsl #20
    211c:	00000000 	andeq	r0, r0, r0
    2120:	b4000000 	strlt	r0, [r0], #-0
    2124:	ce080017 	mcrgt	0, 0, r0, cr8, cr7, {0}
    2128:	02080017 	andeq	r0, r8, #23
    212c:	ce9f3000 	cdpgt	0, 9, cr3, cr15, cr0, {0}
    2130:	d0080017 	andle	r0, r8, r7, lsl r0
    2134:	01080017 	tsteq	r8, r7, lsl r0
    2138:	00005000 	andeq	r5, r0, r0
    213c:	00000000 	andeq	r0, r0, r0
    2140:	17b40000 	ldrne	r0, [r4, r0]!
    2144:	17be0800 	ldrne	r0, [lr, r0, lsl #16]!
    2148:	00020800 	andeq	r0, r2, r0, lsl #16
    214c:	17be9f30 			; <UNDEFINED> instruction: 0x17be9f30
    2150:	17c40800 	strbne	r0, [r4, r0, lsl #16]
    2154:	00100800 	andseq	r0, r0, r0, lsl #16
    2158:	464c0071 			; <UNDEFINED> instruction: 0x464c0071
    215c:	25401a24 	strbcs	r1, [r0, #-2596]	; 0xa24
    2160:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    2164:	9f1a1aff 	svcls	0x001a1aff
    2168:	080017c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, ip}
    216c:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
    2170:	0071000c 	rsbseq	r0, r1, ip
    2174:	00732540 	rsbseq	r2, r3, r0, asr #10
    2178:	1affff0a 	bne	1da8 <_Min_Stack_Size+0x19a8>
    217c:	17c89f1a 	bfine	r9, sl, (invalid: 30:8)
    2180:	17d00800 	ldrbne	r0, [r0, r0, lsl #16]
    2184:	00110800 	andseq	r0, r1, r0, lsl #16
    2188:	4c5101f3 	ldfmie	f0, [r1], {243}	; 0xf3
    218c:	401a2446 	andsmi	r2, sl, r6, asr #8
    2190:	0a007325 	beq	1ee2c <_Min_Stack_Size+0x1ea2c>
    2194:	1a1affff 	bne	6c2198 <_Min_Stack_Size+0x6c1d98>
    2198:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    219c:	00000000 	andeq	r0, r0, r0
    21a0:	0017d000 	andseq	sp, r7, r0
    21a4:	0017d208 	andseq	sp, r7, r8, lsl #4
    21a8:	51000108 	tstpl	r0, r8, lsl #2
    21ac:	080017d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, ip}
    21b0:	080017d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip}
    21b4:	00710004 	rsbseq	r0, r1, r4
    21b8:	17d49f20 	ldrbne	r9, [r4, r0, lsr #30]
    21bc:	17d80800 	ldrbne	r0, [r8, r0, lsl #16]
    21c0:	00040800 	andeq	r0, r4, r0, lsl #16
    21c4:	9f5101f3 	svcls	0x005101f3
	...
    21d0:	080017d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip}
    21d4:	080017d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, ip}
    21d8:	00710009 	rsbseq	r0, r1, r9
    21dc:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    21e0:	d29f1a00 	addsle	r1, pc, #0, 20
    21e4:	d4080017 	strle	r0, [r8], #-23
    21e8:	0a080017 	beq	20224c <_Min_Stack_Size+0x201e4c>
    21ec:	20007100 	andcs	r7, r0, r0, lsl #2
    21f0:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    21f4:	d49f1a00 	ldrle	r1, [pc], #2560	; 21fc <_Min_Stack_Size+0x1dfc>
    21f8:	d8080017 	stmdale	r8, {r0, r1, r2, r4}
    21fc:	0a080017 	beq	202260 <_Min_Stack_Size+0x201e60>
    2200:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2204:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    2208:	009f1a00 	addseq	r1, pc, r0, lsl #20
    220c:	00000000 	andeq	r0, r0, r0
    2210:	d0000000 	andle	r0, r0, r0
    2214:	2a080019 	bcs	202280 <_Min_Stack_Size+0x201e80>
    2218:	0108001a 	tsteq	r8, sl, lsl r0
    221c:	1a2a5100 	bne	a96624 <_Min_Stack_Size+0xa96224>
    2220:	1a3a0800 	bne	e84228 <_Min_Stack_Size+0xe83e28>
    2224:	00040800 	andeq	r0, r4, r0, lsl #16
    2228:	9f5101f3 	svcls	0x005101f3
	...
    2234:	080019d0 	stmdaeq	r0, {r4, r6, r7, r8, fp, ip}
    2238:	080019d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, ip}
    223c:	9f300002 	svcls	0x00300002
    2240:	080019d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, ip}
    2244:	08001a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp, ip}
    2248:	145c0001 	ldrbne	r0, [ip], #-1
    224c:	1a08001a 	bne	2022bc <_Min_Stack_Size+0x201ebc>
    2250:	0108001a 	tsteq	r8, sl, lsl r0
    2254:	1a1a5600 	bne	697a5c <_Min_Stack_Size+0x69765c>
    2258:	1a2c0800 	bne	b04260 <_Min_Stack_Size+0xb03e60>
    225c:	00010800 	andeq	r0, r1, r0, lsl #16
    2260:	001a2c55 	andseq	r2, sl, r5, asr ip
    2264:	001a3a08 	andseq	r3, sl, r8, lsl #20
    2268:	51000108 	tstpl	r0, r8, lsl #2
	...
    2274:	08001aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip}
    2278:	08001aa2 	stmdaeq	r0, {r1, r5, r7, r9, fp, ip}
    227c:	a2500001 	subsge	r0, r0, #1
    2280:	a608001a 			; <UNDEFINED> instruction: 0xa608001a
    2284:	0408001a 	streq	r0, [r8], #-26
    2288:	5001f300 	andpl	pc, r1, r0, lsl #6
    228c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2290:	00000000 	andeq	r0, r0, r0
    2294:	001ae000 	andseq	lr, sl, r0
    2298:	001ae208 	andseq	lr, sl, r8, lsl #4
    229c:	50000108 	andpl	r0, r0, r8, lsl #2
    22a0:	08001ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, ip}
    22a4:	08001ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, ip}
    22a8:	01f30004 	mvnseq	r0, r4
    22ac:	00009f50 	andeq	r9, r0, r0, asr pc
    22b0:	00000000 	andeq	r0, r0, r0
    22b4:	1ae00000 	bne	ff8022bc <_estack+0xdf7d22bc>
    22b8:	1ae20800 	bne	ff8842c0 <_estack+0xdf8542c0>
    22bc:	00020800 	andeq	r0, r2, r0, lsl #16
    22c0:	1ae29f30 	bne	ff8a9f88 <_estack+0xdf879f88>
    22c4:	1ae60800 	bne	ff9842cc <_estack+0xdf9542cc>
    22c8:	000c0800 	andeq	r0, ip, r0, lsl #16
    22cc:	3f400070 	svccc	0x00400070
    22d0:	2e301a24 	vaddcs.f32	s2, s0, s9
    22d4:	9f1aff08 	svcls	0x001aff08
	...
    22e0:	08001ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, ip}
    22e4:	08001aea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, fp, ip}
    22e8:	ea500001 	b	14022f4 <_Min_Stack_Size+0x1401ef4>
    22ec:	f008001a 			; <UNDEFINED> instruction: 0xf008001a
    22f0:	0408001a 	streq	r0, [r8], #-26
    22f4:	5001f300 	andpl	pc, r1, r0, lsl #6
    22f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    22fc:	00000000 	andeq	r0, r0, r0
    2300:	001ae800 	andseq	lr, sl, r0, lsl #16
    2304:	001aea08 	andseq	lr, sl, r8, lsl #20
    2308:	30000208 	andcc	r0, r0, r8, lsl #4
    230c:	001aea9f 	mulseq	sl, pc, sl	; <UNPREDICTABLE>
    2310:	001aee08 	andseq	lr, sl, r8, lsl #28
    2314:	70000508 	andvc	r0, r0, r8, lsl #10
    2318:	9f1a3100 	svcls	0x001a3100
	...
    2324:	08001af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip}
    2328:	08001af2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, fp, ip}
    232c:	f2500001 	vhadd.s16	d16, d0, d1
    2330:	f808001a 			; <UNDEFINED> instruction: 0xf808001a
    2334:	0408001a 	streq	r0, [r8], #-26
    2338:	5001f300 	andpl	pc, r1, r0, lsl #6
    233c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2340:	00000000 	andeq	r0, r0, r0
    2344:	001af000 	andseq	pc, sl, r0
    2348:	001af208 	andseq	pc, sl, r8, lsl #4
    234c:	30000208 	andcc	r0, r0, r8, lsl #4
    2350:	001af29f 	mulseq	sl, pc, r2	; <UNPREDICTABLE>
    2354:	001af608 	andseq	pc, sl, r8, lsl #12
    2358:	70000608 	andvc	r0, r0, r8, lsl #12
    235c:	1a380800 	bne	e04364 <_Min_Stack_Size+0xe03f64>
    2360:	001af69f 	mulseq	sl, pc, r6	; <UNPREDICTABLE>
    2364:	001af808 	andseq	pc, sl, r8, lsl #16
    2368:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    2374:	08001af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip}
    2378:	08001b1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp, ip}
    237c:	1a500001 	bne	1402388 <_Min_Stack_Size+0x1401f88>
    2380:	3808001b 	stmdacc	r8, {r0, r1, r3, r4}
    2384:	0408001b 	streq	r0, [r8], #-27
    2388:	5001f300 	andpl	pc, r1, r0, lsl #6
    238c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2390:	00000000 	andeq	r0, r0, r0
    2394:	001af800 	andseq	pc, sl, r0, lsl #16
    2398:	001b2a08 	andseq	r2, fp, r8, lsl #20
    239c:	51000108 	tstpl	r0, r8, lsl #2
    23a0:	08001b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip}
    23a4:	08001b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip}
    23a8:	01f30004 	mvnseq	r0, r4
    23ac:	00009f51 	andeq	r9, r0, r1, asr pc
    23b0:	00000000 	andeq	r0, r0, r0
    23b4:	1af80000 	bne	ffe023bc <_estack+0xdfdd23bc>
    23b8:	1b220800 	blne	8843c0 <_Min_Stack_Size+0x883fc0>
    23bc:	00020800 	andeq	r0, r2, r0, lsl #16
    23c0:	1b229f30 	blne	8aa088 <_Min_Stack_Size+0x8a9c88>
    23c4:	1b2a0800 	blne	a843cc <_Min_Stack_Size+0xa83fcc>
    23c8:	000e0800 	andeq	r0, lr, r0, lsl #16
    23cc:	00730071 	rsbseq	r0, r3, r1, ror r0
    23d0:	0f7d0c1a 	svceq	0x007d0c1a
    23d4:	301a0f7d 	andscc	r0, sl, sp, ror pc
    23d8:	1b2a9f2e 	blne	aaa098 <_Min_Stack_Size+0xaa9c98>
    23dc:	1b380800 	blne	e043e4 <_Min_Stack_Size+0xe03fe4>
    23e0:	000f0800 	andeq	r0, pc, r0, lsl #16
    23e4:	735101f3 	cmpvc	r1, #-1073741764	; 0xc000003c
    23e8:	7d0c1a00 	vstrvc	s2, [ip, #-0]
    23ec:	1a0f7d0f 	bne	3e1830 <_Min_Stack_Size+0x3e1430>
    23f0:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    23f4:	00000000 	andeq	r0, r0, r0
    23f8:	1a000000 	bne	2400 <_Min_Stack_Size+0x2000>
    23fc:	3608001b 			; <UNDEFINED> instruction: 0x3608001b
    2400:	0108001b 	tsteq	r8, fp, lsl r0
    2404:	00005000 	andeq	r5, r0, r0
    2408:	00000000 	andeq	r0, r0, r0
    240c:	1af80000 	bne	ffe02414 <_estack+0xdfdd2414>
    2410:	1b200800 	blne	804418 <_Min_Stack_Size+0x804018>
    2414:	00020800 	andeq	r0, r2, r0, lsl #16
    2418:	1b209f30 	blne	82a0e0 <_Min_Stack_Size+0x829ce0>
    241c:	1b220800 	blne	884424 <_Min_Stack_Size+0x884024>
    2420:	00010800 	andeq	r0, r1, r0, lsl #16
    2424:	001b2253 	andseq	r2, fp, r3, asr r2
    2428:	001b3808 	andseq	r3, fp, r8, lsl #16
    242c:	73000908 	movwvc	r0, #2312	; 0x908
    2430:	0f7d0c00 	svceq	0x007d0c00
    2434:	9f1a0f7d 	svcls	0x001a0f7d
	...
    2440:	08001b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip}
    2444:	08001b5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, fp, ip}
    2448:	5a500001 	bpl	1402454 <_Min_Stack_Size+0x1402054>
    244c:	7208001b 	andvc	r0, r8, #27
    2450:	0408001b 	streq	r0, [r8], #-27
    2454:	5001f300 	andpl	pc, r1, r0, lsl #6
    2458:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    245c:	00000000 	andeq	r0, r0, r0
    2460:	001b3800 	andseq	r3, fp, r0, lsl #16
    2464:	001b6208 	andseq	r6, fp, r8, lsl #4
    2468:	51000108 	tstpl	r0, r8, lsl #2
    246c:	08001b62 	stmdaeq	r0, {r1, r5, r6, r8, r9, fp, ip}
    2470:	08001b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp, ip}
    2474:	01f30004 	mvnseq	r0, r4
    2478:	00009f51 	andeq	r9, r0, r1, asr pc
    247c:	00000000 	andeq	r0, r0, r0
    2480:	1b740000 	blne	1d02488 <_Min_Stack_Size+0x1d02088>
    2484:	1b8c0800 	blne	fe30448c <_estack+0xde2d448c>
    2488:	00010800 	andeq	r0, r1, r0, lsl #16
    248c:	001b8c51 	andseq	r8, fp, r1, asr ip
    2490:	001b9208 	andseq	r9, fp, r8, lsl #4
    2494:	f3000408 	vshl.u8	d0, d8, d0
    2498:	929f5101 	addsls	r5, pc, #1073741824	; 0x40000000
    249c:	a008001b 	andge	r0, r8, fp, lsl r0
    24a0:	0108001b 	tsteq	r8, fp, lsl r0
    24a4:	1ba05100 	blne	fe8168ac <_estack+0xde7e68ac>
    24a8:	1ba80800 	blne	fea044b0 <_estack+0xde9d44b0>
    24ac:	00040800 	andeq	r0, r4, r0, lsl #16
    24b0:	9f5101f3 	svcls	0x005101f3
    24b4:	08001ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp, ip}
    24b8:	08001bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip}
    24bc:	00510001 	subseq	r0, r1, r1
    24c0:	00000000 	andeq	r0, r0, r0
    24c4:	b4000000 	strlt	r0, [r0], #-0
    24c8:	f808001b 			; <UNDEFINED> instruction: 0xf808001b
    24cc:	0108001b 	tsteq	r8, fp, lsl r0
    24d0:	1bf85000 	blne	ffe164d8 <_estack+0xdfde64d8>
    24d4:	1c040800 	stcne	8, cr0, [r4], {-0}
    24d8:	00040800 	andeq	r0, r4, r0, lsl #16
    24dc:	9f5001f3 	svcls	0x005001f3
    24e0:	08001c04 	stmdaeq	r0, {r2, sl, fp, ip}
    24e4:	08001c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip}
    24e8:	00500001 	subseq	r0, r0, r1
    24ec:	00000000 	andeq	r0, r0, r0
    24f0:	b4000000 	strlt	r0, [r0], #-0
    24f4:	ea08001b 	b	202568 <_Min_Stack_Size+0x202168>
    24f8:	0108001b 	tsteq	r8, fp, lsl r0
    24fc:	1bea5100 	blne	ffa96904 <_estack+0xdfa66904>
    2500:	1c040800 	stcne	8, cr0, [r4], {-0}
    2504:	00040800 	andeq	r0, r4, r0, lsl #16
    2508:	9f5101f3 	svcls	0x005101f3
    250c:	08001c04 	stmdaeq	r0, {r2, sl, fp, ip}
    2510:	08001c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip}
    2514:	00510001 	subseq	r0, r1, r1
    2518:	00000000 	andeq	r0, r0, r0
    251c:	b4000000 	strlt	r0, [r0], #-0
    2520:	0008001b 	andeq	r0, r8, fp, lsl r0
    2524:	0208001c 	andeq	r0, r8, #28
    2528:	009f3000 	addseq	r3, pc, r0
    252c:	0408001c 	streq	r0, [r8], #-28
    2530:	0108001c 	tsteq	r8, ip, lsl r0
    2534:	1c045000 	stcne	0, cr5, [r4], {-0}
    2538:	1c0c0800 	stcne	8, cr0, [ip], {-0}
    253c:	00020800 	andeq	r0, r2, r0, lsl #16
    2540:	00009f30 	andeq	r9, r0, r0, lsr pc
    2544:	00000000 	andeq	r0, r0, r0
    2548:	1bdc0000 	blne	ff702550 <_estack+0xdf6d2550>
    254c:	1bee0800 	blne	ffb84554 <_estack+0xdfb54554>
    2550:	00010800 	andeq	r0, r1, r0, lsl #16
    2554:	001c0452 	andseq	r0, ip, r2, asr r4
    2558:	001c0c08 	andseq	r0, ip, r8, lsl #24
    255c:	52000108 	andpl	r0, r0, #8, 2
	...
    2568:	08001bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip}
    256c:	08001bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, ip}
    2570:	9f300002 	svcls	0x00300002
    2574:	08001bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, ip}
    2578:	08001be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, ip}
    257c:	00710007 	rsbseq	r0, r1, r7
    2580:	1a4e253b 	bne	138ba74 <_Min_Stack_Size+0x138b674>
    2584:	001bee9f 	mulseq	fp, pc, lr	; <UNPREDICTABLE>
    2588:	001bf008 	andseq	pc, fp, r8
    258c:	52000108 	andpl	r0, r0, #8, 2
    2590:	08001bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, ip}
    2594:	08001c04 	stmdaeq	r0, {r2, sl, fp, ip}
    2598:	00720009 	rsbseq	r0, r2, r9
    259c:	7d0f7d0c 	stcvc	13, cr7, [pc, #-48]	; 2574 <_Min_Stack_Size+0x2174>
    25a0:	049f1a0f 	ldreq	r1, [pc], #2575	; 25a8 <_Min_Stack_Size+0x21a8>
    25a4:	0c08001c 	stceq	0, cr0, [r8], {28}
    25a8:	0208001c 	andeq	r0, r8, #28
    25ac:	009f3000 	addseq	r3, pc, r0
    25b0:	00000000 	andeq	r0, r0, r0
    25b4:	b4000000 	strlt	r0, [r0], #-0
    25b8:	e808001b 	stmda	r8, {r0, r1, r3, r4}
    25bc:	0208001b 	andeq	r0, r8, #27
    25c0:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
    25c4:	0208001b 	andeq	r0, r8, #27
    25c8:	0108001c 	tsteq	r8, ip, lsl r0
    25cc:	1c045400 	cfstrsne	mvf5, [r4], {-0}
    25d0:	1c0a0800 	stcne	8, cr0, [sl], {-0}
    25d4:	00020800 	andeq	r0, r2, r0, lsl #16
    25d8:	1c0a9f30 	stcne	15, cr9, [sl], {48}	; 0x30
    25dc:	1c0c0800 	stcne	8, cr0, [ip], {-0}
    25e0:	00010800 	andeq	r0, r1, r0, lsl #16
    25e4:	00000054 	andeq	r0, r0, r4, asr r0
    25e8:	00000000 	andeq	r0, r0, r0
    25ec:	001c0c00 	andseq	r0, ip, r0, lsl #24
    25f0:	001c2e08 	andseq	r2, ip, r8, lsl #28
    25f4:	50000108 	andpl	r0, r0, r8, lsl #2
    25f8:	08001c2e 	stmdaeq	r0, {r1, r2, r3, r5, sl, fp, ip}
    25fc:	08001c46 	stmdaeq	r0, {r1, r2, r6, sl, fp, ip}
    2600:	01f30004 	mvnseq	r0, r4
    2604:	00009f50 	andeq	r9, r0, r0, asr pc
    2608:	00000000 	andeq	r0, r0, r0
    260c:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    2610:	1c360800 	ldcne	8, cr0, [r6], #-0
    2614:	00010800 	andeq	r0, r1, r0, lsl #16
    2618:	001c3651 	andseq	r3, ip, r1, asr r6
    261c:	001c4608 	andseq	r4, ip, r8, lsl #12
    2620:	f3000408 	vshl.u8	d0, d8, d0
    2624:	009f5101 	addseq	r5, pc, r1, lsl #2
    2628:	00000000 	andeq	r0, r0, r0
    262c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2630:	9808001c 	stmdals	r8, {r2, r3, r4}
    2634:	0108001c 	tsteq	r8, ip, lsl r0
    2638:	1c985000 	ldcne	0, cr5, [r8], {0}
    263c:	1cac0800 	stcne	8, cr0, [ip]
    2640:	00040800 	andeq	r0, r4, r0, lsl #16
    2644:	9f5001f3 	svcls	0x005001f3
    2648:	08001cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, ip}
    264c:	08001cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip}
    2650:	b0500001 	subslt	r0, r0, r1
    2654:	c408001c 	strgt	r0, [r8], #-28
    2658:	0408001c 	streq	r0, [r8], #-28
    265c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2660:	001cc49f 	mulseq	ip, pc, r4	; <UNPREDICTABLE>
    2664:	001cc808 	andseq	ip, ip, r8, lsl #16
    2668:	50000108 	andpl	r0, r0, r8, lsl #2
    266c:	08001cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, ip}
    2670:	08001cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, ip}
    2674:	01f30004 	mvnseq	r0, r4
    2678:	1cdc9f50 	ldclne	15, cr9, [ip], {80}	; 0x50
    267c:	1ce00800 	stclne	8, cr0, [r0]
    2680:	00010800 	andeq	r0, r1, r0, lsl #16
    2684:	001ce050 	andseq	lr, ip, r0, asr r0
    2688:	001cf408 	andseq	pc, ip, r8, lsl #8
    268c:	f3000408 	vshl.u8	d0, d8, d0
    2690:	f49f5001 			; <UNDEFINED> instruction: 0xf49f5001
    2694:	f808001c 			; <UNDEFINED> instruction: 0xf808001c
    2698:	0108001c 	tsteq	r8, ip, lsl r0
    269c:	1cf85000 	ldclne	0, cr5, [r8]
    26a0:	1d0c0800 	stcne	8, cr0, [ip, #-0]
    26a4:	00040800 	andeq	r0, r4, r0, lsl #16
    26a8:	9f5001f3 	svcls	0x005001f3
    26ac:	08001d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, ip}
    26b0:	08001d10 	stmdaeq	r0, {r4, r8, sl, fp, ip}
    26b4:	10500001 	subsne	r0, r0, r1
    26b8:	2408001d 	strcs	r0, [r8], #-29
    26bc:	0408001d 	streq	r0, [r8], #-29
    26c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    26c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    26c8:	00000000 	andeq	r0, r0, r0
    26cc:	001d2400 	andseq	r2, sp, r0, lsl #8
    26d0:	001d4808 	andseq	r4, sp, r8, lsl #16
    26d4:	51000108 	tstpl	r0, r8, lsl #2
    26d8:	08001d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, ip}
    26dc:	08001d76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, fp, ip}
    26e0:	01f30004 	mvnseq	r0, r4
    26e4:	00009f51 	andeq	r9, r0, r1, asr pc
    26e8:	00000000 	andeq	r0, r0, r0
    26ec:	1d240000 	stcne	0, cr0, [r4, #-0]
    26f0:	1d440800 	stclne	8, cr0, [r4, #-0]
    26f4:	00020800 	andeq	r0, r2, r0, lsl #16
    26f8:	1d449f30 	stclne	15, cr9, [r4, #-192]	; 0xffffff40
    26fc:	1d5e0800 	ldclne	8, cr0, [lr, #-0]
    2700:	00010800 	andeq	r0, r1, r0, lsl #16
    2704:	001d6053 	andseq	r6, sp, r3, asr r0
    2708:	001d6408 	andseq	r6, sp, r8, lsl #8
    270c:	53000108 	movwpl	r0, #264	; 0x108
	...
    2718:	08001d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip}
    271c:	08001e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip}
    2720:	48510001 	ldmdami	r1, {r0}^
    2724:	6208001e 	andvs	r0, r8, #30
    2728:	0408001e 	streq	r0, [r8], #-30
    272c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2730:	001e629f 	mulseq	lr, pc, r2	; <UNPREDICTABLE>
    2734:	001e6808 	andseq	r6, lr, r8, lsl #16
    2738:	51000108 	tstpl	r0, r8, lsl #2
	...
    2744:	08001d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip}
    2748:	08001d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip}
    274c:	9f300002 	svcls	0x00300002
    2750:	08001d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip}
    2754:	08001e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, ip}
    2758:	56560001 	ldrbpl	r0, [r6], -r1
    275c:	6008001e 	andvs	r0, r8, lr, lsl r0
    2760:	0108001e 	tsteq	r8, lr, lsl r0
    2764:	1e625400 	cdpne	4, 6, cr5, cr2, cr0, {0}
    2768:	1e680800 	cdpne	8, 6, cr0, cr8, cr0, {0}
    276c:	00010800 	andeq	r0, r1, r0, lsl #16
    2770:	00000056 	andeq	r0, r0, r6, asr r0
    2774:	00000000 	andeq	r0, r0, r0
    2778:	001d7800 	andseq	r7, sp, r0, lsl #16
    277c:	001e3208 	andseq	r3, lr, r8, lsl #4
    2780:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    2784:	001e329f 	mulseq	lr, pc, r2	; <UNPREDICTABLE>
    2788:	001e3a08 	andseq	r3, lr, r8, lsl #20
    278c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    2790:	08001e62 	stmdaeq	r0, {r1, r5, r6, r9, sl, fp, ip}
    2794:	08001e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip}
    2798:	9f320002 	svcls	0x00320002
	...
    27a4:	08001d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip}
    27a8:	08001e28 	stmdaeq	r0, {r3, r5, r9, sl, fp, ip}
    27ac:	9f300002 	svcls	0x00300002
    27b0:	08001e28 	stmdaeq	r0, {r3, r5, r9, sl, fp, ip}
    27b4:	08001e32 	stmdaeq	r0, {r1, r4, r5, r9, sl, fp, ip}
    27b8:	00720005 	rsbseq	r0, r2, r5
    27bc:	329f1a31 	addscc	r1, pc, #200704	; 0x31000
    27c0:	3a08001e 	bcc	202840 <_Min_Stack_Size+0x202440>
    27c4:	0508001e 	streq	r0, [r8, #-30]
    27c8:	38007200 	stmdacc	r0, {r9, ip, sp, lr}
    27cc:	1e629f24 	cdpne	15, 6, cr9, cr2, cr4, {1}
    27d0:	1e680800 	cdpne	8, 6, cr0, cr8, cr0, {0}
    27d4:	00020800 	andeq	r0, r2, r0, lsl #16
    27d8:	00009f30 	andeq	r9, r0, r0, lsr pc
    27dc:	00000000 	andeq	r0, r0, r0
    27e0:	1d780000 	ldclne	0, cr0, [r8, #-0]
    27e4:	1db20800 	ldcne	8, cr0, [r2]
    27e8:	00020800 	andeq	r0, r2, r0, lsl #16
    27ec:	1e629f31 	mcrne	15, 3, r9, cr2, cr1, {1}
    27f0:	1e680800 	cdpne	8, 6, cr0, cr8, cr0, {0}
    27f4:	00020800 	andeq	r0, r2, r0, lsl #16
    27f8:	00009f31 	andeq	r9, r0, r1, lsr pc
    27fc:	00000000 	andeq	r0, r0, r0
    2800:	1d780000 	ldclne	0, cr0, [r8, #-0]
    2804:	1e220800 	cdpne	8, 2, cr0, cr2, cr0, {0}
    2808:	00020800 	andeq	r0, r2, r0, lsl #16
    280c:	1e229f30 	mcrne	15, 1, r9, cr2, cr0, {1}
    2810:	1e260800 	cdpne	8, 2, cr0, cr6, cr0, {0}
    2814:	00010800 	andeq	r0, r1, r0, lsl #16
    2818:	001e2852 	andseq	r2, lr, r2, asr r8
    281c:	001e3208 	andseq	r3, lr, r8, lsl #4
    2820:	52000108 	andpl	r0, r0, #8, 2
    2824:	08001e62 	stmdaeq	r0, {r1, r5, r6, r9, sl, fp, ip}
    2828:	08001e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip}
    282c:	9f300002 	svcls	0x00300002
	...
    2838:	08001d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip}
    283c:	08001df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp, ip}
    2840:	9f300002 	svcls	0x00300002
    2844:	08001df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp, ip}
    2848:	08001e00 	stmdaeq	r0, {r9, sl, fp, ip}
    284c:	62570001 	subsvs	r0, r7, #1
    2850:	6808001e 	stmdavs	r8, {r1, r2, r3, r4}
    2854:	0208001e 	andeq	r0, r8, #30
    2858:	009f3000 	addseq	r3, pc, r0
    285c:	00000000 	andeq	r0, r0, r0
    2860:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    2864:	d608001d 			; <UNDEFINED> instruction: 0xd608001d
    2868:	0208001d 	andeq	r0, r8, #29
    286c:	d69f3000 	ldrle	r3, [pc], r0
    2870:	dc08001d 	stcle	0, cr0, [r8], {29}
    2874:	0608001d 			; <UNDEFINED> instruction: 0x0608001d
    2878:	08007900 	stmdaeq	r0, {r8, fp, ip, sp, lr}
    287c:	dc9f1a3f 	vldmiale	pc, {s2-s64}
    2880:	3c08001d 	stccc	0, cr0, [r8], {29}
    2884:	0108001e 	tsteq	r8, lr, lsl r0
    2888:	1e625900 	cdpne	9, 6, cr5, cr2, cr0, {0}
    288c:	1e680800 	cdpne	8, 6, cr0, cr8, cr0, {0}
    2890:	00020800 	andeq	r0, r2, r0, lsl #16
    2894:	00009f30 	andeq	r9, r0, r0, lsr pc
    2898:	00000000 	andeq	r0, r0, r0
    289c:	1d780000 	ldclne	0, cr0, [r8, #-0]
    28a0:	1dce0800 	stclne	8, cr0, [lr]
    28a4:	00020800 	andeq	r0, r2, r0, lsl #16
    28a8:	1dce9f30 	stclne	15, cr9, [lr, #192]	; 0xc0
    28ac:	1de80800 	stclne	8, cr0, [r8]
    28b0:	00090800 	andeq	r0, r9, r0, lsl #16
    28b4:	c00a007c 	andgt	r0, sl, ip, ror r0
    28b8:	25361a7f 	ldrcs	r1, [r6, #-2687]!	; 0xa7f
    28bc:	001e629f 	mulseq	lr, pc, r2	; <UNPREDICTABLE>
    28c0:	001e6808 	andseq	r6, lr, r8, lsl #16
    28c4:	30000208 	andcc	r0, r0, r8, lsl #4
    28c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    28cc:	00000000 	andeq	r0, r0, r0
    28d0:	001d7800 	andseq	r7, sp, r0, lsl #16
    28d4:	001dd208 	andseq	sp, sp, r8, lsl #4
    28d8:	30000208 	andcc	r0, r0, r8, lsl #4
    28dc:	001dd29f 	mulseq	sp, pc, r2	; <UNPREDICTABLE>
    28e0:	001df008 	andseq	pc, sp, r8
    28e4:	77000908 	strvc	r0, [r0, -r8, lsl #18]
    28e8:	244a4c00 	strbcs	r4, [sl], #-3072	; 0xc00
    28ec:	9f254c1a 	svcls	0x00254c1a
    28f0:	08001e62 	stmdaeq	r0, {r1, r5, r6, r9, sl, fp, ip}
    28f4:	08001e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip}
    28f8:	9f300002 	svcls	0x00300002
	...
    2904:	08001ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, ip}
    2908:	08001eda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, fp, ip}
    290c:	da510001 	ble	1442918 <_Min_Stack_Size+0x1442518>
    2910:	de08001e 	mcrle	0, 0, r0, cr8, cr14, {0}
    2914:	0408001e 	streq	r0, [r8], #-30
    2918:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    291c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2920:	00000000 	andeq	r0, r0, r0
    2924:	001f5400 	andseq	r5, pc, r0, lsl #8
    2928:	001f7408 	andseq	r7, pc, r8, lsl #8
    292c:	51000108 	tstpl	r0, r8, lsl #2
    2930:	08001f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, ip}
    2934:	08001f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip}
    2938:	01f30004 	mvnseq	r0, r4
    293c:	00009f51 	andeq	r9, r0, r1, asr pc
    2940:	00000000 	andeq	r0, r0, r0
    2944:	1f540000 	svcne	0x00540000
    2948:	1f760800 	svcne	0x00760800
    294c:	00020800 	andeq	r0, r2, r0, lsl #16
    2950:	1f769f30 	svcne	0x00769f30
    2954:	1f780800 	svcne	0x00780800
    2958:	00010800 	andeq	r0, r1, r0, lsl #16
    295c:	001f9652 	andseq	r9, pc, r2, asr r6	; <UNPREDICTABLE>
    2960:	001f9c08 	andseq	r9, pc, r8, lsl #24
    2964:	53000108 	movwpl	r0, #264	; 0x108
	...
    2970:	08001f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip}
    2974:	08001f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip}
    2978:	9f300002 	svcls	0x00300002
    297c:	08001f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip}
    2980:	08001f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, ip}
    2984:	96530001 	ldrbls	r0, [r3], -r1
    2988:	9c08001f 	stcls	0, cr0, [r8], {31}
    298c:	1f08001f 	svcne	0x0008001f
    2990:	01000a00 	tsteq	r0, r0, lsl #20
    2994:	5101f330 	tstpl	r1, r0, lsr r3
    2998:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    299c:	ff0c1aff 			; <UNDEFINED> instruction: 0xff0c1aff
    29a0:	1afffffd 	bne	299c <_Min_Stack_Size+0x259c>
    29a4:	25402440 	strbcs	r2, [r0, #-1088]	; 0x440
    29a8:	01282930 	teqeq	r8, r0, lsr r9
    29ac:	9f131600 	svcls	0x00131600
	...
    29b8:	08001f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip}
    29bc:	08001f9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, fp, ip}
    29c0:	9e500001 	cdpls	0, 5, cr0, cr0, cr1, {0}
    29c4:	a208001f 	andge	r0, r8, #31
    29c8:	0408001f 	streq	r0, [r8], #-31
    29cc:	5001f300 	andpl	pc, r1, r0, lsl #6
    29d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    29d4:	00000000 	andeq	r0, r0, r0
    29d8:	001fd000 	andseq	sp, pc, r0
    29dc:	001fd608 	andseq	sp, pc, r8, lsl #12
    29e0:	50000108 	andpl	r0, r0, r8, lsl #2
    29e4:	08001fd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, fp, ip}
    29e8:	08001fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
    29ec:	01f30004 	mvnseq	r0, r4
    29f0:	00009f50 	andeq	r9, r0, r0, asr pc
    29f4:	00000000 	andeq	r0, r0, r0
    29f8:	1fd00000 	svcne	0x00d00000
    29fc:	1fda0800 	svcne	0x00da0800
    2a00:	00020800 	andeq	r0, r2, r0, lsl #16
    2a04:	1fda9f30 	svcne	0x00da9f30
    2a08:	1fdc0800 	svcne	0x00dc0800
    2a0c:	00010800 	andeq	r0, r1, r0, lsl #16
    2a10:	00000050 	andeq	r0, r0, r0, asr r0
    2a14:	00000000 	andeq	r0, r0, r0
    2a18:	001fdc00 	andseq	sp, pc, r0, lsl #24
    2a1c:	001fde08 	andseq	sp, pc, r8, lsl #28
    2a20:	50000108 	andpl	r0, r0, r8, lsl #2
    2a24:	08001fde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
    2a28:	08001fe2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, sl, fp, ip}
    2a2c:	01f30004 	mvnseq	r0, r4
    2a30:	00009f50 	andeq	r9, r0, r0, asr pc
    2a34:	00000000 	andeq	r0, r0, r0
    2a38:	1fe40000 	svcne	0x00e40000
    2a3c:	1fee0800 	svcne	0x00ee0800
    2a40:	00010800 	andeq	r0, r1, r0, lsl #16
    2a44:	001fee51 	andseq	lr, pc, r1, asr lr	; <UNPREDICTABLE>
    2a48:	001ff208 	andseq	pc, pc, r8, lsl #4
    2a4c:	f3000408 	vshl.u8	d0, d8, d0
    2a50:	f29f5101 	vaddw.s16	<illegal reg q2.5>, <illegal reg q7.5>, d1
    2a54:	f408001f 	vst4.8	{d0-d3}, [r8 :64]
    2a58:	0108001f 	tsteq	r8, pc, lsl r0
    2a5c:	1ff45100 	svcne	0x00f45100
    2a60:	1ff80800 	svcne	0x00f80800
    2a64:	00040800 	andeq	r0, r4, r0, lsl #16
    2a68:	9f5101f3 	svcls	0x005101f3
	...
    2a74:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2a78:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2a7c:	fc510001 	mrrc2	0, 0, r0, r1, cr1
    2a80:	1608001f 			; <UNDEFINED> instruction: 0x1608001f
    2a84:	04080020 	streq	r0, [r8], #-32
    2a88:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2a8c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2a90:	00000000 	andeq	r0, r0, r0
    2a94:	001ff800 	andseq	pc, pc, r0, lsl #16
    2a98:	001ffc08 	andseq	pc, pc, r8, lsl #24
    2a9c:	71000808 	tstvc	r0, r8, lsl #16
    2aa0:	08253400 	stmdaeq	r5!, {sl, ip, sp}
    2aa4:	fc9f1aff 	ldc2	10, cr1, [pc], {255}	; 0xff
    2aa8:	1608001f 			; <UNDEFINED> instruction: 0x1608001f
    2aac:	09080020 	stmdbeq	r8, {r5}
    2ab0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2ab4:	ff082534 			; <UNDEFINED> instruction: 0xff082534
    2ab8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    2abc:	00000000 	andeq	r0, r0, r0
    2ac0:	1ff80000 	svcne	0x00f80000
    2ac4:	20040800 	andcs	r0, r4, r0, lsl #16
    2ac8:	00020800 	andeq	r0, r2, r0, lsl #16
    2acc:	20049f30 	andcs	r9, r4, r0, lsr pc
    2ad0:	200c0800 	andcs	r0, ip, r0, lsl #16
    2ad4:	00010800 	andeq	r0, r1, r0, lsl #16
    2ad8:	00201051 	eoreq	r1, r0, r1, asr r0
    2adc:	00201208 	eoreq	r1, r0, r8, lsl #4
    2ae0:	51000108 	tstpl	r0, r8, lsl #2
	...
    2aec:	08002018 	stmdaeq	r0, {r3, r4, sp}
    2af0:	08002022 	stmdaeq	r0, {r1, r5, sp}
    2af4:	22500001 	subscs	r0, r0, #1
    2af8:	24080020 	strcs	r0, [r8], #-32
    2afc:	04080020 	streq	r0, [r8], #-32
    2b00:	5001f300 	andpl	pc, r1, r0, lsl #6
    2b04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2b08:	00000000 	andeq	r0, r0, r0
    2b0c:	00201800 	eoreq	r1, r0, r0, lsl #16
    2b10:	00201a08 	eoreq	r1, r0, r8, lsl #20
    2b14:	30000208 	andcc	r0, r0, r8, lsl #4
    2b18:	00201a9f 	mlaeq	r0, pc, sl, r1	; <UNPREDICTABLE>
    2b1c:	00202408 	eoreq	r2, r0, r8, lsl #8
    2b20:	71000a08 	tstvc	r0, r8, lsl #20
    2b24:	1a007300 	bne	1f72c <_Min_Stack_Size+0x1f32c>
    2b28:	2e302440 	cfnegscs	mvf2, mvf0
    2b2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2b30:	00000000 	andeq	r0, r0, r0
    2b34:	00202400 	eoreq	r2, r0, r0, lsl #8
    2b38:	00202608 	eoreq	r2, r0, r8, lsl #12
    2b3c:	51000108 	tstpl	r0, r8, lsl #2
    2b40:	08002026 	stmdaeq	r0, {r1, r2, r5, sp}
    2b44:	0800202c 	stmdaeq	r0, {r2, r3, r5, sp}
    2b48:	01f30004 	mvnseq	r0, r4
    2b4c:	00009f51 	andeq	r9, r0, r1, asr pc
    2b50:	00000000 	andeq	r0, r0, r0
    2b54:	202c0000 	eorcs	r0, ip, r0
    2b58:	20320800 	eorscs	r0, r2, r0, lsl #16
    2b5c:	00010800 	andeq	r0, r1, r0, lsl #16
    2b60:	00203250 	eoreq	r3, r0, r0, asr r2
    2b64:	00205608 	eoreq	r5, r0, r8, lsl #12
    2b68:	f3000408 	vshl.u8	d0, d8, d0
    2b6c:	009f5001 	addseq	r5, pc, r1
    2b70:	00000000 	andeq	r0, r0, r0
    2b74:	2c000000 	stccs	0, cr0, [r0], {-0}
    2b78:	46080020 	strmi	r0, [r8], -r0, lsr #32
    2b7c:	01080020 	tsteq	r8, r0, lsr #32
    2b80:	20465100 	subcs	r5, r6, r0, lsl #2
    2b84:	20560800 	subscs	r0, r6, r0, lsl #16
    2b88:	00040800 	andeq	r0, r4, r0, lsl #16
    2b8c:	9f5101f3 	svcls	0x005101f3
	...
    2b98:	0800202c 	stmdaeq	r0, {r2, r3, r5, sp}
    2b9c:	08002050 	stmdaeq	r0, {r4, r6, sp}
    2ba0:	9f300002 	svcls	0x00300002
    2ba4:	08002050 	stmdaeq	r0, {r4, r6, sp}
    2ba8:	08002056 	stmdaeq	r0, {r1, r2, r4, r6, sp}
    2bac:	00500001 	subseq	r0, r0, r1
    2bb0:	00000000 	andeq	r0, r0, r0
    2bb4:	2c000000 	stccs	0, cr0, [r0], {-0}
    2bb8:	46080020 	strmi	r0, [r8], -r0, lsr #32
    2bbc:	0a080020 	beq	202c44 <_Min_Stack_Size+0x202844>
    2bc0:	00713100 	rsbseq	r3, r1, r0, lsl #2
    2bc4:	ff082534 			; <UNDEFINED> instruction: 0xff082534
    2bc8:	009f241a 	addseq	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    2bcc:	00000000 	andeq	r0, r0, r0
    2bd0:	2c000000 	stccs	0, cr0, [r0], {-0}
    2bd4:	42080020 	andmi	r0, r8, #32
    2bd8:	02080020 	andeq	r0, r8, #32
    2bdc:	429f3000 	addsmi	r3, pc, #0
    2be0:	46080020 	strmi	r0, [r8], -r0, lsr #32
    2be4:	0d080020 	stceq	0, cr0, [r8, #-128]	; 0xffffff80
    2be8:	00713100 	rsbseq	r3, r1, r0, lsl #2
    2bec:	ff082534 			; <UNDEFINED> instruction: 0xff082534
    2bf0:	0074241a 	rsbseq	r2, r4, sl, lsl r4
    2bf4:	00009f1a 	andeq	r9, r0, sl, lsl pc
    2bf8:	00000000 	andeq	r0, r0, r0
    2bfc:	20580000 	subscs	r0, r8, r0
    2c00:	205c0800 	subscs	r0, ip, r0, lsl #16
    2c04:	00010800 	andeq	r0, r1, r0, lsl #16
    2c08:	00205c51 	eoreq	r5, r0, r1, asr ip
    2c0c:	00206a08 	eoreq	r6, r0, r8, lsl #20
    2c10:	f3000408 	vshl.u8	d0, d8, d0
    2c14:	009f5101 	addseq	r5, pc, r1, lsl #2
    2c18:	00000000 	andeq	r0, r0, r0
    2c1c:	8c000000 	stchi	0, cr0, [r0], {-0}
    2c20:	c0080020 	andgt	r0, r8, r0, lsr #32
    2c24:	01080020 	tsteq	r8, r0, lsr #32
    2c28:	20c05000 	sbccs	r5, r0, r0
    2c2c:	20e40800 	rsccs	r0, r4, r0, lsl #16
    2c30:	00040800 	andeq	r0, r4, r0, lsl #16
    2c34:	9f5001f3 	svcls	0x005001f3
    2c38:	080020e4 	stmdaeq	r0, {r2, r5, r6, r7, sp}
    2c3c:	080020fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sp}
    2c40:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2c44:	0c080020 	stceq	0, cr0, [r8], {32}
    2c48:	04080021 	streq	r0, [r8], #-33	; 0x21
    2c4c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2c50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2c54:	00000000 	andeq	r0, r0, r0
    2c58:	00208c00 	eoreq	r8, r0, r0, lsl #24
    2c5c:	0020b608 	eoreq	fp, r0, r8, lsl #12
    2c60:	0c000608 	stceq	6, cr0, [r0], {8}
    2c64:	40013c00 	andmi	r3, r1, r0, lsl #24
    2c68:	0020b69f 	mlaeq	r0, pc, r6, fp	; <UNPREDICTABLE>
    2c6c:	0020c008 	eoreq	ip, r0, r8
    2c70:	70000e08 	andvc	r0, r0, r8, lsl #28
    2c74:	08019404 	stmdaeq	r1, {r2, sl, ip, pc}
    2c78:	80231aff 	strdhi	r1, [r3], -pc	; <UNPREDICTABLE>
    2c7c:	048084f8 	streq	r8, [r0], #1272	; 0x4f8
    2c80:	0020c09f 	mlaeq	r0, pc, r0, ip	; <UNPREDICTABLE>
    2c84:	0020d208 	eoreq	sp, r0, r8, lsl #4
    2c88:	f3001108 	vrhadd.u8	d1, d0, d8
    2c8c:	04235001 	strteq	r5, [r3], #-1
    2c90:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    2c94:	f880231a 			; <UNDEFINED> instruction: 0xf880231a
    2c98:	9f048084 	svcls	0x00048084
    2c9c:	080020d2 	stmdaeq	r0, {r1, r4, r6, r7, sp}
    2ca0:	080020e2 	stmdaeq	r0, {r1, r5, r6, r7, sp}
    2ca4:	0075000c 	rsbseq	r0, r5, ip
    2ca8:	231aff08 	tstcs	sl, #8, 30
    2cac:	8084f880 	addhi	pc, r4, r0, lsl #17
    2cb0:	20e29f04 	rsccs	r9, r2, r4, lsl #30
    2cb4:	20e40800 	rsccs	r0, r4, r0, lsl #16
    2cb8:	00110800 	andseq	r0, r1, r0, lsl #16
    2cbc:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
    2cc0:	08019405 	stmdaeq	r1, {r0, r2, sl, ip, pc}
    2cc4:	80231aff 	strdhi	r1, [r3], -pc	; <UNPREDICTABLE>
    2cc8:	048084f8 	streq	r8, [r0], #1272	; 0x4f8
    2ccc:	0020e49f 	mlaeq	r0, pc, r4, lr	; <UNPREDICTABLE>
    2cd0:	0020fa08 	eoreq	pc, r0, r8, lsl #20
    2cd4:	70000e08 	andvc	r0, r0, r8, lsl #28
    2cd8:	08019404 	stmdaeq	r1, {r2, sl, ip, pc}
    2cdc:	80231aff 	strdhi	r1, [r3], -pc	; <UNPREDICTABLE>
    2ce0:	048084f8 	streq	r8, [r0], #1272	; 0x4f8
    2ce4:	0020fa9f 	mlaeq	r0, pc, sl, pc	; <UNPREDICTABLE>
    2ce8:	0020fc08 	eoreq	pc, r0, r8, lsl #24
    2cec:	73000c08 	movwvc	r0, #3080	; 0xc08
    2cf0:	1aff0800 	bne	fffc4cf8 <_estack+0xdff94cf8>
    2cf4:	84f88023 	ldrbthi	r8, [r8], #35	; 0x23
    2cf8:	fc9f0480 	ldc2	4, cr0, [pc], {128}	; 0x80
    2cfc:	0c080020 	stceq	0, cr0, [r8], {32}
    2d00:	11080021 	tstne	r8, r1, lsr #32
    2d04:	5001f300 	andpl	pc, r1, r0, lsl #6
    2d08:	01940423 	orrseq	r0, r4, r3, lsr #8
    2d0c:	231aff08 	tstcs	sl, #8, 30
    2d10:	8084f880 	addhi	pc, r4, r0, lsl #17
    2d14:	00009f04 	andeq	r9, r0, r4, lsl #30
    2d18:	00000000 	andeq	r0, r0, r0
    2d1c:	211c0000 	tstcs	ip, r0
    2d20:	21280800 	teqcs	r8, r0, lsl #16
    2d24:	00010800 	andeq	r0, r1, r0, lsl #16
    2d28:	00212850 	eoreq	r2, r1, r0, asr r8
    2d2c:	00212c08 	eoreq	r2, r1, r8, lsl #24
    2d30:	f3000408 	vshl.u8	d0, d8, d0
    2d34:	009f5001 	addseq	r5, pc, r1
    2d38:	00000000 	andeq	r0, r0, r0
    2d3c:	2c000000 	stccs	0, cr0, [r0], {-0}
    2d40:	3e080021 	cdpcc	0, 0, cr0, cr8, cr1, {1}
    2d44:	01080021 	tsteq	r8, r1, lsr #32
    2d48:	213e5000 	teqcs	lr, r0
    2d4c:	21400800 	cmpcs	r0, r0, lsl #16
    2d50:	00040800 	andeq	r0, r4, r0, lsl #16
    2d54:	9f5001f3 	svcls	0x005001f3
	...
    2d60:	0800212c 	stmdaeq	r0, {r2, r3, r5, r8, sp}
    2d64:	08002136 	stmdaeq	r0, {r1, r2, r4, r5, r8, sp}
    2d68:	9f300002 	svcls	0x00300002
    2d6c:	08002136 	stmdaeq	r0, {r1, r2, r4, r5, r8, sp}
    2d70:	0800213e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sp}
    2d74:	00700008 	rsbseq	r0, r0, r8
    2d78:	301a0073 	andscc	r0, sl, r3, ror r0
    2d7c:	213e9f2e 	teqcs	lr, lr, lsr #30
    2d80:	21400800 	cmpcs	r0, r0, lsl #16
    2d84:	00090800 	andeq	r0, r9, r0, lsl #16
    2d88:	735001f3 	cmpvc	r0, #-1073741764	; 0xc000003c
    2d8c:	2e301a00 	vaddcs.f32	s2, s0, s0
    2d90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2d94:	00000000 	andeq	r0, r0, r0
    2d98:	00214c00 	eoreq	r4, r1, r0, lsl #24
    2d9c:	00215e08 	eoreq	r5, r1, r8, lsl #28
    2da0:	50000108 	andpl	r0, r0, r8, lsl #2
    2da4:	0800215e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sp}
    2da8:	08002160 	stmdaeq	r0, {r5, r6, r8, sp}
    2dac:	01f30004 	mvnseq	r0, r4
    2db0:	00009f50 	andeq	r9, r0, r0, asr pc
    2db4:	00000000 	andeq	r0, r0, r0
    2db8:	214c0000 	mrscs	r0, (UNDEF: 76)
    2dbc:	21560800 	cmpcs	r6, r0, lsl #16
    2dc0:	00020800 	andeq	r0, r2, r0, lsl #16
    2dc4:	21569f30 	cmpcs	r6, r0, lsr pc
    2dc8:	215e0800 	cmpcs	lr, r0, lsl #16
    2dcc:	00080800 	andeq	r0, r8, r0, lsl #16
    2dd0:	00730070 	rsbseq	r0, r3, r0, ror r0
    2dd4:	9f2e301a 	svcls	0x002e301a
    2dd8:	0800215e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sp}
    2ddc:	08002160 	stmdaeq	r0, {r5, r6, r8, sp}
    2de0:	01f30009 	mvnseq	r0, r9
    2de4:	1a007350 	bne	1fb2c <_Min_Stack_Size+0x1f72c>
    2de8:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    2dec:	00000000 	andeq	r0, r0, r0
    2df0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2df4:	28080021 	stmdacs	r8, {r0, r5}
    2df8:	01080022 	tsteq	r8, r2, lsr #32
    2dfc:	22285000 	eorcs	r5, r8, #0
    2e00:	22340800 	eorscs	r0, r4, #0, 16
    2e04:	00040800 	andeq	r0, r4, r0, lsl #16
    2e08:	9f5001f3 	svcls	0x005001f3
    2e0c:	08002234 	stmdaeq	r0, {r2, r4, r5, r9, sp}
    2e10:	0800223e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sp}
    2e14:	00500001 	subseq	r0, r0, r1
    2e18:	00000000 	andeq	r0, r0, r0
    2e1c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2e20:	c4080021 	strgt	r0, [r8], #-33	; 0x21
    2e24:	02080021 	andeq	r0, r8, #33	; 0x21
    2e28:	c49f3000 	ldrgt	r3, [pc], #0	; 2e30 <_Min_Stack_Size+0x2a30>
    2e2c:	32080021 	andcc	r0, r8, #33	; 0x21
    2e30:	01080022 	tsteq	r8, r2, lsr #32
    2e34:	22345600 	eorscs	r5, r4, #0, 12
    2e38:	22380800 	eorscs	r0, r8, #0, 16
    2e3c:	00020800 	andeq	r0, r2, r0, lsl #16
    2e40:	22389f30 	eorscs	r9, r8, #48, 30	; 0xc0
    2e44:	223e0800 	eorscs	r0, lr, #0, 16
    2e48:	00010800 	andeq	r0, r1, r0, lsl #16
    2e4c:	00000056 	andeq	r0, r0, r6, asr r0
    2e50:	00000000 	andeq	r0, r0, r0
    2e54:	00218800 	eoreq	r8, r1, r0, lsl #16
    2e58:	0021c608 	eoreq	ip, r1, r8, lsl #12
    2e5c:	30000208 	andcc	r0, r0, r8, lsl #4
    2e60:	0021c69f 	mlaeq	r1, pc, r6, ip	; <UNPREDICTABLE>
    2e64:	00223208 	eoreq	r3, r2, r8, lsl #4
    2e68:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    2e6c:	08002234 	stmdaeq	r0, {r2, r4, r5, r9, sp}
    2e70:	0800223a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sp}
    2e74:	9f300002 	svcls	0x00300002
    2e78:	0800223a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sp}
    2e7c:	0800223e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sp}
    2e80:	00550001 	subseq	r0, r5, r1
    2e84:	00000000 	andeq	r0, r0, r0
    2e88:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2e8c:	e2080021 	and	r0, r8, #33	; 0x21
    2e90:	02080021 	andeq	r0, r8, #33	; 0x21
    2e94:	e29f3000 	adds	r3, pc, #0
    2e98:	32080021 	andcc	r0, r8, #33	; 0x21
    2e9c:	01080022 	tsteq	r8, r2, lsr #32
    2ea0:	22345400 	eorscs	r5, r4, #0, 8
    2ea4:	223c0800 	eorscs	r0, ip, #0, 16
    2ea8:	00020800 	andeq	r0, r2, r0, lsl #16
    2eac:	223c9f30 	eorscs	r9, ip, #48, 30	; 0xc0
    2eb0:	223e0800 	eorscs	r0, lr, #0, 16
    2eb4:	00010800 	andeq	r0, r1, r0, lsl #16
    2eb8:	00000054 	andeq	r0, r0, r4, asr r0
    2ebc:	00000000 	andeq	r0, r0, r0
    2ec0:	00218800 	eoreq	r8, r1, r0, lsl #16
    2ec4:	00221e08 	eoreq	r1, r2, r8, lsl #28
    2ec8:	30000208 	andcc	r0, r0, r8, lsl #4
    2ecc:	00221e9f 	mlaeq	r2, pc, lr, r1	; <UNPREDICTABLE>
    2ed0:	00223408 	eoreq	r3, r2, r8, lsl #8
    2ed4:	71000508 	tstvc	r0, r8, lsl #10
    2ed8:	9f244000 	svcls	0x00244000
    2edc:	08002234 	stmdaeq	r0, {r2, r4, r5, r9, sp}
    2ee0:	0800223e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sp}
    2ee4:	9f300002 	svcls	0x00300002
	...
    2ef0:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
    2ef4:	080022ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sp}
    2ef8:	9f300002 	svcls	0x00300002
    2efc:	080022ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sp}
    2f00:	080022ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sp}
    2f04:	0c700006 	ldcleq	0, cr0, [r0], #-24	; 0xffffffe8
    2f08:	9f243406 	svcls	0x00243406
	...
    2f14:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
    2f18:	080022ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sp}
    2f1c:	9f300002 	svcls	0x00300002
    2f20:	080022ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sp}
    2f24:	080022ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sp}
    2f28:	10700006 	rsbsne	r0, r0, r6
    2f2c:	9f243806 	svcls	0x00243806
	...
    2f38:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
    2f3c:	080022ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sp}
    2f40:	9f300002 	svcls	0x00300002
    2f44:	080022ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sp}
    2f48:	080022ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sp}
    2f4c:	14700006 	ldrbtne	r0, [r0], #-6
    2f50:	9f244006 	svcls	0x00244006
	...
    2f5c:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
    2f60:	080022ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sp}
    2f64:	9f300002 	svcls	0x00300002
    2f68:	080022ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sp}
    2f6c:	080022ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sp}
    2f70:	18700006 	ldmdane	r0!, {r1, r2}^
    2f74:	9f244806 	svcls	0x00244806
	...
    2f80:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
    2f84:	080022f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sp}
    2f88:	9f300002 	svcls	0x00300002
    2f8c:	080022f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sp}
    2f90:	08002306 	stmdaeq	r0, {r1, r2, r8, r9, sp}
    2f94:	20700006 	rsbscs	r0, r0, r6
    2f98:	9f243806 	svcls	0x00243806
	...
    2fa4:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
    2fa8:	080022f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sp}
    2fac:	9f300002 	svcls	0x00300002
    2fb0:	080022f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sp}
    2fb4:	08002306 	stmdaeq	r0, {r1, r2, r8, r9, sp}
    2fb8:	24700006 	ldrbtcs	r0, [r0], #-6
    2fbc:	9f244006 	svcls	0x00244006
	...
    2fc8:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
    2fcc:	0800235a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sp}
    2fd0:	9f300002 	svcls	0x00300002
    2fd4:	0800235a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sp}
    2fd8:	0800237a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sp}
    2fdc:	0c700006 	ldcleq	0, cr0, [r0], #-24	; 0xffffffe8
    2fe0:	9f243406 	svcls	0x00243406
	...
    2fec:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
    2ff0:	0800235a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sp}
    2ff4:	9f300002 	svcls	0x00300002
    2ff8:	0800235a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sp}
    2ffc:	0800237a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sp}
    3000:	10700006 	rsbsne	r0, r0, r6
    3004:	9f243806 	svcls	0x00243806
	...
    3010:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
    3014:	0800235a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sp}
    3018:	9f300002 	svcls	0x00300002
    301c:	0800235a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sp}
    3020:	0800237a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sp}
    3024:	14700006 	ldrbtne	r0, [r0], #-6
    3028:	9f244006 	svcls	0x00244006
	...
    3034:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
    3038:	0800235a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sp}
    303c:	9f300002 	svcls	0x00300002
    3040:	0800235a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sp}
    3044:	0800237a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sp}
    3048:	18700006 	ldmdane	r0!, {r1, r2}^
    304c:	9f244806 	svcls	0x00244806
	...
    3058:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
    305c:	08002382 	stmdaeq	r0, {r1, r7, r8, r9, sp}
    3060:	9f300002 	svcls	0x00300002
    3064:	08002382 	stmdaeq	r0, {r1, r7, r8, r9, sp}
    3068:	08002396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sp}
    306c:	20700006 	rsbscs	r0, r0, r6
    3070:	9f243806 	svcls	0x00243806
	...
    307c:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
    3080:	08002382 	stmdaeq	r0, {r1, r7, r8, r9, sp}
    3084:	9f300002 	svcls	0x00300002
    3088:	08002382 	stmdaeq	r0, {r1, r7, r8, r9, sp}
    308c:	08002396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sp}
    3090:	24700006 	ldrbtcs	r0, [r0], #-6
    3094:	9f244006 	svcls	0x00244006
	...
    30a0:	080023f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sp}
    30a4:	0800241c 	stmdaeq	r0, {r2, r3, r4, sl, sp}
    30a8:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    30ac:	20080024 	andcs	r0, r8, r4, lsr #32
    30b0:	04080024 	streq	r0, [r8], #-36	; 0x24
    30b4:	5001f300 	andpl	pc, r1, r0, lsl #6
    30b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    30bc:	00000000 	andeq	r0, r0, r0
    30c0:	00241200 	eoreq	r1, r4, r0, lsl #4
    30c4:	00241c08 	eoreq	r1, r4, r8, lsl #24
    30c8:	70000508 	andvc	r0, r0, r8, lsl #10
    30cc:	9f243800 	svcls	0x00243800
    30d0:	0800241c 	stmdaeq	r0, {r2, r3, r4, sl, sp}
    30d4:	08002420 	stmdaeq	r0, {r5, sl, sp}
    30d8:	01f30006 	mvnseq	r0, r6
    30dc:	9f243850 	svcls	0x00243850
	...
    30e8:	0800242c 	stmdaeq	r0, {r2, r3, r5, sl, sp}
    30ec:	0800243c 	stmdaeq	r0, {r2, r3, r4, r5, sl, sp}
    30f0:	3c500001 	mrrccc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    30f4:	40080024 	andmi	r0, r8, r4, lsr #32
    30f8:	04080024 	streq	r0, [r8], #-36	; 0x24
    30fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    3100:	0024409f 	mlaeq	r4, pc, r0, r4	; <UNPREDICTABLE>
    3104:	00244208 	eoreq	r4, r4, r8, lsl #4
    3108:	50000108 	andpl	r0, r0, r8, lsl #2
    310c:	08002442 	stmdaeq	r0, {r1, r6, sl, sp}
    3110:	08002446 	stmdaeq	r0, {r1, r2, r6, sl, sp}
    3114:	01f30004 	mvnseq	r0, r4
    3118:	00009f50 	andeq	r9, r0, r0, asr pc
    311c:	00000000 	andeq	r0, r0, r0
    3120:	24480000 	strbcs	r0, [r8], #-0
    3124:	245a0800 	ldrbcs	r0, [sl], #-2048	; 0x800
    3128:	00010800 	andeq	r0, r1, r0, lsl #16
    312c:	00245a50 	eoreq	r5, r4, r0, asr sl
    3130:	00245c08 	eoreq	r5, r4, r8, lsl #24
    3134:	f3000408 	vshl.u8	d0, d8, d0
    3138:	009f5001 	addseq	r5, pc, r1
    313c:	00000000 	andeq	r0, r0, r0
    3140:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    3144:	52080024 	andpl	r0, r8, #36	; 0x24
    3148:	02080024 	andeq	r0, r8, #36	; 0x24
    314c:	529f3000 	addspl	r3, pc, #0
    3150:	5a080024 	bpl	2031e8 <_Min_Stack_Size+0x202de8>
    3154:	08080024 	stmdaeq	r8, {r2, r5}
    3158:	73007000 	movwvc	r7, #0
    315c:	2e301a00 	vaddcs.f32	s2, s0, s0
    3160:	00245a9f 	mlaeq	r4, pc, sl, r5	; <UNPREDICTABLE>
    3164:	00245c08 	eoreq	r5, r4, r8, lsl #24
    3168:	f3000908 	vmls.i8	d0, d0, d8
    316c:	00735001 	rsbseq	r5, r3, r1
    3170:	9f2e301a 	svcls	0x002e301a
	...
    317c:	08002468 	stmdaeq	r0, {r3, r5, r6, sl, sp}
    3180:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
    3184:	7c500001 	mrrcvc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3188:	84080024 	strhi	r0, [r8], #-36	; 0x24
    318c:	04080024 	streq	r0, [r8], #-36	; 0x24
    3190:	5001f300 	andpl	pc, r1, r0, lsl #6
    3194:	0024849f 	mlaeq	r4, pc, r4, r8	; <UNPREDICTABLE>
    3198:	00248608 	eoreq	r8, r4, r8, lsl #12
    319c:	50000108 	andpl	r0, r0, r8, lsl #2
    31a0:	08002486 	stmdaeq	r0, {r1, r2, r7, sl, sp}
    31a4:	08002488 	stmdaeq	r0, {r3, r7, sl, sp}
    31a8:	01f30004 	mvnseq	r0, r4
    31ac:	00009f50 	andeq	r9, r0, r0, asr pc
    31b0:	00000000 	andeq	r0, r0, r0
    31b4:	24680000 	strbtcs	r0, [r8], #-0
    31b8:	24720800 	ldrbtcs	r0, [r2], #-2048	; 0x800
    31bc:	00020800 	andeq	r0, r2, r0, lsl #16
    31c0:	24729f30 	ldrbtcs	r9, [r2], #-3888	; 0xf30
    31c4:	247c0800 	ldrbtcs	r0, [ip], #-2048	; 0x800
    31c8:	000a0800 	andeq	r0, sl, r0, lsl #16
    31cc:	25380070 	ldrcs	r0, [r8, #-112]!	; 0x70
    31d0:	301a0072 	andscc	r0, sl, r2, ror r0
    31d4:	247c9f2e 	ldrbtcs	r9, [ip], #-3886	; 0xf2e
    31d8:	24840800 	strcs	r0, [r4], #2048	; 0x800
    31dc:	000b0800 	andeq	r0, fp, r0, lsl #16
    31e0:	385001f3 	ldmdacc	r0, {r0, r1, r4, r5, r6, r7, r8}^
    31e4:	1a007225 	bne	1fa80 <_Min_Stack_Size+0x1f680>
    31e8:	849f2e30 	ldrhi	r2, [pc], #3632	; 31f0 <_Min_Stack_Size+0x2df0>
    31ec:	86080024 	strhi	r0, [r8], -r4, lsr #32
    31f0:	0a080024 	beq	203288 <_Min_Stack_Size+0x202e88>
    31f4:	38007000 	stmdacc	r0, {ip, sp, lr}
    31f8:	1a007225 	bne	1fa94 <_Min_Stack_Size+0x1f694>
    31fc:	869f2e30 			; <UNDEFINED> instruction: 0x869f2e30
    3200:	88080024 	stmdahi	r8, {r2, r5}
    3204:	01080024 	tsteq	r8, r4, lsr #32
    3208:	00005000 	andeq	r5, r0, r0
    320c:	00000000 	andeq	r0, r0, r0
    3210:	24700000 	ldrbtcs	r0, [r0], #-0
    3214:	247c0800 	ldrbtcs	r0, [ip], #-2048	; 0x800
    3218:	00050800 	andeq	r0, r5, r0, lsl #16
    321c:	25380070 	ldrcs	r0, [r8, #-112]!	; 0x70
    3220:	00247c9f 	mlaeq	r4, pc, ip, r7	; <UNPREDICTABLE>
    3224:	00248408 	eoreq	r8, r4, r8, lsl #8
    3228:	f3000608 	vmax.u8	d0, d0, d8
    322c:	25385001 	ldrcs	r5, [r8, #-1]!
    3230:	0024849f 	mlaeq	r4, pc, r4, r8	; <UNPREDICTABLE>
    3234:	00248608 	eoreq	r8, r4, r8, lsl #12
    3238:	70000508 	andvc	r0, r0, r8, lsl #10
    323c:	9f253800 	svcls	0x00253800
    3240:	08002486 	stmdaeq	r0, {r1, r2, r7, sl, sp}
    3244:	08002488 	stmdaeq	r0, {r3, r7, sl, sp}
    3248:	01f30006 	mvnseq	r0, r6
    324c:	9f253850 	svcls	0x00253850
	...
    3258:	08002488 	stmdaeq	r0, {r3, r7, sl, sp}
    325c:	08002492 	stmdaeq	r0, {r1, r4, r7, sl, sp}
    3260:	92500001 	subsls	r0, r0, #1
    3264:	96080024 	strls	r0, [r8], -r4, lsr #32
    3268:	01080024 	tsteq	r8, r4, lsr #32
    326c:	00005000 	andeq	r5, r0, r0
    3270:	00000000 	andeq	r0, r0, r0
    3274:	24b40000 	ldrtcs	r0, [r4], #0
    3278:	25480800 	strbcs	r0, [r8, #-2048]	; 0x800
    327c:	00010800 	andeq	r0, r1, r0, lsl #16
    3280:	00254850 	eoreq	r4, r5, r0, asr r8
    3284:	00255808 	eoreq	r5, r5, r8, lsl #16
    3288:	f3000408 	vshl.u8	d0, d8, d0
    328c:	009f5001 	addseq	r5, pc, r1
    3290:	00000000 	andeq	r0, r0, r0
    3294:	b4000000 	strlt	r0, [r0], #-0
    3298:	cc080024 	stcgt	0, cr0, [r8], {36}	; 0x24
    329c:	02080024 	andeq	r0, r8, #36	; 0x24
    32a0:	cc9f3000 	ldcgt	0, cr3, [pc], {0}
    32a4:	da080024 	ble	20333c <_Min_Stack_Size+0x202f3c>
    32a8:	06080024 	streq	r0, [r8], -r4, lsr #32
    32ac:	06107000 	ldreq	r7, [r0], -r0
    32b0:	009f2440 	addseq	r2, pc, r0, asr #8
    32b4:	00000000 	andeq	r0, r0, r0
    32b8:	b4000000 	strlt	r0, [r0], #-0
    32bc:	e0080024 	and	r0, r8, r4, lsr #32
    32c0:	02080024 	andeq	r0, r8, #36	; 0x24
    32c4:	e09f3000 	adds	r3, pc, r0
    32c8:	ee080024 	cdp	0, 0, cr0, cr8, cr4, {1}
    32cc:	06080024 	streq	r0, [r8], -r4, lsr #32
    32d0:	06187000 	ldreq	r7, [r8], -r0
    32d4:	009f2440 	addseq	r2, pc, r0, asr #8
    32d8:	00000000 	andeq	r0, r0, r0
    32dc:	b4000000 	strlt	r0, [r0], #-0
    32e0:	f4080024 	vst4.8	{d0-d3}, [r8 :128], r4
    32e4:	02080024 	andeq	r0, r8, #36	; 0x24
    32e8:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
    32ec:	02080024 	andeq	r0, r8, #36	; 0x24
    32f0:	06080025 	streq	r0, [r8], -r5, lsr #32
    32f4:	06207000 	strteq	r7, [r0], -r0
    32f8:	009f2440 	addseq	r2, pc, r0, asr #8
    32fc:	00000000 	andeq	r0, r0, r0
    3300:	b4000000 	strlt	r0, [r0], #-0
    3304:	08080024 	stmdaeq	r8, {r2, r5}
    3308:	02080025 	andeq	r0, r8, #37	; 0x25
    330c:	089f3000 	ldmeq	pc, {ip, sp}	; <UNPREDICTABLE>
    3310:	16080025 	strne	r0, [r8], -r5, lsr #32
    3314:	06080025 	streq	r0, [r8], -r5, lsr #32
    3318:	06287000 	strteq	r7, [r8], -r0
    331c:	009f2440 	addseq	r2, pc, r0, asr #8
    3320:	00000000 	andeq	r0, r0, r0
    3324:	b4000000 	strlt	r0, [r0], #-0
    3328:	3c080024 	stccc	0, cr0, [r8], {36}	; 0x24
    332c:	02080025 	andeq	r0, r8, #37	; 0x25
    3330:	3c9f3000 	ldccc	0, cr3, [pc], {0}
    3334:	56080025 	strpl	r0, [r8], -r5, lsr #32
    3338:	05080025 	streq	r0, [r8, #-37]	; 0x25
    333c:	38007400 	stmdacc	r0, {sl, ip, sp, lr}
    3340:	00009f24 	andeq	r9, r0, r4, lsr #30
    3344:	00000000 	andeq	r0, r0, r0
    3348:	24b40000 	ldrtcs	r0, [r4], #0
    334c:	253e0800 	ldrcs	r0, [lr, #-2048]!	; 0x800
    3350:	00020800 	andeq	r0, r2, r0, lsl #16
    3354:	253e9f30 	ldrcs	r9, [lr, #-3888]!	; 0xf30
    3358:	25580800 	ldrbcs	r0, [r8, #-2048]	; 0x800
    335c:	00050800 	andeq	r0, r5, r0, lsl #16
    3360:	24400071 	strbcs	r0, [r0], #-113	; 0x71
    3364:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3368:	00000000 	andeq	r0, r0, r0
    336c:	0025ce00 	eoreq	ip, r5, r0, lsl #28
    3370:	0025d008 	eoreq	sp, r5, r8
    3374:	74000b08 	strvc	r0, [r0], #-2824	; 0xb08
    3378:	37253400 	strcc	r3, [r5, -r0, lsl #8]!
    337c:	04939f1a 	ldreq	r9, [r3], #3866	; 0xf1a
    3380:	25d00893 	ldrbcs	r0, [r0, #2195]	; 0x893
    3384:	25d20800 	ldrbcs	r0, [r2, #2048]	; 0x800
    3388:	00140800 	andseq	r0, r4, r0, lsl #16
    338c:	25340074 	ldrcs	r0, [r4, #-116]!	; 0x74
    3390:	939f1a37 	orrsls	r1, pc, #225280	; 0x37000
    3394:	38007104 	stmdacc	r0, {r2, r8, ip, sp, lr}
    3398:	9f1a3725 	svcls	0x001a3725
    339c:	04930493 	ldreq	r0, [r3], #1171	; 0x493
    33a0:	080025d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl, sp}
    33a4:	080025d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, sp}
    33a8:	0074001b 	rsbseq	r0, r4, fp, lsl r0
    33ac:	1a372534 	bne	dcc884 <_Min_Stack_Size+0xdcc484>
    33b0:	7104939f 			; <UNDEFINED> instruction: 0x7104939f
    33b4:	37253800 	strcc	r3, [r5, -r0, lsl #16]!
    33b8:	04939f1a 	ldreq	r9, [r3], #3866	; 0xf1a
    33bc:	253c0072 	ldrcs	r0, [ip, #-114]!	; 0x72
    33c0:	939f1a37 	orrsls	r1, pc, #225280	; 0x37000
    33c4:	0025d604 	eoreq	sp, r5, r4, lsl #12
    33c8:	0025da08 	eoreq	sp, r5, r8, lsl #20
    33cc:	93001408 	movwls	r1, #1032	; 0x408
    33d0:	38007104 	stmdacc	r0, {r2, r8, ip, sp, lr}
    33d4:	9f1a3725 	svcls	0x001a3725
    33d8:	00720493 			; <UNDEFINED> instruction: 0x00720493
    33dc:	1a37253c 	bne	dcc8d4 <_Min_Stack_Size+0xdcc4d4>
    33e0:	da04939f 	ble	128264 <_Min_Stack_Size+0x127e64>
    33e4:	de080025 	cdple	0, 0, cr0, cr8, cr5, {1}
    33e8:	0b080025 	bleq	203484 <_Min_Stack_Size+0x203084>
    33ec:	72089300 	andvc	r9, r8, #0, 6
    33f0:	37253c00 	strcc	r3, [r5, -r0, lsl #24]!
    33f4:	04939f1a 	ldreq	r9, [r3], #3866	; 0xf1a
	...
    3400:	08002610 	stmdaeq	r0, {r4, r9, sl, sp}
    3404:	080026b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, sp}
    3408:	b0510001 	subslt	r0, r1, r1
    340c:	cc080026 	stcgt	0, cr0, [r8], {38}	; 0x26
    3410:	04080026 	streq	r0, [r8], #-38	; 0x26
    3414:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3418:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    341c:	00000000 	andeq	r0, r0, r0
    3420:	00261000 	eoreq	r1, r6, r0
    3424:	0026b008 	eoreq	fp, r6, r8
    3428:	71000608 	tstvc	r0, r8, lsl #12
    342c:	24400604 	strbcs	r0, [r0], #-1540	; 0x604
    3430:	0026b09f 	mlaeq	r6, pc, r0, fp	; <UNPREDICTABLE>
    3434:	0026cc08 	eoreq	ip, r6, r8, lsl #24
    3438:	f3000908 	vmls.i8	d0, d0, d8
    343c:	04235101 	strteq	r5, [r3], #-257	; 0x101
    3440:	9f244006 	svcls	0x00244006
	...
    344c:	08002610 	stmdaeq	r0, {r4, r9, sl, sp}
    3450:	0800262a 	stmdaeq	r0, {r1, r3, r5, r9, sl, sp}
    3454:	9f300002 	svcls	0x00300002
    3458:	0800262a 	stmdaeq	r0, {r1, r3, r5, r9, sl, sp}
    345c:	080026ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, sp}
    3460:	007a0005 	rsbseq	r0, sl, r5
    3464:	ca9f2440 	bgt	fe7cc56c <_estack+0xde79c56c>
    3468:	cc080026 	stcgt	0, cr0, [r8], {38}	; 0x26
    346c:	09080026 	stmdbeq	r8, {r1, r2, r5}
    3470:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3474:	40060c23 	andmi	r0, r6, r3, lsr #24
    3478:	00009f24 	andeq	r9, r0, r4, lsr #30
    347c:	00000000 	andeq	r0, r0, r0
    3480:	26100000 	ldrcs	r0, [r0], -r0
    3484:	262a0800 	strtcs	r0, [sl], -r0, lsl #16
    3488:	00020800 	andeq	r0, r2, r0, lsl #16
    348c:	262a9f30 	qasxcs	r9, sl, r0
    3490:	26640800 	strbtcs	r0, [r4], -r0, lsl #16
    3494:	00050800 	andeq	r0, r5, r0, lsl #16
    3498:	2438007c 	ldrtcs	r0, [r8], #-124	; 0x7c
    349c:	0026649f 	mlaeq	r6, pc, r4, r6	; <UNPREDICTABLE>
    34a0:	0026b008 	eoreq	fp, r6, r8
    34a4:	71000608 	tstvc	r0, r8, lsl #12
    34a8:	2438061c 	ldrtcs	r0, [r8], #-1564	; 0x61c
    34ac:	0026b09f 	mlaeq	r6, pc, r0, fp	; <UNPREDICTABLE>
    34b0:	0026cc08 	eoreq	ip, r6, r8, lsl #24
    34b4:	f3000908 	vmls.i8	d0, d0, d8
    34b8:	1c235101 	stfnes	f5, [r3], #-4
    34bc:	9f243806 	svcls	0x00243806
	...
    34c8:	08002610 	stmdaeq	r0, {r4, r9, sl, sp}
    34cc:	08002660 	stmdaeq	r0, {r5, r6, r9, sl, sp}
    34d0:	9f300002 	svcls	0x00300002
    34d4:	08002660 	stmdaeq	r0, {r5, r6, r9, sl, sp}
    34d8:	080026ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, sp}
    34dc:	ca580001 	bgt	16034e8 <_Min_Stack_Size+0x16030e8>
    34e0:	cc080026 	stcgt	0, cr0, [r8], {38}	; 0x26
    34e4:	09080026 	stmdbeq	r8, {r1, r2, r5}
    34e8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    34ec:	40062023 	andmi	r2, r6, r3, lsr #32
    34f0:	00009f24 	andeq	r9, r0, r4, lsr #30
    34f4:	00000000 	andeq	r0, r0, r0
    34f8:	26100000 	ldrcs	r0, [r0], -r0
    34fc:	26600800 	strbtcs	r0, [r0], -r0, lsl #16
    3500:	00020800 	andeq	r0, r2, r0, lsl #16
    3504:	26609f30 	uqasxcs	r9, r0, r0
    3508:	26720800 	ldrbtcs	r0, [r2], -r0, lsl #16
    350c:	00050800 	andeq	r0, r5, r0, lsl #16
    3510:	24480076 	strbcs	r0, [r8], #-118	; 0x76
    3514:	0026729f 	mlaeq	r6, pc, r2, r7	; <UNPREDICTABLE>
    3518:	0026b008 	eoreq	fp, r6, r8
    351c:	71000608 	tstvc	r0, r8, lsl #12
    3520:	24480624 	strbcs	r0, [r8], #-1572	; 0x624
    3524:	0026b09f 	mlaeq	r6, pc, r0, fp	; <UNPREDICTABLE>
    3528:	0026cc08 	eoreq	ip, r6, r8, lsl #24
    352c:	f3000908 	vmls.i8	d0, d0, d8
    3530:	24235101 	strtcs	r5, [r3], #-257	; 0x101
    3534:	9f244806 	svcls	0x00244806
	...
    3540:	08002610 	stmdaeq	r0, {r4, r9, sl, sp}
    3544:	080026a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, sp}
    3548:	9f300002 	svcls	0x00300002
    354c:	080026a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, sp}
    3550:	080026ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, sp}
    3554:	00740005 	rsbseq	r0, r4, r5
    3558:	ca9f2440 	bgt	fe7cc660 <_estack+0xde79c660>
    355c:	cc080026 	stcgt	0, cr0, [r8], {38}	; 0x26
    3560:	09080026 	stmdbeq	r8, {r1, r2, r5}
    3564:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3568:	40063823 	andmi	r3, r6, r3, lsr #16
    356c:	00009f24 	andeq	r9, r0, r4, lsr #30
    3570:	00000000 	andeq	r0, r0, r0
    3574:	27240000 	strcs	r0, [r4, -r0]!
    3578:	27260800 	strcs	r0, [r6, -r0, lsl #16]!
    357c:	00090800 	andeq	r0, r9, r0, lsl #16
    3580:	25400071 	strbcs	r0, [r0, #-113]	; 0x71
    3584:	9304939f 	movwls	r9, #17311	; 0x439f
    3588:	00272604 	eoreq	r2, r7, r4, lsl #12
    358c:	00272808 	eoreq	r2, r7, r8, lsl #16
    3590:	71001008 	tstvc	r0, r8
    3594:	9f254000 	svcls	0x00254000
    3598:	00720493 			; <UNDEFINED> instruction: 0x00720493
    359c:	1affff0a 	bne	31cc <_Min_Stack_Size+0x2dcc>
    35a0:	2804939f 	stmdacs	r4, {r0, r1, r2, r3, r4, r7, r8, r9, ip, pc}
    35a4:	2a080027 	bcs	203648 <_Min_Stack_Size+0x203248>
    35a8:	0c080027 	stceq	0, cr0, [r8], {39}	; 0x27
    35ac:	04935100 	ldreq	r5, [r3], #256	; 0x100
    35b0:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    35b4:	939f1aff 	orrsls	r1, pc, #1044480	; 0xff000
    35b8:	00272a04 	eoreq	r2, r7, r4, lsl #20
    35bc:	00273008 	eoreq	r3, r7, r8
    35c0:	51000508 	tstpl	r0, r8, lsl #10
    35c4:	04930493 	ldreq	r0, [r3], #1171	; 0x493
	...
    35d0:	08002738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, sp}
    35d4:	0800274a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, sp}
    35d8:	4a500001 	bmi	14035e4 <_Min_Stack_Size+0x14031e4>
    35dc:	4c080027 	stcmi	0, cr0, [r8], {39}	; 0x27
    35e0:	04080027 	streq	r0, [r8], #-39	; 0x27
    35e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    35e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    35ec:	00000000 	andeq	r0, r0, r0
    35f0:	00274200 	eoreq	r4, r7, r0, lsl #4
    35f4:	00274a08 	eoreq	r4, r7, r8, lsl #20
    35f8:	70000808 	andvc	r0, r0, r8, lsl #16
    35fc:	1a007300 	bne	20204 <_Min_Stack_Size+0x1fe04>
    3600:	4a9f2e30 	bmi	fe7ceec8 <_estack+0xde79eec8>
    3604:	4c080027 	stcmi	0, cr0, [r8], {39}	; 0x27
    3608:	09080027 	stmdbeq	r8, {r0, r1, r2, r5}
    360c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3610:	301a0073 	andscc	r0, sl, r3, ror r0
    3614:	00009f2e 	andeq	r9, r0, lr, lsr #30
    3618:	00000000 	andeq	r0, r0, r0
    361c:	274c0000 	strbcs	r0, [ip, -r0]
    3620:	27580800 	ldrbcs	r0, [r8, -r0, lsl #16]
    3624:	00010800 	andeq	r0, r1, r0, lsl #16
    3628:	00275851 	eoreq	r5, r7, r1, asr r8
    362c:	00276808 	eoreq	r6, r7, r8, lsl #16
    3630:	f3000408 	vshl.u8	d0, d8, d0
    3634:	689f5101 	ldmvs	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
    3638:	74080027 	strvc	r0, [r8], #-39	; 0x27
    363c:	01080027 	tsteq	r8, r7, lsr #32
    3640:	27745100 	ldrbcs	r5, [r4, -r0, lsl #2]!
    3644:	278e0800 	strcs	r0, [lr, r0, lsl #16]
    3648:	00040800 	andeq	r0, r4, r0, lsl #16
    364c:	9f5101f3 	svcls	0x005101f3
	...
    3658:	0800274c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, sp}
    365c:	08002758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, sp}
    3660:	58520001 	ldmdapl	r2, {r0}^
    3664:	68080027 	stmdavs	r8, {r0, r1, r2, r5}
    3668:	04080027 	streq	r0, [r8], #-39	; 0x27
    366c:	5201f300 	andpl	pc, r1, #0, 6
    3670:	0027689f 	mlaeq	r7, pc, r8, r6	; <UNPREDICTABLE>
    3674:	00276e08 	eoreq	r6, r7, r8, lsl #28
    3678:	52000108 	andpl	r0, r0, #8, 2
    367c:	0800276e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp}
    3680:	0800278e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, sp}
    3684:	01f30004 	mvnseq	r0, r4
    3688:	00009f52 	andeq	r9, r0, r2, asr pc
    368c:	00000000 	andeq	r0, r0, r0
    3690:	274c0000 	strbcs	r0, [ip, -r0]
    3694:	27580800 	ldrbcs	r0, [r8, -r0, lsl #16]
    3698:	00020800 	andeq	r0, r2, r0, lsl #16
    369c:	27689f30 			; <UNDEFINED> instruction: 0x27689f30
    36a0:	276c0800 	strbcs	r0, [ip, -r0, lsl #16]!
    36a4:	00020800 	andeq	r0, r2, r0, lsl #16
    36a8:	276c9f30 			; <UNDEFINED> instruction: 0x276c9f30
    36ac:	278e0800 	strcs	r0, [lr, r0, lsl #16]
    36b0:	00050800 	andeq	r0, r5, r0, lsl #16
    36b4:	24380074 	ldrtcs	r0, [r8], #-116	; 0x74
    36b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    36bc:	00000000 	andeq	r0, r0, r0
    36c0:	00274c00 	eoreq	r4, r7, r0, lsl #24
    36c4:	00275808 	eoreq	r5, r7, r8, lsl #16
    36c8:	30000208 	andcc	r0, r0, r8, lsl #4
    36cc:	0027689f 	mlaeq	r7, pc, r8, r6	; <UNPREDICTABLE>
    36d0:	00276e08 	eoreq	r6, r7, r8, lsl #28
    36d4:	30000208 	andcc	r0, r0, r8, lsl #4
    36d8:	00276e9f 	mlaeq	r7, pc, lr, r6	; <UNPREDICTABLE>
    36dc:	00278e08 	eoreq	r8, r7, r8, lsl #28
    36e0:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
    36e4:	9f244000 	svcls	0x00244000
	...
    36f0:	080027bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, sp}
    36f4:	080027d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, sp}
    36f8:	08710006 	ldmdaeq	r1!, {r1, r2}^
    36fc:	9f243806 	svcls	0x00243806
	...
    3708:	080027bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, sp}
    370c:	080027d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, sp}
    3710:	0c710006 	ldcleq	0, cr0, [r1], #-24	; 0xffffffe8
    3714:	9f244006 	svcls	0x00244006
	...
    3720:	080027bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, sp}
    3724:	080027d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, sp}
    3728:	00710006 	rsbseq	r0, r1, r6
    372c:	9f244806 	svcls	0x00244806
	...
    3738:	080027e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp}
    373c:	0800280a 	stmdaeq	r0, {r1, r3, fp, sp}
    3740:	0a510001 	beq	144374c <_Min_Stack_Size+0x144334c>
    3744:	56080028 	strpl	r0, [r8], -r8, lsr #32
    3748:	04080028 	streq	r0, [r8], #-40	; 0x28
    374c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3750:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3754:	00000000 	andeq	r0, r0, r0
    3758:	0027e400 	eoreq	lr, r7, r0, lsl #8
    375c:	00280c08 	eoreq	r0, r8, r8, lsl #24
    3760:	52000108 	andpl	r0, r0, #8, 2
    3764:	0800280c 	stmdaeq	r0, {r2, r3, fp, sp}
    3768:	08002856 	stmdaeq	r0, {r1, r2, r4, r6, fp, sp}
    376c:	01f30004 	mvnseq	r0, r4
    3770:	00009f52 	andeq	r9, r0, r2, asr pc
    3774:	00000000 	andeq	r0, r0, r0
    3778:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    377c:	28020800 	stmdacs	r2, {fp}
    3780:	00010800 	andeq	r0, r1, r0, lsl #16
    3784:	00280e54 	eoreq	r0, r8, r4, asr lr
    3788:	00282a08 	eoreq	r2, r8, r8, lsl #20
    378c:	53000108 	movwpl	r0, #264	; 0x108
    3790:	0800282a 	stmdaeq	r0, {r1, r3, r5, fp, sp}
    3794:	0800282c 	stmdaeq	r0, {r2, r3, r5, fp, sp}
    3798:	2c510001 	mrrccs	0, 0, r0, r1, cr1
    379c:	36080028 	strcc	r0, [r8], -r8, lsr #32
    37a0:	01080028 	tsteq	r8, r8, lsr #32
    37a4:	28525300 	ldmdacs	r2, {r8, r9, ip, lr}^
    37a8:	28560800 	ldmdacs	r6, {fp}^
    37ac:	00010800 	andeq	r0, r1, r0, lsl #16
    37b0:	00000053 	andeq	r0, r0, r3, asr r0
    37b4:	00000000 	andeq	r0, r0, r0
    37b8:	00282800 	eoreq	r2, r8, r0, lsl #16
    37bc:	00283e08 	eoreq	r3, r8, r8, lsl #28
    37c0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    37cc:	0800280e 	stmdaeq	r0, {r1, r2, r3, fp, sp}
    37d0:	08002846 	stmdaeq	r0, {r1, r2, r6, fp, sp}
    37d4:	46540001 	ldrbmi	r0, [r4], -r1
    37d8:	50080028 	andpl	r0, r8, r8, lsr #32
    37dc:	03080028 	movweq	r0, #32808	; 0x8028
    37e0:	9f017500 	svcls	0x00017500
    37e4:	08002852 	stmdaeq	r0, {r1, r4, r6, fp, sp}
    37e8:	08002856 	stmdaeq	r0, {r1, r2, r4, r6, fp, sp}
    37ec:	00540001 	subseq	r0, r4, r1
    37f0:	00000000 	andeq	r0, r0, r0
    37f4:	2a000000 	bcs	37fc <_Min_Stack_Size+0x33fc>
    37f8:	30080028 	andcc	r0, r8, r8, lsr #32
    37fc:	17080028 	strne	r0, [r8, -r8, lsr #32]
    3800:	0a007100 	beq	1fc08 <_Min_Stack_Size+0x1f808>
    3804:	331a1fff 	tstcc	sl, #1020	; 0x3fc
    3808:	7525f71c 	strvc	pc, [r5, #-1820]!	; 0x71c
    380c:	1b25f700 	blne	981414 <_Min_Stack_Size+0x981014>
    3810:	007400f7 	ldrshteq	r0, [r4], #-7
    3814:	9f1c3122 	svcls	0x001c3122
	...
    3820:	0800280e 	stmdaeq	r0, {r1, r2, r3, fp, sp}
    3824:	0800284a 	stmdaeq	r0, {r1, r3, r6, fp, sp}
    3828:	52520001 	subspl	r0, r2, #1
    382c:	56080028 	strpl	r0, [r8], -r8, lsr #32
    3830:	01080028 	tsteq	r8, r8, lsr #32
    3834:	00005200 	andeq	r5, r0, r0, lsl #4
    3838:	00000000 	andeq	r0, r0, r0
    383c:	282c0000 	stmdacs	ip!, {}	; <UNPREDICTABLE>
    3840:	28360800 	ldmdacs	r6!, {fp}
    3844:	000c0800 	andeq	r0, ip, r0, lsl #16
    3848:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    384c:	00721a07 	rsbseq	r1, r2, r7, lsl #20
    3850:	9f1c3122 	svcls	0x001c3122
	...
    385c:	08002860 	stmdaeq	r0, {r5, r6, fp, sp}
    3860:	08002892 	stmdaeq	r0, {r1, r4, r7, fp, sp}
    3864:	92510001 	subsls	r0, r1, #1
    3868:	ae080028 	cdpge	0, 0, cr0, cr8, cr8, {1}
    386c:	04080028 	streq	r0, [r8], #-40	; 0x28
    3870:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3874:	0028ae9f 	mlaeq	r8, pc, lr, sl	; <UNPREDICTABLE>
    3878:	0028b608 	eoreq	fp, r8, r8, lsl #12
    387c:	51000108 	tstpl	r0, r8, lsl #2
	...
    3888:	08002862 	stmdaeq	r0, {r1, r5, r6, fp, sp}
    388c:	0800286c 	stmdaeq	r0, {r2, r3, r5, r6, fp, sp}
    3890:	7e530001 	cdpvc	0, 5, cr0, cr3, cr1, {0}
    3894:	80080028 	andhi	r0, r8, r8, lsr #32
    3898:	01080028 	tsteq	r8, r8, lsr #32
    389c:	28845500 	stmcs	r4, {r8, sl, ip, lr}
    38a0:	28880800 	stmcs	r8, {fp}
    38a4:	00010800 	andeq	r0, r1, r0, lsl #16
    38a8:	0028b254 	eoreq	fp, r8, r4, asr r2
    38ac:	0028b408 	eoreq	fp, r8, r8, lsl #8
    38b0:	53000108 	movwpl	r0, #264	; 0x108
	...
    38bc:	08002884 	stmdaeq	r0, {r2, r7, fp, sp}
    38c0:	0800289a 	stmdaeq	r0, {r1, r3, r4, r7, fp, sp}
    38c4:	00550001 	subseq	r0, r5, r1
    38c8:	00000000 	andeq	r0, r0, r0
    38cc:	84000000 	strhi	r0, [r0], #-0
    38d0:	92080028 	andls	r0, r8, #40	; 0x28
    38d4:	08080028 	stmdaeq	r8, {r3, r5}
    38d8:	75007100 	strvc	r7, [r0, #-256]	; 0x100
    38dc:	1c312200 	lfmne	f2, 4, [r1], #-0
    38e0:	0028929f 	mlaeq	r8, pc, r2, r9	; <UNPREDICTABLE>
    38e4:	00289a08 	eoreq	r9, r8, r8, lsl #20
    38e8:	75000908 	strvc	r0, [r0, #-2312]	; 0x908
    38ec:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    38f0:	9f1c3122 	svcls	0x001c3122
	...
    38fc:	08002888 	stmdaeq	r0, {r3, r7, fp, sp}
    3900:	0800289e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, sp}
    3904:	00540001 	subseq	r0, r4, r1
    3908:	00000000 	andeq	r0, r0, r0
    390c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    3910:	9e080028 	cdpls	0, 0, cr0, cr8, cr8, {1}
    3914:	08080028 	stmdaeq	r8, {r3, r5}
    3918:	74007200 	strvc	r7, [r0], #-512	; 0x200
    391c:	1c312200 	lfmne	f2, 4, [r1], #-0
    3920:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3924:	00000000 	andeq	r0, r0, r0
    3928:	0028ba00 	eoreq	fp, r8, r0, lsl #20
    392c:	0028d008 	eoreq	sp, r8, r8
    3930:	53000108 	movwpl	r0, #264	; 0x108
    3934:	080028d2 	stmdaeq	r0, {r1, r4, r6, r7, fp, sp}
    3938:	080028f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, sp}
    393c:	04530001 	ldrbeq	r0, [r3], #-1
    3940:	0e080029 	cdpeq	0, 0, cr0, cr8, cr9, {1}
    3944:	01080029 	tsteq	r8, r9, lsr #32
    3948:	00005300 	andeq	r5, r0, r0, lsl #6
    394c:	00000000 	andeq	r0, r0, r0
    3950:	29100000 	ldmdbcs	r0, {}	; <UNPREDICTABLE>
    3954:	29200800 	stmdbcs	r0!, {fp}
    3958:	00010800 	andeq	r0, r1, r0, lsl #16
    395c:	00292050 	eoreq	r2, r9, r0, asr r0
    3960:	00292408 	eoreq	r2, r9, r8, lsl #8
    3964:	f3000408 	vshl.u8	d0, d8, d0
    3968:	249f5001 	ldrcs	r5, [pc], #1	; 3970 <_Min_Stack_Size+0x3570>
    396c:	26080029 	strcs	r0, [r8], -r9, lsr #32
    3970:	01080029 	tsteq	r8, r9, lsr #32
    3974:	29265000 	stmdbcs	r6!, {ip, lr}
    3978:	292a0800 	stmdbcs	sl!, {fp}
    397c:	00040800 	andeq	r0, r4, r0, lsl #16
    3980:	9f5001f3 	svcls	0x005001f3
	...
    398c:	0800292c 	stmdaeq	r0, {r2, r3, r5, r8, fp, sp}
    3990:	0800293e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp, sp}
    3994:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
    3998:	40080029 	andmi	r0, r8, r9, lsr #32
    399c:	04080029 	streq	r0, [r8], #-41	; 0x29
    39a0:	5001f300 	andpl	pc, r1, r0, lsl #6
    39a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    39a8:	00000000 	andeq	r0, r0, r0
    39ac:	00292c00 	eoreq	r2, r9, r0, lsl #24
    39b0:	00293608 	eoreq	r3, r9, r8, lsl #12
    39b4:	30000208 	andcc	r0, r0, r8, lsl #4
    39b8:	0029369f 	mlaeq	r9, pc, r6, r3	; <UNPREDICTABLE>
    39bc:	00293e08 	eoreq	r3, r9, r8, lsl #28
    39c0:	70000808 	andvc	r0, r0, r8, lsl #16
    39c4:	1a007300 	bne	205cc <_Min_Stack_Size+0x201cc>
    39c8:	3e9f2e30 	mrccc	14, 4, r2, cr15, cr0, {1}
    39cc:	40080029 	andmi	r0, r8, r9, lsr #32
    39d0:	09080029 	stmdbeq	r8, {r0, r3, r5}
    39d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    39d8:	301a0073 	andscc	r0, sl, r3, ror r0
    39dc:	00009f2e 	andeq	r9, r0, lr, lsr #30
    39e0:	00000000 	andeq	r0, r0, r0
    39e4:	294c0000 	stmdbcs	ip, {}^	; <UNPREDICTABLE>
    39e8:	29640800 	stmdbcs	r4!, {fp}^
    39ec:	00010800 	andeq	r0, r1, r0, lsl #16
    39f0:	00296450 	eoreq	r6, r9, r0, asr r4
    39f4:	00296608 	eoreq	r6, r9, r8, lsl #12
    39f8:	f3000408 	vshl.u8	d0, d8, d0
    39fc:	669f5001 	ldrvs	r5, [pc], r1
    3a00:	68080029 	stmdavs	r8, {r0, r3, r5}
    3a04:	01080029 	tsteq	r8, r9, lsr #32
    3a08:	29685000 	stmdbcs	r8!, {ip, lr}^
    3a0c:	296a0800 	stmdbcs	sl!, {fp}^
    3a10:	00040800 	andeq	r0, r4, r0, lsl #16
    3a14:	9f5001f3 	svcls	0x005001f3
	...
    3a20:	0800294c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp}
    3a24:	08002956 	stmdaeq	r0, {r1, r2, r4, r6, r8, fp, sp}
    3a28:	9f300002 	svcls	0x00300002
    3a2c:	08002956 	stmdaeq	r0, {r1, r2, r4, r6, r8, fp, sp}
    3a30:	08002964 	stmdaeq	r0, {r2, r5, r6, r8, fp, sp}
    3a34:	00700008 	rsbseq	r0, r0, r8
    3a38:	301a0072 	andscc	r0, sl, r2, ror r0
    3a3c:	29649f2e 	stmdbcs	r4!, {r1, r2, r3, r5, r8, r9, sl, fp, ip, pc}^
    3a40:	29660800 	stmdbcs	r6!, {fp}^
    3a44:	00090800 	andeq	r0, r9, r0, lsl #16
    3a48:	725001f3 	subsvc	r0, r0, #-1073741764	; 0xc000003c
    3a4c:	2e301a00 	vaddcs.f32	s2, s0, s0
    3a50:	0029669f 	mlaeq	r9, pc, r6, r6	; <UNPREDICTABLE>
    3a54:	00296808 	eoreq	r6, r9, r8, lsl #16
    3a58:	70000808 	andvc	r0, r0, r8, lsl #16
    3a5c:	1a007200 	bne	20264 <_Min_Stack_Size+0x1fe64>
    3a60:	689f2e30 	ldmvs	pc, {r4, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    3a64:	6a080029 	bvs	203b10 <_Min_Stack_Size+0x203710>
    3a68:	01080029 	tsteq	r8, r9, lsr #32
    3a6c:	00005000 	andeq	r5, r0, r0
    3a70:	00000000 	andeq	r0, r0, r0
    3a74:	29b00000 	ldmibcs	r0!, {}	; <UNPREDICTABLE>
    3a78:	2a9c0800 	bcs	fe705a80 <_estack+0xde6d5a80>
    3a7c:	00010800 	andeq	r0, r1, r0, lsl #16
    3a80:	002a9c50 	eoreq	r9, sl, r0, asr ip
    3a84:	002ac208 	eoreq	ip, sl, r8, lsl #4
    3a88:	f3000408 	vshl.u8	d0, d8, d0
    3a8c:	009f5001 	addseq	r5, pc, r1
    3a90:	00000000 	andeq	r0, r0, r0
    3a94:	b0000000 	andlt	r0, r0, r0
    3a98:	18080029 	stmdane	r8, {r0, r3, r5}
    3a9c:	0208002a 	andeq	r0, r8, #42	; 0x2a
    3aa0:	629f3000 	addsvs	r3, pc, #0
    3aa4:	7008002a 	andvc	r0, r8, sl, lsr #32
    3aa8:	0208002a 	andeq	r0, r8, #42	; 0x2a
    3aac:	709f3000 	addsvc	r3, pc, r0
    3ab0:	8608002a 	strhi	r0, [r8], -sl, lsr #32
    3ab4:	0908002a 	stmdbeq	r8, {r1, r3, r5}
    3ab8:	11007100 	mrsne	r7, (UNDEF: 16)
    3abc:	78bfffff 	ldmvc	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
    3ac0:	2a869f1a 	bcs	fe1ab730 <_estack+0xde17b730>
    3ac4:	2a8c0800 	bcs	fe305acc <_estack+0xde2d5acc>
    3ac8:	00010800 	andeq	r0, r1, r0, lsl #16
    3acc:	00000051 	andeq	r0, r0, r1, asr r0
    3ad0:	00000000 	andeq	r0, r0, r0
    3ad4:	002b1c00 	eoreq	r1, fp, r0, lsl #24
    3ad8:	002b1e08 	eoreq	r1, fp, r8, lsl #28
    3adc:	50000108 	andpl	r0, r0, r8, lsl #2
    3ae0:	08002b1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, fp, sp}
    3ae4:	08002b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp, sp}
    3ae8:	01f30004 	mvnseq	r0, r4
    3aec:	00009f50 	andeq	r9, r0, r0, asr pc
    3af0:	00000000 	andeq	r0, r0, r0
    3af4:	2b400000 	blcs	1003afc <_Min_Stack_Size+0x10036fc>
    3af8:	2b520800 	blcs	1485b00 <_Min_Stack_Size+0x1485700>
    3afc:	00010800 	andeq	r0, r1, r0, lsl #16
    3b00:	002b5250 	eoreq	r5, fp, r0, asr r2
    3b04:	002b5e08 	eoreq	r5, fp, r8, lsl #28
    3b08:	f3000408 	vshl.u8	d0, d8, d0
    3b0c:	009f5001 	addseq	r5, pc, r1
    3b10:	00000000 	andeq	r0, r0, r0
    3b14:	60000000 	andvs	r0, r0, r0
    3b18:	9208002b 	andls	r0, r8, #43	; 0x2b
    3b1c:	0108002b 	tsteq	r8, fp, lsr #32
    3b20:	2b925000 	blcs	fe497b28 <_estack+0xde467b28>
    3b24:	2bd80800 	blcs	ff605b2c <_estack+0xdf5d5b2c>
    3b28:	00040800 	andeq	r0, r4, r0, lsl #16
    3b2c:	9f5001f3 	svcls	0x005001f3
	...
    3b38:	08002b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, sp}
    3b3c:	08002bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, sp}
    3b40:	9f300002 	svcls	0x00300002
    3b44:	08002bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, sp}
    3b48:	08002bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp, sp}
    3b4c:	00560001 	subseq	r0, r6, r1
    3b50:	00000000 	andeq	r0, r0, r0
    3b54:	60000000 	andvs	r0, r0, r0
    3b58:	cc08002b 	stcgt	0, cr0, [r8], {43}	; 0x2b
    3b5c:	0208002b 	andeq	r0, r8, #43	; 0x2b
    3b60:	cc9f3000 	ldcgt	0, cr3, [pc], {0}
    3b64:	d608002b 	strle	r0, [r8], -fp, lsr #32
    3b68:	0108002b 	tsteq	r8, fp, lsr #32
    3b6c:	00005700 	andeq	r5, r0, r0, lsl #14
    3b70:	00000000 	andeq	r0, r0, r0
    3b74:	2b600000 	blcs	1803b7c <_Min_Stack_Size+0x180377c>
    3b78:	2bcc0800 	blcs	ff305b80 <_estack+0xdf2d5b80>
    3b7c:	00020800 	andeq	r0, r2, r0, lsl #16
    3b80:	2bcc9f30 	blcs	ff32b848 <_estack+0xdf2fb848>
    3b84:	2bd60800 	blcs	ff585b8c <_estack+0xdf555b8c>
    3b88:	00010800 	andeq	r0, r1, r0, lsl #16
    3b8c:	002bd655 	eoreq	sp, fp, r5, asr r6
    3b90:	002bd808 	eoreq	sp, fp, r8, lsl #16
    3b94:	73000208 	movwvc	r0, #520	; 0x208
    3b98:	0000000c 	andeq	r0, r0, ip
    3b9c:	00000000 	andeq	r0, r0, r0
    3ba0:	002c0800 	eoreq	r0, ip, r0, lsl #16
    3ba4:	002c3208 	eoreq	r3, ip, r8, lsl #4
    3ba8:	51000108 	tstpl	r0, r8, lsl #2
    3bac:	08002c32 	stmdaeq	r0, {r1, r4, r5, sl, fp, sp}
    3bb0:	08002c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp}
    3bb4:	01f30004 	mvnseq	r0, r4
    3bb8:	00009f51 	andeq	r9, r0, r1, asr pc
    3bbc:	00000000 	andeq	r0, r0, r0
    3bc0:	2c3c0000 	ldccs	0, cr0, [ip], #-0
    3bc4:	2c660800 	stclcs	8, cr0, [r6], #-0
    3bc8:	00010800 	andeq	r0, r1, r0, lsl #16
    3bcc:	002c6651 	eoreq	r6, ip, r1, asr r6
    3bd0:	002c7008 	eoreq	r7, ip, r8
    3bd4:	f3000408 	vshl.u8	d0, d8, d0
    3bd8:	009f5101 	addseq	r5, pc, r1, lsl #2
    3bdc:	00000000 	andeq	r0, r0, r0
    3be0:	70000000 	andvc	r0, r0, r0
    3be4:	7e08002c 	cdpvc	0, 0, cr0, cr8, cr12, {1}
    3be8:	0108002c 	tsteq	r8, ip, lsr #32
    3bec:	2c7e5000 	ldclcs	0, cr5, [lr], #-0
    3bf0:	2c800800 	stccs	8, cr0, [r0], {0}
    3bf4:	00040800 	andeq	r0, r4, r0, lsl #16
    3bf8:	9f5001f3 	svcls	0x005001f3
	...
    3c04:	08002c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, sp}
    3c08:	08002c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, sp}
    3c0c:	9f300002 	svcls	0x00300002
    3c10:	08002c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, sp}
    3c14:	08002c80 	stmdaeq	r0, {r7, sl, fp, sp}
    3c18:	00500001 	subseq	r0, r0, r1
    3c1c:	00000000 	andeq	r0, r0, r0
    3c20:	9c000000 	stcls	0, cr0, [r0], {-0}
    3c24:	b008002c 	andlt	r0, r8, ip, lsr #32
    3c28:	0108002c 	tsteq	r8, ip, lsr #32
    3c2c:	2cb05000 	ldccs	0, cr5, [r0]
    3c30:	2d000800 	stccs	8, cr0, [r0, #-0]
    3c34:	00040800 	andeq	r0, r4, r0, lsl #16
    3c38:	9f5001f3 	svcls	0x005001f3
	...
    3c44:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
    3c48:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
    3c4c:	5c500001 	mrrcpl	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3c50:	8408002d 	strhi	r0, [r8], #-45	; 0x2d
    3c54:	0408002d 	streq	r0, [r8], #-45	; 0x2d
    3c58:	5001f300 	andpl	pc, r1, r0, lsl #6
    3c5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c60:	00000000 	andeq	r0, r0, r0
    3c64:	002d8400 	eoreq	r8, sp, r0, lsl #8
    3c68:	002dca08 	eoreq	ip, sp, r8, lsl #20
    3c6c:	50000108 	andpl	r0, r0, r8, lsl #2
    3c70:	08002dca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, fp, sp}
    3c74:	08002dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp, sp}
    3c78:	01f30004 	mvnseq	r0, r4
    3c7c:	2dfa9f50 	ldclcs	15, cr9, [sl, #320]!	; 0x140
    3c80:	2e1e0800 	cdpcs	8, 1, cr0, cr14, cr0, {0}
    3c84:	00010800 	andeq	r0, r1, r0, lsl #16
    3c88:	002e1e50 	eoreq	r1, lr, r0, asr lr
    3c8c:	002e5808 	eoreq	r5, lr, r8, lsl #16
    3c90:	f3000408 	vshl.u8	d0, d8, d0
    3c94:	009f5001 	addseq	r5, pc, r1
    3c98:	00000000 	andeq	r0, r0, r0
    3c9c:	84000000 	strhi	r0, [r0], #-0
    3ca0:	b008002d 	andlt	r0, r8, sp, lsr #32
    3ca4:	0208002d 	andeq	r0, r8, #45	; 0x2d
    3ca8:	b09f3000 	addslt	r3, pc, r0
    3cac:	c608002d 	strgt	r0, [r8], -sp, lsr #32
    3cb0:	0108002d 	tsteq	r8, sp, lsr #32
    3cb4:	2dc65400 	cfstrdcs	mvd5, [r6]
    3cb8:	2df40800 	ldclcs	8, cr0, [r4]
    3cbc:	00020800 	andeq	r0, r2, r0, lsl #16
    3cc0:	2dfa0072 	ldclcs	0, cr0, [sl, #456]!	; 0x1c8
    3cc4:	2e560800 	cdpcs	8, 5, cr0, cr6, cr0, {0}
    3cc8:	00010800 	andeq	r0, r1, r0, lsl #16
    3ccc:	00000054 	andeq	r0, r0, r4, asr r0
    3cd0:	00000000 	andeq	r0, r0, r0
    3cd4:	002d8400 	eoreq	r8, sp, r0, lsl #8
    3cd8:	002df208 	eoreq	pc, sp, r8, lsl #4
    3cdc:	30000208 	andcc	r0, r0, r8, lsl #4
    3ce0:	002df29f 	mlaeq	sp, pc, r2, pc	; <UNPREDICTABLE>
    3ce4:	002dfa08 	eoreq	pc, sp, r8, lsl #20
    3ce8:	53000108 	movwpl	r0, #264	; 0x108
    3cec:	08002dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp, sp}
    3cf0:	08002e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, sp}
    3cf4:	9f300002 	svcls	0x00300002
    3cf8:	08002e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, sp}
    3cfc:	08002e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, sp}
    3d00:	00500001 	subseq	r0, r0, r1
    3d04:	00000000 	andeq	r0, r0, r0
    3d08:	84000000 	strhi	r0, [r0], #-0
    3d0c:	0a08002d 	beq	203dc8 <_Min_Stack_Size+0x2039c8>
    3d10:	0208002e 	andeq	r0, r8, #46	; 0x2e
    3d14:	0a9f3000 	beq	fe7cfd1c <_estack+0xde79fd1c>
    3d18:	1c08002e 	stcne	0, cr0, [r8], {46}	; 0x2e
    3d1c:	0108002e 	tsteq	r8, lr, lsr #32
    3d20:	2e1c5500 	cfmul32cs	mvfx5, mvfx12, mvfx0
    3d24:	2e4c0800 	cdpcs	8, 4, cr0, cr12, cr0, {0}
    3d28:	00020800 	andeq	r0, r2, r0, lsl #16
    3d2c:	00000071 	andeq	r0, r0, r1, ror r0
    3d30:	00000000 	andeq	r0, r0, r0
    3d34:	2d840000 	stccs	0, cr0, [r4]
    3d38:	2e480800 	cdpcs	8, 4, cr0, cr8, cr0, {0}
    3d3c:	00020800 	andeq	r0, r2, r0, lsl #16
    3d40:	2e489f30 	mcrcs	15, 2, r9, cr8, cr0, {1}
    3d44:	2e560800 	cdpcs	8, 5, cr0, cr6, cr0, {0}
    3d48:	00010800 	andeq	r0, r1, r0, lsl #16
    3d4c:	00000055 	andeq	r0, r0, r5, asr r0
    3d50:	00000000 	andeq	r0, r0, r0
    3d54:	002e9000 	eoreq	r9, lr, r0
    3d58:	002eae08 	eoreq	sl, lr, r8, lsl #28
    3d5c:	30000208 	andcc	r0, r0, r8, lsl #4
    3d60:	002eae9f 	mlaeq	lr, pc, lr, sl	; <UNPREDICTABLE>
    3d64:	002eb408 	eoreq	fp, lr, r8, lsl #8
    3d68:	52000108 	andpl	r0, r0, #8, 2
	...
    3d74:	08002eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, sp}
    3d78:	08002ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, sp}
    3d7c:	c0500001 	subsgt	r0, r0, r1
    3d80:	c808002e 	stmdagt	r8, {r1, r2, r3, r5}
    3d84:	0408002e 	streq	r0, [r8], #-46	; 0x2e
    3d88:	5001f300 	andpl	pc, r1, r0, lsl #6
    3d8c:	002ec89f 	mlaeq	lr, pc, r8, ip	; <UNPREDICTABLE>
    3d90:	002eca08 	eoreq	ip, lr, r8, lsl #20
    3d94:	50000108 	andpl	r0, r0, r8, lsl #2
    3d98:	08002eca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp, sp}
    3d9c:	08002ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, sp}
    3da0:	01f30004 	mvnseq	r0, r4
    3da4:	00009f50 	andeq	r9, r0, r0, asr pc
    3da8:	00000000 	andeq	r0, r0, r0
    3dac:	2eb40000 	cdpcs	0, 11, cr0, cr4, cr0, {0}
    3db0:	2ec60800 	cdpcs	8, 12, cr0, cr6, cr0, {0}
    3db4:	00020800 	andeq	r0, r2, r0, lsl #16
    3db8:	2ec69f30 	mcrcs	15, 6, r9, cr6, cr0, {1}
    3dbc:	2ec80800 	cdpcs	8, 12, cr0, cr8, cr0, {0}
    3dc0:	00010800 	andeq	r0, r1, r0, lsl #16
    3dc4:	002ec850 	eoreq	ip, lr, r0, asr r8
    3dc8:	002ece08 	eoreq	ip, lr, r8, lsl #28
    3dcc:	30000208 	andcc	r0, r0, r8, lsl #4
    3dd0:	002ece9f 	mlaeq	lr, pc, lr, ip	; <UNPREDICTABLE>
    3dd4:	002ed008 	eoreq	sp, lr, r8
    3dd8:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    3de4:	08002ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, sp}
    3de8:	08002ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp, sp}
    3dec:	de500001 	cdple	0, 5, cr0, cr0, cr1, {0}
    3df0:	e208002e 	and	r0, r8, #46	; 0x2e
    3df4:	0408002e 	streq	r0, [r8], #-46	; 0x2e
    3df8:	5001f300 	andpl	pc, r1, r0, lsl #6
    3dfc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e00:	00000000 	andeq	r0, r0, r0
    3e04:	002ee400 	eoreq	lr, lr, r0, lsl #8
    3e08:	002ef208 	eoreq	pc, lr, r8, lsl #4
    3e0c:	50000108 	andpl	r0, r0, r8, lsl #2
    3e10:	08002ef2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, fp, sp}
    3e14:	08002ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp, sp}
    3e18:	01f30004 	mvnseq	r0, r4
    3e1c:	00009f50 	andeq	r9, r0, r0, asr pc
    3e20:	00000000 	andeq	r0, r0, r0
    3e24:	2ef80000 	cdpcs	0, 15, cr0, cr8, cr0, {0}
    3e28:	2efa0800 	cdpcs	8, 15, cr0, cr10, cr0, {0}
    3e2c:	00010800 	andeq	r0, r1, r0, lsl #16
    3e30:	002efa50 	eoreq	pc, lr, r0, asr sl	; <UNPREDICTABLE>
    3e34:	002f1e08 	eoreq	r1, pc, r8, lsl #28
    3e38:	f3000408 	vshl.u8	d0, d8, d0
    3e3c:	009f5001 	addseq	r5, pc, r1
    3e40:	00000000 	andeq	r0, r0, r0
    3e44:	20000000 	andcs	r0, r0, r0
    3e48:	4808002f 	stmdami	r8, {r0, r1, r2, r3, r5}
    3e4c:	0108002f 	tsteq	r8, pc, lsr #32
    3e50:	2f485100 	svccs	0x00485100
    3e54:	2f520800 	svccs	0x00520800
    3e58:	00040800 	andeq	r0, r4, r0, lsl #16
    3e5c:	9f5101f3 	svcls	0x005101f3
    3e60:	08002f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp, sp}
    3e64:	08002f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp, sp}
    3e68:	7a510001 	bvc	1443e74 <_Min_Stack_Size+0x1443a74>
    3e6c:	8608002f 	strhi	r0, [r8], -pc, lsr #32
    3e70:	0408002f 	streq	r0, [r8], #-47	; 0x2f
    3e74:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3e78:	002f869f 	mlaeq	pc, pc, r6, r8	; <UNPREDICTABLE>
    3e7c:	002f9208 	eoreq	r9, pc, r8, lsl #4
    3e80:	51000108 	tstpl	r0, r8, lsl #2
    3e84:	08002f92 	stmdaeq	r0, {r1, r4, r7, r8, r9, sl, fp, sp}
    3e88:	08002f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, sp}
    3e8c:	01f30004 	mvnseq	r0, r4
    3e90:	2f969f51 	svccs	0x00969f51
    3e94:	2fa00800 	svccs	0x00a00800
    3e98:	00010800 	andeq	r0, r1, r0, lsl #16
    3e9c:	002fa051 	eoreq	sl, pc, r1, asr r0	; <UNPREDICTABLE>
    3ea0:	002fa408 	eoreq	sl, pc, r8, lsl #8
    3ea4:	f3000408 	vshl.u8	d0, d8, d0
    3ea8:	a49f5101 	ldrge	r5, [pc], #257	; 3eb0 <_Min_Stack_Size+0x3ab0>
    3eac:	ae08002f 	cdpge	0, 0, cr0, cr8, cr15, {1}
    3eb0:	0108002f 	tsteq	r8, pc, lsr #32
    3eb4:	2fae5100 	svccs	0x00ae5100
    3eb8:	2fb20800 	svccs	0x00b20800
    3ebc:	00040800 	andeq	r0, r4, r0, lsl #16
    3ec0:	9f5101f3 	svcls	0x005101f3
    3ec4:	08002fb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, fp, sp}
    3ec8:	08002fbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp}
    3ecc:	be510001 	cdplt	0, 5, cr0, cr1, cr1, {0}
    3ed0:	c208002f 	andgt	r0, r8, #47	; 0x2f
    3ed4:	0408002f 	streq	r0, [r8], #-47	; 0x2f
    3ed8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3edc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ee0:	00000000 	andeq	r0, r0, r0
    3ee4:	002f2000 	eoreq	r2, pc, r0
    3ee8:	002f4408 	eoreq	r4, pc, r8, lsl #8
    3eec:	52000108 	andpl	r0, r0, #8, 2
    3ef0:	08002f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, sp}
    3ef4:	08002f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp, sp}
    3ef8:	01f30004 	mvnseq	r0, r4
    3efc:	2f529f52 	svccs	0x00529f52
    3f00:	2f740800 	svccs	0x00740800
    3f04:	00010800 	andeq	r0, r1, r0, lsl #16
    3f08:	002f7452 	eoreq	r7, pc, r2, asr r4	; <UNPREDICTABLE>
    3f0c:	002f8608 	eoreq	r8, pc, r8, lsl #12
    3f10:	f3000408 	vshl.u8	d0, d8, d0
    3f14:	869f5201 	ldrhi	r5, [pc], r1, lsl #4
    3f18:	8e08002f 	cdphi	0, 0, cr0, cr8, cr15, {1}
    3f1c:	0108002f 	tsteq	r8, pc, lsr #32
    3f20:	2f8e5200 	svccs	0x008e5200
    3f24:	2f960800 	svccs	0x00960800
    3f28:	00040800 	andeq	r0, r4, r0, lsl #16
    3f2c:	9f5201f3 	svcls	0x005201f3
    3f30:	08002f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, sp}
    3f34:	08002f9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, fp, sp}
    3f38:	9e520001 	cdpls	0, 5, cr0, cr2, cr1, {0}
    3f3c:	a408002f 	strge	r0, [r8], #-47	; 0x2f
    3f40:	0408002f 	streq	r0, [r8], #-47	; 0x2f
    3f44:	5201f300 	andpl	pc, r1, #0, 6
    3f48:	002fa49f 	mlaeq	pc, pc, r4, sl	; <UNPREDICTABLE>
    3f4c:	002fac08 	eoreq	sl, pc, r8, lsl #24
    3f50:	52000108 	andpl	r0, r0, #8, 2
    3f54:	08002fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, sp}
    3f58:	08002fb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, fp, sp}
    3f5c:	01f30004 	mvnseq	r0, r4
    3f60:	2fb29f52 	svccs	0x00b29f52
    3f64:	2fba0800 	svccs	0x00ba0800
    3f68:	00010800 	andeq	r0, r1, r0, lsl #16
    3f6c:	002fba52 	eoreq	fp, pc, r2, asr sl	; <UNPREDICTABLE>
    3f70:	002fc208 	eoreq	ip, pc, r8, lsl #4
    3f74:	f3000408 	vshl.u8	d0, d8, d0
    3f78:	009f5201 	addseq	r5, pc, r1, lsl #4
    3f7c:	00000000 	andeq	r0, r0, r0
    3f80:	c4000000 	strgt	r0, [r0], #-0
    3f84:	e608002f 	str	r0, [r8], -pc, lsr #32
    3f88:	0108002f 	tsteq	r8, pc, lsr #32
    3f8c:	2fe65000 	svccs	0x00e65000
    3f90:	2ff20800 	svccs	0x00f20800
    3f94:	00040800 	andeq	r0, r4, r0, lsl #16
    3f98:	9f5001f3 	svcls	0x005001f3
    3f9c:	08002ff2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, fp, sp}
    3fa0:	08002ffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp}
    3fa4:	fa500001 	blx	1403fb0 <_Min_Stack_Size+0x1403bb0>
    3fa8:	fc08002f 	stc2	0, cr0, [r8], {47}	; 0x2f
    3fac:	0408002f 	streq	r0, [r8], #-47	; 0x2f
    3fb0:	5001f300 	andpl	pc, r1, r0, lsl #6
    3fb4:	002ffc9f 	mlaeq	pc, pc, ip, pc	; <UNPREDICTABLE>
    3fb8:	00300408 	eorseq	r0, r0, r8, lsl #8
    3fbc:	50000108 	andpl	r0, r0, r8, lsl #2
    3fc0:	08003004 	stmdaeq	r0, {r2, ip, sp}
    3fc4:	08003006 	stmdaeq	r0, {r1, r2, ip, sp}
    3fc8:	01f30004 	mvnseq	r0, r4
    3fcc:	00009f50 	andeq	r9, r0, r0, asr pc
    3fd0:	00000000 	andeq	r0, r0, r0
    3fd4:	2fc40000 	svccs	0x00c40000
    3fd8:	2fe80800 	svccs	0x00e80800
    3fdc:	00020800 	andeq	r0, r2, r0, lsl #16
    3fe0:	2fe89f30 	svccs	0x00e89f30
    3fe4:	2fea0800 	svccs	0x00ea0800
    3fe8:	00090800 	andeq	r0, r9, r0, lsl #16
    3fec:	00700071 	rsbseq	r0, r0, r1, ror r0
    3ff0:	291a0071 	ldmdbcs	sl, {r0, r4, r5, r6}
    3ff4:	002ff29f 	mlaeq	pc, pc, r2, pc	; <UNPREDICTABLE>
    3ff8:	00300608 	eorseq	r0, r0, r8, lsl #12
    3ffc:	30000208 	andcc	r0, r0, r8, lsl #4
    4000:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4004:	00000000 	andeq	r0, r0, r0
    4008:	002fc400 	eoreq	ip, pc, r0, lsl #8
    400c:	002fe608 	eoreq	lr, pc, r8, lsl #12
    4010:	30000208 	andcc	r0, r0, r8, lsl #4
    4014:	002fe69f 	mlaeq	pc, pc, r6, lr	; <UNPREDICTABLE>
    4018:	002fea08 	eoreq	lr, pc, r8, lsl #20
    401c:	50000108 	andpl	r0, r0, r8, lsl #2
    4020:	08002ff2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, fp, sp}
    4024:	08002ffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp}
    4028:	9f300002 	svcls	0x00300002
    402c:	08002ffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp}
    4030:	08002ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp}
    4034:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4038:	0408002f 	streq	r0, [r8], #-47	; 0x2f
    403c:	02080030 	andeq	r0, r8, #48	; 0x30
    4040:	049f3000 	ldreq	r3, [pc], #0	; 4048 <_Min_Stack_Size+0x3c48>
    4044:	06080030 			; <UNDEFINED> instruction: 0x06080030
    4048:	01080030 	tsteq	r8, r0, lsr r0
    404c:	00005000 	andeq	r5, r0, r0
    4050:	00000000 	andeq	r0, r0, r0
    4054:	30080000 	andcc	r0, r8, r0
    4058:	30300800 	eorscc	r0, r0, r0, lsl #16
    405c:	00010800 	andeq	r0, r1, r0, lsl #16
    4060:	00303051 	eorseq	r3, r0, r1, asr r0
    4064:	00303c08 	eorseq	r3, r0, r8, lsl #24
    4068:	f3000408 	vshl.u8	d0, d8, d0
    406c:	3c9f5101 	ldfccs	f5, [pc], {1}
    4070:	48080030 	stmdami	r8, {r4, r5}
    4074:	01080030 	tsteq	r8, r0, lsr r0
    4078:	30485100 	subcc	r5, r8, r0, lsl #2
    407c:	304c0800 	subcc	r0, ip, r0, lsl #16
    4080:	00040800 	andeq	r0, r4, r0, lsl #16
    4084:	9f5101f3 	svcls	0x005101f3
    4088:	0800304c 	stmdaeq	r0, {r2, r3, r6, ip, sp}
    408c:	08003058 	stmdaeq	r0, {r3, r4, r6, ip, sp}
    4090:	58510001 	ldmdapl	r1, {r0}^
    4094:	5c080030 	stcpl	0, cr0, [r8], {48}	; 0x30
    4098:	04080030 	streq	r0, [r8], #-48	; 0x30
    409c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    40a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    40a4:	00000000 	andeq	r0, r0, r0
    40a8:	00305c00 	eorseq	r5, r0, r0, lsl #24
    40ac:	00309408 	eorseq	r9, r0, r8, lsl #8
    40b0:	50000108 	andpl	r0, r0, r8, lsl #2
    40b4:	08003094 	stmdaeq	r0, {r2, r4, r7, ip, sp}
    40b8:	0800309a 	stmdaeq	r0, {r1, r3, r4, r7, ip, sp}
    40bc:	01f30004 	mvnseq	r0, r4
    40c0:	309a9f50 	addscc	r9, sl, r0, asr pc
    40c4:	30c80800 	sbccc	r0, r8, r0, lsl #16
    40c8:	00010800 	andeq	r0, r1, r0, lsl #16
    40cc:	00000050 	andeq	r0, r0, r0, asr r0
    40d0:	00000000 	andeq	r0, r0, r0
    40d4:	00305c00 	eorseq	r5, r0, r0, lsl #24
    40d8:	00308608 	eorseq	r8, r0, r8, lsl #12
    40dc:	51000108 	tstpl	r0, r8, lsl #2
    40e0:	08003086 	stmdaeq	r0, {r1, r2, r7, ip, sp}
    40e4:	0800309a 	stmdaeq	r0, {r1, r3, r4, r7, ip, sp}
    40e8:	01f30004 	mvnseq	r0, r4
    40ec:	309a9f51 	addscc	r9, sl, r1, asr pc
    40f0:	30a60800 	adccc	r0, r6, r0, lsl #16
    40f4:	00010800 	andeq	r0, r1, r0, lsl #16
    40f8:	0030a651 	eorseq	sl, r0, r1, asr r6
    40fc:	0030ac08 	eorseq	sl, r0, r8, lsl #24
    4100:	f3000408 	vshl.u8	d0, d8, d0
    4104:	ac9f5101 	ldfges	f5, [pc], {1}
    4108:	bc080030 	stclt	0, cr0, [r8], {48}	; 0x30
    410c:	01080030 	tsteq	r8, r0, lsr r0
    4110:	30bc5100 	adcscc	r5, ip, r0, lsl #2
    4114:	30be0800 	adcscc	r0, lr, r0, lsl #16
    4118:	00040800 	andeq	r0, r4, r0, lsl #16
    411c:	9f5101f3 	svcls	0x005101f3
    4120:	080030be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, ip, sp}
    4124:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
    4128:	00510001 	subseq	r0, r1, r1
    412c:	00000000 	andeq	r0, r0, r0
    4130:	5c000000 	stcpl	0, cr0, [r0], {-0}
    4134:	88080030 	stmdahi	r8, {r4, r5}
    4138:	02080030 	andeq	r0, r8, #48	; 0x30
    413c:	889f3000 	ldmhi	pc, {ip, sp}	; <UNPREDICTABLE>
    4140:	9a080030 	bls	204208 <_Min_Stack_Size+0x203e08>
    4144:	0a080030 	beq	20420c <_Min_Stack_Size+0x203e0c>
    4148:	30007200 	andcc	r7, r0, r0, lsl #4
    414c:	3000712e 	andcc	r7, r0, lr, lsr #2
    4150:	9a9f1a2e 	bls	fe7caa10 <_estack+0xde79aa10>
    4154:	c8080030 	stmdagt	r8, {r4, r5}
    4158:	02080030 	andeq	r0, r8, #48	; 0x30
    415c:	009f3000 	addseq	r3, pc, r0
    4160:	00000000 	andeq	r0, r0, r0
    4164:	5c000000 	stcpl	0, cr0, [r0], {-0}
    4168:	7a080030 	bvc	204230 <_Min_Stack_Size+0x203e30>
    416c:	02080030 	andeq	r0, r8, #48	; 0x30
    4170:	7a9f3000 	bvc	fe7d0178 <_estack+0xde7a0178>
    4174:	9a080030 	bls	20423c <_Min_Stack_Size+0x203e3c>
    4178:	01080030 	tsteq	r8, r0, lsr r0
    417c:	309a5300 	addscc	r5, sl, r0, lsl #6
    4180:	30a20800 	adccc	r0, r2, r0, lsl #16
    4184:	00020800 	andeq	r0, r2, r0, lsl #16
    4188:	30a29f30 	adccc	r9, r2, r0, lsr pc
    418c:	30ac0800 	adccc	r0, ip, r0, lsl #16
    4190:	00010800 	andeq	r0, r1, r0, lsl #16
    4194:	0030ac53 	eorseq	sl, r0, r3, asr ip
    4198:	0030b408 	eorseq	fp, r0, r8, lsl #8
    419c:	30000208 	andcc	r0, r0, r8, lsl #4
    41a0:	0030b49f 	mlaseq	r0, pc, r4, fp	; <UNPREDICTABLE>
    41a4:	0030be08 	eorseq	fp, r0, r8, lsl #28
    41a8:	53000108 	movwpl	r0, #264	; 0x108
    41ac:	080030be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, ip, sp}
    41b0:	080030c6 	stmdaeq	r0, {r1, r2, r6, r7, ip, sp}
    41b4:	9f300002 	svcls	0x00300002
    41b8:	080030c6 	stmdaeq	r0, {r1, r2, r6, r7, ip, sp}
    41bc:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
    41c0:	00530001 	subseq	r0, r3, r1
    41c4:	00000000 	andeq	r0, r0, r0
    41c8:	5c000000 	stcpl	0, cr0, [r0], {-0}
    41cc:	7c080030 	stcvc	0, cr0, [r8], {48}	; 0x30
    41d0:	02080030 	andeq	r0, r8, #48	; 0x30
    41d4:	7c9f3000 	ldcvc	0, cr3, [pc], {0}
    41d8:	88080030 	stmdahi	r8, {r4, r5}
    41dc:	01080030 	tsteq	r8, r0, lsr r0
    41e0:	309a5400 	addscc	r5, sl, r0, lsl #8
    41e4:	30a60800 	adccc	r0, r6, r0, lsl #16
    41e8:	00020800 	andeq	r0, r2, r0, lsl #16
    41ec:	30ac9f30 	adccc	r9, ip, r0, lsr pc
    41f0:	30b80800 	adcscc	r0, r8, r0, lsl #16
    41f4:	00020800 	andeq	r0, r2, r0, lsl #16
    41f8:	30be9f30 	adcscc	r9, lr, r0, lsr pc
    41fc:	30c80800 	sbccc	r0, r8, r0, lsl #16
    4200:	00020800 	andeq	r0, r2, r0, lsl #16
    4204:	00009f30 	andeq	r9, r0, r0, lsr pc
    4208:	00000000 	andeq	r0, r0, r0
    420c:	305c0000 	subscc	r0, ip, r0
    4210:	30880800 	addcc	r0, r8, r0, lsl #16
    4214:	00020800 	andeq	r0, r2, r0, lsl #16
    4218:	30889f30 	addcc	r9, r8, r0, lsr pc
    421c:	309a0800 	addscc	r0, sl, r0, lsl #16
    4220:	00010800 	andeq	r0, r1, r0, lsl #16
    4224:	00309a51 	eorseq	r9, r0, r1, asr sl
    4228:	0030aa08 	eorseq	sl, r0, r8, lsl #20
    422c:	30000208 	andcc	r0, r0, r8, lsl #4
    4230:	0030aa9f 	mlaseq	r0, pc, sl, sl	; <UNPREDICTABLE>
    4234:	0030ac08 	eorseq	sl, r0, r8, lsl #24
    4238:	51000108 	tstpl	r0, r8, lsl #2
    423c:	080030ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, sp}
    4240:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
    4244:	9f300002 	svcls	0x00300002
    4248:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
    424c:	080030be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, ip, sp}
    4250:	be510001 	cdplt	0, 5, cr0, cr1, cr1, {0}
    4254:	c8080030 	stmdagt	r8, {r4, r5}
    4258:	02080030 	andeq	r0, r8, #48	; 0x30
    425c:	009f3000 	addseq	r3, pc, r0
    4260:	00000000 	andeq	r0, r0, r0
    4264:	5c000000 	stcpl	0, cr0, [r0], {-0}
    4268:	80080030 	andhi	r0, r8, r0, lsr r0
    426c:	02080030 	andeq	r0, r8, #48	; 0x30
    4270:	809f3000 	addshi	r3, pc, r0
    4274:	9a080030 	bls	20433c <_Min_Stack_Size+0x203f3c>
    4278:	01080030 	tsteq	r8, r0, lsr r0
    427c:	309a5200 	addscc	r5, sl, r0, lsl #4
    4280:	30a60800 	adccc	r0, r6, r0, lsl #16
    4284:	00020800 	andeq	r0, r2, r0, lsl #16
    4288:	30a69f30 	adccc	r9, r6, r0, lsr pc
    428c:	30ac0800 	adccc	r0, ip, r0, lsl #16
    4290:	00010800 	andeq	r0, r1, r0, lsl #16
    4294:	0030ac52 	eorseq	sl, r0, r2, asr ip
    4298:	0030b808 	eorseq	fp, r0, r8, lsl #16
    429c:	30000208 	andcc	r0, r0, r8, lsl #4
    42a0:	0030b89f 	mlaseq	r0, pc, r8, fp	; <UNPREDICTABLE>
    42a4:	0030be08 	eorseq	fp, r0, r8, lsl #28
    42a8:	52000108 	andpl	r0, r0, #8, 2
    42ac:	080030be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, ip, sp}
    42b0:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
    42b4:	9f300002 	svcls	0x00300002
	...
    42c0:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
    42c4:	080030f0 	stmdaeq	r0, {r4, r5, r6, r7, ip, sp}
    42c8:	f0510001 			; <UNDEFINED> instruction: 0xf0510001
    42cc:	fc080030 	stc2	0, cr0, [r8], {48}	; 0x30
    42d0:	04080030 	streq	r0, [r8], #-48	; 0x30
    42d4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    42d8:	0030fc9f 	mlaseq	r0, pc, ip, pc	; <UNPREDICTABLE>
    42dc:	00310808 	eorseq	r0, r1, r8, lsl #16
    42e0:	51000108 	tstpl	r0, r8, lsl #2
    42e4:	08003108 	stmdaeq	r0, {r3, r8, ip, sp}
    42e8:	0800310c 	stmdaeq	r0, {r2, r3, r8, ip, sp}
    42ec:	01f30004 	mvnseq	r0, r4
    42f0:	310c9f51 	tstcc	ip, r1, asr pc
    42f4:	31180800 	tstcc	r8, r0, lsl #16
    42f8:	00010800 	andeq	r0, r1, r0, lsl #16
    42fc:	00311851 	eorseq	r1, r1, r1, asr r8
    4300:	00311c08 	eorseq	r1, r1, r8, lsl #24
    4304:	f3000408 	vshl.u8	d0, d8, d0
    4308:	009f5101 	addseq	r5, pc, r1, lsl #2
    430c:	00000000 	andeq	r0, r0, r0
    4310:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    4314:	8a080031 	bhi	2043e0 <_Min_Stack_Size+0x203fe0>
    4318:	01080031 	tsteq	r8, r1, lsr r0
    431c:	318a5000 	orrcc	r5, sl, r0
    4320:	318c0800 	orrcc	r0, ip, r0, lsl #16
    4324:	00040800 	andeq	r0, r4, r0, lsl #16
    4328:	9f5001f3 	svcls	0x005001f3
	...
    4334:	08003178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, sp}
    4338:	08003182 	stmdaeq	r0, {r1, r7, r8, ip, sp}
    433c:	9f300002 	svcls	0x00300002
    4340:	08003182 	stmdaeq	r0, {r1, r7, r8, ip, sp}
    4344:	0800318a 	stmdaeq	r0, {r1, r3, r7, r8, ip, sp}
    4348:	0070000b 	rsbseq	r0, r0, fp
    434c:	731aff08 	tstvc	sl, #8, 30
    4350:	2e301a00 	vaddcs.f32	s2, s0, s0
    4354:	00318a9f 	mlaseq	r1, pc, sl, r8	; <UNPREDICTABLE>
    4358:	00318c08 	eorseq	r8, r1, r8, lsl #24
    435c:	f3000c08 			; <UNDEFINED> instruction: 0xf3000c08
    4360:	ff085001 			; <UNDEFINED> instruction: 0xff085001
    4364:	1a00731a 	bne	20fd4 <_Min_Stack_Size+0x20bd4>
    4368:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    436c:	00000000 	andeq	r0, r0, r0
    4370:	8c000000 	stchi	0, cr0, [r0], {-0}
    4374:	98080031 	stmdals	r8, {r0, r4, r5}
    4378:	01080031 	tsteq	r8, r1, lsr r0
    437c:	31985000 	orrscc	r5, r8, r0
    4380:	319c0800 	orrscc	r0, ip, r0, lsl #16
    4384:	00040800 	andeq	r0, r4, r0, lsl #16
    4388:	9f5001f3 	svcls	0x005001f3
	...
    4394:	0800319c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, sp}
    4398:	080031ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, ip, sp}
    439c:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
    43a0:	b0080031 	andlt	r0, r8, r1, lsr r0
    43a4:	04080031 	streq	r0, [r8], #-49	; 0x31
    43a8:	5001f300 	andpl	pc, r1, r0, lsl #6
    43ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    43b0:	00000000 	andeq	r0, r0, r0
    43b4:	00319c00 	eorseq	r9, r1, r0, lsl #24
    43b8:	0031a608 	eorseq	sl, r1, r8, lsl #12
    43bc:	30000208 	andcc	r0, r0, r8, lsl #4
    43c0:	0031a69f 	mlaseq	r1, pc, r6, sl	; <UNPREDICTABLE>
    43c4:	0031ae08 	eorseq	sl, r1, r8, lsl #28
    43c8:	70000b08 	andvc	r0, r0, r8, lsl #22
    43cc:	1aff0800 	bne	fffc63d4 <_estack+0xdff963d4>
    43d0:	301a0073 	andscc	r0, sl, r3, ror r0
    43d4:	31ae9f2e 			; <UNDEFINED> instruction: 0x31ae9f2e
    43d8:	31b00800 	lslscc	r0, r0, #16
    43dc:	000c0800 	andeq	r0, ip, r0, lsl #16
    43e0:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    43e4:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    43e8:	9f2e301a 	svcls	0x002e301a
	...
    43f4:	080031b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, sp}
    43f8:	080031b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, ip, sp}
    43fc:	b6500001 	ldrblt	r0, [r0], -r1
    4400:	c0080031 	andgt	r0, r8, r1, lsr r0
    4404:	04080031 	streq	r0, [r8], #-49	; 0x31
    4408:	5001f300 	andpl	pc, r1, r0, lsl #6
    440c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4410:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	31424841 	cmpcc	r2, r1, asr #16
       4:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
       8:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
       c:	4746434c 	strbmi	r4, [r6, -ip, asr #6]
      10:	50410052 	subpl	r0, r1, r2, asr r0
      14:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
      18:	41005254 	tstmi	r0, r4, asr r2
      1c:	45324248 	ldrmi	r4, [r2, #-584]!	; 0x248
      20:	4100524e 	tstmi	r0, lr, asr #4
      24:	52324248 	eorspl	r4, r2, #72, 4	; 0x80000004
      28:	00525453 	subseq	r5, r2, r3, asr r4
      2c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
      30:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
      34:	43444200 	movtmi	r4, #16896	; 0x4200
      38:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
      3c:	5332494c 	teqpl	r2, #76, 18	; 0x130000
      40:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
      44:	52575000 	subspl	r5, r7, #0
      48:	7079545f 	rsbsvc	r5, r9, pc, asr r4
      4c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
      50:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff158 <_estack+0xdffcf158>
      54:	33746e69 	cmncc	r4, #1680	; 0x690
      58:	00745f32 	rsbseq	r5, r4, r2, lsr pc
      5c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      60:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
      64:	5300745f 	movwpl	r7, #1119	; 0x45f
      68:	52474353 	subpl	r4, r7, #1275068417	; 0x4c000001
      6c:	45534800 	ldrbmi	r4, [r3, #-2048]	; 0x800
      70:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
      74:	43007375 	movwmi	r7, #885	; 0x375
      78:	44495550 	strbmi	r5, [r9], #-1360	; 0x550
      7c:	42484100 	submi	r4, r8, #0, 2
      80:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
      84:	48410052 	stmdami	r1, {r1, r4, r6}^
      88:	504c3342 	subpl	r3, ip, r2, asr #6
      8c:	00524e45 	subseq	r4, r2, r5, asr #28
      90:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
      94:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
      98:	43530033 	cmpmi	r3, #51	; 0x33
      9c:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
      a0:	41006570 	tstmi	r0, r0, ror r5
      a4:	45314250 	ldrmi	r4, [r1, #-592]!	; 0x250
      a8:	2f00524e 	svccs	0x0000524e
      ac:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
      b0:	6470682f 	ldrbtvs	r6, [r0], #-2095	; 0x82f
      b4:	6f772f73 	svcvs	0x00772f73
      b8:	70736b72 	rsbsvc	r6, r3, r2, ror fp
      bc:	2f656361 	svccs	0x00656361
      c0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      c4:	5f344632 	svcpl	0x00344632
      c8:	4f495047 	svcmi	0x00495047
      cc:	6d65445f 	cfstrdvs	mvd4, [r5, #-380]!	; 0xfffffe84
      d0:	4344006f 	movtmi	r0, #16495	; 0x406f
      d4:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
      d8:	43490052 	movtmi	r0, #36946	; 0x9052
      dc:	4f005253 	svcmi	0x00005253
      e0:	454b5450 	strbmi	r5, [fp, #-1104]	; 0x450
      e4:	6c005259 	sfmvs	f5, 4, [r0], {89}	; 0x59
      e8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      ec:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      f0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
      f4:	41464200 	mrsmi	r4, (UNDEF: 102)
      f8:	43520052 	cmpmi	r2, #82	; 0x52
      fc:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     100:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     104:	68730066 	ldmdavs	r3!, {r1, r2, r5, r6}^
     108:	2074726f 	rsbscs	r7, r4, pc, ror #4
     10c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     110:	32425041 	subcc	r5, r2, #65	; 0x41
     114:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     118:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff220 <_estack+0xdffcf220>
     11c:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     120:	4300745f 	movwmi	r7, #1119	; 0x45f
     124:	00525346 	subseq	r5, r2, r6, asr #6
     128:	4354504f 	cmpmi	r4, #79	; 0x4f
     12c:	70003152 	andvc	r3, r0, r2, asr r1
     130:	6f736c6c 	svcvs	0x00736c6c
     134:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     138:	42484100 	submi	r4, r8, #0, 2
     13c:	524e4533 	subpl	r4, lr, #213909504	; 0xcc00000
     140:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     144:	6c70006d 	ldclvs	0, cr0, [r0], #-436	; 0xfffffe4c
     148:	4100706c 	tstmi	r0, ip, rrx
     14c:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
     150:	736e7500 	cmnvc	lr, #0, 10
     154:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     158:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     15c:	41007261 	tstmi	r0, r1, ror #4
     160:	45324250 	ldrmi	r4, [r2, #-592]!	; 0x250
     164:	5300524e 	movwpl	r5, #590	; 0x24e
     168:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     16c:	6f437055 	svcvs	0x00437055
     170:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
     174:	6f6c0072 	svcvs	0x006c0072
     178:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     17c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     180:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     184:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     188:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     18c:	524f4300 	subpl	r4, pc, #0, 6
     190:	5f584554 	svcpl	0x00584554
     194:	5f46344d 	svcpl	0x0046344d
     198:	334d5453 	movtcc	r5, #54355	; 0xd453
     19c:	2f344632 	svccs	0x00344632
     1a0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     1a4:	2f707574 	svccs	0x00707574
     1a8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
     1ac:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     1b0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     1b4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     1b8:	5300632e 	movwpl	r6, #814	; 0x32e
     1bc:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
     1c0:	73795300 	cmnvc	r9, #0, 6
     1c4:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     1c8:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
     1cc:	6b636f6c 	blvs	18dbf84 <_Min_Stack_Size+0x18dbb84>
     1d0:	61647055 	qdsubvs	r7, r5, r4
     1d4:	4d006574 	cfstr32mi	mvfx6, [r0, #-464]	; 0xfffffe30
     1d8:	5241464d 	subpl	r4, r1, #80740352	; 0x4d00000
     1dc:	73795300 	cmnvc	r9, #0, 6
     1e0:	496d6574 	stmdbmi	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     1e4:	0074696e 	rsbseq	r6, r4, lr, ror #18
     1e8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     1ec:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     1f0:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     1f4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     1f8:	4100746e 	tstmi	r0, lr, ror #8
     1fc:	4c314250 	lfmmi	f4, 4, [r1], #-320	; 0xfffffec0
     200:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     204:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     208:	006f6376 	rsbeq	r6, pc, r6, ror r3	; <UNPREDICTABLE>
     20c:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
     210:	41534900 	cmpmi	r3, r0, lsl #18
     214:	46440052 			; <UNDEFINED> instruction: 0x46440052
     218:	53005253 	movwpl	r5, #595	; 0x253
     21c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     220:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
     224:	6f6c4365 	svcvs	0x006c4365
     228:	48006b63 	stmdami	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     22c:	00525346 	subseq	r5, r2, r6, asr #6
     230:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     234:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     238:	4d4d0052 	stclmi	0, cr0, [sp, #-328]	; 0xfffffeb8
     23c:	52005246 	andpl	r5, r0, #1610612740	; 0x60000004
     240:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     244:	30444556 	subcc	r4, r4, r6, asr r5
     248:	53455200 	movtpl	r5, #20992	; 0x5200
     24c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     250:	52003144 	andpl	r3, r0, #68, 2
     254:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     258:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     25c:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     260:	43737953 	cmnmi	r3, #1359872	; 0x14c000
     264:	6b636f6c 	blvs	18dc01c <_Min_Stack_Size+0x18dbc1c>
     268:	53455200 	movtpl	r5, #20992	; 0x5200
     26c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     270:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     274:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     278:	35444556 	strbcc	r4, [r4, #-1366]	; 0x556
     27c:	53455200 	movtpl	r5, #20992	; 0x5200
     280:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     284:	47003644 	strmi	r3, [r0, -r4, asr #12]
     288:	4320554e 	teqmi	r0, #327155712	; 0x13800000
     28c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
     290:	2d20322e 	sfmcs	f3, 4, [r0, #-184]!	; 0xffffff48
     294:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
     298:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
     29c:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
     2a0:	2d20346d 	cfstrscs	mvf3, [r0, #-436]!	; 0xfffffe4c
     2a4:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     2a8:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     2ac:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0x66d
     2b0:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     2b4:	6e75746d 	cdpvs	4, 7, cr7, cr5, cr13, {3}
     2b8:	6f633d65 	svcvs	0x00633d65
     2bc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
     2c0:	20346d2d 	eorscs	r6, r4, sp, lsr #26
     2c4:	696c6d2d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     2c8:	656c7474 	strbvs	r7, [ip, #-1140]!	; 0x474
     2cc:	646e652d 	strbtvs	r6, [lr], #-1325	; 0x52d
     2d0:	206e6169 	rsbcs	r6, lr, r9, ror #2
     2d4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     2d8:	20626d75 	rsbcs	r6, r2, r5, ror sp
     2dc:	70666d2d 	rsbvc	r6, r6, sp, lsr #26
     2e0:	70663d75 	rsbvc	r3, r6, r5, ror sp
     2e4:	732d3476 	teqvc	sp, #1979711488	; 0x76000000
     2e8:	31642d70 	smccc	17104	; 0x42d0
     2ec:	6d2d2036 	stcvs	0, cr2, [sp, #-216]!	; 0xffffff28
     2f0:	616f6c66 	cmnvs	pc, r6, ror #24
     2f4:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
     2f8:	6f733d69 	svcvs	0x00733d69
     2fc:	70667466 	rsbvc	r7, r6, r6, ror #8
     300:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     304:	20334f2d 	eorscs	r4, r3, sp, lsr #30
     308:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0x32d
     30c:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     310:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
     314:	2d747361 	ldclcs	3, cr7, [r4, #-388]!	; 0xfffffe7c
     318:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     31c:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
     320:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     324:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
     328:	74636573 	strbtvc	r6, [r3], #-1395	; 0x573
     32c:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     330:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xd20
     334:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
     338:	74636573 	strbtvc	r6, [r3], #-1395	; 0x573
     33c:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     340:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
     344:	6f632d6f 	svcvs	0x00632d6f
     348:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
     34c:	702d2d20 	eorvc	r2, sp, r0, lsr #26
     350:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     354:	78616d20 	stmdavc	r1!, {r5, r8, sl, fp, sp, lr}^
     358:	6c6e692d 	stclvs	9, cr6, [lr], #-180	; 0xffffff4c
     35c:	2d656e69 	stclcs	14, cr6, [r5, #-420]!	; 0xfffffe5c
     360:	6e736e69 	cdpvs	14, 7, cr6, cr3, cr9, {3}
     364:	69732d73 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     368:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
     36c:	3030313d 	eorscc	r3, r0, sp, lsr r1
     370:	48410030 	stmdami	r1, {r4, r5}^
     374:	4e453142 	dvfmism	f3, f5, f2
     378:	5f5f0052 	svcpl	0x005f0052
     37c:	33746e69 	cmncc	r4, #1680	; 0x690
     380:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     384:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
     388:	42484100 	submi	r4, r8, #0, 2
     38c:	54535233 	ldrbpl	r5, [r3], #-563	; 0x233
     390:	4c460052 	mcrrmi	0, 5, r0, r6, cr2
     394:	5f485341 	svcpl	0x00485341
     398:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     39c:	00666544 	rsbeq	r6, r6, r4, asr #10
     3a0:	5f4d5449 	svcpl	0x004d5449
     3a4:	75427852 	strbvc	r7, [r2, #-2130]	; 0x852
     3a8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     3ac:	4c4c5000 	marmi	acc0, r5, ip
     3b0:	43494153 	movtmi	r4, #37203	; 0x9153
     3b4:	00524746 	subseq	r4, r2, r6, asr #14
     3b8:	43415043 	movtmi	r5, #4163	; 0x1043
     3bc:	50410052 	subpl	r0, r1, r2, asr r0
     3c0:	504c3242 	subpl	r3, ip, r2, asr #4
     3c4:	00524e45 	subseq	r4, r2, r5, asr #28
     3c8:	4354504f 	cmpmi	r4, #79	; 0x4f
     3cc:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
     3d0:	455f4344 	ldrbmi	r4, [pc, #-836]	; 94 <_Min_Heap_Size+0x94>
     3d4:	52495f52 	subpl	r5, r9, #328	; 0x148
     3d8:	50006e51 	andpl	r6, r0, r1, asr lr
     3dc:	52445055 	subpl	r5, r4, #85	; 0x55
     3e0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     3e4:	52495f43 	subpl	r5, r9, #268	; 0x10c
     3e8:	61684351 	cmnvs	r8, r1, asr r3
     3ec:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     3f0:	00646d43 	rsbeq	r6, r4, r3, asr #26
     3f4:	314e4143 	cmpcc	lr, r3, asr #2
     3f8:	3058525f 	subscc	r5, r8, pc, asr r2
     3fc:	5152495f 	cmppl	r2, pc, asr r9
     400:	5650006e 	ldrbpl	r0, [r0], -lr, rrx
     404:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
     408:	43006e51 	movwmi	r6, #3665	; 0xe51
     40c:	5f324e41 	svcpl	0x00324e41
     410:	5f305852 	svcpl	0x00305852
     414:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     418:	63727300 	cmnvs	r2, #0, 6
     41c:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
     420:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     424:	33433249 	movtcc	r3, #12873	; 0x3249
     428:	5f52455f 	svcpl	0x0052455f
     42c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     430:	52415500 	subpl	r5, r1, #0, 10
     434:	495f3854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, sp}^	; <UNPREDICTABLE>
     438:	006e5152 	rsbeq	r5, lr, r2, asr r1
     43c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     440:	6e694c5f 	mcrvs	12, 3, r4, cr9, cr15, {2}
     444:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
     448:	43324900 	teqmi	r2, #0, 18
     44c:	56455f31 			; <UNDEFINED> instruction: 0x56455f31
     450:	5152495f 	cmppl	r2, pc, asr r9
     454:	544f006e 	strbpl	r0, [pc], #-110	; 45c <_Min_Stack_Size+0x5c>
     458:	52455059 	subpl	r5, r5, #89	; 0x59
     45c:	414d4400 	cmpmi	sp, r0, lsl #8
     460:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xf32
     464:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     468:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     46c:	45006e51 	strmi	r6, [r0, #-3665]	; 0xe51
     470:	5f495458 	svcpl	0x00495458
     474:	67697254 			; <UNDEFINED> instruction: 0x67697254
     478:	5f726567 	svcpl	0x00726567
     47c:	69736952 	ldmdbvs	r3!, {r1, r4, r6, r8, fp, sp, lr}^
     480:	465f676e 	ldrbmi	r6, [pc], -lr, ror #14
     484:	696c6c61 	stmdbvs	ip!, {r0, r5, r6, sl, fp, sp, lr}^
     488:	4400676e 	strmi	r6, [r0], #-1902	; 0x76e
     48c:	42415349 	submi	r5, r1, #603979777	; 0x24000001
     490:	4700454c 	strmi	r4, [r0, -ip, asr #10]
     494:	5f4f4950 	svcpl	0x004f4950
     498:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     49c:	50505f65 	subspl	r5, r0, r5, ror #30
     4a0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     4a4:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     4a8:	47006e51 	smlsdmi	r0, r1, lr, r6
     4ac:	5f4f4950 	svcpl	0x004f4950
     4b0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     4b4:	0046415f 	subeq	r4, r6, pc, asr r1
     4b8:	5f435452 	svcpl	0x00435452
     4bc:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
     4c0:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     4c4:	47006e51 	smlsdmi	r0, r1, lr, r6
     4c8:	5f4f4950 	svcpl	0x004f4950
     4cc:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     4d0:	32490064 	subcc	r0, r9, #100	; 0x64
     4d4:	455f3243 	ldrbmi	r3, [pc, #-579]	; 299 <_Min_Heap_Size+0x299>
     4d8:	52495f52 	subpl	r5, r9, #328	; 0x148
     4dc:	47006e51 	smlsdmi	r0, r1, lr, r6
     4e0:	5f4f4950 	svcpl	0x004f4950
     4e4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     4e8:	004e415f 	subeq	r4, lr, pc, asr r1
     4ec:	4f495047 	svcmi	0x00495047
     4f0:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
     4f4:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     4f8:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
     4fc:	575f4354 			; <UNDEFINED> instruction: 0x575f4354
     500:	5f50554b 	svcpl	0x0050554b
     504:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     508:	44575700 	ldrbmi	r5, [r7], #-1792	; 0x700
     50c:	52495f47 	subpl	r5, r9, #284	; 0x11c
     510:	53006e51 	movwpl	r6, #3665	; 0xe51
     514:	5f4f4944 	svcpl	0x004f4944
     518:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     51c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     520:	79544f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, lr}^
     524:	545f6570 	ldrbpl	r6, [pc], #-1392	; 52c <_Min_Stack_Size+0x12c>
     528:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     52c:	54006665 	strpl	r6, [r0], #-1637	; 0x665
     530:	5f384d49 	svcpl	0x00384d49
     534:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     538:	006e5152 	rsbeq	r5, lr, r2, asr r1
     53c:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     540:	3158525f 	cmpcc	r8, pc, asr r2
     544:	5152495f 	cmppl	r2, pc, asr r9
     548:	5047006e 	subpl	r0, r7, lr, rrx
     54c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 430 <_Min_Stack_Size+0x30>
     550:	5f65646f 	svcpl	0x0065646f
     554:	44004e49 	strmi	r4, [r0], #-3657	; 0xe49
     558:	5f32414d 	svcpl	0x0032414d
     55c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
     560:	5f366d61 	svcpl	0x00366d61
     564:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     568:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     56c:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     570:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     574:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     578:	00657275 	rsbeq	r7, r5, r5, ror r2
     57c:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     580:	5f56455f 	svcpl	0x0056455f
     584:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     588:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     58c:	646f4d49 	strbtvs	r4, [pc], #-3401	; 594 <_Min_Stack_Size+0x194>
     590:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     594:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     598:	50530066 	subspl	r0, r3, r6, rrx
     59c:	495f3549 	ldmdbmi	pc, {r0, r3, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     5a0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5a4:	31414d44 	cmpcc	r1, r4, asr #26
     5a8:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     5ac:	356d6165 	strbcc	r6, [sp, #-357]!	; 0x165
     5b0:	5152495f 	cmppl	r2, pc, asr r9
     5b4:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     5b8:	5f394954 	svcpl	0x00394954
     5bc:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     5c0:	45006e51 	strmi	r6, [r0, #-3665]	; 0xe51
     5c4:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
     5c8:	58450045 	stmdapl	r5, {r0, r2, r6}^
     5cc:	435f4954 	cmpmi	pc, #84, 18	; 0x150000
     5d0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     5d4:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
     5d8:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     5dc:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
     5e0:	48544500 	ldmdami	r4, {r8, sl, lr}^
     5e4:	554b575f 	strbpl	r5, [fp, #-1887]	; 0x75f
     5e8:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     5ec:	45006e51 	strmi	r6, [r0, #-3665]	; 0xe51
     5f0:	5f495458 	svcpl	0x00495458
     5f4:	67697254 			; <UNDEFINED> instruction: 0x67697254
     5f8:	5f726567 	svcpl	0x00726567
     5fc:	6c6c6146 	stfvse	f6, [ip], #-280	; 0xfffffee8
     600:	00676e69 	rsbeq	r6, r7, r9, ror #28
     604:	364d4954 			; <UNDEFINED> instruction: 0x364d4954
     608:	4341445f 	movtmi	r4, #5215	; 0x145f
     60c:	5152495f 	cmppl	r2, pc, asr r9
     610:	4155006e 	cmpmi	r5, lr, rrx
     614:	5f345452 	svcpl	0x00345452
     618:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     61c:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     620:	5f53465f 	svcpl	0x0053465f
     624:	50554b57 	subspl	r4, r5, r7, asr fp
     628:	5152495f 	cmppl	r2, pc, asr r9
     62c:	5047006e 	subpl	r0, r7, lr, rrx
     630:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 638 <_Min_Stack_Size+0x238>
     634:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     638:	54006665 	strpl	r6, [r0], #-1637	; 0x665
     63c:	5f384d49 	svcpl	0x00384d49
     640:	545f5055 	ldrbpl	r5, [pc], #-85	; 648 <_Min_Stack_Size+0x248>
     644:	33314d49 	teqcc	r1, #4672	; 0x1240
     648:	5152495f 	cmppl	r2, pc, asr r9
     64c:	534f006e 	movtpl	r0, #61550	; 0xf06e
     650:	44454550 	strbmi	r4, [r5], #-1360	; 0x550
     654:	75420052 	strbvc	r0, [r2, #-82]	; 0x52
     658:	75614673 	strbvc	r4, [r1, #-1651]!	; 0x673
     65c:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     660:	006e5152 	rsbeq	r5, lr, r2, asr r1
     664:	4f495047 	svcmi	0x00495047
     668:	64654d5f 	strbtvs	r4, [r5], #-3423	; 0xd5f
     66c:	5f6d7569 	svcpl	0x006d7569
     670:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     674:	65500064 	ldrbvs	r0, [r0, #-100]	; 0x64
     678:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     67c:	5152495f 	cmppl	r2, pc, asr r9
     680:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     684:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     688:	61657274 	smcvs	22308	; 0x5724
     68c:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     690:	006e5152 	rsbeq	r5, lr, r2, asr r1
     694:	4f495047 	svcmi	0x00495047
     698:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     69c:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     6a0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     6a4:	50470066 	subpl	r0, r7, r6, rrx
     6a8:	505f4f49 	subspl	r4, pc, r9, asr #30
     6ac:	4e006e69 	cdpmi	14, 0, cr6, cr0, cr9, {3}
     6b0:	5f434956 	svcpl	0x00434956
     6b4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     6b8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     6bc:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     6c0:	58450065 	stmdapl	r5, {r0, r2, r5, r6}^
     6c4:	495f4954 	ldmdbmi	pc, {r2, r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
     6c8:	0074696e 	rsbseq	r6, r4, lr, ror #18
     6cc:	31414d44 	cmpcc	r1, r4, asr #26
     6d0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     6d4:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
     6d8:	5152495f 	cmppl	r2, pc, asr r9
     6dc:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     6e0:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     6e4:	61657274 	smcvs	22308	; 0x5724
     6e8:	495f366d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     6ec:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6f0:	6f6d654d 	svcvs	0x006d654d
     6f4:	614d7972 	hvcvs	55186	; 0xd792
     6f8:	6567616e 	strbvs	r6, [r7, #-366]!	; 0x16e
     6fc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
     700:	5152495f 	cmppl	r2, pc, asr r9
     704:	3249006e 	subcc	r0, r9, #110	; 0x6e
     708:	455f3343 	ldrbmi	r3, [pc, #-835]	; 3cd <_Min_Heap_Size+0x3cd>
     70c:	52495f56 	subpl	r5, r9, #344	; 0x158
     710:	53006e51 	movwpl	r6, #3665	; 0xe51
     714:	5f314941 	svcpl	0x00314941
     718:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     71c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     720:	65475f49 	strbvs	r5, [r7, #-3913]	; 0xf49
     724:	616c4674 	smcvs	50276	; 0xc464
     728:	61745367 	cmnvs	r4, r7, ror #6
     72c:	00737574 	rsbseq	r7, r3, r4, ror r5
     730:	36495053 			; <UNDEFINED> instruction: 0x36495053
     734:	5152495f 	cmppl	r2, pc, asr r9
     738:	434c006e 	movtmi	r0, #49262	; 0xc06e
     73c:	4f00524b 	svcmi	0x0000524b
     740:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     744:	50455f53 	subpl	r5, r5, r3, asr pc
     748:	554f5f31 	strbpl	r5, [pc, #-3889]	; fffff81f <_estack+0xdffcf81f>
     74c:	52495f54 	subpl	r5, r9, #84, 30	; 0x150
     750:	53006e51 	movwpl	r6, #3665	; 0xe51
     754:	46435359 			; <UNDEFINED> instruction: 0x46435359
     758:	58455f47 	stmdapl	r5, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
     75c:	694c4954 	stmdbvs	ip, {r2, r4, r6, r8, fp, lr}^
     760:	6f43656e 	svcvs	0x0043656e
     764:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     768:	414d4400 	cmpmi	sp, r0, lsl #8
     76c:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xf32
     770:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     774:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     778:	43006e51 	movwmi	r6, #3665	; 0xe51
     77c:	5f314e41 	svcpl	0x00314e41
     780:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     784:	006e5152 	rsbeq	r5, lr, r2, asr r1
     788:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     78c:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
     790:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     794:	47006e51 	smlsdmi	r0, r1, lr, r6
     798:	504f4950 	subpl	r4, pc, r0, asr r9	; <UNPREDICTABLE>
     79c:	5f645075 	svcpl	0x00645075
     7a0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     7a4:	00666544 	rsbeq	r6, r6, r4, asr #10
     7a8:	31495053 	qdaddcc	r5, r3, r9
     7ac:	5152495f 	cmppl	r2, pc, asr r9
     7b0:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     7b4:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     7b8:	61657274 	smcvs	22308	; 0x5724
     7bc:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     7c0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7c4:	4349564e 	movtmi	r5, #38478	; 0x964e
     7c8:	5152495f 	cmppl	r2, pc, asr r9
     7cc:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     7d0:	006c656e 	rsbeq	r6, ip, lr, ror #10
     7d4:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     7d8:	4b52425f 	blmi	149115c <_Min_Stack_Size+0x1490d5c>
     7dc:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     7e0:	495f3231 	ldmdbmi	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
     7e4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7e8:	4349564e 	movtmi	r5, #38478	; 0x964e
     7ec:	5152495f 	cmppl	r2, pc, asr r9
     7f0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     7f4:	506c656e 	rsbpl	r6, ip, lr, ror #10
     7f8:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
     7fc:	6f697470 	svcvs	0x00697470
     800:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
     804:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     808:	79530079 	ldmdbvc	r3, {r0, r3, r4, r5, r6}^
     80c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     810:	52495f6b 	subpl	r5, r9, #428	; 0x1ac
     814:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
     818:	5f314d49 	svcpl	0x00314d49
     81c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     820:	006e5152 	rsbeq	r5, lr, r2, asr r1
     824:	4f495047 	svcmi	0x00495047
     828:	5075505f 	rsbspl	r5, r5, pc, asr r0
     82c:	4f4e5f64 	svcmi	0x004e5f64
     830:	4c4c5550 	cfstr64mi	mvdx5, [ip], {80}	; 0x50
     834:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     838:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
     83c:	61485152 	cmpvs	r8, r2, asr r1
     840:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     844:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     848:	545f384d 	ldrbpl	r3, [pc], #-2125	; 850 <_Min_Stack_Size+0x450>
     84c:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     850:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 858 <_Min_Stack_Size+0x458>
     854:	34314d49 	ldrtcc	r4, [r1], #-3401	; 0xd49
     858:	5152495f 	cmppl	r2, pc, asr r9
     85c:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     860:	5f443241 	svcpl	0x00443241
     864:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     868:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     86c:	544f5f4f 	strbpl	r5, [pc], #-3919	; 874 <_Min_Stack_Size+0x474>
     870:	00657079 	rsbeq	r7, r5, r9, ror r0
     874:	5f485445 	svcpl	0x00485445
     878:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     87c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     880:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     884:	53007469 	movwpl	r7, #1129	; 0x469
     888:	6c614356 	stclvs	3, cr4, [r1], #-344	; 0xfffffea8
     88c:	52495f6c 	subpl	r5, r9, #108, 30	; 0x1b0
     890:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
     894:	5f32414d 	svcpl	0x0032414d
     898:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
     89c:	5f336d61 	svcpl	0x00336d61
     8a0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8a4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     8a8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     8ac:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     8b0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     8b4:	4d440066 	stclmi	0, cr0, [r4, #-408]	; 0xfffffe68
     8b8:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     8bc:	61657274 	smcvs	22308	; 0x5724
     8c0:	495f346d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     8c4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8c8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     8cc:	495f3654 	ldmdbmi	pc, {r2, r4, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     8d0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8d4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     8d8:	6e694c5f 	mcrvs	12, 3, r4, cr9, cr15, {2}
     8dc:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     8e0:	495f354d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     8e4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8e8:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     8ec:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     8f0:	53006e51 	movwpl	r6, #3665	; 0xe51
     8f4:	5f324950 	svcpl	0x00324950
     8f8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8fc:	414d4400 	cmpmi	sp, r0, lsl #8
     900:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
     904:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     908:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     90c:	43006e51 	movwmi	r6, #3665	; 0xe51
     910:	5f324e41 	svcpl	0x00324e41
     914:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     918:	006e5152 	rsbeq	r5, lr, r2, asr r1
     91c:	4f495047 	svcmi	0x00495047
     920:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     924:	70795474 	rsbsvc	r5, r9, r4, ror r4
     928:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     92c:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
     930:	6f697463 	svcvs	0x00697463
     934:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
     938:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     93c:	444f4d00 	strbmi	r4, [pc], #-3328	; 944 <_Min_Stack_Size+0x544>
     940:	45005245 	strmi	r5, [r0, #-581]	; 0x245
     944:	5f495458 	svcpl	0x00495458
     948:	67697254 			; <UNDEFINED> instruction: 0x67697254
     94c:	00726567 	rsbseq	r6, r2, r7, ror #10
     950:	5f47544f 	svcpl	0x0047544f
     954:	495f5348 	ldmdbmi	pc, {r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     958:	006e5152 	rsbeq	r5, lr, r2, asr r1
     95c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     960:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     964:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     968:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     96c:	4c006572 	cfstr32mi	mvfx6, [r0], {114}	; 0x72
     970:	5f434454 	svcpl	0x00434454
     974:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     978:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     97c:	6f4d5f49 	svcvs	0x004d5f49
     980:	45006564 	strmi	r6, [r0, #-1380]	; 0x564
     984:	5f495458 	svcpl	0x00495458
     988:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     98c:	746e495f 	strbtvc	r4, [lr], #-2399	; 0x95f
     990:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     994:	55007470 	strpl	r7, [r0, #-1136]	; 0x470
     998:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     99c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     9a0:	53006e51 	movwpl	r6, #3665	; 0xe51
     9a4:	5f334950 	svcpl	0x00334950
     9a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9ac:	414d4400 	cmpmi	sp, r0, lsl #8
     9b0:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xf32
     9b4:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     9b8:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     9bc:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
     9c0:	5f314d49 	svcpl	0x00314d49
     9c4:	5f4b5242 	svcpl	0x004b5242
     9c8:	394d4954 	stmdbcc	sp, {r2, r4, r6, r8, fp, lr}^
     9cc:	5152495f 	cmppl	r2, pc, asr r9
     9d0:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     9d4:	555f314d 	ldrbpl	r3, [pc, #-333]	; 88f <_Min_Stack_Size+0x48f>
     9d8:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
     9dc:	5f30314d 	svcpl	0x0030314d
     9e0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     9e4:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     9e8:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     9ec:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9f0:	48534148 	ldmdami	r3, {r3, r6, r8, lr}^
     9f4:	474e525f 	smlsldmi	r5, lr, pc, r2	; <UNPREDICTABLE>
     9f8:	5152495f 	cmppl	r2, pc, asr r9
     9fc:	5047006e 	subpl	r0, r7, lr, rrx
     a00:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
     a04:	5f747361 	svcpl	0x00747361
     a08:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     a0c:	41550064 	cmpmi	r5, r4, rrx
     a10:	5f355452 	svcpl	0x00355452
     a14:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a18:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     a1c:	52545f31 	subspl	r5, r4, #49, 30	; 0xc4
     a20:	4f435f47 	svcmi	0x00435f47
     a24:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     a28:	5f31314d 	svcpl	0x0031314d
     a2c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a30:	434d4600 	movtmi	r4, #54784	; 0xd600
     a34:	5152495f 	cmppl	r2, pc, asr r9
     a38:	4352006e 	cmpmi	r2, #110	; 0x6e
     a3c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     a40:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
     a44:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     a48:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     a4c:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
     a50:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     a54:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     a58:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a5c:	5f434352 	svcpl	0x00434352
     a60:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     a64:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     a68:	6f697461 	svcvs	0x00697461
     a6c:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
     a70:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     a74:	73747075 	cmnvc	r4, #117	; 0x75
     a78:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     a7c:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     a80:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     a84:	46006e6f 	strmi	r6, [r0], -pc, ror #28
     a88:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     a8c:	5152495f 	cmppl	r2, pc, asr r9
     a90:	544f006e 	strbpl	r0, [pc], #-110	; a98 <_Min_Stack_Size+0x698>
     a94:	53465f47 	movtpl	r5, #28487	; 0x6f47
     a98:	5152495f 	cmppl	r2, pc, asr r9
     a9c:	564e006e 	strbpl	r0, [lr], -lr, rrx
     aa0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     aa4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     aa8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     aac:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
     ab0:	6f697250 	svcvs	0x00697250
     ab4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     ab8:	41535500 	cmpmi	r3, r0, lsl #10
     abc:	5f325452 	svcpl	0x00325452
     ac0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ac4:	61735500 	cmnvs	r3, r0, lsl #10
     ac8:	61466567 	cmpvs	r6, r7, ror #10
     acc:	5f746c75 	svcpl	0x00746c75
     ad0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ad4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     ad8:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     adc:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
     ae0:	5f31414d 	svcpl	0x0031414d
     ae4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
     ae8:	5f376d61 	svcpl	0x00376d61
     aec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     af0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     af4:	6f4d5f4f 	svcvs	0x004d5f4f
     af8:	4f5f6564 	svcmi	0x005f6564
     afc:	47005455 	smlsdmi	r0, r5, r4, r5
     b00:	5f4f4950 	svcpl	0x004f4950
     b04:	64507550 	ldrbvs	r7, [r0], #-1360	; 0x550
     b08:	59524300 	ldmdbpl	r2, {r8, r9, lr}^
     b0c:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     b10:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
     b14:	5f374d49 	svcpl	0x00374d49
     b18:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b1c:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     b20:	5f53485f 	svcpl	0x0053485f
     b24:	5f315045 	svcpl	0x00315045
     b28:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     b2c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b30:	4d6e6f4e 	stclmi	15, cr6, [lr, #-312]!	; 0xfffffec8
     b34:	616b7361 	cmnvs	fp, r1, ror #6
     b38:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     b3c:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     b40:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b44:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     b48:	67697254 			; <UNDEFINED> instruction: 0x67697254
     b4c:	5f726567 	svcpl	0x00726567
     b50:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     b54:	00666544 	rsbeq	r6, r6, r4, asr #10
     b58:	4f495047 	svcmi	0x00495047
     b5c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; b64 <_Min_Stack_Size+0x764>
     b60:	58450065 	stmdapl	r5, {r0, r2, r5, r6}^
     b64:	495f4954 	ldmdbmi	pc, {r2, r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
     b68:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
     b6c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     b70:	45006665 	strmi	r6, [r0, #-1637]	; 0x665
     b74:	5f495458 	svcpl	0x00495458
     b78:	67697254 			; <UNDEFINED> instruction: 0x67697254
     b7c:	5f726567 	svcpl	0x00726567
     b80:	69736952 	ldmdbvs	r3!, {r1, r4, r6, r8, fp, sp, lr}^
     b84:	5400676e 	strpl	r6, [r0], #-1902	; 0x76e
     b88:	5f504d41 	svcpl	0x00504d41
     b8c:	4d415453 	cfstrdmi	mvd5, [r1, #-332]	; 0xfffffeb4
     b90:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     b94:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
     b98:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     b9c:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     ba0:	5f726f74 	svcpl	0x00726f74
     ba4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ba8:	414d4400 	cmpmi	sp, r0, lsl #8
     bac:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xf32
     bb0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     bb4:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     bb8:	42006e51 	andmi	r6, r0, #1296	; 0x510
     bbc:	4c525253 	lfmmi	f5, 2, [r2], {83}	; 0x53
     bc0:	41535500 	cmpmi	r3, r0, lsl #10
     bc4:	5f335452 	svcpl	0x00335452
     bc8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     bcc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     bd0:	544f5f4f 	strbpl	r5, [pc], #-3919	; bd8 <_Min_Stack_Size+0x7d8>
     bd4:	5f657079 	svcpl	0x00657079
     bd8:	5400444f 	strpl	r4, [r0], #-1103	; 0x44f
     bdc:	5f324d49 	svcpl	0x00324d49
     be0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     be4:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     be8:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
     bec:	006e5152 	rsbeq	r5, lr, r2, asr r1
     bf0:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     bf4:	50470048 	subpl	r0, r7, r8, asr #32
     bf8:	505f4f49 	subspl	r4, pc, r9, asr #30
     bfc:	5f645075 	svcpl	0x00645075
     c00:	4e574f44 	cdpmi	15, 5, cr4, cr7, cr4, {2}
     c04:	4d434400 	cfstrdmi	mvd4, [r3, #-0]
     c08:	52495f49 	subpl	r5, r9, #292	; 0x124
     c0c:	55006e51 	strpl	r6, [r0, #-3665]	; 0xe51
     c10:	37545241 	ldrbcc	r5, [r4, -r1, asr #4]
     c14:	5152495f 	cmppl	r2, pc, asr r9
     c18:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     c1c:	4d5f4954 	ldclmi	9, cr4, [pc, #-336]	; ad4 <_Min_Stack_Size+0x6d4>
     c20:	5f65646f 	svcpl	0x0065646f
     c24:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     c28:	50470074 	subpl	r0, r7, r4, ror r0
     c2c:	505f4f49 	subspl	r4, pc, r9, asr #30
     c30:	5f645075 	svcpl	0x00645075
     c34:	46005055 			; <UNDEFINED> instruction: 0x46005055
     c38:	495f5550 	ldmdbmi	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
     c3c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c40:	4f495047 	svcmi	0x00495047
     c44:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     c48:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     c4c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     c50:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
     c54:	4d4f4950 	stclmi	9, cr4, [pc, #-320]	; b1c <_Min_Stack_Size+0x71c>
     c58:	5f65646f 	svcpl	0x0065646f
     c5c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     c60:	00666544 	rsbeq	r6, r6, r4, asr #10
     c64:	31433249 	cmpcc	r3, r9, asr #4
     c68:	5f52455f 	svcpl	0x0052455f
     c6c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c70:	43444100 	movtmi	r4, #16640	; 0x4100
     c74:	5152495f 	cmppl	r2, pc, asr r9
     c78:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     c7c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     c80:	61657274 	smcvs	22308	; 0x5724
     c84:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     c88:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c8c:	4f495047 	svcmi	0x00495047
     c90:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     c94:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     c98:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     c9c:	625f6572 	subsvs	r6, pc, #478150656	; 0x1c800000
     ca0:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     ca4:	4143006e 	cmpmi	r3, lr, rrx
     ca8:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
     cac:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     cb0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cb4:	4349564e 	movtmi	r5, #38478	; 0x964e
     cb8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     cbc:	50470074 	subpl	r0, r7, r4, ror r0
     cc0:	485f4f49 	ldmdami	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     cc4:	5f686769 	svcpl	0x00686769
     cc8:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     ccc:	41430064 	cmpmi	r3, r4, rrx
     cd0:	535f314e 	cmppl	pc, #-2147483629	; 0x80000013
     cd4:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     cd8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     cdc:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     ce0:	4543535f 	strbmi	r5, [r3, #-863]	; 0x35f
     ce4:	5152495f 	cmppl	r2, pc, asr r9
     ce8:	4352006e 	cmpmi	r2, #110	; 0x6e
     cec:	52495f43 	subpl	r5, r9, #268	; 0x10c
     cf0:	4f006e51 	svcmi	0x00006e51
     cf4:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     cf8:	4b575f53 	blmi	15d8a4c <_Min_Stack_Size+0x15d864c>
     cfc:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     d00:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d04:	334d4954 	movtcc	r4, #55636	; 0xd954
     d08:	5152495f 	cmppl	r2, pc, asr r9
     d0c:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     d10:	5f314954 	svcpl	0x00314954
     d14:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d18:	414d4400 	cmpmi	sp, r0, lsl #8
     d1c:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
     d20:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     d24:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     d28:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     d2c:	00524241 	subseq	r4, r2, r1, asr #4
     d30:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     d34:	5f6b6369 	svcpl	0x006b6369
     d38:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     d3c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     d40:	564e0065 	strbpl	r0, [lr], -r5, rrx
     d44:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     d48:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     d4c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     d50:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
     d54:	505f4349 	subspl	r4, pc, r9, asr #6
     d58:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     d5c:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
     d60:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     d64:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     d68:	00657270 	rsbeq	r7, r5, r0, ror r2
     d6c:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
     d70:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
     d74:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     d78:	54530065 	ldrbpl	r0, [r3], #-101	; 0x65
     d7c:	52005249 	andpl	r5, r0, #-1879048188	; 0x90000004
     d80:	56524553 			; <UNDEFINED> instruction: 0x56524553
     d84:	00314445 	eorseq	r4, r1, r5, asr #8
     d88:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     d8c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     d90:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
     d94:	63655674 	cmnvs	r5, #116, 12	; 0x7400000
     d98:	54726f74 	ldrbtpl	r6, [r2], #-3956	; 0xf74
     d9c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     da0:	50434900 	subpl	r4, r3, r0, lsl #18
     da4:	41430052 	qdaddmi	r0, r2, r3
     da8:	0042494c 	subeq	r4, r2, ip, asr #18
     dac:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
     db0:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     db4:	00627573 	rsbeq	r7, r2, r3, ror r5
     db8:	4349564e 	movtmi	r5, #38478	; 0x964e
     dbc:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
     dc0:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464	; 0xfffffe30
     dc4:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
     dc8:	00676966 	rsbeq	r6, r7, r6, ror #18
     dcc:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     dd0:	5f6b6369 	svcpl	0x006b6369
     dd4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     dd8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     ddc:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     de0:	00676966 	rsbeq	r6, r7, r6, ror #18
     de4:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     de8:	5f6b6369 	svcpl	0x006b6369
     dec:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     df0:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     df4:	6f697270 	svcvs	0x00697270
     df8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     dfc:	50534900 	subspl	r4, r3, r0, lsl #18
     e00:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
     e04:	545f4349 	ldrbpl	r4, [pc], #-841	; e0c <_Min_Stack_Size+0xa0c>
     e08:	00657079 	rsbeq	r7, r5, r9, ror r0
     e0c:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     e10:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; d04 <_Min_Stack_Size+0x904>
     e14:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     e18:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     e1c:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; d0c <_Min_Stack_Size+0x90c>
     e20:	61726269 	cmnvs	r2, r9, ror #4
     e24:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     e28:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     e2c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     e30:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     e34:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     e38:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e3c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     e40:	2f726576 	svccs	0x00726576
     e44:	2f637273 	svccs	0x00637273
     e48:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
     e4c:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
     e50:	5f434956 	svcpl	0x00434956
     e54:	74636556 	strbtvc	r6, [r3], #-1366	; 0x556
     e58:	00626154 	rsbeq	r6, r2, r4, asr r1
     e5c:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     e60:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
     e64:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     e68:	646f4d72 	strbtvs	r4, [pc], #-3442	; e70 <_Min_Stack_Size+0xa70>
     e6c:	564e0065 	strbpl	r0, [lr], -r5, rrx
     e70:	505f4349 	subspl	r4, pc, r9, asr #6
     e74:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     e78:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
     e7c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     e80:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     e84:	70006769 	andvc	r6, r0, r9, ror #14
     e88:	6f706e69 	svcvs	0x00706e69
     e8c:	69420073 	stmdbvs	r2, {r0, r1, r4, r5, r6}^
     e90:	45535f74 	ldrbmi	r5, [r3, #-3956]	; 0xf74
     e94:	50470054 	subpl	r0, r7, r4, asr r0
     e98:	525f4f49 	subspl	r4, pc, #292	; 0x124
     e9c:	4f646165 	svcmi	0x00646165
     ea0:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
     ea4:	74614474 	strbtvc	r4, [r1], #-1140	; 0x474
     ea8:	50470061 	subpl	r0, r7, r1, rrx
     eac:	415f4f49 	cmpmi	pc, r9, asr #30
     eb0:	65740046 	ldrbvs	r0, [r4, #-70]!	; 0x46
     eb4:	4700706d 	strmi	r7, [r0, -sp, rrx]
     eb8:	5f4f4950 	svcpl	0x004f4950
     ebc:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     ec0:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     ec4:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
     ec8:	61567469 	cmpvs	r6, r9, ror #8
     ecc:	6942006c 	stmdbvs	r2, {r2, r3, r5, r6}^
     ed0:	45525f74 	ldrbmi	r5, [r2, #-3956]	; 0xf74
     ed4:	00544553 	subseq	r4, r4, r3, asr r5
     ed8:	4f495047 	svcmi	0x00495047
     edc:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     ee0:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
     ee4:	50470074 	subpl	r0, r7, r4, ror r0
     ee8:	535f4f49 	cmppl	pc, #292	; 0x124
     eec:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
     ef0:	47007374 	smlsdxmi	r0, r4, r3, r7
     ef4:	5f4f4950 	svcpl	0x004f4950
     ef8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     efc:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
     f00:	50470073 	subpl	r0, r7, r3, ror r0
     f04:	445f4f49 	ldrbmi	r4, [pc], #-3913	; f0c <_Min_Stack_Size+0xb0c>
     f08:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     f0c:	50470074 	subpl	r0, r7, r4, ror r0
     f10:	525f4f49 	subspl	r4, pc, #292	; 0x124
     f14:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     f18:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0x6e
     f1c:	61746144 	cmnvs	r4, r4, asr #2
     f20:	00746942 	rsbseq	r6, r4, r2, asr #18
     f24:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     f28:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; e1c <_Min_Stack_Size+0xa1c>
     f2c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     f30:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     f34:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; e24 <_Min_Stack_Size+0xa24>
     f38:	61726269 	cmnvs	r2, r9, ror #4
     f3c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     f40:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     f44:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     f48:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     f4c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     f50:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     f54:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     f58:	2f726576 	svccs	0x00726576
     f5c:	2f637273 	svccs	0x00637273
     f60:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     f64:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     f68:	70675f78 	rsbvc	r5, r7, r8, ror pc
     f6c:	632e6f69 	teqvs	lr, #420	; 0x1a4
     f70:	74696200 	strbtvc	r6, [r9], #-512	; 0x200
     f74:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
     f78:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
     f7c:	415f4343 	cmpmi	pc, r3, asr #6
     f80:	50314248 	eorspl	r4, r1, r8, asr #4
     f84:	70697265 	rsbvc	r7, r9, r5, ror #4
     f88:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     f8c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     f90:	50470064 	subpl	r0, r7, r4, rrx
     f94:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     f98:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     f9c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     fa0:	6f500074 	svcvs	0x00500074
     fa4:	61567472 	cmpvs	r6, r2, ror r4
     fa8:	5047006c 	subpl	r0, r7, ip, rrx
     fac:	505f4f49 	subspl	r4, pc, r9, asr #30
     fb0:	6f536e69 	svcvs	0x00536e69
     fb4:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     fb8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     fbc:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
     fc0:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
     fc4:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
     fc8:	00617461 	rsbeq	r7, r1, r1, ror #8
     fcc:	4f495047 	svcmi	0x00495047
     fd0:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     fd4:	6b636f4c 	blvs	18dcd0c <_Min_Stack_Size+0x18dc90c>
     fd8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     fdc:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
     fe0:	63417469 	movtvs	r7, #5225	; 0x1469
     fe4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     fe8:	72756300 	rsbsvc	r6, r5, #0, 6
     fec:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     ff0:	006e6970 	rsbeq	r6, lr, r0, ror r9
     ff4:	4f495047 	svcmi	0x00495047
     ff8:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     ffc:	47006574 	smlsdxmi	r0, r4, r5, r6
    1000:	5f4f4950 	svcpl	0x004f4950
    1004:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
    1008:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
    100c:	74007374 	strvc	r7, [r0], #-884	; 0x374
    1010:	5f706d65 	svcpl	0x00706d65
    1014:	50470032 	subpl	r0, r7, r2, lsr r0
    1018:	505f4f49 	subspl	r4, pc, r9, asr #30
    101c:	46416e69 	strbmi	r6, [r1], -r9, ror #28
    1020:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1024:	47006769 	strmi	r6, [r0, -r9, ror #14]
    1028:	5f4f4950 	svcpl	0x004f4950
    102c:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    1030:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1034:	61447475 	hvcvs	18245	; 0x4745
    1038:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    103c:	43520074 	cmpmi	r2, #116	; 0x74
    1040:	43485f43 	movtmi	r5, #36675	; 0x8f43
    1044:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
    1048:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    104c:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
    1050:	505f4343 	subspl	r4, pc, r3, asr #6
    1054:	41534c4c 	cmpmi	r3, ip, asr #24
    1058:	646d4349 	strbtvs	r4, [sp], #-841	; 0x349
    105c:	43435200 	movtmi	r5, #12800	; 0x3200
    1060:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1064:	44494153 	strbmi	r4, [r9], #-339	; 0x153
    1068:	00517669 	subseq	r7, r1, r9, ror #12
    106c:	5f434352 	svcpl	0x00434352
    1070:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1074:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
    1078:	73005276 	movwvc	r5, #630	; 0x276
    107c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1080:	67657273 			; <UNDEFINED> instruction: 0x67657273
    1084:	53595300 	cmppl	r9, #0, 6
    1088:	5f4b4c43 	svcpl	0x004b4c43
    108c:	71657246 	cmnvc	r5, r6, asr #4
    1090:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    1094:	43520079 	cmpmi	r2, #121	; 0x79
    1098:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    109c:	6f53314f 	svcvs	0x0053314f
    10a0:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    10a4:	43435200 	movtmi	r5, #12800	; 0x3200
    10a8:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    10ac:	72655031 	rsbvc	r5, r5, #49	; 0x31
    10b0:	52687069 	rsbpl	r7, r8, #105	; 0x69
    10b4:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    10b8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    10bc:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
    10c0:	43435200 	movtmi	r5, #12800	; 0x3200
    10c4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    10c8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    10cc:	6c434941 	mcrrvs	9, 4, r4, r3, cr1
    10d0:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
    10d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    10d8:	50006769 	andpl	r6, r0, r9, ror #14
    10dc:	00504c4c 	subseq	r4, r0, ip, asr #24
    10e0:	514c4c50 	cmppl	ip, r0, asr ip
    10e4:	43435200 	movtmi	r5, #12800	; 0x3200
    10e8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    10ec:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    10f0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    10f4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    10f8:	50007469 	andpl	r7, r0, r9, ror #8
    10fc:	004d4c4c 	subeq	r4, sp, ip, asr #24
    1100:	5f434352 	svcpl	0x00434352
    1104:	31424841 	cmpcc	r2, r1, asr #16
    1108:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    110c:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
    1110:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1114:	6b636f6c 	blvs	18dcecc <_Min_Stack_Size+0x18dcacc>
    1118:	43520073 	cmpmi	r2, #115	; 0x73
    111c:	50415f43 	subpl	r5, r1, r3, asr #30
    1120:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
    1124:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1128:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    112c:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    1130:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1134:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1138:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    113c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1140:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1144:	43435200 	movtmi	r5, #12800	; 0x3200
    1148:	0054495f 	subseq	r4, r4, pc, asr r9
    114c:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    1150:	50006765 	andpl	r6, r0, r5, ror #14
    1154:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    1158:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    115c:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1160:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    1164:	415f4343 	cmpmi	pc, r3, asr #6
    1168:	50324248 	eorspl	r4, r2, r8, asr #4
    116c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1170:	6f6c4368 	svcvs	0x006c4368
    1174:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    1178:	43520064 	cmpmi	r2, #100	; 0x64
    117c:	43505f43 	cmpmi	r0, #268	; 0x10c
    1180:	43314b4c 	teqmi	r1, #76, 22	; 0x13000
    1184:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1188:	43520067 	cmpmi	r2, #103	; 0x67
    118c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1190:	65503342 	ldrbvs	r3, [r0, #-834]	; 0x342
    1194:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1198:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    119c:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
    11a0:	43435200 	movtmi	r5, #12800	; 0x3200
    11a4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    11a8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    11ac:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
    11b0:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    11b4:	00676966 	rsbeq	r6, r7, r6, ror #18
    11b8:	5f434352 	svcpl	0x00434352
    11bc:	4b4c4348 	blmi	1311ee4 <_Min_Stack_Size+0x1311ae4>
    11c0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    11c4:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    11c8:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    11cc:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    11d0:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    11d4:	00676966 	rsbeq	r6, r7, r6, ror #18
    11d8:	5f434352 	svcpl	0x00434352
    11dc:	4345534c 	movtmi	r5, #21324	; 0x534c
    11e0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    11e4:	43520067 	cmpmi	r2, #103	; 0x67
    11e8:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
    11ec:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
    11f0:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
    11f4:	756b6361 	strbvc	r6, [fp, #-865]!	; 0x361
    11f8:	73655270 	cmnvc	r5, #112, 4
    11fc:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1200:	72450064 	subvc	r0, r5, #100	; 0x64
    1204:	53726f72 	cmnpl	r2, #456	; 0x1c8
    1208:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    120c:	43520073 	cmpmi	r2, #115	; 0x73
    1210:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1214:	756f534c 	strbvc	r5, [pc, #-844]!	; ed0 <_Min_Stack_Size+0xad0>
    1218:	00656372 	rsbeq	r6, r5, r2, ror r3
    121c:	5f434352 	svcpl	0x00434352
    1220:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    1224:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1228:	756f534b 	strbvc	r5, [pc, #-843]!	; ee5 <_Min_Stack_Size+0xae5>
    122c:	00656372 	rsbeq	r6, r5, r2, ror r3
    1230:	5f434352 	svcpl	0x00434352
    1234:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    1238:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    123c:	74534553 	ldrbvc	r4, [r3], #-1363	; 0x553
    1240:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0x261
    1244:	43480070 	movtmi	r0, #32880	; 0x8070
    1248:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    124c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0x572
    1250:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1254:	43435200 	movtmi	r5, #12800	; 0x3200
    1258:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    125c:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1260:	00687069 	rsbeq	r7, r8, r9, rrx
    1264:	5f434352 	svcpl	0x00434352
    1268:	43435452 	movtmi	r5, #13394	; 0x3452
    126c:	6f434b4c 	svcvs	0x00434b4c
    1270:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1274:	43435200 	movtmi	r5, #12800	; 0x3200
    1278:	4f434d5f 	svcmi	0x00434d5f
    127c:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    1280:	00676966 	rsbeq	r6, r7, r6, ror #18
    1284:	5f434352 	svcpl	0x00434352
    1288:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    128c:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
    1290:	505f4343 	subspl	r4, pc, r3, asr #6
    1294:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1298:	646d4353 	strbtvs	r4, [sp], #-851	; 0x353
    129c:	65727000 	ldrbvs	r7, [r2, #-0]!
    12a0:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
    12a4:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    12a8:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    12ac:	756f534b 	strbvc	r5, [pc, #-843]!	; f69 <_Min_Stack_Size+0xb69>
    12b0:	00656372 	rsbeq	r6, r5, r2, ror r3
    12b4:	5f434352 	svcpl	0x00434352
    12b8:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
    12bc:	6b636f6c 	blvs	18dd074 <_Min_Stack_Size+0x18dcc74>
    12c0:	4b4c4341 	blmi	1311fcc <_Min_Stack_Size+0x1311bcc>
    12c4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    12c8:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    12cc:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    12d0:	6c424941 	mcrrvs	9, 4, r4, r2, cr1
    12d4:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
    12d8:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    12dc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    12e0:	43520065 	cmpmi	r2, #101	; 0x65
    12e4:	544c5f43 	strbpl	r5, [ip], #-3907	; 0xf43
    12e8:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
    12ec:	7669444b 	strbtvc	r4, [r9], -fp, asr #8
    12f0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    12f4:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    12f8:	415f4343 	cmpmi	pc, r3, asr #6
    12fc:	50324248 	eorspl	r4, r2, r8, asr #4
    1300:	70697265 	rsbvc	r7, r9, r5, ror #4
    1304:	6f6c4368 	svcvs	0x006c4368
    1308:	504c6b63 	subpl	r6, ip, r3, ror #22
    130c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1310:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1314:	5f434352 	svcpl	0x00434352
    1318:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    131c:	6f435332 	svcvs	0x00435332
    1320:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1324:	43435200 	movtmi	r5, #12800	; 0x3200
    1328:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
    132c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1330:	5f434352 	svcpl	0x00434352
    1334:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    1338:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    133c:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
    1340:	415f4343 	cmpmi	pc, r3, asr #6
    1344:	50334248 	eorspl	r4, r3, r8, asr #4
    1348:	70697265 	rsbvc	r7, r9, r5, ror #4
    134c:	43520068 	cmpmi	r2, #104	; 0x68
    1350:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    1354:	6944324f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r9, ip, sp}^
    1358:	43520076 	cmpmi	r2, #118	; 0x76
    135c:	41535f43 	cmpmi	r3, r3, asr #30
    1360:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
    1364:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1368:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
    136c:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
    1370:	00676966 	rsbeq	r6, r7, r6, ror #18
    1374:	5f434352 	svcpl	0x00434352
    1378:	43435452 	movtmi	r5, #13394	; 0x3452
    137c:	6d434b4c 	vstrvs	d20, [r3, #-304]	; 0xfffffed0
    1380:	52450064 	subpl	r0, r5, #100	; 0x64
    1384:	00524f52 	subseq	r4, r2, r2, asr pc
    1388:	5f434352 	svcpl	0x00434352
    138c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1390:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
    1394:	74697275 	strbtvc	r7, [r9], #-629	; 0x275
    1398:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
    139c:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
    13a0:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    13a4:	505f4343 	subspl	r4, pc, r3, asr #6
    13a8:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    13ac:	76694453 			; <UNDEFINED> instruction: 0x76694453
    13b0:	43520051 	cmpmi	r2, #81	; 0x51
    13b4:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    13b8:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    13bc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    13c0:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    13c4:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 12c0 <_Min_Stack_Size+0xec0>
    13c8:	44314f43 	ldrtmi	r4, [r1], #-3907	; 0xf43
    13cc:	52007669 	andpl	r7, r0, #110100480	; 0x6900000
    13d0:	415f4343 	cmpmi	pc, r3, asr #6
    13d4:	50324250 	eorspl	r4, r2, r0, asr r2
    13d8:	70697265 	rsbvc	r7, r9, r5, ror #4
    13dc:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    13e0:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    13e4:	43520064 	cmpmi	r2, #100	; 0x64
    13e8:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    13ec:	6f53324f 	svcvs	0x0053324f
    13f0:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    13f4:	43435200 	movtmi	r5, #12800	; 0x3200
    13f8:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    13fc:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1400:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1404:	43520065 	cmpmi	r2, #101	; 0x65
    1408:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    140c:	616c4674 	smcvs	50276	; 0xc464
    1410:	61745367 	cmnvs	r4, r7, ror #6
    1414:	00737574 	rsbseq	r7, r3, r4, ror r5
    1418:	5f434352 	svcpl	0x00434352
    141c:	43455348 	movtmi	r5, #21320	; 0x5348
    1420:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1424:	43520067 	cmpmi	r2, #103	; 0x67
    1428:	41535f43 	cmpmi	r3, r3, asr #30
    142c:	6f6c4249 	svcvs	0x006c4249
    1430:	43426b63 	movtmi	r6, #11107	; 0x2b63
    1434:	6f434b4c 	svcvs	0x00434b4c
    1438:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    143c:	4c4c5000 	marmi	acc0, r5, ip
    1440:	4e494153 	mcrmi	1, 2, r4, cr9, cr3, {2}
    1444:	4c4c5000 	marmi	acc0, r5, ip
    1448:	51494153 	cmppl	r9, r3, asr r1
    144c:	4c4c5000 	marmi	acc0, r5, ip
    1450:	52494153 	subpl	r4, r9, #-1073741804	; 0xc0000014
    1454:	43435200 	movtmi	r5, #12800	; 0x3200
    1458:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    145c:	504b4c43 	subpl	r4, fp, r3, asr #24
    1460:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1464:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1468:	43435200 	movtmi	r5, #12800	; 0x3200
    146c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1470:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1474:	5f434352 	svcpl	0x00434352
    1478:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    147c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1480:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0x870
    1484:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1488:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    148c:	415f4343 	cmpmi	pc, r3, asr #6
    1490:	50314250 	eorspl	r4, r1, r0, asr r2
    1494:	70697265 	rsbvc	r7, r9, r5, ror #4
    1498:	6f6c4368 	svcvs	0x006c4368
    149c:	504c6b63 	subpl	r6, ip, r3, ror #22
    14a0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    14a4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    14a8:	5f434352 	svcpl	0x00434352
    14ac:	4b4c4350 	blmi	13121f4 <_Min_Stack_Size+0x1311df4>
    14b0:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    14b4:	00676966 	rsbeq	r6, r7, r6, ror #18
    14b8:	5f434352 	svcpl	0x00434352
    14bc:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    14c0:	6f534b4c 	svcvs	0x00534b4c
    14c4:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    14c8:	43435200 	movtmi	r5, #12800	; 0x3200
    14cc:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0x85f
    14d0:	4c435000 	marmi	acc0, r5, r3
    14d4:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
    14d8:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0x572
    14dc:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    14e0:	42504100 	subsmi	r4, r0, #0, 2
    14e4:	50424841 	subpl	r4, r2, r1, asr #16
    14e8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    14ec:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    14f0:	43520065 	cmpmi	r2, #101	; 0x65
    14f4:	64415f43 	strbvs	r5, [r1], #-3907	; 0xf43
    14f8:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0x56a
    14fc:	43495348 	movtmi	r5, #37704	; 0x9348
    1500:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    1504:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1508:	61566e6f 	cmpvs	r6, pc, ror #28
    150c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1510:	73657368 	cmnvc	r5, #104, 6	; 0xa0000001
    1514:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1518:	4c500073 	mrrcmi	0, 7, r0, r0, cr3	; <UNPREDICTABLE>
    151c:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    1520:	4352004e 	cmpmi	r2, #78	; 0x4e
    1524:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1528:	6f6c4374 	svcvs	0x006c4374
    152c:	46736b63 	ldrbtmi	r6, [r3], -r3, ror #22
    1530:	00716572 	rsbseq	r6, r1, r2, ror r5
    1534:	5f434352 	svcpl	0x00434352
    1538:	32425041 	subcc	r5, r2, #65	; 0x41
    153c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1540:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1544:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1548:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    154c:	445f4343 	ldrbmi	r4, [pc], #-835	; 1554 <_Min_Stack_Size+0x1154>
    1550:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1554:	4c500074 	mrrcmi	0, 7, r0, r0, cr4	; <UNPREDICTABLE>
    1558:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    155c:	4c500051 	mrrcmi	0, 5, r0, r0, cr1	; <UNPREDICTABLE>
    1560:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    1564:	43520052 	cmpmi	r2, #82	; 0x52
    1568:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    156c:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    1570:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1574:	43520073 	cmpmi	r2, #115	; 0x73
    1578:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    157c:	65503342 	ldrbvs	r3, [r0, #-834]	; 0x342
    1580:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1584:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1588:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    158c:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1590:	7300646d 	movwvc	r6, #1133	; 0x46d
    1594:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    1598:	6f637075 	svcvs	0x00637075
    159c:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    15a0:	43520072 	cmpmi	r2, #114	; 0x72
    15a4:	50415f43 	subpl	r5, r1, r3, asr #30
    15a8:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
    15ac:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    15b0:	43435200 	movtmi	r5, #12800	; 0x3200
    15b4:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    15b8:	504b4c43 	subpl	r4, fp, r3, asr #24
    15bc:	43736572 	cmnmi	r3, #478150656	; 0x1c800000
    15c0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    15c4:	43520067 	cmpmi	r2, #103	; 0x67
    15c8:	32495f43 	subcc	r5, r9, #268	; 0x10c
    15cc:	4b4c4353 	blmi	1312320 <_Min_Stack_Size+0x1311f20>
    15d0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    15d4:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    15d8:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 14d4 <_Min_Stack_Size+0x10d4>
    15dc:	43324f43 	teqmi	r2, #268	; 0x10c
    15e0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    15e4:	43520067 	cmpmi	r2, #103	; 0x67
    15e8:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    15ec:	646d4349 	strbtvs	r4, [sp], #-841	; 0x349
    15f0:	43435200 	movtmi	r5, #12800	; 0x3200
    15f4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    15f8:	72655031 	rsbvc	r5, r5, #49	; 0x31
    15fc:	43687069 	cmnmi	r8, #105	; 0x69
    1600:	6b636f6c 	blvs	18dd3b8 <_Min_Stack_Size+0x18dcfb8>
    1604:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1608:	5f434352 	svcpl	0x00434352
    160c:	6f435449 	svcvs	0x00435449
    1610:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1614:	524f4300 	subpl	r4, pc, #0, 6
    1618:	5f584554 	svcpl	0x00584554
    161c:	5f46344d 	svcpl	0x0046344d
    1620:	334d5453 	movtcc	r5, #54355	; 0xd453
    1624:	2f344632 	svccs	0x00344632
    1628:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    162c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1630:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    1634:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1638:	5f787834 	svcpl	0x00787834
    163c:	50647453 	rsbpl	r7, r4, r3, asr r4
    1640:	70697265 	rsbvc	r7, r9, r5, ror #4
    1644:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1648:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    164c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1650:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1654:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1658:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    165c:	632e6363 	teqvs	lr, #-1946157055	; 0x8c000001
    1660:	43555300 	cmpmi	r5, #0, 6
    1664:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    1668:	43435200 	movtmi	r5, #12800	; 0x3200
    166c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1670:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1674:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1678:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    167c:	6b636f6c 	blvs	18dd434 <_Min_Stack_Size+0x18dd034>
    1680:	70795473 	rsbsvc	r5, r9, r3, ror r4
    1684:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1688:	43435200 	movtmi	r5, #12800	; 0x3200
    168c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1690:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1694:	43687069 	cmnmi	r8, #105	; 0x69
    1698:	6b636f6c 	blvs	18dd450 <_Min_Stack_Size+0x18dd050>
    169c:	6f4d504c 	svcvs	0x004d504c
    16a0:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    16a4:	43520064 	cmpmi	r2, #100	; 0x64
    16a8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    16ac:	65503342 	ldrbvs	r3, [r0, #-834]	; 0x342
    16b0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    16b4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    16b8:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
    16bc:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
    16c0:	72656765 	rsbvc	r6, r5, #26476544	; 0x1940000
    16c4:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    16c8:	00726564 	rsbseq	r6, r2, r4, ror #10
    16cc:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    16d0:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 15c4 <_Min_Stack_Size+0x11c4>
    16d4:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    16d8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    16dc:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 15cc <_Min_Stack_Size+0x11cc>
    16e0:	61726269 	cmnvs	r2, r9, ror #4
    16e4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    16e8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    16ec:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    16f0:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    16f4:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    16f8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    16fc:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1700:	2f726576 	svccs	0x00726576
    1704:	2f637273 	svccs	0x00637273
    1708:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    170c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1710:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    1714:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1718:	53550063 	cmppl	r5, #99	; 0x63
    171c:	5f545241 	svcpl	0x00545241
    1720:	41485043 	cmpmi	r8, r3, asr #32
    1724:	50544700 	subspl	r4, r4, r0, lsl #14
    1728:	53550052 	cmppl	r5, #82	; 0x52
    172c:	5f545241 	svcpl	0x00545241
    1730:	65636552 	strbvs	r6, [r3, #-1362]!	; 0x552
    1734:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1738:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    173c:	6d437055 	stclvs	0, cr7, [r3, #-340]	; 0xfffffeac
    1740:	53550064 	cmppl	r5, #100	; 0x64
    1744:	5f545241 	svcpl	0x00545241
    1748:	50746553 	rsbspl	r6, r4, r3, asr r5
    174c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1750:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1754:	41535500 	cmpmi	r3, r0, lsl #10
    1758:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    175c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1760:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1764:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    1768:	6572424e 	ldrbvs	r4, [r2, #-590]!	; 0x24e
    176c:	65446b61 	strbvs	r6, [r4, #-2913]	; 0xb61
    1770:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    1774:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    1778:	55006874 	strpl	r6, [r0, #-2164]	; 0x874
    177c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1780:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1784:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1788:	41535500 	cmpmi	r3, r0, lsl #10
    178c:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1790:	42706f74 	rsbsmi	r6, r0, #116, 30	; 0x1d0
    1794:	00737469 	rsbseq	r7, r3, r9, ror #8
    1798:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    179c:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    17a0:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    17a4:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    17a8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    17ac:	55006665 	strpl	r6, [r0, #-1637]	; 0x665
    17b0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    17b4:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    17b8:	41535500 	cmpmi	r3, r0, lsl #10
    17bc:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    17c0:	44646e65 	strbtmi	r6, [r4], #-3685	; 0xe65
    17c4:	00617461 	rsbeq	r7, r1, r1, ror #8
    17c8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    17cc:	54495f54 	strbpl	r5, [r9], #-3924	; 0xf54
    17d0:	41535500 	cmpmi	r3, r0, lsl #10
    17d4:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    17d8:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    17dc:	53550070 	cmppl	r5, #112	; 0x70
    17e0:	5f545241 	svcpl	0x00545241
    17e4:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
    17e8:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    17ec:	55006874 	strpl	r6, [r0, #-2164]	; 0x874
    17f0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    17f4:	414d445f 	cmpmi	sp, pc, asr r4
    17f8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    17fc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1800:	614c5f54 	cmpvs	ip, r4, asr pc
    1804:	69427473 	stmdbvs	r2, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1808:	53550074 	cmppl	r5, #116	; 0x74
    180c:	5f545241 	svcpl	0x00545241
    1810:	64756142 	ldrbtvs	r6, [r5], #-322	; 0x142
    1814:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0x152
    1818:	41535500 	cmpmi	r3, r0, lsl #10
    181c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1820:	4d414472 	cfstrdmi	mvd4, [r1, #-456]	; 0xfffffe38
    1824:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1828:	63627061 	cmnvs	r2, #97	; 0x61
    182c:	6b636f6c 	blvs	18dd5e4 <_Min_Stack_Size+0x18dd1e4>
    1830:	41535500 	cmpmi	r3, r0, lsl #10
    1834:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1838:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    183c:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    1840:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1844:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    1848:	41535500 	cmpmi	r3, r0, lsl #10
    184c:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
    1850:	64726175 	ldrbtvs	r6, [r2], #-373	; 0x175
    1854:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1858:	41535500 	cmpmi	r3, r0, lsl #10
    185c:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    1860:	72424e49 	subvc	r4, r2, #1168	; 0x490
    1864:	446b6165 	strbtmi	r6, [fp], #-357	; 0x165
    1868:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    186c:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    1870:	43687467 	cmnmi	r8, #1728053248	; 0x67000000
    1874:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1878:	53550067 	cmppl	r5, #103	; 0x67
    187c:	5f545241 	svcpl	0x00545241
    1880:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    1884:	41535500 	cmpmi	r3, r0, lsl #10
    1888:	445f5452 	ldrbmi	r5, [pc], #-1106	; 1890 <_Min_Stack_Size+0x1490>
    188c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1890:	53550074 	cmppl	r5, #116	; 0x74
    1894:	5f545241 	svcpl	0x00545241
    1898:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    189c:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    18a0:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    18a4:	00746375 	rsbseq	r6, r4, r5, ror r3
    18a8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    18ac:	61505f54 	cmpvs	r0, r4, asr pc
    18b0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    18b4:	41535500 	cmpmi	r3, r0, lsl #10
    18b8:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    18bc:	6b636f6c 	blvs	18dd674 <_Min_Stack_Size+0x18dd274>
    18c0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    18c4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    18c8:	75007469 	strvc	r7, [r0, #-1129]	; 0x469
    18cc:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    18d0:	73616278 	cmnvc	r1, #120, 4	; 0x80000007
    18d4:	53550065 	cmppl	r5, #101	; 0x65
    18d8:	5f545241 	svcpl	0x00545241
    18dc:	61656c43 	cmnvs	r5, r3, asr #24
    18e0:	616c4672 	smcvs	50274	; 0xc462
    18e4:	53550067 	cmppl	r5, #103	; 0x67
    18e8:	5f545241 	svcpl	0x00545241
    18ec:	41746553 	cmnmi	r4, r3, asr r5
    18f0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    18f4:	55007373 	strpl	r7, [r0, #-883]	; 0x373
    18f8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    18fc:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    1900:	72617547 	rsbvc	r7, r1, #297795584	; 0x11c00000
    1904:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    1908:	53550065 	cmppl	r5, #101	; 0x65
    190c:	5f545241 	svcpl	0x00545241
    1910:	646e6553 	strbtvs	r6, [lr], #-1363	; 0x553
    1914:	61657242 	cmnvs	r5, r2, asr #4
    1918:	5355006b 	cmppl	r5, #107	; 0x6b
    191c:	5f545241 	svcpl	0x00545241
    1920:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1924:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1928:	00666544 	rsbeq	r6, r6, r4, asr #10
    192c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1930:	54495f54 	strbpl	r5, [r9], #-3924	; 0xf54
    1934:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1938:	55006769 	strpl	r6, [r0, #-1897]	; 0x769
    193c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1940:	414d445f 	cmpmi	sp, pc, asr r4
    1944:	00716552 	rsbseq	r6, r1, r2, asr r5
    1948:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    194c:	55007854 	strpl	r7, [r0, #-2132]	; 0x854
    1950:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1954:	656e4f5f 	strbvs	r4, [lr, #-3935]!	; 0xf5f
    1958:	4d746942 	ldclmi	9, cr6, [r4, #-264]!	; 0xfffffef8
    195c:	6f687465 	svcvs	0x00687465
    1960:	646d4364 	strbtvs	r4, [sp], #-868	; 0x364
    1964:	41535500 	cmpmi	r3, r0, lsl #10
    1968:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    196c:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
    1970:	46657261 	strbtmi	r7, [r5], -r1, ror #4
    1974:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
    1978:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    197c:	55006c6f 	strpl	r6, [r0, #-3183]	; 0xc6f
    1980:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1984:	616d535f 	cmnvs	sp, pc, asr r3
    1988:	61437472 	hvcvs	14146	; 0x3742
    198c:	6d436472 	cfstrdvs	mvd6, [r3, #-456]	; 0xfffffe38
    1990:	53550064 	cmppl	r5, #100	; 0x64
    1994:	5f545241 	svcpl	0x00545241
    1998:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    199c:	41535500 	cmpmi	r3, r0, lsl #10
    19a0:	415f5452 	cmpmi	pc, r2, asr r4	; <UNPREDICTABLE>
    19a4:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    19a8:	62007373 	andvs	r7, r0, #-872415231	; 0xcc000001
    19ac:	6f707469 	svcvs	0x00707469
    19b0:	53550073 	cmppl	r5, #115	; 0x73
    19b4:	5f545241 	svcpl	0x00545241
    19b8:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    19bc:	706d6153 	rsbvc	r6, sp, r3, asr r1
    19c0:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    19c4:	646d4338 	strbtvs	r4, [sp], #-824	; 0x338
    19c8:	41535500 	cmpmi	r3, r0, lsl #10
    19cc:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
    19d0:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    19d4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    19d8:	55007375 	strpl	r7, [r0, #-885]	; 0x375
    19dc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    19e0:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    19e4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    19e8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    19ec:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    19f0:	6f434144 	svcvs	0x00434144
    19f4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    19f8:	41535500 	cmpmi	r3, r0, lsl #10
    19fc:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1a00:	6b636f6c 	blvs	18dd7b8 <_Min_Stack_Size+0x18dd3b8>
    1a04:	41535500 	cmpmi	r3, r0, lsl #10
    1a08:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1a0c:	43414472 	movtmi	r4, #5234	; 0x1472
    1a10:	6600646d 	strvs	r6, [r0], -sp, ror #8
    1a14:	74636172 	strbtvc	r6, [r3], #-370	; 0x172
    1a18:	616e6f69 	cmnvs	lr, r9, ror #30
    1a1c:	7669646c 	strbtvc	r6, [r9], -ip, ror #8
    1a20:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    1a24:	41535500 	cmpmi	r3, r0, lsl #10
    1a28:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1a2c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0x16d
    1a30:	64726143 	ldrbtvs	r6, [r2], #-323	; 0x143
    1a34:	4b43414e 	blmi	10d1f74 <_Min_Stack_Size+0x10d1b74>
    1a38:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1a3c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a40:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xf54
    1a44:	616c4674 	smcvs	50276	; 0xc464
    1a48:	61745367 	cmnvs	r4, r7, ror #6
    1a4c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1a50:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a54:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    1a58:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1a5c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    1a60:	43435200 	movtmi	r5, #12800	; 0x3200
    1a64:	6f6c435f 	svcvs	0x006c435f
    1a68:	53736b63 	cmnpl	r3, #101376	; 0x18c00
    1a6c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1a70:	53550073 	cmppl	r5, #115	; 0x73
    1a74:	5f545241 	svcpl	0x00545241
    1a78:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1a7c:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    1a80:	53550074 	cmppl	r5, #116	; 0x74
    1a84:	5f545241 	svcpl	0x00545241
    1a88:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    1a8c:	6f437055 	svcvs	0x00437055
    1a90:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1a94:	41535500 	cmpmi	r3, r0, lsl #10
    1a98:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1a9c:	44666c61 	strbtmi	r6, [r6], #-3169	; 0xc61
    1aa0:	656c7075 	strbvs	r7, [ip, #-117]!	; 0x75
    1aa4:	646d4378 	strbtvs	r4, [sp], #-888	; 0x378
    1aa8:	41535500 	cmpmi	r3, r0, lsl #10
    1aac:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1ab0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1ab4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1ab8:	53550074 	cmppl	r5, #116	; 0x74
    1abc:	5f545241 	svcpl	0x00545241
    1ac0:	73657250 	cmnvc	r5, #80, 4
    1ac4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    1ac8:	53550072 	cmppl	r5, #114	; 0x72
    1acc:	5f545241 	svcpl	0x00545241
    1ad0:	4c4f5043 	mcrrmi	0, 4, r5, pc, cr3
    1ad4:	6d746900 	ldclvs	9, cr6, [r4, #-0]
    1ad8:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1adc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1ae0:	65525f54 	ldrbvs	r5, [r2, #-3924]	; 0xf54
    1ae4:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    1ae8:	74614465 	strbtvc	r4, [r1], #-1125	; 0x465
    1aec:	73750061 	cmnvc	r5, #97	; 0x61
    1af0:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
    1af4:	53006765 	movwpl	r6, #1893	; 0x765
    1af8:	46435359 			; <UNDEFINED> instruction: 0x46435359
    1afc:	6f435f47 	svcvs	0x00435f47
    1b00:	6e65706d 	cdpvs	0, 6, cr7, cr5, cr13, {3}
    1b04:	69746173 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, sp, lr}^
    1b08:	65436e6f 	strbvs	r6, [r3, #-3695]	; 0xe6f
    1b0c:	6d436c6c 	stclvs	12, cr6, [r3, #-432]	; 0xfffffe50
    1b10:	59530064 	ldmdbpl	r3, {r2, r5, r6}^
    1b14:	47464353 	smlsldmi	r4, r6, r3, r3
    1b18:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1b1c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    1b20:	61736e65 	cmnvs	r3, r5, ror #28
    1b24:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1b28:	6c6c6543 	cfstr64vs	mvdx6, [ip], #-268	; 0xfffffef4
    1b2c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1b30:	43007375 	movwmi	r7, #885	; 0x375
    1b34:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    1b38:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    1b3c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    1b40:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1b44:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    1b48:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1b4c:	2f736569 	svccs	0x00736569
    1b50:	334d5453 	movtcc	r5, #54355	; 0xd453
    1b54:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    1b58:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    1b5c:	72655064 	rsbvc	r5, r5, #100	; 0x64
    1b60:	5f687069 	svcpl	0x00687069
    1b64:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1b68:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    1b6c:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    1b70:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1b74:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1b78:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1b7c:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    1b80:	4d430063 	stclmi	0, cr0, [r3, #-396]	; 0xfffffe74
    1b84:	00524350 	subseq	r4, r2, r0, asr r3
    1b88:	524d454d 	subpl	r4, sp, #322961408	; 0x13400000
    1b8c:	5300504d 	movwpl	r5, #77	; 0x4d
    1b90:	46435359 			; <UNDEFINED> instruction: 0x46435359
    1b94:	54455f47 	strbpl	r5, [r5], #-3911	; 0xf47
    1b98:	654d5f48 	strbvs	r5, [sp, #-3912]	; 0xf48
    1b9c:	49616964 	stmdbmi	r1!, {r2, r5, r6, r8, fp, sp, lr}^
    1ba0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1ba4:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    1ba8:	53455200 	movtpl	r5, #20992	; 0x5200
    1bac:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    1bb0:	59530044 	ldmdbpl	r3, {r2, r6}^
    1bb4:	47464353 	smlsldmi	r4, r6, r3, r3
    1bb8:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    1bbc:	5379726f 	cmnpl	r9, #-268435450	; 0xf0000006
    1bc0:	70706177 	rsbsvc	r6, r0, r7, ror r1
    1bc4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1bc8:	006b6e61 	rsbeq	r6, fp, r1, ror #28
    1bcc:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1bd0:	45005243 	strmi	r5, [r0, #-579]	; 0x243
    1bd4:	5f495458 	svcpl	0x00495458
    1bd8:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    1bdc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1be0:	53007865 	movwpl	r7, #2149	; 0x865
    1be4:	46435359 			; <UNDEFINED> instruction: 0x46435359
    1be8:	54455f47 	strbpl	r5, [r5], #-3911	; 0xf47
    1bec:	654d5f48 	strbvs	r5, [sp, #-3912]	; 0xf48
    1bf0:	49616964 	stmdbmi	r1!, {r2, r5, r6, r8, fp, sp, lr}^
    1bf4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1bf8:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    1bfc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1c00:	53006769 	movwpl	r6, #1897	; 0x769
    1c04:	46435359 			; <UNDEFINED> instruction: 0x46435359
    1c08:	654d5f47 	strbvs	r5, [sp, #-3911]	; 0xf47
    1c0c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1c10:	616d6552 	cmnvs	sp, r2, asr r5
    1c14:	59530070 	ldmdbpl	r3, {r4, r5, r6}^
    1c18:	47464353 	smlsldmi	r4, r6, r3, r3
    1c1c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1c20:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1c24:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    1c28:	6f505f49 	svcvs	0x00505f49
    1c2c:	6f537472 	svcvs	0x00537472
    1c30:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    1c34:	4f495047 	svcmi	0x00495047
    1c38:	59530078 	ldmdbpl	r3, {r3, r4, r5, r6}^
    1c3c:	47464353 	smlsldmi	r4, r6, r3, r3
    1c40:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1c44:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1c48:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1c4c:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 1b3c <_Min_Stack_Size+0x173c>
    1c50:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1c54:	6d655279 	sfmvs	f5, 2, [r5, #-484]!	; 0xfffffe1c
    1c58:	6f437061 	svcvs	0x00437061
    1c5c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c60:	43324900 	teqmi	r2, #0, 18
    1c64:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    1c68:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    1c6c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1c70:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1c74:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1c78:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    1c7c:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    1c80:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    1c84:	54524154 	ldrbpl	r4, [r2], #-340	; 0x154
    1c88:	43324900 	teqmi	r2, #0, 18
    1c8c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1c90:	00434550 	subeq	r4, r3, r0, asr r5
    1c94:	5f433249 	svcpl	0x00433249
    1c98:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    1c9c:	43686374 	cmnmi	r8, #116, 6	; 0xd0000001
    1ca0:	6b636f6c 	blvs	18dda58 <_Min_Stack_Size+0x18dd658>
    1ca4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1ca8:	5f433249 	svcpl	0x00433249
    1cac:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    1cb0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1cb4:	49525400 	ldmdbmi	r2, {sl, ip, lr}^
    1cb8:	49004553 	stmdbmi	r0, {r0, r1, r4, r6, r8, sl, lr}
    1cbc:	495f4332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, lr}^	; <UNPREDICTABLE>
    1cc0:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    1cc4:	00676966 	rsbeq	r6, r7, r6, ror #18
    1cc8:	5f433249 	svcpl	0x00433249
    1ccc:	4b43414e 	blmi	10d220c <_Min_Stack_Size+0x10d1e0c>
    1cd0:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    1cd4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1cd8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1cdc:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1ce0:	4f5f4332 	svcmi	0x005f4332
    1ce4:	64416e77 	strbvs	r6, [r1], #-3703	; 0xe77
    1ce8:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1cec:	6f433273 	svcvs	0x00433273
    1cf0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1cf4:	43324900 	teqmi	r2, #0, 18
    1cf8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1cfc:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1d00:	00746375 	rsbseq	r6, r4, r5, ror r3
    1d04:	71657266 	cmnvc	r5, r6, ror #4
    1d08:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
    1d0c:	32490065 	subcc	r0, r9, #101	; 0x65
    1d10:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
    1d14:	6144646e 	cmpvs	r4, lr, ror #8
    1d18:	49006174 	stmdbmi	r0, {r2, r4, r5, r6, r8, sp, lr}
    1d1c:	435f4332 	cmpmi	pc, #-939524096	; 0xc8000000
    1d20:	75636c61 	strbvc	r6, [r3, #-3169]!	; 0xc61
    1d24:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    1d28:	00434550 	subeq	r4, r3, r0, asr r5
    1d2c:	5f433249 	svcpl	0x00433249
    1d30:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1d34:	6570536b 	ldrbvs	r5, [r0, #-875]!	; 0x36b
    1d38:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
    1d3c:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 1c7c <_Min_Stack_Size+0x187c>
    1d40:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1d44:	5f433249 	svcpl	0x00433249
    1d48:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1d4c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1d50:	4f007469 	svcmi	0x00007469
    1d54:	00315241 	eorseq	r5, r1, r1, asr #4
    1d58:	52544c46 	subspl	r4, r4, #17920	; 0x4600
    1d5c:	43324900 	teqmi	r2, #0, 18
    1d60:	414d445f 	cmpmi	sp, pc, asr r4
    1d64:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
    1d68:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    1d6c:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    1d70:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1d74:	5f433249 	svcpl	0x00433249
    1d78:	75424d53 	strbvc	r4, [r2, #-3411]	; 0xd53
    1d7c:	656c4173 	strbvs	r4, [ip, #-371]!	; 0x173
    1d80:	6f437472 	svcvs	0x00437472
    1d84:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1d88:	43324900 	teqmi	r2, #0, 18
    1d8c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1d90:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1d94:	43324900 	teqmi	r2, #0, 18
    1d98:	6769445f 			; <UNDEFINED> instruction: 0x6769445f
    1d9c:	6c617469 	cfstrdvs	mvd7, [r1], #-420	; 0xfffffe5c
    1da0:	746c6946 	strbtvc	r6, [ip], #-2374	; 0x946
    1da4:	6f437265 	svcvs	0x00437265
    1da8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1dac:	43324900 	teqmi	r2, #0, 18
    1db0:	4345505f 	movtmi	r5, #20575	; 0x505f
    1db4:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    1db8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1dbc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1dc0:	66006769 	strvs	r6, [r0], -r9, ror #14
    1dc4:	7067616c 	rsbvc	r6, r7, ip, ror #2
    1dc8:	4900736f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
    1dcc:	495f4332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, lr}^	; <UNPREDICTABLE>
    1dd0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1dd4:	5f433249 	svcpl	0x00433249
    1dd8:	43505241 	cmpmi	r0, #268435460	; 0x10000004
    1ddc:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    1de0:	445f4332 	ldrbmi	r4, [pc], #-818	; 1de8 <_Min_Stack_Size+0x19e8>
    1de4:	43797475 	cmnmi	r9, #1962934272	; 0x75000000
    1de8:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    1dec:	63326900 	teqvs	r2, #0, 18
    1df0:	00676572 	rsbeq	r6, r7, r2, ror r5
    1df4:	5f433249 	svcpl	0x00433249
    1df8:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    1dfc:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xd73
    1e00:	00434550 	subeq	r4, r3, r0, asr r5
    1e04:	5f433249 	svcpl	0x00433249
    1e08:	75424d53 	strbvc	r4, [r2, #-3411]	; 0xd53
    1e0c:	656c4173 	strbvs	r4, [ip, #-371]!	; 0x173
    1e10:	49007472 	stmdbmi	r0, {r1, r4, r5, r6, sl, ip, sp, lr}
    1e14:	00784332 	rsbseq	r4, r8, r2, lsr r3
    1e18:	5f433249 	svcpl	0x00433249
    1e1c:	65726944 	ldrbvs	r6, [r2, #-2372]!	; 0x944
    1e20:	6f697463 	svcvs	0x00697463
    1e24:	3249006e 	subcc	r0, r9, #110	; 0x6e
    1e28:	414e5f43 	cmpmi	lr, r3, asr #30
    1e2c:	6f504b43 	svcvs	0x00504b43
    1e30:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    1e34:	49006e6f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    1e38:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    1e3c:	614c7465 	cmpvs	ip, r5, ror #8
    1e40:	76457473 			; <UNDEFINED> instruction: 0x76457473
    1e44:	00746e65 	rsbseq	r6, r4, r5, ror #28
    1e48:	5f433249 	svcpl	0x00433249
    1e4c:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    1e50:	43324900 	teqmi	r2, #0, 18
    1e54:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1e58:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1e5c:	5f433249 	svcpl	0x00433249
    1e60:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
    1e64:	436c6172 	cmnmi	ip, #-2147483620	; 0x8000001c
    1e68:	436c6c61 	cmnmi	ip, #24832	; 0x6100
    1e6c:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    1e70:	435f4332 	cmpmi	pc, #-939524096	; 0xc8000000
    1e74:	6b636568 	blvs	18db41c <_Min_Stack_Size+0x18db01c>
    1e78:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    1e7c:	32490074 	subcc	r0, r9, #116	; 0x74
    1e80:	4d445f43 	stclmi	15, cr5, [r4, #-268]	; 0xfffffef4
    1e84:	646d4341 	strbtvs	r4, [sp], #-833	; 0x341
    1e88:	43324900 	teqmi	r2, #0, 18
    1e8c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1e90:	70795474 	rsbsvc	r5, r9, r4, ror r4
    1e94:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1e98:	43324900 	teqmi	r2, #0, 18
    1e9c:	0054495f 	subseq	r4, r4, pc, asr r9
    1ea0:	6b6c6370 	blvs	1b1ac68 <_Min_Stack_Size+0x1b1a868>
    1ea4:	32490031 	subcc	r0, r9, #49	; 0x31
    1ea8:	6d435f43 	stclvs	15, cr5, [r3, #-268]	; 0xfffffef4
    1eac:	45520064 	ldrbmi	r0, [r2, #-100]	; 0x64
    1eb0:	56524553 			; <UNDEFINED> instruction: 0x56524553
    1eb4:	00374445 	eorseq	r4, r7, r5, asr #8
    1eb8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1ebc:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    1ec0:	45520038 	ldrbmi	r0, [r2, #-56]	; 0x38
    1ec4:	56524553 			; <UNDEFINED> instruction: 0x56524553
    1ec8:	00394445 	eorseq	r4, r9, r5, asr #8
    1ecc:	5f433249 	svcpl	0x00433249
    1ed0:	416e774f 	cmnmi	lr, pc, asr #14
    1ed4:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1ed8:	00317373 	eorseq	r7, r1, r3, ror r3
    1edc:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    1ee0:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 1dd4 <_Min_Stack_Size+0x19d4>
    1ee4:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    1ee8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1eec:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 1ddc <_Min_Stack_Size+0x19dc>
    1ef0:	61726269 	cmnvs	r2, r9, ror #4
    1ef4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1ef8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1efc:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1f00:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1f04:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    1f08:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1f0c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1f10:	2f726576 	svccs	0x00726576
    1f14:	2f637273 	svccs	0x00637273
    1f18:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1f1c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1f20:	32695f78 	rsbcc	r5, r9, #120, 30	; 0x1e0
    1f24:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1f28:	5f636372 	svcpl	0x00636372
    1f2c:	636f6c63 	cmnvs	pc, #25344	; 0x6300
    1f30:	4900736b 	stmdbmi	r0, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}
    1f34:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    1f38:	49006b63 	stmdbmi	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1f3c:	455f4332 	ldrbmi	r4, [pc, #-818]	; 1c12 <_Min_Stack_Size+0x1812>
    1f40:	544e4556 	strbpl	r4, [lr], #-1366	; 0x556
    1f44:	43324900 	teqmi	r2, #0, 18
    1f48:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    1f4c:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    1f50:	61746144 	cmnvs	r4, r4, asr #2
    1f54:	43324900 	teqmi	r2, #0, 18
    1f58:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    1f5c:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    1f60:	49006761 	stmdbmi	r0, {r0, r5, r6, r8, r9, sl, sp, lr}
    1f64:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    1f68:	6f6e6b63 	svcvs	0x006e6b63
    1f6c:	64656c77 	strbtvs	r6, [r5], #-3191	; 0xc77
    1f70:	41646567 	cmnmi	r4, r7, ror #10
    1f74:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1f78:	49007373 	stmdbmi	r0, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
    1f7c:	525f4332 	subspl	r4, pc, #-939524096	; 0xc8000000
    1f80:	52646165 	rsbpl	r6, r4, #1073741849	; 0x40000019
    1f84:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    1f88:	00726574 	rsbseq	r6, r2, r4, ror r5
    1f8c:	5f433249 	svcpl	0x00433249
    1f90:	74736146 	ldrbtvc	r6, [r3], #-326	; 0x146
    1f94:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1f98:	79747544 	ldmdbvc	r4!, {r2, r6, r8, sl, ip, sp, lr}^
    1f9c:	6c637943 	stclvs	9, cr7, [r3], #-268	; 0xfffffef4
    1fa0:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1fa4:	00676966 	rsbeq	r6, r7, r6, ror #18
    1fa8:	5f433249 	svcpl	0x00433249
    1fac:	6c617544 	cfstr64vs	mvdx7, [r1], #-272	; 0xfffffef0
    1fb0:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1fb4:	43737365 	cmnmi	r3, #-1811939327	; 0x94000001
    1fb8:	6600646d 	strvs	r6, [r0], -sp, ror #8
    1fbc:	3167616c 	cmncc	r7, ip, ror #2
    1fc0:	616c6600 	cmnvs	ip, r0, lsl #12
    1fc4:	65003267 	strvs	r3, [r0, #-615]	; 0x267
    1fc8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1fcc:	61747365 	cmnvs	r4, r5, ror #6
    1fd0:	00737574 	rsbseq	r7, r3, r4, ror r5
    1fd4:	5f433249 	svcpl	0x00433249
    1fd8:	6e6b6341 	cdpvs	3, 6, cr6, cr11, cr1, {2}
    1fdc:	656c776f 	strbvs	r7, [ip, #-1903]!	; 0x76f
    1fe0:	43656764 	cmnmi	r5, #100, 14	; 0x1900000
    1fe4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1fe8:	32490067 	subcc	r0, r9, #103	; 0x67
    1fec:	45505f43 	ldrbmi	r5, [r0, #-3907]	; 0xf43
    1ff0:	736f5043 	cmnvc	pc, #67	; 0x43
    1ff4:	6f697469 	svcvs	0x00697469
    1ff8:	3249006e 	subcc	r0, r9, #110	; 0x6e
    1ffc:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2000:	616c4674 	smcvs	50276	; 0xc464
    2004:	61745367 	cmnvs	r4, r7, ror #6
    2008:	00737574 	rsbseq	r7, r3, r4, ror r5
    200c:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0x16c
    2010:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    2014:	32490074 	subcc	r0, r9, #116	; 0x74
    2018:	6f535f43 	svcvs	0x00535f43
    201c:	61777466 	cmnvs	r7, r6, ror #8
    2020:	65526572 	ldrbvs	r6, [r2, #-1394]	; 0x572
    2024:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    2028:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    202c:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    2030:	37646e65 	strbcc	r6, [r4, -r5, ror #28]!
    2034:	41746962 	cmnmi	r4, r2, ror #18
    2038:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    203c:	69007373 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
    2040:	62786332 	rsbsvs	r6, r8, #-939524096	; 0xc8000000
    2044:	00657361 	rsbeq	r7, r5, r1, ror #6
    2048:	3252414f 	subscc	r4, r2, #-1073741805	; 0xc0000013
    204c:	43324900 	teqmi	r2, #0, 18
    2050:	6769445f 			; <UNDEFINED> instruction: 0x6769445f
    2054:	6c617469 	cfstrdvs	mvd7, [r1], #-420	; 0xfffffe5c
    2058:	746c6946 	strbtvc	r6, [ip], #-2374	; 0x946
    205c:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    2060:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    2064:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    2068:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    206c:	00504f54 	subseq	r4, r0, r4, asr pc
    2070:	5f433249 	svcpl	0x00433249
    2074:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    2078:	61745354 	cmnvs	r4, r4, asr r3
    207c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2080:	5f433249 	svcpl	0x00433249
    2084:	6c616e41 	stclvs	14, cr6, [r1], #-260	; 0xfffffefc
    2088:	6946676f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    208c:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    2090:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2094:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0x572
    2098:	4400746c 	strmi	r7, [r0], #-1132	; 0x46c
    209c:	435f414d 	cmpmi	pc, #1073741843	; 0x40000013
    20a0:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    20a4:	654d746e 	strbvs	r7, [sp, #-1134]	; 0x46e
    20a8:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    20ac:	414d4400 	cmpmi	sp, r0, lsl #8
    20b0:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    20b4:	414d4400 	cmpmi	sp, r0, lsl #8
    20b8:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    20bc:	5f6d6165 	svcpl	0x006d6165
    20c0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    20c4:	00666544 	rsbeq	r6, r6, r4, asr #10
    20c8:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    20cc:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    20d0:	72505f41 	subsvc	r5, r0, #260	; 0x104
    20d4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    20d8:	44007974 	strmi	r7, [r0], #-2420	; 0x974
    20dc:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 1fb0 <_Min_Stack_Size+0x1bb0>
    20e0:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    20e4:	72754279 	rsbsvc	r4, r5, #-1879048185	; 0x90000007
    20e8:	44007473 	strmi	r7, [r0], #-1139	; 0x473
    20ec:	535f414d 	cmppl	pc, #1073741843	; 0x40000013
    20f0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    20f4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    20f8:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    20fc:	65505f41 	ldrbvs	r5, [r0, #-3905]	; 0xf41
    2100:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2104:	6c617265 	sfmvs	f7, 2, [r1], #-404	; 0xfffffe6c
    2108:	73727542 	cmnvc	r2, #276824064	; 0x10800000
    210c:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    2110:	65475f41 	strbvs	r5, [r7, #-3905]	; 0xf41
    2114:	46494674 			; <UNDEFINED> instruction: 0x46494674
    2118:	6174534f 	cmnvs	r4, pc, asr #6
    211c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2120:	5f414d44 	svcpl	0x00414d44
    2124:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2128:	00666544 	rsbeq	r6, r6, r4, asr #10
    212c:	5f414d44 	svcpl	0x00414d44
    2130:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2134:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    2138:	654d746e 	strbvs	r7, [sp, #-1134]	; 0x46e
    213c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2140:	67726154 			; <UNDEFINED> instruction: 0x67726154
    2144:	44007465 	strmi	r7, [r0], #-1125	; 0x465
    2148:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 201c <_Min_Stack_Size+0x1c1c>
    214c:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    2150:	72615479 	rsbvc	r5, r1, #2030043136	; 0x79000000
    2154:	00746567 	rsbseq	r6, r4, r7, ror #10
    2158:	79414d44 	stmdbvc	r1, {r2, r6, r8, sl, fp, lr}^
    215c:	414d4400 	cmpmi	sp, r0, lsl #8
    2160:	74535f79 	ldrbvc	r5, [r3], #-3961	; 0xf79
    2164:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    2168:	4d440078 	stclmi	0, cr0, [r4, #-480]	; 0xfffffe20
    216c:	49445f41 	stmdbmi	r4, {r0, r6, r8, r9, sl, fp, ip, lr}^
    2170:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    2174:	65505f41 	ldrbvs	r5, [r0, #-3905]	; 0xf41
    2178:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    217c:	6c617265 	sfmvs	f7, 2, [r1], #-404	; 0xfffffe6c
    2180:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    2184:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2188:	414d4400 	cmpmi	sp, r0, lsl #8
    218c:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    2190:	4979726f 	ldmdbmi	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    2194:	4400636e 	strmi	r6, [r0], #-878	; 0x36e
    2198:	465f414d 	ldrbmi	r4, [pc], -sp, asr #2
    219c:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
    21a0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    21a4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xc6f
    21a8:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    21ac:	00676966 	rsbeq	r6, r7, r6, ror #18
    21b0:	5f414d44 	svcpl	0x00414d44
    21b4:	6f6d654d 	svcvs	0x006d654d
    21b8:	61547972 	cmpvs	r4, r2, ror r9
    21bc:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
    21c0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    21c4:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    21c8:	505f414d 	subspl	r4, pc, sp, asr #2
    21cc:	70697265 	rsbvc	r7, r9, r5, ror #4
    21d0:	61726568 	cmnvs	r2, r8, ror #10
    21d4:	636e496c 	cmnvs	lr, #108, 18	; 0x1b0000
    21d8:	414d4400 	cmpmi	sp, r0, lsl #8
    21dc:	756f445f 	strbvc	r4, [pc, #-1119]!	; 1d85 <_Min_Stack_Size+0x1985>
    21e0:	42656c62 	rsbmi	r6, r5, #25088	; 0x6200
    21e4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    21e8:	646f4d72 	strbtvs	r4, [pc], #-3442	; 21f0 <_Min_Stack_Size+0x1df0>
    21ec:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
    21f0:	414d4400 	cmpmi	sp, r0, lsl #8
    21f4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    21f8:	494c0074 	stmdbmi	ip, {r2, r4, r5, r6}^
    21fc:	44005253 	strmi	r5, [r0], #-595	; 0x253
    2200:	435f414d 	cmpmi	pc, #1073741843	; 0x40000013
    2204:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2208:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    220c:	414d4400 	cmpmi	sp, r0, lsl #8
    2210:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    2214:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    2218:	61746144 	cmnvs	r4, r4, asr #2
    221c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2220:	00726574 	rsbseq	r6, r2, r4, ror r5
    2224:	5f414d44 	svcpl	0x00414d44
    2228:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    222c:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
    2230:	61446c61 	cmpvs	r4, r1, ror #24
    2234:	69536174 	ldmdbvs	r3, {r2, r4, r5, r6, r8, sp, lr}^
    2238:	4400657a 	strmi	r6, [r0], #-1402	; 0x57a
    223c:	495f414d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, lr}^	; <UNPREDICTABLE>
    2240:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    2244:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    2248:	44006665 	strmi	r6, [r0], #-1637	; 0x665
    224c:	425f414d 	subsmi	r4, pc, #1073741843	; 0x40000013
    2250:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    2254:	7a695372 	bvc	1a57024 <_Min_Stack_Size+0x1a56c24>
    2258:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    225c:	6f445f41 	svcvs	0x00445f41
    2260:	656c6275 	strbvs	r6, [ip, #-629]!	; 0x275
    2264:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    2268:	6f4d7265 	svcvs	0x004d7265
    226c:	6f436564 	svcvs	0x00436564
    2270:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2274:	414d4400 	cmpmi	sp, r0, lsl #8
    2278:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
    227c:	7268544f 	rsbvc	r5, r8, #1325400064	; 0x4f000000
    2280:	6f687365 	svcvs	0x00687365
    2284:	4400646c 	strmi	r6, [r0], #-1132	; 0x46c
    2288:	475f414d 	ldrbmi	r4, [pc, -sp, asr #2]
    228c:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    2290:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    2294:	48007375 	stmdami	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    2298:	00525349 	subseq	r5, r2, r9, asr #6
    229c:	5f414d44 	svcpl	0x00414d44
    22a0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    22a4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    22a8:	44007463 	strmi	r7, [r0], #-1123	; 0x463
    22ac:	505f414d 	subspl	r4, pc, sp, asr #2
    22b0:	6f636e69 	svcvs	0x00636e69
    22b4:	314d0073 	hvccc	53251	; 0xd003
    22b8:	44005241 	strmi	r5, [r0], #-577	; 0x241
    22bc:	465f414d 	ldrbmi	r4, [pc], -sp, asr #2
    22c0:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
    22c4:	006c7274 	rsbeq	r7, ip, r4, ror r2
    22c8:	5f414d44 	svcpl	0x00414d44
    22cc:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    22d0:	414d4400 	cmpmi	sp, r0, lsl #8
    22d4:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    22d8:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    22dc:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    22e0:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    22e4:	44007469 	strmi	r7, [r0], #-1129	; 0x469
    22e8:	505f414d 	subspl	r4, pc, sp, asr #2
    22ec:	70697265 	rsbvc	r7, r9, r5, ror #4
    22f0:	636e4968 	cmnvs	lr, #104, 18	; 0x1a0000
    22f4:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    22f8:	69537465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    22fc:	6f43657a 	svcvs	0x0043657a
    2300:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2304:	414d4400 	cmpmi	sp, r0, lsl #8
    2308:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    230c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2310:	5f414d44 	svcpl	0x00414d44
    2314:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2318:	5367616c 	cmnpl	r7, #108, 2
    231c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2320:	494c0073 	stmdbmi	ip, {r0, r1, r4, r5, r6}^
    2324:	00524346 	subseq	r4, r2, r6, asr #6
    2328:	5241304d 	subpl	r3, r1, #77	; 0x4d
    232c:	54444e00 	strbpl	r4, [r4], #-3584	; 0xe00
    2330:	654d0052 	strbvs	r0, [sp, #-82]	; 0x52
    2334:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2338:	73614231 	cmnvc	r1, #268435459	; 0x10000003
    233c:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
    2340:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
    2344:	49465f41 	stmdbmi	r6, {r0, r6, r8, r9, sl, fp, ip, lr}^
    2348:	6f4d4f46 	svcvs	0x004d4f46
    234c:	44006564 	strmi	r6, [r0], #-1380	; 0x564
    2350:	475f414d 	ldrbmi	r4, [pc, -sp, asr #2]
    2354:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    2358:	61745364 	cmnvs	r4, r4, ror #6
    235c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2360:	5f414d44 	svcpl	0x00414d44
    2364:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    2368:	006c656e 	rsbeq	r6, ip, lr, ror #10
    236c:	6f6d654d 	svcvs	0x006d654d
    2370:	61427972 	hvcvs	10130	; 0x2792
    2374:	64416573 	strbvs	r6, [r1], #-1395	; 0x573
    2378:	48007264 	stmdami	r0, {r2, r5, r6, r9, ip, sp, lr}
    237c:	52434649 	subpl	r4, r3, #76546048	; 0x4900000
    2380:	414d4400 	cmpmi	sp, r0, lsl #8
    2384:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    2388:	3079726f 	rsbscc	r7, r9, pc, ror #4
    238c:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    2390:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2394:	524f4300 	subpl	r4, pc, #0, 6
    2398:	5f584554 	svcpl	0x00584554
    239c:	5f46344d 	svcpl	0x0046344d
    23a0:	334d5453 	movtcc	r5, #54355	; 0xd453
    23a4:	2f344632 	svccs	0x00344632
    23a8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    23ac:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    23b0:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    23b4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    23b8:	5f787834 	svcpl	0x00787834
    23bc:	50647453 	rsbpl	r7, r4, r3, asr r4
    23c0:	70697265 	rsbvc	r7, r9, r5, ror #4
    23c4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    23c8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    23cc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    23d0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    23d4:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    23d8:	645f7878 	ldrbvs	r7, [pc], #-2168	; 23e0 <_Min_Stack_Size+0x1fe0>
    23dc:	632e616d 	teqvs	lr, #1073741851	; 0x4000001b
    23e0:	414d4400 	cmpmi	sp, r0, lsl #8
    23e4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 23ec <_Min_Stack_Size+0x1fec>
    23e8:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    23ec:	65475f41 	strbvs	r5, [r7, #-3905]	; 0xf41
    23f0:	72754374 	rsbsvc	r4, r5, #116, 6	; 0xd0000001
    23f4:	74614472 	strbtvc	r4, [r1], #-1138	; 0x472
    23f8:	756f4361 	strbvc	r4, [pc, #-865]!	; 209f <_Min_Stack_Size+0x1c9f>
    23fc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2400:	414d4400 	cmpmi	sp, r0, lsl #8
    2404:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    2408:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    240c:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    2410:	54495f41 	strbpl	r5, [r9], #-3905	; 0xf41
    2414:	414d4400 	cmpmi	sp, r0, lsl #8
    2418:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    241c:	4479726f 	ldrbtmi	r7, [r9], #-623	; 0x26f
    2420:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    2424:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2428:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    242c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 2320 <_Min_Stack_Size+0x1f20>
    2430:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2434:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2438:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 2328 <_Min_Stack_Size+0x1f28>
    243c:	61726269 	cmnvs	r2, r9, ror #4
    2440:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2444:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2448:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    244c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    2450:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    2454:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2458:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    245c:	2f726576 	svccs	0x00726576
    2460:	2f637273 	svccs	0x00637273
    2464:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2468:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    246c:	70735f78 	rsbsvc	r5, r3, r8, ror pc
    2470:	00632e69 	rsbeq	r2, r3, r9, ror #28
    2474:	52435852 	subpl	r5, r3, #5373952	; 0x520000
    2478:	70005243 	andvc	r5, r0, r3, asr #4
    247c:	006e6c6c 	rsbeq	r6, lr, ip, ror #24
    2480:	5f495053 	svcpl	0x00495053
    2484:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2488:	6c6c7000 	stclvs	0, cr7, [ip], #-0
    248c:	32490072 	subcc	r0, r9, #114	; 0x72
    2490:	6e495f53 	mcrvs	15, 2, r5, cr9, cr3, {2}
    2494:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2498:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    249c:	43524300 	cmpmi	r2, #0, 6
    24a0:	53005250 	movwpl	r5, #592	; 0x250
    24a4:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    24a8:	495f5332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    24ac:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    24b0:	00676966 	rsbeq	r6, r7, r6, ror #18
    24b4:	5f533249 	svcpl	0x00533249
    24b8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    24bc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    24c0:	00666544 	rsbeq	r6, r6, r4, asr #10
    24c4:	5f495053 	svcpl	0x00495053
    24c8:	5f533249 	svcpl	0x00533249
    24cc:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    24d0:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    24d4:	535f5332 	cmppl	pc, #-939524096	; 0xc8000000
    24d8:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    24dc:	00647261 	rsbeq	r7, r4, r1, ror #4
    24e0:	5f495053 	svcpl	0x00495053
    24e4:	69446942 	stmdbvs	r4, {r1, r6, r8, fp, sp, lr}^
    24e8:	74636572 	strbtvc	r6, [r3], #-1394	; 0x572
    24ec:	616e6f69 	cmnvs	lr, r9, ror #30
    24f0:	6e694c6c 	cdpvs	12, 6, cr4, cr9, cr12, {3}
    24f4:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    24f8:	00676966 	rsbeq	r6, r7, r6, ror #18
    24fc:	5f495053 	svcpl	0x00495053
    2500:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2504:	6f504352 	svcvs	0x00504352
    2508:	6f6e796c 	svcvs	0x006e796c
    250c:	6c61696d 	stclvs	9, cr6, [r1], #-436	; 0xfffffe4c
    2510:	63726300 	cmnvs	r2, #0, 6
    2514:	00676572 	rsbeq	r6, r7, r2, ror r5
    2518:	5f495053 	svcpl	0x00495053
    251c:	5f533249 	svcpl	0x00533249
    2520:	43414d44 	movtmi	r4, #7492	; 0x1d44
    2524:	5300646d 	movwpl	r6, #1133	; 0x46d
    2528:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    252c:	475f5332 	smmlarmi	pc, r2, r3, r5	; <UNPREDICTABLE>
    2530:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    2534:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    2538:	53007375 	movwpl	r7, #885	; 0x375
    253c:	4e5f4950 	mrcmi	9, 2, r4, cr15, cr0, {2}
    2540:	6e495353 	mcrvs	3, 2, r5, cr9, cr3, {2}
    2544:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2548:	6f536c61 	svcvs	0x00536c61
    254c:	61777466 	cmnvs	r7, r6, ror #8
    2550:	6f436572 	svcvs	0x00436572
    2554:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2558:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    255c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    2560:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2564:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2568:	5f495053 	svcpl	0x00495053
    256c:	5f533249 	svcpl	0x00533249
    2570:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2574:	5367616c 	cmnpl	r7, #108, 2
    2578:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    257c:	50530073 	subspl	r0, r3, r3, ror r0
    2580:	53535f49 	cmppl	r3, #292	; 0x124
    2584:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2588:	6d437475 	cfstrdvs	mvd7, [r3, #-468]	; 0xfffffe2c
    258c:	32490064 	subcc	r0, r9, #100	; 0x64
    2590:	78657853 	stmdavc	r5!, {r0, r1, r4, r6, fp, ip, sp, lr}^
    2594:	58540074 	ldmdapl	r4, {r2, r4, r5, r6}^
    2598:	52435243 	subpl	r5, r3, #805306372	; 0x30000004
    259c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    25a0:	7269445f 	rsbvc	r4, r9, #1593835520	; 0x5f000000
    25a4:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    25a8:	53006e6f 	movwpl	r6, #3695	; 0xe6f
    25ac:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    25b0:	53004352 	movwpl	r4, #850	; 0x352
    25b4:	4e5f4950 	mrcmi	9, 2, r4, cr15, cr0, {2}
    25b8:	6e495353 	mcrvs	3, 2, r5, cr9, cr3, {2}
    25bc:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    25c0:	6f536c61 	svcvs	0x00536c61
    25c4:	53007466 	movwpl	r7, #1126	; 0x466
    25c8:	545f4950 	ldrbpl	r4, [pc], #-2384	; 25d0 <_Min_Stack_Size+0x21d0>
    25cc:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    25d0:	4374696d 	cmnmi	r4, #1785856	; 0x1b4000
    25d4:	49004352 	stmdbmi	r0, {r1, r4, r6, r8, r9, lr}
    25d8:	4d5f5332 	ldclmi	3, cr5, [pc, #-200]	; 2518 <_Min_Stack_Size+0x2118>
    25dc:	4f4b4c43 	svcmi	0x004b4c43
    25e0:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    25e4:	50530074 	subspl	r0, r3, r4, ror r0
    25e8:	32495f49 	subcc	r5, r9, #292	; 0x124
    25ec:	4c465f53 	mcrrmi	15, 5, r5, r6, cr3
    25f0:	53004741 	movwpl	r4, #1857	; 0x741
    25f4:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    25f8:	495f5332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    25fc:	50530054 	subspl	r0, r3, r4, asr r0
    2600:	61445f49 	cmpvs	r4, r9, asr #30
    2604:	69536174 	ldmdbvs	r3, {r2, r4, r5, r6, r8, sp, lr}^
    2608:	6f43657a 	svcvs	0x0043657a
    260c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2610:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2614:	4352435f 	cmpmi	r2, #2080374785	; 0x7c000001
    2618:	796c6f50 	stmdbvc	ip!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    261c:	696d6f6e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2620:	49006c61 	stmdbmi	r0, {r0, r5, r6, sl, fp, sp, lr}
    2624:	435f5332 	cmpmi	pc, #-939524096	; 0xc8000000
    2628:	004c4f50 	subeq	r4, ip, r0, asr pc
    262c:	5f495053 	svcpl	0x00495053
    2630:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2634:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2638:	00666544 	rsbeq	r6, r6, r4, asr #10
    263c:	5f495053 	svcpl	0x00495053
    2640:	5f533249 	svcpl	0x00533249
    2644:	52414d44 	subpl	r4, r1, #68, 26	; 0x1100
    2648:	53007165 	movwpl	r7, #357	; 0x165
    264c:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    2650:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2654:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2658:	50530074 	subspl	r0, r3, r4, ror r0
    265c:	49545f49 	ldmdbmi	r4, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    2660:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    2664:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2668:	5f533249 	svcpl	0x00533249
    266c:	61746144 	cmnvs	r4, r4, asr #2
    2670:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
    2674:	49007461 	stmdbmi	r0, {r0, r5, r6, sl, ip, sp, lr}
    2678:	52505332 	subspl	r5, r0, #-939524096	; 0xc8000000
    267c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2680:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    2684:	53324900 	teqpl	r2, #0, 18
    2688:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 2690 <_Min_Stack_Size+0x2290>
    268c:	50530065 	subspl	r0, r3, r5, rrx
    2690:	32495f49 	subcc	r5, r9, #292	; 0x124
    2694:	6c435f53 	mcrrvs	15, 5, r5, r3, cr3
    2698:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    269c:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    26a0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    26a4:	00746942 	rsbseq	r6, r4, r2, asr #18
    26a8:	64733269 	ldrbtvs	r3, [r3], #-617	; 0x269
    26ac:	49007669 	stmdbmi	r0, {r0, r3, r5, r6, r9, sl, ip, sp, lr}
    26b0:	415f5332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    26b4:	6f696475 	svcvs	0x00696475
    26b8:	71657246 	cmnvc	r5, r6, asr #4
    26bc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    26c0:	4f50435f 	svcmi	0x0050435f
    26c4:	3249004c 	subcc	r0, r9, #76	; 0x4c
    26c8:	6d435f53 	stclvs	15, cr5, [r3, #-332]	; 0xfffffeb4
    26cc:	50530064 	subspl	r0, r3, r4, rrx
    26d0:	69465f49 	stmdbvs	r6, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    26d4:	42747372 	rsbsmi	r7, r4, #-939524095	; 0xc8000001
    26d8:	53007469 	movwpl	r7, #1129	; 0x469
    26dc:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    26e0:	00414850 	subeq	r4, r1, r0, asr r8
    26e4:	78495053 	stmdavc	r9, {r0, r1, r4, r6, ip, lr}^
    26e8:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    26ec:	7561425f 	strbvc	r4, [r1, #-607]!	; 0x25f
    26f0:	74615264 	strbtvc	r5, [r1], #-612	; 0x264
    26f4:	65725065 	ldrbvs	r5, [r2, #-101]!	; 0x65
    26f8:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    26fc:	53007265 	movwpl	r7, #613	; 0x265
    2700:	545f4950 	ldrbpl	r4, [pc], #-2384	; 2708 <_Min_Stack_Size+0x2308>
    2704:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    2708:	53006665 	movwpl	r6, #1637	; 0x665
    270c:	4d5f4950 	ldclmi	9, cr4, [pc, #-320]	; 25d4 <_Min_Stack_Size+0x21d4>
    2710:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2714:	5f495053 	svcpl	0x00495053
    2718:	5f533249 	svcpl	0x00533249
    271c:	61656c43 	cmnvs	r5, r3, asr #24
    2720:	616c4672 	smcvs	50274	; 0xc462
    2724:	50530067 	subspl	r0, r3, r7, rrx
    2728:	534e5f49 	movtpl	r5, #61257	; 0xef49
    272c:	50530053 	subspl	r0, r3, r3, asr r0
    2730:	61435f49 	cmpvs	r3, r9, asr #30
    2734:	6c75636c 	ldclvs	3, cr6, [r5], #-432	; 0xfffffe50
    2738:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    273c:	53004352 	movwpl	r4, #850	; 0x352
    2740:	475f4950 			; <UNDEFINED> instruction: 0x475f4950
    2744:	52437465 	subpl	r7, r3, #1694498816	; 0x65000000
    2748:	32490043 	subcc	r0, r9, #67	; 0x43
    274c:	74535f53 	ldrbvc	r5, [r3], #-3923	; 0xf53
    2750:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2754:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2758:	53324900 	teqpl	r2, #0, 18
    275c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2760:	32490074 	subcc	r0, r9, #116	; 0x74
    2764:	75465f53 	strbvc	r5, [r6, #-3923]	; 0xf53
    2768:	75446c6c 	strbvc	r6, [r4, #-3180]	; 0xc6c
    276c:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    2770:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2774:	53006769 	movwpl	r6, #1897	; 0x769
    2778:	445f4950 	ldrbmi	r4, [pc], #-2384	; 2780 <_Min_Stack_Size+0x2380>
    277c:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    2780:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2784:	6f733269 	svcvs	0x00733269
    2788:	70006464 	andvc	r6, r0, r4, ror #8
    278c:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    2790:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
    2794:	00687467 	rsbeq	r7, r8, r7, ror #8
    2798:	5f495053 	svcpl	0x00495053
    279c:	5f533249 	svcpl	0x00533249
    27a0:	646e6553 	strbtvs	r6, [lr], #-1363	; 0x553
    27a4:	61746144 	cmnvs	r4, r4, asr #2
    27a8:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    27ac:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    27b0:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    27b4:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    27b8:	61746144 	cmnvs	r4, r4, asr #2
    27bc:	73326900 	teqvc	r2, #0, 18
    27c0:	006b6c63 	rsbeq	r6, fp, r3, ror #24
    27c4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    27c8:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    27cc:	74617265 	strbtvc	r7, [r1], #-613	; 0x265
    27d0:	49575365 	ldmdbmi	r7, {r0, r2, r5, r6, r8, r9, ip, lr}^
    27d4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    27d8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    27dc:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    27e0:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    27e4:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    27e8:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    27ec:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    27f0:	6c435f49 	mcrrvs	15, 4, r5, r3, cr9
    27f4:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    27f8:	0067616c 	rsbeq	r6, r7, ip, ror #2
    27fc:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    2800:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    2804:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2808:	53545200 	cmppl	r4, #0, 4
    280c:	58450052 	stmdapl	r5, {r1, r4, r6}^
    2810:	535f4954 	cmppl	pc, #84, 18	; 0x150000
    2814:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2818:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    281c:	4f430074 	svcmi	0x00430074
    2820:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2824:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2828:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    282c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2830:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2834:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2838:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    283c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2840:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2844:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2848:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    284c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 2854 <_Min_Stack_Size+0x2454>
    2850:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    2854:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    2858:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    285c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2860:	5f787834 	svcpl	0x00787834
    2864:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    2868:	4500632e 	strmi	r6, [r0, #-814]	; 0x32e
    286c:	5f495458 	svcpl	0x00495458
    2870:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    2874:	61745354 	cmnvs	r4, r4, asr r3
    2878:	00737574 	rsbseq	r7, r3, r4, ror r5
    287c:	52535446 	subspl	r5, r3, #1174405120	; 0x46000000
    2880:	49575300 	ldmdbmi	r7, {r8, r9, ip, lr}^
    2884:	45005245 	strmi	r5, [r0, #-581]	; 0x245
    2888:	5f495458 	svcpl	0x00495458
    288c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    2890:	44007469 	strmi	r7, [r0], #-1129	; 0x469
    2894:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2898:	5347425f 	movtpl	r4, #29279	; 0x725f
    289c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    28a0:	414d4400 	cmpmi	sp, r0, lsl #8
    28a4:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    28a8:	43465047 	movtmi	r5, #24647	; 0x6047
    28ac:	504c415f 	subpl	r4, ip, pc, asr r1
    28b0:	565f4148 	ldrbpl	r4, [pc], -r8, asr #2
    28b4:	45554c41 	ldrbmi	r4, [r5, #-3137]	; 0xc41
    28b8:	414d4400 	cmpmi	sp, r0, lsl #8
    28bc:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    28c0:	6e495f47 	cdpvs	15, 4, cr5, cr9, cr7, {2}
    28c4:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    28c8:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    28cc:	4d440066 	stclmi	0, cr0, [r4, #-408]	; 0xfffffe68
    28d0:	5f443241 	svcpl	0x00443241
    28d4:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    28d8:	6c427475 	cfstrdvs	mvd7, [r2], {117}	; 0x75
    28dc:	44006575 	strmi	r6, [r0], #-1397	; 0x575
    28e0:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    28e4:	4347465f 	movtmi	r4, #30303	; 0x765f
    28e8:	4445525f 	strbmi	r5, [r5], #-607	; 0x25f
    28ec:	414d4400 	cmpmi	sp, r0, lsl #8
    28f0:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    28f4:	61745347 	cmnvs	r4, r7, asr #6
    28f8:	44007472 	strmi	r7, [r0], #-1138	; 0x472
    28fc:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2900:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    2904:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    2908:	44006761 	strmi	r6, [r0], #-1889	; 0x761
    290c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2910:	5f54495f 	svcpl	0x0054495f
    2914:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    2918:	414d4400 	cmpmi	sp, r0, lsl #8
    291c:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    2920:	4c435f47 	mcrrmi	15, 4, r5, r3, cr7
    2924:	435f5455 	cmpmi	pc, #1426063360	; 0x55000000
    2928:	4746004d 	strbmi	r0, [r6, -sp, asr #32]
    292c:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    2930:	414d4400 	cmpmi	sp, r0, lsl #8
    2934:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    2938:	4c435f47 	mcrrmi	15, 4, r5, r3, cr7
    293c:	435f5455 	cmpmi	pc, #1426063360	; 0x55000000
    2940:	4d44004d 	stclmi	0, cr0, [r4, #-308]	; 0xfffffecc
    2944:	5f443241 	svcpl	0x00443241
    2948:	535f4742 	cmppl	pc, #17301504	; 0x1080000
    294c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2950:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2954:	67660074 			; <UNDEFINED> instruction: 0x67660074
    2958:	706c615f 	rsbvc	r6, ip, pc, asr r1
    295c:	61766168 	cmnvs	r6, r8, ror #2
    2960:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2964:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2968:	574c5f44 	strbpl	r5, [ip, -r4, asr #30]
    296c:	72657461 	rsbvc	r7, r5, #1627389952	; 0x61000000
    2970:	6b72616d 	blvs	1c9af2c <_Min_Stack_Size+0x1c9ab2c>
    2974:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2978:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    297c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2980:	5f47425f 	svcpl	0x0047425f
    2984:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2988:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    298c:	44007463 	strmi	r7, [r0], #-1123	; 0x463
    2990:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2994:	4d47465f 	stclmi	6, cr4, [r7, #-380]	; 0xfffffe84
    2998:	4d440041 	stclmi	0, cr0, [r4, #-260]	; 0xfffffefc
    299c:	5f443241 	svcpl	0x00443241
    29a0:	004f4746 	subeq	r4, pc, r6, asr #14
    29a4:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    29a8:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    29ac:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    29b0:	49535f54 	ldmdbmi	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    29b4:	4400455a 	strmi	r4, [r0], #-1370	; 0x55a
    29b8:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    29bc:	4347425f 	movtmi	r4, #29279	; 0x725f
    29c0:	0052414d 	subseq	r4, r2, sp, asr #2
    29c4:	43544d41 	cmpmi	r4, #4160	; 0x1040
    29c8:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    29cc:	5f443241 	svcpl	0x00443241
    29d0:	46504742 	ldrbmi	r4, [r0], -r2, asr #14
    29d4:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
    29d8:	5f414850 	svcpl	0x00414850
    29dc:	554c4156 	strbpl	r4, [ip, #-342]	; 0x156
    29e0:	756f0045 	strbvc	r0, [pc, #-69]!	; 29a3 <_Min_Stack_Size+0x25a3>
    29e4:	65726774 	ldrbvs	r6, [r2, #-1908]!	; 0x774
    29e8:	44006e65 	strmi	r6, [r0], #-3685	; 0xe65
    29ec:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    29f0:	4347425f 	movtmi	r4, #29279	; 0x725f
    29f4:	4552475f 	ldrbmi	r4, [r2, #-1887]	; 0x75f
    29f8:	44004e45 	strmi	r4, [r0], #-3653	; 0xe45
    29fc:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2a00:	7869505f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    2a04:	65506c65 	ldrbvs	r6, [r0, #-3173]	; 0xc65
    2a08:	6e694c72 	mcrvs	12, 3, r4, cr9, cr2, {3}
    2a0c:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    2a10:	5f443241 	svcpl	0x00443241
    2a14:	5f434746 	svcpl	0x00434746
    2a18:	45554c42 	ldrbmi	r4, [r5, #-3138]	; 0xc42
    2a1c:	414d4400 	cmpmi	sp, r0, lsl #8
    2a20:	4d5f4432 	cfldrdmi	mvd4, [pc, #-200]	; 2960 <_Min_Stack_Size+0x2560>
    2a24:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2a28:	635f6762 	cmpvs	pc, #25690112	; 0x1880000
    2a2c:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    2a30:	65657267 	strbvs	r7, [r5, #-615]!	; 0x267
    2a34:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    2a38:	5f443241 	svcpl	0x00443241
    2a3c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    2a40:	44007469 	strmi	r7, [r0], #-1129	; 0x469
    2a44:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2a48:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2a4c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2a50:	00746375 	rsbseq	r6, r4, r5, ror r3
    2a54:	4c434742 	mcrrmi	7, 4, r4, r3, cr2
    2a58:	44005455 	strmi	r5, [r0], #-1109	; 0x455
    2a5c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2a60:	4347425f 	movtmi	r4, #29279	; 0x725f
    2a64:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2a68:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    2a6c:	5f443241 	svcpl	0x00443241
    2a70:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2a74:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2a78:	46007469 	strmi	r7, [r0], -r9, ror #8
    2a7c:	4c4f4347 	mcrrmi	3, 4, r4, pc, cr7
    2a80:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    2a84:	5f443241 	svcpl	0x00443241
    2a88:	64616544 	strbtvs	r6, [r1], #-1348	; 0x544
    2a8c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2a90:	4d474600 	stclmi	6, cr4, [r7, #-0]
    2a94:	44005241 	strmi	r5, [r0], #-577	; 0x241
    2a98:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2a9c:	5047425f 	subpl	r4, r7, pc, asr r2
    2aa0:	415f4346 	cmpmi	pc, r6, asr #6
    2aa4:	4148504c 	cmpmi	r8, ip, asr #32
    2aa8:	444f4d5f 	strbmi	r4, [pc], #-3423	; 2ab0 <_Min_Stack_Size+0x26b0>
    2aac:	4d440045 	stclmi	0, cr0, [r4, #-276]	; 0xfffffeec
    2ab0:	5f443241 	svcpl	0x00443241
    2ab4:	646f4d43 	strbtvs	r4, [pc], #-3395	; 2abc <_Min_Stack_Size+0x26bc>
    2ab8:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    2abc:	5f443241 	svcpl	0x00443241
    2ac0:	6f434746 	svcvs	0x00434746
    2ac4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2ac8:	5f676200 	svcpl	0x00676200
    2acc:	74756c63 	ldrbtvc	r6, [r5], #-3171	; 0xc63
    2ad0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    2ad4:	414d4400 	cmpmi	sp, r0, lsl #8
    2ad8:	4e5f4432 	mrcmi	4, 2, r4, cr15, cr2, {1}
    2adc:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    2ae0:	4c664f72 	stclmi	15, cr4, [r6], #-456	; 0xfffffe38
    2ae4:	00656e69 	rsbeq	r6, r5, r9, ror #28
    2ae8:	635f6766 	cmpvs	pc, #26738688	; 0x1980000
    2aec:	6374756c 	cmnvs	r4, #108, 10	; 0x1b000000
    2af0:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    2af4:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xf6d
    2af8:	4f474600 	svcmi	0x00474600
    2afc:	756f0052 	strbvc	r0, [pc, #-82]!	; 2ab2 <_Min_Stack_Size+0x26b2>
    2b00:	706c6174 	rsbvc	r6, ip, r4, ror r1
    2b04:	44006168 	strmi	r6, [r0], #-360	; 0x168
    2b08:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2b0c:	7375535f 	cmnvc	r5, #2080374785	; 0x7c000001
    2b10:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    2b14:	414d4400 	cmpmi	sp, r0, lsl #8
    2b18:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    2b1c:	74535f47 	ldrbvc	r5, [r3], #-3911	; 0xf47
    2b20:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2b24:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2b28:	414d4400 	cmpmi	sp, r0, lsl #8
    2b2c:	415f4432 	cmpmi	pc, r2, lsr r4	; <UNPREDICTABLE>
    2b30:	74726f62 	ldrbtvc	r6, [r2], #-3938	; 0xf62
    2b34:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    2b38:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    2b3c:	414d4400 	cmpmi	sp, r0, lsl #8
    2b40:	495f4432 	ldmdbmi	pc, {r1, r4, r5, sl, lr}^	; <UNPREDICTABLE>
    2b44:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    2b48:	00676966 	rsbeq	r6, r7, r6, ror #18
    2b4c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2b50:	54495f44 	strbpl	r5, [r9], #-3908	; 0xf44
    2b54:	5f676200 	svcpl	0x00676200
    2b58:	68706c61 	ldmdavs	r0!, {r0, r5, r6, sl, fp, sp, lr}^
    2b5c:	6c617661 	stclvs	6, cr7, [r1], #-388	; 0xfffffe7c
    2b60:	66006575 			; <UNDEFINED> instruction: 0x66006575
    2b64:	6c635f67 	stclvs	15, cr5, [r3], #-412	; 0xfffffe64
    2b68:	69737475 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    2b6c:	4f00657a 	svcmi	0x0000657a
    2b70:	0052414d 	subseq	r4, r2, sp, asr #2
    2b74:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2b78:	694c5f44 	stmdbvs	ip, {r2, r6, r8, r9, sl, fp, ip, lr}^
    2b7c:	6157656e 	cmpvs	r7, lr, ror #10
    2b80:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!	; 0xfffffe30
    2b84:	436b7261 	cmnmi	fp, #268435462	; 0x10000006
    2b88:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2b8c:	67620067 	strbvs	r0, [r2, -r7, rrx]!
    2b90:	6c6f635f 	stclvs	3, cr6, [pc], #-380	; 2a1c <_Min_Stack_Size+0x261c>
    2b94:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0x26f
    2b98:	4d440064 	stclmi	0, cr0, [r4, #-400]	; 0xfffffe70
    2b9c:	5f443241 	svcpl	0x00443241
    2ba0:	4d434742 	stclmi	7, cr4, [r3, #-264]	; 0xfffffef8
    2ba4:	414d4400 	cmpmi	sp, r0, lsl #8
    2ba8:	495f4432 	ldmdbmi	pc, {r1, r4, r5, sl, lr}^	; <UNPREDICTABLE>
    2bac:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2bb0:	615f6766 	cmpvs	pc, r6, ror #14
    2bb4:	6168706c 	cmnvs	r8, ip, rrx
    2bb8:	646f6d5f 	strbtvs	r6, [pc], #-3423	; 2bc0 <_Min_Stack_Size+0x27c0>
    2bbc:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    2bc0:	5f443241 	svcpl	0x00443241
    2bc4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2bc8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2bcc:	00666544 	rsbeq	r6, r6, r4, asr #10
    2bd0:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    2bd4:	47420052 	smlsldmi	r0, r2, r2, r0
    2bd8:	524c4f43 	subpl	r4, ip, #268	; 0x10c
    2bdc:	414d4400 	cmpmi	sp, r0, lsl #8
    2be0:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    2be4:	00414d47 	subeq	r4, r1, r7, asr #26
    2be8:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2bec:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    2bf0:	4c425f43 	mcrrmi	15, 4, r5, r2, cr3
    2bf4:	44004555 	strmi	r4, [r0], #-1365	; 0x555
    2bf8:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2bfc:	6174535f 	cmnvs	r4, pc, asr r3
    2c00:	72547472 	subsvc	r7, r4, #1912602624	; 0x72000000
    2c04:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
    2c08:	44007265 	strmi	r7, [r0], #-613	; 0x265
    2c0c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2c10:	414c465f 	cmpmi	ip, pc, asr r6
    2c14:	504f0047 	subpl	r0, pc, r7, asr #32
    2c18:	52434346 	subpl	r4, r3, #402653185	; 0x18000001
    2c1c:	414d4400 	cmpmi	sp, r0, lsl #8
    2c20:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    2c24:	4c435f47 	mcrrmi	15, 4, r5, r3, cr7
    2c28:	535f5455 	cmppl	pc, #1426063360	; 0x55000000
    2c2c:	00455a49 	subeq	r5, r5, r9, asr #20
    2c30:	46504742 	ldrbmi	r4, [r0], -r2, asr #14
    2c34:	00524343 	subseq	r4, r2, r3, asr #6
    2c38:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2c3c:	65445f44 	strbvs	r5, [r4, #-3908]	; 0xf44
    2c40:	69546461 	ldmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
    2c44:	6f43656d 	svcvs	0x0043656d
    2c48:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2c4c:	414d4400 	cmpmi	sp, r0, lsl #8
    2c50:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    2c54:	6e495f47 	cdpvs	15, 4, cr5, cr9, cr7, {2}
    2c58:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2c5c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2c60:	524f4300 	subpl	r4, pc, #0, 6
    2c64:	5f584554 	svcpl	0x00584554
    2c68:	5f46344d 	svcpl	0x0046344d
    2c6c:	334d5453 	movtcc	r5, #54355	; 0xd453
    2c70:	2f344632 	svccs	0x00344632
    2c74:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2c78:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    2c7c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    2c80:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2c84:	5f787834 	svcpl	0x00787834
    2c88:	50647453 	rsbpl	r7, r4, r3, asr r4
    2c8c:	70697265 	rsbvc	r7, r9, r5, ror #4
    2c90:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    2c94:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2c98:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2c9c:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    2ca0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    2ca4:	645f7878 	ldrbvs	r7, [pc], #-2168	; 2cac <_Min_Stack_Size+0x28ac>
    2ca8:	6432616d 	ldrtvs	r6, [r2], #-365	; 0x16d
    2cac:	4400632e 	strmi	r6, [r0], #-814	; 0x32e
    2cb0:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2cb4:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    2cb8:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    2cbc:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    2cc0:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2cc4:	46007469 	strmi	r7, [r0], -r9, ror #8
    2cc8:	43465047 	movtmi	r5, #24647	; 0x6047
    2ccc:	44005243 	strmi	r5, [r0], #-579	; 0x243
    2cd0:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2cd4:	4347465f 	movtmi	r4, #30303	; 0x765f
    2cd8:	4552475f 	ldrbmi	r4, [r2, #-1887]	; 0x75f
    2cdc:	44004e45 	strmi	r4, [r0], #-3653	; 0xe45
    2ce0:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2ce4:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
    2ce8:	4d747570 	cfldr64mi	mvdx7, [r4, #-448]!	; 0xfffffe40
    2cec:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    2cf0:	64644179 	strbtvs	r4, [r4], #-377	; 0x179
    2cf4:	78697000 	stmdavc	r9!, {ip, sp, lr}^
    2cf8:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
    2cfc:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xf00
    2d00:	00646572 	rsbeq	r6, r4, r2, ror r5
    2d04:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2d08:	754f5f44 	strbvc	r5, [pc, #-3908]	; 1dcc <_Min_Stack_Size+0x19cc>
    2d0c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    2d10:	00646552 	rsbeq	r6, r4, r2, asr r5
    2d14:	635f6766 	cmpvs	pc, #26738688	; 0x1980000
    2d18:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    2d1c:	65657267 	strbvs	r7, [r5, #-615]!	; 0x267
    2d20:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    2d24:	5f443241 	svcpl	0x00443241
    2d28:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2d2c:	72477475 	subvc	r7, r7, #1962934272	; 0x75000000
    2d30:	006e6565 	rsbeq	r6, lr, r5, ror #10
    2d34:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2d38:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    2d3c:	44004d43 	strmi	r4, [r0], #-3395	; 0xd43
    2d40:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2d44:	5f47425f 	svcpl	0x0047425f
    2d48:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2d4c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2d50:	00666544 	rsbeq	r6, r6, r4, asr #10
    2d54:	414d4742 	cmpmi	sp, r2, asr #14
    2d58:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    2d5c:	5f443241 	svcpl	0x00443241
    2d60:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2d64:	00666544 	rsbeq	r6, r6, r4, asr #10
    2d68:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2d6c:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    2d70:	4d44004f 	stclmi	0, cr0, [r4, #-316]	; 0xfffffec4
    2d74:	5f443241 	svcpl	0x00443241
    2d78:	46504746 	ldrbmi	r4, [r0], -r6, asr #14
    2d7c:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
    2d80:	5f414850 	svcpl	0x00414850
    2d84:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xf4d
    2d88:	414d4400 	cmpmi	sp, r0, lsl #8
    2d8c:	475f4432 	smmlarmi	pc, r2, r4, r4	; <UNPREDICTABLE>
    2d90:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    2d94:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    2d98:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2d9c:	4f474200 	svcmi	0x00474200
    2da0:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    2da4:	5f443241 	svcpl	0x00443241
    2da8:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2dac:	664f7475 			; <UNDEFINED> instruction: 0x664f7475
    2db0:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    2db4:	414d4400 	cmpmi	sp, r0, lsl #8
    2db8:	475f4432 	smmlarmi	pc, r2, r4, r4	; <UNPREDICTABLE>
    2dbc:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    2dc0:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    2dc4:	44007375 	strmi	r7, [r0], #-885	; 0x375
    2dc8:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2dcc:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
    2dd0:	41747570 	cmnmi	r4, r0, ror r5
    2dd4:	6168706c 	cmnvs	r8, ip, rrx
    2dd8:	414d4400 	cmpmi	sp, r0, lsl #8
    2ddc:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    2de0:	525f4347 	subspl	r4, pc, #469762049	; 0x1c000001
    2de4:	66004445 	strvs	r4, [r0], -r5, asr #8
    2de8:	6f635f67 	svcvs	0x00635f67
    2dec:	72726f6c 	rsbsvc	r6, r2, #108, 30	; 0x1b0
    2df0:	44006465 	strmi	r6, [r0], #-1125	; 0x465
    2df4:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2df8:	4347465f 	movtmi	r4, #30303	; 0x765f
    2dfc:	0052414d 	subseq	r4, r2, sp, asr #2
    2e00:	635f6762 	cmpvs	pc, #25690112	; 0x1880000
    2e04:	6374756c 	cmnvs	r4, #108, 10	; 0x1b000000
    2e08:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    2e0c:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xf6d
    2e10:	5f676200 	svcpl	0x00676200
    2e14:	68706c61 	ldmdavs	r0!, {r0, r5, r6, sl, fp, sp, lr}^
    2e18:	6f6d5f61 	svcvs	0x006d5f61
    2e1c:	4c006564 	cfstr32mi	mvfx6, [r0], {100}	; 0x64
    2e20:	5f434454 	svcpl	0x00434454
    2e24:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    2e28:	6e495f72 	mcrvs	15, 2, r5, cr9, cr2, {3}
    2e2c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2e30:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    2e34:	46430066 	strbmi	r0, [r3], -r6, rrx
    2e38:	524e4c42 	subpl	r4, lr, #16896	; 0x4200
    2e3c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2e40:	6f435f43 	svcvs	0x00435f43
    2e44:	4b726f6c 	blmi	1c9ebfc <_Min_Stack_Size+0x1c9e7fc>
    2e48:	6e697965 	cdpvs	9, 6, cr7, cr9, cr5, {3}
    2e4c:	6e6f4367 	cdpvs	3, 6, cr4, cr15, cr7, {3}
    2e50:	00676966 	rsbeq	r6, r7, r6, ror #18
    2e54:	67696548 	strbvs	r6, [r9, -r8, asr #10]!
    2e58:	4c007468 	cfstrsmi	mvf7, [r0], {104}	; 0x68
    2e5c:	5f434454 	svcpl	0x00434454
    2e60:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    2e64:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    2e68:	5f434454 	svcpl	0x00434454
    2e6c:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    2e70:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2e74:	43434200 	movtmi	r4, #12800	; 0x3200
    2e78:	46430052 			; <UNDEFINED> instruction: 0x46430052
    2e7c:	00524c42 	subseq	r4, r2, r2, asr #24
    2e80:	75636361 	strbvc	r6, [r3, #-865]!	; 0x361
    2e84:	616c756d 	cmnvs	ip, sp, ror #10
    2e88:	61646574 	smcvs	18004	; 0x4654
    2e8c:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    2e90:	4c005765 	stcmi	7, cr5, [r0], {101}	; 0x65
    2e94:	5f434454 	svcpl	0x00434454
    2e98:	61656c43 	cmnvs	r5, r3, asr #24
    2e9c:	616c4672 	smcvs	50274	; 0xc462
    2ea0:	544c0067 	strbpl	r0, [ip], #-103	; 0x67
    2ea4:	635f4344 	cmpvs	pc, #68, 6	; 0x10000001
    2ea8:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    2eac:	6979656b 	ldmdbvs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
    2eb0:	495f676e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
    2eb4:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2eb8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2ebc:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    2ec0:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2ec4:	74534246 	ldrbvc	r4, [r3], #-582	; 0x246
    2ec8:	41747261 	cmnmi	r4, r1, ror #4
    2ecc:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    2ed0:	544c0073 	strbpl	r0, [ip], #-115	; 0x73
    2ed4:	445f4344 	ldrbmi	r4, [pc], #-836	; 2edc <_Min_Stack_Size+0x2adc>
    2ed8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    2edc:	6f43746c 	svcvs	0x0043746c
    2ee0:	52726f6c 	rsbspl	r6, r2, #108, 30	; 0x1b0
    2ee4:	4c006465 	cfstrsmi	mvf6, [r0], {101}	; 0x65
    2ee8:	5f434454 	svcpl	0x00434454
    2eec:	74726556 	ldrbtvc	r6, [r2], #-1366	; 0x556
    2ef0:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
    2ef4:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2ef8:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    2efc:	415f4344 	cmpmi	pc, r4, asr #6
    2f00:	6d756363 	ldclvs	3, cr6, [r5, #-396]!	; 0xfffffe74
    2f04:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
    2f08:	63416465 	movtvs	r6, #5221	; 0x1465
    2f0c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    2f10:	544c0048 	strbpl	r0, [ip], #-72	; 0x48
    2f14:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    2f18:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    2f1c:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0x950
    2f20:	726f466c 	rsbvc	r4, pc, #108, 12	; 0x6c00000
    2f24:	0074616d 	rsbseq	r6, r4, sp, ror #2
    2f28:	4344544c 	movtmi	r5, #17484	; 0x444c
    2f2c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    2f30:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2f34:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2f38:	494c5f43 	stmdbmi	ip, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2f3c:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    2f40:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2f44:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2f48:	57006769 	strpl	r6, [r0, -r9, ror #14]
    2f4c:	52435056 	subpl	r5, r3, #86	; 0x56
    2f50:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2f54:	53485f43 	movtpl	r5, #36675	; 0x8f43
    2f58:	616c6f50 	cmnvs	ip, r0, asr pc
    2f5c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2f60:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2f64:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    2f68:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2f6c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2f70:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2f74:	61425f43 	cmpvs	r2, r3, asr #30
    2f78:	72676b63 	rsbvc	r6, r7, #101376	; 0x18c00
    2f7c:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
    2f80:	65657247 	strbvs	r7, [r5, #-583]!	; 0x247
    2f84:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    2f88:	4c006575 	cfstr32mi	mvfx6, [r0], {117}	; 0x75
    2f8c:	5f434454 	svcpl	0x00434454
    2f90:	75636341 	strbvc	r6, [r3, #-833]!	; 0x341
    2f94:	616c756d 	cmnvs	ip, sp, ror #10
    2f98:	56646574 			; <UNDEFINED> instruction: 0x56646574
    2f9c:	4c005042 	stcmi	0, cr5, [r0], {66}	; 0x42
    2fa0:	5f434454 	svcpl	0x00434454
    2fa4:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    2fa8:	696e4972 	stmdbvs	lr!, {r1, r4, r5, r6, r8, fp, lr}^
    2fac:	63640074 	cmnvs	r4, #116	; 0x74
    2fb0:	68706c61 	ldmdavs	r0!, {r0, r5, r6, sl, fp, sp, lr}^
    2fb4:	544c0061 	strbpl	r0, [ip], #-97	; 0x61
    2fb8:	415f4344 	cmpmi	pc, r4, asr #6
    2fbc:	6d756363 	ldclvs	3, cr6, [r5, #-396]!	; 0xfffffe74
    2fc0:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
    2fc4:	63416465 	movtvs	r6, #5221	; 0x1465
    2fc8:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    2fcc:	544c0057 	strbpl	r0, [ip], #-87	; 0x57
    2fd0:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    2fd4:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    2fd8:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    2fdc:	72657600 	rsbvc	r7, r5, #0, 12
    2fe0:	61636974 	smcvs	13972	; 0x3694
    2fe4:	74735f6c 	ldrbtvc	r5, [r3], #-3948	; 0xf6c
    2fe8:	00747261 	rsbseq	r7, r4, r1, ror #4
    2fec:	69726f68 	ldmdbvs	r2!, {r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2ff0:	746e6f7a 	strbtvc	r6, [lr], #-3962	; 0xf7a
    2ff4:	79736c61 	ldmdbvc	r3!, {r0, r5, r6, sl, fp, sp, lr}^
    2ff8:	4c00636e 	stcmi	3, cr6, [r0], {110}	; 0x6e
    2ffc:	5f434454 	svcpl	0x00434454
    3000:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3004:	65726364 	ldrbvs	r6, [r2, #-868]!	; 0x364
    3008:	61620064 	cmnvs	r2, r4, rrx
    300c:	65726b63 	ldrbvs	r6, [r2, #-2915]!	; 0xb63
    3010:	76770064 	ldrbtvc	r0, [r7], -r4, rrx
    3014:	6f707073 	svcvs	0x00707073
    3018:	544c0073 	strbpl	r0, [ip], #-115	; 0x73
    301c:	485f4344 	ldmdami	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3020:	7a69726f 	bvc	1a5f9e4 <_Min_Stack_Size+0x1a5f5e4>
    3024:	61746e6f 	cmnvs	r4, pc, ror #28
    3028:	6e79536c 	cdpvs	3, 7, cr5, cr9, cr12, {3}
    302c:	544c0063 	strbpl	r0, [ip], #-99	; 0x63
    3030:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    3034:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    3038:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    303c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3040:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3044:	614c5f43 	cmpvs	ip, r3, asr #30
    3048:	78726579 	ldmdavc	r2!, {r0, r3, r4, r5, r6, r8, sl, sp, lr}^
    304c:	43414300 	movtmi	r4, #4864	; 0x1300
    3050:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    3054:	425f4344 	subsmi	r4, pc, #68, 6	; 0x10000001
    3058:	5665756c 	strbtpl	r7, [r5], -ip, ror #10
    305c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    3060:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3064:	6f435f43 	svcvs	0x00435f43
    3068:	4b726f6c 	blmi	1c9ee20 <_Min_Stack_Size+0x1c9ea20>
    306c:	72477965 	subvc	r7, r7, #1654784	; 0x194000
    3070:	006e6565 	rsbeq	r6, lr, r5, ror #10
    3074:	4344544c 	movtmi	r5, #17484	; 0x444c
    3078:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    307c:	74534443 	ldrbvc	r4, [r3], #-1091	; 0x443
    3080:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3084:	726f6800 	rsbvc	r6, pc, #0, 16
    3088:	6e6f7a69 	vnmulvs.f32	s15, s30, s19
    308c:	5f6c6174 	svcpl	0x006c6174
    3090:	706f7473 	rsbvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
    3094:	63616200 	cmnvs	r1, #0, 4
    3098:	6572676b 	ldrbvs	r6, [r2, #-1899]!	; 0x76b
    309c:	4c006e65 	stcmi	14, cr6, [r0], {101}	; 0x65
    30a0:	5f434454 	svcpl	0x00434454
    30a4:	61666544 	cmnvs	r6, r4, asr #10
    30a8:	43746c75 	cmnmi	r4, #29952	; 0x7500
    30ac:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    30b0:	65756c42 	ldrbvs	r6, [r5, #-3138]!	; 0xc42
    30b4:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    30b8:	46435f43 	strbmi	r5, [r3], -r3, asr #30
    30bc:	6e694c42 	cdpvs	12, 6, cr4, cr9, cr2, {2}
    30c0:	6e654c65 	cdpvs	12, 6, cr4, cr5, cr5, {3}
    30c4:	00687467 	rsbeq	r7, r8, r7, ror #8
    30c8:	4344544c 	movtmi	r5, #17484	; 0x444c
    30cc:	7265565f 	rsbvc	r5, r5, #99614720	; 0x5f00000
    30d0:	61636974 	smcvs	13972	; 0x3694
    30d4:	6e79536c 	cdpvs	3, 7, cr5, cr9, cr12, {3}
    30d8:	544c0063 	strbpl	r0, [ip], #-99	; 0x63
    30dc:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    30e0:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    30e4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    30e8:	4c007375 	stcmi	3, cr7, [r0], {117}	; 0x75
    30ec:	5f434454 	svcpl	0x00434454
    30f0:	69726f48 	ldmdbvs	r2!, {r3, r6, r8, r9, sl, fp, sp, lr}^
    30f4:	746e6f7a 	strbtvc	r6, [lr], #-3962	; 0xf7a
    30f8:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xc61
    30fc:	4c00706f 	stcmi	0, cr7, [r0], {111}	; 0x6f
    3100:	5f434454 	svcpl	0x00434454
    3104:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3108:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    310c:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    3110:	5f434454 	svcpl	0x00434454
    3114:	6f6c6552 	svcvs	0x006c6552
    3118:	6f436461 	svcvs	0x00436461
    311c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3120:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3124:	61425f43 	cmpvs	r2, r3, asr #30
    3128:	72676b63 	rsbvc	r6, r7, #101376	; 0x18c00
    312c:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
    3130:	65756c42 	ldrbvs	r6, [r5, #-3138]!	; 0xc42
    3134:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    3138:	544c0065 	strbpl	r0, [ip], #-101	; 0x65
    313c:	425f4344 	subsmi	r4, pc, #68, 6	; 0x10000001
    3140:	5765756c 	strbpl	r7, [r5, -ip, ror #10]!
    3144:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    3148:	50485700 	subpl	r5, r8, r0, lsl #14
    314c:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
    3150:	5f434454 	svcpl	0x00434454
    3154:	61666544 	cmnvs	r6, r4, asr #10
    3158:	43746c75 	cmnmi	r4, #29952	; 0x7500
    315c:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    3160:	65657247 	strbvs	r7, [r5, #-583]!	; 0x247
    3164:	544c006e 	strbpl	r0, [ip], #-110	; 0x6e
    3168:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    316c:	5f54554c 	svcpl	0x0054554c
    3170:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3174:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3178:	4c007463 	cfstrsmi	mvf7, [r0], {99}	; 0x63
    317c:	5f434454 	svcpl	0x00434454
    3180:	74726556 	ldrbtvc	r6, [r2], #-1366	; 0x556
    3184:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
    3188:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
    318c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3190:	6f435f43 	svcvs	0x00435f43
    3194:	4b726f6c 	blmi	1c9ef4c <_Min_Stack_Size+0x1c9eb4c>
    3198:	6e697965 	cdpvs	9, 6, cr7, cr9, cr5, {3}
    319c:	6e495f67 	cdpvs	15, 4, cr5, cr9, cr7, {3}
    31a0:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    31a4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    31a8:	544c0066 	strbpl	r0, [ip], #-102	; 0x66
    31ac:	485f4344 	ldmdami	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    31b0:	7a69726f 	bvc	1a5fb74 <_Min_Stack_Size+0x1a5f774>
    31b4:	61746e6f 	cmnvs	r4, pc, ror #28
    31b8:	6174536c 	cmnvs	r4, ip, ror #6
    31bc:	4c007472 	cfstrsmi	mvf7, [r0], {114}	; 0x72
    31c0:	5f434454 	svcpl	0x00434454
    31c4:	6b636142 	blvs	18db6d4 <_Min_Stack_Size+0x18db2d4>
    31c8:	756f7267 	strbvc	r7, [pc, #-615]!	; 2f69 <_Min_Stack_Size+0x2b69>
    31cc:	6552646e 	ldrbvs	r6, [r2, #-1134]	; 0x46e
    31d0:	6c615664 	stclvs	6, cr5, [r1], #-400	; 0xfffffe70
    31d4:	74006575 	strvc	r6, [r0], #-1397	; 0x575
    31d8:	6c61746f 	cfstrdvs	mvd7, [r1], #-444	; 0xfffffe44
    31dc:	74646977 	strbtvc	r6, [r4], #-2423	; 0x977
    31e0:	4c430068 	mcrrmi	0, 6, r0, r3, cr8
    31e4:	52575455 	subspl	r5, r7, #1426063360	; 0x55000000
    31e8:	524f4300 	subpl	r4, pc, #0, 6
    31ec:	5f584554 	svcpl	0x00584554
    31f0:	5f46344d 	svcpl	0x0046344d
    31f4:	334d5453 	movtcc	r5, #54355	; 0xd453
    31f8:	2f344632 	svccs	0x00344632
    31fc:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3200:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3204:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    3208:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    320c:	5f787834 	svcpl	0x00787834
    3210:	50647453 	rsbpl	r7, r4, r3, asr r4
    3214:	70697265 	rsbvc	r7, r9, r5, ror #4
    3218:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    321c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3220:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3224:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    3228:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    322c:	6c5f7878 	mrrcvs	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    3230:	2e636474 	mcrcs	4, 3, r6, cr3, cr4, {3}
    3234:	57540063 	ldrbpl	r0, [r4, -r3, rrx]
    3238:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
    323c:	5f434454 	svcpl	0x00434454
    3240:	61746f54 	cmnvs	r4, r4, asr pc
    3244:	6469576c 	strbtvs	r5, [r9], #-1900	; 0x76c
    3248:	53006874 	movwpl	r6, #2164	; 0x874
    324c:	00524352 	subseq	r4, r2, r2, asr r3
    3250:	4344544c 	movtmi	r5, #17484	; 0x444c
    3254:	0054495f 	subseq	r4, r4, pc, asr r9
    3258:	52434b43 	subpl	r4, r3, #68608	; 0x10c00
    325c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3260:	43505f43 	cmpmi	r0, #268	; 0x10c
    3264:	616c6f50 	cmnvs	ip, r0, asr pc
    3268:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    326c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3270:	4c435f43 	mcrrmi	15, 4, r5, r3, cr3
    3274:	6d435455 	cfstrdvs	mvd5, [r3, #-340]	; 0xfffffeac
    3278:	46420064 	strbmi	r0, [r2], -r4, rrx
    327c:	61005243 	tstvs	r0, r3, asr #4
    3280:	6d756363 	ldclvs	3, cr6, [r5, #-396]!	; 0xfffffe74
    3284:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
    3288:	42486465 	submi	r6, r8, #1694498816	; 0x65000000
    328c:	544c0050 	strbpl	r0, [ip], #-80	; 0x50
    3290:	505f4344 	subspl	r4, pc, r4, asr #6
    3294:	495f736f 	ldmdbmi	pc, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    3298:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    329c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    32a0:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    32a4:	505f4344 	subspl	r4, pc, r4, asr #6
    32a8:	7453736f 	ldrbvc	r7, [r3], #-879	; 0x36f
    32ac:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    32b0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    32b4:	43574100 	cmpmi	r7, #0, 2
    32b8:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    32bc:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    32c0:	6f507465 	svcvs	0x00507465
    32c4:	61745373 	cmnvs	r4, r3, ror r3
    32c8:	00737574 	rsbseq	r7, r3, r4, ror r5
    32cc:	4344544c 	movtmi	r5, #17484	; 0x444c
    32d0:	6465525f 	strbtvs	r5, [r5], #-607	; 0x25f
    32d4:	74646957 	strbtvc	r6, [r4], #-2391	; 0x957
    32d8:	544c0068 	strbpl	r0, [ip], #-104	; 0x68
    32dc:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    32e0:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xe6f
    32e4:	41746e61 	cmnmi	r4, r1, ror #28
    32e8:	6168706c 	cmnvs	r8, ip, rrx
    32ec:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    32f0:	4c435f43 	mcrrmi	15, 4, r5, r3, cr3
    32f4:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    32f8:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    32fc:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3300:	4c006665 	stcmi	6, cr6, [r0], {101}	; 0x65
    3304:	5f434454 	svcpl	0x00434454
    3308:	58534f50 	ldmdapl	r3, {r4, r6, r8, r9, sl, fp, lr}^
    330c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3310:	4f505f43 	svcmi	0x00505f43
    3314:	4c005953 	stcmi	9, cr5, [r0], {83}	; 0x53
    3318:	5f434454 	svcpl	0x00434454
    331c:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    3320:	72745372 	rsbsvc	r5, r4, #-939524095	; 0xc8000001
    3324:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    3328:	0074696e 	rsbseq	r6, r4, lr, ror #18
    332c:	4344544c 	movtmi	r5, #17484	; 0x444c
    3330:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    3334:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    3338:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    333c:	4c007375 	stcmi	3, cr7, [r0], {117}	; 0x75
    3340:	5f434454 	svcpl	0x00434454
    3344:	68746944 	ldmdavs	r4!, {r2, r6, r8, fp, sp, lr}^
    3348:	6d437265 	sfmvs	f7, 2, [r3, #-404]	; 0xfffffe6c
    334c:	544c0064 	strbpl	r0, [ip], #-100	; 0x64
    3350:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    3354:	5354554c 	cmppl	r4, #76, 10	; 0x13000000
    3358:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    335c:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    3360:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    3364:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    3368:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    336c:	68706c41 	ldmdavs	r0!, {r0, r6, sl, fp, sp, lr}^
    3370:	46430061 	strbmi	r0, [r3], -r1, rrx
    3374:	00524142 	subseq	r4, r2, r2, asr #2
    3378:	74756c63 	ldrbtvc	r6, [r5], #-3171	; 0xc63
    337c:	00646461 	rsbeq	r6, r4, r1, ror #8
    3380:	4344544c 	movtmi	r5, #17484	; 0x444c
    3384:	79614c5f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    3388:	495f7265 	ldmdbmi	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    338c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    3390:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3394:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    3398:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    339c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    33a0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    33a4:	544c0065 	strbpl	r0, [ip], #-101	; 0x65
    33a8:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    33ac:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    33b0:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    33b4:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    33b8:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    33bc:	62666300 	rsbvs	r6, r6, #0, 6
    33c0:	544c0070 	strbpl	r0, [ip], #-112	; 0x70
    33c4:	525f4344 	subspl	r4, pc, #68, 6	; 0x10000001
    33c8:	74534247 	ldrbvc	r4, [r3], #-583	; 0x247
    33cc:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    33d0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    33d4:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    33d8:	44435f43 	strbmi	r5, [r3], #-3907	; 0xf43
    33dc:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    33e0:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xf43
    33e4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    33e8:	6c6f4374 	stclvs	3, cr4, [pc], #-464	; 3220 <_Min_Stack_Size+0x2e20>
    33ec:	6c41726f 	sfmvs	f7, 2, [r1], {111}	; 0x6f
    33f0:	00616870 	rsbeq	r6, r1, r0, ror r8
    33f4:	4350494c 	cmpmi	r0, #76, 18	; 0x130000
    33f8:	65740052 	ldrbvs	r0, [r4, #-82]!	; 0x52
    33fc:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0x6d
    3400:	544c0067 	strbpl	r0, [ip], #-103	; 0x67
    3404:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    3408:	4154554c 	cmpmi	r4, ip, asr #10
    340c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    3410:	544c0073 	strbpl	r0, [ip], #-115	; 0x73
    3414:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    3418:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    341c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    3420:	00737365 	rsbseq	r7, r3, r5, ror #6
    3424:	4344544c 	movtmi	r5, #17484	; 0x444c
    3428:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    342c:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    3430:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    3434:	694c4246 	stmdbvs	ip, {r1, r2, r6, r9, lr}^
    3438:	754e656e 	strbvc	r6, [lr, #-1390]	; 0x56e
    343c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    3440:	53504300 	cmppl	r0, #0, 6
    3444:	50420052 	subpl	r0, r2, r2, asr r0
    3448:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
    344c:	5f434454 	svcpl	0x00434454
    3450:	65657247 	strbvs	r7, [r5, #-583]!	; 0x247
    3454:	6469576e 	strbtvs	r5, [r9], #-1902	; 0x76e
    3458:	4f006874 	svcmi	0x00006874
    345c:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0x666
    3460:	4f005874 	svcmi	0x00005874
    3464:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0x666
    3468:	4c005974 	stcmi	9, cr5, [r0], {116}	; 0x74
    346c:	5f434454 	svcpl	0x00434454
    3470:	6f6c6f43 	svcvs	0x006c6f43
    3474:	79654b72 	stmdbvc	r5!, {r1, r4, r5, r6, r8, r9, fp, lr}^
    3478:	00646552 	rsbeq	r6, r4, r2, asr r5
    347c:	69726f68 	ldmdbvs	r2!, {r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3480:	746e6f7a 	strbtvc	r6, [lr], #-3962	; 0xf7a
    3484:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    3488:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    348c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3490:	63415f43 	movtvs	r5, #8003	; 0x1f43
    3494:	756d7563 	strbvc	r7, [sp, #-1379]!	; 0x563
    3498:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    349c:	50424864 	subpl	r4, r2, r4, ror #16
    34a0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    34a4:	6f545f43 	svcvs	0x00545f43
    34a8:	486c6174 	stmdami	ip!, {r2, r4, r5, r6, r8, sp, lr}^
    34ac:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    34b0:	73687700 	cmnvc	r8, #0, 14
    34b4:	736f7070 	cmnvc	pc, #112	; 0x70
    34b8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    34bc:	6f435f43 	svcvs	0x00435f43
    34c0:	4b726f6c 	blmi	1c9f278 <_Min_Stack_Size+0x1c9ee78>
    34c4:	6c427965 	mcrrvs	9, 6, r7, r2, cr5
    34c8:	53006575 	movwpl	r6, #1397	; 0x575
    34cc:	00524353 	subseq	r4, r2, r3, asr r3
    34d0:	4344544c 	movtmi	r5, #17484	; 0x444c
    34d4:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 3360 <_Min_Stack_Size+0x2f60>
    34d8:	654b726f 	strbvs	r7, [fp, #-623]	; 0x26f
    34dc:	676e6979 			; <UNDEFINED> instruction: 0x676e6979
    34e0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    34e4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    34e8:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    34ec:	5f434454 	svcpl	0x00434454
    34f0:	6f504544 	svcvs	0x00504544
    34f4:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    34f8:	4c007974 	stcmi	9, cr7, [r0], {116}	; 0x74
    34fc:	5f434454 	svcpl	0x00434454
    3500:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0x950
    3504:	726f466c 	rsbvc	r4, pc, #108, 12	; 0x6c00000
    3508:	0074616d 	rsbseq	r6, r4, sp, ror #2
    350c:	4344544c 	movtmi	r5, #17484	; 0x444c
    3510:	414c465f 	cmpmi	ip, pc, asr r6
    3514:	544c0047 	strbpl	r0, [ip], #-71	; 0x47
    3518:	505f4344 	subspl	r4, pc, r4, asr #6
    351c:	7954736f 	ldmdbvc	r4, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3520:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3524:	544c0066 	strbpl	r0, [ip], #-102	; 0x66
    3528:	525f4344 	subspl	r4, pc, #68, 6	; 0x10000001
    352c:	616f6c65 	cmnvs	pc, r5, ror #24
    3530:	544c0064 	strbpl	r0, [ip], #-100	; 0x64
    3534:	425f4344 	subsmi	r4, pc, #68, 6	; 0x10000001
    3538:	646e656c 	strbtvs	r6, [lr], #-1388	; 0x56c
    353c:	46676e69 	strbtmi	r6, [r7], -r9, ror #28
    3540:	6f746361 	svcvs	0x00746361
    3544:	00315f72 	eorseq	r5, r1, r2, ror pc
    3548:	4344544c 	movtmi	r5, #17484	; 0x444c
    354c:	656c425f 	strbvs	r4, [ip, #-607]!	; 0x25f
    3550:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    3554:	63614667 	cmnvs	r1, #108003328	; 0x6700000
    3558:	5f726f74 	svcpl	0x00726f74
    355c:	43440032 	movtmi	r0, #16434	; 0x4032
    3560:	76005243 	strvc	r5, [r0], -r3, asr #4
    3564:	69747265 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3568:	5f6c6163 	svcpl	0x006c6163
    356c:	706f7473 	rsbvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
    3570:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3574:	494c5f43 	stmdbmi	ip, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    3578:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
    357c:	00676966 	rsbeq	r6, r7, r6, ror #18
    3580:	4344544c 	movtmi	r5, #17484	; 0x444c
    3584:	4247525f 	submi	r5, r7, #-268435451	; 0xf0000005
    3588:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    358c:	00666544 	rsbeq	r6, r6, r4, asr #10
    3590:	52534443 	subspl	r4, r3, #1124073472	; 0x43000000
    3594:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3598:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    359c:	6c615664 	stclvs	6, cr5, [r1], #-400	; 0xfffffe70
    35a0:	4c006575 	cfstr32mi	mvfx6, [r0], {117}	; 0x75
    35a4:	5f434454 	svcpl	0x00434454
    35a8:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    35ac:	646d4372 	strbtvs	r4, [sp], #-882	; 0x372
    35b0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    35b4:	47525f43 	ldrbmi	r5, [r2, -r3, asr #30]
    35b8:	6e495f42 	cdpvs	15, 4, cr5, cr9, cr2, {2}
    35bc:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    35c0:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    35c4:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    35c8:	53565f43 	cmppl	r6, #268	; 0x10c
    35cc:	616c6f50 	cmnvs	ip, r0, asr pc
    35d0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    35d4:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    35d8:	46435f43 	strbmi	r5, [r3], -r3, asr #30
    35dc:	74695042 	strbtvc	r5, [r9], #-66	; 0x42
    35e0:	64006863 	strvs	r6, [r0], #-2147	; 0x863
    35e4:	65726763 	ldrbvs	r6, [r2, #-1891]!	; 0x763
    35e8:	4c006e65 	stcmi	14, cr6, [r0], {101}	; 0x65
    35ec:	5f434454 	svcpl	0x00434454
    35f0:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    35f4:	736f5072 	cmnvc	pc, #114	; 0x72
    35f8:	6f697469 	svcvs	0x00697469
    35fc:	544c006e 	strbpl	r0, [ip], #-110	; 0x6e
    3600:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3604:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    3608:	00676966 	rsbeq	r6, r7, r6, ror #18
    360c:	52434650 	subpl	r4, r3, #80, 12	; 0x5000000
    3610:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3614:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    3618:	42475274 	submi	r5, r7, #116, 4	; 0x40000007
    361c:	74646957 	strbtvc	r6, [r4], #-2391	; 0x957
    3620:	544c0068 	strbpl	r0, [ip], #-104	; 0x68
    3624:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3628:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    362c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3630:	50006665 	andpl	r6, r0, r5, ror #12
    3634:	324d454d 	subcc	r4, sp, #322961408	; 0x13400000
    3638:	434d4600 	movtmi	r4, #54784	; 0xd600
    363c:	7478455f 	ldrbtvc	r4, [r8], #-1375	; 0x55f
    3640:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xe65
    3644:	646f4d64 	strbtvs	r4, [pc], #-3428	; 364c <_Min_Stack_Size+0x324c>
    3648:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    364c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    3650:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    3654:	0067616c 	rsbeq	r6, r7, ip, ror #2
    3658:	52434453 	subpl	r4, r3, #1392508928	; 0x53000000
    365c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3660:	6e61425f 	mcrvs	2, 3, r4, cr1, cr15, {2}
    3664:	365f356b 	ldrbcc	r3, [pc], -fp, ror #10
    3668:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    366c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3670:	434d4600 	movtmi	r4, #54784	; 0xd600
    3674:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    3678:	6e494d41 	cdpvs	13, 4, cr4, cr9, cr1, {2}
    367c:	46007469 	strmi	r7, [r0], -r9, ror #8
    3680:	435f434d 	cmpmi	pc, #872415233	; 0x34000001
    3684:	614c5341 	cmpvs	ip, r1, asr #6
    3688:	636e6574 	cmnvs	lr, #116, 10	; 0x1d000000
    368c:	63650079 	cmnvs	r5, #121	; 0x79
    3690:	6c617663 	stclvs	6, cr7, [r1], #-396	; 0xfffffe74
    3694:	434d4600 	movtmi	r4, #54784	; 0xd600
    3698:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    369c:	49654444 	stmdbmi	r5!, {r2, r6, sl, lr}^
    36a0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    36a4:	4d454d50 	stclmi	13, cr4, [r5, #-320]	; 0xfffffec0
    36a8:	4d500033 	ldclmi	0, cr0, [r0, #-204]	; 0xffffff34
    36ac:	00344d45 	eorseq	r4, r4, r5, asr #26
    36b0:	5f434d46 	svcpl	0x00434d46
    36b4:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    36b8:	6e676953 	mcrvs	9, 3, r6, cr7, cr3, {2}
    36bc:	6f506c61 	svcvs	0x00506c61
    36c0:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    36c4:	46007974 			; <UNDEFINED> instruction: 0x46007974
    36c8:	4d5f434d 	ldclmi	3, cr4, [pc, #-308]	; 359c <_Min_Stack_Size+0x319c>
    36cc:	5265646f 	rsbpl	r6, r5, #1862270976	; 0x6f000000
    36d0:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    36d4:	44726574 	ldrbtmi	r6, [r2], #-1396	; 0x574
    36d8:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
    36dc:	6f697469 	svcvs	0x00697469
    36e0:	4453006e 	ldrbmi	r0, [r3], #-110	; 0x6e
    36e4:	00525452 	subseq	r5, r2, r2, asr r4
    36e8:	5f434d46 	svcpl	0x00434d46
    36ec:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    36f0:	70536e6f 	subsvc	r6, r3, pc, ror #28
    36f4:	54656361 	strbtpl	r6, [r5], #-865	; 0x361
    36f8:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    36fc:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    3700:	00746375 	rsbseq	r6, r4, r5, ror r3
    3704:	5f434d46 	svcpl	0x00434d46
    3708:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
    370c:	756f6e69 	strbvc	r6, [pc, #-3689]!	; 28ab <_Min_Stack_Size+0x24ab>
    3710:	6f6c4373 	svcvs	0x006c4373
    3714:	46006b63 	strmi	r6, [r0], -r3, ror #22
    3718:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    371c:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    3720:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3724:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3728:	00666544 	rsbeq	r6, r6, r4, asr #10
    372c:	5f434d46 	svcpl	0x00434d46
    3730:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    3734:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
    3738:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    373c:	6d695479 	cfstrdvs	mvd5, [r9, #-484]!	; 0xfffffe1c
    3740:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    3744:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    3748:	494d4152 	stmdbmi	sp, {r1, r4, r6, r8, lr}^
    374c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    3750:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3754:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3758:	61425f43 	cmpvs	r2, r3, asr #30
    375c:	5f316b6e 	svcpl	0x00316b6e
    3760:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3764:	00666544 	rsbeq	r6, r6, r4, asr #10
    3768:	52534453 	subspl	r4, r3, #1392508928	; 0x53000000
    376c:	54445300 	strbpl	r5, [r4], #-768	; 0x300
    3770:	4d460052 	stclmi	0, cr0, [r6, #-328]	; 0xfffffeb8
    3774:	4f4e5f43 	svcmi	0x004e5f43
    3778:	41525352 	cmpmi	r2, r2, asr r3
    377c:	696e494d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, fp, lr}^
    3780:	70795474 	rsbsvc	r5, r9, r4, ror r4
    3784:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3788:	434d4600 	movtmi	r4, #54784	; 0xd600
    378c:	5a69485f 	bpl	1a55910 <_Min_Stack_Size+0x1a55510>
    3790:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    3794:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    3798:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    379c:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    37a0:	646f4d74 	strbtvs	r4, [pc], #-3444	; 37a8 <_Min_Stack_Size+0x33a8>
    37a4:	61745365 	cmnvs	r4, r5, ror #6
    37a8:	00737574 	rsbseq	r7, r3, r4, ror r5
    37ac:	52434345 	subpl	r4, r3, #335544321	; 0x14000001
    37b0:	4d460033 	stclmi	0, cr0, [r6, #-204]	; 0xffffff34
    37b4:	4f4e5f43 	svcmi	0x004e5f43
    37b8:	41525352 	cmpmi	r2, r2, asr r3
    37bc:	7274534d 	rsbsvc	r5, r4, #872415233	; 0x34000001
    37c0:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    37c4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    37c8:	5f434d46 	svcpl	0x00434d46
    37cc:	41434350 	cmpmi	r3, r0, asr r3
    37d0:	65444452 	strbvs	r4, [r4, #-1106]	; 0x452
    37d4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    37d8:	43434500 	movtmi	r4, #13568	; 0x3500
    37dc:	46003252 			; <UNDEFINED> instruction: 0x46003252
    37e0:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    37e4:	5253524f 	subspl	r5, r3, #-268435452	; 0xf0000004
    37e8:	65444d41 	strbvs	r4, [r4, #-3393]	; 0xd41
    37ec:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    37f0:	434d4600 	movtmi	r4, #54784	; 0xd600
    37f4:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    37f8:	43505f44 	cmpmi	r0, #68, 30	; 0x110
    37fc:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    3800:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    3804:	6e49676e 	cdpvs	7, 4, cr6, cr9, cr14, {3}
    3808:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    380c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3810:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    3814:	72575f43 	subsvc	r5, r7, #268	; 0x10c
    3818:	54657469 	strbtpl	r7, [r5], #-1129	; 0x469
    381c:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    3820:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    3824:	00746375 	rsbseq	r6, r4, r5, ror r3
    3828:	5f434d46 	svcpl	0x00434d46
    382c:	74697845 	strbtvc	r7, [r9], #-2117	; 0x845
    3830:	666c6553 			; <UNDEFINED> instruction: 0x666c6553
    3834:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
    3838:	44687365 	strbtmi	r7, [r8], #-869	; 0x365
    383c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    3840:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    3844:	74746170 	ldrbtvc	r6, [r4], #-368	; 0x170
    3848:	434d4600 	movtmi	r4, #54784	; 0xd600
    384c:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    3850:	6d434d41 	stclvs	13, cr4, [r3, #-260]	; 0xfffffefc
    3854:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    3858:	00676966 	rsbeq	r6, r7, r6, ror #18
    385c:	5f434d46 	svcpl	0x00434d46
    3860:	654d4453 	strbvs	r4, [sp, #-1107]	; 0x453
    3864:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3868:	61746144 	cmnvs	r4, r4, asr #2
    386c:	74646957 	strbtvc	r6, [r4], #-2391	; 0x957
    3870:	4d460068 	stclmi	0, cr0, [r6, #-416]	; 0xfffffe60
    3874:	43505f43 	cmpmi	r0, #268	; 0x10c
    3878:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    387c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3880:	434d4600 	movtmi	r4, #54784	; 0xd600
    3884:	7474415f 	ldrbtvc	r4, [r4], #-351	; 0x15f
    3888:	75626972 	strbvc	r6, [r2, #-2418]!	; 0x972
    388c:	70536574 	subsvc	r6, r3, r4, ror r5
    3890:	54656361 	strbtpl	r6, [r5], #-865	; 0x361
    3894:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    3898:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    389c:	00746375 	rsbseq	r6, r4, r5, ror r3
    38a0:	5f434d46 	svcpl	0x00434d46
    38a4:	41524453 	cmpmi	r2, r3, asr r4
    38a8:	6972574d 	ldmdbvs	r2!, {r0, r2, r3, r6, r8, r9, sl, ip, lr}^
    38ac:	72506574 	subsvc	r6, r0, #116, 10	; 0x1d000000
    38b0:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    38b4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    38b8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    38bc:	43006769 	movwmi	r6, #1897	; 0x769
    38c0:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    38c4:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    38c8:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    38cc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    38d0:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    38d4:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    38d8:	2f736569 	svccs	0x00736569
    38dc:	334d5453 	movtcc	r5, #54355	; 0xd453
    38e0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    38e4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    38e8:	72655064 	rsbvc	r5, r5, #100	; 0x64
    38ec:	5f687069 	svcpl	0x00687069
    38f0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    38f4:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    38f8:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    38fc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3900:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3904:	636d665f 	cmnvs	sp, #99614720	; 0x5f00000
    3908:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    390c:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3910:	5253524f 	subspl	r5, r3, #-268435452	; 0xf0000004
    3914:	6e494d41 	cdpvs	13, 4, cr4, cr9, cr1, {2}
    3918:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    391c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3920:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    3924:	4d460072 	stclmi	0, cr0, [r6, #-456]	; 0xfffffe38
    3928:	75415f43 	strbvc	r5, [r1, #-3907]	; 0xf43
    392c:	65526f74 	ldrbvs	r6, [r2, #-3956]	; 0xf74
    3930:	73657266 	cmnvc	r5, #1610612742	; 0x60000006
    3934:	6d754e68 	ldclvs	14, cr4, [r5, #-416]!	; 0xfffffe60
    3938:	00726562 	rsbseq	r6, r2, r2, ror #10
    393c:	5f434d46 	svcpl	0x00434d46
    3940:	6b6e6142 	blvs	1b9be50 <_Min_Stack_Size+0x1b9ba50>
    3944:	79545f32 	ldmdbvc	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    3948:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    394c:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    3950:	43545f43 	cmpmi	r4, #268	; 0x10c
    3954:	6553524c 	ldrbvs	r5, [r3, #-588]	; 0x24c
    3958:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0x574
    395c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    3960:	5f434d46 	svcpl	0x00434d46
    3964:	73727542 	cmnvc	r2, #276824064	; 0x10800000
    3968:	63634174 	cmnvs	r3, #116, 2
    396c:	4d737365 	ldclmi	3, cr7, [r3, #-404]!	; 0xfffffe6c
    3970:	0065646f 	rsbeq	r6, r5, pc, ror #8
    3974:	5f434d46 	svcpl	0x00434d46
    3978:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    397c:	65706950 	ldrbvs	r6, [r0, #-2384]!	; 0x950
    3980:	616c6544 	cmnvs	ip, r4, asr #10
    3984:	6d740079 	ldclvs	0, cr0, [r4, #-484]!	; 0xfffffe1c
    3988:	72637070 	rsbvc	r7, r3, #112	; 0x70
    398c:	43445300 	movtmi	r5, #17152	; 0x4300
    3990:	4600524d 	strmi	r5, [r0], -sp, asr #4
    3994:	525f434d 	subspl	r4, pc, #872415233	; 0x34000001
    3998:	65444443 	strbvs	r4, [r4, #-1091]	; 0x443
    399c:	0079616c 	rsbseq	r6, r9, ip, ror #2
    39a0:	5f434d46 	svcpl	0x00434d46
    39a4:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    39a8:	65726665 	ldrbvs	r6, [r2, #-1637]!	; 0x665
    39ac:	6f436873 	svcvs	0x00436873
    39b0:	00746e75 	rsbseq	r6, r4, r5, ror lr
    39b4:	5f434d46 	svcpl	0x00434d46
    39b8:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    39bc:	6e676953 	mcrvs	9, 3, r6, cr7, cr3, {2}
    39c0:	63416c61 	movtvs	r6, #7265	; 0x1c61
    39c4:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    39c8:	434d4600 	movtmi	r4, #54784	; 0xd600
    39cc:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    39d0:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    39d4:	4600656d 	strmi	r6, [r0], -sp, ror #10
    39d8:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    39dc:	75417465 	strbvc	r7, [r1, #-1125]	; 0x465
    39e0:	65526f74 	ldrbvs	r6, [r2, #-3956]	; 0xf74
    39e4:	73657266 	cmnvc	r5, #1610612742	; 0x60000006
    39e8:	754e5f68 	strbvc	r5, [lr, #-3944]	; 0xf68
    39ec:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    39f0:	434d4600 	movtmi	r4, #54784	; 0xd600
    39f4:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    39f8:	72745344 	rsbsvc	r5, r4, #68, 6	; 0x10000001
    39fc:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    3a00:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3a04:	5f434d46 	svcpl	0x00434d46
    3a08:	53524154 	cmppl	r2, #84, 2
    3a0c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3a10:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    3a14:	434d4600 	movtmi	r4, #54784	; 0xd600
    3a18:	776f525f 			; <UNDEFINED> instruction: 0x776f525f
    3a1c:	6c637943 	stclvs	9, cr7, [r3], #-268	; 0xfffffef4
    3a20:	6c654465 	cfstrdvs	mvd4, [r5], #-404	; 0xfffffe6c
    3a24:	46007961 	strmi	r7, [r0], -r1, ror #18
    3a28:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3a2c:	5253524f 	subspl	r5, r3, #-268435452	; 0xf0000004
    3a30:	6d434d41 	stclvs	13, cr4, [r3, #-260]	; 0xfffffefc
    3a34:	4d460064 	stclmi	0, cr0, [r6, #-400]	; 0xfffffe70
    3a38:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    3a3c:	444d4152 	strbmi	r4, [sp], #-338	; 0x152
    3a40:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    3a44:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3a48:	72575f43 	subsvc	r5, r7, #268	; 0x10c
    3a4c:	4f657469 	svcmi	0x00657469
    3a50:	61726570 	cmnvs	r2, r0, ror r5
    3a54:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    3a58:	434d4600 	movtmi	r4, #54784	; 0xd600
    3a5c:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    3a60:	696e4944 	stmdbvs	lr!, {r2, r6, r8, fp, lr}^
    3a64:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3a68:	75425f43 	strbvc	r5, [r2, #-3907]	; 0xf43
    3a6c:	72755473 	rsbsvc	r5, r5, #1929379840	; 0x73000000
    3a70:	6f72416e 	svcvs	0x0072416e
    3a74:	44646e75 	strbtmi	r6, [r4], #-3701	; 0xe75
    3a78:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
    3a7c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3a80:	5f434d46 	svcpl	0x00434d46
    3a84:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    3a88:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    3a8c:	6b6e6142 	blvs	1b9bf9c <_Min_Stack_Size+0x1b9bb9c>
    3a90:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    3a94:	74007265 	strvc	r7, [r0], #-613	; 0x265
    3a98:	6d70706d 	ldclvs	0, cr7, [r0, #-436]!	; 0xfffffe4c
    3a9c:	46006d65 	strmi	r6, [r0], -r5, ror #26
    3aa0:	575f434d 	ldrbpl	r4, [pc, -sp, asr #6]
    3aa4:	53746961 	cmnpl	r4, #1589248	; 0x184000
    3aa8:	616e6769 	cmnvs	lr, r9, ror #14
    3aac:	4d46006c 	stclmi	0, cr0, [r6, #-432]	; 0xfffffe50
    3ab0:	64415f43 	strbvs	r5, [r1], #-3907	; 0xf43
    3ab4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    3ab8:	6c6f4873 	stclvs	8, cr4, [pc], #-460	; 38f4 <_Min_Stack_Size+0x34f4>
    3abc:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    3ac0:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    3ac4:	754e5f43 	strbvc	r5, [lr, #-3907]	; 0xf43
    3ac8:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    3acc:	52435000 	subpl	r5, r3, #0
    3ad0:	43500032 	cmpmi	r0, #50	; 0x32
    3ad4:	50003352 	andpl	r3, r0, r2, asr r3
    3ad8:	00345243 	eorseq	r5, r4, r3, asr #4
    3adc:	5f434d46 	svcpl	0x00434d46
    3ae0:	41434350 	cmpmi	r3, r0, asr r3
    3ae4:	6e494452 	mcrvs	4, 2, r4, cr9, cr2, {2}
    3ae8:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3aec:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3af0:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    3af4:	50525f43 	subspl	r5, r2, r3, asr #30
    3af8:	616c6544 	cmnvs	ip, r4, asr #10
    3afc:	4d460079 	stclmi	0, cr0, [r6, #-484]	; 0xfffffe1c
    3b00:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    3b04:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    3b08:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    3b0c:	6d740073 	ldclvs	0, cr0, [r4, #-460]!	; 0xfffffe34
    3b10:	00317270 	eorseq	r7, r1, r0, ror r2
    3b14:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    3b18:	6d740032 	ldclvs	0, cr0, [r4, #-200]!	; 0xffffff38
    3b1c:	00337270 	eorseq	r7, r3, r0, ror r2
    3b20:	5f434d46 	svcpl	0x00434d46
    3b24:	41524453 	cmpmi	r2, r3, asr r4
    3b28:	6d6f434d 	stclvs	3, cr4, [pc, #-308]!	; 39fc <_Min_Stack_Size+0x35fc>
    3b2c:	646e616d 	strbtvs	r6, [lr], #-365	; 0x16d
    3b30:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3b34:	46007463 	strmi	r7, [r0], -r3, ror #8
    3b38:	445f434d 	ldrbmi	r4, [pc], #-845	; 3b40 <_Min_Stack_Size+0x3740>
    3b3c:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    3b40:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3b44:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    3b48:	54415000 	strbpl	r5, [r1], #-0
    3b4c:	50003254 	andpl	r3, r0, r4, asr r2
    3b50:	33545441 	cmpcc	r4, #1090519040	; 0x41000000
    3b54:	434d4600 	movtmi	r4, #54784	; 0xd600
    3b58:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 39e4 <_Min_Stack_Size+0x35e4>
    3b5c:	426e6d75 	rsbmi	r6, lr, #7488	; 0x1d40
    3b60:	4e737469 	cdpmi	4, 7, cr7, cr3, cr9, {3}
    3b64:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    3b68:	4d460072 	stclmi	0, cr0, [r6, #-456]	; 0xfffffe38
    3b6c:	63415f43 	movtvs	r5, #8003	; 0x1f43
    3b70:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    3b74:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    3b78:	434d4600 	movtmi	r4, #54784	; 0xd600
    3b7c:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
    3b80:	4d415253 	sfmmi	f5, 2, [r1, #-332]	; 0xfffffeb4
    3b84:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3b88:	434d4600 	movtmi	r4, #54784	; 0xd600
    3b8c:	524f4e5f 	subpl	r4, pc, #1520	; 0x5f0
    3b90:	4d415253 	sfmmi	f5, 2, [r1, #-332]	; 0xfffffeb4
    3b94:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    3b98:	6e49676e 	cdpvs	7, 4, cr6, cr9, cr14, {3}
    3b9c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3ba0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3ba4:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    3ba8:	61425f43 	cmpvs	r2, r3, asr #30
    3bac:	5f336b6e 	svcpl	0x00336b6e
    3bb0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3bb4:	00666544 	rsbeq	r6, r6, r4, asr #10
    3bb8:	5f434d46 	svcpl	0x00434d46
    3bbc:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    3bc0:	72754265 	rsbsvc	r4, r5, #1342177286	; 0x50000006
    3bc4:	46007473 			; <UNDEFINED> instruction: 0x46007473
    3bc8:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3bcc:	49444e41 	stmdbmi	r4, {r0, r6, r9, sl, fp, lr}^
    3bd0:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    3bd4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3bd8:	46006665 	strmi	r6, [r0], -r5, ror #12
    3bdc:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    3be0:	316b6e61 	cmncc	fp, r1, ror #28
    3be4:	79545f45 	ldmdbvc	r4, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
    3be8:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3bec:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    3bf0:	43505f43 	cmpmi	r0, #268	; 0x10c
    3bf4:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    3bf8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3bfc:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    3c00:	46007469 	strmi	r7, [r0], -r9, ror #8
    3c04:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    3c08:	006b6e61 	rsbeq	r6, fp, r1, ror #28
    3c0c:	5f434d46 	svcpl	0x00434d46
    3c10:	70617257 	rsbvc	r7, r1, r7, asr r2
    3c14:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    3c18:	434d4600 	movtmi	r4, #54784	; 0xd600
    3c1c:	6e61425f 	mcrvs	2, 3, r4, cr1, cr15, {2}
    3c20:	545f346b 	ldrbpl	r3, [pc], #-1131	; 3c28 <_Min_Stack_Size+0x3828>
    3c24:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3c28:	46006665 	strmi	r6, [r0], -r5, ror #12
    3c2c:	485f434d 	ldmdami	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3c30:	53646c6f 	cmnpl	r4, #28416	; 0x6f00
    3c34:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3c38:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    3c3c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3c40:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    3c44:	696e4944 	stmdbvs	lr!, {r2, r6, r8, fp, lr}^
    3c48:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    3c4c:	00746375 	rsbseq	r6, r4, r5, ror r3
    3c50:	5f434d46 	svcpl	0x00434d46
    3c54:	41434350 	cmpmi	r3, r0, asr r3
    3c58:	6d434452 	cfstrdvs	mvd4, [r3, #-328]	; 0xfffffeb8
    3c5c:	6d740064 	ldclvs	0, cr0, [r4, #-400]!	; 0xfffffe70
    3c60:	32727370 	rsbscc	r7, r2, #112, 6	; 0xc0000001
    3c64:	434d4600 	movtmi	r4, #54784	; 0xd600
    3c68:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 3af4 <_Min_Stack_Size+0x36f4>
    3c6c:	646e616d 	strbtvs	r6, [lr], #-365	; 0x16d
    3c70:	67726154 			; <UNDEFINED> instruction: 0x67726154
    3c74:	46007465 	strmi	r7, [r0], -r5, ror #8
    3c78:	475f434d 	ldrbmi	r4, [pc, -sp, asr #6]
    3c7c:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    3c80:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    3c84:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3c88:	434d4600 	movtmi	r4, #54784	; 0xd600
    3c8c:	6464415f 	strbtvs	r4, [r4], #-351	; 0x15f
    3c90:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    3c94:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    3c98:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    3c9c:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    3ca0:	6f525f43 	svcvs	0x00525f43
    3ca4:	74694277 	strbtvc	r4, [r9], #-631	; 0x277
    3ca8:	6d754e73 	ldclvs	14, cr4, [r5, #-460]!	; 0xfffffe34
    3cac:	00726562 	rsbseq	r6, r2, r2, ror #10
    3cb0:	54544150 	ldrbpl	r4, [r4], #-336	; 0x150
    3cb4:	4d460034 	stclmi	0, cr0, [r6, #-208]	; 0xffffff30
    3cb8:	654d5f43 	strbvs	r5, [sp, #-3907]	; 0xf43
    3cbc:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3cc0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3cc4:	434d4600 	movtmi	r4, #54784	; 0xd600
    3cc8:	6165525f 	cmnvs	r5, pc, asr r2
    3ccc:	69725764 	ldmdbvs	r2!, {r2, r5, r6, r8, r9, sl, ip, lr}^
    3cd0:	69546574 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3cd4:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    3cd8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3cdc:	42007463 	andmi	r7, r0, #1660944384	; 0x63000000
    3ce0:	00525457 	subseq	r5, r2, r7, asr r4
    3ce4:	5f434d46 	svcpl	0x00434d46
    3ce8:	666c6553 			; <UNDEFINED> instruction: 0x666c6553
    3cec:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
    3cf0:	54687365 	strbtpl	r7, [r8], #-869	; 0x365
    3cf4:	00656d69 	rsbeq	r6, r5, r9, ror #26
    3cf8:	5f434d46 	svcpl	0x00434d46
    3cfc:	61656c43 	cmnvs	r5, r3, asr #24
    3d00:	50544972 	subspl	r4, r4, r2, ror r9
    3d04:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    3d08:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    3d0c:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3d10:	61575f43 	cmpvs	r7, r3, asr #30
    3d14:	65537469 	ldrbvs	r7, [r3, #-1129]	; 0x469
    3d18:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0x574
    3d1c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    3d20:	5f434d46 	svcpl	0x00434d46
    3d24:	444e414e 	strbmi	r4, [lr], #-334	; 0x14e
    3d28:	43434345 	movtmi	r4, #13125	; 0x3345
    3d2c:	4600646d 	strmi	r6, [r0], -sp, ror #8
    3d30:	445f434d 	ldrbmi	r4, [pc], #-845	; 3d38 <_Min_Stack_Size+0x3938>
    3d34:	4c617461 	cfstrdmi	mvd7, [r1], #-388	; 0xfffffe7c
    3d38:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
    3d3c:	46007963 	strmi	r7, [r0], -r3, ror #18
    3d40:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    3d44:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    3d48:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    3d4c:	54646e61 	strbtpl	r6, [r4], #-3681	; 0xe61
    3d50:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3d54:	46006665 	strmi	r6, [r0], -r5, ror #12
    3d58:	4c5f434d 	mrrcmi	3, 4, r4, pc, cr13	; <UNPREDICTABLE>
    3d5c:	5464616f 	strbtpl	r6, [r4], #-367	; 0x16f
    3d60:	7463416f 	strbtvc	r4, [r3], #-367	; 0x16f
    3d64:	44657669 	strbtmi	r7, [r5], #-1641	; 0x669
    3d68:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    3d6c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3d70:	4344535f 	movtmi	r5, #17247	; 0x435f
    3d74:	6b636f6c 	blvs	18dfb2c <_Min_Stack_Size+0x18df72c>
    3d78:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3d7c:	7400646f 	strvc	r6, [r0], #-1135	; 0x46f
    3d80:	7273706d 	rsbsvc	r7, r3, #109	; 0x6d
    3d84:	434d4600 	movtmi	r4, #54784	; 0xd600
    3d88:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    3d8c:	00434345 	subeq	r4, r3, r5, asr #6
    3d90:	5f434d46 	svcpl	0x00434d46
    3d94:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    3d98:	73727542 	cmnvc	r2, #276824064	; 0x10800000
    3d9c:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3da0:	43455f43 	movtmi	r5, #24387	; 0x5f43
    3da4:	67615043 	strbvs	r5, [r1, -r3, asr #32]!
    3da8:	7a695365 	bvc	1a58b44 <_Min_Stack_Size+0x1a58744>
    3dac:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    3db0:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    3db4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3db8:	46006769 	strmi	r6, [r0], -r9, ror #14
    3dbc:	505f434d 	subspl	r4, pc, sp, asr #6
    3dc0:	52414343 	subpl	r4, r1, #201326593	; 0xc000001
    3dc4:	696e4944 	stmdbvs	lr!, {r2, r6, r8, fp, lr}^
    3dc8:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    3dcc:	00746375 	rsbseq	r6, r4, r5, ror r3
    3dd0:	5f434d46 	svcpl	0x00434d46
    3dd4:	41524453 	cmpmi	r2, r3, asr r4
    3dd8:	6d69544d 	cfstrdvs	mvd5, [r9, #-308]!	; 0xfffffecc
    3ddc:	49676e69 	stmdbmi	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    3de0:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    3de4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3de8:	46006665 	strmi	r6, [r0], -r5, ror #12
    3dec:	455f434d 	ldrbmi	r4, [pc, #-845]	; 3aa7 <_Min_Stack_Size+0x36a7>
    3df0:	46004343 	strmi	r4, [r0], -r3, asr #6
    3df4:	4d5f434d 	ldclmi	3, cr4, [pc, #-308]	; 3cc8 <_Min_Stack_Size+0x38c8>
    3df8:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    3dfc:	74614479 	strbtvc	r4, [r1], #-1145	; 0x479
    3e00:	64695761 	strbtvs	r5, [r9], #-1889	; 0x761
    3e04:	46006874 			; <UNDEFINED> instruction: 0x46006874
    3e08:	435f434d 	cmpmi	pc, #872415233	; 0x34000001
    3e0c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    3e10:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    3e14:	46003472 			; <UNDEFINED> instruction: 0x46003472
    3e18:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    3e1c:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    3e20:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3e24:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    3e28:	46007469 	strmi	r7, [r0], -r9, ror #8
    3e2c:	575f434d 	ldrbpl	r4, [pc, -sp, asr #6]
    3e30:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    3e34:	746f7250 	strbtvc	r7, [pc], #-592	; 3e3c <_Min_Stack_Size+0x3a3c>
    3e38:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    3e3c:	46006e6f 	strmi	r6, [r0], -pc, ror #28
    3e40:	495f434d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3e44:	4d460054 	stclmi	0, cr0, [r6, #-336]	; 0xfffffeb0
    3e48:	73415f43 	movtvc	r5, #8003	; 0x1f43
    3e4c:	68636e79 	stmdavs	r3!, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}^
    3e50:	6f6e6f72 	svcvs	0x006e6f72
    3e54:	61577375 	cmpvs	r7, r5, ror r3
    3e58:	46007469 	strmi	r7, [r0], -r9, ror #8
    3e5c:	435f434d 	cmpmi	pc, #872415233	; 0x34000001
    3e60:	616d6d6f 	cmnvs	sp, pc, ror #26
    3e64:	6f4d646e 	svcvs	0x004d646e
    3e68:	69006564 	stmdbvs	r0, {r2, r5, r6, r8, sl, sp, lr}
    3e6c:	616e6574 	smcvs	58964	; 0xe654
    3e70:	00656c62 	rsbeq	r6, r5, r2, ror #24
    3e74:	5f434d46 	svcpl	0x00434d46
    3e78:	70534f49 	subsvc	r4, r3, r9, asr #30
    3e7c:	54656361 	strbtpl	r6, [r5], #-865	; 0x361
    3e80:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
    3e84:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    3e88:	00746375 	rsbseq	r6, r4, r5, ror r3
    3e8c:	5f434d46 	svcpl	0x00434d46
    3e90:	41524453 	cmpmi	r2, r3, asr r4
    3e94:	6d69544d 	cfstrdvs	mvd5, [r9, #-308]!	; 0xfffffecc
    3e98:	53676e69 	cmnpl	r7, #1680	; 0x690
    3e9c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3ea0:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3ea4:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
    3ea8:	46004741 	strmi	r4, [r0], -r1, asr #14
    3eac:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3eb0:	43444e41 	movtmi	r4, #20033	; 0x4e41
    3eb4:	5300646d 	movwpl	r6, #1133	; 0x46d
    3eb8:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    3ebc:	6e61425f 	mcrvs	2, 3, r4, cr1, cr15, {2}
    3ec0:	4d46006b 	stclmi	0, cr0, [r6, #-428]	; 0xfffffe54
    3ec4:	61575f43 	cmpvs	r7, r3, asr #30
    3ec8:	65667469 	strbvs	r7, [r6, #-1129]!	; 0x469
    3ecc:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    3ed0:	49500065 	ldmdbmi	r0, {r0, r2, r5, r6}^
    3ed4:	4600344f 	strmi	r3, [r0], -pc, asr #8
    3ed8:	445f434d 	ldrbmi	r4, [pc], #-845	; 3ee0 <_Min_Stack_Size+0x3ae0>
    3edc:	41617461 	cmnmi	r1, r1, ror #8
    3ee0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    3ee4:	754d7373 	strbvc	r7, [sp, #-883]	; 0x373
    3ee8:	4d460078 	stclmi	0, cr0, [r6, #-480]	; 0xfffffe20
    3eec:	4c435f43 	mcrrmi	15, 4, r5, r3, cr3
    3ef0:	7669444b 	strbtvc	r4, [r9], -fp, asr #8
    3ef4:	6f697369 	svcvs	0x00697369
    3ef8:	5442006e 	strbpl	r0, [r2], #-110	; 0x6e
    3efc:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
    3f00:	495f474e 	ldmdbmi	pc, {r1, r2, r3, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    3f04:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    3f08:	00676966 	rsbeq	r6, r7, r6, ror #18
    3f0c:	5f474e52 	svcpl	0x00474e52
    3f10:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3f14:	5f474e52 	svcpl	0x00474e52
    3f18:	52005449 	andpl	r5, r0, #1224736768	; 0x49000000
    3f1c:	475f474e 	ldrbmi	r4, [pc, -lr, asr #14]
    3f20:	61527465 	cmpvs	r2, r5, ror #8
    3f24:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; 3d74 <_Min_Stack_Size+0x3974>
    3f28:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    3f2c:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    3f30:	445f474e 	ldrbmi	r4, [pc], #-1870	; 3f38 <_Min_Stack_Size+0x3b38>
    3f34:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    3f38:	4e520074 	mrcmi	0, 2, r0, cr2, cr4, {3}
    3f3c:	79545f47 	ldmdbvc	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    3f40:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3f44:	4e520066 	cdpmi	0, 5, cr0, cr2, cr6, {3}
    3f48:	4c465f47 	mcrrmi	15, 4, r5, r6, cr7
    3f4c:	43004741 	movwmi	r4, #1857	; 0x741
    3f50:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3f54:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3f58:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3f5c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3f60:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3f64:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3f68:	2f736569 	svccs	0x00736569
    3f6c:	334d5453 	movtcc	r5, #54355	; 0xd453
    3f70:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    3f74:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    3f78:	72655064 	rsbvc	r5, r5, #100	; 0x64
    3f7c:	5f687069 	svcpl	0x00687069
    3f80:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3f84:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    3f88:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    3f8c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3f90:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3f94:	676e725f 			; <UNDEFINED> instruction: 0x676e725f
    3f98:	5200632e 	andpl	r6, r0, #-1207959552	; 0xb8000000
    3f9c:	435f474e 	cmpmi	pc, #20447232	; 0x1380000
    3fa0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    3fa4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    3fa8:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    3fac:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    3fb0:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    3fb4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3fb8:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    3fbc:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    3fc0:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    3fc4:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    3fc8:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    3fcc:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
    3fd0:	475f474e 	ldrbmi	r4, [pc, -lr, asr #14]
    3fd4:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    3fd8:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    3fdc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0924>
   4:	2e342820 	cdpcs	8, 3, cr2, cr4, cr0, {1}
   8:	2d322e38 	ldccs	14, cr2, [r2, #-224]!	; 0xffffff20
   c:	62753431 	rsbsvs	r3, r5, #822083584	; 0x31000000
  10:	75746e75 	ldrbvc	r6, [r4, #-3701]!	; 0xe75
  14:	29362b31 	ldmdbcs	r6!, {r0, r4, r5, r8, r9, fp, sp}
  18:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
  1c:	Address 0x000000000000001c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000010 	andeq	r0, r0, r0, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	08000208 	stmdaeq	r0, {r3, r9}
      1c:	00000122 	andeq	r0, r0, r2, lsr #2
      20:	00080e61 	andeq	r0, r8, r1, ror #28
      24:	0000000c 	andeq	r0, r0, ip
      28:	00000000 	andeq	r0, r0, r0
      2c:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
      30:	00000092 	muleq	r0, r2, r0
      34:	0000000c 	andeq	r0, r0, ip
      38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      3c:	7c020001 	stcvc	0, cr0, [r2], {1}
      40:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      44:	00000014 	andeq	r0, r0, r4, lsl r0
      48:	00000034 	andeq	r0, r0, r4, lsr r0
      4c:	080003c0 	stmdaeq	r0, {r6, r7, r8, r9}
      50:	00000016 	andeq	r0, r0, r6, lsl r0
      54:	83080e41 	movwhi	r0, #36417	; 0x8e41
      58:	00018e02 	andeq	r8, r1, r2, lsl #28
      5c:	00000018 	andeq	r0, r0, r8, lsl r0
      60:	00000034 	andeq	r0, r0, r4, lsr r0
      64:	080003d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9}
      68:	00000056 	andeq	r0, r0, r6, asr r0
      6c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
      70:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      74:	200e4301 	andcs	r4, lr, r1, lsl #6
      78:	00000018 	andeq	r0, r0, r8, lsl r0
      7c:	00000034 	andeq	r0, r0, r4, lsr r0
      80:	08000430 	stmdaeq	r0, {r4, r5, sl}
      84:	00000044 	andeq	r0, r0, r4, asr #32
      88:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      8c:	42018e02 	andmi	r8, r1, #2, 28
      90:	0000180e 	andeq	r1, r0, lr, lsl #16
      94:	00000014 	andeq	r0, r0, r4, lsl r0
      98:	00000034 	andeq	r0, r0, r4, lsr r0
      9c:	08000474 	stmdaeq	r0, {r2, r4, r5, r6, sl}
      a0:	0000002a 	andeq	r0, r0, sl, lsr #32
      a4:	83080e41 	movwhi	r0, #36417	; 0x8e41
      a8:	00018e02 	andeq	r8, r1, r2, lsl #28
      ac:	00000014 	andeq	r0, r0, r4, lsl r0
      b0:	00000034 	andeq	r0, r0, r4, lsr r0
      b4:	080004a0 	stmdaeq	r0, {r5, r7, sl}
      b8:	0000000c 	andeq	r0, r0, ip
      bc:	83080e41 	movwhi	r0, #36417	; 0x8e41
      c0:	00018e02 	andeq	r8, r1, r2, lsl #28
      c4:	0000000c 	andeq	r0, r0, ip
      c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      cc:	7c020001 	stcvc	0, cr0, [r2], {1}
      d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      d4:	0000000c 	andeq	r0, r0, ip
      d8:	000000c4 	andeq	r0, r0, r4, asr #1
      dc:	080004ac 	stmdaeq	r0, {r2, r3, r5, r7, sl}
      e0:	00000014 	andeq	r0, r0, r4, lsl r0
      e4:	00000018 	andeq	r0, r0, r8, lsl r0
      e8:	000000c4 	andeq	r0, r0, r4, asr #1
      ec:	080004c0 	stmdaeq	r0, {r6, r7, sl}
      f0:	00000080 	andeq	r0, r0, r0, lsl #1
      f4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
      f8:	86028503 	strhi	r8, [r2], -r3, lsl #10
      fc:	00000001 	andeq	r0, r0, r1
     100:	0000000c 	andeq	r0, r0, ip
     104:	000000c4 	andeq	r0, r0, r4, asr #1
     108:	08000540 	stmdaeq	r0, {r6, r8, sl}
     10c:	00000016 	andeq	r0, r0, r6, lsl r0
     110:	0000000c 	andeq	r0, r0, ip
     114:	000000c4 	andeq	r0, r0, r4, asr #1
     118:	08000558 	stmdaeq	r0, {r3, r4, r6, r8, sl}
     11c:	0000001a 	andeq	r0, r0, sl, lsl r0
     120:	0000000c 	andeq	r0, r0, ip
     124:	000000c4 	andeq	r0, r0, r4, asr #1
     128:	08000574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl}
     12c:	0000001a 	andeq	r0, r0, sl, lsl r0
     130:	0000000c 	andeq	r0, r0, ip
     134:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     138:	7c020001 	stcvc	0, cr0, [r2], {1}
     13c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     140:	00000014 	andeq	r0, r0, r4, lsl r0
     144:	00000130 	andeq	r0, r0, r0, lsr r1
     148:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
     14c:	0000016e 	andeq	r0, r0, lr, ror #2
     150:	83080e41 	movwhi	r0, #36417	; 0x8e41
     154:	00018e02 	andeq	r8, r1, r2, lsl #28
     158:	00000020 	andeq	r0, r0, r0, lsr #32
     15c:	00000130 	andeq	r0, r0, r0, lsr r1
     160:	08000700 	stmdaeq	r0, {r8, r9, sl}
     164:	000000c0 	andeq	r0, r0, r0, asr #1
     168:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xe43
     16c:	86068507 	strhi	r8, [r6], -r7, lsl #10
     170:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     174:	8a028903 	bhi	a2588 <_Min_Stack_Size+0xa2188>
     178:	00000001 	andeq	r0, r0, r1
     17c:	0000000c 	andeq	r0, r0, ip
     180:	00000130 	andeq	r0, r0, r0, lsr r1
     184:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
     188:	00000012 	andeq	r0, r0, r2, lsl r0
     18c:	00000010 	andeq	r0, r0, r0, lsl r0
     190:	00000130 	andeq	r0, r0, r0, lsr r1
     194:	080007d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl}
     198:	00000024 	andeq	r0, r0, r4, lsr #32
     19c:	00080e41 	andeq	r0, r8, r1, asr #28
     1a0:	0000000c 	andeq	r0, r0, ip
     1a4:	00000130 	andeq	r0, r0, r0, lsr r1
     1a8:	080007f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     1ac:	0000000c 	andeq	r0, r0, ip
     1b0:	0000000c 	andeq	r0, r0, ip
     1b4:	00000130 	andeq	r0, r0, r0, lsr r1
     1b8:	08000804 	stmdaeq	r0, {r2, fp}
     1bc:	00000006 	andeq	r0, r0, r6
     1c0:	0000000c 	andeq	r0, r0, ip
     1c4:	00000130 	andeq	r0, r0, r0, lsr r1
     1c8:	0800080c 	stmdaeq	r0, {r2, r3, fp}
     1cc:	0000000c 	andeq	r0, r0, ip
     1d0:	0000000c 	andeq	r0, r0, ip
     1d4:	00000130 	andeq	r0, r0, r0, lsr r1
     1d8:	08000818 	stmdaeq	r0, {r3, r4, fp}
     1dc:	00000006 	andeq	r0, r0, r6
     1e0:	0000000c 	andeq	r0, r0, ip
     1e4:	00000130 	andeq	r0, r0, r0, lsr r1
     1e8:	08000820 	stmdaeq	r0, {r5, fp}
     1ec:	00000004 	andeq	r0, r0, r4
     1f0:	0000000c 	andeq	r0, r0, ip
     1f4:	00000130 	andeq	r0, r0, r0, lsr r1
     1f8:	08000824 	stmdaeq	r0, {r2, r5, fp}
     1fc:	00000004 	andeq	r0, r0, r4
     200:	0000000c 	andeq	r0, r0, ip
     204:	00000130 	andeq	r0, r0, r0, lsr r1
     208:	08000828 	stmdaeq	r0, {r3, r5, fp}
     20c:	0000000a 	andeq	r0, r0, sl
     210:	0000000c 	andeq	r0, r0, ip
     214:	00000130 	andeq	r0, r0, r0, lsr r1
     218:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
     21c:	00000004 	andeq	r0, r0, r4
     220:	0000000c 	andeq	r0, r0, ip
     224:	00000130 	andeq	r0, r0, r0, lsr r1
     228:	08000838 	stmdaeq	r0, {r3, r4, r5, fp}
     22c:	00000008 	andeq	r0, r0, r8
     230:	00000014 	andeq	r0, r0, r4, lsl r0
     234:	00000130 	andeq	r0, r0, r0, lsr r1
     238:	08000840 	stmdaeq	r0, {r6, fp}
     23c:	00000028 	andeq	r0, r0, r8, lsr #32
     240:	84040e46 	strhi	r0, [r4], #-3654	; 0xe46
     244:	00000001 	andeq	r0, r0, r1
     248:	0000000c 	andeq	r0, r0, ip
     24c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     250:	7c020001 	stcvc	0, cr0, [r2], {1}
     254:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     258:	00000014 	andeq	r0, r0, r4, lsl r0
     25c:	00000248 	andeq	r0, r0, r8, asr #4
     260:	08000868 	stmdaeq	r0, {r3, r5, r6, fp}
     264:	00000054 	andeq	r0, r0, r4, asr r0
     268:	84080e49 	strhi	r0, [r8], #-3657	; 0xe49
     26c:	00018502 	andeq	r8, r1, r2, lsl #10
     270:	0000000c 	andeq	r0, r0, ip
     274:	00000248 	andeq	r0, r0, r8, asr #4
     278:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
     27c:	00000010 	andeq	r0, r0, r0, lsl r0
     280:	00000010 	andeq	r0, r0, r0, lsl r0
     284:	00000248 	andeq	r0, r0, r8, asr #4
     288:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
     28c:	0000003e 	andeq	r0, r0, lr, lsr r0
     290:	00080e41 	andeq	r0, r8, r1, asr #28
     294:	0000000c 	andeq	r0, r0, ip
     298:	00000248 	andeq	r0, r0, r8, asr #4
     29c:	0800090c 	stmdaeq	r0, {r2, r3, r8, fp}
     2a0:	00000016 	andeq	r0, r0, r6, lsl r0
     2a4:	0000000c 	andeq	r0, r0, ip
     2a8:	00000248 	andeq	r0, r0, r8, asr #4
     2ac:	08000924 	stmdaeq	r0, {r2, r5, r8, fp}
     2b0:	0000000a 	andeq	r0, r0, sl
     2b4:	0000000c 	andeq	r0, r0, ip
     2b8:	00000248 	andeq	r0, r0, r8, asr #4
     2bc:	08000930 	stmdaeq	r0, {r4, r5, r8, fp}
     2c0:	00000022 	andeq	r0, r0, r2, lsr #32
     2c4:	0000000c 	andeq	r0, r0, ip
     2c8:	00000248 	andeq	r0, r0, r8, asr #4
     2cc:	08000954 	stmdaeq	r0, {r2, r4, r6, r8, fp}
     2d0:	0000000c 	andeq	r0, r0, ip
     2d4:	00000014 	andeq	r0, r0, r4, lsl r0
     2d8:	00000248 	andeq	r0, r0, r8, asr #4
     2dc:	08000960 	stmdaeq	r0, {r5, r6, r8, fp}
     2e0:	00000026 	andeq	r0, r0, r6, lsr #32
     2e4:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
     2e8:	00000001 	andeq	r0, r0, r1
     2ec:	0000000c 	andeq	r0, r0, ip
     2f0:	00000248 	andeq	r0, r0, r8, asr #4
     2f4:	08000988 	stmdaeq	r0, {r3, r7, r8, fp}
     2f8:	0000000a 	andeq	r0, r0, sl
     2fc:	0000000c 	andeq	r0, r0, ip
     300:	00000248 	andeq	r0, r0, r8, asr #4
     304:	08000994 	stmdaeq	r0, {r2, r4, r7, r8, fp}
     308:	00000018 	andeq	r0, r0, r8, lsl r0
     30c:	0000000c 	andeq	r0, r0, ip
     310:	00000248 	andeq	r0, r0, r8, asr #4
     314:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
     318:	0000000a 	andeq	r0, r0, sl
     31c:	0000000c 	andeq	r0, r0, ip
     320:	00000248 	andeq	r0, r0, r8, asr #4
     324:	080009b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp}
     328:	00000018 	andeq	r0, r0, r8, lsl r0
     32c:	0000000c 	andeq	r0, r0, ip
     330:	00000248 	andeq	r0, r0, r8, asr #4
     334:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
     338:	0000000a 	andeq	r0, r0, sl
     33c:	0000000c 	andeq	r0, r0, ip
     340:	00000248 	andeq	r0, r0, r8, asr #4
     344:	080009dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp}
     348:	0000000a 	andeq	r0, r0, sl
     34c:	0000000c 	andeq	r0, r0, ip
     350:	00000248 	andeq	r0, r0, r8, asr #4
     354:	080009e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp}
     358:	00000016 	andeq	r0, r0, r6, lsl r0
     35c:	0000000c 	andeq	r0, r0, ip
     360:	00000248 	andeq	r0, r0, r8, asr #4
     364:	08000a00 	stmdaeq	r0, {r9, fp}
     368:	00000016 	andeq	r0, r0, r6, lsl r0
     36c:	0000000c 	andeq	r0, r0, ip
     370:	00000248 	andeq	r0, r0, r8, asr #4
     374:	08000a18 	stmdaeq	r0, {r3, r4, r9, fp}
     378:	00000014 	andeq	r0, r0, r4, lsl r0
     37c:	0000000c 	andeq	r0, r0, ip
     380:	00000248 	andeq	r0, r0, r8, asr #4
     384:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
     388:	00000010 	andeq	r0, r0, r0, lsl r0
     38c:	0000000c 	andeq	r0, r0, ip
     390:	00000248 	andeq	r0, r0, r8, asr #4
     394:	08000a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp}
     398:	00000014 	andeq	r0, r0, r4, lsl r0
     39c:	0000000c 	andeq	r0, r0, ip
     3a0:	00000248 	andeq	r0, r0, r8, asr #4
     3a4:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
     3a8:	00000014 	andeq	r0, r0, r4, lsl r0
     3ac:	0000000c 	andeq	r0, r0, ip
     3b0:	00000248 	andeq	r0, r0, r8, asr #4
     3b4:	08000a64 	stmdaeq	r0, {r2, r5, r6, r9, fp}
     3b8:	00000016 	andeq	r0, r0, r6, lsl r0
     3bc:	00000014 	andeq	r0, r0, r4, lsl r0
     3c0:	00000248 	andeq	r0, r0, r8, asr #4
     3c4:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
     3c8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     3cc:	84040e45 	strhi	r0, [r4], #-3653	; 0xe45
     3d0:	00000001 	andeq	r0, r0, r1
     3d4:	0000000c 	andeq	r0, r0, ip
     3d8:	00000248 	andeq	r0, r0, r8, asr #4
     3dc:	08000b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp}
     3e0:	00000038 	andeq	r0, r0, r8, lsr r0
     3e4:	0000000c 	andeq	r0, r0, ip
     3e8:	00000248 	andeq	r0, r0, r8, asr #4
     3ec:	08000b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp}
     3f0:	0000000c 	andeq	r0, r0, ip
     3f4:	0000000c 	andeq	r0, r0, ip
     3f8:	00000248 	andeq	r0, r0, r8, asr #4
     3fc:	08000b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp}
     400:	0000000c 	andeq	r0, r0, ip
     404:	0000000c 	andeq	r0, r0, ip
     408:	00000248 	andeq	r0, r0, r8, asr #4
     40c:	08000b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp}
     410:	0000000c 	andeq	r0, r0, ip
     414:	0000000c 	andeq	r0, r0, ip
     418:	00000248 	andeq	r0, r0, r8, asr #4
     41c:	08000b88 	stmdaeq	r0, {r3, r7, r8, r9, fp}
     420:	0000001a 	andeq	r0, r0, sl, lsl r0
     424:	0000000c 	andeq	r0, r0, ip
     428:	00000248 	andeq	r0, r0, r8, asr #4
     42c:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
     430:	0000001c 	andeq	r0, r0, ip, lsl r0
     434:	0000000c 	andeq	r0, r0, ip
     438:	00000248 	andeq	r0, r0, r8, asr #4
     43c:	08000bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp}
     440:	00000018 	andeq	r0, r0, r8, lsl r0
     444:	0000000c 	andeq	r0, r0, ip
     448:	00000248 	andeq	r0, r0, r8, asr #4
     44c:	08000bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp}
     450:	00000018 	andeq	r0, r0, r8, lsl r0
     454:	0000000c 	andeq	r0, r0, ip
     458:	00000248 	andeq	r0, r0, r8, asr #4
     45c:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}
     460:	00000018 	andeq	r0, r0, r8, lsl r0
     464:	0000000c 	andeq	r0, r0, ip
     468:	00000248 	andeq	r0, r0, r8, asr #4
     46c:	08000c08 	stmdaeq	r0, {r3, sl, fp}
     470:	0000000c 	andeq	r0, r0, ip
     474:	0000000c 	andeq	r0, r0, ip
     478:	00000248 	andeq	r0, r0, r8, asr #4
     47c:	08000c14 	stmdaeq	r0, {r2, r4, sl, fp}
     480:	0000001a 	andeq	r0, r0, sl, lsl r0
     484:	0000000c 	andeq	r0, r0, ip
     488:	00000248 	andeq	r0, r0, r8, asr #4
     48c:	08000c30 	stmdaeq	r0, {r4, r5, sl, fp}
     490:	0000001a 	andeq	r0, r0, sl, lsl r0
     494:	0000000c 	andeq	r0, r0, ip
     498:	00000248 	andeq	r0, r0, r8, asr #4
     49c:	08000c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp}
     4a0:	0000001a 	andeq	r0, r0, sl, lsl r0
     4a4:	0000000c 	andeq	r0, r0, ip
     4a8:	00000248 	andeq	r0, r0, r8, asr #4
     4ac:	08000c68 	stmdaeq	r0, {r3, r5, r6, sl, fp}
     4b0:	0000001a 	andeq	r0, r0, sl, lsl r0
     4b4:	0000000c 	andeq	r0, r0, ip
     4b8:	00000248 	andeq	r0, r0, r8, asr #4
     4bc:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
     4c0:	0000001a 	andeq	r0, r0, sl, lsl r0
     4c4:	0000000c 	andeq	r0, r0, ip
     4c8:	00000248 	andeq	r0, r0, r8, asr #4
     4cc:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
     4d0:	0000001a 	andeq	r0, r0, sl, lsl r0
     4d4:	0000000c 	andeq	r0, r0, ip
     4d8:	00000248 	andeq	r0, r0, r8, asr #4
     4dc:	08000cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp}
     4e0:	0000001a 	andeq	r0, r0, sl, lsl r0
     4e4:	0000000c 	andeq	r0, r0, ip
     4e8:	00000248 	andeq	r0, r0, r8, asr #4
     4ec:	08000cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp}
     4f0:	0000001a 	andeq	r0, r0, sl, lsl r0
     4f4:	0000000c 	andeq	r0, r0, ip
     4f8:	00000248 	andeq	r0, r0, r8, asr #4
     4fc:	08000cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp}
     500:	0000001a 	andeq	r0, r0, sl, lsl r0
     504:	0000000c 	andeq	r0, r0, ip
     508:	00000248 	andeq	r0, r0, r8, asr #4
     50c:	08000d10 	stmdaeq	r0, {r4, r8, sl, fp}
     510:	0000001a 	andeq	r0, r0, sl, lsl r0
     514:	0000000c 	andeq	r0, r0, ip
     518:	00000248 	andeq	r0, r0, r8, asr #4
     51c:	08000d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp}
     520:	0000001a 	andeq	r0, r0, sl, lsl r0
     524:	0000000c 	andeq	r0, r0, ip
     528:	00000248 	andeq	r0, r0, r8, asr #4
     52c:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
     530:	0000001a 	andeq	r0, r0, sl, lsl r0
     534:	0000000c 	andeq	r0, r0, ip
     538:	00000248 	andeq	r0, r0, r8, asr #4
     53c:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
     540:	0000001a 	andeq	r0, r0, sl, lsl r0
     544:	0000000c 	andeq	r0, r0, ip
     548:	00000248 	andeq	r0, r0, r8, asr #4
     54c:	08000d80 	stmdaeq	r0, {r7, r8, sl, fp}
     550:	0000001a 	andeq	r0, r0, sl, lsl r0
     554:	0000000c 	andeq	r0, r0, ip
     558:	00000248 	andeq	r0, r0, r8, asr #4
     55c:	08000d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp}
     560:	0000001a 	andeq	r0, r0, sl, lsl r0
     564:	0000000c 	andeq	r0, r0, ip
     568:	00000248 	andeq	r0, r0, r8, asr #4
     56c:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
     570:	0000001a 	andeq	r0, r0, sl, lsl r0
     574:	0000000c 	andeq	r0, r0, ip
     578:	00000248 	andeq	r0, r0, r8, asr #4
     57c:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
     580:	0000003c 	andeq	r0, r0, ip, lsr r0
     584:	0000000c 	andeq	r0, r0, ip
     588:	00000248 	andeq	r0, r0, r8, asr #4
     58c:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
     590:	00000012 	andeq	r0, r0, r2, lsl r0
     594:	0000000c 	andeq	r0, r0, ip
     598:	00000248 	andeq	r0, r0, r8, asr #4
     59c:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
     5a0:	00000014 	andeq	r0, r0, r4, lsl r0
     5a4:	0000000c 	andeq	r0, r0, ip
     5a8:	00000248 	andeq	r0, r0, r8, asr #4
     5ac:	08000e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp}
     5b0:	0000000c 	andeq	r0, r0, ip
     5b4:	0000000c 	andeq	r0, r0, ip
     5b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     5bc:	7c020001 	stcvc	0, cr0, [r2], {1}
     5c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     5c4:	00000014 	andeq	r0, r0, r4, lsl r0
     5c8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     5cc:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
     5d0:	0000011c 	andeq	r0, r0, ip, lsl r1
     5d4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     5d8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     5e0:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     5e4:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
     5e8:	000000c8 	andeq	r0, r0, r8, asr #1
     5ec:	84140e46 	ldrhi	r0, [r4], #-3654	; 0xe46
     5f0:	86048505 	strhi	r8, [r4], -r5, lsl #10
     5f4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     5f8:	280e5c01 	stmdacs	lr, {r0, sl, fp, ip, lr}
     5fc:	0000000c 	andeq	r0, r0, ip
     600:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     604:	08001028 	stmdaeq	r0, {r3, r5, ip}
     608:	00000016 	andeq	r0, r0, r6, lsl r0
     60c:	00000014 	andeq	r0, r0, r4, lsl r0
     610:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     614:	08001040 	stmdaeq	r0, {r6, ip}
     618:	00000024 	andeq	r0, r0, r4, lsr #32
     61c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     620:	00018502 	andeq	r8, r1, r2, lsl #10
     624:	0000000c 	andeq	r0, r0, ip
     628:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     62c:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
     630:	0000000c 	andeq	r0, r0, ip
     634:	0000000c 	andeq	r0, r0, ip
     638:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     63c:	08001070 	stmdaeq	r0, {r4, r5, r6, ip}
     640:	0000001a 	andeq	r0, r0, sl, lsl r0
     644:	0000000c 	andeq	r0, r0, ip
     648:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     64c:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
     650:	00000012 	andeq	r0, r0, r2, lsl r0
     654:	0000000c 	andeq	r0, r0, ip
     658:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     65c:	080010a0 	stmdaeq	r0, {r5, r7, ip}
     660:	0000001a 	andeq	r0, r0, sl, lsl r0
     664:	0000000c 	andeq	r0, r0, ip
     668:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     66c:	080010bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip}
     670:	0000001a 	andeq	r0, r0, sl, lsl r0
     674:	0000000c 	andeq	r0, r0, ip
     678:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     67c:	080010d8 	stmdaeq	r0, {r3, r4, r6, r7, ip}
     680:	00000008 	andeq	r0, r0, r8
     684:	0000000c 	andeq	r0, r0, ip
     688:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     68c:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
     690:	00000008 	andeq	r0, r0, r8
     694:	0000000c 	andeq	r0, r0, ip
     698:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     69c:	080010e8 	stmdaeq	r0, {r3, r5, r6, r7, ip}
     6a0:	00000016 	andeq	r0, r0, r6, lsl r0
     6a4:	0000000c 	andeq	r0, r0, ip
     6a8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     6ac:	08001100 	stmdaeq	r0, {r8, ip}
     6b0:	0000001a 	andeq	r0, r0, sl, lsl r0
     6b4:	0000000c 	andeq	r0, r0, ip
     6b8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     6bc:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
     6c0:	00000016 	andeq	r0, r0, r6, lsl r0
     6c4:	0000000c 	andeq	r0, r0, ip
     6c8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     6cc:	08001134 	stmdaeq	r0, {r2, r4, r5, r8, ip}
     6d0:	00000016 	andeq	r0, r0, r6, lsl r0
     6d4:	0000000c 	andeq	r0, r0, ip
     6d8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     6dc:	0800114c 	stmdaeq	r0, {r2, r3, r6, r8, ip}
     6e0:	0000001a 	andeq	r0, r0, sl, lsl r0
     6e4:	0000000c 	andeq	r0, r0, ip
     6e8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     6ec:	08001168 	stmdaeq	r0, {r3, r5, r6, r8, ip}
     6f0:	0000000c 	andeq	r0, r0, ip
     6f4:	0000000c 	andeq	r0, r0, ip
     6f8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     6fc:	08001174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip}
     700:	0000001a 	andeq	r0, r0, sl, lsl r0
     704:	0000000c 	andeq	r0, r0, ip
     708:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     70c:	08001190 	stmdaeq	r0, {r4, r7, r8, ip}
     710:	00000012 	andeq	r0, r0, r2, lsl r0
     714:	0000000c 	andeq	r0, r0, ip
     718:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     71c:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
     720:	0000001a 	andeq	r0, r0, sl, lsl r0
     724:	0000000c 	andeq	r0, r0, ip
     728:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     72c:	080011c0 	stmdaeq	r0, {r6, r7, r8, ip}
     730:	0000001a 	andeq	r0, r0, sl, lsl r0
     734:	0000000c 	andeq	r0, r0, ip
     738:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     73c:	080011dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip}
     740:	00000016 	andeq	r0, r0, r6, lsl r0
     744:	0000000c 	andeq	r0, r0, ip
     748:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     74c:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
     750:	0000001a 	andeq	r0, r0, sl, lsl r0
     754:	0000000c 	andeq	r0, r0, ip
     758:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     75c:	08001210 	stmdaeq	r0, {r4, r9, ip}
     760:	00000014 	andeq	r0, r0, r4, lsl r0
     764:	00000014 	andeq	r0, r0, r4, lsl r0
     768:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     76c:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
     770:	0000003a 	andeq	r0, r0, sl, lsr r0
     774:	84040e43 	strhi	r0, [r4], #-3651	; 0xe43
     778:	00000001 	andeq	r0, r0, r1
     77c:	0000000c 	andeq	r0, r0, ip
     780:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     784:	08001260 	stmdaeq	r0, {r5, r6, r9, ip}
     788:	0000000c 	andeq	r0, r0, ip
     78c:	0000000c 	andeq	r0, r0, ip
     790:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     794:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
     798:	00000008 	andeq	r0, r0, r8
     79c:	00000014 	andeq	r0, r0, r4, lsl r0
     7a0:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     7a4:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
     7a8:	0000004a 	andeq	r0, r0, sl, asr #32
     7ac:	84080e43 	strhi	r0, [r8], #-3651	; 0xe43
     7b0:	00018502 	andeq	r8, r1, r2, lsl #10
     7b4:	0000000c 	andeq	r0, r0, ip
     7b8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     7bc:	080012c0 	stmdaeq	r0, {r6, r7, r9, ip}
     7c0:	00000010 	andeq	r0, r0, r0, lsl r0
     7c4:	0000000c 	andeq	r0, r0, ip
     7c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     7cc:	7c020001 	stcvc	0, cr0, [r2], {1}
     7d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     7d4:	00000014 	andeq	r0, r0, r4, lsl r0
     7d8:	000007c4 	andeq	r0, r0, r4, asr #15
     7dc:	080012d0 	stmdaeq	r0, {r4, r6, r7, r9, ip}
     7e0:	0000001a 	andeq	r0, r0, sl, lsl r0
     7e4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     7e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     7ec:	0000000c 	andeq	r0, r0, ip
     7f0:	000007c4 	andeq	r0, r0, r4, asr #15
     7f4:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
     7f8:	0000000c 	andeq	r0, r0, ip
     7fc:	0000000c 	andeq	r0, r0, ip
     800:	000007c4 	andeq	r0, r0, r4, asr #15
     804:	080012f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip}
     808:	0000000a 	andeq	r0, r0, sl
     80c:	00000014 	andeq	r0, r0, r4, lsl r0
     810:	000007c4 	andeq	r0, r0, r4, asr #15
     814:	08001304 	stmdaeq	r0, {r2, r8, r9, ip}
     818:	0000002e 	andeq	r0, r0, lr, lsr #32
     81c:	84040e49 	strhi	r0, [r4], #-3657	; 0xe49
     820:	00000001 	andeq	r0, r0, r1
     824:	0000000c 	andeq	r0, r0, ip
     828:	000007c4 	andeq	r0, r0, r4, asr #15
     82c:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
     830:	0000000a 	andeq	r0, r0, sl
     834:	0000000c 	andeq	r0, r0, ip
     838:	000007c4 	andeq	r0, r0, r4, asr #15
     83c:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
     840:	0000000c 	andeq	r0, r0, ip
     844:	0000000c 	andeq	r0, r0, ip
     848:	000007c4 	andeq	r0, r0, r4, asr #15
     84c:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
     850:	00000010 	andeq	r0, r0, r0, lsl r0
     854:	0000000c 	andeq	r0, r0, ip
     858:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     85c:	7c020001 	stcvc	0, cr0, [r2], {1}
     860:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     864:	00000014 	andeq	r0, r0, r4, lsl r0
     868:	00000854 	andeq	r0, r0, r4, asr r8
     86c:	0800135c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, ip}
     870:	00000070 	andeq	r0, r0, r0, ror r0
     874:	83080e41 	movwhi	r0, #36417	; 0x8e41
     878:	00018e02 	andeq	r8, r1, r2, lsl #28
     87c:	0000001c 	andeq	r0, r0, ip, lsl r0
     880:	00000854 	andeq	r0, r0, r4, asr r8
     884:	080013cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip}
     888:	000000e8 	andeq	r0, r0, r8, ror #1
     88c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xe41
     890:	86048505 	strhi	r8, [r4], -r5, lsl #10
     894:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     898:	280e4201 	stmdacs	lr, {r0, r9, lr}
     89c:	00000014 	andeq	r0, r0, r4, lsl r0
     8a0:	00000854 	andeq	r0, r0, r4, asr r8
     8a4:	080014b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, ip}
     8a8:	00000022 	andeq	r0, r0, r2, lsr #32
     8ac:	84040e42 	strhi	r0, [r4], #-3650	; 0xe42
     8b0:	00000001 	andeq	r0, r0, r1
     8b4:	0000000c 	andeq	r0, r0, ip
     8b8:	00000854 	andeq	r0, r0, r4, asr r8
     8bc:	080014d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip}
     8c0:	0000001a 	andeq	r0, r0, sl, lsl r0
     8c4:	0000000c 	andeq	r0, r0, ip
     8c8:	00000854 	andeq	r0, r0, r4, asr r8
     8cc:	080014f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip}
     8d0:	0000001a 	andeq	r0, r0, sl, lsl r0
     8d4:	0000000c 	andeq	r0, r0, ip
     8d8:	00000854 	andeq	r0, r0, r4, asr r8
     8dc:	08001510 	stmdaeq	r0, {r4, r8, sl, ip}
     8e0:	00000014 	andeq	r0, r0, r4, lsl r0
     8e4:	0000000c 	andeq	r0, r0, ip
     8e8:	00000854 	andeq	r0, r0, r4, asr r8
     8ec:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
     8f0:	0000001a 	andeq	r0, r0, sl, lsl r0
     8f4:	0000000c 	andeq	r0, r0, ip
     8f8:	00000854 	andeq	r0, r0, r4, asr r8
     8fc:	08001540 	stmdaeq	r0, {r6, r8, sl, ip}
     900:	0000001a 	andeq	r0, r0, sl, lsl r0
     904:	0000000c 	andeq	r0, r0, ip
     908:	00000854 	andeq	r0, r0, r4, asr r8
     90c:	0800155c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip}
     910:	00000012 	andeq	r0, r0, r2, lsl r0
     914:	0000000c 	andeq	r0, r0, ip
     918:	00000854 	andeq	r0, r0, r4, asr r8
     91c:	08001570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip}
     920:	0000001a 	andeq	r0, r0, sl, lsl r0
     924:	0000000c 	andeq	r0, r0, ip
     928:	00000854 	andeq	r0, r0, r4, asr r8
     92c:	0800158c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip}
     930:	00000014 	andeq	r0, r0, r4, lsl r0
     934:	0000000c 	andeq	r0, r0, ip
     938:	00000854 	andeq	r0, r0, r4, asr r8
     93c:	080015a0 	stmdaeq	r0, {r5, r7, r8, sl, ip}
     940:	0000001a 	andeq	r0, r0, sl, lsl r0
     944:	0000000c 	andeq	r0, r0, ip
     948:	00000854 	andeq	r0, r0, r4, asr r8
     94c:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
     950:	0000001a 	andeq	r0, r0, sl, lsl r0
     954:	0000000c 	andeq	r0, r0, ip
     958:	00000854 	andeq	r0, r0, r4, asr r8
     95c:	080015d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip}
     960:	0000001a 	andeq	r0, r0, sl, lsl r0
     964:	0000000c 	andeq	r0, r0, ip
     968:	00000854 	andeq	r0, r0, r4, asr r8
     96c:	080015f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, ip}
     970:	0000001a 	andeq	r0, r0, sl, lsl r0
     974:	0000000c 	andeq	r0, r0, ip
     978:	00000854 	andeq	r0, r0, r4, asr r8
     97c:	08001610 	stmdaeq	r0, {r4, r9, sl, ip}
     980:	0000001c 	andeq	r0, r0, ip, lsl r0
     984:	0000000c 	andeq	r0, r0, ip
     988:	00000854 	andeq	r0, r0, r4, asr r8
     98c:	0800162c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip}
     990:	0000001c 	andeq	r0, r0, ip, lsl r0
     994:	0000000c 	andeq	r0, r0, ip
     998:	00000854 	andeq	r0, r0, r4, asr r8
     99c:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
     9a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     9a4:	0000000c 	andeq	r0, r0, ip
     9a8:	00000854 	andeq	r0, r0, r4, asr r8
     9ac:	08001664 	stmdaeq	r0, {r2, r5, r6, r9, sl, ip}
     9b0:	0000001a 	andeq	r0, r0, sl, lsl r0
     9b4:	0000000c 	andeq	r0, r0, ip
     9b8:	00000854 	andeq	r0, r0, r4, asr r8
     9bc:	08001680 	stmdaeq	r0, {r7, r9, sl, ip}
     9c0:	00000004 	andeq	r0, r0, r4
     9c4:	0000000c 	andeq	r0, r0, ip
     9c8:	00000854 	andeq	r0, r0, r4, asr r8
     9cc:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
     9d0:	00000006 	andeq	r0, r0, r6
     9d4:	0000000c 	andeq	r0, r0, ip
     9d8:	00000854 	andeq	r0, r0, r4, asr r8
     9dc:	0800168c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip}
     9e0:	0000001a 	andeq	r0, r0, sl, lsl r0
     9e4:	0000000c 	andeq	r0, r0, ip
     9e8:	00000854 	andeq	r0, r0, r4, asr r8
     9ec:	080016a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip}
     9f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f4:	0000000c 	andeq	r0, r0, ip
     9f8:	00000854 	andeq	r0, r0, r4, asr r8
     9fc:	080016c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip}
     a00:	0000001a 	andeq	r0, r0, sl, lsl r0
     a04:	0000000c 	andeq	r0, r0, ip
     a08:	00000854 	andeq	r0, r0, r4, asr r8
     a0c:	080016e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip}
     a10:	00000008 	andeq	r0, r0, r8
     a14:	0000000c 	andeq	r0, r0, ip
     a18:	00000854 	andeq	r0, r0, r4, asr r8
     a1c:	080016e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip}
     a20:	0000001a 	andeq	r0, r0, sl, lsl r0
     a24:	0000000c 	andeq	r0, r0, ip
     a28:	00000854 	andeq	r0, r0, r4, asr r8
     a2c:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
     a30:	0000001a 	andeq	r0, r0, sl, lsl r0
     a34:	00000010 	andeq	r0, r0, r0, lsl r0
     a38:	00000854 	andeq	r0, r0, r4, asr r8
     a3c:	08001720 	stmdaeq	r0, {r5, r8, r9, sl, ip}
     a40:	00000018 	andeq	r0, r0, r8, lsl r0
     a44:	00080e41 	andeq	r0, r8, r1, asr #28
     a48:	0000000c 	andeq	r0, r0, ip
     a4c:	00000854 	andeq	r0, r0, r4, asr r8
     a50:	08001738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip}
     a54:	00000014 	andeq	r0, r0, r4, lsl r0
     a58:	0000000c 	andeq	r0, r0, ip
     a5c:	00000854 	andeq	r0, r0, r4, asr r8
     a60:	0800174c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip}
     a64:	00000018 	andeq	r0, r0, r8, lsl r0
     a68:	0000000c 	andeq	r0, r0, ip
     a6c:	00000854 	andeq	r0, r0, r4, asr r8
     a70:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
     a74:	00000010 	andeq	r0, r0, r0, lsl r0
     a78:	00000010 	andeq	r0, r0, r0, lsl r0
     a7c:	00000854 	andeq	r0, r0, r4, asr r8
     a80:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
     a84:	00000036 	andeq	r0, r0, r6, lsr r0
     a88:	00080e41 	andeq	r0, r8, r1, asr #28
     a8c:	0000000c 	andeq	r0, r0, ip
     a90:	00000854 	andeq	r0, r0, r4, asr r8
     a94:	080017ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, ip}
     a98:	00000008 	andeq	r0, r0, r8
     a9c:	0000000c 	andeq	r0, r0, ip
     aa0:	00000854 	andeq	r0, r0, r4, asr r8
     aa4:	080017b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip}
     aa8:	0000001c 	andeq	r0, r0, ip, lsl r0
     aac:	0000000c 	andeq	r0, r0, ip
     ab0:	00000854 	andeq	r0, r0, r4, asr r8
     ab4:	080017d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip}
     ab8:	00000008 	andeq	r0, r0, r8
     abc:	0000000c 	andeq	r0, r0, ip
     ac0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ac4:	7c020001 	stcvc	0, cr0, [r2], {1}
     ac8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     acc:	00000014 	andeq	r0, r0, r4, lsl r0
     ad0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     ad4:	080017d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip}
     ad8:	000001f6 	strdeq	r0, [r0], -r6
     adc:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
     ae0:	00000001 	andeq	r0, r0, r1
     ae4:	0000001c 	andeq	r0, r0, ip, lsl r0
     ae8:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     aec:	080019d0 	stmdaeq	r0, {r4, r6, r7, r8, fp, ip}
     af0:	0000006a 	andeq	r0, r0, sl, rrx
     af4:	84140e46 	ldrhi	r0, [r4], #-3654	; 0xe46
     af8:	86048505 	strhi	r8, [r4], -r5, lsl #10
     afc:	88028703 	stmdahi	r2, {r0, r1, r8, r9, sl, pc}
     b00:	00000001 	andeq	r0, r0, r1
     b04:	0000000c 	andeq	r0, r0, ip
     b08:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b0c:	08001a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip}
     b10:	00000022 	andeq	r0, r0, r2, lsr #32
     b14:	0000000c 	andeq	r0, r0, ip
     b18:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b1c:	08001a60 	stmdaeq	r0, {r5, r6, r9, fp, ip}
     b20:	00000014 	andeq	r0, r0, r4, lsl r0
     b24:	0000000c 	andeq	r0, r0, ip
     b28:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b2c:	08001a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip}
     b30:	00000014 	andeq	r0, r0, r4, lsl r0
     b34:	0000000c 	andeq	r0, r0, ip
     b38:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b3c:	08001a88 	stmdaeq	r0, {r3, r7, r9, fp, ip}
     b40:	00000014 	andeq	r0, r0, r4, lsl r0
     b44:	0000000c 	andeq	r0, r0, ip
     b48:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b4c:	08001a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip}
     b50:	00000004 	andeq	r0, r0, r4
     b54:	0000000c 	andeq	r0, r0, ip
     b58:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b5c:	08001aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip}
     b60:	00000006 	andeq	r0, r0, r6
     b64:	0000000c 	andeq	r0, r0, ip
     b68:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b6c:	08001aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, ip}
     b70:	00000018 	andeq	r0, r0, r8, lsl r0
     b74:	0000000c 	andeq	r0, r0, ip
     b78:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b7c:	08001ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip}
     b80:	00000014 	andeq	r0, r0, r4, lsl r0
     b84:	0000000c 	andeq	r0, r0, ip
     b88:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b8c:	08001ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip}
     b90:	0000000a 	andeq	r0, r0, sl
     b94:	0000000c 	andeq	r0, r0, ip
     b98:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     b9c:	08001ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, ip}
     ba0:	00000008 	andeq	r0, r0, r8
     ba4:	0000000c 	andeq	r0, r0, ip
     ba8:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     bac:	08001ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, ip}
     bb0:	00000008 	andeq	r0, r0, r8
     bb4:	0000000c 	andeq	r0, r0, ip
     bb8:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     bbc:	08001af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip}
     bc0:	00000008 	andeq	r0, r0, r8
     bc4:	00000014 	andeq	r0, r0, r4, lsl r0
     bc8:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     bcc:	08001af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip}
     bd0:	00000040 	andeq	r0, r0, r0, asr #32
     bd4:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
     bd8:	00000001 	andeq	r0, r0, r1
     bdc:	00000014 	andeq	r0, r0, r4, lsl r0
     be0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     be4:	08001b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip}
     be8:	0000003a 	andeq	r0, r0, sl, lsr r0
     bec:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
     bf0:	00000001 	andeq	r0, r0, r1
     bf4:	0000000c 	andeq	r0, r0, ip
     bf8:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     bfc:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
     c00:	00000040 	andeq	r0, r0, r0, asr #32
     c04:	00000018 	andeq	r0, r0, r8, lsl r0
     c08:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     c0c:	08001bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip}
     c10:	00000058 	andeq	r0, r0, r8, asr r0
     c14:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
     c18:	86028503 	strhi	r8, [r2], -r3, lsl #10
     c1c:	00000001 	andeq	r0, r0, r1
     c20:	00000014 	andeq	r0, r0, r4, lsl r0
     c24:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     c28:	08001c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip}
     c2c:	0000003a 	andeq	r0, r0, sl, lsr r0
     c30:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
     c34:	00000001 	andeq	r0, r0, r1
     c38:	0000000c 	andeq	r0, r0, ip
     c3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c40:	7c020001 	stcvc	0, cr0, [r2], {1}
     c44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c48:	00000014 	andeq	r0, r0, r4, lsl r0
     c4c:	00000c38 	andeq	r0, r0, r8, lsr ip
     c50:	08001c48 	stmdaeq	r0, {r3, r6, sl, fp, ip}
     c54:	000000dc 	ldrdeq	r0, [r0], -ip
     c58:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c5c:	00018e02 	andeq	r8, r1, r2, lsl #28
     c60:	00000020 	andeq	r0, r0, r0, lsr #32
     c64:	00000c38 	andeq	r0, r0, r8, lsr ip
     c68:	08001d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip}
     c6c:	00000052 	andeq	r0, r0, r2, asr r0
     c70:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
     c74:	86068507 	strhi	r8, [r6], -r7, lsl #10
     c78:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     c7c:	8a028903 	bhi	a3090 <_Min_Stack_Size+0xa2c90>
     c80:	00000001 	andeq	r0, r0, r1
     c84:	0000001c 	andeq	r0, r0, ip, lsl r0
     c88:	00000c38 	andeq	r0, r0, r8, lsr ip
     c8c:	08001d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip}
     c90:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c94:	84180e49 	ldrhi	r0, [r8], #-3657	; 0xe49
     c98:	86058506 	strhi	r8, [r5], -r6, lsl #10
     c9c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     ca0:	00018902 	andeq	r8, r1, r2, lsl #18
     ca4:	0000000c 	andeq	r0, r0, ip
     ca8:	00000c38 	andeq	r0, r0, r8, lsr ip
     cac:	08001e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip}
     cb0:	00000018 	andeq	r0, r0, r8, lsl r0
     cb4:	0000000c 	andeq	r0, r0, ip
     cb8:	00000c38 	andeq	r0, r0, r8, lsr ip
     cbc:	08001e80 	stmdaeq	r0, {r7, r9, sl, fp, ip}
     cc0:	0000000e 	andeq	r0, r0, lr
     cc4:	0000000c 	andeq	r0, r0, ip
     cc8:	00000c38 	andeq	r0, r0, r8, lsr ip
     ccc:	08001e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip}
     cd0:	0000001a 	andeq	r0, r0, sl, lsl r0
     cd4:	0000000c 	andeq	r0, r0, ip
     cd8:	00000c38 	andeq	r0, r0, r8, lsr ip
     cdc:	08001eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip}
     ce0:	0000001a 	andeq	r0, r0, sl, lsl r0
     ce4:	0000000c 	andeq	r0, r0, ip
     ce8:	00000c38 	andeq	r0, r0, r8, lsr ip
     cec:	08001ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, ip}
     cf0:	00000016 	andeq	r0, r0, r6, lsl r0
     cf4:	0000000c 	andeq	r0, r0, ip
     cf8:	00000c38 	andeq	r0, r0, r8, lsr ip
     cfc:	08001ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip}
     d00:	0000001c 	andeq	r0, r0, ip, lsl r0
     d04:	0000000c 	andeq	r0, r0, ip
     d08:	00000c38 	andeq	r0, r0, r8, lsr ip
     d0c:	08001efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip}
     d10:	0000001e 	andeq	r0, r0, lr, lsl r0
     d14:	0000000c 	andeq	r0, r0, ip
     d18:	00000c38 	andeq	r0, r0, r8, lsr ip
     d1c:	08001f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip}
     d20:	0000001a 	andeq	r0, r0, sl, lsl r0
     d24:	0000000c 	andeq	r0, r0, ip
     d28:	00000c38 	andeq	r0, r0, r8, lsr ip
     d2c:	08001f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip}
     d30:	0000001a 	andeq	r0, r0, sl, lsl r0
     d34:	00000014 	andeq	r0, r0, r4, lsl r0
     d38:	00000c38 	andeq	r0, r0, r8, lsr ip
     d3c:	08001f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip}
     d40:	00000048 	andeq	r0, r0, r8, asr #32
     d44:	84080e4d 	strhi	r0, [r8], #-3661	; 0xe4d
     d48:	00018502 	andeq	r8, r1, r2, lsl #10
     d4c:	0000000c 	andeq	r0, r0, ip
     d50:	00000c38 	andeq	r0, r0, r8, lsr ip
     d54:	08001f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip}
     d58:	00000006 	andeq	r0, r0, r6
     d5c:	0000000c 	andeq	r0, r0, ip
     d60:	00000c38 	andeq	r0, r0, r8, lsr ip
     d64:	08001fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip}
     d68:	00000004 	andeq	r0, r0, r4
     d6c:	0000000c 	andeq	r0, r0, ip
     d70:	00000c38 	andeq	r0, r0, r8, lsr ip
     d74:	08001fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, ip}
     d78:	0000001a 	andeq	r0, r0, sl, lsl r0
     d7c:	0000000c 	andeq	r0, r0, ip
     d80:	00000c38 	andeq	r0, r0, r8, lsr ip
     d84:	08001fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip}
     d88:	0000000c 	andeq	r0, r0, ip
     d8c:	0000000c 	andeq	r0, r0, ip
     d90:	00000c38 	andeq	r0, r0, r8, lsr ip
     d94:	08001fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, ip}
     d98:	0000000c 	andeq	r0, r0, ip
     d9c:	0000000c 	andeq	r0, r0, ip
     da0:	00000c38 	andeq	r0, r0, r8, lsr ip
     da4:	08001fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
     da8:	00000006 	andeq	r0, r0, r6
     dac:	0000000c 	andeq	r0, r0, ip
     db0:	00000c38 	andeq	r0, r0, r8, lsr ip
     db4:	08001fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip}
     db8:	00000014 	andeq	r0, r0, r4, lsl r0
     dbc:	0000000c 	andeq	r0, r0, ip
     dc0:	00000c38 	andeq	r0, r0, r8, lsr ip
     dc4:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
     dc8:	0000001e 	andeq	r0, r0, lr, lsl r0
     dcc:	0000000c 	andeq	r0, r0, ip
     dd0:	00000c38 	andeq	r0, r0, r8, lsr ip
     dd4:	08002018 	stmdaeq	r0, {r3, r4, sp}
     dd8:	0000000c 	andeq	r0, r0, ip
     ddc:	0000000c 	andeq	r0, r0, ip
     de0:	00000c38 	andeq	r0, r0, r8, lsr ip
     de4:	08002024 	stmdaeq	r0, {r2, r5, sp}
     de8:	00000008 	andeq	r0, r0, r8
     dec:	00000014 	andeq	r0, r0, r4, lsl r0
     df0:	00000c38 	andeq	r0, r0, r8, lsr ip
     df4:	0800202c 	stmdaeq	r0, {r2, r3, r5, sp}
     df8:	0000002a 	andeq	r0, r0, sl, lsr #32
     dfc:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
     e00:	00000001 	andeq	r0, r0, r1
     e04:	0000000c 	andeq	r0, r0, ip
     e08:	00000c38 	andeq	r0, r0, r8, lsr ip
     e0c:	08002058 	stmdaeq	r0, {r3, r4, r6, sp}
     e10:	00000012 	andeq	r0, r0, r2, lsl r0
     e14:	0000000c 	andeq	r0, r0, ip
     e18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e1c:	7c020001 	stcvc	0, cr0, [r2], {1}
     e20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e24:	0000000c 	andeq	r0, r0, ip
     e28:	00000e14 	andeq	r0, r0, r4, lsl lr
     e2c:	0800206c 	stmdaeq	r0, {r2, r3, r5, r6, sp}
     e30:	0000001e 	andeq	r0, r0, lr, lsl r0
     e34:	00000018 	andeq	r0, r0, r8, lsl r0
     e38:	00000e14 	andeq	r0, r0, r4, lsl lr
     e3c:	0800208c 	stmdaeq	r0, {r2, r3, r7, sp}
     e40:	00000080 	andeq	r0, r0, r0, lsl #1
     e44:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
     e48:	86028503 	strhi	r8, [r2], -r3, lsl #10
     e4c:	00000001 	andeq	r0, r0, r1
     e50:	0000000c 	andeq	r0, r0, ip
     e54:	00000e14 	andeq	r0, r0, r4, lsl lr
     e58:	0800210c 	stmdaeq	r0, {r2, r3, r8, sp}
     e5c:	0000000e 	andeq	r0, r0, lr
     e60:	0000000c 	andeq	r0, r0, ip
     e64:	00000e14 	andeq	r0, r0, r4, lsl lr
     e68:	0800211c 	stmdaeq	r0, {r2, r3, r4, r8, sp}
     e6c:	00000010 	andeq	r0, r0, r0, lsl r0
     e70:	0000000c 	andeq	r0, r0, ip
     e74:	00000e14 	andeq	r0, r0, r4, lsl lr
     e78:	0800212c 	stmdaeq	r0, {r2, r3, r5, r8, sp}
     e7c:	00000014 	andeq	r0, r0, r4, lsl r0
     e80:	0000000c 	andeq	r0, r0, ip
     e84:	00000e14 	andeq	r0, r0, r4, lsl lr
     e88:	08002140 	stmdaeq	r0, {r6, r8, sp}
     e8c:	0000000c 	andeq	r0, r0, ip
     e90:	0000000c 	andeq	r0, r0, ip
     e94:	00000e14 	andeq	r0, r0, r4, lsl lr
     e98:	0800214c 	stmdaeq	r0, {r2, r3, r6, r8, sp}
     e9c:	00000014 	andeq	r0, r0, r4, lsl r0
     ea0:	0000000c 	andeq	r0, r0, ip
     ea4:	00000e14 	andeq	r0, r0, r4, lsl lr
     ea8:	08002160 	stmdaeq	r0, {r5, r6, r8, sp}
     eac:	0000000c 	andeq	r0, r0, ip
     eb0:	0000000c 	andeq	r0, r0, ip
     eb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     eb8:	7c020001 	stcvc	0, cr0, [r2], {1}
     ebc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ec0:	00000014 	andeq	r0, r0, r4, lsl r0
     ec4:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     ec8:	0800216c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sp}
     ecc:	0000001a 	andeq	r0, r0, sl, lsl r0
     ed0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     ed4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ed8:	00000018 	andeq	r0, r0, r8, lsl r0
     edc:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     ee0:	08002188 	stmdaeq	r0, {r3, r7, r8, sp}
     ee4:	000000b6 	strheq	r0, [r0], -r6
     ee8:	840c0e45 	strhi	r0, [ip], #-3653	; 0xe45
     eec:	86028503 	strhi	r8, [r2], -r3, lsl #10
     ef0:	00000001 	andeq	r0, r0, r1
     ef4:	0000000c 	andeq	r0, r0, ip
     ef8:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     efc:	08002240 	stmdaeq	r0, {r6, r9, sp}
     f00:	00000018 	andeq	r0, r0, r8, lsl r0
     f04:	0000000c 	andeq	r0, r0, ip
     f08:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     f0c:	08002258 	stmdaeq	r0, {r3, r4, r6, r9, sp}
     f10:	00000012 	andeq	r0, r0, r2, lsl r0
     f14:	0000000c 	andeq	r0, r0, ip
     f18:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     f1c:	0800226c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sp}
     f20:	00000012 	andeq	r0, r0, r2, lsl r0
     f24:	0000000c 	andeq	r0, r0, ip
     f28:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     f2c:	08002280 	stmdaeq	r0, {r7, r9, sp}
     f30:	0000001c 	andeq	r0, r0, ip, lsl r0
     f34:	00000018 	andeq	r0, r0, r8, lsl r0
     f38:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     f3c:	0800229c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sp}
     f40:	00000072 	andeq	r0, r0, r2, ror r0
     f44:	84100e46 	ldrhi	r0, [r0], #-3654	; 0xe46
     f48:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f4c:	00018702 	andeq	r8, r1, r2, lsl #14
     f50:	0000000c 	andeq	r0, r0, ip
     f54:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     f58:	08002310 	stmdaeq	r0, {r4, r8, r9, sp}
     f5c:	0000001a 	andeq	r0, r0, sl, lsl r0
     f60:	00000018 	andeq	r0, r0, r8, lsl r0
     f64:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     f68:	0800232c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp}
     f6c:	00000072 	andeq	r0, r0, r2, ror r0
     f70:	84100e46 	ldrhi	r0, [r0], #-3654	; 0xe46
     f74:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f78:	00018702 	andeq	r8, r1, r2, lsl #14
     f7c:	0000000c 	andeq	r0, r0, ip
     f80:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     f84:	080023a0 	stmdaeq	r0, {r5, r7, r8, r9, sp}
     f88:	0000001a 	andeq	r0, r0, sl, lsl r0
     f8c:	0000000c 	andeq	r0, r0, ip
     f90:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     f94:	080023bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sp}
     f98:	0000001c 	andeq	r0, r0, ip, lsl r0
     f9c:	0000000c 	andeq	r0, r0, ip
     fa0:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     fa4:	080023d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sp}
     fa8:	0000001c 	andeq	r0, r0, ip, lsl r0
     fac:	0000000c 	andeq	r0, r0, ip
     fb0:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     fb4:	080023f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sp}
     fb8:	0000002c 	andeq	r0, r0, ip, lsr #32
     fbc:	0000000c 	andeq	r0, r0, ip
     fc0:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     fc4:	08002420 	stmdaeq	r0, {r5, sl, sp}
     fc8:	0000000c 	andeq	r0, r0, ip
     fcc:	0000000c 	andeq	r0, r0, ip
     fd0:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     fd4:	0800242c 	stmdaeq	r0, {r2, r3, r5, sl, sp}
     fd8:	0000001a 	andeq	r0, r0, sl, lsl r0
     fdc:	0000000c 	andeq	r0, r0, ip
     fe0:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     fe4:	08002448 	stmdaeq	r0, {r3, r6, sl, sp}
     fe8:	00000014 	andeq	r0, r0, r4, lsl r0
     fec:	0000000c 	andeq	r0, r0, ip
     ff0:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     ff4:	0800245c 	stmdaeq	r0, {r2, r3, r4, r6, sl, sp}
     ff8:	0000000c 	andeq	r0, r0, ip
     ffc:	0000000c 	andeq	r0, r0, ip
    1000:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
    1004:	08002468 	stmdaeq	r0, {r3, r5, r6, sl, sp}
    1008:	00000020 	andeq	r0, r0, r0, lsr #32
    100c:	0000000c 	andeq	r0, r0, ip
    1010:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
    1014:	08002488 	stmdaeq	r0, {r3, r7, sl, sp}
    1018:	0000000e 	andeq	r0, r0, lr
    101c:	0000000c 	andeq	r0, r0, ip
    1020:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1024:	7c020001 	stcvc	0, cr0, [r2], {1}
    1028:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    102c:	00000014 	andeq	r0, r0, r4, lsl r0
    1030:	0000101c 	andeq	r1, r0, ip, lsl r0
    1034:	08002498 	stmdaeq	r0, {r3, r4, r7, sl, sp}
    1038:	0000001a 	andeq	r0, r0, sl, lsl r0
    103c:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1040:	00018e02 	andeq	r8, r1, r2, lsl #28
    1044:	00000018 	andeq	r0, r0, r8, lsl r0
    1048:	0000101c 	andeq	r1, r0, ip, lsl r0
    104c:	080024b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, sp}
    1050:	000000a4 	andeq	r0, r0, r4, lsr #1
    1054:	840c0e4b 	strhi	r0, [ip], #-3659	; 0xe4b
    1058:	86028503 	strhi	r8, [r2], -r3, lsl #10
    105c:	00000001 	andeq	r0, r0, r1
    1060:	0000000c 	andeq	r0, r0, ip
    1064:	0000101c 	andeq	r1, r0, ip, lsl r0
    1068:	08002558 	stmdaeq	r0, {r3, r4, r6, r8, sl, sp}
    106c:	00000022 	andeq	r0, r0, r2, lsr #32
    1070:	0000000c 	andeq	r0, r0, ip
    1074:	0000101c 	andeq	r1, r0, ip, lsl r0
    1078:	0800257c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, sp}
    107c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1080:	0000000c 	andeq	r0, r0, ip
    1084:	0000101c 	andeq	r1, r0, ip, lsl r0
    1088:	08002598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp}
    108c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1090:	00000014 	andeq	r0, r0, r4, lsl r0
    1094:	0000101c 	andeq	r1, r0, ip, lsl r0
    1098:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
    109c:	00000036 	andeq	r0, r0, r6, lsr r0
    10a0:	84040e4b 	strhi	r0, [r4], #-3659	; 0xe4b
    10a4:	00000001 	andeq	r0, r0, r1
    10a8:	0000000c 	andeq	r0, r0, ip
    10ac:	0000101c 	andeq	r1, r0, ip, lsl r0
    10b0:	080025ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, sp}
    10b4:	0000000a 	andeq	r0, r0, sl
    10b8:	0000000c 	andeq	r0, r0, ip
    10bc:	0000101c 	andeq	r1, r0, ip, lsl r0
    10c0:	080025f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, sp}
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	0000000c 	andeq	r0, r0, ip
    10cc:	0000101c 	andeq	r1, r0, ip, lsl r0
    10d0:	08002604 	stmdaeq	r0, {r2, r9, sl, sp}
    10d4:	0000000c 	andeq	r0, r0, ip
    10d8:	00000024 	andeq	r0, r0, r4, lsr #32
    10dc:	0000101c 	andeq	r1, r0, ip, lsl r0
    10e0:	08002610 	stmdaeq	r0, {r4, r9, sl, sp}
    10e4:	000000bc 	strheq	r0, [r0], -ip
    10e8:	84200e45 	strthi	r0, [r0], #-3653	; 0xe45
    10ec:	86078508 	strhi	r8, [r7], -r8, lsl #10
    10f0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    10f4:	8a038904 	bhi	e350c <_Min_Stack_Size+0xe310c>
    10f8:	02018b02 	andeq	r8, r1, #2048	; 0x800
    10fc:	00280e53 	eoreq	r0, r8, r3, asr lr
    1100:	00000014 	andeq	r0, r0, r4, lsl r0
    1104:	0000101c 	andeq	r1, r0, ip, lsl r0
    1108:	080026cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, sp}
    110c:	00000032 	andeq	r0, r0, r2, lsr r0
    1110:	84040e42 	strhi	r0, [r4], #-3650	; 0xe42
    1114:	00000001 	andeq	r0, r0, r1
    1118:	0000000c 	andeq	r0, r0, ip
    111c:	0000101c 	andeq	r1, r0, ip, lsl r0
    1120:	08002700 	stmdaeq	r0, {r8, r9, sl, sp}
    1124:	00000014 	andeq	r0, r0, r4, lsl r0
    1128:	0000000c 	andeq	r0, r0, ip
    112c:	0000101c 	andeq	r1, r0, ip, lsl r0
    1130:	08002714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp}
    1134:	0000001c 	andeq	r0, r0, ip, lsl r0
    1138:	0000000c 	andeq	r0, r0, ip
    113c:	0000101c 	andeq	r1, r0, ip, lsl r0
    1140:	08002730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp}
    1144:	00000008 	andeq	r0, r0, r8
    1148:	0000000c 	andeq	r0, r0, ip
    114c:	0000101c 	andeq	r1, r0, ip, lsl r0
    1150:	08002738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, sp}
    1154:	00000014 	andeq	r0, r0, r4, lsl r0
    1158:	00000014 	andeq	r0, r0, r4, lsl r0
    115c:	0000101c 	andeq	r1, r0, ip, lsl r0
    1160:	0800274c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, sp}
    1164:	00000042 	andeq	r0, r0, r2, asr #32
    1168:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    116c:	00018502 	andeq	r8, r1, r2, lsl #10
    1170:	0000000c 	andeq	r0, r0, ip
    1174:	0000101c 	andeq	r1, r0, ip, lsl r0
    1178:	08002790 	stmdaeq	r0, {r4, r7, r8, r9, sl, sp}
    117c:	0000000a 	andeq	r0, r0, sl
    1180:	0000000c 	andeq	r0, r0, ip
    1184:	0000101c 	andeq	r1, r0, ip, lsl r0
    1188:	0800279c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, sp}
    118c:	00000020 	andeq	r0, r0, r0, lsr #32
    1190:	00000014 	andeq	r0, r0, r4, lsl r0
    1194:	0000101c 	andeq	r1, r0, ip, lsl r0
    1198:	080027bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, sp}
    119c:	0000001a 	andeq	r0, r0, sl, lsl r0
    11a0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    11a4:	00018502 	andeq	r8, r1, r2, lsl #10
    11a8:	0000000c 	andeq	r0, r0, ip
    11ac:	0000101c 	andeq	r1, r0, ip, lsl r0
    11b0:	080027d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, sp}
    11b4:	0000000c 	andeq	r0, r0, ip
    11b8:	00000014 	andeq	r0, r0, r4, lsl r0
    11bc:	0000101c 	andeq	r1, r0, ip, lsl r0
    11c0:	080027e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp}
    11c4:	00000072 	andeq	r0, r0, r2, ror r0
    11c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    11cc:	00018502 	andeq	r8, r1, r2, lsl #10
    11d0:	0000000c 	andeq	r0, r0, ip
    11d4:	0000101c 	andeq	r1, r0, ip, lsl r0
    11d8:	08002858 	stmdaeq	r0, {r3, r4, r6, fp, sp}
    11dc:	00000004 	andeq	r0, r0, r4
    11e0:	0000000c 	andeq	r0, r0, ip
    11e4:	0000101c 	andeq	r1, r0, ip, lsl r0
    11e8:	0800285c 	stmdaeq	r0, {r2, r3, r4, r6, fp, sp}
    11ec:	00000004 	andeq	r0, r0, r4
    11f0:	00000018 	andeq	r0, r0, r8, lsl r0
    11f4:	0000101c 	andeq	r1, r0, ip, lsl r0
    11f8:	08002860 	stmdaeq	r0, {r5, r6, fp, sp}
    11fc:	00000056 	andeq	r0, r0, r6, asr r0
    1200:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    1204:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1208:	00018702 	andeq	r8, r1, r2, lsl #14
    120c:	0000000c 	andeq	r0, r0, ip
    1210:	0000101c 	andeq	r1, r0, ip, lsl r0
    1214:	080028b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, sp}
    1218:	00000056 	andeq	r0, r0, r6, asr r0
    121c:	0000000c 	andeq	r0, r0, ip
    1220:	0000101c 	andeq	r1, r0, ip, lsl r0
    1224:	08002910 	stmdaeq	r0, {r4, r8, fp, sp}
    1228:	0000001a 	andeq	r0, r0, sl, lsl r0
    122c:	0000000c 	andeq	r0, r0, ip
    1230:	0000101c 	andeq	r1, r0, ip, lsl r0
    1234:	0800292c 	stmdaeq	r0, {r2, r3, r5, r8, fp, sp}
    1238:	00000014 	andeq	r0, r0, r4, lsl r0
    123c:	0000000c 	andeq	r0, r0, ip
    1240:	0000101c 	andeq	r1, r0, ip, lsl r0
    1244:	08002940 	stmdaeq	r0, {r6, r8, fp, sp}
    1248:	0000000c 	andeq	r0, r0, ip
    124c:	0000000c 	andeq	r0, r0, ip
    1250:	0000101c 	andeq	r1, r0, ip, lsl r0
    1254:	0800294c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp}
    1258:	0000001e 	andeq	r0, r0, lr, lsl r0
    125c:	0000000c 	andeq	r0, r0, ip
    1260:	0000101c 	andeq	r1, r0, ip, lsl r0
    1264:	0800296c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, sp}
    1268:	0000000c 	andeq	r0, r0, ip
    126c:	0000000c 	andeq	r0, r0, ip
    1270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1274:	7c020001 	stcvc	0, cr0, [r2], {1}
    1278:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    127c:	00000014 	andeq	r0, r0, r4, lsl r0
    1280:	0000126c 	andeq	r1, r0, ip, ror #4
    1284:	08002978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, sp}
    1288:	00000038 	andeq	r0, r0, r8, lsr r0
    128c:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
    1290:	00000001 	andeq	r0, r0, r1
    1294:	00000020 	andeq	r0, r0, r0, lsr #32
    1298:	0000126c 	andeq	r1, r0, ip, ror #4
    129c:	080029b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, sp}
    12a0:	00000112 	andeq	r0, r0, r2, lsl r1
    12a4:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
    12a8:	86068507 	strhi	r8, [r6], -r7, lsl #10
    12ac:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    12b0:	8a028903 	bhi	a36c4 <_Min_Stack_Size+0xa32c4>
    12b4:	00000001 	andeq	r0, r0, r1
    12b8:	00000018 	andeq	r0, r0, r8, lsl r0
    12bc:	0000126c 	andeq	r1, r0, ip, ror #4
    12c0:	08002ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, sp}
    12c4:	00000058 	andeq	r0, r0, r8, asr r0
    12c8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    12cc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    12d0:	00018702 	andeq	r8, r1, r2, lsl #14
    12d4:	0000000c 	andeq	r0, r0, ip
    12d8:	0000126c 	andeq	r1, r0, ip, ror #4
    12dc:	08002b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, sp}
    12e0:	00000022 	andeq	r0, r0, r2, lsr #32
    12e4:	0000000c 	andeq	r0, r0, ip
    12e8:	0000126c 	andeq	r1, r0, ip, ror #4
    12ec:	08002b40 	stmdaeq	r0, {r6, r8, r9, fp, sp}
    12f0:	0000001e 	andeq	r0, r0, lr, lsl r0
    12f4:	00000020 	andeq	r0, r0, r0, lsr #32
    12f8:	0000126c 	andeq	r1, r0, ip, ror #4
    12fc:	08002b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, sp}
    1300:	00000078 	andeq	r0, r0, r8, ror r0
    1304:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
    1308:	86078508 	strhi	r8, [r7], -r8, lsl #10
    130c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1310:	8a038904 	bhi	e3728 <_Min_Stack_Size+0xe3328>
    1314:	00018b02 	andeq	r8, r1, r2, lsl #22
    1318:	00000014 	andeq	r0, r0, r4, lsl r0
    131c:	0000126c 	andeq	r1, r0, ip, ror #4
    1320:	08002bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, sp}
    1324:	0000002e 	andeq	r0, r0, lr, lsr #32
    1328:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    132c:	00018502 	andeq	r8, r1, r2, lsl #10
    1330:	0000000c 	andeq	r0, r0, ip
    1334:	0000126c 	andeq	r1, r0, ip, ror #4
    1338:	08002c08 	stmdaeq	r0, {r3, sl, fp, sp}
    133c:	00000034 	andeq	r0, r0, r4, lsr r0
    1340:	0000000c 	andeq	r0, r0, ip
    1344:	0000126c 	andeq	r1, r0, ip, ror #4
    1348:	08002c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp}
    134c:	00000034 	andeq	r0, r0, r4, lsr r0
    1350:	0000000c 	andeq	r0, r0, ip
    1354:	0000126c 	andeq	r1, r0, ip, ror #4
    1358:	08002c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, sp}
    135c:	00000010 	andeq	r0, r0, r0, lsl r0
    1360:	0000000c 	andeq	r0, r0, ip
    1364:	0000126c 	andeq	r1, r0, ip, ror #4
    1368:	08002c80 	stmdaeq	r0, {r7, sl, fp, sp}
    136c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1370:	00000018 	andeq	r0, r0, r8, lsl r0
    1374:	0000126c 	andeq	r1, r0, ip, ror #4
    1378:	08002c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, sp}
    137c:	00000064 	andeq	r0, r0, r4, rrx
    1380:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    1384:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1388:	00018702 	andeq	r8, r1, r2, lsl #14
    138c:	00000014 	andeq	r0, r0, r4, lsl r0
    1390:	0000126c 	andeq	r1, r0, ip, ror #4
    1394:	08002d00 	stmdaeq	r0, {r8, sl, fp, sp}
    1398:	0000002e 	andeq	r0, r0, lr, lsr #32
    139c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    13a0:	00018502 	andeq	r8, r1, r2, lsl #10
    13a4:	0000000c 	andeq	r0, r0, ip
    13a8:	0000126c 	andeq	r1, r0, ip, ror #4
    13ac:	08002d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, sp}
    13b0:	00000028 	andeq	r0, r0, r8, lsr #32
    13b4:	00000014 	andeq	r0, r0, r4, lsl r0
    13b8:	0000126c 	andeq	r1, r0, ip, ror #4
    13bc:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
    13c0:	0000002c 	andeq	r0, r0, ip, lsr #32
    13c4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    13c8:	00018502 	andeq	r8, r1, r2, lsl #10
    13cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    13d0:	0000126c 	andeq	r1, r0, ip, ror #4
    13d4:	08002d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, sp}
    13d8:	000000d4 	ldrdeq	r0, [r0], -r4
    13dc:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
    13e0:	86058506 	strhi	r8, [r5], -r6, lsl #10
    13e4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    13e8:	00018902 	andeq	r8, r1, r2, lsl #18
    13ec:	00000014 	andeq	r0, r0, r4, lsl r0
    13f0:	0000126c 	andeq	r1, r0, ip, ror #4
    13f4:	08002e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, sp}
    13f8:	00000036 	andeq	r0, r0, r6, lsr r0
    13fc:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1400:	00018502 	andeq	r8, r1, r2, lsl #10
    1404:	00000014 	andeq	r0, r0, r4, lsl r0
    1408:	0000126c 	andeq	r1, r0, ip, ror #4
    140c:	08002e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, sp}
    1410:	00000024 	andeq	r0, r0, r4, lsr #32
    1414:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1418:	00018502 	andeq	r8, r1, r2, lsl #10
    141c:	0000000c 	andeq	r0, r0, ip
    1420:	0000126c 	andeq	r1, r0, ip, ror #4
    1424:	08002eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, sp}
    1428:	0000001c 	andeq	r0, r0, ip, lsl r0
    142c:	0000000c 	andeq	r0, r0, ip
    1430:	0000126c 	andeq	r1, r0, ip, ror #4
    1434:	08002ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, sp}
    1438:	00000012 	andeq	r0, r0, r2, lsl r0
    143c:	0000000c 	andeq	r0, r0, ip
    1440:	0000126c 	andeq	r1, r0, ip, ror #4
    1444:	08002ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, sp}
    1448:	00000012 	andeq	r0, r0, r2, lsl r0
    144c:	0000000c 	andeq	r0, r0, ip
    1450:	0000126c 	andeq	r1, r0, ip, ror #4
    1454:	08002ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, sp}
    1458:	00000026 	andeq	r0, r0, r6, lsr #32
    145c:	0000000c 	andeq	r0, r0, ip
    1460:	0000126c 	andeq	r1, r0, ip, ror #4
    1464:	08002f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, sp}
    1468:	000000a2 	andeq	r0, r0, r2, lsr #1
    146c:	0000000c 	andeq	r0, r0, ip
    1470:	0000126c 	andeq	r1, r0, ip, ror #4
    1474:	08002fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp}
    1478:	00000042 	andeq	r0, r0, r2, asr #32
    147c:	0000000c 	andeq	r0, r0, ip
    1480:	0000126c 	andeq	r1, r0, ip, ror #4
    1484:	08003008 	stmdaeq	r0, {r3, ip, sp}
    1488:	00000054 	andeq	r0, r0, r4, asr r0
    148c:	00000014 	andeq	r0, r0, r4, lsl r0
    1490:	0000126c 	andeq	r1, r0, ip, ror #4
    1494:	0800305c 	stmdaeq	r0, {r2, r3, r4, r6, ip, sp}
    1498:	0000006c 	andeq	r0, r0, ip, rrx
    149c:	84040e42 	strhi	r0, [r4], #-3650	; 0xe42
    14a0:	00000001 	andeq	r0, r0, r1
    14a4:	0000000c 	andeq	r0, r0, ip
    14a8:	0000126c 	andeq	r1, r0, ip, ror #4
    14ac:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
    14b0:	00000054 	andeq	r0, r0, r4, asr r0
    14b4:	0000000c 	andeq	r0, r0, ip
    14b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14bc:	7c020001 	stcvc	0, cr0, [r2], {1}
    14c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14c4:	00000014 	andeq	r0, r0, r4, lsl r0
    14c8:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
    14cc:	0800311c 	stmdaeq	r0, {r2, r3, r4, r8, ip, sp}
    14d0:	00000016 	andeq	r0, r0, r6, lsl r0
    14d4:	83080e41 	movwhi	r0, #36417	; 0x8e41
    14d8:	00018e02 	andeq	r8, r1, r2, lsl #28
    14dc:	0000000c 	andeq	r0, r0, ip
    14e0:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
    14e4:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
    14e8:	0000001c 	andeq	r0, r0, ip, lsl r0
    14ec:	0000000c 	andeq	r0, r0, ip
    14f0:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
    14f4:	08003150 	stmdaeq	r0, {r4, r6, r8, ip, sp}
    14f8:	0000000c 	andeq	r0, r0, ip
    14fc:	0000000c 	andeq	r0, r0, ip
    1500:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
    1504:	0800315c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, sp}
    1508:	0000001c 	andeq	r0, r0, ip, lsl r0
    150c:	0000000c 	andeq	r0, r0, ip
    1510:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
    1514:	08003178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, sp}
    1518:	00000014 	andeq	r0, r0, r4, lsl r0
    151c:	0000000c 	andeq	r0, r0, ip
    1520:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
    1524:	0800318c 	stmdaeq	r0, {r2, r3, r7, r8, ip, sp}
    1528:	00000010 	andeq	r0, r0, r0, lsl r0
    152c:	0000000c 	andeq	r0, r0, ip
    1530:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
    1534:	0800319c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, sp}
    1538:	00000014 	andeq	r0, r0, r4, lsl r0
    153c:	0000000c 	andeq	r0, r0, ip
    1540:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
    1544:	080031b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, sp}
    1548:	00000010 	andeq	r0, r0, r0, lsl r0
